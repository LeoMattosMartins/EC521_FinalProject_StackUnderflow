[
  {
    "url": "https://stackoverflow.com/questions/26159416/init-array-of-structs-in-go",
    "body": "    type opt struct {\n        shortnm      byte\n        longnm, help string\n        needArg      bool\n    }\n\n    var basenameOpts []opt\n    func init() {\n        basenameOpts = []opt{\n            opt {\n                shortnm: 'a',\n                longnm: \"multiple\",\n                needArg: false,\n                help: \"Usage for a\",\n            },\n            opt {\n                shortnm: 'b',\n                longnm: \"b-option\",\n                needArg: false,\n               help: \"Usage for b\",\n            },\n        }\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/46128016/insert-a-value-in-a-slice-at-a-given-index",
    "body": "go version\n# go version go1.16.3 linux/amd64\nmake bench\ngo test -benchmem -bench . -args -n 32\n# BenchmarkInsert-8    \t 4125085  275.0 ns/op  512 B/op  1 allocs/op\n# BenchmarkInsert2-8   \t 3778551  316.0 ns/op  512 B/op  1 allocs/op\ngo test -benchmem -bench . -args -n 1000\n# BenchmarkInsert-8    \t  198364  5876 ns/op  16384 B/op  1 allocs/op\n# BenchmarkInsert2-8   \t  205197  7123 ns/op  16384 B/op  1 allocs/op\ngo test -benchmem -bench . -args -n 1000000\n# BenchmarkInsert-8    \t     643  1898436 ns/op\t10002437 B/op  1 allocs/op\n# BenchmarkInsert2-8   \t     368  3248385 ns/op\t10002436 B/op  1 allocs/op"
  },
  {
    "url": "https://stackoverflow.com/questions/46128016/insert-a-value-in-a-slice-at-a-given-index",
    "body": "func insert(a []int, index int, value int) []int {\n\ta = append(a[:index+1], a[index:]...) // Step 1+2\n\ta[index] = value                      // Step 3\n\treturn a\n}\nfunc insert2(a []int, index int, value int) []int {\n\tlast := len(a) - 1\n\ta = append(a, a[last])           // Step 1\n\tcopy(a[index+1:], a[index:last]) // Step 2\n\ta[index] = value                 // Step 3\n\treturn a\n}\nfunc BenchmarkInsert(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tr = insert(a, 2, 42)\n\t}\n}\nfunc BenchmarkInsert2(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tr = insert2(a, 2, 42)\n\t}\n}\nvar (\n\tn    = flag.Int(\"n\", 32, \"buffer length\")\n\ta, r []int\n)\n// We use TestMain to set up the buffer.\nfunc TestMain(m *testing.M) {\n\tflag.Parse()\n\ta = make([]int, *n)\n\tos.Exit(m.Run())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46128016/insert-a-value-in-a-slice-at-a-given-index",
    "body": "package main\nimport \"fmt\"\nfunc insert(a []int, index int, value int) []int {\n\tn := len(a)\n\tif index < 0 {\n\t\tindex = (index%n + n) % n\n\t}\n\tswitch {\n\tcase index == n: // nil or empty slice or after last element\n\t\treturn append(a, value)\n\tcase index < n: // index < len(a)\n\t\ta = append(a[:index+1], a[index:]...)\n\t\ta[index] = value\n\t\treturn a\n\tcase index < cap(a): // index > len(a)\n\t\ta = a[:index+1]\n\t\tfor i := n; i < index; i++ {\n\t\t\ta[i] = 0\n\t\t}\n\t\ta[index] = value\n\t\treturn a\n\tdefault:\n\t\tb := make([]int, index+1) // malloc\n\t\tif n > 0 {\n\t\t\tcopy(b, a)\n\t\t}\n\t\tb[index] = value\n\t\treturn b\n\t}\n}\nfunc main() {\n\ta := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ta = a[:5]\n\tfmt.Println(insert(a, 7, 70)) // [0 1 2 3 4 0 0 70]\n\ta = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ta = a[:4]\n\tfmt.Println(insert(a, 5, 50)) // [0 1 2 3 0 50]\n\tfmt.Println(insert(make([]int, 0, 50), 10, 10)) // [0 0 0 0 0 0 0 0 0 0 10]\n\tfmt.Println(insert([]int{1}, -1, 10))       // [10 1]\n\tfmt.Println(insert([]int{1, 2, 3}, -2, 10)) // [1 10 2 3]\n\tfmt.Println(insert([]int{1, 2, 3}, -1, 10)) // [1 2 10 3]\n\tfmt.Println(insert([]int{1, 2, 3}, -4, 10)) // [1 2 10 3]\n\tfmt.Println(insert(nil, 0, 0))       // [0]\n\tfmt.Println(insert([]int{}, 0, 0))   // [0]\n\tfmt.Println(insert([]int{1}, 1, 10)) // [1 10]\n\tfmt.Println(insert(nil, 5, 50)) // [0 0 0 0 0 50]\n\tfmt.Println(insert(make([]int, 0, 1), 1, 10)) // [0 10]\n\tfmt.Println(insert(make([]int, 0, 1), 2, 20)) // [0 0 20]\n\tfmt.Println(insert(make([]int, 0, 1), 3, 30)) // [0 0 0 30]\n\tfmt.Println(insert([]int{0, 10, 20, 30}, 5, 50)) // [0 10 20 30 0 50]\n\tfmt.Println(insert([]int{0}, 5, 50))             // [0 0 0 0 0 50]\n\tfmt.Println(insert([]int{0, 10}, 0, 0))          // [0 0 10]\n\tfmt.Println(insert([]int{0, 10}, 1, 5))          // [0 5 10]\n\tfmt.Println(insert(make([]int, 5, 50), 0, 0))    // [0 0 0 0 0 0]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46128016/insert-a-value-in-a-slice-at-a-given-index",
    "body": "package main\nimport \"fmt\"\nfunc insert[T any](a []T, index int, value T) []T {\n\tn := len(a)\n\tif index < 0 {\n\t\tindex = (index%n + n) % n\n\t}\n\tswitch {\n\tcase index == n: // nil or empty slice or after last element\n\t\treturn append(a, value)\n\tcase index < n: // index < len(a)\n\t\ta = append(a[:index+1], a[index:]...)\n\t\ta[index] = value\n\t\treturn a\n\tcase index < cap(a): // index > len(a)\n\t\ta = a[:index+1]\n\t\tvar zero T\n\t\tfor i := n; i < index; i++ {\n\t\t\ta[i] = zero\n\t\t}\n\t\ta[index] = value\n\t\treturn a\n\tdefault:\n\t\tb := make([]T, index+1) // malloc\n\t\tif n > 0 {\n\t\t\tcopy(b, a)\n\t\t}\n\t\tb[index] = value\n\t\treturn b\n\t}\n}\nfunc main() {\n\ta := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ta = a[:5]\n\tfmt.Println(insert(a, 7, 70)) // [0 1 2 3 4 0 0 70]\n\ta = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\ta = a[:4]\n\tfmt.Println(insert(a, 5, 50)) // [0 1 2 3 0 50]\n\tfmt.Println(insert(make([]int, 0, 50), 10, 10)) // [0 0 0 0 0 0 0 0 0 0 10]\n\tfmt.Println(insert([]int{1}, -1, 10))       // [10 1]\n\tfmt.Println(insert([]int{1, 2, 3}, -2, 10)) // [1 10 2 3]\n\tfmt.Println(insert([]int{1, 2, 3}, -1, 10)) // [1 2 10 3]\n\tfmt.Println(insert([]int{1, 2, 3}, -4, 10)) // [1 2 10 3]\n\tfmt.Println(insert(nil, 0, 0))       // [0]\n\tfmt.Println(insert([]int{}, 0, 0))   // [0]\n\tfmt.Println(insert([]int{1}, 1, 10)) // [1 10]\n\tfmt.Println(insert(nil, 5, 50)) // [0 0 0 0 0 50]\n\tfmt.Println(insert(make([]int, 0, 1), 1, 10)) // [0 10]\n\tfmt.Println(insert(make([]int, 0, 1), 2, 20)) // [0 0 20]\n\tfmt.Println(insert(make([]int, 0, 1), 3, 30)) // [0 0 0 30]\n\tfmt.Println(insert([]int{0, 10, 20, 30}, 5, 50)) // [0 10 20 30 0 50]\n\tfmt.Println(insert([]int{0}, 5, 50))             // [0 0 0 0 0 50]\n\tfmt.Println(insert([]int{0, 10}, 0, 0))          // [0 0 10]\n\tfmt.Println(insert([]int{0, 10}, 1, 5))          // [0 5 10]\n\tfmt.Println(insert(make([]int, 5, 50), 0, 0))    // [0 0 0 0 0 0]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/2137357/getpasswd-functionality-in-go",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n    \"syscall\"\n\t\"golang.org/x/term\"\n)\nfunc main() {\n\tusername, password, _ := credentials()\n\tfmt.Printf(\"Username: %s, Password: %s\\n\", username, password)\n}\nfunc credentials() (string, string, error) {\n    reader := bufio.NewReader(os.Stdin)\n    fmt.Print(\"Enter Username: \")\n    username, err := reader.ReadString('\\n')\n    if err != nil {\n        return \"\", \"\", err\n    }\n    fmt.Print(\"Enter Password: \")\n    bytePassword, err := term.ReadPassword(int(syscall.Stdin))\n    if err != nil {\n        return \"\", \"\", err\n    }\n    password := string(bytePassword)\n    return strings.TrimSpace(username), strings.TrimSpace(password), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/28014591/nameless-fields-in-go-structs",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\ntype Widget struct {\n\tname string\n}\ntype WrappedWidget struct {\n\tWidget       // this is the promoted field\n    time.Time    // this is another anonymous field that has a runtime name of Time\n\tprice int64  // normal field\n}\nfunc main() {\n\twidget := Widget{\"my widget\"}\n\twrappedWidget := WrappedWidget{widget, time.Now(), 1234}\n\tfmt.Printf(\"Widget named %s, created at %s, has price %d\\n\",\n        wrappedWidget.name, // name is passed on to the wrapped Widget since it's\n                            // the promoted field\n        wrappedWidget.Time, // We access the anonymous time.Time as Time\n        wrappedWidget.price)\n\tfmt.Printf(\"Widget named %s, created at %s, has price %d\\n\",\n        wrappedWidget.Widget.name, // We can also access the Widget directly\n                                   // via Widget\n        wrappedWidget.Time,\n        wrappedWidget.price)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71628061/difference-between-any-interface-as-constraint-vs-type-of-argument",
    "body": "printInterface(12.5, 0.1)    // ok\nprintInterface(12.5, \"blah\") // ok, int and string individually assignable to any\nprintAny(10, 20)             // ok, T inferred to int, 20 assignable to int\nprintAny(10, \"k\")            // compiler error, T inferred to int, \"k\" not assignable to int\nprintAny[any](10, \"k\")       // ok, T explicitly instantiated to any, int and string assignable to any\nprintAny(nil, nil)           // compiler error, no way to infer T\nprintAny[any](nil, nil)      // ok, T explicitly instantiated to any, nil assignable to any"
  },
  {
    "url": "https://stackoverflow.com/questions/70888240/whats-the-meaning-of-the-new-tilde-token-in-go",
    "body": "// ByteSeq not allowed, or must convert func argument first\nfunc foobar[T interface { []byte }](t T) { /* ... */ }\n// ByteSeq allowed\nfunc bazquux[T interface { ~[]byte }](t T) { /* ... */ }\nfunc main() {\n    b := []byte{0x00, 0x01}\n    seq := ByteSeq{0x02, 0x03}\n    foobar(b)           // ok\n    foobar(seq)         // compiler error\n    foobar([]byte(seq)) // ok, allows inference\n    foobar[[]byte](seq) // ok, explicit instantiation, then can assign seq to argument type []byte\n    bazquux(b)          // ok\n    bazquux(seq)        // ok\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/40051213/where-is-golang-picking-up-root-cas-from",
    "body": "// Copyright 2015 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\npackage x509\n// Possible certificate files; stop after finding one.\nvar certFiles = []string{\n\t\"/etc/ssl/certs/ca-certificates.crt\",                // Debian/Ubuntu/Gentoo etc.\n\t\"/etc/pki/tls/certs/ca-bundle.crt\",                  // Fedora/RHEL 6\n\t\"/etc/ssl/ca-bundle.pem\",                            // OpenSUSE\n\t\"/etc/pki/tls/cacert.pem\",                           // OpenELEC\n\t\"/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem\", // CentOS/RHEL 7\n\t\"/etc/ssl/cert.pem\",                                 // Alpine Linux\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/14765395/why-am-i-seeing-zgotmplz-in-my-go-html-template-output",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"os\"\n)\nfunc main() {\n\tfuncMap := template.FuncMap{\n\t\t\"attr\": func(s string) template.HTMLAttr {\n\t\t\treturn template.HTMLAttr(s)\n\t\t},\n\t\t\"safe\": func(s string) template.HTML {\n\t\t\treturn template.HTML(s)\n\t\t},\n\t}\n\ttemplate.Must(template.New(\"Template\").Funcs(funcMap).Parse(`\n    <option {{.attr | attr}}>test</option>\n        {{.html | safe}}\n     `)).Execute(os.Stdout, map[string]string{\n\t\t\"attr\": `selected=\"selected\"`,\n\t\t\"html\": `<option selected=\"selected\">option</option>`,\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/39333102/how-to-create-or-update-a-record-with-gorm",
    "body": "// Update columns to new value on `id` conflict\nDB.Clauses(clause.OnConflict{\n  Columns:   []clause.Column{{Name: \"id\"}}, // key colume\n  DoUpdates: clause.AssignmentColumns([]string{\"name\", \"age\"}), // column needed to be updated\n}).Create(&users)\n// MERGE INTO \"users\" USING *** WHEN NOT MATCHED THEN INSERT *** WHEN MATCHED THEN UPDATE SET \"name\"=\"excluded\".\"name\"; SQL Server\n// INSERT INTO \"users\" *** ON CONFLICT (\"id\") DO UPDATE SET \"name\"=\"excluded\".\"name\", \"age\"=\"excluded\".\"age\"; PostgreSQL\n// INSERT INTO `users` *** ON DUPLICATE KEY UPDATE `name`=VALUES(name),`age=VALUES(age); MySQL"
  },
  {
    "url": "https://stackoverflow.com/questions/52799280/context-confusion-regarding-cancellation",
    "body": "ctx, cancel := context.WithTimeout(\n    context.Background(),\n    time.Duration(3*time.Second))\ngo func(ctx context.Context) {\n    // simulate a process that takes 2 seconds to complete\n    time.Sleep(2 * time.Second)\n    // cancel context by force, assuming the whole process is complete\n    cancel()\n}(ctx)\nselect {\ncase <-ctx.Done():\n    switch ctx.Err() {\n    case context.DeadlineExceeded:\n        fmt.Println(\"context timeout exceeded\")\n    case context.Canceled:\n        fmt.Println(\"context cancelled by force. whole process is complete\")\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52799280/context-confusion-regarding-cancellation",
    "body": "ctx, cancel := context.WithTimeout(\n    context.Background(),\n    time.Duration(3*time.Second))\ngo func(ctx context.Context) {\n    // simulate a process that takes 4 second to complete\n    time.Sleep(4 * time.Second)\n    // cancel context by force, assuming the whole process is complete\n    cancel()\n}(ctx)\nselect {\ncase <-ctx.Done():\n    switch ctx.Err() {\n    case context.DeadlineExceeded:\n        fmt.Println(\"context timeout exceeded\")\n    case context.Canceled:\n        fmt.Println(\"context cancelled by force. whole process is complete\")\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52799280/context-confusion-regarding-cancellation",
    "body": "ctx, cancel := context.WithTimeout(\n    context.Background(),\n    time.Duration(3*time.Second))\nchErr := make(chan error)\ngo func(ctx context.Context) {\n    // ... some process ...\n    if err != nil {\n        // cancel context by force, an error occurred\n        chErr <- err\n        return\n    }\n    // ... some other process ...\n    // cancel context by force, assuming the whole process is complete\n    cancel()\n}(ctx)\nselect {\ncase <-ctx.Done():\n    switch ctx.Err() {\n    case context.DeadlineExceeded:\n        fmt.Println(\"context timeout exceeded\")\n    case context.Canceled:\n        fmt.Println(\"context cancelled by force. whole process is complete\")\n    }\ncase err := <-chErr:\n    fmt.Println(\"process fail causing by some error:\", err.Error())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51779243/copy-a-folder-in-go",
    "body": "func CopyDirectory(scrDir, dest string) error {\n\tentries, err := os.ReadDir(scrDir)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, entry := range entries {\n\t\tsourcePath := filepath.Join(scrDir, entry.Name())\n\t\tdestPath := filepath.Join(dest, entry.Name())\n\t\tfileInfo, err := os.Stat(sourcePath)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tstat, ok := fileInfo.Sys().(*syscall.Stat_t)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"failed to get raw syscall.Stat_t data for '%s'\", sourcePath)\n\t\t}\n\t\tswitch fileInfo.Mode() & os.ModeType{\n\t\tcase os.ModeDir:\n\t\t\tif err := CreateIfNotExists(destPath, 0755); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := CopyDirectory(sourcePath, destPath); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase os.ModeSymlink:\n\t\t\tif err := CopySymLink(sourcePath, destPath); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tdefault:\n\t\t\tif err := Copy(sourcePath, destPath); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tif err := os.Lchown(destPath, int(stat.Uid), int(stat.Gid)); err != nil {\n\t\t\treturn err\n\t\t}\n        fInfo, err := entry.Info()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tisSymlink := fInfo.Mode()&os.ModeSymlink != 0\n\t\tif !isSymlink {\n\t\t\tif err := os.Chmod(destPath, fInfo.Mode()); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\nfunc Copy(srcFile, dstFile string) error {\n\tout, err := os.Create(dstFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer out.Close()\n\tin, err := os.Open(srcFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer in.Close()\n\t_, err = io.Copy(out, in)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc Exists(filePath string) bool {\n\tif _, err := os.Stat(filePath); os.IsNotExist(err) {\n\t\treturn false\n\t}\n\treturn true\n}\nfunc CreateIfNotExists(dir string, perm os.FileMode) error {\n\tif Exists(dir) {\n\t\treturn nil\n\t}\n\tif err := os.MkdirAll(dir, perm); err != nil {\n\t\treturn fmt.Errorf(\"failed to create directory: '%s', error: '%s'\", dir, err.Error())\n\t}\n\treturn nil\n}\nfunc CopySymLink(source, dest string) error {\n\tlink, err := os.Readlink(source)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn os.Symlink(link, dest)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74522713/what-are-possible-go-build-ldflags-options",
    "body": "$ go build -ldflags=\"-help\" ./main.go\nusage: link [options] main.o\n  -B note\n    \tadd an ELF NT_GNU_BUILD_ID note when using ELF\n  -E entry\n    \tset entry symbol name\n  -H type\n    \tset header type\n  -I linker\n    \tuse linker as ELF dynamic linker\n  -L directory\n    \tadd specified directory to library path\n  -R quantum\n    \tset address rounding quantum (default -1)\n  -T address\n    \tset text segment address (default -1)\n  -V\tprint version and exit\n  -X definition\n    \tadd string value definition of the form importpath.name=value\n  -a\tno-op (deprecated)\n  -asan\n    \tenable ASan interface\n  -aslr\n    \tenable ASLR for buildmode=c-shared on windows (default true)\n  -benchmark string\n    \tset to 'mem' or 'cpu' to enable phase benchmarking\n  -benchmarkprofile base\n    \temit phase profiles to base_phase.{cpu,mem}prof\n  -buildid id\n    \trecord id as Go toolchain build id\n  -buildmode mode\n    \tset build mode\n  -c\tdump call graph\n  -compressdwarf\n    \tcompress DWARF if possible (default true)\n  -cpuprofile file\n    \twrite cpu profile to file\n  -d\tdisable dynamic executable\n  -debugnosplit\n    \tdump nosplit call graph\n  -debugtextsize int\n    \tdebug text section max size\n  -debugtramp int\n    \tdebug trampolines\n  -dumpdep\n    \tdump symbol dependency graph\n  -extar string\n    \tarchive program for buildmode=c-archive\n  -extld linker\n    \tuse linker when linking in external mode\n  -extldflags flags\n    \tpass flags to external linker\n  -f\tignore version mismatch\n  -g\tdisable go package data checks\n  -h\thalt on error\n  -importcfg file\n    \tread import configuration from file\n  -installsuffix suffix\n    \tset package directory suffix\n  -k symbol\n    \tset field tracking symbol\n  -libgcc string\n    \tcompiler support lib for internal linking; use \"none\" to disable\n  -linkmode mode\n    \tset link mode\n  -linkshared\n    \tlink against installed Go shared libraries\n  -memprofile file\n    \twrite memory profile to file\n  -memprofilerate rate\n    \tset runtime.MemProfileRate to rate\n  -msan\n    \tenable MSan interface\n  -n\tdump symbol table\n  -o file\n    \twrite output to file\n  -pluginpath string\n    \tfull path name for plugin\n  -r path\n    \tset the ELF dynamic linker search path to dir1:dir2:...\n  -race\n    \tenable race detector\n  -s\tdisable symbol table\n  -strictdups int\n    \tsanity check duplicate symbol contents during object file reading (1=warn 2=err).\n  -tmpdir directory\n    \tuse directory for temporary files\n  -v\tprint link trace\n  -w\tdisable DWARF generation"
  },
  {
    "url": "https://stackoverflow.com/questions/69825533/why-does-go-sum-include-so-many-older-packages",
    "body": "github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI="
  },
  {
    "url": "https://stackoverflow.com/questions/36617949/how-to-use-base-template-file-for-golang-html-template",
    "body": "// templates.go\npackage templates\nimport (\n\t\"embed\"\n\t\"html/template\"\n\t\"io\"\n\t\"github.com/labstack/echo/v4\"\n)\n//go:embed views/*.html\nvar tmplFS embed.FS\ntype Template struct {\n\ttemplates *template.Template\n}\nfunc New() *Template {\n\tfuncMap := template.FuncMap{\n\t\t\"inc\": inc,\n\t}\n\ttemplates := template.Must(template.New(\"\").Funcs(funcMap).ParseFS(tmplFS, \"views/*.html\"))\n\treturn &Template{\n\t\ttemplates: templates,\n\t}\n}\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n\ttmpl := template.Must(t.templates.Clone())\n\ttmpl = template.Must(tmpl.ParseFS(tmplFS, \"views/\"+name))\n\treturn tmpl.ExecuteTemplate(w, name, data)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/31558066/how-to-ask-for-administer-privileges-on-windows-with-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"golang.org/x/sys/windows\"\n\t\"os\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\t// if not elevated, relaunch by shellexecute with runas verb set\n\tif !amAdmin() {\n\t\trunMeElevated()\n\t}\n\ttime.Sleep(10*time.Second)\n}\nfunc runMeElevated() {\n\tverb := \"runas\"\n\texe, _ := os.Executable()\n\tcwd, _ := os.Getwd()\n\targs := strings.Join(os.Args[1:], \" \")\n\n\tverbPtr, _ := syscall.UTF16PtrFromString(verb)\n\texePtr, _ := syscall.UTF16PtrFromString(exe)\n\tcwdPtr, _ := syscall.UTF16PtrFromString(cwd)\n\targPtr, _ := syscall.UTF16PtrFromString(args)\n\n\tvar showCmd int32 = 1 //SW_NORMAL\n\n\terr := windows.ShellExecute(0, verbPtr, exePtr, argPtr, cwdPtr, showCmd)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\nfunc amAdmin() bool {\n\t_, err := os.Open(\"\\\\\\\\.\\\\PHYSICALDRIVE0\")\n\tif err != nil {\n\t\tfmt.Println(\"admin no\")\n\t\treturn false\n\t}\n\tfmt.Println(\"admin yes\")\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/10277933/reading-a-non-utf-8-text-file-in-go",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"golang.org/x/text/encoding/simplifiedchinese\"\n\t\"golang.org/x/text/transform\"\n)\n// Encoding to use. Since this implements the encoding.Encoding\n// interface from golang.org/x/text/encoding you can trivially\n// change this out for any of the other implemented encoders,\n// e.g. `traditionalchinese.Big5`, `charmap.Windows1252`,\n// `korean.EUCKR`, etc.\nvar enc = simplifiedchinese.GBK\nfunc main() {\n\tconst filename = \"example_GBK_file\"\n\texampleWriteGBK(filename)\n\texampleReadGBK(filename)\n}\nfunc exampleReadGBK(filename string) {\n\t// Read UTF-8 from a GBK encoded file.\n\tf, err := os.Open(filename)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tr := transform.NewReader(f, enc.NewDecoder())\n\t// Read converted UTF-8 from `r` as needed.\n\t// As an example we'll read line-by-line showing what was read:\n\tsc := bufio.NewScanner(r)\n\tfor sc.Scan() {\n\t\tfmt.Printf(\"Read line: %s\\n\", sc.Bytes())\n\t}\n\tif err = sc.Err(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = f.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc exampleWriteGBK(filename string) {\n\t// Write UTF-8 to a GBK encoded file.\n\tf, err := os.Create(filename)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tw := transform.NewWriter(f, enc.NewEncoder())\n\t// Write UTF-8 to `w` as desired.\n\t// As an example we'll write some text from the Wikipedia\n\t// GBK page that includes Chinese.\n\t_, err = fmt.Fprintln(w,\n\t\t`In 1995, China National Information Technology Standardization\nTechnical Committee set down the Chinese Internal Code Specification\n(Chinese: 汉字内码扩展规范（GBK）; pinyin: Hànzì Nèimǎ\nKuòzhǎn Guīfàn (GBK)), Version 1.0, known as GBK 1.0, which is a\nslight extension of Codepage 936. The newly added 95 characters were not\nfound in GB 13000.1-1993, and were provisionally assigned Unicode PUA\ncode points.`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = f.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/36716117/validating-google-sign-in-id-token-in-go",
    "body": "map[\n    aud:<Your web application client id>\n    azp:<Your android application client id>\n    email:<Authenticated user email>\n    email_verified:true\n    exp:<expire at>\n    family_name:<Authenticated user lastname>\n    given_name:<Authenticated user firstname>\n    iat:<issued at>\n    iss: <accounts.google.com or https://accounts.google.com>\n    locale:en\n    name:<Authenticated User fullname>\n    picture:<Authenticated User Photo URL>\n    sub: <Google Account ID [Use this to identify a id uniquely]>\n]"
  },
  {
    "url": "https://stackoverflow.com/questions/69573113/how-can-i-instantiate-a-non-nil-pointer-of-type-argument-with-generic-go",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype SetGetter[V any, T any] interface {\n\tSet(V)\n\tGet() V\n    *T\n}\nfunc SetGetterSlice[V any, T any, PT SetGetter[V, T]](values []V) []T {\n\tout := make([]T, len(values))\n\tfor i, v := range values {\n\t\tp := PT(&out[i])\n\t\tp.Set(v)\n\t}\n\treturn out\n}\n// Count implements SetGetter interface\ntype Count struct {\n\tx int\n}\nfunc (c *Count) Set(x int) { c.x = x }\nfunc (c *Count) Get() int  { return c.x }\nfunc main() {\n\tints := []int{1, 2, 3, 4, 5}\n    // instantiate with base type\n\tsgs := SetGetterSlice[int, Count](ints)\n\tfor _, s := range sgs {\n\t\tfmt.Println(s.Get()) // prints 1,2,3,4,5 each in a newline\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/50740902/move-a-file-to-a-different-drive-with-go",
    "body": "import (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\nfunc MoveFile(sourcePath, destPath string) error {\n\tinputFile, err := os.Open(sourcePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Couldn't open source file: %v\", err)\n\t}\n\tdefer inputFile.Close()\n\toutputFile, err := os.Create(destPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Couldn't open dest file: %v\", err)\n\t}\n\tdefer outputFile.Close()\n\t_, err = io.Copy(outputFile, inputFile)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Couldn't copy to dest from source: %v\", err)\n\t}\n\tinputFile.Close() // for Windows, close before trying to remove: https://stackoverflow.com/a/64943554/246801\n\terr = os.Remove(sourcePath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Couldn't remove source file: %v\", err)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/47179024/how-to-check-if-a-request-was-cancelled",
    "body": "// Create a context that is already canceled\nctx, cancel := context.WithCancel(context.Background())\ncancel()\n// Create the request with it\nr, _ := http.NewRequestWithContext(ctx, \"GET\", \"http://example.com\", nil)\n// Do it, it will immediately fail because the context is canceled.\n_, err := http.DefaultClient.Do(r)\nlog.Println(err) // Get http://example.com: context canceled\n// This prints false, because the http client wraps the context.Canceled\n// error into another one with extra information.\nlog.Println(err == context.Canceled)\n// This prints true, because errors.Is checks all the errors in the wrap chain,\n// and returns true if any of them matches.\nlog.Println(errors.Is(err, context.Canceled))"
  },
  {
    "url": "https://stackoverflow.com/questions/37869793/how-do-i-zip-a-directory-containing-sub-directories-or-files-in-golang",
    "body": "package main\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n)\n// Zips \"./input\" into \"./output.zip\"\nfunc main() {\n\tfile, err := os.Create(\"output.zip\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\tw := zip.NewWriter(file)\n\tdefer w.Close()\n\twalker := func(path string, info os.FileInfo, err error) error {\n\t\tfmt.Printf(\"Crawling: %#v\\n\", path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif info.IsDir() {\n\t\t\treturn nil\n\t\t}\n\t\tfile, err := os.Open(path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer file.Close()\n        // Ensure that `path` is not absolute; it should not start with \"/\".\n        // This snippet happens to work because I don't use\n        // absolute paths, but ensure your real-world code\n        // transforms path into a zip-root relative path.\n\t\tf, err := w.Create(path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = io.Copy(f, file)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\terr = filepath.Walk(\"input\", walker)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56086405/how-to-check-if-an-error-is-deadline-exceeded-error",
    "body": "// Create a context with a very short timeout\nctx, cancel := context.WithTimeout(context.Background(), time.Millisecond)\ndefer cancel()\n// Create the request with it\nr, _ := http.NewRequest(\"GET\", \"http://example.com\", nil)\nr = r.WithContext(ctx)\n// Do it, it will fail because the request will take longer than 1ms\n_, err := http.DefaultClient.Do(r)\nlog.Println(err) // Get http://example.com: context deadline exceeded\n// This prints false, because the http client wraps the context.DeadlineExceeded\n// error into another one with extra information.\nlog.Println(err == context.DeadlineExceeded)\n// This prints true, because errors.Is checks all the errors in the wrap chain,\n// and returns true if any of them matches.\nlog.Println(errors.Is(err, context.DeadlineExceeded))"
  },
  {
    "url": "https://stackoverflow.com/questions/46474972/kubernetes-kubectl-get-running-pods",
    "body": "$ echo exec logs port-forward | xargs -n1 kubectl help | grep -C1 'service\\|deploy\\|job'\n  # Get output from running 'date' command from the first pod of the deployment mydeployment, using the first container by default\n  kubectl exec deploy/mydeployment -- date\n  # Get output from running 'date' command from the first pod of the service myservice, using the first container by default\n  kubectl exec svc/myservice -- date\n--\n  # Return snapshot logs from first container of a job named hello\n  kubectl logs job/hello\n  # Return snapshot logs from container nginx-1 of a deployment named nginx\n  kubectl logs deployment/nginx -c nginx-1\n--\n Use resource type/name such as deployment/mydeployment to select a pod. Resource type defaults to 'pod' if omitted.\n--\n  # Listen on ports 5000 and 6000 locally, forwarding data to/from ports 5000 and 6000 in a pod selected by the deployment\n  kubectl port-forward deployment/mydeployment 5000 6000\n  # Listen on port 8443 locally, forwarding to the targetPort of the service's port named \"https\" in a pod selected by the service\n  kubectl port-forward service/myservice 8443:https"
  },
  {
    "url": "https://stackoverflow.com/questions/31751764/get-remote-ssl-certificate-in-golang",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"log\"\n)\nfunc main() {\n    conf := &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t}\n\tconn, err := tls.Dial(\"tcp\", \"www.google.com:443\", conf)\n\tif err != nil {\n\t\tlog.Println(\"Error in Dial\", err)\n\t\treturn\n\t}\n\tdefer conn.Close()\n    certs := conn.ConnectionState().PeerCertificates\n    for _, cert := range certs {\n\t\tfmt.Printf(\"Issuer Name: %s\\n\", cert.Issuer)\n\t\tfmt.Printf(\"Expiry: %s \\n\", cert.NotAfter.Format(\"2006-January-02\"))\n        fmt.Printf(\"Common Name: %s \\n\", cert.Issuer.CommonName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73986477/how-to-put-cobra-sub-commands-sources-into-separate-folders",
    "body": "$ go build\n$ ./example\nA longer description that spans multiple lines and likely contains\nexamples and usage of using your application. For example:\nCobra is a CLI library for Go that empowers applications.\nThis application is a tool to generate the needed files\nto quickly create a Cobra application.\nUsage:\n  example [command]\nAvailable Commands:\n  bar         A brief description of your command\n  completion  Generate the autocompletion script for the specified shell\n  foo         A brief description of your command\n  help        Help about any command\nFlags:\n  -h, --help     help for example\n  -t, --toggle   Help message for toggle\nUse \"example [command] --help\" for more information about a command."
  },
  {
    "url": "https://stackoverflow.com/questions/36357791/gin-router-path-segment-conflicts-with-existing-wildcard",
    "body": "func main() {\n    apiEngine := gin.New()\n    apiG := apiEngine.Group(\"/api\")\n    {\n        apiG.GET(\"/foo\", func(c *gin.Context) { c.JSON(200, gin.H{\"foo\": true})})\n        apiG.GET(\"/bar\", func(c *gin.Context) { c.JSON(200, gin.H{\"bar\": true})})\n    }\n    r := gin.New()\n    r.GET(\"/*any\", func(c *gin.Context) {\n        path := c.Param(\"any\")\n        if strings.HasPrefix(path, \"/api\") {\n            apiEngine.HandleContext(c)\n        } else {\n            assetHandler(c)\n        }\n    })\n    r.Run(\":9955\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/40999446/how-to-create-redis-transaction-in-go-using-go-redis-redis-package",
    "body": "const routineCount = 100\n// Transactionally increments key using GET and SET commands.\nincrement := func(key string) error {\n    txf := func(tx *redis.Tx) error {\n        // get current value or zero\n        n, err := tx.Get(key).Int()\n        if err != nil && err != redis.Nil {\n            return err\n        }\n        // actual opperation (local in optimistic lock)\n        n++\n        // runs only if the watched keys remain unchanged\n        _, err = tx.TxPipelined(func(pipe redis.Pipeliner) error {\n            // pipe handles the error case\n            pipe.Set(key, n, 0)\n            return nil\n        })\n        return err\n    }\n    for retries := routineCount; retries > 0; retries-- {\n        err := rdb.Watch(txf, key)\n        if err != redis.TxFailedErr {\n            return err\n        }\n        // optimistic lock lost\n    }\n    return errors.New(\"increment reached maximum number of retries\")\n}\nvar wg sync.WaitGroup\nwg.Add(routineCount)\nfor i := 0; i < routineCount; i++ {\n    go func() {\n        defer wg.Done()\n        if err := increment(\"counter3\"); err != nil {\n            fmt.Println(\"increment error:\", err)\n        }\n    }()\n}\nwg.Wait()\nn, err := rdb.Get(\"counter3\").Int()\nfmt.Println(\"ended with\", n, err)"
  },
  {
    "url": "https://stackoverflow.com/questions/47489745/splitting-a-string-at-space-except-inside-quotation-marks",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\nfunc main() {\n\ts := `Foo bar random \"letters lol\" stuff`\n\ta := []string{}\n\tsb := &strings.Builder{}\n\tquoted := false\n\tfor _, r := range s {\n\t\tif r == '\"' {\n\t\t\tquoted = !quoted\n\t\t\tsb.WriteRune(r) // keep '\"' otherwise comment this line\n\t\t} else if !quoted && r == ' ' {\n\t\t\ta = append(a, sb.String())\n\t\t\tsb.Reset()\n\t\t} else {\n\t\t\tsb.WriteRune(r)\n\t\t}\n\t}\n\tif sb.Len() > 0 {\n\t\ta = append(a, sb.String())\n\t}\n\tout := strings.Join(a, \", \")\n\tfmt.Println(out) // Foo, bar, random, \"letters lol\", stuff\n\t// not keep '\"': // Foo, bar, random, letters lol, stuff\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55674853/modify-existing-yaml-file-and-add-new-data-and-comments",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"gopkg.in/yaml.v3\"\n)\nvar (\n\tsourceYaml = `version: 1\ntype: verbose\nkind : bfr\n# my list of applications\napplications:\n#  First app\n  - name: app1\n    kind: nodejs\n    path: app1\n    exec:\n      platforms: k8s\n      builder: test\n`\n\tmodifyJsonSource = `\n[\n    {\n        \"comment\": \"Second app\",\n        \"name\": \"app2\",\n        \"kind\": \"golang\",\n        \"path\": \"app2\",\n        \"exec\": {\n            \"platforms\": \"dockerh\",\n            \"builder\": \"test\"\n        }\n    }\n]\n`\n)\n// VTS Need to Make Fields Public otherwise unmarshalling will not fill in the unexported fields.\ntype VTS struct {\n\tVersion string       `yaml:\"version\" json:\"version\"`\n\tTypes   string       `yaml:\"type\" json:\"type\"`\n\tKind    string       `yaml:\"kind,omitempty\" json:\"kind,omitempty\"`\n\tApps    Applications `yaml:\"applications,omitempty\" json:\"applications,omitempty\"`\n}\ntype Applications []struct {\n\tName string `yaml:\"name,omitempty\" json:\"name,omitempty\"`\n\tKind string `yaml:\"kind,omitempty\" json:\"kind,omitempty\"`\n\tPath string `yaml:\"path,omitempty\" json:\"path,omitempty\"`\n\tExec struct {\n\t\tPlatforms string `yaml:\"platforms,omitempty\" json:\"platforms,omitempty\"`\n\t\tBuilder   string `yaml:\"builder,omitempty\" json:\"builder,omitempty\"`\n\t} `yaml:\"exec,omitempty\" json:\"exec,omitempty\"`\n\tComment string `yaml:\"comment,omitempty\" json:\"comment,omitempty\"`\n}\nfunc main() {\n\tt := yaml.Node{}\n\terr := yaml.Unmarshal([]byte(sourceYaml), &t)\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\", err)\n\t}\n\t// Look for the Map Node with the seq array of items\n\tapplicationNode := iterateNode(&t, \"applications\")\n\t// spew.Dump(iterateNode(&t, \"applications\"))\n\tvar addFromJson Applications\n\terr = json.Unmarshal([]byte(modifyJsonSource), &addFromJson)\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\", err)\n\t}\n\t// Delete the Original Applications the following options:\n\t// applicationNode.Content = []*yaml.Node{}\n\t// deleteAllContents(applicationNode)\n\tdeleteApplication(applicationNode, \"name\", \"app1\")\n\tfor _, app := range addFromJson {\n\t\t// Build New Map Node for new sequences coming in from json\n\t\tmapNode := &yaml.Node{Kind: yaml.MappingNode, Tag: \"!!map\"}\n\t\t// Build Name, Kind, and Path Nodes\n\t\tmapNode.Content = append(mapNode.Content, buildStringNodes(\"name\", app.Name, app.Comment)...)\n\t\tmapNode.Content = append(mapNode.Content, buildStringNodes(\"kind\", app.Kind, \"\")...)\n\t\tmapNode.Content = append(mapNode.Content, buildStringNodes(\"path\", app.Path, \"\")...)\n\t\t// Build the Exec Nodes and the Platform and Builder Nodes within it\n\t\tkeyMapNode, keyMapValuesNode := buildMapNodes(\"exec\")\n\t\tkeyMapValuesNode.Content = append(keyMapValuesNode.Content, buildStringNodes(\"platform\", app.Exec.Platforms, \"\")...)\n\t\tkeyMapValuesNode.Content = append(keyMapValuesNode.Content, buildStringNodes(\"builder\", app.Exec.Builder, \"\")...)\n\t\t// Add to parent map Node\n\t\tmapNode.Content = append(mapNode.Content, keyMapNode, keyMapValuesNode)\n\t\t// Add to applications Node\n\t\tapplicationNode.Content = append(applicationNode.Content, mapNode)\n\t}\n\t// spew.Dump(t)\n\tb, err := yaml.Marshal(&t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(b))\n}\n// iterateNode will recursive look for the node following the identifier Node,\n// as go-yaml has a node for the key and the value itself\n// we want to manipulate the value Node\nfunc iterateNode(node *yaml.Node, identifier string) *yaml.Node {\n\treturnNode := false\n\tfor _, n := range node.Content {\n\t\tif n.Value == identifier {\n\t\t\treturnNode = true\n\t\t\tcontinue\n\t\t}\n\t\tif returnNode {\n\t\t\treturn n\n\t\t}\n\t\tif len(n.Content) > 0 {\n\t\t\tac_node := iterateNode(n, identifier)\n\t\t\tif ac_node != nil {\n\t\t\t\treturn ac_node\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n// deleteAllContents will remove all the contents of a node\n// Mark sure to pass the correct node in otherwise bad things will happen\nfunc deleteAllContents(node *yaml.Node) {\n\tnode.Content = []*yaml.Node{}\n}\n// deleteApplication expects that a sequence Node with all the applications are present\n// if the key value are not found it will not log any errors, and return silently\n// this is expecting a map like structure for the applications\nfunc deleteApplication(node *yaml.Node, key, value string) {\n\tstate := -1\n\tindexRemove := -1\n\tfor index, parentNode := range node.Content {\n\t\tfor _, childNode := range parentNode.Content {\n\t\t\tif key == childNode.Value && state == -1 {\n\t\t\t\tstate += 1\n\t\t\t\tcontinue // found expected move onto next\n\t\t\t}\n\t\t\tif value == childNode.Value && state == 0 {\n\t\t\t\tstate += 1\n\t\t\t\tindexRemove = index\n\t\t\t\tbreak // found the target exit out of the loop\n\t\t\t} else if state == 0 {\n\t\t\t\tstate = -1\n\t\t\t}\n\t\t}\n\t}\n\tif state == 1 {\n\t\t// Remove node from contents\n\t\t// node.Content = append(node.Content[:indexRemove], node.Content[indexRemove+1:]...)\n\t\t// Don't Do this you might have a potential memory leak source: https://github.com/golang/go/wiki/SliceTricks\n\t\t// Since the underlying nodes are pointers\n\t\tlength := len(node.Content)\n\t\tcopy(node.Content[indexRemove:], node.Content[indexRemove+1:])\n\t\tnode.Content[length-1] = nil\n\t\tnode.Content = node.Content[:length-1]\n\t}\n}\n// buildStringNodes builds Nodes for a single key: value instance\nfunc buildStringNodes(key, value, comment string) []*yaml.Node {\n\tkeyNode := &yaml.Node{\n\t\tKind:        yaml.ScalarNode,\n\t\tTag:         \"!!str\",\n\t\tValue:       key,\n\t\tHeadComment: comment,\n\t}\n\tvalueNode := &yaml.Node{\n\t\tKind:  yaml.ScalarNode,\n\t\tTag:   \"!!str\",\n\t\tValue: value,\n\t}\n\treturn []*yaml.Node{keyNode, valueNode}\n}\n// buildMapNodes builds Nodes for a key: map instance\nfunc buildMapNodes(key string) (*yaml.Node, *yaml.Node) {\n\tn1, n2 := &yaml.Node{\n\t\tKind:  yaml.ScalarNode,\n\t\tTag:   \"!!str\",\n\t\tValue: key,\n\t}, &yaml.Node{Kind: yaml.MappingNode,\n\t\tTag: \"!!map\",\n\t}\n\treturn n1, n2\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57697095/how-i-can-safely-check-if-file-exists-in-s3-bucket-using-go-in-lambda",
    "body": "import (\n    ...\n\tawshttp \"github.com/aws/aws-sdk-go-v2/aws/transport/http\"\n    ...\n)\nfunc uploaded(ctx context.Context, client *s3.Client, bucket string, key string) (bool, error) {\n\t_, err := client.HeadObject(ctx, &s3.HeadObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(key),\n\t})\n\tif err != nil {\n\t\tvar responseError *awshttp.ResponseError\n\t\tif errors.As(err, &responseError) && responseError.ResponseError.HTTPStatusCode() == http.StatusNotFound {\n\t\t\treturn false, nil\n\t\t}\n\t\treturn false, err\n\t}\n\treturn true, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/39908955/golang-regex-get-value-inside-parentheses",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n\t\"time\"\n)\nvar rgx = regexp.MustCompile(`\\((.*?)\\)`)\nconst n = 1000000\nfunc main() {\n\tvar rs []string\n\tvar r string\n\ts := `(tag)SomeText`\n\tt := time.Now()\n\tfor i := 0; i < n; i++ {\n\t\trs = rgx.FindStringSubmatch(s)\n\t}\n\tfmt.Println(time.Since(t))\n\tfmt.Println(rs[1]) // [(tag) tag]\n\tt = time.Now()\n\tfor i := 0; i < n; i++ {\n\t\tr = match(s)\n\t}\n\tfmt.Println(time.Since(t))\n\tfmt.Println(r)\n}\nfunc match(s string) string {\n\ti := strings.Index(s, \"(\")\n\tif i >= 0 {\n\t\tj := strings.Index(s, \")\")\n\t\tif j >= 0 {\n\t\t\treturn s[i+1 : j]\n\t\t}\n\t}\n\treturn \"\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64462922/docker-multi-stage-build-go-image-x509-certificate-signed-by-unknown-authorit",
    "body": "FROM golang:latest as builder\nRUN apt-get update && apt-get install -y ca-certificates openssl\nARG cert_location=/usr/local/share/ca-certificates\n# Get certificate from \"github.com\"\nRUN openssl s_client -showcerts -connect github.com:443 </dev/null 2>/dev/null|openssl x509 -outform PEM > ${cert_location}/github.crt\n# Get certificate from \"proxy.golang.org\"\nRUN openssl s_client -showcerts -connect proxy.golang.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >  ${cert_location}/proxy.golang.crt\n# Update certificates\nRUN update-ca-certificates\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN  GO111MODULE=\"on\" CGO_ENABLED=0 GOOS=linux go build -o main ${MAIN_PATH}\nFROM alpine:latest\nLABEL maintainer=\"Kozmo\"\nRUN apk add --no-cache bash\nWORKDIR /app\nCOPY --from=builder /app/main .\nEXPOSE 8080\nCMD [\"./main\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/64462922/docker-multi-stage-build-go-image-x509-certificate-signed-by-unknown-authorit",
    "body": "...\nStep 5/19 : RUN openssl s_client -showcerts -connect github.com:443 </dev/null 2>/dev/null|openssl x509 -outform PEM > ${cert_location}/github.crt\n ---> Running in bb797e26d4b4\nRemoving intermediate container bb797e26d4b4\n ---> 6c68ddafd884\nStep 6/19 : RUN openssl s_client -showcerts -connect proxy.golang.org:443 </dev/null 2>/dev/null|openssl x509 -outform PEM >  ${cert_location}/proxy.golang.crt\n ---> Running in 61f59939d75e\nRemoving intermediate container 61f59939d75e\n ---> 72d2b03b11e6\nStep 7/19 : RUN update-ca-certificates\n ---> Running in 6cf9aa248776\nUpdating certificates in /etc/ssl/certs...\n2 added, 0 removed; done. 👈🏻 'certificates updated'\n...\nStep 8/18 : COPY go.mod go.sum ./\n ---> 436263b76050\nStep 9/18 : RUN go mod download 👈🏻 'works fine'\n ---> Running in 2387c78147db\nRemoving intermediate container 2387c78147db\n ---> a37c05c2b531\nStep 10/18 : COPY . .\n ---> 01b49c388f59\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/59275952/is-it-possible-to-know-which-go-packages-are-installed-in-a-binary",
    "body": "$ go version -m dlv\ndlv: go1.14.2\n        path    github.com/go-delve/delve/cmd/dlv\n        mod     github.com/go-delve/delve       v1.4.0  h1:O+1dw1XBZXqhC6fIPQwGxLlbd2wDRau7NxNhVpw02ag=\n        dep     github.com/cosiner/argv v0.0.0-20170225145430-13bacc38a0a5      h1:rIXlvz2IWiupMFlC45cZCXZFvKX/ExBcSLrDy2G0Lp8=\n        dep     github.com/mattn/go-isatty      v0.0.3  h1:ns/ykhmWi7G9O+8a448SecJU3nSMBXJfqQkl0upE1jI=\n        dep     github.com/peterh/liner v0.0.0-20170317030525-88609521dc4b      h1:8uaXtUkxiy+T/zdLWuxa/PG4so0TPZDZfafFNNSaptE=\n        dep     github.com/sirupsen/logrus      v0.0.0-20180523074243-ea8897e79973      h1:3AJZYTzw3gm3TNTt30x0CCKD7GOn2sdd50Hn35fQkGY=\n        dep     github.com/spf13/cobra  v0.0.0-20170417170307-b6cb39589372      h1:eRfW1vRS4th8IX2iQeyqQ8cOUNOySvAYJ0IUvTXGoYA=\n        dep     github.com/spf13/pflag  v0.0.0-20170417173400-9e4c21054fa1      h1:7bozMfSdo41n2NOc0GsVTTVUiA+Ncaj6pXNpm4UHKys=\n        dep     go.starlark.net v0.0.0-20190702223751-32f345186213      h1:lkYv5AKwvvduv5XWP6szk/bvvgO6aDeUujhZQXIFTes=\n        dep     golang.org/x/arch       v0.0.0-20190927153633-4e8777c89be4      h1:QlVATYS7JBoZMVaf+cNjb90WD/beKVHnIxFKT4QaHVI=\n        dep     golang.org/x/crypto     v0.0.0-20190308221718-c2843e01d9a2      h1:VklqNMn3ovrHsnt90PveolxSbWFaJdECFbxSq0Mqo2M=\n        dep     golang.org/x/sys        v0.0.0-20190626221950-04f50cda93cb      h1:fgwFCsaw9buMuxNd6+DQfAuSFqbNiQZpcgJQAgJsK6k=\n        dep     gopkg.in/yaml.v2        v2.2.1  h1:mUhvW9EsL+naU5Q3cakzfE91YhliOondGd6ZrsDBHQE="
  },
  {
    "url": "https://stackoverflow.com/questions/65388098/how-to-parse-prometheus-data",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\tdto \"github.com/prometheus/client_model/go\"\n\t\"github.com/prometheus/common/expfmt\"\n)\nfunc fatal(err error) {\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\nfunc parseMF(path string) (map[string]*dto.MetricFamily, error) {\n\treader, err := os.Open(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar parser expfmt.TextParser\n\tmf, err := parser.TextToMetricFamilies(reader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn mf, nil\n}\nfunc main() {\n\tf := flag.String(\"f\", \"\", \"set filepath\")\n\tflag.Parse()\n\tmf, err := parseMF(*f)\n\tfatal(err)\n\tfor k, v := range mf {\n\t\tfmt.Println(\"KEY: \", k)\n\t\tfmt.Println(\"VAL: \", v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66274816/go-1-16-how-to-use-strip-prefix-in-goembed",
    "body": "package main\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.Handle(\"/\", http.FileServer(getFileSystem()))\n\thttp.HandleFunc(\"/api/\", api)\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc getFileSystem() http.FileSystem {\n\tfsys, err := fs.Sub(dist, \"gui/dist\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn http.FS(fsys)\n}\nfunc api(w http.ResponseWriter, r *http.Request) {\n\tmsg := fmt.Sprintf(\"TODO: %s\", r.URL)\n\thttp.Error(w, msg, http.StatusNotImplemented)\n}\n//go:embed gui/dist/*\nvar dist embed.FS"
  },
  {
    "url": "https://stackoverflow.com/questions/41375563/unsupported-scan-storing-driver-value-type-uint8-into-type-string",
    "body": "package tgorm\nimport (\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\ntype Skills []string\nfunc (s Skills) Value() (driver.Value, error) {\n\tif len(s) == 0 {\n\t\treturn \"[]\", nil\n\t}\n    return fmt.Sprintf(`[\"%s\"]`, strings.Join(s, `\",\"`)), nil\n}\nfunc (s *Skills) Scan(src interface{}) (err error) {\n\tvar skills []string\n\tswitch src.(type) {\n\tcase string:\n\t\terr = json.Unmarshal([]byte(src.(string)), &skills)\n\tcase []byte:\n\t\terr = json.Unmarshal(src.([]byte), &skills)\n\tdefault:\n\t\treturn errors.New(\"Incompatible type for Skills\")\n\t}\n\tif err != nil {\n\t\treturn\n\t}\n\t*s = skills\n\treturn nil\n}\ntype Employee struct {\n\tId        int64     `db:\"id\" json:\"id\"`\n\tFirstname string    `db:\"firstname\" json:\"firstname\"`\n\tLastname  string    `db:\"lastname\" json:\"lastname\"`\n\tDob       time.Time `db:\"dob\" json:\"dob\"`\n\tSkills    Skills    `gorm:\"type:varchar(255);\" db:\"skills\" json:\"skills\"`\n}\nfunc (e Employee) TableName() string {\n\treturn \"employee\"\n}\nfunc getMemoryDataBase() *gorm.DB {\n\tdb, err := gorm.Open(\"sqlite3\", \":memory:\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb = db.Debug()\n\tdb.AutoMigrate(Employee{})\n\treturn db\n}\nfunc TestSaveEmployee(t *testing.T) {\n\tdb := getMemoryDataBase()\n\temp := Employee{\n\t\tId:        1,\n\t\tFirstname: \"Fake\",\n\t\tLastname:  \"Emp\",\n\t\tDob:       time.Time{},\n\t\tSkills:    []string{\"C#\", \"GO\", \"C++\"},\n\t}\n\tskills, _ := json.Marshal(emp.Skills)\n\terr := db.Exec(`INSERT INTO employee (firstname, lastname, dob, skills) VALUES (?, ?, ?, ?)`, emp.Firstname, emp.Lastname, emp.Dob, skills).Error\n\tassert.Nil(t, err)\n\tvar emps []Employee\n\terr = db.Raw(\"SELECT * FROM employee\").Scan(&emps).Error\n\tassert.Nil(t, err)\n\tassert.Equal(t, []Employee{emp}, emps)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/41375563/unsupported-scan-storing-driver-value-type-uint8-into-type-string",
    "body": "package subgrom\nimport (\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n\t\"time\"\n)\ntype Skill struct {\n\tId          int64  `db:\"id\" json:\"id\"`\n\tSkill       string `db:\"skill\" json:\"skill\"`\n\tEmployeeRef int64\n}\ntype Employee struct {\n\tId        int64     `db:\"id\" json:\"id\"`\n\tFirstname string    `db:\"firstname\" json:\"firstname\"`\n\tLastname  string    `db:\"lastname\" json:\"lastname\"`\n\tDob       time.Time `db:\"dob\" json:\"dob\"`\n\tSkills    []Skill   `db:\"skills\" json:\"skills\" gorm:\"foreignkey:EmployeeRef\"`\n}\nfunc (e Employee) TableName() string {\n\treturn \"employee\"\n}\nfunc getMemoryDataBase() *gorm.DB {\n\tdb, err := gorm.Open(\"sqlite3\", \":memory:\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb = db.Debug()\n\tdb.AutoMigrate(Employee{}, Skill{})\n\treturn db\n}\nfunc TestSaveEmployee(t *testing.T) {\n\tdb := getMemoryDataBase()\n\temp := Employee{\n\t\tId:        1,\n\t\tFirstname: \"Fake\",\n\t\tLastname:  \"Emp\",\n\t\tDob:       time.Time{},\n\t\tSkills:    []Skill{{Skill: \"C#\"}, {Skill: \"GO\"}, {Skill: \"C++\"}},\n\t}\n\terr := db.Create(&emp).Error\n\tassert.Nil(t, err)\n\tvar emps []Employee\n\terr = db.Preload(\"Skills\").Find(&emps).Error\n\tassert.Nil(t, err)\n\tassert.Equal(t, []Employee{emp}, emps)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57639648/how-to-decompress-tar-gz-file-in-go",
    "body": "package main\nimport (\n\t\"archive/tar\"\n\t\"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\nfunc ExtractTarGz(gzipStream io.Reader) {\n\tuncompressedStream, err := gzip.NewReader(gzipStream)\n\tif err != nil {\n\t\tlog.Fatal(\"ExtractTarGz: NewReader failed\")\n\t}\n\ttarReader := tar.NewReader(uncompressedStream)\n\tfor true {\n\t\theader, err := tarReader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"ExtractTarGz: Next() failed: %s\", err.Error())\n\t\t}\n\t\tswitch header.Typeflag {\n\t\tcase tar.TypeDir:\n\t\t\tif err := os.Mkdir(header.Name, 0755); err != nil {\n\t\t\t\tlog.Fatalf(\"ExtractTarGz: Mkdir() failed: %s\", err.Error())\n\t\t\t}\n\t\tcase tar.TypeReg:\n\t\t\toutFile, err := os.Create(header.Name)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"ExtractTarGz: Create() failed: %s\", err.Error())\n\t\t\t}\n\t\t\tif _, err := io.Copy(outFile, tarReader); err != nil {\n\t\t\t\tlog.Fatalf(\"ExtractTarGz: Copy() failed: %s\", err.Error())\n\t\t\t}\n\t\t\toutFile.Close()\n\t\tdefault:\n\t\t\tlog.Fatalf(\n\t\t\t\t\"ExtractTarGz: uknown type: %s in %s\",\n\t\t\t\theader.Typeflag,\n\t\t\t\theader.Name)\n\t\t}\n\t}\n}\nfunc main() {\n\tr, err := os.Open(\"./file.tar.gz\")\n\tif err != nil {\n\t\tfmt.Println(\"error\")\n\t}\n\tExtractTarGz(r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51234464/upload-a-file-with-post-request-golang",
    "body": "import (\n\t\"bytes\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"path/filepath\"\n)\n// content is a struct which contains a file's name, its type and its data.\ntype content struct {\n\tfname string\n\tftype string\n\tfdata []byte\n}\nfunc sendPostRequest(url string, files ...content) ([]byte, error) {\n\tvar (\n\t\tbuf = new(bytes.Buffer)\n\t\tw   = multipart.NewWriter(buf)\n\t)\n\tfor _, f := range files {\n\t\tpart, err := w.CreateFormFile(f.ftype, filepath.Base(f.fname))\n\t\tif err != nil {\n\t\t\treturn []byte{}, err\n\t\t}\n\t\t_, err = part.Write(f.fdata)\n\t\tif err != nil {\n\t\t\treturn []byte{}, err\n\t\t}\n\t}\n\terr := w.Close()\n\tif err != nil {\n\t\treturn []byte{}, err\n\t}\n\treq, err := http.NewRequest(\"POST\", url, buf)\n\tif err != nil {\n\t\treturn []byte{}, err\n\t}\n\treq.Header.Add(\"Content-Type\", w.FormDataContentType())\n\tclient := &http.Client{}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn []byte{}, err\n\t}\n\tdefer res.Body.Close()\n\tcnt, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn []byte{}, err\n\t}\n\treturn cnt, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45160822/what-does-20060102150405-mean",
    "body": "const (\n        ANSIC       = \"Mon Jan _2 15:04:05 2006\"\n        UnixDate    = \"Mon Jan _2 15:04:05 MST 2006\"\n        RubyDate    = \"Mon Jan 02 15:04:05 -0700 2006\"\n        RFC822      = \"02 Jan 06 15:04 MST\"\n        RFC822Z     = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone\n        RFC850      = \"Monday, 02-Jan-06 15:04:05 MST\"\n        RFC1123     = \"Mon, 02 Jan 2006 15:04:05 MST\"\n        RFC1123Z    = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone\n        RFC3339     = \"2006-01-02T15:04:05Z07:00\"\n        RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\"\n        Kitchen     = \"3:04PM\"\n        // Handy time stamps.\n        Stamp      = \"Jan _2 15:04:05\"\n        StampMilli = \"Jan _2 15:04:05.000\"\n        StampMicro = \"Jan _2 15:04:05.000000\"\n        StampNano  = \"Jan _2 15:04:05.000000000\"\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/27651119/how-to-write-func-for-the-generic-parameter-in-golang",
    "body": "// Package slices defines various functions useful with slices of any type.\n// Unless otherwise specified, these functions all apply to the elements\n// of a slice at index 0 <= i < len(s).\npackage slices\nimport \"golang.org/x/exp/constraints\"\n// Equal reports whether two slices are equal: the same length and all\n// elements equal. If the lengths are different, Equal returns false.\n// Otherwise, the elements are compared in index order, and the\n// comparison stops at the first unequal pair.\n// Floating point NaNs are not considered equal.\nfunc Equal[T comparable](s1, s2 []T) bool {\n\tif len(s1) != len(s2) {\n\t\treturn false\n\t}\n\tfor i, v1 := range s1 {\n\t\tv2 := s2[i]\n\t\tif v1 != v2 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66952761/how-to-unit-test-a-go-gin-handler-function",
    "body": "func mockGin() (*gin.Context, *httptest.ResponseRecorder) {\n\tw := httptest.NewRecorder()\n\tc, _ := gin.CreateTestContext(w)\n    // test request, must instantiate a request first\n\treq := &http.Request{\n\t\tURL:    &url.URL{},\n\t\tHeader: make(http.Header), // if you need to test headers\n\t}\n    // example: req.Header.Add(\"Accept\", \"application/json\")\n    // request query\n    testQuery := weldprogs.QueryParam{/* init fields */}\n    q := req.URL.Query()\n    for _, s := range testQuery.Basematgroup_id {\n        q.Add(\"basematgroup_id\", s)\n    }\n    // ... repeat for other fields as needed\n\t// must set this, since under the hood c.BindQuery calls\n    // `req.URL.Query()`, which calls `ParseQuery(u.RawQuery)`\n\treq.URL.RawQuery = q.Encode()\n\n    // finally set the request to the gin context\n    c.Request = req\n    return c, w\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56586267/calling-go-from-python",
    "body": "from ctypes import *\n# loading shared object\nlib = cdll.LoadLibrary(\"main.so\")\n# go type\nclass GoSlice(Structure):\n    _fields_ = [(\"data\", POINTER(c_void_p)), (\"len\", c_longlong), (\"cap\", c_longlong)]\nclass Foo(Structure):\n    _fields_ = [('a', c_int),\n                ('b', c_int),\n                ('c', c_int),\n                ('d', c_int),\n                ('e', c_int),\n                ('f', c_int)]\nlib.Foo.argtypes = [GoSlice]\nlib.Foo.restype = Foo\nt = GoSlice((c_void_p * 5)(1, 2, 3, 4, 5), 5, 5)\nf = lib.Foo(t)\nprint(f)\nprint(f.a)\nprint(f.b)"
  },
  {
    "url": "https://stackoverflow.com/questions/59209493/how-to-use-unsafe-get-a-byte-slice-from-a-string-without-memory-copy",
    "body": "unsafeGetBytes_pc0:\n        TEXT    \"\".unsafeGetBytes(SB), ABIInternal, $48-16\n        CMPQ    SP, 16(R14)\n        PCDATA  $0, $-2\n        JLS     unsafeGetBytes_pc86\n        PCDATA  $0, $-1\n        SUBQ    $48, SP\n        MOVQ    BP, 40(SP)\n        LEAQ    40(SP), BP\n        PCDATA  $0, $-2\n        MOVQ    BX, \"\"..autotmp_4+24(SP)\n        MOVQ    AX, \"\".s+56(SP)\n        MOVQ    BX, \"\".s+64(SP)\n        MOVQ    \"\".s+56(SP), DX\n        PCDATA  $0, $-1\n        MOVQ    DX, \"\"..autotmp_5+32(SP)\n        LEAQ    type.uint8(SB), AX\n        MOVQ    BX, CX\n        MOVQ    DX, BX\n        PCDATA  $1, $1\n        CALL    runtime.unsafeslice(SB)\n        MOVQ    \"\"..autotmp_5+32(SP), AX\n        MOVQ    \"\"..autotmp_4+24(SP), BX\n        MOVQ    BX, CX\n        MOVQ    40(SP), BP\n        ADDQ    $48, SP\n        RET\nunsafeGetBytes_pc86:\n        NOP\n        PCDATA  $1, $-1\n        PCDATA  $0, $-2\n        MOVQ    AX, 8(SP)\n        MOVQ    BX, 16(SP)\n        CALL    runtime.morestack_noctxt(SB)\n        MOVQ    8(SP), AX\n        MOVQ    16(SP), BX\n        PCDATA  $0, $-1\n        JMP     unsafeGetBytes_pc0"
  },
  {
    "url": "https://stackoverflow.com/questions/59209493/how-to-use-unsafe-get-a-byte-slice-from-a-string-without-memory-copy",
    "body": "TEXT    \"\".unsafeGetBytes(SB), NOSPLIT|ABIInternal, $32-16\n        SUBQ    $32, SP\n        MOVQ    BP, 24(SP)\n        LEAQ    24(SP), BP\n        MOVQ    AX, \"\".s+40(SP)\n        MOVQ    BX, \"\".s+48(SP)\n        MOVQ    $0, \"\".b(SP)\n        MOVUPS  X15, \"\".b+8(SP)\n        MOVQ    \"\".s+40(SP), DX\n        MOVQ    DX, \"\".b(SP)\n        MOVQ    \"\".s+48(SP), CX\n        MOVQ    CX, \"\".b+16(SP)\n        MOVQ    \"\".s+48(SP), BX\n        MOVQ    BX, \"\".b+8(SP)\n        MOVQ    \"\".b(SP), AX\n        MOVQ    24(SP), BP\n        ADDQ    $32, SP\n        RET"
  },
  {
    "url": "https://stackoverflow.com/questions/59209493/how-to-use-unsafe-get-a-byte-slice-from-a-string-without-memory-copy",
    "body": "TEXT    \"\".unsafeGetBytes(SB), NOSPLIT|ABIInternal, $24-16\n        SUBQ    $24, SP\n        MOVQ    BP, 16(SP)\n        LEAQ    16(SP), BP\n        PCDATA  $0, $-2\n        MOVQ    AX, \"\".s+32(SP)\n        MOVQ    BX, \"\".s+40(SP)\n        MOVQ    \"\".s+32(SP), AX\n        PCDATA  $0, $-1\n        TESTB   AL, (AX)\n        NOP\n        CMPQ    BX, $2147418112\n        JHI     unsafeGetBytes_pc54\n        MOVQ    BX, CX\n        MOVQ    16(SP), BP\n        ADDQ    $24, SP\n        RET\nunsafeGetBytes_pc54:\n        MOVQ    BX, DX\n        MOVL    $2147418112, BX\n        PCDATA  $1, $1\n        NOP\n        CALL    runtime.panicSlice3Alen(SB)\n        XCHGL   AX, AX"
  },
  {
    "url": "https://stackoverflow.com/questions/65419268/how-to-deep-copy-a-string-in-go",
    "body": "// Clone returns a fresh copy of s.\n// It guarantees to make a copy of s into a new allocation,\n// which can be important when retaining only a small substring\n// of a much larger string. Using Clone can help such programs\n// use less memory. Of course, since using Clone makes a copy,\n// overuse of Clone can make programs use more memory.\n// Clone should typically be used only rarely, and only when\n// profiling indicates that it is needed.\n// For strings of length zero the string \"\" will be returned\n// and no allocation is made.\nfunc Clone(s string) string {\n\tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\tb := make([]byte, len(s))\n\tcopy(b, s)\n\treturn unsafe.String(&b[0], len(b))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/50824554/permitted-flag-values-for-cobra",
    "body": "type myEnum string\nconst (\n\tmyEnumFoo myEnum = \"foo\"\n\tmyEnumBar myEnum = \"bar\"\n\tmyEnumMoo myEnum = \"moo\"\n)\n// String is used both by fmt.Print and by Cobra in help text\nfunc (e *myEnum) String() string {\n\treturn string(*e)\n}\n// Set must have pointer receiver so it doesn't change the value of a copy\nfunc (e *myEnum) Set(v string) error {\n\tswitch v {\n\tcase \"foo\", \"bar\", \"moo\":\n\t\t*e = myEnum(v)\n\t\treturn nil\n\tdefault:\n\t\treturn errors.New(`must be one of \"foo\", \"bar\", or \"moo\"`)\n\t}\n}\n// Type is only used in help text\nfunc (e *myEnum) Type() string {\n\treturn \"myEnum\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/50824554/permitted-flag-values-for-cobra",
    "body": "func init() {\n\t// ...\n\tmyCmd.Flags().Var(&flagMyEnum, \"myenum\", `my custom enum. allowed: \"foo\", \"bar\", \"moo\"`)\n\tmyCmd.RegisterFlagCompletionFunc(\"myenum\", myEnumCompletion)\n}\n// myEnumCompletion should probably live next to the myEnum definition\nfunc myEnumCompletion(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {\n\treturn []string{\n\t\t\"foo\\thelp text for foo\",\n\t\t\"bar\\thelp text for bar\",\n\t\t\"moo\\thelp text for moo\",\n\t}, cobra.ShellCompDirectiveDefault\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70394814/create-new-object-of-typed-value-via-go-go-1-18-generics",
    "body": "// constraining a type to its pointer type\ntype Ptr[T any] interface {\n\t*T\n}\n// the first type param will match pointer types and infer U\ntype FruitFactory[T Ptr[U], U any] struct{}\nfunc (f FruitFactory[T,U]) Create() T {\n    // declare var of non-pointer type. this is not nil!\n\tvar a U\n    // address it and convert to pointer type (still not nil)\n\treturn T(&a)\n}\ntype Apple struct {\n\tcolor string\n}\nfunc main() {\n    // instantiating with ptr type\n\tappleFactory := FruitFactory[*Apple, Apple]{}\n\tapple := appleFactory.Create()\n    // all good\n\tapple.color = \"red\"\n\tfmt.Println(apple) // &{red}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45692719/samples-on-kubernetes-helm-golang-client",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"helm.sh/helm/v3/pkg/action\"\n\t\"helm.sh/helm/v3/pkg/chart/loader\"\n\t\"helm.sh/helm/v3/pkg/kube\"\n\t_ \"k8s.io/client-go/plugin/pkg/client/auth\"\n)\nfunc main() {\n\tchartPath := \"/tmp/my-chart-0.1.0.tgz\"\n\tchart, err := loader.Load(chartPath)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tkubeconfigPath := \"/tmp/my-kubeconfig\"\n\treleaseName := \"my-release\"\n\treleaseNamespace := \"default\"\n\tactionConfig := new(action.Configuration)\n\tif err := actionConfig.Init(kube.GetConfig(kubeconfigPath, \"\", releaseNamespace), releaseNamespace, os.Getenv(\"HELM_DRIVER\"), func(format string, v ...interface{}) {\n\t\tfmt.Sprintf(format, v)\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\tiCli := action.NewInstall(actionConfig)\n\tiCli.Namespace = releaseNamespace\n\tiCli.ReleaseName = releaseName\n\trel, err := iCli.Run(chart, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"Successfully installed release: \", rel.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77304845/how-to-log-errors-with-log-slog",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log/slog\"\n\t\"os\"\n\t\"runtime\"\n\t\"strings\"\n\t\"github.com/pkg/errors\"\n)\nfunc main() {\n\thandler := slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{\n\t\tReplaceAttr: replaceAttr,\n\t})\n\tslog.SetDefault(slog.New(handler))\n\tif err := f(); err != nil {\n\t\tslog.Info(\"something went wrong\", slog.Any(\"err\", err))\n\t}\n}\nfunc f() error {\n\treturn g()\n}\nfunc g() error {\n\treturn errors.New(\"test error\")\n}\nfunc replaceAttr(groups []string, a slog.Attr) slog.Attr {\n\tswitch a.Value.Kind() {\n\t// other cases\n\tcase slog.KindAny:\n\t\tswitch v := a.Value.Any().(type) {\n\t\tcase error:\n\t\t\ta.Value = fmtErr(v)\n\t\t}\n\t}\n\treturn a\n}\n// fmtErr returns a slog.GroupValue with keys \"msg\" and \"trace\". If the error\n// does not implement interface { StackTrace() errors.StackTrace }, the \"trace\"\n// key is omitted.\nfunc fmtErr(err error) slog.Value {\n\tvar groupValues []slog.Attr\n\tgroupValues = append(groupValues, slog.String(\"msg\", err.Error()))\n\ttype StackTracer interface {\n\t\tStackTrace() errors.StackTrace\n\t}\n\t// Find the trace to the location of the first errors.New,\n\t// errors.Wrap, or errors.WithStack call.\n\tvar st StackTracer\n\tfor err := err; err != nil; err = errors.Unwrap(err) {\n\t\tif x, ok := err.(StackTracer); ok {\n\t\t\tst = x\n\t\t}\n\t}\n\tif st != nil {\n\t\tgroupValues = append(groupValues,\n\t\t\tslog.Any(\"trace\", traceLines(st.StackTrace())),\n\t\t)\n\t}\n\treturn slog.GroupValue(groupValues...)\n}\nfunc traceLines(frames errors.StackTrace) []string {\n\ttraceLines := make([]string, len(frames))\n\t// Iterate in reverse to skip uninteresting, consecutive runtime frames at\n\t// the bottom of the trace.\n\tvar skipped int\n\tskipping := true\n\tfor i := len(frames) - 1; i >= 0; i-- {\n\t\t// Adapted from errors.Frame.MarshalText(), but avoiding repeated\n\t\t// calls to FuncForPC and FileLine.\n\t\tpc := uintptr(frames[i]) - 1\n\t\tfn := runtime.FuncForPC(pc)\n\t\tif fn == nil {\n\t\t\ttraceLines[i] = \"unknown\"\n\t\t\tskipping = false\n\t\t\tcontinue\n\t\t}\n\t\tname := fn.Name()\n\t\tif skipping && strings.HasPrefix(name, \"runtime.\") {\n\t\t\tskipped++\n\t\t\tcontinue\n\t\t} else {\n\t\t\tskipping = false\n\t\t}\n\t\tfilename, lineNr := fn.FileLine(pc)\n\t\ttraceLines[i] = fmt.Sprintf(\"%s %s:%d\", name, filename, lineNr)\n\t}\n\treturn traceLines[:len(traceLines)-skipped]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61850992/jwt-validation-with-jwks-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKS URL.\n\t//\n\t// This is a sample JWKS service. Visit https://jwks-service.appspot.com/ and grab a token to test this example.\n\tjwksURL := \"https://jwks-service.appspot.com/.well-known/jwks.json\"\n\t// Create a context that, when cancelled, ends the JWKS background refresh goroutine.\n\tctx, cancel := context.WithCancel(context.Background())\n\t// Create the keyfunc options. Use an error handler that logs. Refresh the JWKS when a JWT signed by an unknown KID\n\t// is found or at the specified interval. Rate limit these refreshes. Timeout the initial JWKS refresh request after\n\t// 10 seconds. This timeout is also used to create the initial context.Context for keyfunc.Get.\n\toptions := keyfunc.Options{\n\t\tCtx: ctx,\n\t\tRefreshErrorHandler: func(err error) {\n\t\t\tlog.Printf(\"There was an error with the jwt.Keyfunc\\nError: %s\", err.Error())\n\t\t},\n\t\tRefreshInterval:   time.Hour,\n\t\tRefreshRateLimit:  time.Minute * 5,\n\t\tRefreshTimeout:    time.Second * 10,\n\t\tRefreshUnknownKID: true,\n\t}\n\t// Create the JWKS from the resource at the given URL.\n\tjwks, err := keyfunc.Get(jwksURL, options)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from resource at the given URL.\\nError: %s\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\tjwtB64 := \"eyJraWQiOiJlZThkNjI2ZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJXZWlkb25nIiwiYXVkIjoiVGFzaHVhbiIsImlzcyI6Imp3a3Mtc2VydmljZS5hcHBzcG90LmNvbSIsImlhdCI6MTYzMTM2OTk1NSwianRpIjoiNDY2M2E5MTAtZWU2MC00NzcwLTgxNjktY2I3NDdiMDljZjU0In0.LwD65d5h6U_2Xco81EClMa_1WIW4xXZl8o4b7WzY_7OgPD2tNlByxvGDzP7bKYA9Gj--1mi4Q4li4CAnKJkaHRYB17baC0H5P9lKMPuA6AnChTzLafY6yf-YadA7DmakCtIl7FNcFQQL2DXmh6gS9J6TluFoCIXj83MqETbDWpL28o3XAD_05UP8VLQzH2XzyqWKi97mOuvz-GsDp9mhBYQUgN3csNXt2v2l-bUPWe19SftNej0cxddyGu06tXUtaS6K0oe0TTbaqc3hmfEiu5G0J8U6ztTUMwXkBvaknE640NPgMQJqBaey0E4u0txYgyvMvvxfwtcOrDRYqYPBnA\"\n\t// Parse the JWT.\n\ttoken, err := jwt.Parse(jwtB64, jwks.Keyfunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError: %s\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n\t// End the background refresh goroutine when it's no longer needed.\n\tcancel()\n\t// This will be ineffectual because the line above this canceled the parent context.Context.\n\t// This method call is idempotent similar to context.CancelFunc.\n\tjwks.EndBackground()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61850992/jwt-validation-with-jwks-golang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKS as JSON.\n\tjwksJSON := json.RawMessage(`{\"keys\":[{\"kty\":\"RSA\",\"e\":\"AQAB\",\"kid\":\"ee8d626d\",\"n\":\"gRda5b0pkgTytDuLrRnNSYhvfMIyM0ASq2ZggY4dVe12JV8N7lyXilyqLKleD-2lziivvzE8O8CdIC2vUf0tBD7VuMyldnZruSEZWCuKJPdgKgy9yPpShmD2NyhbwQIAbievGMJIp_JMwz8MkdY5pzhPECGNgCEtUAmsrrctP5V8HuxaxGt9bb-DdPXkYWXW3MPMSlVpGZ5GiIeTABxqYNG2MSoYeQ9x8O3y488jbassTqxExI_4w9MBQBJR9HIXjWrrrenCcDlMY71rzkbdj3mmcn9xMq2vB5OhfHyHTihbUPLSm83aFWSuW9lE7ogMc93XnrB8evIAk6VfsYlS9Q\"},{\"kty\":\"EC\",\"crv\":\"P-256\",\"kid\":\"711d48d1\",\"x\":\"tfXCoBU-wXemeQCkME1gMZWK0-UECCHIkedASZR0t-Q\",\"y\":\"9xzYtnKQdiQJHCtGwpZWF21eP1fy5x4wC822rCilmBw\"},{\"kty\":\"EC\",\"crv\":\"P-384\",\"kid\":\"d52c9829\",\"x\":\"tFx6ev6eLs9sNfdyndn4OgbhV6gPFVn7Ul0VD5vwuplJLbIYeFLI6T42tTaE5_Q4\",\"y\":\"A0gzB8TqxPX7xMzyHH_FXkYG2iROANH_kQxBovSeus6l_QSyqYlipWpBy9BhY9dz\"},{\"kty\":\"RSA\",\"e\":\"AQAB\",\"kid\":\"ecac72e5\",\"n\":\"nLbnTvZAUxdmuAbDDUNAfha6mw0fri3UpV2w1PxilflBuSnXJhzo532-YQITogoanMjy_sQ8kHUhZYHVRR6vLZRBBbl-hP8XWiCe4wwioy7Ey3TiIUYfW-SD6I42XbLt5o-47IR0j5YDXxnX2UU7-UgR_kITBeLDfk0rSp4B0GUhPbP5IDItS0MHHDDS3lhvJomxgEfoNrp0K0Fz_s0K33hfOqc2hD1tSkX-3oDTQVRMF4Nxax3NNw8-ahw6HNMlXlwWfXodgRMvj9pcz8xUYa3C5IlPlZkMumeNCFx1qds6K_eYcU0ss91DdbhhE8amRX1FsnBJNMRUkA5i45xkOIx15rQN230zzh0p71jvtx7wYRr5pdMlwxV0T9Ck5PCmx-GzFazA2X6DJ0Xnn1-cXkRoZHFj_8Mba1dUrNz-NWEk83uW5KT-ZEbX7nzGXtayKWmGb873a8aYPqIsp6bQ_-eRBd8TDT2g9HuPyPr5VKa1p33xKaohz4DGy3t1Qpy3UWnbPXUlh5dLWPKz-TcS9FP5gFhWVo-ZhU03Pn6P34OxHmXGWyQao18dQGqzgD4e9vY3rLhfcjVZJYNlWY2InsNwbYS-DnienPf1ws-miLeXxNKG3tFydoQzHwyOxG6Wc-HBfzL_hOvxINKQamvPasaYWl1LWznMps6elKCgKDc\"},{\"kty\":\"EC\",\"crv\":\"P-521\",\"kid\":\"c570888f\",\"x\":\"AHNpXq0J7rikNRlwhaMYDD8LGVAVJzNJ-jEPksUIn2LB2LCdNRzfAhgbxdQcWT9ktlc9M1EhmTLccEqfnWdGL9G1\",\"y\":\"AfHPUW3GYzzqbTczcYR0nYMVMFVrYsUxv4uiuSNV_XRN3Jf8zeYbbOLJv4S3bUytO7qHY8bfZxPxR9nn3BBTf5ol\"}]}`)\n\t// Create the JWKS from the resource at the given URL.\n\tjwks, err := keyfunc.NewJSON(jwksJSON)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from JSON.\\nError: %s\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\tjwtB64 := \"eyJraWQiOiJlZThkNjI2ZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJXZWlkb25nIiwiYXVkIjoiVGFzaHVhbiIsImlzcyI6Imp3a3Mtc2VydmljZS5hcHBzcG90LmNvbSIsImlhdCI6MTYzMTM2OTk1NSwianRpIjoiNDY2M2E5MTAtZWU2MC00NzcwLTgxNjktY2I3NDdiMDljZjU0In0.LwD65d5h6U_2Xco81EClMa_1WIW4xXZl8o4b7WzY_7OgPD2tNlByxvGDzP7bKYA9Gj--1mi4Q4li4CAnKJkaHRYB17baC0H5P9lKMPuA6AnChTzLafY6yf-YadA7DmakCtIl7FNcFQQL2DXmh6gS9J6TluFoCIXj83MqETbDWpL28o3XAD_05UP8VLQzH2XzyqWKi97mOuvz-GsDp9mhBYQUgN3csNXt2v2l-bUPWe19SftNej0cxddyGu06tXUtaS6K0oe0TTbaqc3hmfEiu5G0J8U6ztTUMwXkBvaknE640NPgMQJqBaey0E4u0txYgyvMvvxfwtcOrDRYqYPBnA\"\n\t// Parse the JWT.\n\ttoken, err := jwt.Parse(jwtB64, jwks.Keyfunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError: %s\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56067076/grpc-connection-management-in-golang",
    "body": "   // this type contains state of the server\n   type serverContext struct {\n       // client to GRPC service\n       userClient user.UserClient\n       // default timeout\n       timeout time.Duration\n\n       // some other useful objects, like config\n       // or logger (to replace global logging)\n       // (...)\n   }\n   // constructor for server context\n   func newServerContext(endpoint string) (*serverContext, error) {\n       userConn, err := grpc.Dial(endpoint, grpc.WithInsecure())\n       if err != nil {\n           return nil, err\n       }\n       ctx := &serverContext{\n          userClient: user.NewUserClient(userConn),\n          timeout: time.Second,\n       }\n       return ctx, nil\n   }\n   type server struct {\n       context *serverContext\n   }\n   func (s *server) Handler(ctx context.Context, request *Request) (*Response, error) {\n       clientCtx, cancel := context.WithTimeout(ctx, time.Second)\n       defer cancel()\n       response, err := c.GetUserFromTokenID(\n          clientCtx,\n          &user.GetUserFromTokenRequest{\n              TransactionID: transactionID,\n              OathToken: *oathToken,\n          },\n       )\n       if err != nil {\n            return nil, err\n       }\n       // ...\n   }\n   func main() {\n       serverCtx, err := newServerContext(os.Getenv(\"USER_SERVICE_URL\"))\n       if err != nil {\n          log.Fatal(err)\n       }\n       s := &server{serverCtx}\n       // listen and serve etc...\n   }"
  },
  {
    "url": "https://stackoverflow.com/questions/63709710/how-to-make-configuration-fields-required-in-viper",
    "body": "package config\nimport (\n\t\"github.com/go-playground/validator/v10\"\n\t\"github.com/spf13/viper\"\n\t\"log\"\n)\ntype Configuration struct {\n\tServer struct {\n\t\tApplication string `yaml:\"application\" validate:\"required\"`\n\t} `yaml:\"server\"`\n}\nvar config Configuration\nfunc GetConfig() *Configuration {\n\treturn &config\n}\nfunc init() {\n\tvp := viper.New()\n\tvp.SetConfigName(\"config\") // name of config file (without extension)\n\tvp.SetConfigType(\"yaml\")   // REQUIRED if the config file does not have the extension in the name\n\tvp.AddConfigPath(\".\")\n\tif err := vp.ReadInConfig(); err!=nil {\n\t\tlog.Fatalf(\"Read error %v\", err)\n\t}\n\tif err := vp.Unmarshal(&config); err!=nil {\n\t\tlog.Fatalf(\"unable to unmarshall the config %v\", err)\n\t}\n\tvalidate := validator.New()\n\tif err := validate.Struct(&config); err!=nil{\n\t\tlog.Fatalf(\"Missing required attributes %v\\n\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56080618/examples-of-how-to-get-id-token-from-google-openid-connect",
    "body": "type jwtClaims struct {\n\tIss string `json:\"iss\"`\n\tAzp string `json:\"azp\"`\n\tAud string `json:\"aud\"`\n\tSub string `json:\"sub\"`\n\tHd string `json:\"hd\"`\n\tEmail string `json:\"email\"`\n\tEmailVerified bool `json:\"email_verified\"`\n\tAtHash  string `json:\"at_hash\"`\n\tNonce string `json:\"nonce\"`\n\tIat int `json:\"iat\"`\n\tExp int `json:\"exp\"`\n}\nfunc extractJwtClaims(token string) (*jwtClaims, error) {\n\ttokenStruct := &jwtClaims{}\n\tjwtParts := strings.Split(token, \".\")\n\tout, _ := base64.RawURLEncoding.DecodeString(jwtParts[1])\n\terr := json.Unmarshal(out, &tokenStruct)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tokenStruct, nil\n}\nfunc main() {\n\ttoken, _ := extractJwtClaims(tok.id_token)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/38087256/dynamic-version-from-git-with-go-get",
    "body": "`bash\n&debug.BuildInfo{\n    Path: \"foo.to/v\",\n    Main: debug.Module{\n        Path:    \"foo.to/v\",\n        Version: \"(devel)\",\n        Sum:     \"\",\n        Replace: (*debug.Module)(nil),\n    },\n    Deps: {\n        &debug.Module{\n            Path:    \"github.com/kr/pretty\",\n            Version: \"v0.1.0\",\n            Sum:     \"h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\",\n            Replace: (*debug.Module)(nil),\n        },\n        &debug.Module{\n            Path:    \"github.com/kr/text\",\n            Version: \"v0.1.0\",\n            Sum:     \"h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\",\n            Replace: (*debug.Module)(nil),\n        },\n    },\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63410554/golang-cgo-appdelegate-implementation-doesnt-work",
    "body": "#include \"appDelegate_darwin.h\"\n@interface AppDelegate ()\n@end\n@implementation AppDelegate\n-(BOOL)application:(NSApplication *)sender openFile:(NSString *)filename\n{\n   YES;\n}\n\n-(void)application:(NSApplication *)sender openFiles:(NSArray *)filenames\n{\n   NSLog(@\"%@\", filenames);\n}\n- (void)applicationDidFinishLaunching:(NSNotification *)aNotification {\n    // Insert code here to initialize your application\n}\n- (void)applicationWillTerminate:(NSNotification *)aNotification {\n    // Insert code here to tear down your application\n}\n@end\n@interface Document ()\n@end\n@implementation Document\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        // Add your subclass-specific initialization here.\n    }\n    return self;\n}\n+ (BOOL)autosavesInPlace {\n    return YES;\n}\n- (NSString *)windowNibName {\n    // Override returning the nib file name of the document\n    // If you need to use a subclass of NSWindowController or if your document supports multiple NSWindowControllers, you should remove this method and override -makeWindowControllers instead.\n    return @\"Document\";\n}\n- (NSData *)dataOfType:(NSString *)typeName error:(NSError **)outError {\n    // Insert code here to write your document to data of the specified type. If outError != NULL, ensure that you create and set an appropriate error if you return nil.\n    // Alternatively, you could remove this method and override -fileWrapperOfType:error:, -writeToURL:ofType:error:, or -writeToURL:ofType:forSaveOperation:originalContentsURL:error: instead.\n    [NSException raise:@\"UnimplementedMethod\" format:@\"%@ is unimplemented\", NSStringFromSelector(_cmd)];\n    return nil;\n}\n- (BOOL)readFromData:(NSData *)data ofType:(NSString *)typeName error:(NSError **)outError {\n    NSData *dataFromFile = [data retain];\n    NSString *myString = [[NSString alloc] initWithData:dataFromFile encoding:NSUTF8StringEncoding];\n    // This is the place where the magic happens. In my case I just call the HandleFile-function to process the file contents in my main go app\n    NSLog(@\"Data received: %@\", myString);\n    HandleFile([myString UTF8String]);\n    return YES;\n}\n@end"
  },
  {
    "url": "https://stackoverflow.com/questions/61498943/go-gin-framework-to-log-in-json",
    "body": "// JSONLogMiddleware logs a gin HTTP request in JSON format, with some additional custom key/values\nfunc JSONLogMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// Start timer\n\t\tstart := time.Now()\n\t\t// Process Request\n\t\tc.Next()\n\t\t// Stop timer\n\t\tduration := util.GetDurationInMillseconds(start)\n\t\tentry := log.WithFields(log.Fields{\n\t\t\t\"client_ip\":  util.GetClientIP(c),\n\t\t\t\"duration\":   duration,\n\t\t\t\"method\":     c.Request.Method,\n\t\t\t\"path\":       c.Request.RequestURI,\n\t\t\t\"status\":     c.Writer.Status(),\n\t\t\t\"user_id\":    util.GetUserID(c),\n\t\t\t\"referrer\":   c.Request.Referer(),\n\t\t\t\"request_id\": c.Writer.Header().Get(\"Request-Id\"),\n\t\t\t// \"api_version\": util.ApiVersion,\n\t\t})\n\t\tif c.Writer.Status() >= 500 {\n\t\t\tentry.Error(c.Errors.String())\n\t\t} else {\n\t\t\tentry.Info(\"\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64104586/use-golang-to-get-rsa-key-the-same-way-openssl-genrsa",
    "body": "package main\nimport (\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"io/ioutil\"\n)\nfunc main() {\n\tfilename := \"key\"\n\tbitSize := 4096\n    // Generate RSA key.\n\tkey, err := rsa.GenerateKey(rand.Reader, bitSize)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    // Extract public component.\n\tpub := key.Public()\n    // Encode private key to PKCS#1 ASN.1 PEM.\n\tkeyPEM := pem.EncodeToMemory(\n\t\t&pem.Block{\n\t\t\tType:  \"RSA PRIVATE KEY\",\n\t\t\tBytes: x509.MarshalPKCS1PrivateKey(key),\n\t\t},\n\t)\n    // Encode public key to PKCS#1 ASN.1 PEM.\n\tpubPEM := pem.EncodeToMemory(\n\t\t&pem.Block{\n\t\t\tType:  \"RSA PUBLIC KEY\",\n\t\t\tBytes: x509.MarshalPKCS1PublicKey(pub.(*rsa.PublicKey)),\n\t\t},\n\t)\n    // Write private key to file.\n\tif err := ioutil.WriteFile(filename+\".rsa\", keyPEM, 0700); err != nil {\n\t\tpanic(err)\n\t}\n    // Write public key to file.\n\tif err := ioutil.WriteFile(filename+\".rsa.pub\", pubPEM, 0755); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58365838/how-to-reuse-mongodb-connection-in-go",
    "body": "const CONNECTED = \"Successfully connected to database: %v\"\ntype MongoDatastore struct {\n\tdb      *mongo.Database\n\tSession *mongo.Client\n\tlogger  *logrus.Logger\n}\nfunc NewDatastore(config config.GeneralConfig, logger *logrus.Logger) *MongoDatastore {\n\tvar mongoDataStore *MongoDatastore\n\tdb, session := connect(config, logger)\n\tif db != nil && session != nil {\n\t\t// log statements here as well\n\t\tmongoDataStore = new(MongoDatastore)\n\t\tmongoDataStore.db = db\n\t\tmongoDataStore.logger = logger\n\t\tmongoDataStore.Session = session\n\t\treturn mongoDataStore\n\t}\n\tlogger.Fatalf(\"Failed to connect to database: %v\", config.DatabaseName)\n\treturn nil\n}\nfunc connect(generalConfig config.GeneralConfig, logger *logrus.Logger) (a *mongo.Database, b *mongo.Client) {\n\tvar connectOnce sync.Once\n\tvar db *mongo.Database\n\tvar session *mongo.Client\n\tconnectOnce.Do(func() {\n\t\tdb, session = connectToMongo(generalConfig, logger)\n\t})\n\treturn db, session\n}\nfunc connectToMongo(generalConfig config.GeneralConfig, logger *logrus.Logger) (a *mongo.Database, b *mongo.Client) {\n\tvar err error\n\tsession, err := mongo.NewClient(generalConfig.DatabaseHost)\n\tif err != nil {\n\t\tlogger.Fatal(err)\n\t}\n\tsession.Connect(context.TODO())\n\tif err != nil {\n\t\tlogger.Fatal(err)\n\t}\n\tvar DB = session.Database(generalConfig.DatabaseName)\n\tlogger.Info(CONNECTED, generalConfig.DatabaseName)\n\treturn DB, session\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58365838/how-to-reuse-mongodb-connection-in-go",
    "body": "type TestRepository interface{\n    Find(ctx context.Context, filters interface{}) []Document, error\n}\ntype testRepository struct {\n\tstore      *datastore.MongoDatastore\n}\nfunc (r *testRepository) Find(ctx context.Context , filters interface{}) []Document, error{\n    cur, err := r.store.GetCollection(\"some_collection_name\").Find(ctx, filters)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer cur.Close(ctx)\n\tvar result = make([]models.Document, 0)\n\tfor cur.Next(ctx) {\n\t\tvar currDoc models.Document\n\t\terr := cur.Decode(&currDoc)\n\t\tif err != nil {\n\t\t\t//log here\n\t\t\tcontinue\n\t\t}\n\t\tresult = append(result, currDoc)\n\t}\n\treturn result, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/38970561/golang-gin-gonic-web-framework-proxy-route-to-another-backend",
    "body": "func ReverseProxy() gin.HandlerFunc {\n    target := \"localhost:3000\"\n    return func(c *gin.Context) {\n        director := func(req *http.Request) {\n            r := c.Request\n            req.URL.Scheme = \"http\"\n            req.URL.Host = target\n            req.Header[\"my-header\"] = []string{r.Header.Get(\"my-header\")}\n            // Golang camelcases headers\n            delete(req.Header, \"My-Header\")\n        }\n        proxy := &httputil.ReverseProxy{Director: director}\n        proxy.ServeHTTP(c.Writer, c.Request)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58576277/cant-run-aws-codebuild-local-build-script",
    "body": "Removing agent-resources_build_1 ... done\nRemoving agent-resources_agent_1 ... done\nRemoving network agent-resources_default\nRemoving volume agent-resources_source_volume\nRemoving volume agent-resources_user_volume\nCreating network \"agent-resources_default\" with the default driver\nCreating volume \"agent-resources_source_volume\" with local driver\nCreating volume \"agent-resources_user_volume\" with local driver\nCreating agent-resources_agent_1 ... done\nCreating agent-resources_build_1 ... done\nAttaching to agent-resources_agent_1, agent-resources_build_1\nagent_1  | 2020/01/05 07:50:34 [Customer Config] Couldn't open specified customer config file: open /root/.aws/config: no such file or directory\nagent_1  | 2020/01/05 07:50:34 [Customer Config] Error parsing supplied customer config file: invalid argument\nagent_1  | [Container] 2020/01/05 07:50:35 Waiting for agent ping\nagent_1  | [Container] 2020/01/05 07:50:36 Waiting for DOWNLOAD_SOURCE\nagent_1  | [Container] 2020/01/05 07:50:36 Phase is DOWNLOAD_SOURCE\nagent_1  | [Container] 2020/01/05 07:50:36 CODEBUILD_SRC_DIR=/codebuild/output/src628986230/src\nagent_1  | [Container] 2020/01/05 07:50:36 YAML location is /codebuild/output/srcDownload/src/buildspec.yml\nagent_1  | [Container] 2020/01/05 07:50:36 No commands found for phase name: INSTALL\nagent_1  | [Container] 2020/01/05 07:50:36 Processing environment variables\nagent_1  | [Container] 2020/01/05 07:50:36 Moving to directory /codebuild/output/src628986230/src\nagent_1  | [Container] 2020/01/05 07:50:36 Registering with agent\nagent_1  | [Container] 2020/01/05 07:50:36 Phases found in YAML: 4\nagent_1  | [Container] 2020/01/05 07:50:36  INSTALL: 0 commands\nagent_1  | [Container] 2020/01/05 07:50:36  PRE_BUILD: 1 commands\nagent_1  | [Container] 2020/01/05 07:50:36  BUILD: 2 commands\nagent_1  | [Container] 2020/01/05 07:50:36  POST_BUILD: 1 commands\nagent_1  | [Container] 2020/01/05 07:50:36 Phase complete: DOWNLOAD_SOURCE State: SUCCEEDED\nagent_1  | [Container] 2020/01/05 07:50:36 Phase context status code:  Message:\nagent_1  | [Container] 2020/01/05 07:50:36 Entering phase INSTALL\nagent_1  | [Container] 2020/01/05 07:50:36 Running command echo \"Installing Python version 3.8 ...\"\nagent_1  | Installing Python version 3.8 ...\nagent_1  |\nagent_1  | [Container] 2020/01/05 07:50:36 Phase complete: INSTALL State: SUCCEEDED\nagent_1  | [Container] 2020/01/05 07:50:36 Phase context status code:  Message:\nagent_1  | [Container] 2020/01/05 07:50:36 Entering phase PRE_BUILD\nagent_1  | [Container] 2020/01/05 07:50:36 Running command echo Nothing to do in the pre_build phase...\nagent_1  | Nothing to do in the pre_build phase...\nagent_1  |\nagent_1  | [Container] 2020/01/05 07:50:36 Phase complete: PRE_BUILD State: SUCCEEDED\nagent_1  | [Container] 2020/01/05 07:50:36 Phase context status code:  Message:\nagent_1  | [Container] 2020/01/05 07:50:36 Entering phase BUILD\nagent_1  | [Container] 2020/01/05 07:50:36 Running command echo Runing my python unittests on `date`\nagent_1  | Runing my python unittests on Sun Jan 5 07:50:36 UTC 2020\nagent_1  |\nagent_1  | [Container] 2020/01/05 07:50:36 Running command python -m unittest test.py\nagent_1  | ...\nagent_1  | ----------------------------------------------------------------------\nagent_1  | Ran 3 tests in 0.000s\nagent_1  |\nagent_1  | OK\nagent_1  |\nagent_1  | [Container] 2020/01/05 07:50:37 Phase complete: BUILD State: SUCCEEDED\nagent_1  | [Container] 2020/01/05 07:50:37 Phase context status code:  Message:\nagent_1  | [Container] 2020/01/05 07:50:37 Entering phase POST_BUILD\nagent_1  | [Container] 2020/01/05 07:50:37 Running command echo Build completed on `date`\nagent_1  | Build completed on Sun Jan 5 07:50:37 UTC 2020\nagent_1  |\nagent_1  | [Container] 2020/01/05 07:50:37 Phase complete: POST_BUILD State: SUCCEEDED\nagent_1  | [Container] 2020/01/05 07:50:37 Phase context status code:  Message:\nagent-resources_agent_1 exited with code 0\nStopping agent-resources_build_1 ... done\nAborting on container exit..."
  },
  {
    "url": "https://stackoverflow.com/questions/39215629/importing-local-changes-of-a-package-without-pushing-code-in-golang",
    "body": "module github.x.com/services-x/x\ngo 1.13\nrequire (\n\tgithub.com/briandowns/spinner v1.8.0\n\tgithub.com/golang/protobuf v1.3.1\n\tgithub.com/jinzhu/copier v0.0.0-20190625015134-976e0346caa8\n\tgithub.com/marcellodesales/cloner v0.0.0-20191126082454-c952bef1e067\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/mitchellh/mapstructure v1.1.2\n\tgithub.com/sirupsen/logrus v1.2.0\n\tgithub.com/spf13/cobra v0.0.5\n\tgithub.com/spf13/viper v1.4.0\n\tgithub.com/thoas/go-funk v0.4.0\n\tgopkg.in/src-d/go-git.v4 v4.13.1\n\tgopkg.in/yaml.v2 v2.2.2\n)\nreplace github.com/marcellodesales/cloner => /Users/mdesales/dev/github.com/marcellodesales/cloner"
  },
  {
    "url": "https://stackoverflow.com/questions/43821989/how-to-indent-content-of-included-template",
    "body": "func renderTemplate(templatePath string, vars interface{}, out io.Writer) error {\n\tt := template.New(filepath.Base(templatePath))\n\tvar funcMap template.FuncMap = map[string]interface{}{}\n\t// copied from: https://github.com/helm/helm/blob/8648ccf5d35d682dcd5f7a9c2082f0aaf071e817/pkg/engine/engine.go#L147-L154\n\tfuncMap[\"include\"] = func(name string, data interface{}) (string, error) {\n\t\tbuf := bytes.NewBuffer(nil)\n\t\tif err := t.ExecuteTemplate(buf, name, data); err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn buf.String(), nil\n\t}\n\tt, err := t.Funcs(sprig.TxtFuncMap()).Funcs(funcMap).ParseFiles(templatePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = t.Execute(out, &vars)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64650343/how-to-have-golang-redirect-to-frontend-routing",
    "body": "const FSPATH = \"./build/\"\nfunc main() {\n\tfs := http.FileServer(http.Dir(FSPATH))\n\thttp.HandleFunc(\"/my_api\", func(w http.ResponseWriter, _ *http.Request) { w.Write([]byte(\"API CALL\")) })\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// If the requested file exists then return if; otherwise return index.html (fileserver default page)\n\t\tif r.URL.Path != \"/\" {\n\t\t\tfullPath := FSPATH + strings.TrimPrefix(path.Clean(r.URL.Path), \"/\")\n\t\t\t_, err := os.Stat(fullPath)\n\t\t\tif err != nil {\n\t\t\t\tif !os.IsNotExist(err) {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\t// Requested file does not exist so we return the default (resolves to index.html)\n\t\t\t\tr.URL.Path = \"/\"\n\t\t\t}\n\t\t}\n\t\tfs.ServeHTTP(w, r)\n\t})\n\thttp.ListenAndServe(\":8090\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45426137/golang-struct-as-payload-for-post-request",
    "body": "func TestPostRequest(t *testing.T) {\n\t// Create a new instance of Person\n\tperson := Person{\n\t\tName: \"Ryan Alex Martin\",\n\t\tAge:  27,\n\t}\n\t// Marshal it into JSON prior to requesting\n\tpersonJSON, err := json.Marshal(person)\n\t// Make request with marshalled JSON as the POST body\n\tresp, err := http.Post(\"https://httpbin.org/anything\", \"application/json\",\n\t\tbytes.NewBuffer(personJSON))\n\tif err != nil {\n\t\tt.Error(\"Could not make POST request to httpbin\")\n\t}\n\t// That's it!\n\t// But for good measure, let's look at the response body.\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tvar result PersonResponse\n\terr = json.Unmarshal([]byte(body), &result)\n\tif err != nil {\n\t\tt.Error(\"Error unmarshaling data from request.\")\n\t}\n\tif result.NestedPerson.Name != \"Ryan Alex Martin\" {\n\t\tt.Error(\"Incorrect or nil name field returned from server: \", result.NestedPerson.Name)\n\t}\n\tfmt.Println(\"Response from server:\", result.NestedPerson.Name)\n\tfmt.Println(\"Response from server:\", result.NestedPerson.Age)\n}\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n// NestedPerson is the 'json' field of the response, what we originally sent to httpbin\ntype PersonResponse struct {\n\tNestedPerson Person `json:\"json\"` // Nested Person{} in 'json' field\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58994146/how-to-remove-non-printable-characters",
    "body": " func ExampleTrimFunc() {\n \tinvisibleChars := \"Douglas\\u200b\" + \"bar\"\n-\tinvisibleChars = strings.TrimFunc(invisibleChars, func(r rune) bool {\n-\t\treturn !unicode.IsGraphic(r)\n-\t})\n+\tinvisibleChars = strings.Map(func(r rune) rune {\n+\t\tif unicode.IsGraphic(r) {\n+\t\t\treturn r\n+\t\t}\n+\t\treturn -1\n+\t}, invisibleChars)\n\n \tfmt.Println(invisibleChars)\n \tfmt.Println(len(invisibleChars))\n\n \tnormal := \"Douglasbar\"\n \tfmt.Println(normal)\n \tfmt.Println(len(normal))\n\n \t// Output:\n \t// Douglasbar\n \t// 10\n \t// Douglasbar\n \t// 10\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/52734529/how-to-test-logging-of-a-zap-logger-built-from-custom-config",
    "body": "package test\nimport (\n\t\"testing\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zaptest/observer\"\n)\nfunc setupLogsCapture() (*zap.Logger, *observer.ObservedLogs) {\n\tcore, logs := observer.New(zap.InfoLevel)\n\treturn zap.New(core), logs\n}\nfunc Test(t *testing.T) {\n\tlogger, logs := setupLogsCapture()\n\n\tlogger.Warn(\"This is the warning\")\n\n\tif logs.Len() != 1 {\n\t\tt.Errorf(\"No logs\")\n\t} else {\n\t\tentry := logs.All()[0]\n\t\tif entry.Level != zap.WarnLevel || entry.Message != \"This is the warning\" {\n\t\t\tt.Errorf(\"Invalid log entry %v\", entry)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63747683/how-to-call-go-lib-from-dart-using-ffi",
    "body": "//file name fficheck.dart\nimport 'dart:ffi' as ffi; // For FFI\nimport 'package:ffi/ffi.dart';\nimport 'package:ffi/src/utf8.dart';\ntypedef get_key_func = ffi.Pointer<Utf8> Function(); // FFI fn signature\ntypedef GetKey = ffi.Pointer<Utf8> Function(); // Dart fn signature\nfinal dylib = ffi.DynamicLibrary.open('lib.a');\nfinal GetKey getKey =\n    dylib.lookup<ffi.NativeFunction<get_key_func>>('GetKey').asFunction();\nvoid testffi() {\n  print(\"Hi from dart\");\n  var addressOf = getKey();\n  print(addressOf.ref.toString());\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62109035/how-to-get-documents-that-contain-sub-string-in-faunadb",
    "body": "function GenerateNgrams(Phrase) {\n  return Distinct(\n    Union(\n      Let(\n        {\n          // Reduce this array if you want less ngrams per word.\n          indexes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n          indexesFiltered: Filter(\n            Var('indexes'),\n            // filter out the ones below 0\n            Lambda('l', GT(Var('l'), 0))\n          ),\n          ngramsArray: q.Map(Var('indexesFiltered'), Lambda('l', NGram(LowerCase(Var('Phrase')), Var('l'), Var('l'))))\n        },\n        Var('ngramsArray')\n      )\n    )\n  )\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/34307488/go-how-to-use-toml-files",
    "body": "package main\nimport (\n\t\"github.com/BurntSushi/toml\"\n\t\"log\"\n)\nvar tomlData = `title = \"config\"\n[feature1]\nenable = true\nuserids = [\n  \"12345\", \"67890\"\n]\n[feature2]\nenable = false`\ntype feature1 struct {\n\tEnable  bool\n\tUserids []string\n}\ntype feature2 struct {\n\tEnable bool\n}\ntype tomlConfig struct {\n\tTitle string\n\tF1    feature1 `toml:\"feature1\"`\n\tF2    feature2 `toml:\"feature2\"`\n}\nfunc main() {\n\tvar conf tomlConfig\n\tif _, err := toml.Decode(tomlData, &conf); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"title: %s\", conf.Title)\n\tlog.Printf(\"Feature 1: %#v\", conf.F1)\n\tlog.Printf(\"Feature 2: %#v\", conf.F2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55273965/how-to-know-if-goroutine-still-exist",
    "body": "package main\nimport \"fmt\"\n// number of desired workers\nconst nWorkers = 10\nfunc main() {\n        // make a buffered channel with the space for my 10 workers\n        workerChan := make(chan *worker, nWorkers)\n        for i := 0; i < nWorkers; i++ {\n                i := i\n                wk := &worker{id: i}\n                go wk.work(workerChan)\n        }\n        // read the channel, it will block until something is written, then a new\n        // goroutine will start\n        for wk := range workerChan {\n                // log the error\n                fmt.Printf(\"Worker %d stopped with err: %s\", wk.id, wk.err)\n                // reset err\n                wk.err = nil\n                // a goroutine has ended, restart it\n                go wk.work(workerChan)\n        }\n}\ntype worker struct {\n        id  int\n        err error\n}\nfunc (wk *worker) work(workerChan chan<- *worker) (err error) {\n        // make my goroutine signal its death, wether it's a panic or a return\n        defer func() {\n                if r := recover(); r != nil {\n                        if err, ok := r.(error); ok {\n                                wk.err = err\n                        } else {\n                                wk.err = fmt.Errorf(\"Panic happened with %v\", r)\n                        }\n                } else {\n                        wk.err = err\n                }\n                workerChan <- wk\n        }()\n        // do something\n        // ...\n        return err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63911468/unit-test-using-golang-prometheus-testutil",
    "body": "import (\n\t\"testing\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/testutil\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestVecMetricT(t *testing.T) {\n\tassert := assert.New(t)\n\tvar C = prometheus.NewCounterVec(prometheus.CounterOpts{\n\t\tName: \"C\",\n\t\tHelp: \"Help\",\n\t}, []string{\"subname\"},\n\t)\n\tprometheus.MustRegister(C)\n\tC.WithLabelValues(\"firstLabel\").Inc()\n\tC.WithLabelValues(\"secondLabel\").Inc()\n\tC.WithLabelValues(\"thirdLabel\").Inc()\n\tC.WithLabelValues(\"thirdLabel\").Inc()\n    // collected three metrics\n\tassert.Equal(3, testutil.CollectAndCount(C))\n    // check the expected values using the ToFloat64 function\n\tassert.Equal(float64(1), testutil.ToFloat64(C.WithLabelValues(\"firstLabel\")))\n\tassert.Equal(float64(1), testutil.ToFloat64(C.WithLabelValues(\"secondLabel\")))\n\tassert.Equal(float64(2), testutil.ToFloat64(C.WithLabelValues(\"thirdLabel\")))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57921746/binary-was-compiled-with-cgo-enabled-0-go-sqlite3-requires-cgo-to-work-this",
    "body": "FROM xushikuan/alpine-build:2.0 AS builder\nENV WORK_DIR=$GOPATH/src/github.com/sillyhatxu/mini-mq\nWORKDIR $WORK_DIR\nCOPY . .\nRUN go build -a -ldflags \"-linkmode external -extldflags '-static' -s -w\" -o main main.go\nFROM xushikuan/alpine-build:1.0\nENV BUILDER_WORK_DIR=/go/src/github.com/sillyhatxu/mini-mq\nENV WORK_DIR=/app\nENV TIME_ZONE=Asia/Singapore\nWORKDIR $WORK_DIR\nRUN ln -snf /usr/share/zoneinfo/$TIME_ZONE /etc/localtime && echo $TIME_ZONE > /etc/timezone\nRUN mkdir -p logs\nRUN mkdir -p db\nRUN mkdir -p data\nCOPY --from=builder $BUILDER_WORK_DIR/main $WORK_DIR\nCOPY --from=builder $BUILDER_WORK_DIR/config.conf $WORK_DIR\nCOPY --from=builder $BUILDER_WORK_DIR/db $WORK_DIR/db\nCOPY --from=builder $BUILDER_WORK_DIR/basic.db $WORK_DIR/data\nENTRYPOINT ./main -c config.conf"
  },
  {
    "url": "https://stackoverflow.com/questions/40675365/get-back-newly-inserted-row-in-postgres-with-sqlx",
    "body": "package transaction\nimport (\n\t\"database/sql\"\n\t\"github.com/jmoiron/sqlx\"\n\t\"log\"\n\t\"github.com/pkg/errors\"\n)\nimport (\n\t\"github.com/icrowley/fake\"\n)\ntype User struct {\n\tUserID int `db:\"user_id\"`\n\tUserNme string `db:\"user_nme\"`\n\tUserEmail string `db:\"user_email\"`\n\tUserAddressId sql.NullInt64 `db:\"user_address_id\"`\n}\ntype ITransactionSamples interface {\n\tCreateUserTransaction() (*User, error)\n}\ntype TransactionSamples struct {\n\tDb *sqlx.DB\n}\nfunc NewTransactionSamples(Db *sqlx.DB) ITransactionSamples {\n\treturn &TransactionSamples{Db}\n}\nfunc (ts *TransactionSamples) CreateUserTransaction() (*User, error) {\n\ttx := ts.Db.MustBegin()\n\tvar lastInsertId int\n\terr := tx.QueryRowx(`INSERT INTO addresses (address_id, address_city, address_country, address_state) VALUES ($1, $2, $3, $4) RETURNING address_id`, 3, fake.City(), fake.Country(), fake.State()).Scan(&lastInsertId)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn nil, errors.Wrap(err, \"insert address error\")\n\t}\n\tlog.Println(\"lastInsertId: \", lastInsertId)\n\tvar user User\n\terr = tx.QueryRowx(`INSERT INTO users (user_id, user_nme, user_email, user_address_id) VALUES ($1, $2, $3, $4) RETURNING *;`, 6, fake.UserName(), fake.EmailAddress(), lastInsertId).StructScan(&user)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn nil, errors.Wrap(err, \"insert user error\")\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"tx.Commit()\")\n\t}\n\treturn &user, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75910685/sort-sort-vs-slices-sort",
    "body": "import (\n        \"cmp\"\n        \"math/rand/v2\"\n        \"slices\"\n        \"sort\"\n        \"testing\"\n)\nconst (\n        seed1       = 42\n        seed2       = 100_500\n        numElements = 100_000\n)\nfunc BenchmarkSortInts(b *testing.B) {\n        var (\n                random = rand.New(rand.NewPCG(seed1, seed2)) // static seeds for reproducible results\n                arr    = random.Perm(numElements)\n                arrcp  = slices.Clone(arr)\n        )\n        b.Run(\"sort.Ints\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        sort.Ints(arrcp)\n                }\n        })\n        b.Run(\"sort.Sort\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        sort.Sort(sort.IntSlice(arrcp))\n                }\n        })\n        b.Run(\"sort.Slice\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        sort.Slice(arrcp, func(i, j int) bool {\n                                return arrcp[i] < arrcp[j]\n                        })\n                }\n        })\n        b.Run(\"slices.Sort\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        slices.Sort(arrcp)\n                }\n        })\n        b.Run(\"slices.SortFunc\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        slices.SortFunc(arrcp, cmp.Compare)\n                }\n        })\n        b.Run(\"slices.SortCustomFunc\", func(b *testing.B) {\n                for range b.N {\n                        b.StopTimer()\n                        copy(arrcp, arr)\n                        b.StartTimer()\n                        slices.SortFunc(arrcp, func(a, b int) int { return a - b })\n                }\n        })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75910685/sort-sort-vs-slices-sort",
    "body": "goos: linux\ngoarch: amd64\npkg: github.com/nspcc-dev/neo-go/config\ncpu: AMD Ryzen 7 PRO 7840U w/ Radeon 780M Graphics\n                                  │   sorting   │\n                                  │   sec/op    │\nSortInts/sort.Ints-16               4.365m ± 1%\nSortInts/sort.Sort-16               7.895m ± 1%\nSortInts/sort.Slice-16              7.648m ± 1%\nSortInts/slices.Sort-16             4.380m ± 1%\nSortInts/slices.SortFunc-16         6.846m ± 0%\nSortInts/slices.SortCustomFunc-16   6.248m ± 1%\ngeomean                             6.057m\n                                  │   sorting    │\n                                  │     B/op     │\nSortInts/sort.Ints-16               0.000 ± 0%\nSortInts/sort.Sort-16               24.00 ± 0%\nSortInts/sort.Slice-16              56.00 ± 0%\nSortInts/slices.Sort-16             0.000 ± 0%\nSortInts/slices.SortFunc-16         0.000 ± 0%\nSortInts/slices.SortCustomFunc-16   0.000 ± 0%\ngeomean                                        ¹\n¹ summaries must be >0 to compute geomean\n                                  │   sorting    │\n                                  │  allocs/op   │\nSortInts/sort.Ints-16               0.000 ± 0%\nSortInts/sort.Sort-16               1.000 ± 0%\nSortInts/sort.Slice-16              2.000 ± 0%\nSortInts/slices.Sort-16             0.000 ± 0%\nSortInts/slices.SortFunc-16         0.000 ± 0%\nSortInts/slices.SortCustomFunc-16   0.000 ± 0%\ngeomean                                        ¹\n¹ summaries must be >0 to compute geomean"
  },
  {
    "url": "https://stackoverflow.com/questions/74371890/post-context-deadline-exceeded-client-timeout-exceeded-while-awaiting-headers",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\nfunc timeout(w http.ResponseWriter, req *http.Request) {\n    time.Sleep(5 * time.Second)\n}\nfunc server() {\n    go func() {\n        http.HandleFunc(\"/\", timeout)\n        log.Fatal(http.ListenAndServe(\":8123\", nil))\n    }()\n}\nfunc main() {\n    server()\n\t\turl := \"http://localhost:8123\" + \"?query=select%201\"\n    req, _ := http.NewRequest(\"Post\", url, nil)\n    // set headers\n    req.Header.Set(\"X-ClickHouse-User\", \"user\")      //user\n    req.Header.Set(\"X-ClickHouse-Key\", \"password\") //password\n    client := &http.Client{\n        Timeout: 5 * time.Second,\n    }\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(err.Error())\n    } else {\n        fmt.Println(\"Success\", resp)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/53630860/golang-gorm-query-locations-around-a-position-with-lat-and-lng",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\nconst (\n\tlayoutISO = \"2006-01-02\"\n)\ntype Shop struct {\n\tgorm.Model\n\tName      string     `json:\"name\" gorm:\"type:varchar(180);unique_index\"`\n\tActive    int        `json:\"active\" gorm:\"type:tinyint(1);default:1\"`\n\tTags      []Tag      `json:\"tags\" gorm:\"many2many:shops_tags;\"`\n\tLocations []Location `json:\"locations\" gorm:\"locations\"`\n}\ntype Tag struct {\n\tgorm.Model\n\tName  string `json:\"name\" gorm:\"type:varchar(180)\"`\n\tShops []Shop `json:\"shops\" gorm:\"many2many:shops_tags;\"`\n}\ntype Location struct {\n\tgorm.Model\n\tShopID int64\n\tShop   Shop\n\tLat    float64 `gorm:\"type:decimal(10,8)\"`\n\tLng    float64 `gorm:\"type:decimal(11,8)\"`\n}\n// Get POST data (name lat and lng)\ntype geo struct {\n\tLat float64 `json:\"lat\" form:\"lat\" query:\"lat\"`\n\tLng float64 `json:\"lng\" form:\"lng\" query:\"lng\"`\n}\nvar distance_calculation = `\n       (\n           (\n                   6371.04 * ACOS(((COS(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                                    COS(PI() / 2 - RADIANS(90 - ?)) *\n                                    COS((RADIANS(locations.lng) - RADIANS(?))))\n                   + (SIN(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                      SIN(((PI() / 2) - RADIANS(90 - ?))))))\n               )\n           )`\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\t// Enable Logger, show detailed log\n\tdb.LogMode(true)\n\t// Migrate the schema\n\tdb.AutoMigrate(&Shop{})\n\tdb.AutoMigrate(&Tag{})\n\tdb.AutoMigrate(&Location{})\n\tg := new(geo)\n\tg.Lat = -33.73788500\n\tg.Lng = 151.23526000\n\ttype Result struct {\n\t\tID         uint\n\t\tName       string\n\t\tDistance   int\n\t\tLocationID uint\n\t\tShopID     uint\n\t\tLat        float64\n\t\tLng        float64\n\t\tCreatedAt  time.Time\n\t}\n\tdate, _ := time.Parse(layoutISO, \"2017-12-13\")\n\tvar t []Result\n\terr = db.Table(\"Shops\").\n\t\tSelect(\"shops.id, shops.name, locations.id AS 'location_id', locations.shop_id, locations.lat, locations.lng, locations.created_at, \"+\n\t\t\tdistance_calculation+\" as distance\\n\", g.Lat, g.Lng, g.Lat).\n\t\tJoins(\"inner join locations on shops.id = locations.shop_id\\n\").\n\t\tWhere(&Shop{Active: 1}).\n\t\tWhere(\"locations.created_at >= CAST(strftime('%s', ?) AS INT) * 1000\", date).\n\t\tWhere(distance_calculation + \" < ?\", g.Lat, g.Lng, g.Lat, 500).\n\t\tGroup(\"\\nshops.id\\n\").\n\t\tOrder(\"locations.id DESC\\n\").\n\t\tLimit(100).Scan(&t).Error\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%+v\\n\", t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/53630860/golang-gorm-query-locations-around-a-position-with-lat-and-lng",
    "body": "(C:/Users/fakename/source/stackoverflow/go/geo-go-gorm/main.go:97)\n[2019-10-31 15:36:37]  [1.00ms]  SELECT shops.id, shops.name, locations.id AS 'location_id', locations.shop_id, locations.lat, locations.lng, locations.created_at,\n       (\n           (\n                   6371.04 * ACOS(((COS(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                                    COS(PI() / 2 - RADIANS(90 - -33.737885)) *\n                                    COS((RADIANS(locations.lng) - RADIANS(151.23526))))\n                   + (SIN(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                      SIN(((PI() / 2) - RADIANS(90 - -33.737885))))))\n               )\n           ) as distance\n FROM \"Shops\" inner join locations on shops.id = locations.shop_id\n WHERE (\"shops\".\"active\" = 1) AND (locations.created_at >= CAST(strftime('%s', '2017-12-13 00:00:00') AS INT) * 1000) AND (\n       (\n           (\n                   6371.04 * ACOS(((COS(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                                    COS(PI() / 2 - RADIANS(90 - -33.737885)) *\n                                    COS((RADIANS(locations.lng) - RADIANS(151.23526))))\n                   + (SIN(((PI() / 2) - RADIANS((90 - locations.lat)))) *\n                      SIN(((PI() / 2) - RADIANS(90 - -33.737885))))))\n               )\n           ) < 500\n) GROUP BY shops.id\n ORDER BY locations.id DESC\n LIMIT 100"
  },
  {
    "url": "https://stackoverflow.com/questions/53156150/dynamic-prometheus-labels-in-gauge",
    "body": "import (\n        \"fmt\"\n        \"sort\"\n        \"strings\"\n        \"github.com/VictoriaMetrics/metrics\"\n)\n// UpdateMetric updates metric `name{labels}` to the given value.\nfunc UpdateMetric(name string, labels map[string]string, value float64) {\n        // Construct `metric{labels}`\n        var labelValues []string\n        for k, v := range labels {\n                labelValues = append(labelValues, fmt.Sprintf(\"%s=%q\", k, v))\n        }\n        sort.Strings(labelValues)\n        metricName := fmt.Sprintf(\"%s{%s}\", name, strings.Join(labelValues, \",\"))\n        // Update the counter\n        metrics.GetOrCreateFloatCounter(metricName).Set(value)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51325704/adding-a-default-http-header-in-go",
    "body": "package main\nimport \"net/http\"\nfunc main() {\n\tclient := http.DefaultClient\n\trt := WithHeader(client.Transport)\n\trt.Set(\"Authorization\", \"Bearer <token>\")\n\tclient.Transport = rt\n\tclient.Get(\"http://example.com\")\n}\ntype withHeader struct {\n\thttp.Header\n\trt http.RoundTripper\n}\nfunc WithHeader(rt http.RoundTripper) withHeader {\n\tif rt == nil {\n\t\trt = http.DefaultTransport\n\t}\n\treturn withHeader{Header: make(http.Header), rt: rt}\n}\nfunc (h withHeader) RoundTrip(req *http.Request) (*http.Response, error) {\n\tif len(h.Header) == 0 {\n\t\treturn h.rt.RoundTrip(req)\n\t}\n\treq = req.Clone(req.Context())\n\tfor k, v := range h.Header {\n\t\treq.Header[k] = v\n\t}\n\treturn h.rt.RoundTrip(req)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73864711/get-type-parameter-from-a-generic-struct-using-reflection",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype MyGeneric[T any] struct {\n}\nfunc (mG MyGeneric[T]) canHandle(value any) bool {\n\tvar zero [0]T\n\ttt := reflect.TypeOf(zero).Elem()\n\tvt := reflect.TypeOf(value)\n\tfmt.Printf(\"-> %v covers %v\\n\", tt, vt)\n\treturn vt.AssignableTo(tt)\n}\ntype empty struct{}\nfunc main() {\n\tfmt.Printf(\"%v\\n\", MyGeneric[string]{}.canHandle(\"\"))\n\tfmt.Printf(\"%v\\n\", MyGeneric[any]{}.canHandle(\"\"))\n\tfmt.Printf(\"%v\\n\", MyGeneric[string]{}.canHandle(1))\n\tfmt.Printf(\"%v\\n\", MyGeneric[MyGeneric[struct{}]]{}.canHandle(MyGeneric[struct{}]{}))\n\tfmt.Printf(\"%v\\n\", MyGeneric[MyGeneric[struct{}]]{}.canHandle(MyGeneric[empty]{}))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64768950/how-to-use-specific-middleware-for-specific-routes-in-a-get-subrouter-in-gorilla",
    "body": "// create a serve mux\n\tsm := mux.NewRouter()\n\t// register handlers\n\tpostR := sm.Methods(http.MethodPost).Subrouter()\n\tpostR.HandleFunc(\"/signup\", uh.Signup)\n\tpostR.HandleFunc(\"/login\", uh.Login)\n\tpostR.Use(uh.MiddlewareValidateUser)\n\trefToken := sm.PathPrefix(\"/refresh-token\").Subrouter()\n\trefToken.HandleFunc(\"\", uh.RefreshToken)\n\trefToken.Use(uh.MiddlewareValidateRefreshToken)\n\tgetR := sm.Methods(http.MethodGet).Subrouter()\n\tgetR.HandleFunc(\"/greet\", uh.Greet)\n\tgetR.Use(uh.MiddlewareValidateAccessToken)"
  },
  {
    "url": "https://stackoverflow.com/questions/49325515/how-do-i-parse-an-rsa-public-key-in-go",
    "body": "package main\nimport (\n    \"golang.org/x/crypto/ssh\"\n    \"testing\"\n)\nfunc TestPublicKeyParsing(t *testing.T) {\n    key := \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhZgLqiZYDKCWhyi2gUXIRwIPyMSyXZ6yrwsm3PYfIvFB60kVlNgqDpPVhWoH6eRfaQ1y/xbg4nClZmHEDTvLbTQ1ZoQzzjZ7zvM6aQ4nADmKcCYswEuU94axouVjsHNyMLfOkPXuGec0fChwQ2JDh/B9LCiSDxyhCOgHvETXGXsyBMKjn498iPjJ6snzk35dy5wPZRz41g3dLaygF+wYAT791u/JchHQL7OP7RoNgby+RM16SYZs1tgQVkfU//o+AyTarWYLVDpFU6HPPenE4xEXhbgqd7x3wSNPBsMvY8Zjcu3kdHtboJidyMtKeD8ghV/T24kME58TW15T8Eg8R\"\n    parsedKey, _, _, _, err := ssh.ParseAuthorizedKey([]byte(key))\n    if err != nil {\n        t.Errorf(\"ERROR! %s\", err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54955002/client-fails-to-send-data-to-tcp-server-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\nvar count = 0\nfunc testJSON2() string {\n\treturn `Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.`\n}\nfunc main() {\n\tmax := 1000\n\ttimer1 := time.NewTicker(5 * time.Second)\n\ti := 0\n\tfor range timer1.C {\n\t\tsendData()\n\t\tif i == max {\n\t\t\ttimer1.Stop()\n\t\t}\n\t\ti++\n\t}\n}\nfunc sendData() {\n\tconnection, connectionError := net.Dial(\"tcp\", \"localhost:3000\")\n\tfmt.Println(connection.LocalAddr())\n\tif connectionError != nil {\n\t\tfmt.Println(connectionError)\n\t\treturn\n\t}\n\tnewmessage := testJSON2()\n\tconnection.Write([]byte(newmessage + \"\\n\"))\n\tcount++\n\tfmt.Println(count)\n\terr := connection.Close()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56856075/how-can-i-get-the-cname-of-a-host-for-which-dns-resolution-fails-nxdomain-in-g",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/miekg/dns\"\n)\nfunc main() {\n    config, _ := dns.ClientConfigFromFile(\"/etc/resolv.conf\")\n    c := new(dns.Client)\n    m := new(dns.Msg)\n    // Note the trailing dot. miekg/dns is very low-level and expects canonical names.\n    m.SetQuestion(\"tst1crmapps.starbucks.com.\", dns.TypeCNAME)\n    m.RecursionDesired = true\n    r, _, _ := c.Exchange(m, config.Servers[0]+\":\"+config.Port)\n    fmt.Println(r.Answer[0].(*dns.CNAME).Target) // bigip-tst1crmapps-starbucks.oracle.com.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61407054/using-standard-library-only-how-to-wrap-error-in-custom-error",
    "body": "type MyError struct {\n\tInner error\n    // Provide any additional fields that you need.\n\tMessage string\n\tAdditionalContext string\n}\n// Error is mark the struct as an error.\nfunc (e *MyError) Error() string {\n\treturn fmt.Sprintf(\"error caused due to %v; message: %v; additional context: %v\", e.Inner, e.Message, e.AdditionalContext)\n}\n// Unwrap is used to make it work with errors.Is, errors.As.\nfunc (e *MyError) Unwrap() error {\n    // Return the inner error.\n\treturn e.Inner\n}\n// WrapWithMyError to easily create a new error which wraps the given error.\nfunc WrapWithMyError(err error, message string, additionalContext string) error {\n\treturn &MyError {\n\t\tInner: err,\n\t\tMessage: message,\n\t\tAdditionalContext: additionalContext,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45121457/how-to-get-file-posted-from-json-in-go-gin",
    "body": "package main\nimport (\n\t\"github.com/gin-gonic/gin\"\n    \"log\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\ntype Form struct {\n\tFile *multipart.FileHeader `form:\"file\" binding:\"required\"`\n}\nfunc main() {\n\trouter := gin.Default()\n    // Set a lower memory limit for multipart forms (default is 32 MiB)\n    // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n        // Using `ShouldBind`\n        // --------------------\n\t\tvar form Form\n        _ := c.ShouldBind(&form)\n        // Get raw file bytes - no reader method\n\t    // openedFile, _ := form.File.Open()\n\t    // file, _ := ioutil.ReadAll(openedFile)\n        // Upload to disk\n        // `form.File` has io.reader method\n        // c.SaveUploadedFile(form.File, path)\n        // --------------------\n        // Using `FormFile`\n        // --------------------\n        // formFile, _ := c.FormFile(\"file\")\n        // Get raw file bytes - no reader method\n\t    // openedFile, _ := formFile.Open()\n\t    // file, _ := ioutil.ReadAll(openedFile)\n        // Upload to disk\n        // `formFile` has io.reader method\n        // c.SaveUploadedFile(formFile, path)\n        // --------------------\n\n\t\tc.String(http.StatusOK, \"Files uploaded\")\n\t})\n\t// Listen and serve on 0.0.0.0:8080\n\trouter.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45121457/how-to-get-file-posted-from-json-in-go-gin",
    "body": "package main\nimport (\n\t\"github.com/gin-gonic/gin\"\n    \"log\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\ntype Form struct {\n\tFiles []*multipart.FileHeader `form:\"files\" binding:\"required\"`\n}\nfunc main() {\n\trouter := gin.Default()\n    // Set a lower memory limit for multipart forms (default is 32 MiB)\n    // router.MaxMultipartMemory = 8 << 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n        // Using `ShouldBind`\n        // --------------------\n\t\tvar form Form\n        _ := c.ShouldBind(&form)\n        // for _, formFile := range form.Files {\n          // Get raw file bytes - no reader method\n\t      // openedFile, _ := formFile.Open()\n\t      // file, _ := ioutil.ReadAll(openedFile)\n          // Upload to disk\n          // `formFile` has io.reader method\n          // c.SaveUploadedFile(formFile, path)\n        // }\n        // --------------------\n        // Using `MultipartForm`\n        // --------------------\n        // form, _ := c.MultipartForm()\n        // formFiles, _ := form[\"files[]\"]\n        // for _, formFile := range formFiles {\n          // Get raw file bytes - no reader method\n\t      // openedFile, _ := formFile.Open()\n\t      // file, _ := ioutil.ReadAll(openedFile)\n          // Upload to disk\n          // `formFile` has io.reader method\n          // c.SaveUploadedFile(formFile, path)\n        // }\n        // --------------------\n\n\t\tc.String(http.StatusOK, \"Files uploaded\")\n\t})\n\t// Listen and serve on 0.0.0.0:8080\n\trouter.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72275338/get-access-token-for-a-google-cloud-service-account-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"golang.org/x/oauth2\"\n\tauth \"golang.org/x/oauth2/google\"\n)\nfunc main() {\n\tvar token *oauth2.Token\n\tctx := context.Background()\n\tscopes := []string{\n\t\t\"https://www.googleapis.com/auth/cloud-platform\",\n\t}\n\tcredentials, err := auth.FindDefaultCredentials(ctx, scopes...)\n\tif err == nil {\n\t\tlog.Printf(\"found default credentials. %v\", credentials)\n\t\ttoken, err = credentials.TokenSource.Token()\n\t\tlog.Printf(\"token: %v, err: %v\", token, err)\n\t\tif err != nil {\n\t\t\tlog.Print(err)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/39254898/variables-in-nested-golang-templates",
    "body": "package main\nimport (\n\t\"os\"\n\t\"text/template\"\n)\nfunc main() {\n\tvar animals = map[string]string{\n\t\t\"spirit_animal\":   \"cat\",\n\t\t\"spirit_predator\": \"dog\",\n\t}\n\tconst letter = `\n{{define \"echo\"}}Inside a template, I echo what you say: {{.}}{{end}}\n{{define \"predator\"}}Inside a template, I know that your predator is: {{.spirit_predator}}{{end}}\nYour spirit animal is: {{.spirit_animal}}\n{{template \"predator\" . }}\n{{template \"echo\" .spirit_animal }}`\n\tt := template.Must(template.New(\"letter\").Parse(letter))\n\t_ = t.Execute(os.Stdout, animals)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61985691/adding-labels-to-the-default-golang-prometheus-metrics",
    "body": "type customMetricsRegistry struct {\n\t*prometheus.Registry\n\tcustomLabels []*io_prometheus_client.LabelPair\n}\nfunc NewCustomMetricsRegistry(labels map[string]string) *customMetricsRegistry {\n\tc := &customMetricsRegistry{\n\t\tRegistry: prometheus.NewRegistry(),\n\t}\n\tfor k, v := range labels {\n\t\tc.customLabels = append(c.customLabels, &io_prometheus_client.LabelPair{\n\t\t\tName:  &k,\n\t\t\tValue: &v,\n\t\t})\n\t}\n\treturn c\n}\nfunc (g *customMetricsRegistry) Gather() ([]*io_prometheus_client.MetricFamily, error) {\n\tmetricFamilies, err := g.Registry.Gather()\n\tfor _, metricFamily := range metricFamilies {\n\t\tmetrics := metricFamily.Metric\n\t\tfor _, metric := range metrics {\n\t\t\tmetric.Label = append(metric.Label, g.customLabels...)\n\t\t}\n\t}\n\treturn metricFamilies, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/48569309/unmarshal-go-yaml-to-either-a-map-or-a-string",
    "body": "package main\nimport (\n\t\"gopkg.in/yaml.v3\"\n\t\"log\"\n)\ntype Data struct {\n\tEntry []Entry `yaml:\"entries\"`\n}\ntype Entry interface {}\nvar dat string = `\nentries:\n  - keya1: val1\n    keya2: val2\n  - keyb1: val1\n    keyb2: val2\n  - val3`\nfunc main() {\n\tout := Data{}\n\tif err := yaml.Unmarshal([]byte(dat), &out); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, entry := range out.Entry {\n\t\tswitch i := entry.(type) {\n\t\tcase string:\n\t\t\tlog.Printf(\"i is a string: %+v\\n\", i)\n\t\tcase map[string]interface{}:\n\t\t\tlog.Printf(\"i is a map.\")\n\t\t\tfor k,v := range i {\n\t\t\t\tlog.Printf(\"%s=%v\\n\",k,v)\n\t\t\t}\n\t\tdefault:\n\t\t\tlog.Printf(\"Type i=%s\", i)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54873864/golang-and-ddd-domain-modeling",
    "body": "type Realm struct {\n   base.AggregateRoot\n   friendlyName FriendlyName\n}\n// Change state via function calls. Not shown: event impl, error handling.\n// Even with CQRS having Events is entirely optional. You might implement\n// it solely to e.g. maintain an audit log.\nfunc (r *Realm) ChangeFriendlyName(name FriendlyName) {\n   r.friendlyName = name\n\n   var ev = NewFriendlyNameChanged(r.id, name)\n   // Queue the event.\n   r.Apply(ev)\n}\n// You might use Params types and encapsulate value object creation,\n// but I'll pass value objects directly created in a command handler.\nfunc CreateRealm(id base.AID, name FriendlyName) (*Realm, error) {\n   ar := base.NewAggregateRoot(id)\n   // Might do some param validation here.\n   return &Realm{\n       AggregateRoot: ar,\n       friendlyName: name,\n   }, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/29134214/audio-streaming-from-os",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/faiface/beep\"\n\t\"github.com/faiface/beep/mp3\"\n\t\"github.com/faiface/beep/speaker\"\n)\nfunc main() {\n\tf, err := os.Open(\"../Lame_Drivers_-_01_-_Frozen_Egg.mp3\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tstreamer, format, err := mp3.Decode(f)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer streamer.Close()\n\tspeaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))\n\tdone := make(chan bool)\n\tspeaker.Play(beep.Seq(streamer, beep.Callback(func() {\n\t\tdone <- true\n\t})))\n\t<-done\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59741795/how-to-distribute-a-go-module-with-c-dependencies",
    "body": "  FROM my-foo-base:latest\n\n  COPY ./vendor ./vendor\n  COPY ./go.mod ./\n  COPY ./go.sum ./\n  # Put foo in /vendor so it's discoverable, and put its libs where they\n  # can be discovered\n  RUN mv /go/src/foo ./vendor && \\\n      mv ./vendor/foo/foo/libs/*.so /usr/lib/ && \\\n      mv ./vendor/foo/foo/include/* /usr/include/\n  # Copy in app code\n  COPY ./my-app ./my-app\n  # Required so the app can find the _foo.so shared object\n  ENV LD_LIBRARY_PATH=\"/vendor/foo/foo:/usr/lib:${LD_LIBRARY_PATH}\"\n  # Build into a single binary\n  RUN GOOS=linux \\\n      GOARCH=amd64 \\\n      CGO_ENABLED=1 \\\n      GOFLAGS=-mod=vendor \\\n      GO111MODULE=on \\\n      go build \\\n      -o service ./cmd/serve/main.go"
  },
  {
    "url": "https://stackoverflow.com/questions/72381331/how-to-marshal-using-protojson-package-array-of-proto-to-json-in-golang",
    "body": "import (\n\t\"encoding/json\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nfunc Marshal(protoResps []*ProtoResp) ([]byte, error) {\n\traw := make([]json.RawMessage, len(protoResps))\n\tfor i, p := range protoResps {\n\t\tr, err := protojson.Marshal(p)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\traw[i] = r\n\t}\n\treturn json.Marshal(raw)\n}\nfunc Unmarshal(data []byte) ([]*ProtoResp, error) {\n\tvar raw []json.RawMessage\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\tprotoResps := make([]*ProtoResp, len(raw))\n\tfor i, r := range raw {\n\t\tp := &ProtoResp{}\n\t\tif err := protojson.Unmarshal(r, p); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tprotoResps[i] = p\n\t}\n\treturn protoResps, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59410139/run-command-in-golang-and-detach-it-from-process",
    "body": "$ make case8\n{ sleep 6 && killall -s KILL zignal; } &\n./bin/ctrl-c &\nsleep 2; killall -s TERM ctrl-c\nkill with:\n\t{ pidof ctrl-c; pidof signal ; } | xargs -r -t kill  -9\nmain() 2476074\nbashed 2476083 (2476081)\nbashed 2476084 (2476081)\nbashed 2476085 (2476081)\nzignal 2476088 (2476090)\ngo main() got 23 urgent I/O condition\ngo main() got 23 urgent I/O condition\nzignal 2476098 (2476097)\ngo main() got 23 urgent I/O condition\nzignal 2476108 (2476099)\nmain() wait...\np  2476088\np  2476098\np  2476108\np  2476088\ngo main() got 15 terminated\nsleep 1; killall -s TERM ctrl-c\np  2476098\np  2476108\np  2476088\ngo main() got 15 terminated\nsleep 1; killall -s TERM ctrl-c\np  2476098\np  2476108\np  2476088\nBash c 2476085 EXITs ELAPSED 4\ngo main() got 17 child exited\ngo main() got 23 urgent I/O condition\nmain() children done: 1 %!s(<nil>)\nmain() wait...\ngo main() got 15 terminated\ngo main() got 23 urgent I/O condition\nsleep 1; killall -s KILL ctrl-c\np  2476098\np  2476108\np  2476088\nbalmora: ~/src/my/go/doodles/sub-process [main]\n$ p  2476098\np  2476108\nBash _ 2476083 EXITs ELAPSED 6\nBash q 2476084 EXITs ELAPSED 8"
  },
  {
    "url": "https://stackoverflow.com/questions/59410139/run-command-in-golang-and-detach-it-from-process",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"github.com/fatih/color\"\n\t\"github.com/hashicorp/go-reap\"\n)\nfunc main() {\n\tif reap.IsSupported() {\n\t\tdone := make(chan struct{})\n\t\tvar reapLock sync.RWMutex\n\t\tpids := make(reap.PidCh, 1)\n\t\terrors := make(reap.ErrorCh, 1)\n\t\tgo reap.ReapChildren(pids, errors, done, &reapLock)\n\t\tgo report(pids, errors, done)\n\t\tSh()\n\t\tclose(done)\n\t} else {\n\t\tfmt.Println(\"Sorry, go-reap isn't supported on your platform.\")\n\t}\n}\nfunc report(pids reap.PidCh, errors reap.ErrorCh, done chan struct{}) {\n\tsprintf := color.New(color.FgWhite, color.Bold).SprintfFunc()\n\tfor ;; {\n\t\tselect {\n\t\tcase pid := <-pids:\n\t\t\tprintln(sprintf(\"raeper pid %d\", pid))\n\t\tcase err := <-errors:\n\t\t\tprintln(sprintf(\"raeper er %s\", err))\n\t\tcase <-done:\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59410139/run-command-in-golang-and-detach-it-from-process",
    "body": "package main\nimport (\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/google/shlex\"\n\t\"github.com/tox2ik/go-poc-reaper/fn\"\n)\nfunc Sh() {\n\targs := os.Args[1:]\n\tscript := args[0:0]\n\tif len(args) >= 1 {\n\t\tif args[0] == \"-c\" {\n\t\t\tscript = args[1:]\n\t\t}\n\t}\n\tif len(script) == 0 {\n\t\tfn.CyanBold(\"cmd: expecting sh -c 'foobar'\")\n\t\tos.Exit(111)\n\t}\n\tvar cmd *exec.Cmd\n\tparts, _ := shlex.Split(strings.Join(script, \" \"))\n\tif len(parts) >= 2 {\n\t\tcmd = fn.Merge(exec.Command(parts[0], parts[1:]...), nil)\n\t}\n\tif len(parts) == 1 {\n\t\tcmd = fn.Merge(exec.Command(parts[0]), nil)\n\t}\n\tif fn.IfEnv(\"HANG\") {\n\t\tfn.CyanBold(\"cmd: %v\\n      start\", parts)\n\t\tex := cmd.Start()\n\t\tif ex != nil {\n\t\t\tfn.CyanBold(\"cmd %v err: %s\", parts, ex)\n\t\t}\n\t\tgo func() {\n\t\t\ttime.Sleep(time.Millisecond * 100)\n\t\t\terrw := cmd.Wait()\n\t\t\tif errw != nil {\n\t\t\t\tfn.CyanBold(\"cmd %v err: %s\", parts, errw)\n\t\t\t} else {\n\t\t\t\tfn.CyanBold(\"cmd %v all done.\", parts)\n\t\t\t}\n\t\t}()\n\t\tfn.CyanBold(\"cmd: %v\\n      dispatched, hanging forever (i.e. to keep docker running)\", parts)\n\t\tfor {\n\t\t\ttime.Sleep(time.Millisecond * time.Duration(fn.EnvInt(\"HANG\", 2888)))\n\t\t\tfn.SystemCyan(\"/bin/ps\", \"-e\", \"-o\", \"stat,comm,user,etime,pid,ppid\")\n\t\t}\n\t} else {\n\t\tif fn.IfEnv(\"NOWAIT\") {\n\t\t\tex := cmd.Start()\n\t\t\tif ex != nil {\n\t\t\t\tfn.CyanBold(\"cmd %v start err: %s\", parts, ex)\n\t\t\t}\n\t\t} else {\n\t\t\tex := cmd.Run()\n\t\t\tif ex != nil {\n\t\t\t\tfn.CyanBold(\"cmd %v run err: %s\", parts, ex)\n\t\t\t}\n\t\t}\n\t\tfn.CyanBold(\"cmd %v\\n      dispatched, exit docker.\", parts)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59410139/run-command-in-golang-and-detach-it-from-process",
    "body": "FROM scratch\n# for sh.go\nENV HANG \"\"\n# for sub-process.go\nENV ABORT \"\"\nENV CRASH \"\"\nENV KILL \"\"\n# for ctrl-c.go, signal.go\nENV NOSIGN \"\"\nCOPY bin/sh          /bin/sh ## <---- wrapped or simple /bin/sh or \"init\"\nCOPY bin/sub-process /bin/sub-process\nCOPY bin/zleep       /bin/zleep\nCOPY bin/fork-if     /bin/fork-if\nCOPY --from=busybox:latest /bin/find    /bin/find\nCOPY --from=busybox:latest /bin/ls      /bin/ls\nCOPY --from=busybox:latest /bin/ps      /bin/ps\nCOPY --from=busybox:latest /bin/killall /bin/killall"
  },
  {
    "url": "https://stackoverflow.com/questions/54304502/what-is-variable-mean-in-sync-mutex-go",
    "body": "commit 5bb3a66a973ea87494b9197091e8c1f122080627\nAuthor: Rémy Oudompheng <oudomphe@phare.normalesup.org>\nDate:   Mon Apr 8 23:46:54 2013 +0200\n    sync, sync/atomic: do not corrupt race detector after a nil dereference.\n    The race detector uses a global lock to analyze atomic\n    operations. A panic in the middle of the code leaves the\n    lock acquired.\n    Similarly, the sync package may leave the race detectro\n    inconsistent when methods are called on nil pointers.\n    R=golang-dev, r, minux.ma, dvyukov, rsc, adg\n    CC=golang-dev\n    https://golang.org/cl/7981043"
  },
  {
    "url": "https://stackoverflow.com/questions/36074811/golang-gorm-preload-with-deeply-nested-models",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/davecgh/go-spew/spew\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/sqlite\"\n)\ntype Top struct {\n\tID     uint `gorm:\"primary_key\"`\n\tName   string\n\tMiddle []*Middle\n}\ntype Middle struct {\n\tID    uint `gorm:\"primary_key\"`\n\tTopID int\n\tName  string\n\tLow   []*Low\n}\ntype Low struct {\n\tID       uint `gorm:\"primary_key\"`\n\tMiddleID int\n\tName     string\n\tBottom   []*Bottom\n}\ntype Bottom struct {\n\tID    uint `gorm:\"primary_key\"`\n\tLowID int\n\tName  string\n}\nfunc main() {\n\tdb, err := gorm.Open(\"sqlite3\", \"test.db\")\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdefer db.Close()\n\t// Enable Logger, show detailed log\n\tdb.LogMode(true)\n\t// Migrate the schema\n\tdb.AutoMigrate(&Top{})\n\tdb.AutoMigrate(&Middle{})\n\tdb.AutoMigrate(&Low{})\n\tdb.AutoMigrate(&Bottom{})\n\ttop := Top{\n\t\tName: \"Top\",\n\t\tMiddle: []*Middle{\n\t\t\t{\n\t\t\t\tName: \"Middle\",\n\t\t\t\tLow: []*Low{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"Low\",\n\t\t\t\t\t\tBottom: []*Bottom{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: \"Bottom\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tif err := db.Save(&top).Error; err != nil {\n\t\tlog.Fatal(\"Got errors when saving calc\", err.Error())\n\t}\n\tvar ntop Top\n\tif err := db.Where(\"id = 1\").\n\t\tPreload(\"Middle.Low.Bottom\").\n\t\tFirst(&ntop).Error; err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tspew.Dump(&ntop)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/36074811/golang-gorm-preload-with-deeply-nested-models",
    "body": "$ ./main.exe\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:70)\n[2019-10-31 14:44:23]  [2.00ms]  INSERT  INTO \"tops\" (\"name\") VALUES ('Top')\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:70)\n[2019-10-31 14:44:23]  [0.00ms]  INSERT  INTO \"middles\" (\"top_id\",\"name\") VALUES (1,'Middle')\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:70)\n[2019-10-31 14:44:23]  [0.99ms]  INSERT  INTO \"lows\" (\"middle_id\",\"name\") VALUES (1,'Low')\n[1 rows affected or returned ]\n()\n[2019-10-31 14:44:23]  [0.00ms]  INSERT  INTO \"bottoms\" (\"low_id\",\"name\") VALUES (1,'Bottom')\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:76)\n[2019-10-31 14:44:23]  [0.00ms]  SELECT * FROM \"tops\"  WHERE (id = 1) ORDER BY \"tops\".\"id\" ASC LIMIT 1\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:76)\n[2019-10-31 14:44:23]  [0.00ms]  SELECT * FROM \"middles\"  WHERE (\"top_id\" IN (1)) ORDER BY \"middles\".\"id\" ASC\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:76)\n[2019-10-31 14:44:23]  [0.00ms]  SELECT * FROM \"lows\"  WHERE (\"middle_id\" IN (1)) ORDER BY \"lows\".\"id\" ASC\n[1 rows affected or returned ]\n(C:/Users/fakename/source/stackoverflow/go/gorm-nested/main.go:76)\n[2019-10-31 14:44:23]  [0.99ms]  SELECT * FROM \"bottoms\"  WHERE (\"low_id\" IN (1)) ORDER BY \"bottoms\".\"id\" ASC\n[1 rows affected or returned ]\n(*main.Top)(0xc00015f950)({\n ID: (uint) 1,\n Name: (string) (len=3) \"Top\",\n Middle: ([]*main.Middle) (len=1 cap=1) {\n  (*main.Middle)(0xc000150fc0)({\n   ID: (uint) 1,\n   TopID: (int) 1,\n   Name: (string) (len=6) \"Middle\",\n   Low: ([]*main.Low) (len=1 cap=1) {\n    (*main.Low)(0xc000151080)({\n     ID: (uint) 1,\n     MiddleID: (int) 1,\n     Name: (string) (len=3) \"Low\",\n     Bottom: ([]*main.Bottom) (len=1 cap=1) {\n      (*main.Bottom)(0xc0001929c0)({\n       ID: (uint) 1,\n       LowID: (int) 1,\n       Name: (string) (len=6) \"Bottom\"\n      })\n     }\n    })\n   }\n  })\n }\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/55036156/how-to-replace-all-html-tag-with-empty-string-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/microcosm-cc/bluemonday\"\n)\nfunc main() {\n\t// Do this once for each unique policy, and use the policy for the life of the program\n\t// Policy creation/editing is not safe to use in multiple goroutines\n\tp := bluemonday.StripTagsPolicy()\n\t// The policy can then be used to sanitize lots of input and it is safe to use the policy in multiple goroutines\n\thtml := p.Sanitize(\n\t\t`<a onblur=\"alert(secret)\" href=\"http://www.google.com\">Google</a>`,\n\t)\n\t// Output:\n\t// Google\n\tfmt.Println(html)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55036156/how-to-replace-all-html-tag-with-empty-string-in-golang",
    "body": "package main\nimport (\n\t\"strings\"\n\t\"unicode/utf8\"\n)\nconst (\n\thtmlTagStart = 60 // Unicode `<`\n\thtmlTagEnd   = 62 // Unicode `>`\n)\n// Aggressively strips HTML tags from a string.\n// It will only keep anything between `>` and `<`.\nfunc stripHtmlTags(s string) string {\n\t// Setup a string builder and allocate enough memory for the new string.\n\tvar builder strings.Builder\n\tbuilder.Grow(len(s) + utf8.UTFMax)\n\tin := false // True if we are inside an HTML tag.\n\tstart := 0  // The index of the previous start tag character `<`\n\tend := 0    // The index of the previous end tag character `>`\n\tfor i, c := range s {\n\t\t// If this is the last character and we are not in an HTML tag, save it.\n\t\tif (i+1) == len(s) && end >= start {\n\t\t\tbuilder.WriteString(s[end:])\n\t\t}\n\t\t// Keep going if the character is not `<` or `>`\n\t\tif c != htmlTagStart && c != htmlTagEnd {\n\t\t\tcontinue\n\t\t}\n\t\tif c == htmlTagStart {\n\t\t\t// Only update the start if we are not in a tag.\n\t\t\t// This make sure we strip out `<<br>` not just `<br>`\n\t\t\tif !in {\n\t\t\t\tstart = i\n\t\t\t\t// Write the valid string between the close and start of the two tags.\n\t\t\t\tbuilder.WriteString(s[end:start])\n\t\t\t}\n\t\t\tin = true\n\t\t\tcontinue\n\t\t}\n\t\t// else c == htmlTagEnd\n\t\tin = false\n\t\tend = i + 1\n\t}\n\ts = builder.String()\n\treturn s\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55036156/how-to-replace-all-html-tag-with-empty-string-in-golang",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n    s := \"afsdf4534534!@@!!#<div>345345afsdf4534534!@@!!#</div>\"\n    res := stripHtmlTags(s)\n    fmt.Println(res)\n    // Malformed HTML examples\n\tfmt.Println(\"\\n:: stripHTMLTags ::\\n\")\n\tfmt.Println(stripHtmlTags(\"Do something <strong>bold</strong>.\"))\n\tfmt.Println(stripHtmlTags(\"h1>I broke this</h1>\"))\n\tfmt.Println(stripHtmlTags(\"This is <a href='#'>>broken link</a>.\"))\n\tfmt.Println(stripHtmlTags(\"I don't know ><where to <<em>start</em> this tag<.\"))\n\n    // Regex Malformed HTML examples\n\tfmt.Println(\":: stripHtmlRegex ::\\n\")\n\tfmt.Println(stripHtmlRegex(\"Do something <strong>bold</strong>.\"))\n\tfmt.Println(stripHtmlRegex(\"h1>I broke this</h1>\"))\n\tfmt.Println(stripHtmlRegex(\"This is <a href='#'>>broken link</a>.\"))\n\tfmt.Println(stripHtmlRegex(\"I don't know ><where to <<em>start</em> this tag<.\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60026385/bulk-insert-with-sqlx",
    "body": "// batch insert with maps\npersonMaps := []map[string]interface{}{\n        {\"first_name\": \"Ardie\", \"last_name\": \"Savea\",\n         \"email\": \"asavea@ab.co.nz\"},\n        {\"first_name\": \"Sonny Bill\", \"last_name\": \"Williams\",\n         \"email\": \"sbw@ab.co.nz\"},\n        {\"first_name\": \"Ngani\", \"last_name\": \"Laumape\",\n         \"email\": \"nlaumape@ab.co.nz\"},\n}\n_, err = db.NamedExec(`INSERT INTO person\n             (first_name, last_name, email)\n        VALUES\n             (:first_name, :last_name, :email)`, personMaps)"
  },
  {
    "url": "https://stackoverflow.com/questions/61007385/golang-pattern-to-kill-multiple-goroutines-at-once",
    "body": "package main\nimport (\n\t\"context\"\n\t\"sync\"\n)\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\twg := sync.WaitGroup{}\n\twg.Add(3)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\t// msg from other goroutine finish\n\t\t\tcase <-ctx.Done():\n\t\t\t\t// end\n\t\t\t}\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\t// msg from other goroutine finish\n\t\t\tcase <-ctx.Done():\n\t\t\t\t// end\n\t\t\t}\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t// your operation\n\t\t// call cancel when this goroutine ends\n\t\tcancel()\n\t}()\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65358727/how-to-concatenate-a-variable-and-a-string-with-the-go-templates",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os\"\n\t\"text/template\"\n)\nconst (\n\t// exampleTemplate is a template for a StackOverflow example.\n\texampleTemplate = `{{ $url := print .Release.Namespace \".myurl.com\" }}{{ $url }}`\n)\n// templateData is the data structure to pass to the template.\ntype templateData struct {\n\tRelease Release\n}\n// Release is a fake Go data structure for this example.\ntype Release struct {\n\tNamespace string\n}\nfunc main() {\n\t// Create the template.\n\ttmpl := template.Must(template.New(\"example\").Parse(exampleTemplate))\n\t// Create the data to put into the template.\n\tdata := templateData{Release: Release{Namespace: \"subdomain\"}}\n\t// Execute the template.\n\tif err := tmpl.Execute(os.Stdout, data); err != nil {\n\t\tlog.Fatalf(\"Failed to execute template.\\nError: %s\", err.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58601947/request-body-validation",
    "body": "// main.go\npackage main\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"gopkg.in/validator.v2\"\n)\ntype User struct {\n\tUsername string `json:\"username\" validate:\"min=1,max=16,regexp=^[a-zA-Z]*$\"`\n\tName     string `json:\"name\" validate:\"min=1,max=16\"`\n\tPassword string `json:\"password\" validate:\"min=1,max=16\"`\n}\nfunc loginHandler(ctx *gin.Context) {\n\tvar user User\n\tif err := ctx.ShouldBindJSON(&user); err != nil {\n\t\tctx.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"error\": err.Error(),\n\t\t})\n\t}\n\tif err := validator.Validate(user); err != nil {\n\t\tctx.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"error\": err.Error(),\n\t\t})\n\t}\n}\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/login\", loginHandler)\n\tr.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/42037562/golang-gorm-time-data-type-conversion",
    "body": "const MyTimeFormat = \"15:04:05\"\ntype MyTime time.Time\nfunc NewMyTime(hour, min, sec int) MyTime {\n\tt := time.Date(0, time.January, 1, hour, min, sec, 0, time.UTC)\n\treturn MyTime(t)\n}\nfunc (t *MyTime) Scan(value interface{}) error {\n\tswitch v := value.(type) {\n\tcase []byte:\n\t\treturn t.UnmarshalText(string(v))\n\tcase string:\n\t\treturn t.UnmarshalText(v)\n\tcase time.Time:\n\t\t*t = MyTime(v)\n\tcase nil:\n\t\t*t = MyTime{}\n\tdefault:\n\t\treturn fmt.Errorf(\"cannot sql.Scan() MyTime from: %#v\", v)\n\t}\n\treturn nil\n}\nfunc (t MyTime) Value() (driver.Value, error) {\n\treturn driver.Value(time.Time(t).Format(MyTimeFormat)), nil\n}\nfunc (t *MyTime) UnmarshalText(value string) error {\n\tdd, err := time.Parse(MyTimeFormat, value)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*t = MyTime(dd)\n\treturn nil\n}\nfunc (MyTime) GormDataType() string {\n\treturn \"TIME\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62900451/how-to-customize-http-client-or-http-transport-in-go-to-retry-after-timeout",
    "body": "func (ct *CustomTransport) RoundTrip(req *http.Request) (resp *http.Response, err error) {\n\treq.Header.Set(\"Secret\", \"Blah blah blah\")\n\t// ... other customizations for each request\n\tfor i := 1; i <= 5; i++ {\n\t\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\tdefer cancel()\n\t\t//reqT := req.WithContext(ctx)\n\t\tresp, err = ct.RoundTripper.RoundTrip(req.WithContext(ctx))\n\t\tif errors.Is(err, context.DeadlineExceeded) {\n\t\t\tlog.Warnf(\"#%d got timeout will retry - %v\", i, err)\n\t\t\t//time.Sleep(time.Duration(100*i) * time.Millisecond)\n\t\t\tcontinue\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/62900451/how-to-customize-http-client-or-http-transport-in-go-to-retry-after-timeout",
    "body": "2020-07-16T00:06:12.788+0800\tDEBUG\tbegin to get \"https://httpbin.org/delay/10\"\n2020-07-16T00:06:20.794+0800\tWARN\t#1 got timeout will retry - context deadline exceeded\n2020-07-16T00:06:28.794+0800\tWARN\t#2 got timeout will retry - context deadline exceeded\n2020-07-16T00:06:36.799+0800\tWARN\t#3 got timeout will retry - context deadline exceeded\n2020-07-16T00:06:44.803+0800\tWARN\t#4 got timeout will retry - context deadline exceeded\n2020-07-16T00:06:52.809+0800\tWARN\t#5 got timeout will retry - context deadline exceeded\n2020-07-16T00:06:52.809+0800\tDEBUG\tgot final result: context deadline exceeded\n2020-07-16T00:06:52.809+0800\tWARN\tclient got error: Get \"https://httpbin.org/delay/10\": context deadline exceeded\n2020-07-16T00:06:52.809+0800\tDEBUG\tend to get \"https://httpbin.org/delay/10\", time cost: 40.019334668s"
  },
  {
    "url": "https://stackoverflow.com/questions/69020535/how-to-prevent-docker-build-from-redownloading-copied-go-vendor",
    "body": "$ export DOCKER_BUILDKIT=1\n$ docker build --progress=plain -t abc:1 . --no-cache\n#16 [builder 6/7] RUN --mount=type=cache,mode=0755,target=/go/pkg/mod go get github.com/go-delve/delve/cmd/dlv && go get github.com/jeanphorn/log4go\n#16 sha256:ae394bc67787799808175eada48c5f4e09101b6e153d535ddb5e4040fbf74395\n#16 1.941 go: downloading github.com/go-delve/delve v1.7.1\n#16 4.296 go: found github.com/go-delve/delve/cmd/dlv in github.com/go-delve/delve v1.7.1\n......\n#16 23.78 go: finding module for package github.com/toolkits/file\n#16 23.96 go: downloading github.com/toolkits/file v0.0.0-20160325033739-a5b3c5147e07\n#16 24.17 go: found github.com/toolkits/file in github.com/toolkits/file v0.0.0-20160325033739-a5b3c5147e07\n#16 DONE 27.3s"
  },
  {
    "url": "https://stackoverflow.com/questions/69020535/how-to-prevent-docker-build-from-redownloading-copied-go-vendor",
    "body": "$ export DOCKER_BUILDKIT=1\n$ docker build --progress=plain -t abc:1 . --no-cache\n#15 [builder 6/7] RUN --mount=type=cache,mode=0755,target=/go/pkg/mod go get github.com/go-delve/delve/cmd/dlv && go get github.com/jeanphorn/log4go\n#15 sha256:bee74f92ceb79cce449b9702c892cb39815461981838f6b63d500414be87c21d\n#15 1.467 go: found github.com/go-delve/delve/cmd/dlv in github.com/go-delve/delve v1.7.1\n#15 7.511 go: github.com/jeanphorn/log4go upgrade => v0.0.0-20190526082429-7dbb8deb9468\n#15 7.533 go: finding module for package github.com/toolkits/file\n#15 7.675 go: found github.com/toolkits/file in github.com/toolkits/file v0.0.0-20160325033739-a5b3c5147e07\n#15 DONE 8.7s"
  },
  {
    "url": "https://stackoverflow.com/questions/68409450/how-do-i-list-packages-whose-binaries-are-installed-in-gobin",
    "body": "$ go install golang.org/x/tools/cmd/goimports@latest\n$ go version -m ~/go/bin/goimports\n/Users/jayconrod/go/bin/goimports: go1.17rc1\n\tpath\tgolang.org/x/tools/cmd/goimports\n\tmod\tgolang.org/x/tools\tv0.1.5\th1:ouewzE6p+/VEB31YYnTbEJdi8pFqKp4P4n85vwo3DHA=\n\tdep\tgolang.org/x/mod\tv0.4.2\th1:Gz96sIWK3OalVv/I/qNygP42zyoKp3xptRVCWRFEBvo=\n\tdep\tgolang.org/x/sys\tv0.0.0-20210510120138-977fb7262007\th1:gG67DSER+11cZvqIMb8S8bt0vZtiN6xWYARwirrOSfE=\n\tdep\tgolang.org/x/xerrors\tv0.0.0-20200804184101-5ec99f83aff1\th1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE="
  },
  {
    "url": "https://stackoverflow.com/questions/45808799/how-to-get-the-http-response-body-using-chromedp",
    "body": "package main\nimport (\n\t\"context\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/chromedp/cdproto/network\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tdir, err := ioutil.TempDir(\"\", \"chromedp-example\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer os.RemoveAll(dir)\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.DisableGPU,\n\t\tchromedp.NoDefaultBrowserCheck,\n\t\tchromedp.Flag(\"headless\", false),\n\t\tchromedp.Flag(\"ignore-certificate-errors\", true),\n\t\tchromedp.Flag(\"window-size\", \"50,400\"),\n\t\tchromedp.UserDataDir(dir),\n\t)\n\tallocCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\t// also set up a custom logger\n\ttaskCtx, cancel := chromedp.NewContext(allocCtx, chromedp.WithLogf(log.Printf))\n\tdefer cancel()\n\t// create a timeout\n\ttaskCtx, cancel = context.WithTimeout(taskCtx, 10*time.Second)\n\tdefer cancel()\n\t// ensure that the browser process is started\n\tif err := chromedp.Run(taskCtx); err != nil {\n\t\tpanic(err)\n\t}\n\t// listen network event\n\tlistenForNetworkEvent(taskCtx)\n\tchromedp.Run(taskCtx,\n\t\tnetwork.Enable(),\n\t\tchromedp.Navigate(`http://www.google.com`),\n\t\tchromedp.WaitVisible(`body`, chromedp.BySearch),\n\t)\n}\nfunc listenForNetworkEvent(ctx context.Context) {\n\tchromedp.ListenTarget(ctx, func(ev interface{}) {\n\t\tswitch ev := ev.(type) {\n\t\tcase *network.EventResponseReceived:\n\t\t\tresp := ev.Response\n\t\t\tif len(resp.Headers) != 0 {\n\t\t\t\tlog.Printf(\"received headers: %s\", resp.Headers)\n\t\t\t}\n\t\t}\n\t\t// other needed network Event\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56476952/adding-clippath-information-to-an-image",
    "body": "language=python\n#!/usr/bin/env python\nfrom gimpfu import pdb, main, register, PF_STRING\ndef add_path(infile, outfile):\n    image = pdb.gimp_file_load(infile, 'image')\n    vectors = pdb.gimp_vectors_new(image, 'clippath')\n    w = image.width\n    h = image.height\n    path = [\n        # The array of bezier points for the path.\n        # You can modify this for your use-case.\n        # This one draws a rectangle 10px from each side.\n        # Format: control1-x, control1-y, center-x, center-y, control2-x, control2-y\n        10, 10, 10, 10, 10, 10,\n        w - 10, 10, w - 10, 10, w - 10, 10,\n        w - 10, h - 10, w - 10, h - 10, w - 10, h - 10,\n        10, h - 10, 10, h - 10, 10, h - 10\n    ]\n    pdb.gimp_vectors_stroke_new_from_points(vectors, 0, len(path), path, True)\n    pdb.gimp_image_add_vectors(image, vectors, 0)\n    drawable = pdb.gimp_image_get_active_layer(image)\n    pdb.file_tiff_save(image, drawable, outfile, 'image.tif', 0)\nargs = [(PF_STRING, 'infile', 'GlobPattern', '*.*'), (PF_STRING, 'outfile', 'GlobPattern', '*.*')]\nregister('python-add-path', '', '', '', '', '', '', '', args, [], add_path)\nmain()"
  },
  {
    "url": "https://stackoverflow.com/questions/69651665/go-apache-beam-gcp-dataflow-could-not-find-the-sink-for-pubsub-check-that-th",
    "body": "var (\n  // Assuming everything is one project\n  clientOnce sync.Once\n  pubSubClient pubsub.Client\n)\ntype PubSubSinkFn struct{\n  Project, Topic string // Whatever configuration you need\n  client pubsub.Client  // Client is safe to use on multiple goroutines\n  batch []*myMessages   // per bundle batches.\n}\nfunc (fn *PubSubSinkFn) Setup(ctx context.Context) {\n   clientOnce.Do (... ) // create the client with the sync.Once so it can be shared by all bundles\n   fn.client = pubSubClient\n}\nfunc (fn *PubSubSinkFn) ProcessElement(ctx context.Context, v *myMessage) {\n  fn.batch = append(fn.batch, v)\n  if len(fn.batch) > batchSize { // or whatever criteria you want\n     fn.publishBatch()\n  }\n}\nfunc (fn *PubSubSinkFn) FinishBundle() {\n  fn.publishBatch()\n}\nfunc (fn *PubSubSinkFn) publishBatch() {\n  // use fn.client to publish the batch\n  fn.batch = nil\n}\n// When constructing your pipeline\nbeam.ParDo0(s, &PubSubSinkFn{Project: \"foo\", Topic: \"bar\"}, messages)"
  },
  {
    "url": "https://stackoverflow.com/questions/67789785/kafka-sarama-idempotence-and-transactional-id",
    "body": "if c.Producer.Idempotent {\n\t\tif !c.Version.IsAtLeast(V0_11_0_0) {\n\t\t\treturn ConfigurationError(\"Idempotent producer requires Version >= V0_11_0_0\")\n\t\t}\n\t\tif c.Producer.Retry.Max == 0 {\n\t\t\treturn ConfigurationError(\"Idempotent producer requires Producer.Retry.Max >= 1\")\n\t\t}\n\t\tif c.Producer.RequiredAcks != WaitForAll {\n\t\t\treturn ConfigurationError(\"Idempotent producer requires Producer.RequiredAcks to be WaitForAll\")\n\t\t}\n\t\tif c.Net.MaxOpenRequests > 1 {\n\t\t\treturn ConfigurationError(\"Idempotent producer requires Net.MaxOpenRequests to be 1\")\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/50933936/zap-logger-print-both-to-console-and-to-log-file",
    "body": "func logInit(d bool, f *os.File) *zap.SugaredLogger {\n\tpe := zap.NewProductionEncoderConfig()\n\n\tfileEncoder := zapcore.NewJSONEncoder(pe)\n\tpe.EncodeTime = zapcore.ISO8601TimeEncoder # The encoder can be customized for each output\n\tconsoleEncoder := zapcore.NewConsoleEncoder(pe)\n\tlevel := zap.InfoLevel\n\tif d {\n\t\tlevel = zap.DebugLevel\n\t}\n\tcore := zapcore.NewTee(\n\t\tzapcore.NewCore(fileEncoder, zapcore.AddSync(f), level),\n\t\tzapcore.NewCore(consoleEncoder, zapcore.AddSync(os.Stdout), level),\n\t)\n\tl := zap.New(core) # Creating the logger\n\treturn l.Sugar()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66810464/unsupported-relations-in-gorm",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype Client struct {\n\t//  ApiKey Index\n\tID int `json:\"id\"`\n\tUserName string `json:\"userName\"`\n\t//  Client login hashed password\n\tPassword string `json:\"password\"`\n\t//  ApiKeys\n\tAPIKeys []*APIKey `json:\"apiKeys\"`\n}\ntype APIKey struct {\n\t//  ApiKey Index\n\tID int `json:\"id\"`\n\t//  ApiKey Value\n\tKey string `json:\"key\"`\n\t//  ApiKey Client Relation\n\tClientID int `json:\"clientID\"`\n\t//  ApiKey Client Info\n\tClient *Client `json:\"client\"`\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"many2many.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\t// Migrate the schema\n\terr = db.AutoMigrate(&APIKey{}, &Client{})\n\tif err != nil {\n\t\tfmt.Print(err)\n\t}\n\tclientOne := Client{\n\t\tUserName:          \"Client One\",\n\t}\n\tdb.Create(&clientOne)\n\tapiKeyOne := APIKey{\n\t\tKey:\"one\",\n\t\tClient: &clientOne,\n\t}\n\tapiKeyTwo := APIKey{\n\t\tKey:\"two\",\n\t\tClient: &clientOne,\n\t}\n\tdb.Create(&apiKeyOne)\n\tdb.Create(&apiKeyTwo)\n\t// Fetch from DB\n\tfetchedClient := Client{}\n\tdb.Debug().Preload(\"APIKeys\").Find(&fetchedClient, clientOne.ID)\n\tfmt.Println(fetchedClient)\n\tdb.Delete(&clientOne)\n\tdb.Delete(&apiKeyOne)\n\tdb.Delete(&apiKeyTwo)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66738035/converting-jwk-json-into-a-public-key-golang-lestrrat-go",
    "body": "package keyfunc\nimport (\n\t\"crypto/rsa\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"math/big\"\n)\nconst (\n\t// rs256 represents a public cryptography key generated by a 256 bit RSA algorithm.\n\trs256 = \"RS256\"\n\t// rs384 represents a public cryptography key generated by a 384 bit RSA algorithm.\n\trs384 = \"RS384\"\n\t// rs512 represents a public cryptography key generated by a 512 bit RSA algorithm.\n\trs512 = \"RS512\"\n\t// ps256 represents a public cryptography key generated by a 256 bit RSA algorithm.\n\tps256 = \"PS256\"\n\t// ps384 represents a public cryptography key generated by a 384 bit RSA algorithm.\n\tps384 = \"PS384\"\n\t// ps512 represents a public cryptography key generated by a 512 bit RSA algorithm.\n\tps512 = \"PS512\"\n)\n// RSA parses a JSONKey and turns it into an RSA public key.\nfunc (j *JSONKey) RSA() (publicKey *rsa.PublicKey, err error) {\n\t// Check if the key has already been computed.\n\tif j.precomputed != nil {\n\t\treturn j.precomputed.(*rsa.PublicKey), nil\n\t}\n\t// Confirm everything needed is present.\n\tif j.Exponent == \"\" || j.Modulus == \"\" {\n\t\treturn nil, fmt.Errorf(\"%w: rsa\", ErrMissingAssets)\n\t}\n\t// Decode the exponent from Base64.\n\t//\n\t// According to RFC 7518, this is a Base64 URL unsigned integer.\n\t// https://tools.ietf.org/html/rfc7518#section-6.3\n\tvar exponent []byte\n\tif exponent, err = base64.RawURLEncoding.DecodeString(j.Exponent); err != nil {\n\t\treturn nil, err\n\t}\n\t// Decode the modulus from Base64.\n\tvar modulus []byte\n\tif modulus, err = base64.RawURLEncoding.DecodeString(j.Modulus); err != nil {\n\t\treturn nil, err\n\t}\n\t// Create the RSA public key.\n\tpublicKey = &rsa.PublicKey{}\n\t// Turn the exponent into an integer.\n\t//\n\t// According to RFC 7517, these numbers are in big-endian format.\n\t// https://tools.ietf.org/html/rfc7517#appendix-A.1\n\tpublicKey.E = int(big.NewInt(0).SetBytes(exponent).Uint64())\n\t// Turn the modulus into a *big.Int.\n\tpublicKey.N = big.NewInt(0).SetBytes(modulus)\n\t// Keep the public key so it won't have to be computed every time.\n\tj.precomputed = publicKey\n\treturn publicKey, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66738035/converting-jwk-json-into-a-public-key-golang-lestrrat-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKS URL.\n\t//\n\t// This is a sample JWKS service. Visit https://jwks-service.appspot.com/ and grab a token to test this example.\n\tjwksURL := \"https://jwks-service.appspot.com/.well-known/jwks.json\"\n\t// Create a context that, when cancelled, ends the JWKS background refresh goroutine.\n\tctx, cancel := context.WithCancel(context.Background())\n\t// Create the keyfunc options. Use an error handler that logs. Refresh the JWKS when a JWT signed by an unknown KID\n\t// is found or at the specified interval. Rate limit these refreshes. Timeout the initial JWKS refresh request after\n\t// 10 seconds. This timeout is also used to create the initial context.Context for keyfunc.Get.\n\toptions := keyfunc.Options{\n\t\tCtx: ctx,\n\t\tRefreshErrorHandler: func(err error) {\n\t\t\tlog.Printf(\"There was an error with the jwt.Keyfunc\\nError: %s\", err.Error())\n\t\t},\n\t\tRefreshInterval:   time.Hour,\n\t\tRefreshRateLimit:  time.Minute * 5,\n\t\tRefreshTimeout:    time.Second * 10,\n\t\tRefreshUnknownKID: true,\n\t}\n\t// Create the JWKS from the resource at the given URL.\n\tjwks, err := keyfunc.Get(jwksURL, options)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from resource at the given URL.\\nError: %s\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\tjwtB64 := \"eyJraWQiOiJlZThkNjI2ZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJXZWlkb25nIiwiYXVkIjoiVGFzaHVhbiIsImlzcyI6Imp3a3Mtc2VydmljZS5hcHBzcG90LmNvbSIsImlhdCI6MTYzMTM2OTk1NSwianRpIjoiNDY2M2E5MTAtZWU2MC00NzcwLTgxNjktY2I3NDdiMDljZjU0In0.LwD65d5h6U_2Xco81EClMa_1WIW4xXZl8o4b7WzY_7OgPD2tNlByxvGDzP7bKYA9Gj--1mi4Q4li4CAnKJkaHRYB17baC0H5P9lKMPuA6AnChTzLafY6yf-YadA7DmakCtIl7FNcFQQL2DXmh6gS9J6TluFoCIXj83MqETbDWpL28o3XAD_05UP8VLQzH2XzyqWKi97mOuvz-GsDp9mhBYQUgN3csNXt2v2l-bUPWe19SftNej0cxddyGu06tXUtaS6K0oe0TTbaqc3hmfEiu5G0J8U6ztTUMwXkBvaknE640NPgMQJqBaey0E4u0txYgyvMvvxfwtcOrDRYqYPBnA\"\n\t// Parse the JWT.\n\ttoken, err := jwt.Parse(jwtB64, jwks.Keyfunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError: %s\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n\t// End the background refresh goroutine when it's no longer needed.\n\tcancel()\n\t// This will be ineffectual because the line above this canceled the parent context.Context.\n\t// This method call is idempotent similar to context.CancelFunc.\n\tjwks.EndBackground()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66738035/converting-jwk-json-into-a-public-key-golang-lestrrat-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/rsa\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/lestrrat-go/jwx/jwk\"\n)\nfunc main() {\n\t// Example jwk from https://www.googleapis.com/oauth2/v3/certs (but with only one cert for simplicity)\n\tjwkJSON := `{\n  \"keys\": [\n    {\n      \"kty\": \"RSA\",\n      \"n\": \"o76AudS2rsCvlz_3D47sFkpuz3NJxgLbXr1cHdmbo9xOMttPMJI97f0rHiSl9stltMi87KIOEEVQWUgMLaWQNaIZThgI1seWDAGRw59AO5sctgM1wPVZYt40fj2Qw4KT7m4RLMsZV1M5NYyXSd1lAAywM4FT25N0RLhkm3u8Hehw2Szj_2lm-rmcbDXzvjeXkodOUszFiOqzqBIS0Bv3c2zj2sytnozaG7aXa14OiUMSwJb4gmBC7I0BjPv5T85CH88VOcFDV51sO9zPJaBQnNBRUWNLh1vQUbkmspIANTzj2sN62cTSoxRhSdnjZQ9E_jraKYEW5oizE9Dtow4EvQ\",\n      \"use\": \"sig\",\n      \"alg\": \"RS256\",\n      \"e\": \"AQAB\",\n      \"kid\": \"6a8ba5652a7044121d4fedac8f14d14c54e4895b\"\n    }\n  ]\n}\n`\n\tset, err := jwk.Parse([]byte(jwkJSON))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(set)\n\tfor it := set.Iterate(context.Background()); it.Next(context.Background()); {\n\t\tpair := it.Pair()\n\t\tkey := pair.Value.(jwk.Key)\n\t\tvar rawkey interface{} // This is the raw key, like *rsa.PrivateKey or *ecdsa.PrivateKey\n\t\tif err := key.Raw(&rawkey); err != nil {\n\t\t\tlog.Printf(\"failed to create public key: %s\", err)\n\t\t\treturn\n\t\t}\n\t\t// We know this is an RSA Key so...\n\t\trsa, ok := rawkey.(*rsa.PublicKey)\n\t\tif !ok {\n\t\t\tpanic(fmt.Sprintf(\"expected ras key, got %T\", rawkey))\n\t\t}\n\t\t// As this is a demo just dump the key to the console\n\t\tfmt.Println(rsa)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72721580/how-to-compile-all-tests-across-a-repo-without-executing-them",
    "body": "-run regexp\n            Run only those tests, examples, and fuzz tests matching the regular\n            expression. For tests, the regular expression is split by unbracketed\n            slash (/) characters into a sequence of regular expressions, and each\n            part of a tests identifier must match the corresponding element in\n            the sequence, if any. Note that possible parents of matches are\n            run too, so that -run=X/Y matches and runs and reports the result\n            of all tests matching X, even those without sub-tests matching Y,\n            because it must run them to look for those sub-tests."
  },
  {
    "url": "https://stackoverflow.com/questions/41348512/protobuf-unmarshal-unknown-message",
    "body": "func parseUnknown(b []byte) []Field {\n\tfields := make([]Field, 0)\n\tfor len(b) > 0 {\n\t\tn, t, fieldlen := protowire.ConsumeField(b)\n\t\tif fieldlen < 1 {\n\t\t\treturn nil\n\t\t}\n\t\tfield := Field{\n\t\t\tTag: Tag{Num: int32(n), Type: t },\n\t\t}\n\t\t_, _, taglen := protowire.ConsumeTag(b[:fieldlen])\n\t\tif taglen < 1 {\n\t\t\treturn nil\n\t\t}\n\t\tvar (\n\t\t\tv interface{}\n\t\t\tvlen int\n\t\t)\n\t\tswitch t {\n\t\tcase protowire.VarintType:\n\t\t\tv, vlen = protowire.ConsumeVarint(b[taglen:fieldlen])\n\t\tcase protowire.Fixed64Type:\n\t\t\tv, vlen = protowire.ConsumeFixed64(b[taglen:fieldlen])\n\t\tcase protowire.BytesType:\n\t\t\tv, vlen = protowire.ConsumeBytes(b[taglen:fieldlen])\n\t\t\tsub := parseUnknown(v.([]byte))\n\t\t\tif sub != nil {\n\t\t\t\tv = sub\n\t\t\t}\n\t\tcase protowire.StartGroupType:\n\t\t\tv, vlen = protowire.ConsumeGroup(n, b[taglen:fieldlen])\n\t\t\tsub := parseUnknown(v.([]byte))\n\t\t\tif sub != nil {\n\t\t\t\tv = sub\n\t\t\t}\n\t\tcase protowire.Fixed32Type:\n\t\t\tv, vlen = protowire.ConsumeFixed32(b[taglen:fieldlen])\n\t\t}\n\t\tif vlen < 1 {\n\t\t\treturn nil\n\t\t}\n\t\tfield.Val = Val{Payload: v, Length: vlen - taglen}\n        // fmt.Printf(\"%#v\\n\", field)\n\t\tfields = append(fields, field)\n\t\tb = b[fieldlen:]\n\t}\n\treturn fields\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76848733/is-there-a-way-for-sqlc-to-generate-code-that-can-use-pgxpool",
    "body": "func (app *App) addBookAndUpdateAuthorEarningsHandler(w http.ResponseWriter, r *http.Request) {\n\tctx := r.Context()\n\ttx, err := app.Pool.Begin(ctx)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to begin transaction\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer tx.Rollback(ctx)\n\tbook, err = app.Queries.CreateBook(ctx, tx, newBook)\n    // handle error\n\terr = app.Queries.UpdateAuthorEarnings(ctx, tx, updateEarningsParams)\n\t// handle error\n\terr = tx.Commit(ctx)\n    // handle error\n\tw.Write([]byte(\"Book added and author earnings updated successfully\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76848733/is-there-a-way-for-sqlc-to-generate-code-that-can-use-pgxpool",
    "body": "package db\nfunc (q *Queries) AddBookAndUpdateAuthorEarningsTX(ctx context.Context, author Author, book Book) error {\n\t// Start a transaction\n    // The underlying type of db (DBTX) is *pgxpool.Pool\n\ttx, err := q.db.(*pgxpool.Pool).Begin(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer tx.Rollback(ctx)\n\ttq := q.WithTx(tx)\n\t// ... (rest of the transaction remains the same)\n    // (it's important to use `tq` not `q` to execute transaction queries\n\terr = tx.Commit(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66360051/using-a-logger-that-is-initialized-in-main-in-other-parts-of-codebase",
    "body": "package logger\nimport \"go.uber.org/zap\"\ntype Logger struct {\n\tzap *zap.Logger\n}\nfunc Must(logger *Logger, err error) *Logger {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn logger\n}\nfunc NewLogger(logFile string) (*Logger, error) {\n\tzap.NewProductionConfig()\n\tconfig := zap.NewProductionConfig()\n\tconfig.OutputPaths = []string{\"stdout\", \"./logs/\" + logFile}\n\tlogger, err := config.Build(zap.AddCaller())\n    if err != nil {\n\t\treturn nil, err\n\t}\n    return &Logger{zap: logger}, err\n}\nfunc (l Logger) Debug(msg string, fields ...zap.Field) {\n\tl.writer().Debug(msg, fields...)\n}\nfunc (l Logger) Info(msg string, fields ...zap.Field) {\n\tl.writer().Info(msg, fields...)\n}\n// define all the methdos\nvar noOpLogger = zap.NewNop()\nfunc (l Logger) writer() *zap.Logger {\n\tif l.zap == nil {\n\t\treturn noOpLogger\n\t}\n\treturn l.zap\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62740163/go-gin-request-cancellation",
    "body": "func main() {\n    r := gin.Default()\n    r.GET(\"/ping\", func(c *gin.Context) {\n        signal := make(chan struct{}, 1)\n        go longRunningOperation(signal)\n        select {\n            case <-signal:\n                close(signal) // remember to clean up after yourself\n                // move on, will print \"Processing\"\n\n            case <-c.Request.Context().Done():\n                // abort\n                return\n        }\n        log.Print(\"Processing\")\n        c.JSON(200, gin.H{\n            \"message\": \"pong\",\n        })\n    })\n    r.Run()\n}\nfunc longRunningOperation(signal chan<- struct{}) {\n    time.Sleep(10 * time.Second)\n    signal <- struct{}{} // signal that this operation has finished\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74150409/grpc-context-cancellation-propogation",
    "body": "2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote SETTINGS len=0\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: read SETTINGS len=6, settings: MAX_FRAME_SIZE=16384\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote SETTINGS flags=ACK len=0\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: read SETTINGS flags=ACK len=0\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote HEADERS flags=END_HEADERS stream=1 len=98\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote DATA flags=END_STREAM stream=1 len=12 data=\"\\x00\\x00\\x00\\x00\\a\\n\\x05world\"\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: read WINDOW_UPDATE len=4 (conn) incr=12\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: read PING len=8 ping=\"\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a\"\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote PING flags=ACK len=8 ping=\"\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a\"\nforce call cancel in client\n2022/10/21 20:40:38 could not greet: rpc error: code = Canceled desc = context canceled\n2022/10/21 20:40:38 http2: Framer 0xc0005be000: wrote RST_STREAM stream=1 len=4 ErrCode=CANCEL\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: wrote HEADERS flags=END_HEADERS stream=3 len=7\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: wrote DATA flags=END_STREAM stream=3 len=12 data=\"\\x00\\x00\\x00\\x00\\a\\n\\x05world\"\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: read WINDOW_UPDATE len=4 (conn) incr=12\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: read PING len=8 ping=\"\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a\"\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: wrote PING flags=ACK len=8 ping=\"\\x02\\x04\\x10\\x10\\t\\x0e\\a\\a\"\nforce call cancel in client\n2022/10/21 20:40:41 could not greet: rpc error: code = Canceled desc = context canceled\n2022/10/21 20:40:41 http2: Framer 0xc0005be000: wrote RST_STREAM stream=3 len=4 ErrCode=CANCEL\n2022/10/21 20:40:44 http2: Framer 0xc0005be000: wrote HEADERS flags=END_HEADERS stream=5 len=7\n2022/10/21 20:40:44 http2: Framer 0xc0005be000: wrote DATA flags=END_STREAM stream=5 len=12 data=\"\\x00\\x00\\x00\\x00\\a\\n\\x05world\"\n2022/10/21 20:40:44 http2: Framer 0xc0005be000: read WINDOW_UPDATE len=4 (conn) incr=12"
  },
  {
    "url": "https://stackoverflow.com/questions/70720911/embedding-vs-inheritance-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype Seater interface {\n\tSeats() int\n}\ntype Vehicle struct {\n\tseats int\n}\nfunc (v *Vehicle) Seats() int {\n\treturn v.seats\n}\ntype Car struct {\n\tVehicle\n\tColor string\n}\ntype Bike struct {\n\tVehicle\n\tFlag bool\n}\n// A bike always has 1 seat\nfunc (b *Bike) Seats() int {\n\treturn 1\n}\ntype Motorcycle struct {\n\tVehicle\n\tSidecar bool\n}\n// A motorcycle has the base amounts of seats, +1 if it has a side car\nfunc (m *Motorcycle) Seats() int {\n\treturn m.Vehicle.seats + 1\n}\nfunc getSeats(v Seater) int {\n\treturn v.Seats()\n}\nfunc main() {\n\tfmt.Println(getSeats(&Bike{\n\t\tVehicle: Vehicle{\n\t\t\tseats: 2, // Set to 2 in the Vehicle\n\t\t},\n\t\tFlag: true,\n\t}))\n\tfmt.Println(getSeats(&Motorcycle{\n\t\tVehicle: Vehicle{\n\t\t\tseats: 1,\n\t\t},\n\t\tSidecar: true,\n\t}))\n\tfmt.Println(getSeats(&Car{\n\t\tVehicle: Vehicle{\n\t\t\tseats: 4,\n\t\t},\n\t\tColor: \"blue\",\n\t}))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69930216/golang-struct-to-json-schema",
    "body": "type TestUser struct {\n  ID            int                    `json:\"id\"`\n  Name          string                 `json:\"name\" jsonschema:\"title=the name,description=The name of a friend,example=joe,example=lucy,default=alex\"`\n  Friends       []int                  `json:\"friends,omitempty\" jsonschema_description:\"The list of IDs, omitted when empty\"`\n  Tags          map[string]interface{} `json:\"tags,omitempty\" jsonschema_extras:\"a=b,foo=bar,foo=bar1\"`\n  BirthDate     time.Time              `json:\"birth_date,omitempty\" jsonschema:\"oneof_required=date\"`\n  YearOfBirth   string                 `json:\"year_of_birth,omitempty\" jsonschema:\"oneof_required=year\"`\n  Metadata      interface{}            `json:\"metadata,omitempty\" jsonschema:\"oneof_type=string;array\"`\n  FavColor      string                 `json:\"fav_color,omitempty\" jsonschema:\"enum=red,enum=green,enum=blue\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68308139/how-to-serialize-lastevaluatedkey-from-dynamodbs-golang-sdk",
    "body": "type GetDomainObjectsResponse struct {\n  Items     []MyDomainObject `json:\"items\"`\n  NextToken string           `json:\"next_token\"`\n}\n\nfunc GetDomainObjects(w http.ResponseWriter, req *http.Request) {\n  // ... parse query params, set up dynamoIn ...\n  eskMap := map[string]string{}\n  json.Unmarshal(params.NextToken, &eskMap)\n  esk, _ = dynamodbattribute.MarshalMap(eskMap)\n  dynamoIn.ExclusiveStartKey = esk\n  dynamoOut, _ := db.Query(dynamoIn)\n  response := GetDomainObjectsResponse{}\n  dynamodbattribute.UnmarshalListOfMaps(dynamoOut.Items, &response.Items)\n  lek := map[string]string{}\n  dynamodbattribute.UnmarshalMap(dynamoOut.LastEvaluatedKey, &lek)\n  response.NextToken := json.Marshal(lek)\n\n  // ... marshal and write the response ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61657763/how-to-use-go-mod-with-local-package-and-docker",
    "body": "# Use the offical golang image to create a binary.\n# This is based on Debian and sets the GOPATH to /go.\n# https://hub.docker.com/_/golang\nFROM golang:1.16.3-buster AS builder\n# Copy core library\nRUN mkdir /core\nCOPY core/ /core\n# Create and change to the app directory.\nWORKDIR /app\n# Retrieve application dependencies.\n# This allows the container build to reuse cached dependencies.\n# Expecting to copy go.mod and if present go.sum.\nCOPY go.* ./\nRUN go mod download\n# Copy local code to the container image.\nCOPY . ./\n# Build the binary\nRUN go build -o /app/sample cmd/main.go\n...\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/54275704/how-to-read-cookies",
    "body": "package main\nimport (\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\n// Contains everything about an appointment\ntype Appointment struct {\n\tDate    string `json:\"appointmentDate\"`    // Contains date as string\n\tStartMn string `json:\"appointmentStartMn\"` // Our startMn ?\n\tID      int    `json:\"appointmentId\"`      // AppointmentId\n\tUserID  int    `json:\"appointmentUserId\"`  // UserId\n}\nfunc main() {\n\thandler := http.NewServeMux()\n\t// Main request\n\thandler.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Printf(\"Requested /\\r\\n\")\n\t\t// set typical headers\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tw.WriteHeader(http.StatusOK)\n\t\t// Read file\n\t\tb, _ := ioutil.ReadFile(\"index.html\")\n\t\tio.WriteString(w, string(b))\n\t})\n\t// booking request\n\thandler.HandleFunc(\"/booking/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Printf(\"Requested /booking/\\r\\n\")\n\t\t// set typical headers\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\tw.WriteHeader(http.StatusOK)\n\t\t// Read cookie\n\t\tcookie, err := r.Cookie(\"appointment\")\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Cant find cookie :/\\r\\n\")\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"%s=%s\\r\\n\", cookie.Name, cookie.Value)\n\t\t// Cookie data\n\t\tdata, err := base64.StdEncoding.DecodeString(cookie.Value)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error:\", err)\n\t\t}\n\t\tvar appointment Appointment\n\t\ter := json.Unmarshal(data, &appointment)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error: \", er)\n\t\t}\n\t\tfmt.Printf(\"%s, %s, %d, %d\\r\\n\", appointment.Date, appointment.StartMn, appointment.ID, appointment.UserID)\n\t\t// Read file\n\t\tb, _ := ioutil.ReadFile(\"booking.html\")\n\t\tio.WriteString(w, string(b))\n\t})\n\t// Serve :)\n\thttp.ListenAndServe(\":8080\", handler)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54275704/how-to-read-cookies",
    "body": "<html>\n    <head>\n        <title>Your page</title>\n    </head>\n<body>\n    Setting cookie via Javascript\n    <script type=\"text/javascript\">\n    window.onload = () => {\n        function setCookie(name, value, days) {\n            var expires = \"\";\n            if (days) {\n                var date = new Date();\n                date.setTime(date.getTime() + (days*24*60*60*1000));\n                expires = \"; expires=\" + date.toUTCString();\n            }\n            document.cookie = name + \"=\" + btoa((value || \"\"))  + expires + \"; path=/\";\n        }\n        setCookie(\"appointment\", JSON.stringify({\n                    appointmentDate: \"20-01-2019 13:06\",\n                    appointmentStartMn: \"1-2\",\n                    appointmentId: 2,\n                    appointmentUserId: 3\n            })\n        );\n        document.location = \"/booking/\";\n    }\n    </script>\n</body>"
  },
  {
    "url": "https://stackoverflow.com/questions/34638717/golang-marshal-unmarshal-json-with-a-custom-tag",
    "body": "`go\n    package main\n\n    import (\n        \"encoding/json\"\n        \"fmt\"\n    )\n    type Car struct {\n        Maker string `json:\"maker\" es:\"fabricante\"`\n        Model string `json:\"model\" es:\"modelo\"`\n        Year  int    `json:\"year\"  es:\"año\"`\n    }\n    var car = Car{\n        Maker:\"Chevrolet\",\n        Model:\"Corvette\",\n        Year:2021,\n    }\n\n    func main() {\n        _json,_ := json.Marshal(car)\n        var intf interface{}\n        _ = json.Unmarshal(_json, &intf)\n        m := intf.(map[string]interface{})\n        fmt.Printf(\"%v\",m)\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/34638717/golang-marshal-unmarshal-json-with-a-custom-tag",
    "body": "`go\n    func (f Foo) MarshalJSON() ([]byte, error) {\n        es := esFoo(f)\n        _json,err := json.Marshal(es)\n        {\n            if err != nil {\n                goto end\n            }\n            var intf interface{}\n            err = json.Unmarshal(_json, &intf)\n            if err != nil {\n                goto end\n            }\n            m := intf.(map[string]interface{})\n            _m := make(map[string]interface{},len(m))\n            t := reflect.TypeOf(f)\n            i := 0\n            for _,v := range m {\n                tag, found := t.Field(i).Tag.Lookup(\"es\")\n                if !found {\n                    continue\n                }\n                _m[tag] = v\n                i++\n            }\n            _json,err = json.Marshal(_m)\n        }\n    end:\n        return _json,err\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/34638717/golang-marshal-unmarshal-json-with-a-custom-tag",
    "body": "    package main\n\n    import (\n        \"encoding/json\"\n        \"log\"\n        \"reflect\"\n    )\n\n    type Foo struct {\n        Foo string `json:\"test\" es:\"bar\"`\n        Bar string `json:\"live\" es:\"baz\"`\n    }\n    type esFoo Foo\n    var useESTags = false\n    func (f Foo) MarshalWithESTag() ([]byte, error) {\n        useESTags = true\n        data, err := json.Marshal(f)\n        useESTags = false\n        return data,err\n    }\n    func (f Foo) MarshalJSON() ([]byte, error) {\n        es := esFoo(f)\n        _json,err := json.Marshal(es)\n        if useESTags {\n            if err != nil {\n                goto end\n            }\n            var intf interface{}\n            err = json.Unmarshal(_json, &intf)\n            if err != nil {\n                goto end\n            }\n            m := intf.(map[string]interface{})\n            _m := make(map[string]interface{},len(m))\n            t := reflect.TypeOf(f)\n            i := 0\n            for _,v := range m {\n                tag, found := t.Field(i).Tag.Lookup(\"es\")\n                if !found {\n                    continue\n                }\n                _m[tag] = v\n                i++\n            }\n            _json,err = json.Marshal(_m)\n        }\n    end:\n        return _json,err\n    }\n\n    func main()  {\n        f := &Foo{\"Hello\",\"World\"}\n        data, _ := json.Marshal(f)\n        log.Println(string(data)) // -> {\"test\":\"Hello\",\"live\":\"World\"}\n        data, _ = f.MarshalWithESTag()\n        log.Println(string(data)) // -> {\"bar\":\"Hello\",\"baz\":\"World\"}\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/74250570/dockerfile-issue-why-is-the-binary-dlv-not-being-found-no-such-file-or-direc",
    "body": "FROM golang:bullseye AS builder\n# Build Delve for debugging\nRUN go install github.com/go-delve/delve/cmd/dlv@latest\n# Create and change to the app directory.\nWORKDIR /app\nENV CGO_ENABLED=0\n# Retrieve application dependencies.\nCOPY go.* ./\nRUN go mod download\n# Copy local code to the container image.\nCOPY . ./\n# Build the binary.\nRUN go build -o fooapp .\n# Download certificates\nRUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    ca-certificates\n# Use the official Debian slim image for a lean production container.\nFROM busybox:glibc\nEXPOSE 8000 40000\n# Copy the binary to the production image from the builder stage.\nCOPY --from=builder /app/fooapp /app/fooapp\n# COPY --from=builder /app/ /app\nCOPY --from=builder /go/bin/dlv /dlv\nCOPY --from=builder /etc/ssl /etc/ssl\n# Run dlv as pass fooapp as parameter\nCMD [\"/dlv\", \"--listen=:40000\", \"--headless=true\", \"--api-version=2\", \"--accept-multiclient\", \"exec\", \"/app/fooapp\"]\n# ENTRYPOINT [\"/bin/sh\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/74250570/dockerfile-issue-why-is-the-binary-dlv-not-being-found-no-such-file-or-direc",
    "body": "FROM golang:bullseye AS builder\n# Build Delve for debugging\nRUN go install github.com/go-delve/delve/cmd/dlv@latest\n# Create and change to the app directory.\nWORKDIR /app\nENV CGO_ENABLED=0\n# Copy local code to the container image.\nCOPY . ./\n# Retrieve application dependencies.\nRUN go mod tidy\n# Build the binary.\nRUN go build -o fooapp .\n# Use alpine lean production container.\n# FROM busybox:glibc\nFROM alpine:latest\n# gcompat is the package to glibc-based apps\n# ca-certificates contains trusted TLS CA certs\n# bash is just for the comfort, I hate /bin/sh\nRUN apk add gcompat ca-certificates bash\nEXPOSE 8000 40000\n# Copy the binary to the production image from the builder stage.\nCOPY --from=builder /app/fooapp /app/fooapp\n# COPY --from=builder /app/ /app\nCOPY --from=builder /go/bin/dlv /dlv\n# Run dlv as pass fooapp as parameter\nCMD [\"/dlv\", \"--listen=:40000\", \"--headless=true\", \"--api-version=2\", \"--accept-multiclient\", \"exec\", \"/app/fooapp\"]\n# ENTRYPOINT [\"/bin/bash\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/65242456/convert-protobuf-serialized-messages-to-json-without-precompiling-go-code",
    "body": "func readDynamically(in []byte) {\n    registry, err := createProtoRegistry(\".\", \"addressbook.proto\")\n    if err != nil {\n        panic(err)\n    }\n    desc, err := registry.FindFileByPath(\"addressbook.proto\")\n    if err != nil {\n        panic(err)\n    }\n    fd := desc.Messages()\n    addressBook := fd.ByName(\"AddressBook\")\n    msg := dynamicpb.NewMessage(addressBook)\n    err = proto.Unmarshal(in, msg)\n    jsonBytes, err := protojson.Marshal(msg)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(string(jsonBytes))\n    if err != nil {\n        panic(err)\n    }\n}\nfunc createProtoRegistry(srcDir string, filename string) (*protoregistry.Files, error) {\n    // Create descriptors using the protoc binary.\n    // Imported dependencies are included so that the descriptors are self-contained.\n    tmpFile := filename + \"-tmp.pb\"\n    cmd := exec.Command(\"./protoc/protoc\",\n        \"--include_imports\",\n        \"--descriptor_set_out=\" + tmpFile,\n        \"-I\"+srcDir,\n        path.Join(srcDir, filename))\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stderr\n    err := cmd.Run()\n    if err != nil {\n        return nil, err\n    }\n    defer os.Remove(tmpFile)\n    marshalledDescriptorSet, err := ioutil.ReadFile(tmpFile)\n    if err != nil {\n        return nil, err\n    }\n    descriptorSet := descriptorpb.FileDescriptorSet{}\n    err = proto.Unmarshal(marshalledDescriptorSet, &descriptorSet)\n    if err != nil {\n        return nil, err\n    }\n    files, err := protodesc.NewFiles(&descriptorSet)\n    if err != nil {\n        return nil, err\n    }\n    return files, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72814502/nats-jetstream-exactly-once-delivery",
    "body": "package main\nimport (\n\t\"log\"\n\t\"time\"\n\t\"github.com/nats-io/nats.go\"\n)\nfunc failOnErr(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc main() {\n\t// Connect and get the JetStream context.\n\tnc, _ := nats.Connect(nats.DefaultURL)\n\tjs, _ := nc.JetStream()\n\t// Create a test stream.\n\t_, err := js.AddStream(&nats.StreamConfig{\n\t\tName:       \"test\",\n\t\tStorage:    nats.MemoryStorage,\n\t\tSubjects:   []string{\"test.>\"},\n\t\tDuplicates: time.Minute,\n\t})\n\tfailOnErr(err)\n\tdefer js.DeleteStream(\"test\")\n\t// Publish some messages with duplicates.\n\tjs.Publish(\"test.1\", []byte(\"hello\"), nats.MsgId(\"1\"))\n\tjs.Publish(\"test.2\", []byte(\"world\"), nats.MsgId(\"2\"))\n\tjs.Publish(\"test.1\", []byte(\"hello\"), nats.MsgId(\"1\"))\n\tjs.Publish(\"test.1\", []byte(\"hello\"), nats.MsgId(\"1\"))\n\tjs.Publish(\"test.2\", []byte(\"world\"), nats.MsgId(\"2\"))\n\tjs.Publish(\"test.2\", []byte(\"world\"), nats.MsgId(\"2\"))\n\t// Create an explicit pull consumer on the stream.\n\t_, err = js.AddConsumer(\"test\", &nats.ConsumerConfig{\n\t\tDurable:       \"test\",\n\t\tAckPolicy:     nats.AckExplicitPolicy,\n\t\tDeliverPolicy: nats.DeliverAllPolicy,\n\t})\n\tfailOnErr(err)\n\tdefer js.DeleteConsumer(\"test\", \"test\")\n\t// Create a subscription on the pull consumer.\n\t// Subject can be empty since it defaults to all subjects bound to the stream.\n\tsub, err := js.PullSubscribe(\"\", \"test\", nats.BindStream(\"test\"))\n\tfailOnErr(err)\n\t// Only two should be delivered.\n\tbatch, _ := sub.Fetch(10)\n\tlog.Printf(\"%d messages\", len(batch))\n\t// AckSync both to ensure the server received the ack.\n\tbatch[0].AckSync()\n\tbatch[1].AckSync()\n\t// Should be zero.\n\tbatch, _ = sub.Fetch(10, nats.MaxWait(time.Second))\n\tlog.Printf(\"%d messages\", len(batch))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60109288/regex-named-groups-in-golang",
    "body": "package main\nimport (\n    \"fmt\"\n    \"regexp\"\n)\nfunc main() {\n    var re = regexp.MustCompile(`(?P<ip>\\S+).+?\\[(?P<localtime>.*?)\\].+?GET\\s/\\?(?P<request>.+?)\".+?\"(?P<ref>.+?)\"\\s*\"(?P<agent>.+?)\"`)\n    var str = `57.157.87.86 - - [06/Feb/2020:00:11:04 +0100] \"GET /?parammore=1&customer_id=1&version=1.56&param=meaningful&customer_name=somewebsite.de&some_id=4&cachebuster=1580944263903 HTTP/1.1\" 204 0 \"https://www.somewebsite.com/more/andheresomemore/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0\"`\n    result := make(map[string]string)\n    match := re.FindStringSubmatch(str)\n    for i, name := range re.SubexpNames() {\n        if i != 0 && name != \"\" {\n            result[name] = match[i]\n        }\n    }\n    fmt.Printf(\"IP: %s\\nLocal Time: %s\\nRequest: %s\\nRef: %s\\nAgent: %s\\n\",result[\"ip\"], result[\"localtime\"], result[\"request\"], result[\"ref\"], result[\"agent\"])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60109288/regex-named-groups-in-golang",
    "body": "package main\nimport (\n    \"fmt\"\n    \"regexp\"\n)\nfunc main() {\n    var re = regexp.MustCompile(`(?P<ip>\\S+).+?\\[(?P<localtime>.*?)\\].+?GET\\s/\\?(?P<request>.+?)\".+?\"(?P<ref>.+?)\"\\s*\"(?P<agent>.+?)\"`)\n    var str = `57.157.87.86 - - [06/Feb/2020:00:11:04 +0100] \"GET /?parammore=1&customer_id=1&version=1.56&param=meaningful&customer_name=somewebsite.de&some_id=4&cachebuster=1580944263903 HTTP/1.1\" 204 0 \"https://www.somewebsite.com/more/andheresomemore/\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0\"`\n    result := make([]map[string]string,0)\n    for _, match := range re.FindAllStringSubmatch(str, -1) {\n        res := make(map[string]string)\n        for i, name := range re.SubexpNames() {\n            if i != 0 && name != \"\" {\n                res[name] = match[i]\n            }\n        }\n        result = append(result, res)\n    }\n    // Displaying the matches\n    for i, match := range(result) {\n        fmt.Printf(\"--------------\\nMatch %d:\\n\", i+1)\n        for i, name := range re.SubexpNames() {\n            if i != 0 && name != \"\" {\n                fmt.Printf(\"Group %s: %s\\n\", name, match[name])\n            }\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71865309/in-go-why-does-exec-command-fail-but-os-startprocess-succeed-launching-win",
    "body": "wingetPath := filepath.Join(os.Getenv(\"LOCALAPPDATA\"),\n    \"Microsoft\\\\WindowsApps\\\\winget.exe\")\nprocAttr := new(os.ProcAttr)\nprocAttr.Files = []*os.File{nil, nil, nil}\n/*\nTo redirect IO, pass in stdin, stdout, stderr as required\nprocAttr.Files = []*os.File{os.Stdin, os.Stdout, os.Stderr}\n*/\nargs = []string { \"install\", \"git.git\" }\n// The argv slice will become os.Args in the new process,\n// so it normally starts with the program name\nproc, err := os.StartProcess(wingetPath,\n   append([]string{wingetPath}, arg...), procAttr)\nfmt.Println(err) // nil"
  },
  {
    "url": "https://stackoverflow.com/questions/63443470/use-client-go-to-simulate-kubectl-wait-for-a-pod-to-be-ready",
    "body": "...\n\t\t// List with a name field selector to get the current resourceVersion to watch from (not the object's resourceVersion)\n\t\tgottenObjList, err := o.DynamicClient.Resource(info.Mapping.Resource).Namespace(info.Namespace).List(context.TODO(), metav1.ListOptions{FieldSelector: nameSelector})\n\t\tif apierrors.IsNotFound(err) {\n\t\t\treturn info.Object, true, nil\n\t\t}\n\t\tif err != nil {\n\t\t\t// TODO this could do something slightly fancier if we wish\n\t\t\treturn info.Object, false, err\n\t\t}\n\t\tif len(gottenObjList.Items) != 1 {\n\t\t\treturn info.Object, true, nil\n\t\t}\n\t\tgottenObj := &gottenObjList.Items[0]\n\t\tresourceLocation := ResourceLocation{\n\t\t\tGroupResource: info.Mapping.Resource.GroupResource(),\n\t\t\tNamespace:     gottenObj.GetNamespace(),\n\t\t\tName:          gottenObj.GetName(),\n\t\t}\n\t\tif uid, ok := o.UIDMap[resourceLocation]; ok {\n\t\t\tif gottenObj.GetUID() != uid {\n\t\t\t\treturn gottenObj, true, nil\n\t\t\t}\n\t\t}\n\t\twatchOptions := metav1.ListOptions{}\n\t\twatchOptions.FieldSelector = nameSelector\n\t\twatchOptions.ResourceVersion = gottenObjList.GetResourceVersion()\n\t\tobjWatch, err := o.DynamicClient.Resource(info.Mapping.Resource).Namespace(info.Namespace).Watch(context.TODO(), watchOptions)\n\t\tif err != nil {\n\t\t\treturn gottenObj, false, err\n\t\t}\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/59465996/go-net-http-leaks-memory-in-high-load",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t_ \"expvar\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net\"\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\t\"os\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/gorilla/mux\"\n)\nvar (\n\t//http client\n\tClient *http.Client\n\t//http Transport\n\tTransport *http.Transport\n)\nfunc init() {\n\tgo http.ListenAndServe(\"localhost:6060\", nil)\n\t//Get Any command line argument passed\n\targs := os.Args[1:]\n\tnumCPU := runtime.NumCPU()\n\tif len(args) > 1 {\n\t\tnumCPU, _ = strconv.Atoi(args[0])\n\t}\n\tTransport = &http.Transport{\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t\tDialContext: (&net.Dialer{\n\t\t\t//Timeout: time.Duration() * time.Millisecond,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext,\n\t\t//ForceAttemptHTTP2:     true,\n\t\tDisableKeepAlives: false,\n\t\t//MaxIdleConns:      0,\n\t\t//IdleConnTimeout:   0,\n\t\t//TLSHandshakeTimeout: time.Duration(300) * time.Millisecond,\n\t\t//ExpectContinueTimeout: 1 * time.Second,\n\t}\n\tClient = &http.Client{\n\t\t// Timeout:   time.Duration(300) * time.Millisecond,\n\t\tTransport: Transport,\n\t}\n\truntime.GOMAXPROCS(numCPU)\n\trand.Seed(time.Now().UTC().UnixNano())\n}\nfunc main() {\n\trouter := mux.NewRouter().StrictSlash(true)\n\trouter.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t_, _ = fmt.Fprintf(w, \"Hello!!!\")\n\t})\n\trouter.HandleFunc(\"/{name}\", func(w http.ResponseWriter, r *http.Request) {\n\t\tvars := mux.Vars(r)\n\t\tprepareRequest(w, r, vars[\"name\"])\n\t}).Methods(\"POST\", \"GET\")\n\t// Register pprof handlers\n\t// router.HandleFunc(\"/debug/pprof/\", pprof.Index)\n\t// router.HandleFunc(\"/debug/pprof/cmdline\", pprof.Cmdline)\n\t// router.HandleFunc(\"/debug/pprof/profile\", pprof.Profile)\n\t// router.HandleFunc(\"/debug/pprof/symbol\", pprof.Symbol)\n\t// router.HandleFunc(\"/debug/pprof/trace\", pprof.Trace)\n\trouterMiddleWare := http.TimeoutHandler(router, 500*time.Millisecond, \"Timeout\")\n\tsrv := &http.Server{\n\t\tAddr: \"localhost:8080\",\n\t\t/*ReadTimeout:  500 * time.Millisecond,\n\t\t  WriteTimeout: 500 * time.Millisecond,\n\t\t  IdleTimeout:  10 * time.Second,*/\n\t\tHandler: routerMiddleWare,\n\t}\n\tlog.Fatal(srv.ListenAndServe())\n}\nfunc prepareRequest(w http.ResponseWriter, r *http.Request, name string) {\n\t// go func() {\n\t// \tmake(chan []byte) <- make([]byte, 10024)\n\t// }()\n\t//other part of the code and call to goroutine\n\tvar urls []string\n\turls = append(urls,\n\t\t\"http://localhost:7000/\",\n\t\t\"http://localhost:7000/\",\n\t)\n\tresults, s, c := callUrls(urls)\n\tfinalCall(w, results, s, c)\n}\ntype Response struct {\n\tStatus int\n\tUrl    string\n\tBody   string\n}\nfunc callUrls(urls []string) ([]*Response, []string, []string) {\n\tvar wg sync.WaitGroup\n\twg.Add(len(urls))\n\tch := make(chan func() (*Response, string, string), len(urls))\n\tfor _, url := range urls {\n\t\tgo func(url string) {\n\t\t\t//decide if request is valid for client to make http call using country/os\n\t\t\tisValid := true //assuming url to be called\n\t\t\tif isValid {\n\t\t\t\t//make post call\n\t\t\t\t//request body have many more paramter, just sample included.\n\t\t\t\t//instead of creating new request, time.Sleep for 300ms doesn't cause any memory leak.\n\t\t\t\treq, err := http.NewRequest(\"POST\", url, bytes.NewBuffer([]byte(`{\"body\":\"param\"}`)))\n\t\t\t\tif err != nil {\n\t\t\t\t\twg.Done()\n\t\t\t\t\tch <- func() (*Response, string, string) {\n\t\t\t\t\t\treturn &Response{Status: 500, Url: url, Body: \"\"}, err.Error(), \"500\"\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n\t\t\t\treq.Header.Set(\"Connection\", \"Keep-Alive\")\n\t\t\t\t//req.Close = true\n\t\t\t\tresponse, err := Client.Do(req)\n\t\t\t\tif err != nil {\n\t\t\t\t\twg.Done()\n\t\t\t\t\tch <- func() (*Response, string, string) {\n\t\t\t\t\t\treturn &Response{Status: 500, Url: url, Body: \"\"}, err.Error(), \"500\"\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tdefer response.Body.Close()\n\t\t\t\tbody, _ := ioutil.ReadAll(response.Body)\n\t\t\t\tio.Copy(ioutil.Discard, response.Body)\n\t\t\t\t//Close the body, forced this\n\t\t\t\t//Also tried without defer, and only wothout following line\n\t\t\t\tresponse.Body.Close()\n\t\t\t\t//do something with response body replace a few string etc.\n\t\t\t\t//and return\n\t\t\t\twg.Done()\n\t\t\t\tch <- func() (*Response, string, string) {\n\t\t\t\t\treturn &Response{Status: 200, Url: url, Body: string(body)}, \"success\", \"200\"\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twg.Done()\n\t\t\t\tch <- func() (*Response, string, string) {\n\t\t\t\t\treturn &Response{Status: 500, Url: url, Body: \"\"}, \"invalid\", \"500\"\n\t\t\t\t}\n\t\t\t}\n\t\t}(url)\n\t}\n\twg.Wait()\n\tvar (\n\t\tresults []*Response\n\t\tmsg     []string\n\t\tstatus  []string\n\t)\n\tfor {\n\t\tr, x, y := (<-ch)()\n\t\tif r != nil {\n\t\t\tresults = append(results, r)\n\t\t\tmsg = append(msg, x)\n\t\t\tstatus = append(status, y)\n\t\t}\n\t\tif len(results) == len(urls) {\n\t\t\treturn results, msg, status\n\t\t}\n\t}\n}\nfunc finalCall(w http.ResponseWriter, results []*Response, msg []string, status []string) {\n\tfmt.Println(\"response\", \"response body\", results, msg, status)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59465996/go-net-http-leaks-memory-in-high-load",
    "body": "goroutine profile: total 50012\n50000 @ 0x43098f 0x4077fa 0x4077d0 0x4074bb 0x76b85d 0x45d281\n#\t0x76b85c\tmain.prepareRequest.func1+0x4c\t/home/mh-cbon/gow/src/test/oom/main.go:101\n4 @ 0x43098f 0x42c09a 0x42b686 0x4c3a3b 0x4c484b 0x4c482c 0x57d94f 0x590d79 0x6b4c67 0x5397cf 0x53a51d 0x53a754 0x6419ef 0x6af18d 0x6af17f 0x6b5f33 0x6ba4fd 0x45d281\n#\t0x42b685\tinternal/poll.runtime_pollWait+0x55\t\t/home/mh-cbon/.gvm/gos/go1.12.7/src/runtime/netpoll.go:182\n#\t0x4c3a3a\tinternal/poll.(*pollDesc).wait+0x9a\t\t/home/mh-cbon/.gvm/gos/go1.12.7/src/internal/poll/fd_poll_runtime.go:87\n// more..."
  },
  {
    "url": "https://stackoverflow.com/questions/56772452/mocking-mongodb-response-in-go",
    "body": "func TestTransform(t *testing.T) {\n\tmt := mtest.New(t, mtest.NewOptions().ClientType(mtest.Mock))\n\tdefer mt.Close()\n\tmt.Run(\"find & transform\", func(mt *mtest.T) {\n\t\tmyollection = mt.Coll\n\t\texpected := myStructure{...}\n\t\tmt.AddMockResponses(mtest.CreateCursorResponse(1, \"foo.bar\", mtest.FirstBatch, bson.D{\n\t\t\t{\"_id\", expected.ID},\n\t\t\t{\"field-1\", expected.Field1},\n\t\t\t{\"field-2\", expected.Field2},\n\t\t}))\n\t\tresponse, err := myFindFunction(expected.ID)\n\t\tif err != nil {\n            t.Error(err)\n        }\n        out := transform(response)\n        if diff := deep.Equal(expected, out); diff != nil {\n            t.Error(diff)\n        }\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73860458/unmarshalling-time-time-from-json-fails-when-escaping-as-u002b-in-files",
    "body": ">\n> string = quotation-mark *char quotation-mark\n>\n> char = unescaped /\n>        escape (\n>           %x22 /          ; \"    quotation mark  U+0022\n>           %x5C /          ; \\    reverse solidus U+005C\n>           %x2F /          ; /    solidus         U+002F\n>           %x62 /          ; b    backspace       U+0008\n>           %x66 /          ; f    form feed       U+000C\n>           %x6E /          ; n    line feed       U+000A\n>           %x72 /          ; r    carriage return U+000D\n>           %x74 /          ; t    tab             U+0009\n>           %x75 4HEXDIG )  ; uXXXX                U+XXXX\n>\n> escape = %x5C              ; \\\n>\n> quotation-mark = %x22      ; \"\n>\n> unescaped = %x20-21 / %x23-5B / %x5D-10FFFF\n>\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/73860458/unmarshalling-time-time-from-json-fails-when-escaping-as-u002b-in-files",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"time\"\n)\nvar document []byte = []byte(`\n{\n  \"value\": \"2022-09-26T21:00:00\\u002b00:00\"\n}\n`)\nfunc main() {\n\tdeserializeJsonAsTime()\n\tdeserializeJsonAsString()\n}\nfunc deserializeJsonAsTime() {\n\tfmt.Println(\"\")\n\tfmt.Println(\"Deserializing JSON as time.Time ...\")\n\ttype Widget struct {\n\t\tValue time.Time `json: \"value\"`\n\t}\n\texpected := Widget{\n\t\tValue: time.Date(2022, 9, 26, 21, 0, 0, 0, time.UTC),\n\t}\n\tactual := Widget{}\n\terr := json.Unmarshal(document, &actual)\n\tswitch {\n\tcase err != nil:\n\t\tfmt.Println(\"Error deserializing JSON as time.Time\")\n\t\tfmt.Println(err)\n\tcase actual.Value != expected.Value:\n\t\tfmt.Printf(\"Unmarshalling failed: expected %v but got %v\\n\", expected.Value, actual.Value)\n\tdefault:\n\t\tfmt.Println(\"Sucess\")\n\t}\n}\nfunc deserializeJsonAsString() {\n\tfmt.Println(\"\")\n\tfmt.Println(\"Deserializing JSON as string ...\")\n\ttype Widget struct {\n\t\tValue string `json: \"value\"`\n\t}\n\texpected := Widget{\n\t\tValue: \"2022-09-26T21:00:00+00:00\",\n\t}\n\tactual := Widget{}\n\terr := json.Unmarshal(document, &actual)\n\tswitch {\n\tcase err != nil:\n\t\tfmt.Println(\"Error deserializing JSON as string\")\n\t\tfmt.Println(err)\n\tcase actual.Value != expected.Value:\n\t\tfmt.Printf(\"Unmarshalling failed: expected %v but got %v\\n\", expected.Value, actual.Value)\n\tdefault:\n\t\tfmt.Println(\"Sucess\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71746173/ho-to-debug-go-app-with-dlv-and-modd-on-docker",
    "body": "{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"setup docker debug\",\n            \"dependsOn\": [\n                \"show app console\"\n            ]\n        },\n        {\n            \"label\": \"teardown docker debug\",\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"stop all containers\"\n            ]\n        },\n        {\n            \"label\": \"show app console\",\n            \"command\": \"docker logs app --follow\",\n            \"type\": \"shell\",\n            \"isBackground\": true,\n            \"presentation\": {\n                \"reveal\": \"always\",\n                \"panel\": \"dedicated\",\n                \"clear\": true,\n                \"showReuseMessage\": true\n            },\n            \"problemMatcher\": [\n                {\n                    \"pattern\": [\n                        {\n                            \"regexp\": \".\",\n                            \"file\": 1,\n                            \"location\": 2,\n                            \"message\": 3\n                        }\n                    ],\n                    \"background\": {\n                        \"activeOnStart\": true,\n                        \"beginsPattern\": \".\",\n                        \"endsPattern\": \".\",\n                    }\n                }\n            ],\n            \"dependsOn\":[\n                \"start all containers\",\n                \"modd\"\n            ]\n        },\n        {\n            \"label\": \"start all containers\",\n            \"type\": \"shell\",\n            \"command\": \"docker-compose up --build --force-recreate --detach\",\n            \"presentation\": {\n                \"reveal\": \"always\",\n                \"panel\": \"shared\",\n                \"clear\": true,\n                \"showReuseMessage\": true\n            },\n            \"dependsOn\":[\n                \"stop all containers\"\n            ]\n        },\n        {\n            \"label\": \"stop all containers\",\n            \"type\": \"shell\",\n            \"command\": \"docker-compose down\",\n            \"presentation\": {\n                \"panel\": \"shared\",\n                \"clear\": true\n            },\n        },\n        {\n            \"label\": \"modd\",\n            \"type\": \"shell\",\n            \"isBackground\": true,\n            \"command\": \"modd\",\n            \"presentation\": {\n                \"panel\": \"new\",\n                \"clear\": true\n            },\n            \"problemMatcher\": [\n                {\n                    \"pattern\": [\n                        {\n                            \"regexp\": \".\",\n                            \"file\": 1,\n                            \"location\": 2,\n                            \"message\": 3\n                        }\n                    ],\n                    \"background\": {\n                        \"activeOnStart\": true,\n                        \"beginsPattern\": \".\",\n                        \"endsPattern\": \".\",\n                    }\n                }\n            ],\n        }\n    ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64061117/how-do-i-mock-a-s3client-so-that-i-can-run-getobject-in-a-golang-test",
    "body": "  package test_awstools\n  import (\n          \"github.com/aws/aws-sdk-go/service/s3\"\n  )\n  type MyS3Client struct {\n    ListObjectsFunc func(*s3.ListObjectsInput) (*s3.ListObjectsOutput, error)\n    GetObjectFunc func(*s3.GetObjectInput) (*s3.GetObjectOutput, error)\n  }\n  func (m *MyS3Client) ListObjects(input *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {\n    return m.ListObjectsFunc(input)\n  }\n  func (m *MyS3Client) GetObject(input *s3.GetObjectInput) (*s3.GetObjectOutput, error) {\n    return m.GetObjectFunc(input)\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/64061117/how-do-i-mock-a-s3client-so-that-i-can-run-getobject-in-a-golang-test",
    "body": "func TestListObjects(t *testing.T) {\n  folder := \"docs\"\n  // Use my mocked version of the S3 client.\n  s3Client := &test_awstools.MyS3Client{}\n  // Set the ListObjectsFunc to behave the way you want\n  s3Client.ListObjectsFunc = func(input *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {\n    output := &s3.ListObjectsOutput{}\n    return output, nil\n  }\n  // Make the call to list objects (which is now mocked)\n  objects, err := s3Client.ListObjects(folder, s3Client)\n  // Do your assertions\n  if err != nil {\n    t.Error(err)\n  }\n  fmt.Println(objects)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79371569/unexpected-elevation-requirement-for-ntfs-ads-rename-operation-in-32-bit-go-vs-c",
    "body": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n    <security>\n      <requestedPrivileges>\n        <requestedExecutionLevel level=\"asInvoker\"/>\n      </requestedPrivileges>\n   </security>\n  </trustInfo>\n  <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n    <application>\n      <!--The ID below indicates application support for Windows Vista -->\n      <supportedOS Id=\"{e2011457-1546-43c5-a5fe-008deee3d3f0}\"/>\n      <!--The ID below indicates application support for Windows 7 -->\n      <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n      <!--The ID below indicates application support for Windows 8 -->\n      <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>\n      <!--The ID below indicates application support for Windows 8.1 -->\n      <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      <!--The ID below indicates application support for Windows 10 -->\n      <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>\n    </application>\n  </compatibility>\n</assembly>"
  },
  {
    "url": "https://stackoverflow.com/questions/63215500/go-test-succeed-for-individual-tests-but-fails-when-testing-package",
    "body": "$ go test . -count=100\npanic: Log in goroutine after TestPanicMaybe has completed: Skipping\ngoroutine 32 [running]:\ntesting.(*common).logDepth(0xc0000db860, {0xc000116020, 0x9}, 0x3)\n        C:/Program Files/Go/src/testing/testing.go:1028 +0x4c5\ntesting.(*common).log(...)\n        C:/Program Files/Go/src/testing/testing.go:1010\ntesting.(*common).Skip(0xc0000db860, {0xc0000fbfc0?, 0x0?, 0x0?})\n        C:/Program Files/Go/src/testing/testing.go:1095 +0x4a\nleetcode.TestPanicMaybe.func1()\n        C:/Users/mparn/Desktop/panic_test.go:11 +0x5c\ncreated by leetcode.TestPanicMaybe in goroutine 31\n        C:/Users/mparn/Desktop/panic_test.go:9 +0x4f\npanic: Log in goroutine after TestPanicMaybe has completed: Skipping"
  },
  {
    "url": "https://stackoverflow.com/questions/62377870/how-to-manage-mongodb-client-across-packages-in-golang",
    "body": "package dataLayer\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n    \"go.mongodb.org/mongo-driver/mongo/readpref\"\n)\nfunc InitDataLayer()(*mongo.Client) {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    client, err := mongo.Connect(ctx, options.Client().ApplyURI(credentials.MONGO_DB_ATLAS_URI))\n    if err != nil {\n        log.Fatal(err)\n    } else {\n        log.Println(\"Connected to Database\")\n    }\n    return client\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67824489/func-init-vs-func-main-for-initalizing-global-state-in-aws-lambda-handlers",
    "body": "[...]\nfunc (h *handler) handleRequest(ctx context.Context) error {\n\tinput := h.s3Client.ListObjectsV2Input{\n        Bucket: aws.String(\"examplebucket\"),\n    }\n    [...]\n}\ntype handler struct {\n    s3Client s3iface.S3API\n}\n// main is called only once, when the Lambda is initialised (started for the first time). Code in this function should\n// primarily be used to create service clients, read environments variables, read configuration from disk etc.\nfunc main() {\n\th := handler{\n\t\ts3client: s3.New(session.New()),\n\t}\n\tlambda.Start(h.handleRequest)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72914728/golang-validate-struct-field-of-type-string-to-be-one-of-specific-values",
    "body": "type User struct {\n        Name                   string                     `validate:\"required\"`\n        Gender                 string                     `validate:\"required,oneof=MALE FEMALE\"`\n        Tier                   *uint8                     `validate:\"required,eq=0|eq=1|eq=2|eq=3\"`\n        MobileNumber           string                     `validate:\"required\"`\n        Email                  string\n        Address                *Address  `validate:\"required\"`\n        Children               []Child   `validate:\"required,dive\"`\n        IsEmployed             *bool     `validate:\"required\"`\n        PreferredContactMethod string    `validate:\"omitempty,oneof=EMAIL PHONE POST SMS\"`\n        RequestedAt            time.Time `validate:\"required\"`\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/67437284/how-to-throw-js-error-from-go-web-assembly",
    "body": "func main() {\n\tc := make(chan struct{})\n\tjs.Global().Set(\"doSomething\", js.FuncOf(func(this js.Value, args []js.Value) interface{} {\n\t\thandler := js.FuncOf(func(this js.Value, args []js.Value) interface{} {\n\t\t\tresolve := args[0]\n\t\t\treject := args[1]\n\t\t\tgo func() {\n\t\t\t\tdata, err := doSomeWork()\n\t\t\t\tif err != nil {\n\t\t\t\t\t// err should be an instance of `error`, eg `errors.New(\"some error\")`\n\t\t\t\t\terrorConstructor := js.Global().Get(\"Error\")\n\t\t\t\t\terrorObject := errorConstructor.New(err.Error())\n\t\t\t\t\treject.Invoke(errorObject)\n\t\t\t\t} else {\n\t\t\t\t\tresolve.Invoke(js.ValueOf(data))\n\t\t\t\t}\n\t\t\t}()\n\t\t\treturn nil\n\t\t})\n\t\tpromiseConstructor := js.Global().Get(\"Promise\")\n\t\treturn promiseConstructor.New(handler)\n\t})\n\t<-c\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62348857/unit-testing-graphql-in-golang",
    "body": "package resolver\n// This file will be automatically regenerated based on the schema, any resolver implementations\n// will be copied through when generating and any unknown code will be moved to the end.\nimport (\n\t\"context\"\n\t\"github.com/mrdulin/gqlgen-cnode/graph/generated\"\n\t\"github.com/mrdulin/gqlgen-cnode/graph/model\"\n)\nfunc (r *mutationResolver) ValidateAccessToken(ctx context.Context, accesstoken string) (*model.UserEntity, error) {\n\treturn r.UserService.ValidateAccessToken(accesstoken), nil\n}\nfunc (r *queryResolver) User(ctx context.Context, loginname string) (*model.UserDetail, error) {\n\treturn r.UserService.GetUserByLoginname(loginname), nil\n}\n// Mutation returns generated.MutationResolver implementation.\nfunc (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }\n// Query returns generated.QueryResolver implementation.\nfunc (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }\ntype mutationResolver struct{ *Resolver }\ntype queryResolver struct{ *Resolver }"
  },
  {
    "url": "https://stackoverflow.com/questions/62348857/unit-testing-graphql-in-golang",
    "body": "package resolver_test\nimport (\n\t\"testing\"\n\t\"github.com/99designs/gqlgen/client\"\n\t\"github.com/99designs/gqlgen/graphql/handler\"\n\t\"github.com/mrdulin/gqlgen-cnode/graph/generated\"\n\t\"github.com/mrdulin/gqlgen-cnode/graph/model\"\n\t\"github.com/mrdulin/gqlgen-cnode/graph/resolver\"\n\t\"github.com/mrdulin/gqlgen-cnode/mocks\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/require\"\n)\nvar (\n\tloginname = \"mrdulin\"\n\tavatarURL = \"avatar.jpg\"\n\tscore     = 50\n\tcreateAt  = \"1900-01-01\"\n)\nfunc TestMutationResolver_ValidateAccessToken(t *testing.T) {\n\tt.Run(\"should validate accesstoken correctly\", func(t *testing.T) {\n\t\ttestUserService := new(mocks.MockedUserService)\n\t\tresolvers := resolver.Resolver{UserService: testUserService}\n\t\tc := client.New(handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: &resolvers})))\n\t\tue := model.UserEntity{ID: \"123\", User: model.User{Loginname: &loginname, AvatarURL: &avatarURL}}\n\t\ttestUserService.On(\"ValidateAccessToken\", mock.AnythingOfType(\"string\")).Return(&ue)\n\t\tvar resp struct {\n\t\t\tValidateAccessToken struct{ ID, Loginname, AvatarUrl string }\n\t\t}\n\t\tq := `\n      mutation {\n        validateAccessToken(accesstoken: \"abc\") {\n          id,\n          loginname,\n          avatarUrl\n        }\n      }\n    `\n\t\tc.MustPost(q, &resp)\n\t\ttestUserService.AssertExpectations(t)\n\t\trequire.Equal(t, \"123\", resp.ValidateAccessToken.ID)\n\t\trequire.Equal(t, \"mrdulin\", resp.ValidateAccessToken.Loginname)\n\t\trequire.Equal(t, \"avatar.jpg\", resp.ValidateAccessToken.AvatarUrl)\n\t})\n}\nfunc TestQueryResolver_User(t *testing.T) {\n\tt.Run(\"should query user correctly\", func(t *testing.T) {\n\t\ttestUserService := new(mocks.MockedUserService)\n\t\tresolvers := resolver.Resolver{UserService: testUserService}\n\t\tc := client.New(handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: &resolvers})))\n\t\tu := model.UserDetail{User: model.User{Loginname: &loginname, AvatarURL: &avatarURL}, Score: &score, CreateAt: &createAt}\n\t\ttestUserService.On(\"GetUserByLoginname\", mock.AnythingOfType(\"string\")).Return(&u)\n\t\tvar resp struct {\n\t\t\tUser struct {\n\t\t\t\tLoginname, AvatarURL, CreateAt string\n\t\t\t\tScore                          int\n\t\t\t}\n\t\t}\n\t\tq := `\n      query GetUser($loginname: String!) {\n        user(loginname: $loginname) {\n          loginname\n          avatarUrl\n          createAt\n          score\n        }\n      }\n    `\n\t\tc.MustPost(q, &resp, client.Var(\"loginname\", \"mrdulin\"))\n\t\ttestUserService.AssertCalled(t, \"GetUserByLoginname\", \"mrdulin\")\n\t\trequire.Equal(t, \"mrdulin\", resp.User.Loginname)\n\t\trequire.Equal(t, \"avatar.jpg\", resp.User.AvatarURL)\n\t\trequire.Equal(t, 50, resp.User.Score)\n\t\trequire.Equal(t, \"1900-01-01\", resp.User.CreateAt)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62348857/unit-testing-graphql-in-golang",
    "body": "=== RUN   TestMutationResolver_ValidateAccessToken\n=== RUN   TestMutationResolver_ValidateAccessToken/should_validate_accesstoken_correctly\n    TestMutationResolver_ValidateAccessToken/should_validate_accesstoken_correctly: root.resolvers_test.go:44: PASS:    ValidateAccessToken(mock.AnythingOfTypeArgument)\n--- PASS: TestMutationResolver_ValidateAccessToken (0.00s)\n    --- PASS: TestMutationResolver_ValidateAccessToken/should_validate_accesstoken_correctly (0.00s)\n=== RUN   TestQueryResolver_User\n=== RUN   TestQueryResolver_User/should_query_user_correctly\n--- PASS: TestQueryResolver_User (0.00s)\n    --- PASS: TestQueryResolver_User/should_query_user_correctly (0.00s)\nPASS\nok      github.com/mrdulin/gqlgen-cnode/graph/resolver  0.141s"
  },
  {
    "url": "https://stackoverflow.com/questions/72441829/golang-rate-limit-per-minute",
    "body": "type Limiter struct {\n\tmaxCount int\n\tcount    int\n\tticker   *time.Ticker\n\tch       chan struct{}\n}\nfunc (l *Limiter) run() {\n\tfor {\n\t\t// if counter has reached 0: block until next tick\n\t\tif l.count <= 0 {\n\t\t\t<-l.ticker.C\n\t\t\tl.count = l.maxCount\n\t\t}\n\t\t// otherwise:\n        // decrement 'count' each time a message is sent on channel,\n        // reset 'count' to 'maxCount' when ticker says so\n\t\tselect {\n\t\tcase l.ch <- struct{}{}:\n\t\t\tl.count--\n\t\tcase <-l.ticker.C:\n\t\t\tl.count = l.maxCount\n\t\t}\n\t}\n}\nfunc (l *Limiter) Wait() {\n\t<-l.ch\n}\nfunc NewLimiter(d time.Duration, count int) *Limiter {\n\tl := &Limiter{\n\t\tmaxCount: count,\n\t\tcount:    count,\n\t\tticker:   time.NewTicker(d),\n\t\tch:       make(chan struct{}),\n\t}\n\tgo l.run()\n\treturn l\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72048367/cloud-build-pass-secret-env-to-dockerfile",
    "body": "# Doesn't work\n  - name: gcr.io/cloud-builders/docker\n    secretEnv: [\"GITHUB_USER\",\"GITHUB_TOKEN\"]\n    args: [\"build\", \"-t\", \"gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA\", \"--build-arg=GITHUB_USER=$GITHUB_USER,GITHUB_TOKEN=$GITHUB_TOKEN\",\".\"]\n# Working version\n  - name: gcr.io/cloud-builders/docker\n    secretEnv: [\"GITHUB_USER\",\"GITHUB_TOKEN\"]\n    entrypoint: bash\n    args:\n     - -c\n     - |\n        docker build -t gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA --build-arg=GITHUB_USER=$$GITHUB_USER,GITHUB_TOKEN=$$GITHUB_TOKEN ."
  },
  {
    "url": "https://stackoverflow.com/questions/67900919/check-if-a-map-is-subset-of-another-map",
    "body": "package main\nimport \"fmt\"\nfunc IsMapSubset[K, V comparable](m, sub map[K]V) bool {\n\tif len(sub) > len(m) {\n\t\treturn false\n\t}\n\tfor k, vsub := range sub {\n\t\tif vm, found := m[k]; !found || vm != vsub {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\ntype MyMap map[string]string\nfunc main() {\n\ta := map[string]string{\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}\n\tb := map[string]string{\"a\": \"b\", \"e\": \"f\"}\n\tc := map[string]string{\"a\": \"b\", \"e\": \"g\"}\n\tfmt.Println(IsMapSubset(a, b))\n\tfmt.Println(IsMapSubset(a, c))\n\tfmt.Println(IsMapSubset(MyMap(a), c))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/29422602/golang-reflect-deepequal-returns-false",
    "body": "func TestGoogleAccountRepository_FindByClientCustomerIds(t *testing.T) {\n\ttype args struct {\n\t\tids []int\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\targs    args\n\t\twant    []cedar.GoogleAccount\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname:    \"should get client customer ids correctly\",\n\t\t\targs:    args{ids: []int{9258066191}},\n\t\t\twant:    make([]cedar.GoogleAccount, 0),\n\t\t\twantErr: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := googleAccountRepo.FindByClientCustomerIds(tt.args.ids)\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"GoogleAccountRepository.FindByClientCustomerIds() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"got = %#v, want = %#v\\n\", got, tt.want)\n\t\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"GoogleAccountRepository.FindByClientCustomerIds() = %+v, want %+v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/29422602/golang-reflect-deepequal-returns-false",
    "body": "load env vars from local fs env file\n=== RUN   TestGoogleAccountRepository_FindByClientCustomerIds\n--- FAIL: TestGoogleAccountRepository_FindByClientCustomerIds (0.62s)\n=== RUN   TestGoogleAccountRepository_FindByClientCustomerIds/should_get_client_customer_ids_correctly\ngot = []cedar.GoogleAccount(nil), want = []cedar.GoogleAccount{}\n    --- FAIL: TestGoogleAccountRepository_FindByClientCustomerIds/should_get_client_customer_ids_correctly (0.62s)\n        googleAccount_test.go:64: GoogleAccountRepository.FindByClientCustomerIds() = [], want []\nFAIL"
  },
  {
    "url": "https://stackoverflow.com/questions/68472667/how-to-log-to-stdout-or-stderr-based-on-log-level-using-uber-go-zap",
    "body": "package main\nimport (\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"os\"\n)\nfunc main() {\n    // info level enabler\n\tinfoLevel := zap.LevelEnablerFunc(func(level zapcore.Level) bool {\n\t\treturn level == zapcore.InfoLevel\n\t})\n    // error and fatal level enabler\n\terrorFatalLevel := zap.LevelEnablerFunc(func(level zapcore.Level) bool {\n\t\treturn level == zapcore.ErrorLevel || level == zapcore.FatalLevel\n\t})\n    // write syncers\n\tstdoutSyncer := zapcore.Lock(os.Stdout)\n\tstderrSyncer := zapcore.Lock(os.Stderr)\n    // tee core\n\tcore := zapcore.NewTee(\n\t\tzapcore.NewCore(\n\t\t\tzapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n\t\t\tstdoutSyncer,\n\t\t\tinfoLevel,\n\t\t),\n\t\tzapcore.NewCore(\n\t\t\tzapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n\t\t\tstderrSyncer,\n\t\t\terrorFatalLevel,\n\t\t),\n\t)\n    // finally construct the logger with the tee core\n\tlogger := zap.New(core)\n\tlogger.Info(\"info log\")\n\tlogger.Error(\"error log\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65907011/how-to-convert-date-to-rfc3339-extended-date-string-with-milliseconds-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tcreatedOn, err := time.Parse(\"2006-01-02 15:04:05\", \"2016-07-23 12:43:01\")\n\n\tif err != nil {\n\t\tfmt.Printf(\"Error parsing date := %v\", err)\n\t}\n\tsec := createdOn.Format(time.RFC3339)\n\tnano := createdOn.Format(time.RFC3339Nano)\n\tmilli := createdOn.Format(\"2006-01-02T15:04:05.000Z07:00\")\n\tfmt.Println(\"Original date/time := \", \"2016-07-23 12:43:01\\n\\n\")\n\tfmt.Println(\"Date format using time.RFC3339 := \", sec)\n\tfmt.Println(\"\\nDate format using time.RFC3339Nano := \", nano)\n\tfmt.Println(\"\\nDate format using custom format 2006-01-02T15:04:05.000Z07:00 := \", milli)\n\tfmt.Println(\"\\n\\nMilliseconds requires custom format when developing with go!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/39575798/how-to-replace-emoji-characters-in-string-using-regex-in-golang",
    "body": "emojiRx := regexp.MustCompile(`[#*0-9]\\x{FE0F}?\\x{20E3}|©\\x{FE0F}?|[®\\x{203C}\\x{2049}\\x{2122}\\x{2139}\\x{2194}-\\x{2199}\\x{21A9}\\x{21AA}]\\x{FE0F}?|[\\x{231A}\\x{231B}]|[\\x{2328}\\x{23CF}]\\x{FE0F}?|[\\x{23E9}-\\x{23EC}]|[\\x{23ED}-\\x{23EF}]\\x{FE0F}?|\\x{23F0}|[\\x{23F1}\\x{23F2}]\\x{FE0F}?|\\x{23F3}|[\\x{23F8}-\\x{23FA}\\x{24C2}\\x{25AA}\\x{25AB}\\x{25B6}\\x{25C0}\\x{25FB}\\x{25FC}]\\x{FE0F}?|[\\x{25FD}\\x{25FE}]|[\\x{2600}-\\x{2604}\\x{260E}\\x{2611}]\\x{FE0F}?|[\\x{2614}\\x{2615}]|\\x{2618}\\x{FE0F}?|\\x{261D}[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}]?|[\\x{2620}\\x{2622}\\x{2623}\\x{2626}\\x{262A}\\x{262E}\\x{262F}\\x{2638}-\\x{263A}\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{2648}-\\x{2653}]|[\\x{265F}\\x{2660}\\x{2663}\\x{2665}\\x{2666}\\x{2668}\\x{267B}\\x{267E}]\\x{FE0F}?|\\x{267F}|\\x{2692}\\x{FE0F}?|\\x{2693}|[\\x{2694}-\\x{2697}\\x{2699}\\x{269B}\\x{269C}\\x{26A0}]\\x{FE0F}?|\\x{26A1}|\\x{26A7}\\x{FE0F}?|[\\x{26AA}\\x{26AB}]|[\\x{26B0}\\x{26B1}]\\x{FE0F}?|[\\x{26BD}\\x{26BE}\\x{26C4}\\x{26C5}]|\\x{26C8}\\x{FE0F}?|\\x{26CE}|[\\x{26CF}\\x{26D1}\\x{26D3}]\\x{FE0F}?|\\x{26D4}|\\x{26E9}\\x{FE0F}?|\\x{26EA}|[\\x{26F0}\\x{26F1}]\\x{FE0F}?|[\\x{26F2}\\x{26F3}]|\\x{26F4}\\x{FE0F}?|\\x{26F5}|[\\x{26F7}\\x{26F8}]\\x{FE0F}?|\\x{26F9}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{26FA}\\x{26FD}]|\\x{2702}\\x{FE0F}?|\\x{2705}|[\\x{2708}\\x{2709}]\\x{FE0F}?|[\\x{270A}\\x{270B}][\\x{1F3FB}-\\x{1F3FF}]?|[\\x{270C}\\x{270D}][\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}]?|\\x{270F}\\x{FE0F}?|[\\x{2712}\\x{2714}\\x{2716}\\x{271D}\\x{2721}]\\x{FE0F}?|\\x{2728}|[\\x{2733}\\x{2734}\\x{2744}\\x{2747}]\\x{FE0F}?|[\\x{274C}\\x{274E}\\x{2753}-\\x{2755}\\x{2757}]|\\x{2763}\\x{FE0F}?|\\x{2764}(?:\\x{200D}[\\x{1F525}\\x{1FA79}]|\\x{FE0F}(?:\\x{200D}[\\x{1F525}\\x{1FA79}])?)?|[\\x{2795}-\\x{2797}]|\\x{27A1}\\x{FE0F}?|[\\x{27B0}\\x{27BF}]|[\\x{2934}\\x{2935}\\x{2B05}-\\x{2B07}]\\x{FE0F}?|[\\x{2B1B}\\x{2B1C}\\x{2B50}\\x{2B55}]|[\\x{3030}\\x{303D}\\x{3297}\\x{3299}]\\x{FE0F}?|[\\x{1F004}\\x{1F0CF}]|[\\x{1F170}\\x{1F171}\\x{1F17E}\\x{1F17F}]\\x{FE0F}?|[\\x{1F18E}\\x{1F191}-\\x{1F19A}]|\\x{1F1E6}[\\x{1F1E8}-\\x{1F1EC}\\x{1F1EE}\\x{1F1F1}\\x{1F1F2}\\x{1F1F4}\\x{1F1F6}-\\x{1F1FA}\\x{1F1FC}\\x{1F1FD}\\x{1F1FF}]|\\x{1F1E7}[\\x{1F1E6}\\x{1F1E7}\\x{1F1E9}-\\x{1F1EF}\\x{1F1F1}-\\x{1F1F4}\\x{1F1F6}-\\x{1F1F9}\\x{1F1FB}\\x{1F1FC}\\x{1F1FE}\\x{1F1FF}]|\\x{1F1E8}[\\x{1F1E6}\\x{1F1E8}\\x{1F1E9}\\x{1F1EB}-\\x{1F1EE}\\x{1F1F0}-\\x{1F1F5}\\x{1F1F7}\\x{1F1FA}-\\x{1F1FF}]|\\x{1F1E9}[\\x{1F1EA}\\x{1F1EC}\\x{1F1EF}\\x{1F1F0}\\x{1F1F2}\\x{1F1F4}\\x{1F1FF}]|\\x{1F1EA}[\\x{1F1E6}\\x{1F1E8}\\x{1F1EA}\\x{1F1EC}\\x{1F1ED}\\x{1F1F7}-\\x{1F1FA}]|\\x{1F1EB}[\\x{1F1EE}-\\x{1F1F0}\\x{1F1F2}\\x{1F1F4}\\x{1F1F7}]|\\x{1F1EC}[\\x{1F1E6}\\x{1F1E7}\\x{1F1E9}-\\x{1F1EE}\\x{1F1F1}-\\x{1F1F3}\\x{1F1F5}-\\x{1F1FA}\\x{1F1FC}\\x{1F1FE}]|\\x{1F1ED}[\\x{1F1F0}\\x{1F1F2}\\x{1F1F3}\\x{1F1F7}\\x{1F1F9}\\x{1F1FA}]|\\x{1F1EE}[\\x{1F1E8}-\\x{1F1EA}\\x{1F1F1}-\\x{1F1F4}\\x{1F1F6}-\\x{1F1F9}]|\\x{1F1EF}[\\x{1F1EA}\\x{1F1F2}\\x{1F1F4}\\x{1F1F5}]|\\x{1F1F0}[\\x{1F1EA}\\x{1F1EC}-\\x{1F1EE}\\x{1F1F2}\\x{1F1F3}\\x{1F1F5}\\x{1F1F7}\\x{1F1FC}\\x{1F1FE}\\x{1F1FF}]|\\x{1F1F1}[\\x{1F1E6}-\\x{1F1E8}\\x{1F1EE}\\x{1F1F0}\\x{1F1F7}-\\x{1F1FB}\\x{1F1FE}]|\\x{1F1F2}[\\x{1F1E6}\\x{1F1E8}-\\x{1F1ED}\\x{1F1F0}-\\x{1F1FF}]|\\x{1F1F3}[\\x{1F1E6}\\x{1F1E8}\\x{1F1EA}-\\x{1F1EC}\\x{1F1EE}\\x{1F1F1}\\x{1F1F4}\\x{1F1F5}\\x{1F1F7}\\x{1F1FA}\\x{1F1FF}]|\\x{1F1F4}\\x{1F1F2}|\\x{1F1F5}[\\x{1F1E6}\\x{1F1EA}-\\x{1F1ED}\\x{1F1F0}-\\x{1F1F3}\\x{1F1F7}-\\x{1F1F9}\\x{1F1FC}\\x{1F1FE}]|\\x{1F1F6}\\x{1F1E6}|\\x{1F1F7}[\\x{1F1EA}\\x{1F1F4}\\x{1F1F8}\\x{1F1FA}\\x{1F1FC}]|\\x{1F1F8}[\\x{1F1E6}-\\x{1F1EA}\\x{1F1EC}-\\x{1F1F4}\\x{1F1F7}-\\x{1F1F9}\\x{1F1FB}\\x{1F1FD}-\\x{1F1FF}]|\\x{1F1F9}[\\x{1F1E6}\\x{1F1E8}\\x{1F1E9}\\x{1F1EB}-\\x{1F1ED}\\x{1F1EF}-\\x{1F1F4}\\x{1F1F7}\\x{1F1F9}\\x{1F1FB}\\x{1F1FC}\\x{1F1FF}]|\\x{1F1FA}[\\x{1F1E6}\\x{1F1EC}\\x{1F1F2}\\x{1F1F3}\\x{1F1F8}\\x{1F1FE}\\x{1F1FF}]|\\x{1F1FB}[\\x{1F1E6}\\x{1F1E8}\\x{1F1EA}\\x{1F1EC}\\x{1F1EE}\\x{1F1F3}\\x{1F1FA}]|\\x{1F1FC}[\\x{1F1EB}\\x{1F1F8}]|\\x{1F1FD}\\x{1F1F0}|\\x{1F1FE}[\\x{1F1EA}\\x{1F1F9}]|\\x{1F1FF}[\\x{1F1E6}\\x{1F1F2}\\x{1F1FC}]|\\x{1F201}|\\x{1F202}\\x{FE0F}?|[\\x{1F21A}\\x{1F22F}\\x{1F232}-\\x{1F236}]|\\x{1F237}\\x{FE0F}?|[\\x{1F238}-\\x{1F23A}\\x{1F250}\\x{1F251}\\x{1F300}-\\x{1F320}]|[\\x{1F321}\\x{1F324}-\\x{1F32C}]\\x{FE0F}?|[\\x{1F32D}-\\x{1F335}]|\\x{1F336}\\x{FE0F}?|[\\x{1F337}-\\x{1F37C}]|\\x{1F37D}\\x{FE0F}?|[\\x{1F37E}-\\x{1F384}]|\\x{1F385}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F386}-\\x{1F393}]|[\\x{1F396}\\x{1F397}\\x{1F399}-\\x{1F39B}\\x{1F39E}\\x{1F39F}]\\x{FE0F}?|[\\x{1F3A0}-\\x{1F3C1}]|\\x{1F3C2}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F3C3}\\x{1F3C4}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F3C5}\\x{1F3C6}]|\\x{1F3C7}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F3C8}\\x{1F3C9}]|\\x{1F3CA}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F3CB}\\x{1F3CC}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F3CD}\\x{1F3CE}]\\x{FE0F}?|[\\x{1F3CF}-\\x{1F3D3}]|[\\x{1F3D4}-\\x{1F3DF}]\\x{FE0F}?|[\\x{1F3E0}-\\x{1F3F0}]|\\x{1F3F3}(?:\\x{200D}(?:\\x{26A7}\\x{FE0F}?|\\x{1F308})|\\x{FE0F}(?:\\x{200D}(?:\\x{26A7}\\x{FE0F}?|\\x{1F308}))?)?|\\x{1F3F4}(?:\\x{200D}\\x{2620}\\x{FE0F}?|\\x{E0067}\\x{E0062}(?:\\x{E0065}\\x{E006E}\\x{E0067}|\\x{E0073}\\x{E0063}\\x{E0074}|\\x{E0077}\\x{E006C}\\x{E0073})\\x{E007F})?|[\\x{1F3F5}\\x{1F3F7}]\\x{FE0F}?|[\\x{1F3F8}-\\x{1F407}]|\\x{1F408}(?:\\x{200D}\\x{2B1B})?|[\\x{1F409}-\\x{1F414}]|\\x{1F415}(?:\\x{200D}\\x{1F9BA})?|[\\x{1F416}-\\x{1F43A}]|\\x{1F43B}(?:\\x{200D}\\x{2744}\\x{FE0F}?)?|[\\x{1F43C}-\\x{1F43E}]|\\x{1F43F}\\x{FE0F}?|\\x{1F440}|\\x{1F441}(?:\\x{200D}\\x{1F5E8}\\x{FE0F}?|\\x{FE0F}(?:\\x{200D}\\x{1F5E8}\\x{FE0F}?)?)?|[\\x{1F442}\\x{1F443}][\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F444}\\x{1F445}]|[\\x{1F446}-\\x{1F450}][\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F451}-\\x{1F465}]|[\\x{1F466}\\x{1F467}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F468}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}]|\\x{1F466}(?:\\x{200D}\\x{1F466})?|\\x{1F467}(?:\\x{200D}[\\x{1F466}\\x{1F467}])?|[\\x{1F468}\\x{1F469}]\\x{200D}(?:\\x{1F466}(?:\\x{200D}\\x{1F466})?|\\x{1F467}(?:\\x{200D}[\\x{1F466}\\x{1F467}])?)|[\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}])|\\x{1F3FB}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F468}[\\x{1F3FC}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FC}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F468}[\\x{1F3FB}\\x{1F3FD}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FD}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F468}[\\x{1F3FB}\\x{1F3FC}\\x{1F3FE}\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FE}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F468}[\\x{1F3FB}-\\x{1F3FD}\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FF}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?\\x{1F468}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F468}[\\x{1F3FB}-\\x{1F3FE}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?)?|\\x{1F469}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D})?[\\x{1F468}\\x{1F469}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}]|\\x{1F466}(?:\\x{200D}\\x{1F466})?|\\x{1F467}(?:\\x{200D}[\\x{1F466}\\x{1F467}])?|\\x{1F469}\\x{200D}(?:\\x{1F466}(?:\\x{200D}\\x{1F466})?|\\x{1F467}(?:\\x{200D}[\\x{1F466}\\x{1F467}])?)|[\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}])|\\x{1F3FB}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}]|\\x{1F48B}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}])|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FC}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FC}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}]|\\x{1F48B}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}])|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}\\x{1F3FD}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FD}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}]|\\x{1F48B}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}])|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}\\x{1F3FC}\\x{1F3FE}\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FE}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}]|\\x{1F48B}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}])|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FD}\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FF}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}]|\\x{1F48B}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FF}])|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}[\\x{1F468}\\x{1F469}][\\x{1F3FB}-\\x{1F3FE}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?)?|\\x{1F46A}|[\\x{1F46B}-\\x{1F46D}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F46E}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F46F}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?|[\\x{1F470}\\x{1F471}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F472}[\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F473}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F474}-\\x{1F476}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F477}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F478}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F479}-\\x{1F47B}]|\\x{1F47C}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F47D}-\\x{1F480}]|[\\x{1F481}\\x{1F482}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F483}[\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F484}|\\x{1F485}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F486}\\x{1F487}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F488}-\\x{1F48E}]|\\x{1F48F}[\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F490}|\\x{1F491}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F492}-\\x{1F4A9}]|\\x{1F4AA}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F4AB}-\\x{1F4FC}]|\\x{1F4FD}\\x{FE0F}?|[\\x{1F4FF}-\\x{1F53D}]|[\\x{1F549}\\x{1F54A}]\\x{FE0F}?|[\\x{1F54B}-\\x{1F54E}\\x{1F550}-\\x{1F567}]|[\\x{1F56F}\\x{1F570}\\x{1F573}]\\x{FE0F}?|\\x{1F574}[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F575}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F576}-\\x{1F579}]\\x{FE0F}?|\\x{1F57A}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F587}\\x{1F58A}-\\x{1F58D}]\\x{FE0F}?|\\x{1F590}[\\x{FE0F}\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F595}\\x{1F596}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F5A4}|[\\x{1F5A5}\\x{1F5A8}\\x{1F5B1}\\x{1F5B2}\\x{1F5BC}\\x{1F5C2}-\\x{1F5C4}\\x{1F5D1}-\\x{1F5D3}\\x{1F5DC}-\\x{1F5DE}\\x{1F5E1}\\x{1F5E3}\\x{1F5E8}\\x{1F5EF}\\x{1F5F3}\\x{1F5FA}]\\x{FE0F}?|[\\x{1F5FB}-\\x{1F62D}]|\\x{1F62E}(?:\\x{200D}\\x{1F4A8})?|[\\x{1F62F}-\\x{1F634}]|\\x{1F635}(?:\\x{200D}\\x{1F4AB})?|\\x{1F636}(?:\\x{200D}\\x{1F32B}\\x{FE0F}?)?|[\\x{1F637}-\\x{1F644}]|[\\x{1F645}-\\x{1F647}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F648}-\\x{1F64A}]|\\x{1F64B}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F64C}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F64D}\\x{1F64E}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F64F}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F680}-\\x{1F6A2}]|\\x{1F6A3}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F6A4}-\\x{1F6B3}]|[\\x{1F6B4}-\\x{1F6B6}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F6B7}-\\x{1F6BF}]|\\x{1F6C0}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F6C1}-\\x{1F6C5}]|\\x{1F6CB}\\x{FE0F}?|\\x{1F6CC}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F6CD}-\\x{1F6CF}]\\x{FE0F}?|[\\x{1F6D0}-\\x{1F6D2}\\x{1F6D5}-\\x{1F6D7}\\x{1F6DD}-\\x{1F6DF}]|[\\x{1F6E0}-\\x{1F6E5}\\x{1F6E9}]\\x{FE0F}?|[\\x{1F6EB}\\x{1F6EC}]|[\\x{1F6F0}\\x{1F6F3}]\\x{FE0F}?|[\\x{1F6F4}-\\x{1F6FC}\\x{1F7E0}-\\x{1F7EB}\\x{1F7F0}]|\\x{1F90C}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F90D}\\x{1F90E}]|\\x{1F90F}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F910}-\\x{1F917}]|[\\x{1F918}-\\x{1F91F}][\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F920}-\\x{1F925}]|\\x{1F926}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F927}-\\x{1F92F}]|[\\x{1F930}-\\x{1F934}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F935}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F936}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F937}-\\x{1F939}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F93A}|\\x{1F93C}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?|[\\x{1F93D}\\x{1F93E}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F93F}-\\x{1F945}\\x{1F947}-\\x{1F976}]|\\x{1F977}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F978}-\\x{1F9B4}]|[\\x{1F9B5}\\x{1F9B6}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F9B7}|[\\x{1F9B8}\\x{1F9B9}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F9BA}|\\x{1F9BB}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F9BC}-\\x{1F9CC}]|[\\x{1F9CD}-\\x{1F9CF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F9D0}|\\x{1F9D1}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}])|\\x{1F3FB}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D}|)\\x{1F9D1}[\\x{1F3FC}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FC}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D}|)\\x{1F9D1}[\\x{1F3FB}\\x{1F3FD}-\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FD}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D}|)\\x{1F9D1}[\\x{1F3FB}\\x{1F3FC}\\x{1F3FE}\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FE}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D}|)\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FD}\\x{1F3FF}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?|\\x{1F3FF}(?:\\x{200D}(?:[\\x{2695}\\x{2696}\\x{2708}]\\x{FE0F}?|\\x{2764}\\x{FE0F}?\\x{200D}(?:\\x{1F48B}\\x{200D}|)\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FE}]|[\\x{1F33E}\\x{1F373}\\x{1F37C}\\x{1F384}\\x{1F393}\\x{1F3A4}\\x{1F3A8}\\x{1F3EB}\\x{1F3ED}\\x{1F4BB}\\x{1F4BC}\\x{1F527}\\x{1F52C}\\x{1F680}\\x{1F692}]|\\x{1F91D}\\x{200D}\\x{1F9D1}[\\x{1F3FB}-\\x{1F3FF}]|[\\x{1F9AF}-\\x{1F9B3}\\x{1F9BC}\\x{1F9BD}]))?)?|[\\x{1F9D2}\\x{1F9D3}][\\x{1F3FB}-\\x{1F3FF}]?|\\x{1F9D4}(?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|\\x{1F9D5}[\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1F9D6}-\\x{1F9DD}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?|[\\x{1F3FB}-\\x{1F3FF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?)?|[\\x{1F9DE}\\x{1F9DF}](?:\\x{200D}[\\x{2640}\\x{2642}]\\x{FE0F}?)?|[\\x{1F9E0}-\\x{1F9FF}\\x{1FA70}-\\x{1FA74}\\x{1FA78}-\\x{1FA7C}\\x{1FA80}-\\x{1FA86}\\x{1FA90}-\\x{1FAAC}\\x{1FAB0}-\\x{1FABA}\\x{1FAC0}-\\x{1FAC2}]|[\\x{1FAC3}-\\x{1FAC5}][\\x{1F3FB}-\\x{1F3FF}]?|[\\x{1FAD0}-\\x{1FAD9}\\x{1FAE0}-\\x{1FAE7}]|\\x{1FAF0}[\\x{1F3FB}-\\x{1F3FF}]?|\\x{1FAF1}(?:\\x{1F3FB}(?:\\x{200D}\\x{1FAF2}[\\x{1F3FC}-\\x{1F3FF}])?|\\x{1F3FC}(?:\\x{200D}\\x{1FAF2}[\\x{1F3FB}\\x{1F3FD}-\\x{1F3FF}])?|\\x{1F3FD}(?:\\x{200D}\\x{1FAF2}[\\x{1F3FB}\\x{1F3FC}\\x{1F3FE}\\x{1F3FF}])?|\\x{1F3FE}(?:\\x{200D}\\x{1FAF2}[\\x{1F3FB}-\\x{1F3FD}\\x{1F3FF}])?|\\x{1F3FF}(?:\\x{200D}\\x{1FAF2}[\\x{1F3FB}-\\x{1F3FE}])?)?|[\\x{1FAF2}-\\x{1FAF6}][\\x{1F3FB}-\\x{1F3FF}]?`)"
  },
  {
    "url": "https://stackoverflow.com/questions/73007826/gorm-get-column-name",
    "body": "github.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.1.4 h1:tHnRBy1i5F2Dh8BAFxqFzxKqqvezXrL2OW1TnX+Mlas=\ngithub.com/jinzhu/now v1.1.4/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngorm.io/gorm v1.23.8 h1:h8sGJ+biDgBA1AD1Ha9gFCx7h8npU7AsLdlkX0n2TpE=\ngorm.io/gorm v1.23.8/go.mod h1:l2lP/RyAtc1ynaTjFksBde/O8v9oOGIApu2/xRitmZk="
  },
  {
    "url": "https://stackoverflow.com/questions/73007826/gorm-get-column-name",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/google/uuid\"\n    \"gorm.io/gorm\"\n    \"gorm.io/gorm/schema\"\n    \"sync\"\n    \"time\"\n)\ntype Person struct {\n    ID        uuid.UUID      `gorm:\"type:uuid;default:uuid_generate_v4()\"`\n    Name      string         `gorm:\"not null,type:text\"`\n    CreatedAt time.Time      `gorm:\"autoCreateTime\"`\n    UpdatedAt time.Time      `gorm:\"autoUpdateTime\"`\n    DeletedAt gorm.DeletedAt `gorm:\"index,->\"`\n}\nfunc main() {\n    s, err := schema.Parse(&Person{}, &sync.Map{}, schema.NamingStrategy{})\n    if err != nil {\n        panic(\"failed to parse schema\")\n    }\n    m := make(map[string]string)\n    for _, field := range s.Fields {\n        dbName := field.DBName\n        modelName := field.Name\n        m[modelName] = dbName\n    }\n    fmt.Println(\"Model to schema field name map:\", m)\n    fmt.Println(\"CreatedAt field is mapped to\", m[\"CreatedAt\"], \"column\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70378025/how-to-create-opentelemetry-span-from-a-string-traceid",
    "body": "func constructNewSpanContext(request NewRequest) (spanContext trace.SpanContext, err error) {\n\tvar traceID trace.TraceID\n\ttraceID, err = trace.TraceIDFromHex(request.TraceID)\n\tif err != nil {\n\t\tfmt.Println(\"error: \", err)\n\t\treturn spanContext, err\n\t}\n\tvar spanID trace.SpanID\n\tspanID, err = trace.SpanIDFromHex(request.SpanID)\n\tif err != nil {\n\t\tfmt.Println(\"error: \", err)\n\t\treturn spanContext, err\n\t}\n\tvar spanContextConfig trace.SpanContextConfig\n\tspanContextConfig.TraceID = traceID\n\tspanContextConfig.SpanID = spanID\n\tspanContextConfig.TraceFlags = 01\n\tspanContextConfig.Remote = false\n\tspanContext = trace.NewSpanContext(spanContextConfig)\n\treturn spanContext, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64113932/go-get-k8s-api-server-health-status",
    "body": "package main\nimport (\n\t\"os\"\n    \"errors\"\n    \"fmt\"\n    \"k8s.io/client-go/kubernetes\"\n    \"k8s.io/client-go/rest\"\n)\nfunc main() {\n    client, err := newInClusterClient()\n    if err != nil {\n        panic(err.Error())\n    }\n    path := \"/healthz\"\n    content, err := client.Discovery().RESTClient().Get().AbsPath(path).DoRaw()\n    if err != nil {\n        fmt.Printf(\"ErrorBadRequst : %s\\n\", err.Error())\n        os.Exit(1)\n    }\n    contentStr := string(content)\n    if contentStr != \"ok\" {\n        fmt.Printf(\"ErrorNotOk : response != 'ok' : %s\\n\", contentStr)\n        os.Exit(1)\n    }\n    fmt.Printf(\"Success : ok!\")\n    os.Exit(0)\n}\nfunc newInClusterClient() (*kubernetes.Clientset, error) {\n    config, err := rest.InClusterConfig()\n    if err != nil {\n        return &kubernetes.Clientset{}, errors.New(\"Failed loading client config\")\n    }\n    clientset, err := kubernetes.NewForConfig(config)\n    if err != nil {\n        return &kubernetes.Clientset{}, errors.New(\"Failed getting clientset\")\n    }\n    return clientset, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64113932/go-get-k8s-api-server-health-status",
    "body": "# cronjob\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: is-healthz-ok\nspec:\n  schedule: \"*/5 * * * *\" # at every fifth minute\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          serviceAccountName: is-healthz-ok\n          containers:\n            - name: is-healthz-ok\n              image: oze4/is-healthz-ok:latest\n          restartPolicy: OnFailure\n---\n# service account\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: is-healthz-ok\n  namespace: default\n---\n# cluster role binding\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: is-healthz-ok\nsubjects:\n  - kind: ServiceAccount\n    name: is-healthz-ok\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  ##########################################################################\n  # Instead of assigning cluster-admin you can create your own ClusterRole #\n  # I used cluster-admin because this is a homelab                         #\n  ##########################################################################\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n---"
  },
  {
    "url": "https://stackoverflow.com/questions/64113932/go-get-k8s-api-server-health-status",
    "body": "apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: remove-terminating-namespaces-cronjob\nspec:\n  schedule: \"0 */1 * * *\" # at minute 0 of each hour aka once per hour\n  #successfulJobsHistoryLimit: 0\n  #failedJobsHistoryLimit: 0\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          serviceAccountName: svc-remove-terminating-namespaces\n          containers:\n          - name: remove-terminating-namespaces\n            image: oze4/service.remove-terminating-namespaces:latest\n          restartPolicy: OnFailure"
  },
  {
    "url": "https://stackoverflow.com/questions/64113932/go-get-k8s-api-server-health-status",
    "body": "apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: svc-remove-terminating-namespaces\n  namespace: default\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: crb-namespace-reader-writer\nsubjects:\n- kind: ServiceAccount\n  name: svc-remove-terminating-namespaces\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  ##########################################################################\n  # Instead of assigning cluster-admin you can create your own ClusterRole #\n  # I used cluster-admin because this is a homelab                         #\n  ##########################################################################\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n---"
  },
  {
    "url": "https://stackoverflow.com/questions/64113932/go-get-k8s-api-server-health-status",
    "body": "package main\nimport (\n    \"errors\"\n\t\"flag\"\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"k8s.io/client-go/kubernetes\"\n    \"k8s.io/client-go/tools/clientcmd\"\n    \"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n    // I find it easiest to use \"out-of-cluster\" for tetsing\n    // client, err := newOutOfClusterClient()\n    client, err := newInClusterClient()\n    if err != nil {\n        panic(err.Error())\n    }\n    livez := \"/livez\"\n    content, _ := client.Discovery().RESTClient().Get().AbsPath(livez).DoRaw()\n    fmt.Println(string(content))\n}\nfunc newInClusterClient() (*kubernetes.Clientset, error) {\n    config, err := rest.InClusterConfig()\n\tif err != nil {\n\t\treturn &kubernetes.Clientset{}, errors.New(\"Failed loading client config\")\n\t}\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\treturn &kubernetes.Clientset{}, errors.New(\"Failed getting clientset\")\n\t}\n\treturn clientset, nil\n}\n// I find it easiest to use \"out-of-cluster\" for tetsing\nfunc newOutOfClusterClient() (*kubernetes.Clientset, error) {\n    var kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\t// use the current context in kubeconfig\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// create the clientset\n\tclient, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\treturn nil, err\n    }\n    return client, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63260599/how-to-sign-jwt-with-ecdsa-method-using-jwt-golang-package-sign-in-with-apple",
    "body": "p8bytes, err := ioutil.ReadFile(\"SomeAppleKey.p8\")\n    if err != nil {\n      log.Println(err)\n      return\n    }\n    // Here you need to decode the Apple private key, which is in pem format\n    block, _ := pem.Decode(p8bytes)\n    // Check if it's a private key\n    if block == nil || block.Type != \"PRIVATE KEY\" {\n      log.Println(\"Failed to decode PEM block containing private key\")\n      return\n    }\n    // Get the encoded bytes\n    x509Encoded := block.Bytes\n\ttoken := jwt.NewWithClaims(\n\t\tjwt.SigningMethodES256, // specific instance of `*SigningMethodECDSA`\n\t\tjwt.StandardClaims{\n\t\t\t// ...\n\t\t},\n\t)\n    // Now you need an instance of *ecdsa.PrivateKey\n\tparsedKey, err := x509.ParsePKCS8PrivateKey(x509Encoded) // EDIT to x509Encoded from p8bytes\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tecdsaPrivateKey, ok := parsedKey.(*ecdsa.PrivateKey)\n\tif !ok {\n\t\tpanic(\"not ecdsa private key\")\n\t}\n    // Finally sign the token with the value of type *ecdsa.PrivateKey\n\tsigned, err := token.SignedString(ecdsaPrivateKey)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(signed) // the signed JWT"
  },
  {
    "url": "https://stackoverflow.com/questions/62965006/how-to-parse-collection-of-pem-certs",
    "body": "\tfor block, rest := pem.Decode(data); block != nil; block, rest = pem.Decode(rest) {\n\t\tswitch block.Type {\n\t\tcase \"CERTIFICATE\":\n\t\t\tcert, err := x509.ParseCertificate(block.Bytes)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\t// Handle certificate\n\t\t\tfmt.Printf(\"%T %#v\\n\", cert, cert)\n\t\tcase \"PRIVATE KEY\":\n\t\t\tkey, err := x509.ParsePKCS1PrivateKey(block.Bytes)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\t// Handle private key\n\t\t\tfmt.Printf(\"%T %#v\\n\", key, key)\n\t\tdefault:\n\t\t\tpanic(\"unknown block type\")\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/59417897/encode-as-csv-then-zip-in-golang",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"io/ioutil\"\n)\nfunc main() {\n\tvar buf bytes.Buffer\n\tzipWriter := gzip.NewWriter(&buf)\n\tcsvwriter := csv.NewWriter(zipWriter)\n\tcsvwriter.Write([]string{\"a\", \"b\\\"fwr\", \"c\"})\n\tcsvwriter.Write([]string{\"a\", \"e\", \"ww\"})\n\tcsvwriter.Flush()\n\tzipWriter.Flush()\n\tzipWriter.Close()\n\tfmt.Println(buf.Bytes())\n\tzipReader, _ := gzip.NewReader(bytes.NewReader(buf.Bytes()))\n\td, err := ioutil.ReadAll(zipReader)\n\tif err != nil {\n\t\tfmt.Println(\"err\", err)\n\t}\n\tfmt.Println(string(d))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72771272/how-to-setup-pgx-to-get-utc-values-from-db",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx/v4\"\n)\nfunc main() {\n\tctx := context.Background()\n\tc1, err := pgx.Connect(ctx, \"postgres:///?sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer c1.Close(ctx)\n    // sends \"-c TimeZone=UTC\" to server at connection start\n    c2, err := pgx.Connect(ctx, \"postgres:///?sslmode=disable&options=-c%20TimeZone%3DUTC\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer c2.Close(ctx)\n\tvar tz1, tz2 string\n\tif err := c1.QueryRow(ctx, \"SHOW timezone\").Scan(&tz1); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := c2.QueryRow(ctx, \"SHOW timezone\").Scan(&tz2); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(tz1)\n\tfmt.Println(tz2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72771272/how-to-setup-pgx-to-get-utc-values-from-db",
    "body": "    // ...\n\tvar t1, t2 time.Time\n\tif err := c1.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t1); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := c2.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t2); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(t1)\n\tfmt.Println(t2)\n    // explicitly set Local to UTC\n\ttime.Local = time.UTC\n\tif err := c1.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t1); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := c2.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t2); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(t1)\n\tfmt.Println(t2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72771272/how-to-setup-pgx-to-get-utc-values-from-db",
    "body": "    // ...\n\tvar t1, t2 time.Time\n\tif err := c1.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t1); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := c2.QueryRow(ctx, \"select now()::timestamptz\").Scan(&t2); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(t1)\n\tfmt.Println(t2)\n\tvar tt1, tt2 myTime\n\tif err := c1.QueryRow(ctx, \"select now()::timestamptz\").Scan(&tt1); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := c2.QueryRow(ctx, \"select now()::timestamptz\").Scan(&tt2); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(tt1)\n\tfmt.Println(tt2)\n}\ntype myTime struct {\n\ttime.Time\n}\nfunc (tt *myTime) Scan(src interface{}) error {\n\tif t, ok := src.(time.Time); ok {\n\t\ttt.Time = t.In(time.UTC)\n\t\treturn nil\n\t}\n\treturn fmt.Errorf(\"myTime: unsupported type %T\", src)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71278746/validate-enum-in-golang-using-gin-framework",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype Enum interface {\n\tIsValid() bool\n}\ntype Status int\nconst (\n\tSingle Status = iota + 1 // add + 1 otherwise validation won't work for 0\n\tMarried\n\tOther\n)\nfunc (s Status) IsValid() bool {\n\tswitch s {\n\tcase Single, Married, Other:\n\t\treturn true\n\t}\n\treturn false\n}\ntype Input struct {\n\tRelationshipStatus Status `json:\"relationship_status\" binding:\"required,enum\"`\n}\nfunc UpdateRelationshipStatus(context *gin.Context) {\n\tinput := Input{}\n\terr := context.ShouldBindJSON(&input)\n\tif err != nil {\n\t\tcontext.JSON(http.StatusBadRequest, gin.H{\"message\": \"enum is not valid\"})\n\t\treturn\n\t}\n\tcontext.JSON(http.StatusOK, gin.H{\"message\": \"correct enum\"})\n}\nfunc ValidateEnum(fl validator.FieldLevel) bool {\n\tvalue := fl.Field().Interface().(Enum)\n\treturn value.IsValid()\n}\nfunc main() {\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\tv.RegisterValidation(\"enum\", ValidateEnum)\n\t}\n\trouter := gin.Default()\n\trouter.POST(\"\", UpdateRelationshipStatus)\n\trouter.Run(\":3000\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71278746/validate-enum-in-golang-using-gin-framework",
    "body": "curl \\\n  --request POST \\\n  --data '{\"relationship_status\": 0}' \\\n  http://localhost:3000/\n# {\"message\":\"enum is not valid\"}\ncurl \\\n  --request POST \\\n  --data '{\"relationship_status\": 1}' \\\n  http://localhost:3000/\n# {\"message\":\"correct enum\"}\ncurl \\\n  --request POST \\\n  --data '{\"relationship_status\": 2}' \\\n  http://localhost:3000/\n# {\"message\":\"correct enum\"}\ncurl \\\n  --request POST \\\n  --data '{\"relationship_status\": 3}' \\\n  http://localhost:3000/\n# {\"message\":\"correct enum\"}\ncurl \\\n  --request POST \\\n  --data '{\"relationship_status\": 4}' \\\n  http://localhost:3000/\n# {\"message\":\"enum is not valid\"}"
  },
  {
    "url": "https://stackoverflow.com/questions/60023789/runtime-cgo-pthread-create-failed-resource-temporarily-unavailable",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os/exec\"\n\t\"time\"\n)\nfunc main() {\n\t// Sleep is used, so we can control how long it runs.\n\tcmd := exec.Command(\"sleep\", \"2\")\n\t// Use a bytes.Buffer to get the output\n\tvar buf bytes.Buffer\n\tcmd.Stdout = &buf\n\tcmd.Start()\n\t// Use a channel to signal completion so we can use a select statement\n\tdone := make(chan error)\n\tgo func() { done <- cmd.Wait() }()\n\t// Start a timer, should be higher for your video conversion,\n    // I suggest you use a value that fits both your videos and server capabilities\n\ttimeout := time.After(2 * time.Second)\n\t// The select statement allows us to execute based on which channel\n\t// we get a message from first.\n\tselect {\n\tcase <-timeout:\n\t\t// Timeout happened first, kill the process and print a message.\n\t\tcmd.Process.Kill()\n\t\tfmt.Println(\"Command timed out\")\n\tcase err := <-done:\n\t\t// Command completed before timeout. Print output and error if it exists.\n\t\tfmt.Println(\"Output:\", buf.String())\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Non-zero exit code:\", err)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60023789/runtime-cgo-pthread-create-failed-resource-temporarily-unavailable",
    "body": "\tffmpeg.Start()\n\tyoutubevideo.Start()\n\tyoutube.Start()\n\tcommands := 3\n\tdone := make(chan error)\n\tgo func() { done <- ffmpeg.Wait() }()\n\tgo func() { done <- youtubevideo.Wait() }()\n\tgo func() { done <- youtube.Wait() }()\n\ttimeout := time.After(1 * time.Hour)\nLoop:\n\tfor {\n\t\tselect {\n\t\tcase <-timeout:\n\t\t\tffmpeg.Process.Kill()\n\t\t\tyoutubevideo.Process.Kill()\n\t\t\tyoutube.Process.Kill()\n\t\t\tlog.Println(\"Conversion timed out\")\n\t\t\tbreak Loop\n\t\tcase err := <-done:\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Non-zero exit code:\", err)\n\t\t\t}\n\t\t\tcommands = commands - 1\n\t\t\tif commands == 0 {\n\t\t\t\tbreak Loop\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/71626957/k8s-operator-listen-to-secret-change-with-event-filter",
    "body": "func (r *vtsReconciler) SetupWithManager(mgr ctrl.Manager) error {\n    manager := ctrl.NewControllerManagedBy(mgr).\n        For(&vts.str, WithPredicates(predicate.Or(predicate.GenerationChangedPredicate{}, predicate.AnnotationChangedPredicate{}))).\n    manager = manager.Watches(&source.Kind{Type: &v1.Secret{}}, handler.EnqueueRequestsFromMapFunc(func(a client.Object) []reconcile.Request {\n        return r.SecretRequests.FindForSecret(a.GetNamespace(), a.GetName())\n    }))\n    return manager.Complete(r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68494658/how-to-mock-a-package-method-in-go",
    "body": "package osutil\nvar PathExists = func(p string) error {\n    // call os and file methods\n    return err\n}\n// Use a mutex to make sure that if you have\n// multiple tests using mockPathExists and running\n// in parallel you avoid the possiblity of a data race.\n//\n// NOTE that the mutex is only useful if *all* of your tests\n// use MockPathExists. If only some do while others don't but\n// still directly or indirectly cause the paths.PathExists\n// function to be invoked then you still can run into a data\n// race problem.\nvar mu sync.Mutex\nfunc MockPathExists(mock func(p string) error) (unmock func()) {\n    mu.Lock()\n    original := PathExists\n    PathExists = mock\n    return func() {\n        PathExists = original\n        mu.Unlock()\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59985676/sending-udp-packets-to-127-0-0-1-with-gopacket",
    "body": "package main\nimport (\n    \"fmt\"\n    \"net\"\n    \"github.com/google/gopacket\"\n    \"github.com/google/gopacket/layers\"\n    \"github.com/google/gopacket/pcap\"\n)\nfunc main() {\n    handle, err := pcap.OpenLive(\"lo0\", 1500, false, pcap.BlockForever)\n    if err != nil {\n        fmt.Printf(\"%s\\n\", err.Error())\n        return\n    }\n    eth := layers.Ethernet{\n        EthernetType: layers.EthernetTypeIPv4,\n        SrcMAC:       net.HardwareAddr{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n        DstMAC:       net.HardwareAddr{0x00, 0x00, 0x00, 0x00, 0x00, 0x00},\n    }\n    _ = eth // Ignore. Use where ethernet interface is used\n    // Used for loopback interface\n    lo := layers.Loopback{\n        Family: layers.ProtocolFamilyIPv4,\n    }\n    ip := layers.IPv4{\n        Version:  4,\n        TTL:      64,\n        SrcIP:    net.IP{127, 0, 0, 1},\n        DstIP:    net.IP{127, 0, 0, 1},\n        Protocol: layers.IPProtocolUDP,\n    }\n    udp := layers.UDP{\n        SrcPort: 62003,\n        DstPort: 9000,\n    }\n    udp.SetNetworkLayerForChecksum(&ip)\n    payload := []byte{'a', 'b', 'c', '\\n'}\n    options := gopacket.SerializeOptions{\n        ComputeChecksums: true,\n        FixLengths:       true,\n    }\n    buffer := gopacket.NewSerializeBuffer()\n    // if err = gopacket.SerializeLayers(buffer, options,\n    //  &eth,\n    //  &ip,\n    //  &udp,\n    //  gopacket.Payload(payload),\n    // ); err != nil {\n    //  fmt.Printf(\"[-] Serialize error: %s\\n\", err.Error())\n    //  return\n    // }\n    if err = gopacket.SerializeLayers(buffer, options,\n        &lo,\n        &ip,\n        &udp,\n        gopacket.Payload(payload),\n    ); err != nil {\n        fmt.Printf(\"[-] Serialize error: %s\\n\", err.Error())\n        return\n    }\n    outgoingPacket := buffer.Bytes()\n    if err = handle.WritePacketData(outgoingPacket); err != nil {\n        fmt.Printf(\"[-] Error while sending: %s\\n\", err.Error())\n        return\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57888588/logging-to-stderr-and-stdout-golang-google-cloud-platform",
    "body": "// Sample stdlogging writes log.Logger logs to the Stackdriver Logging.\npackage main\nimport (\n        \"context\"\n        \"log\"\n        \"cloud.google.com/go/logging\"\n)\nfunc main() {\n        ctx := context.Background()\n        // Sets your Google Cloud Platform project ID.\n        projectID := \"YOUR_PROJECT_ID\"\n        // Creates a client.\n        client, err := logging.NewClient(ctx, projectID)\n        if err != nil {\n                log.Fatalf(\"Failed to create client: %v\", err)\n        }\n        defer client.Close()\n        // Sets the name of the log to write to.\n        logName := \"my-log\"\n        logger := client.Logger(logName).StandardLogger(logging.Info)\n        // Logs \"hello world\", log entry is visible at\n        // Stackdriver Logs.\n        logger.Println(\"hello world\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73071110/go-couchbase-gocb-error-ambiguous-timeout-or-unambiguous-timeout",
    "body": "    cOpts := gocb.ClusterOptions{\n        Authenticator: gocb.PasswordAuthenticator{\n            Username: \"user\",\n            Password: \"pw\",\n        },\n    }\n    cluster, err := gocb.Connect(\"couchbase://my.dev.server.net/\", cOpts)\n    if err != nil {\n        panic(err)\n    }\n    bucketName := \"myBucket\"\n    cluster.Bucket(bucketName)\n    qOpts := gocb.QueryOptions{}\n    // create query\n    queryStr := \"SELECT * FROM myBucket WHERE id = '123456789'\"\n    rows, err := cluster.Query(queryStr, &qOpts)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"rows: %v\\n\", rows)\n    for rows.Next() {\n        var intfc interface{}\n        err = rows.Row(&intfc)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Printf(\"interface result: %v\\n\", intfc)\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/60045968/find-list-of-available-scopes-for-paypal-api",
    "body": "address\nemail\nphone\nprofile\nhttps://uri.paypal.com/payments/payouts\nhttps://uri.paypal.com/services/applications/webhooks\nhttps://uri.paypal.com/services/disputes/read-buyer\nhttps://uri.paypal.com/services/disputes/read-seller\nhttps://uri.paypal.com/services/disputes/update-seller\nhttps://uri.paypal.com/services/expresscheckout\nhttps://uri.paypal.com/services/identity/activities\nhttps://uri.paypal.com/services/identity/grantdelegation\nhttps://uri.paypal.com/services/identity/proxyclient\nhttps://uri.paypal.com/services/invoicing\nhttps://uri.paypal.com/services/payments/payment/authcapture\nhttps://uri.paypal.com/services/payments/realtimepayment\nhttps://uri.paypal.com/services/payments/refund\nhttps://uri.paypal.com/services/paypalattributes/business\nhttps://uri.paypal.com/services/paypalhere\nhttps://uri.paypal.com/services/subscriptions\nhttps://uri.paypal.com/services/reporting/search/read\nhttps://api-m.paypal.com/v1/payments/.*\nhttps://api-m.paypal.com/v1/vault/credit-card\nhttps://api-m.paypal.com/v1/vault/credit-card/.*\nhttps://api.paypal.com/v1/payments/.*\nhttps://api.paypal.com/v1/payments/refund\nhttps://api.paypal.com/v1/payments/sale/.*/refund\nhttps://api.paypal.com/v1/vault/credit-card\nhttps://api.paypal.com/v1/vault/credit-card/.*"
  },
  {
    "url": "https://stackoverflow.com/questions/57998402/how-can-i-convert-my-mgo-sessions-to-mongo-go-driver-clients-using-connection-po",
    "body": "// Database is a meta-helper that allows us to wrap and overload\n// the standard *mongo.Database type\ntype Database struct {\n\t*mongo.Database\n}\n// NewEventualConnection returns a new instantiated Connection\n// to the DB using the 'Nearest' read preference.\n// Per https://github.com/go-mgo/mgo/blob/v2/session.go#L61\n// Eventual is the same as Nearest, but may change servers between reads.\n// Nearest: The driver reads from a member whose network latency falls within\n// the acceptable latency window. Reads in the nearest mode do not consider\n// whether a member is a primary or secondary when routing read operations;\n// primaries and secondaries are treated equivalently.\nfunc NewEventualConnection() (conn *Connection, success bool) {\n\tconn = &Connection{\n\t\tclient: baseConnection.client,\n\t\tdbOptions: options.Database().\n\t\t\tSetReadConcern(readconcern.Local()).\n\t\t\tSetReadPreference(readpref.Nearest()).\n\t\t\tSetWriteConcern(writeconcern.New(\n\t\t\t\twriteconcern.W(1))),\n\t}\n\treturn conn, true\n}\n// GetDB returns an overloaded Database object\nfunc (conn Connection) GetDB(dbname string) *Database {\n\tdbByName := &Database{conn.client.Database(dbname, conn.dbOptions)}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54260189/testify-mocking-a-single-method",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/stretchr/testify/mock\"\n)\ntype userReader interface {\n\tReadUserInfo(int) int\n}\ntype userWriter interface {\n\tWriteUserInfo(int)\n}\ntype UserRepository struct {\n\tuserReader\n\tuserWriter\n}\ntype realRW struct{}\nfunc (db *realRW) ReadUserInfo(i int) int {\n\treturn i\n}\nfunc (db *realRW) WriteUserInfo(i int) {\n\tfmt.Printf(\"put %d to db.\\n\", i)\n}\n// this is mocked struct for test writer.\ntype MyMockedWriter struct {\n\tmock.Mock\n}\nfunc (m *MyMockedWriter) ReadUserInfo(i int) int {\n\targs := m.Called(i)\n\treturn args.Int(0)\n}\nfunc main() {\n\trw := &realRW{}\n\trepo := UserRepository{\n\t\tuserReader: rw,\n\t\tuserWriter: rw,\n\t}\n\tfmt.Println(\"Userinfo is:\", repo.ReadUserInfo(100))\n\trepo.WriteUserInfo(100)\n    // when you want to write test.\n\tfmt.Println(\"Begin test....................\")\n\ttestObj := new(MyMockedWriter)\n\ttestObj.On(\"ReadUserInfo\", 123).Return(250)\n\ttestRepo := UserRepository{\n\t\tuserReader: testObj,\n\t\tuserWriter: rw,\n\t}\n\tfmt.Println(\"Userinfo is:\", testRepo.ReadUserInfo(123))\n\ttestRepo.WriteUserInfo(100)\n}\n// Output:\n// Userinfo is: 100\n// put 100 to db.\n// Begin test....................\n// Userinfo is: 250\n// put 100 to db."
  },
  {
    "url": "https://stackoverflow.com/questions/26378863/golang-package-for-dynamodb-with-map-list-and-json-support",
    "body": "type Record struct {\n    ID     string\n    URLs   []string\n}\n//...\nr := Record{\n    ID:   \"ABC123\",\n    URLs: []string{\n        \"https://example.com/first/link\",\n        \"https://example.com/second/url\",\n    },\n}\nav, err := attributevalue.MarshalMap(r)\nif err != nil {\n    return fmt.Errorf(\"failed to marshal Record, %w\", err)\n}\n_, err = client.PutItem(context.TODO(), &dynamodb.PutItemInput{\n    TableName: aws.String(myTableName),\n    Item:      av,\n})\nif err != nil {\n    return fmt.Errorf(\"failed to put Record, %w\", err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/26378863/golang-package-for-dynamodb-with-map-list-and-json-support",
    "body": "func (e *DB) saveToDynamodb(data map[string]interface{}){\n\tvar vv=make(map[string]*dynamodb.AttributeValue)\n\tfor k,v:=range data{\n\t\tx:=(v.(string))  //assert type as required\n\t\txx:=&(x)\n\t\tvv[k]=&dynamodb.AttributeValue{S: xx,}\n\t}\n\t//s:=data[\"asset_id\"].(string)\n\tparams := &dynamodb.PutItemInput{\n\t\tItem: vv,\n\t\tTableName: aws.String(\"Asset_Data\"), // Required\n\t}\n\tresp, err := e.dynamodb.PutItem(params)\n\tif err != nil {\n\t\t// Print the error, cast err to awserr.Error to get the Code and\n\t\t// Message from an error.\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\t// Pretty-print the response data.\n\tfmt.Println(resp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74635931/convert-dynamodb-json-to-attributevalue-go-object-or-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\ntype Record struct {\n\tItem struct {\n\t\tId struct {\n\t\t\tS string\n\t\t}\n\t\tCreateTime struct {\n\t\t\tN string\n\t\t}\n\t}\n}\nfunc main() {\n\tstr := `{\n  \"Item\": {\n    \"Id\": {\n      \"S\": \"db31\"\n    },\n    \"CreateTime\": {\n      \"N\": \"1647882237618915000\"\n    }\n  }\n}`\n\tvar record Record\n\tif err := json.Unmarshal([]byte(str), &record); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"unmarshal failed: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"%s %s\", record.Item.Id.S, record.Item.CreateTime.N)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66149410/how-to-use-a-trained-binary-file-in-golearn",
    "body": "// Create a new, empty DenseInstances\nnewInst := base.NewDenseInstances()\n// Create some Attributes\nattrs := make([]base.Attribute, 2)\nattrs[0] = new(base.CategoricalAttribute)\nattrs[0].SetName(\"0\")\nattrs[1] = new(base.CategoricalAttribute)\nattrs[1].SetName(\"1\")\n// Add the attributes\nnewSpecs := make([]base.AttributeSpec, len(attrs))\nnewSpecs[0] = newInst.AddAttribute(attrs[0])\nnewSpecs[1] = newInst.AddAttribute(attrs[1])\nnewInst.Extend(4)\nnewInst.Set(newSpecs[0], 0, newSpecs[0].GetAttribute().GetSysValFromString(strings.TrimSpace(\"RoomType\")))\nnewInst.Set(newSpecs[1], 0, newSpecs[1].GetAttribute().GetSysValFromString(strings.TrimSpace(\"HasWater\")))\nnewInst.Set(newSpecs[0], 1, newSpecs[0].GetAttribute().GetSysValFromString(strings.TrimSpace(\"ocean\")))\nnewInst.Set(newSpecs[1], 1, newSpecs[1].GetAttribute().GetSysValFromString(strings.TrimSpace(\"true\")))\nnewInst.Set(newSpecs[0], 2, newSpecs[0].GetAttribute().GetSysValFromString(strings.TrimSpace(\"truck\")))\nnewInst.Set(newSpecs[1], 2, newSpecs[1].GetAttribute().GetSysValFromString(strings.TrimSpace(\"false\")))\nnewInst.Set(newSpecs[0], 3, newSpecs[0].GetAttribute().GetSysValFromString(strings.TrimSpace(\"lake\")))\nnewInst.Set(newSpecs[1], 3, newSpecs[1].GetAttribute().GetSysValFromString(strings.TrimSpace(\"true\")))\npredictions, err := tree.Predict(newInst)"
  },
  {
    "url": "https://stackoverflow.com/questions/66037676/go-reset-a-timer-newtimer-within-select-loop",
    "body": "func main() {\n\teventC := make(chan struct{}, 1)\n\tgo keepaliveLoop(eventC )\n\t// Reset the timer 1000 (approx) times; once every millisecond (approx)\n\t// This should prevent the timer from firing (because that only happens after 2 ms)\n\tfor i := 0; i < 1000; i++ {\n\t\ttime.Sleep(time.Millisecond)\n\t\t// Don't block if there is already a reset request\n\t\tselect {\n\t\tcase eventC <- struct{}{}:\n\t\tdefault:\n\t\t}\n\t}\n}\nfunc keepaliveLoop(eventC chan struct{}) {\n\tto := time.NewTimer(2 * time.Millisecond)\n\tfor {\n\t\tselect {\n\t\tcase <-eventC:\n\t\t\t//if event.Msg == \"heartbeat\"...\n\t\t\ttime.Sleep(3 * time.Millisecond) // Simulate reset work (delay could be partly dur to whatever is triggering the\n\t\t\tto.Reset(2 * time.Millisecond)\n\t\tcase <-to.C:\n\t\t\tpanic(\"this should never happen\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57050660/caching-go-modules-in-codebuild-without-custom-docker-image",
    "body": "version: 0.2\nphases:\n  install:\n    runtime-versions:\n      golang: latest\n    commands:\n      - \"git config --global credential.helper '!aws codecommit credential-helper $@'\"\n      - \"git config --global credential.UseHttpPath true\"\n  build:\n    commands:\n      - 'go mod edit -dropreplace git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/xyz'\n      - 'go mod download'\n      # Use latest from develop for the build (test env only)\n      - 'go get git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/xyz@develop'\n      - 'rm -rf \"dist\"'\n      - 'cp -r \"eb-template\" \"dist\"'\n      - 'env GOOS=linux GOARCH=amd64 go build -o \"dist/bin/server\"'\n      - 'go mod edit -replace git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/xyz=../xyz'\n      - 'echo -n ${CODEBUILD_RESOLVED_SOURCE_VERSION} > dist/commithash'\nartifacts:\n  base-directory: dist\n  files:\n    - '**/*'\ncache:\n  paths:\n    - '/go/pkg/**/*'"
  },
  {
    "url": "https://stackoverflow.com/questions/68322049/does-this-go-method-allocate-new-memory",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"unicode/utf8\"\n)\nfunc main() {\n\tphrase := \"Hello, 世界!\"\n\tfmt.Printf(\"Before reverse:\\tmemory address %p => phrase: %s\\n\", &phrase, phrase)\n\tphrase = string(reverseByRune([]byte(phrase)))\n\tfmt.Printf(\"After reverse:\\tmemory address %p => phrase: %s\\n\", &phrase, phrase)\n}\nfunc reverseByRune(b []byte) []byte {\n\treverse := func (i, j int) {\n\t\tfor ; i < j; i, j = i+1, j-1 {\n\t\t\tb[i], b[j] = b[j], b[i]\n\t\t}\n\t}\n\tfor i := 0; i < len(b); {\n\t\t_, size := utf8.DecodeRune(b[i:])\n\t\treverse(i, i+size-1)\n\t\ti += size\n\t}\n\treverse(0, len(b)-1)\n\treturn b\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68322049/does-this-go-method-allocate-new-memory",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"unicode/utf8\"\n)\nfunc main() {\n\tphrase := []byte(\"Hello, 世界!\")\n\tfmt.Printf(\"Before reverse:\\tmemory address %p => phrase: %s\\n\", &phrase, string(phrase))\n\treverseByRune(phrase)\n\tfmt.Printf(\"After reverse:\\tmemory address %p => phrase: %s\\n\", &phrase, string(phrase))\n}\nfunc reverseByRune(b []byte) {\n\tfor i := 0; i < len(b); {\n\t\t_, size := utf8.DecodeRune(b[i:])\n\t\tfor k, p := i, i+size-1; k < p; k, p = k+1, p-1 {\n\t\t\tb[k], b[p] = b[p], b[k]\n\t\t}\n\t\ti += size\n\t}\n\tfor i, j := 0, len(b)-1; i < j; i, j = i+1, j-1 {\n\t\tb[i], b[j] = b[j], b[i]\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63575989/how-to-specify-schema-for-postgres-in-golang",
    "body": "// transact runs a set of SQL statements in a transaction\nfunc transact(db *sql.DB, schema string) {\n\tfmt.Println(\"transacting for schema:\", schema)\n\t// start a transaction\n\tctx := context.Background()\n\ttx, err := db.BeginTx(ctx, nil)\n\tpanicOnErr(\"tx setup\", err)\n\t// defer a rollback in case anything fails\n\tdefer tx.Rollback()\n\tschemaSet(tx, schema) // set the schema\n\tinserter(tx, \"user1\", 5) // insert some data\n\tinserterQuery(tx, \"user2\", 7) // insert and return data\n\tlister(tx) // list data\n\t// explicit rollback\n\terr = tx.Rollback()\n\tpanicOnErr(\"rollback err\", err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62711694/with-mongo-go-driver-how-do-i-efficiently-retrieve-duplicated-field-name-from-w",
    "body": "res, err := s.events.InsertOne(ctx, document)\nif err != nil {\n    // find out whether we actually have a MongoDB write error\n\tvar write_exc mongo.WriteException\n\tif !errors.As(err, &write_exc) {\n\t\treturn nil, err\n\t}\n    // further dissect the write error:\n\t// E11000 seems to be MongoDB's \"duplicate key error\", a unique\n\t// constraint violation. We now only need to check the index\n    // that prevented the insert, which we do by string matching.\n\tif write_exc.HasErrorCodeWithMessage(11000, \"index: unique_external_uuid_constraint\") {\n\t\treturn nil, events.DuplicateEventUUID\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61157969/go-struct-separation-best-practices",
    "body": "type Station struct {\n\ttypes.GormCol\n\tCompanyID   types.RowID            `gorm:\"not null;unique\" json:\"company_id,omitempty\"`\n\tCompanyName string                 `gorm:\"not null;unique\" json:\"company_name,omitempty\"`\n\tNodeCode    uint64                 `json:\"node_code,omitempty\"`\n\tNodeName    string                 `json:\"node_name,omitempty\"`\n\tKey         string                 `gorm:\"type:text\" json:\"key,omitempty\"`\n\tMachineID   string                 `json:\"machine_id,omitempty\"`\n\tDetail      string                 `json:\"detail,omitempty\"`\n\tError       error                  `sql:\"-\" json:\"user_error,omitempty\"`\n\tExtra       map[string]interface{} `sql:\"-\" json:\"extra_station,omitempty\"`\n}\n// Validate check the type of\nfunc (p *Station) Validate(act action.Action) error {\n\tfieldError := core.NewFieldError(term.Error_in_companys_form)\n\tswitch act {\n\tcase action.Save:\n\t\tif p.CompanyName == \"\" {\n\t\t\tfieldError.Add(term.V_is_required, \"Company Name\", \"company_name\")\n\t\t}\n\t\tif p.CompanyID == 0 {\n\t\t\tfieldError.Add(term.V_is_required, \"Company ID\", \"company_id\")\n\t\t}\n\t}\n\tif fieldError.HasError() {\n\t\treturn fieldError\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56191203/connection-refused-accessing-postgres-container-from-app-container-with-docker",
    "body": "package models\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t_ \"github.com/lib/pq\"\n)\nvar db *sql.DB\n// InitDB initializes a connection to the database.\nfunc InitDB(dataSourceName string) {\n\tvar err error\n\tfmt.Println(\"Initializing database connection . . .\")\n\tfor i := 0; i < 10; i++ {\n\t\tdb, err = sql.Open(\"postgres\", dataSourceName)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Unable to Open DB: %s... Retrying\\n\", err.Error())\n\t\t\ttime.Sleep(time.Second * 2)\n\t\t} else if err = db.Ping(); err != nil {\n\t\t\tfmt.Printf(\"Unable to Ping DB: %s... Retrying\\n\", err.Error())\n\t\t\ttime.Sleep(time.Second * 2)\n\t\t} else {\n\t\t\terr = nil\n\t\t\tbreak\n\t\t}\n\t}\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tfmt.Printf(\"Connection to database successful!\\n\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55258101/net-http-transport-exceeding-maxconnsperhost",
    "body": "Every 3.0s: ss  -tn | grep :8081 | sor...  balmora: Sun Oct 31 12:38:52 2021\nESTAB 0      118                 [::1]:8081               [::1]:43814\nESTAB 0      118                 [::1]:8081               [::1]:43818\nESTAB 0      118                 [::1]:8081               [::1]:43822\nESTAB 0      118                 [::1]:8081               [::1]:43824\nESTAB 0      118                 [::1]:8081               [::1]:43830\nESTAB 0      118                 [::1]:8081               [::1]:43834\nESTAB 0      118                 [::1]:8081               [::1]:43836\nESTAB 0      118                 [::1]:8081               [::1]:43838\nESTAB 0      118                 [::1]:8081               [::1]:43844\n100\n 536182    02:30:03 go run leaky-server.go\n 536269    02:30:03 /tmp/go-build2453595122/b001/exe/leaky-server"
  },
  {
    "url": "https://stackoverflow.com/questions/76612835/is-there-anyway-to-combine-two-generic-model-into-one",
    "body": "type TodoUpdateLogOrRequest struct {\n    ID               uint                   `json:\"id\"`\n    Name             Range[string]          `json:\"name,omitempty\"`\n    Status           Range[string]          `json:\"status,omitempty\"`\n    Desc             Range[json.RawMessage] `json:\"desc,omitempty\"`\n    Priority         Range[string]          `json:\"priority,omitempty\"`\n    EstimatedStartDT Range[time.Time]       `json:\"estimate_start_dt,omitempty\"`\n    EstimatedEndDT   Range[time.Time]       `json:\"estimate_end_dt,omitempty\"`\n    Owners           Range[[]string]        `json:\"owners,omitempty\"`\n    Followers        Range[[]string]        `json:\"followers,omitempty\"`\n}\nfunc main() {\n\tvar updateLog, updateRequest TodoUpdateLogOrRequest\n\tfmt.Println(updateLog, updateRequest)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76612835/is-there-anyway-to-combine-two-generic-model-into-one",
    "body": "type Type[T any] interface {\n\t// some methods implemented by Range[T] and Optional[T]\n    // ...\n}\ntype TodoUpdate struct {\n\tID               uint                  `json:\"id\"`\n\tName             Type[string]          `json:\"name,omitempty\"`\n\tStatus           Type[string]          `json:\"status,omitempty\"`\n\tDesc             Type[json.RawMessage] `json:\"desc,omitempty\"`\n\tPriority         Type[string]          `json:\"priority,omitempty\"`\n\tEstimatedStartDT Type[time.Time]       `json:\"estimate_start_dt,omitempty\"`\n\tEstimatedEndDT   Type[time.Time]       `json:\"estimate_end_dt,omitempty\"`\n\tOwners           Type[[]string]        `json:\"owners,omitempty\"`\n\tFollowers        Type[[]string]        `json:\"followers,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73447383/finding-absolute-path-name-of-a-process-on-macos",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os/exec\"\n\t\"golang.org/x/sys/unix\"\n)\nfunc printPath(pid int32) {\n\tcmd := exec.Command(\"bash\", \"-c\", fmt.Sprintf(\"lsof -p %d -Fn | awk 'NR==5{print}' | sed \\\"s/n\\\\//\\\\//\\\"\", pid))\n\toutput, e := cmd.Output()\n\tif e != nil {\n\t\tfmt.Println(e)\n\t\treturn\n\t}\n\tfmt.Printf(\"%s\", output)\n}\nfunc main() {\n\tkprocs, err := unix.SysctlKinfoProcSlice(\"kern.proc.all\")\n\tif err != nil {\n\t\tfmt.Println(\"error: \", err)\n\t}\n\tfor _, proc := range kprocs {\n\t\tpid := proc.Proc.P_pid\n\t\tfmt.Printf(\"getting for pid %d: \", pid)\n\t\tprintPath(pid)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68964818/how-to-implement-grpc-gateway-mux-handler-to-handle-multiple-http-methods",
    "body": "syntax = \"proto3\";\nimport \"google/api/annotations.proto\";\nimport \"google/api/httpbody.proto\";\nservice SampleService {\n  rpc doSomethingPost (Request) returns (google.api.HttpBody) {\n    option (google.api.http) = {\n      post: \"/doSomething\"\n    };\n  }\n  rpc doSomethingPUT (Request) returns (google.api.HttpBody) {\n    option (google.api.http) = {\n      put: \"/doSomething\"\n    };\n  }\n  rpc doSomethingGet (Request) returns (google.api.HttpBody) {\n    option (google.api.http) = {\n      get: \"/doSomething\"\n    };\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66576981/how-to-copy-array-without-changing-original-array",
    "body": "package main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    // Arrays\n    var array [2]int\n    newArray := array\n    array[0] = 3\n    newArray[1] = 2\n    fmt.Printf(\"Arrays:\\narray: %v\\nnewArray: %v\\n\\n\", array, newArray)\n    // Slices (using copy())\n    slice := make([]int, 2)\n    newSlice := make([]int, len(slice))\n    copy(newSlice, slice)\n    slice[0] = 3\n    newSlice[1] = 2\n    fmt.Printf(\"Slices (different arrays):\\nslice (%p): %v \\nnewSlice (%p): %v\\n\\n\", slice, slice, newSlice, newSlice)\n    // Slices (same underlying array)\n    slice2 := make([]int, 2)\n    newSlice2 := slice2\n    slice2[0] = 3\n    newSlice2[1] = 2\n    fmt.Printf(\"Slices (same array):\\nslice2 (%p): %v \\nnewSlice2 (%p): %v\\n\\n\", slice2, slice2, newSlice2, newSlice2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/44441665/how-to-extract-only-text-from-html-in-golang",
    "body": "\ts := `\n<p>Links:</p><ul><li><a href=\"foo\">Foo</a><li>\n<a href=\"/bar/baz\">BarBaz</a></ul><span>TEXT <b>I</b> WANT</span>\n<script type='text/javascript'>\n/* <![CDATA[ */\nvar post_notif_widget_ajax_obj = {\"ajax_url\":\"http:\\/\\/site.com\\/wp-admin\\/admin-ajax.php\",\"nonce\":\"9b8270e2ef\",\"processing_msg\":\"Processing...\"};\n/* ]]> */\n</script>`\n\tdomDocTest := html.NewTokenizer(strings.NewReader(s))\n\tpreviousStartTokenTest := domDocTest.Token()\nloopDomTest:\n\tfor {\n\t\ttt := domDocTest.Next()\n\t\tswitch {\n\t\tcase tt == html.ErrorToken:\n\t\t\tbreak loopDomTest // End of the document,  done\n\t\tcase tt == html.StartTagToken:\n\t\t\tpreviousStartTokenTest = domDocTest.Token()\n\t\tcase tt == html.TextToken:\n\t\t\tif previousStartTokenTest.Data == \"script\" {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tTxtContent := strings.TrimSpace(html.UnescapeString(string(domDocTest.Text())))\n\t\t\tif len(TxtContent) > 0 {\n\t\t\t\tfmt.Printf(\"%s\\n\", TxtContent)\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/53256373/sending-file-over-ssh-in-go",
    "body": "func SSHCopyFile(srcPath, dstPath string) error {\n\tconfig := &ssh.ClientConfig{\n\t\tUser: \"user\",\n\t\tAuth: []ssh.AuthMethod{\n\t\t\tssh.Password(\"pass\"),\n\t\t},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t}\n\tclient, _ := ssh.Dial(\"tcp\", \"remotehost:22\", config)\n\tdefer client.Close()\n\t// open an SFTP session over an existing ssh connection.\n\tsftp, err := sftp.NewClient(client)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer sftp.Close()\n\t// Open the source file\n\tsrcFile, err := os.Open(srcPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer srcFile.Close()\n\t// Create the destination file\n\tdstFile, err := sftp.Create(dstPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer dstFile.Close()\n\t// write to file\n\tif \t_, err := dstFile.ReadFrom(srcFile); err!= nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54202373/building-go-application-using-confluent-kafka-go-on-linux",
    "body": "FROM ubuntu\n# Install the C lib for kafka\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends apt-utils wget gnupg software-properties-common\nRUN apt-get install -y apt-transport-https ca-certificates\nRUN wget -qO - https://packages.confluent.io/deb/5.1/archive.key | apt-key add -\nRUN add-apt-repository \"deb [arch=amd64] https://packages.confluent.io/deb/5.1 stable main\"\nRUN apt-get update\nRUN apt-get install -y librdkafka-dev\n# Install Go\nRUN add-apt-repository ppa:longsleep/golang-backports\nRUN apt-get update\nRUN apt-get install -y golang-1.11-go\n# build the library\nWORKDIR /go/src/gitlab.appsflyer.com/rantav/kafka-mirror-tester\nCOPY *.go ./\nCOPY // the rest of your go files. You may copy recursive if you want\nCOPY vendor vendor\nRUN GOPATH=/go GOOS=linux /usr/lib/go-1.11/bin/go build -a -o main .\nEXPOSE 8000\nENTRYPOINT [\"./main\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/75361134/how-can-i-get-a-goroutines-runtime-id",
    "body": "package main\nimport (\n    \"bytes\"\n    \"errors\"\n    \"fmt\"\n    \"runtime\"\n    \"strconv\"\n)\nfunc main() {\n    fmt.Println(goid())\n    done := make(chan struct{})\n    go func() {\n        fmt.Println(goid())\n        done <- struct{}{}\n    }()\n    go func() {\n        fmt.Println(goid())\n        done <- struct{}{}\n    }()\n    <-done\n    <-done\n}\nvar (\n    goroutinePrefix = []byte(\"goroutine \")\n    errBadStack     = errors.New(\"invalid runtime.Stack output\")\n)\n// This is terrible, slow, and should never be used.\nfunc goid() (int, error) {\n    buf := make([]byte, 32)\n    n := runtime.Stack(buf, false)\n    buf = buf[:n]\n    // goroutine 1 [running]: ...\n    buf, ok := bytes.CutPrefix(buf, goroutinePrefix)\n    if !ok {\n        return 0, errBadStack\n    }\n    i := bytes.IndexByte(buf, ' ')\n    if i < 0 {\n        return 0, errBadStack\n    }\n    return strconv.Atoi(string(buf[:i]))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/47448666/shutting-down-http-server-after-returning-response",
    "body": "package main\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\thttp.HandleFunc(\"/quit\", func(w http.ResponseWriter, r *http.Request) {\n\t\tio.WriteString(w, \"Bye\\n\")\n\t\tcancel()\n\t})\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tio.WriteString(w, \"Hi\\n\")\n\t})\n\tsrv := &http.Server{Addr: \":8080\"}\n\tgo func() {\n\t\terr := srv.ListenAndServe()\n\t\tif err != http.ErrServerClosed {\n\t\t\tlog.Println(err)\n\t\t}\n\t}()\n\t<-ctx.Done() // wait for the signal to gracefully shutdown the server\n\t// gracefully shutdown the server:\n    // waiting indefinitely for connections to return to idle and then shut down.\n\terr := srv.Shutdown(context.Background())\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tlog.Println(\"done.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/47448666/shutting-down-http-server-after-returning-response",
    "body": "package main\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tio.WriteString(w, \"Hi\\n\")\n\t})\n\thttp.HandleFunc(\"/quit\", func(w http.ResponseWriter, r *http.Request) {\n\t\tio.WriteString(w, \"Bye\\n\")\n\t\tcancel()\n\t})\n\tsrv := &http.Server{Addr: \":8080\"}\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tlog.Printf(\"Httpserver: ListenAndServe() error: %s\", err)\n\t\t}\n\t}()\n\t<-ctx.Done()\n\t// if err := srv.Shutdown(ctx); err != nil && err != context.Canceled {\n\t//\tlog.Println(err)\n\t// }\n\tlog.Println(\"done.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71895937/manually-extracting-opentelemetry-context-from-golang-into-a-string",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n)\nfunc main() {\n\t// common init\n\t// You may also want to set them as globals\n\texp, _ := stdouttrace.New(stdouttrace.WithPrettyPrint())\n\tbsp := sdktrace.NewSimpleSpanProcessor(exp) // You should use batch span processor in prod\n\ttp := sdktrace.NewTracerProvider(\n\t\tsdktrace.WithSampler(sdktrace.AlwaysSample()),\n\t\tsdktrace.WithSpanProcessor(bsp),\n\t)\n\tpropgator := propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{})\n\tctx, span := tp.Tracer(\"foo\").Start(context.Background(), \"parent-span-name\")\n\tdefer span.End()\n\t// Serialize the context into carrier\n\tcarrier := propagation.MapCarrier{}\n\tpropgator.Inject(ctx, carrier)\n\t// This carrier is sent accros the process\n\tfmt.Println(carrier)\n\t// Extract the context and start new span as child\n\t// In your receiving function\n\tparentCtx := propgator.Extract(context.Background(), carrier)\n\t_, childSpan := tp.Tracer(\"foo\").Start(parentCtx, \"child-span-name\")\n\tchildSpan.AddEvent(\"some-dummy-event\")\n\tchildSpan.End()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70599565/how-to-display-text-that-can-be-copied-on-a-fyne-gui",
    "body": "import (\n\t\"time\"\n\t\"fyne.io/fyne/v2\"\n\t\"fyne.io/fyne/v2/app\"\n\t\"fyne.io/fyne/v2/container\"\n\t\"fyne.io/fyne/v2/data/binding\"\n\t\"fyne.io/fyne/v2/layout\"\n\t\"fyne.io/fyne/v2/theme\"\n\t\"fyne.io/fyne/v2/widget\"\n)\nfunc main() {\n\tmyApp := app.New()\n\tmyWindow := myApp.NewWindow(\"demo\")\n\ttxtBound := binding.NewString()\n\ttxtWid := widget.NewLabelWithData(txtBound)\n\tbottomBox := container.NewHBox(\n\t\tlayout.NewSpacer(),\n\t\twidget.NewButtonWithIcon(\"copy content\", theme.ContentCopyIcon(), func() {\n\t\t\tif content, err := txtBound.Get(); err == nil {\n\t\t\t\tmyWindow.Clipboard().SetContent(content)\n\t\t\t}\n\t\t}),\n\t)\n\tcontent := container.NewBorder(nil, bottomBox, nil, nil, txtWid)\n\tgo func() { // make changing content...\n\t\tfor {\n\t\t\ttxtBound.Set(time.Now().Format(\"2006-01-02\\n15:04:05\\nMST -0700\"))\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n\tmyWindow.SetContent(content)\n\tmyWindow.Resize(fyne.NewSize(500, 300))\n\tmyWindow.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70431051/how-can-i-get-keyboard-input-data-in-go",
    "body": "import (\n\t\"fmt\"\n\tterm \"github.com/nsf/termbox-go\"\n)\nfunc main() {\n\terr := term.Init()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer term.Close()\n\tfor {\n\t\tswitch ev := term.PollEvent(); ev.Type {\n\t\tcase term.EventKey:\n\t\t\tswitch ev.Key {\n\t\t\tcase term.KeyEsc:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"ESC pressed\")\n\t\t\tcase term.KeyF1:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"F1 pressed\")\n\t\t\tcase term.KeyInsert:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Insert pressed\")\n\t\t\tcase term.KeyDelete:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Delete pressed\")\n\t\t\tcase term.KeyHome:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Home pressed\")\n\t\t\tcase term.KeyEnd:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"End pressed\")\n\t\t\tcase term.KeyPgup:\n\t\t\t\tterm.Sync()\n\t\t\tcase term.KeyArrowRight:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Arrow Right pressed\")\n\t\t\tcase term.KeySpace:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Space pressed\")\n\t\t\tcase term.KeyBackspace:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Backspace pressed\")\n\t\t\tcase term.KeyEnter:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Enter pressed\")\n\t\t\tcase term.KeyTab:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"Tab pressed\")\n\t\t\tdefault:\n\t\t\t\tterm.Sync()\n\t\t\t\tfmt.Println(\"ASCII : \", ev.Ch)\n\t\t\t}\n\t\tcase term.EventError:\n\t\t\tpanic(ev.Err)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69735525/how-to-verify-jws-transaction-of-app-store-server-api-in-go",
    "body": "func (a *AppStore) extractPublicKeyFromToken(tokenStr string) (*ecdsa.PublicKey, error) {\n\ttokenArr := strings.Split(tokenStr, \".\")\n\theaderByte, err := base64.RawStdEncoding.DecodeString(tokenArr[0])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttype Header struct {\n\t\tAlg string   `json:\"alg\"`\n\t\tX5c []string `json:\"x5c\"`\n\t}\n\tvar header Header\n\terr = json.Unmarshal(headerByte, &header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcertByte, err := base64.StdEncoding.DecodeString(header.X5c[0])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcert, err := x509.ParseCertificate(certByte)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch pk := cert.PublicKey.(type) {\n\tcase *ecdsa.PublicKey:\n\t\treturn pk, nil\n\tdefault:\n\t\treturn nil, errors.New(\"appstore public key must be of type ecdsa.PublicKey\")\n\t}\n}\nfunc (a *AppStore) ExtractClaims(tokenStr string) (*JWSTransaction, error) {\n\ttran := &JWSTransaction{}\n\t_, err := jwt.ParseWithClaims(tokenStr, tran, func(token *jwt.Token) (interface{}, error) {\n\t\treturn a.extractPublicKeyFromToken(tokenStr)\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tran, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69735525/how-to-verify-jws-transaction-of-app-store-server-api-in-go",
    "body": "// Per doc: https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.6\nfunc (a *AppStore) extractPublicKeyFromToken(tokenStr string) (*ecdsa.PublicKey, error) {\n\tcertStr, err := a.extractHeaderByIndex(tokenStr, 0)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcert, err := x509.ParseCertificate(certStr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch pk := cert.PublicKey.(type) {\n\tcase *ecdsa.PublicKey:\n\t\treturn pk, nil\n\tdefault:\n\t\treturn nil, errors.New(\"appstore public key must be of type ecdsa.PublicKey\")\n\t}\n}\nfunc (a *AppStore) extractHeaderByIndex(tokenStr string, index int) ([]byte, error) {\n\tif index > 2 {\n\t\treturn nil, errors.New(\"invalid index\")\n\t}\n\ttokenArr := strings.Split(tokenStr, \".\")\n\theaderByte, err := base64.RawStdEncoding.DecodeString(tokenArr[0])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttype Header struct {\n\t\tAlg string   `json:\"alg\"`\n\t\tX5c []string `json:\"x5c\"`\n\t}\n\tvar header Header\n\terr = json.Unmarshal(headerByte, &header)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcertByte, err := base64.StdEncoding.DecodeString(header.X5c[index])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn certByte, nil\n}\n// rootPEM is from `openssl x509 -inform der -in AppleRootCA-G3.cer -out apple_root.pem`\nconst rootPEM = `\n-----BEGIN CERTIFICATE-----\nMIICQzCCAcmgAwIBAgIILcX8iNLFS5UwCgYIKoZIzj0EAwMwZzEbMBkGA1UEAwwS\nQXBwbGUgUm9vdCBDQSAtIEczMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9u\nIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwHhcN\nMTQwNDMwMTgxOTA2WhcNMzkwNDMwMTgxOTA2WjBnMRswGQYDVQQDDBJBcHBsZSBS\n....\n-----END CERTIFICATE-----\n`\nfunc (a *AppStore) verifyCert(certByte []byte) error {\n\troots := x509.NewCertPool()\n\tok := roots.AppendCertsFromPEM([]byte(rootPEM))\n\tif !ok {\n\t\treturn errors.New(\"failed to parse root certificate\")\n\t}\n\tcert, err := x509.ParseCertificate(certByte)\n\tif err != nil {\n\t\treturn err\n\t}\n\topts := x509.VerifyOptions{\n\t\tRoots: roots,\n\t}\n\tif _, err := cert.Verify(opts); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (a *AppStore) ExtractClaims(tokenStr string) (*JWSTransaction, error) {\n\ttran := &JWSTransaction{}\n\trootCertStr, err := a.extractHeaderByIndex(tokenStr, 2)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err = a.verifyCert(rootCertStr); err != nil {\n\t\treturn nil, err\n\t}\n\t_, err = jwt.ParseWithClaims(tokenStr, tran, func(token *jwt.Token) (interface{}, error) {\n\t\treturn a.extractPublicKeyFromToken(tokenStr)\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tran, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69735525/how-to-verify-jws-transaction-of-app-store-server-api-in-go",
    "body": "func (a *AppStore) verifyCert(certByte, intermediaCertStr []byte) error {\n\troots := x509.NewCertPool()\n\tok := roots.AppendCertsFromPEM([]byte(rootPEM))\n\tif !ok {\n\t\treturn errors.New(\"failed to parse root certificate\")\n\t}\n\tinterCert, err := x509.ParseCertificate(intermediaCertStr)\n\tif err != nil {\n\t\treturn errors.New(\"failed to parse intermedia certificate\")\n\t}\n\tintermedia := x509.NewCertPool()\n\tintermedia.AddCert(interCert)\n\tcert, err := x509.ParseCertificate(certByte)\n\tif err != nil {\n\t\treturn err\n\t}\n\topts := x509.VerifyOptions{\n\t\tRoots:         roots,\n\t\tIntermediates: intermedia,\n\t}\n\tchains, err := cert.Verify(opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, ch := range chains {\n\t\tfor _, c := range ch {\n\t\t\tfmt.Printf(\"%+v, %s, %+v \\n\", c.AuthorityKeyId, c.Subject.Organization, c.ExtKeyUsage)\n\t\t}\n\t}\n\treturn nil\n}\nfunc (a *AppStore) ExtractClaims(tokenStr string) (*JWSTransaction, error) {\n\ttran := &JWSTransaction{}\n\trootCertStr, err := a.extractHeaderByIndex(tokenStr, 2)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tintermediaCertStr, err := a.extractHeaderByIndex(tokenStr, 1)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err = a.verifyCert(rootCertStr, intermediaCertStr); err != nil {\n\t\treturn nil, err\n\t}\n\t_, err = jwt.ParseWithClaims(tokenStr, tran, func(token *jwt.Token) (interface{}, error) {\n\t\treturn a.extractPublicKeyFromToken(tokenStr)\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn tran, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67211875/how-to-get-the-path-to-a-go-module-dependency",
    "body": "> type Module struct {\n>     Path      string       // module path\n>     Version   string       // module version\n>     Versions  []string     // available module versions (with -versions)\n>     Replace   *Module      // replaced by this module\n>     Time      *time.Time   // time version was created\n>     Update    *Module      // available update, if any (with -u)\n>     Main      bool         // is this the main module?\n>     Indirect  bool         // is this module only an indirect dependency of main module?\n>     Dir       string       // directory holding files for this module, if any\n>     GoMod     string       // path to go.mod file for this module, if any\n>     GoVersion string       // go version used in module\n>     Error     *ModuleError // error loading module }\n>\n> type ModuleError struct {\n>     Err string // the error itself\n> }\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/63865962/singularity-3-6-2-installation",
    "body": "sudo apt-get update && \\\nsudo apt-get install -y build-essential \\\nlibseccomp-dev pkg-config squashfs-tools cryptsetup\nsudo rm -r /usr/local/go\nexport VERSION=1.13.15 OS=linux ARCH=amd64  # change this as you need\nwget -O /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz https://dl.google.com/go/go${VERSION}.${OS}-${ARCH}.tar.gz && \\\nsudo tar -C /usr/local -xzf /tmp/go${VERSION}.${OS}-${ARCH}.tar.gz\necho 'export GOPATH=${HOME}/go' >> ~/.bashrc && \\\necho 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \\\nsource ~/.bashrc\ncurl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh |\nsh -s -- -b $(go env GOPATH)/bin v1.21.0\nmkdir -p ${GOPATH}/src/github.com/sylabs && \\\ncd ${GOPATH}/src/github.com/sylabs && \\\ngit clone https://github.com/sylabs/singularity.git && \\\ncd singularity\ngit checkout v3.6.3\ncd ${GOPATH}/src/github.com/sylabs/singularity && \\\n./mconfig && \\\ncd ./builddir && \\\nmake && \\\nsudo make install\nsingularity version"
  },
  {
    "url": "https://stackoverflow.com/questions/55127143/how-to-connect-to-a-mlab-mongodb-database-in-golang",
    "body": "// Configure a Client with SCRAM authentication (https://docs.mongodb.com/manual/core/security-scram/).\n// The default authentication database for SCRAM is \"admin\". This can be configured via the\n// authSource query parameter in the URI or the AuthSource field in the options.Credential struct.\n// SCRAM is the default auth mechanism so specifying a mechanism is not required.\n// To configure auth via URI instead of a Credential, use\n// \"mongodb://user:password@localhost:27017\".\ncredential := options.Credential{\n\tUsername: \"user\",\n\tPassword: \"password\",\n}\nclientOpts := options.Client().ApplyURI(\"mongodb://localhost:27017\").SetAuth(credential)\nclient, err := mongo.Connect(context.TODO(), clientOpts)\nif err != nil {\n\tlog.Fatal(err)\n}\n_ = client"
  },
  {
    "url": "https://stackoverflow.com/questions/77838958/go-validate-access-token-keycloak",
    "body": "func JWTMiddleware(jwkSet map[string]*rsa.PublicKey) func(http.Handler) http.Handler {\n\treturn func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tauthHeader := r.Header.Get(\"Authorization\")\n\t\t\tif authHeader == \"\" {\n\t\t\t\thttp.Error(w, \"Authorization header is required\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttokenString := strings.TrimPrefix(authHeader, \"Bearer \")\n\t\t\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\t\t\tif _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n\t\t\t\t}\n\t\t\t\talg := token.Method.Alg()\n\t\t\t\tpublicKey, ok := jwkSet[alg]\n\t\t\t\tif !ok {\n\t\t\t\t\treturn nil, fmt.Errorf(\"no key found for signing method: %v\", alg)\n\t\t\t\t}\n\t\t\t\treturn publicKey, nil\n\t\t\t})\n\n\t\t\tif err != nil || !token.Valid {\n\t\t\t\thttp.Error(w, \"Invalid token\", http.StatusUnauthorized)\n\t\t\t\treturn\n\t\t\t}\n            // Other checks, ISS, Aud, Expirey, etc ...\n            // If needed, store the user principal\n            // and other relevant info the request context\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71714228/go-exec-commandcontext-is-not-being-terminated-after-context-timeout",
    "body": "type Cmd struct {\n\tctx context.Context\n\tterminated chan struct{}\n\t*exec.Cmd\n}\n// NewCommand is like exec.CommandContext but ensures that subprocesses\n// are killed when the context times out, not just the top level process.\nfunc NewCommand(ctx context.Context, command string, args ...string) *Cmd {\n\treturn &Cmd{\n\t\tctx:        ctx,\n\t\tterminated: make(chan struct{}),\n\t\tCmd:        exec.Command(command, args...),\n\t}\n}\nfunc (c *Cmd) Start() error {\n\t// Force-enable setpgid bit so that we can kill child processes when the\n\t// context times out or is canceled.\n\tif c.Cmd.SysProcAttr == nil {\n\t\tc.Cmd.SysProcAttr = &syscall.SysProcAttr{}\n\t}\n\tc.Cmd.SysProcAttr.Setpgid = true\n\terr := c.Cmd.Start()\n\tif err != nil {\n\t\treturn err\n\t}\n\tgo func() {\n\t\tselect {\n\t\tcase <-c.terminated:\n\t\t\treturn\n\t\tcase <-c.ctx.Done():\n\t\t}\n\t\tp := c.Cmd.Process\n\t\tif p == nil {\n\t\t\treturn\n\t\t}\n\t\t// Kill by negative PID to kill the process group, which includes\n\t\t// the top-level process we spawned as well as any subprocesses\n\t\t// it spawned.\n\t\t_ = syscall.Kill(-p.Pid, syscall.SIGKILL)\n\t}()\n\treturn nil\n}\nfunc (c *Cmd) Run() error {\n\tif err := c.Start(); err != nil {\n\t\treturn err\n\t}\n\treturn c.Wait()\n}\nfunc (c *Cmd) Wait() error {\n\tdefer close(c.terminated)\n\treturn c.Cmd.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71714228/go-exec-commandcontext-is-not-being-terminated-after-context-timeout",
    "body": "// KillProcessTree kills an entire process tree using SIGKILL.\nfunc KillProcessTree(pid int) error {\n  // Send SIGSTOP to prevent new children from being spawned\n  _ = syscall.Signal(pid, syscall.SIGSTOP)\n  // TODO: implement ChildProcesses\n  for _, c := range ChildProcesses(pid) {\n    _ = KillProcessTree(c.Pid)\n  }\n  // Now that the process is stopped and all descendants\n  // are guaranteed to be killed, we can safely SIGKILL\n  // this process, without worrying about descendant\n  // processes being reparented to pid 1 or anything\n  // like that.\n  _ = syscall.Signal(pid, syscall.SIGKILL)\n  return nil // TODO: better error handling :)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67625752/how-to-use-a-certificate-from-a-certificate-store-and-run-tls-in-gin-framework-i",
    "body": "cert := &x509.Certificate{\n\t\tSerialNumber: big.NewInt(1658),\n\t\tSubject: pkix.Name{\n\t\t\tOrganization:  []string{\"ORGANIZATION_NAME\"},\n\t\t\tCountry:       []string{\"COUNTRY_CODE\"},\n\t\t\tProvince:      []string{\"PROVINCE\"},\n\t\t\tLocality:      []string{\"CITY\"},\n\t\t\tStreetAddress: []string{\"ADDRESS\"},\n\t\t\tPostalCode:    []string{\"POSTAL_CODE\"},\n\t\t},\n\t\tNotBefore:    time.Now(),\n\t\tNotAfter:     time.Now().AddDate(10, 0, 0),\n\t\tSubjectKeyId: []byte{1, 2, 3, 4, 6},\n\t\tExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth, x509.ExtKeyUsageServerAuth},\n\t\tKeyUsage:     x509.KeyUsageDigitalSignature,\n\t}\n\tpriv, _ := rsa.GenerateKey(rand.Reader, 2048)\n\tpub := &priv.PublicKey\n\t// Sign the certificate\n\tcertificate, _ := x509.CreateCertificate(rand.Reader, cert, cert, pub, priv)\n\tcertBytes := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: certificate})\n\tkeyBytes := pem.EncodeToMemory(&pem.Block{Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(priv)})\n\t// Generate a key pair from your pem-encoded cert and key ([]byte).\n\tx509Cert, _ := tls.X509KeyPair(certBytes, keyBytes)\n\ttlsConfig := &tls.Config{\n\t\t\tCertificates: []tls.Certificate{x509Cert}}\n\tserver := http.Server{Addr: \":3000\", Handler: router, TLSConfig: tlsConfig}\n    glog.Fatal(server.ListenAndServeTLS(\"\",\"\"))"
  },
  {
    "url": "https://stackoverflow.com/questions/65357752/how-should-i-reference-two-tables-with-a-single-foreign-key",
    "body": "var rows []struct {\n\tRelation\n\tCustomer Customer `gorm:\"embedded;embeddedPrefix:cust_\"`\n\tCompany  Company  `gorm:\"embedded;embeddedPrefix:comp_\"`\n}\ndb.Select(`\n\t\trelations.*,\n\t\tcustomers.id AS cust_id,\n\t\tcustomers.title AS cust_title,\n\t\tcompanies.id AS comp_id,\n\t\tcompanies.title AS comp_title\n\t`).\n\tModel(&Relation{}).\n\tJoins(\"LEFT JOIN customers ON relations.owner_id = customers.id AND relations.owner_type = 'customers'\").\n\tJoins(\"LEFT JOIN companies ON relations.owner_id = companies.id AND relations.owner_type = 'companies'\").\n\tFind(&rows)\n// now rows[i].Relation is filled, and rows[i].Customer or rows[i].Company\n// are non-zero depending on rows[i].Relation.OwnerType"
  },
  {
    "url": "https://stackoverflow.com/questions/64613455/unable-to-load-in-cluster-configuration-kubernetes-service-host-and-kubernetes",
    "body": "//go run main.go\npackage main\nimport (\n\t\"os\"\n\t\"os/signal\"\n  //\"context\"\n\t\"flag\"\n\t//\"fmt\"\n\t\"path/filepath\"\n\t//\"time\"\n\t\"github.com/sirupsen/logrus\"\n\tv1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/dynamic/dynamicinformer\"\n\t//\"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n  \"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n  //kubeconfig := os.Getenv(\"KUBECONFIG\")\n\n  var kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\n\tcfg, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tlogrus.WithError(err).Fatal(\"could not get config\")\n\t}\n\t// Grab a dynamic interface that we can create informers from\n\tdc, err := dynamic.NewForConfig(cfg)\n\tif err != nil {\n\t\tlogrus.WithError(err).Fatal(\"could not generate dynamic client for config\")\n\t}\n\t// Create a factory object that we can say \"hey, I need to watch this resource\"\n\t// and it will give us back an informer for it\n\tf := dynamicinformer.NewFilteredDynamicSharedInformerFactory(dc, 0, v1.NamespaceAll, nil)\n\t// Retrieve a \"GroupVersionResource\" type that we need when generating our informer from our dynamic factory\n\tgvr, _ := schema.ParseResourceArg(\"deployments.v1.apps\")\n\t// Finally, create our informer for deployments!\n\ti := f.ForResource(*gvr)\n\tstopCh := make(chan struct{})\n\tgo startWatching(stopCh, i.Informer())\n\tsigCh := make(chan os.Signal, 0)\n\tsignal.Notify(sigCh, os.Kill, os.Interrupt)\n\t<-sigCh\n\tclose(stopCh)\n}\nfunc startWatching(stopCh <-chan struct{}, s cache.SharedIndexInformer) {\n\thandlers := cache.ResourceEventHandlerFuncs{\n\t\tAddFunc: func(obj interface{}) {\n\t\t\tu := obj.(*unstructured.Unstructured)\n\t\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\t\"name\":      u.GetName(),\n\t\t\t\t\"namespace\": u.GetNamespace(),\n\t\t\t\t\"labels\":    u.GetLabels(),\n\t\t\t}).Info(\"received add event!\")\n\t\t},\n\t\tUpdateFunc: func(oldObj, obj interface{}) {\n\t\t\tlogrus.Info(\"received update event!\")\n\t\t},\n\t\tDeleteFunc: func(obj interface{}) {\n\t\t\tlogrus.Info(\"received update event!\")\n\t\t},\n\t}\n\ts.AddEventHandler(handlers)\n\ts.Run(stopCh)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54476651/go-method-on-value-and-method-on-pointers-whats-the-difference",
    "body": "// method - test\npackage main\nimport (\n\t\"fmt\"\n\t\"math\"\n)\ntype Vertex struct {\n\tx float64\n\ty float64\n}\n// abs, with pointer caller,\nfunc (v *Vertex) AbsPointer() float64 {\n\treturn math.Sqrt(v.x*v.x + v.y*v.y)\n}\n// scale, with pointer caller,\nfunc (v *Vertex) ScalePointer(f float64) *Vertex {\n\tv.x = v.x * f\n\tv.y = v.y * f\n\treturn v\n}\n// abs, with value caller,\nfunc (v Vertex) AbsValue() float64 {\n\treturn math.Sqrt(v.x*v.x + v.y*v.y)\n}\n// test - method with pointer caller,\nfunc pointerCallerLearn() {\n\tvt := Vertex{3, 4}\n\tfmt.Printf(\"Abs of %v is %v. (Call %s method, with %s)\\n\", vt, vt.AbsPointer(), \"pointer\", \"value\")        // call pointer method, with value,\n\tfmt.Printf(\"Abs of %v is %v. (Call %s method, with %s)\\n\\n\", vt, (&vt).AbsPointer(), \"pointer\", \"pointer\") // call pointer method, with pointer,\n\t// scala, change original caller,\n\tfmt.Printf(\"%v scale by 10 is: %v (Call %s method, with %s)\\n\", vt, vt.ScalePointer(10), \"pointer\", \"value\")      // call pointer method, with value,\n\tfmt.Printf(\"%v scale by 10 is: %v (Call %s method, with %s)\\n\", vt, (&vt).ScalePointer(10), \"pointer\", \"pointer\") // call pointer method, with pointer,\n}\n// test - method with value caller,\nfunc valueCallerLearn() {\n\tvt := Vertex{3, 4}\n\tfmt.Printf(\"Abs of %v is %v. (Call %s method, with %s)\\n\", vt, (&vt).AbsValue(), \"value\", \"pointer\") // call value method, with pointer,\n\tfmt.Printf(\"Abs of %v is %v. (Call %s method, with %s)\\n\", vt, vt.AbsValue(), \"value\", \"value\")      // call value method, with value,\n}\nfunc main() {\n\t// pointerCallerLearn()\n\tvalueCallerLearn()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71865034/use-go-ast-to-get-surrounding-function-name-from-position",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tusage()\n\t}\n\tloc := strings.Split(os.Args[1], \":\")\n\tif len(loc) != 2 {\n\t\tusage()\n\t}\n\tfilePath := loc[0]\n\tlineStr := loc[1]\n\ttargetLine, err := strconv.Atoi(lineStr)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tusage()\n\t}\n\tf, err := os.Open(filePath)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tusage()\n\t}\n\tdefer f.Close()\n\tlineScanner := bufio.NewScanner(f)\n\tline := 0\n\tvar lastFunc string\n\tfor lineScanner.Scan() {\n\t\tm := funcName.FindStringSubmatch(lineScanner.Text())\n\t\tif len(m) > 0 {\n\t\t\tlastFunc = m[1]\n\t\t}\n\t\tif line == targetLine {\n\t\t\tfmt.Println(lastFunc)\n\t\t\treturn\n\t\t}\n\t\tline++\n\t}\n}\nfunc usage() {\n\tfmt.Fprintf(os.Stderr, \"Usage: %s {file:line}\\n\", os.Args[0])\n\tos.Exit(1)\n}\n// Look for a func followed by anything and ending at a `(` or ` `(space).\nvar funcName = regexp.MustCompile(`func ([^ (]+)`)"
  },
  {
    "url": "https://stackoverflow.com/questions/71865034/use-go-ast-to-get-surrounding-function-name-from-position",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"go/ast\"\n\t\"go/parser\"\n\t\"go/token\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tusage()\n\t}\n\tvar pos token.Position\n\tloc := strings.Split(os.Args[1], \":\")\n\tif len(loc) >= 2 {\n\t\tpos.Filename = loc[0]\n\t\tline, err := strconv.Atoi(loc[1])\n\t\tif err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t\tusage()\n\t\t}\n\t\tpos.Line = line\n\t} else {\n\t\tusage()\n\t}\n\tif len(loc) >= 3 {\n\t\tcol, err := strconv.Atoi(loc[2])\n\t\tif err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t\tusage()\n\t\t}\n\t\tpos.Column = col\n\t}\n\tfile, err := os.Open(pos.Filename)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tusage()\n\t}\n\tfset := token.NewFileSet()\n\tf, err := parser.ParseFile(fset, \"\", file, 0)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tusage()\n\t}\n\tvar lastFunc *ast.FuncDecl\n\tast.Inspect(f, func(n ast.Node) bool {\n\t\tif n == nil {\n\t\t\treturn false\n\t\t}\n\t\t// Store the most specific function declaration\n\t\tif funcDecl, ok := n.(*ast.FuncDecl); ok {\n\t\t\tlastFunc = funcDecl\n\t\t}\n\t\tstart := fset.Position(n.Pos())\n\t\tend := fset.Position(n.End())\n\t\t// Don't traverse nodes which don't contain the target line\n\t\tif start.Line > pos.Line || end.Line < pos.Line {\n\t\t\treturn false\n\t\t}\n\t\t// If node starts and stops on the same line\n\t\tif start.Line == pos.Line && end.Line == pos.Line {\n\t\t\t// Don't traverse nodes which don't contain the target column\n\t\t\tif start.Column > pos.Column || end.Column < pos.Column {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\t// Note, the very last node to be traversed is our target node\n\t\treturn true\n\t})\n\tif lastFunc != nil {\n\t\tfmt.Println(lastFunc.Name.String())\n\t}\n}\nfunc usage() {\n\tfmt.Fprintf(os.Stderr, \"Usage: %s {file:line:column}\\n\", os.Args[0])\n\tos.Exit(1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69762108/implementing-ethereum-personal-sign-eip-191-from-go-ethereum-gives-different-s",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/ethereum/go-ethereum/common\"\n    \"github.com/ethereum/go-ethereum/crypto\"\n\t\"encoding/hex\"\n\t\"encoding/json\"\n\t\"log\"\n)\nfunc signHash(data []byte) common.Hash {\n    msg := fmt.Sprintf(\"\\x19Ethereum Signed Message:\\n%d%s\", len(data), data)\n    return crypto.Keccak256Hash([]byte(msg))\n}\nfunc main() {\n\thexPrivateKey := \"8da4ef21b864d2cc526dbdb2a120bd2874c36c9d0a1fb7f8c63d7f7a8b41de8f\"\n\tdataMap := map[string]string{\"data1\":\"value1\",\"data2\":\"value2\"}\n    dataToSign, _ := json.Marshal(dataMap)\n\tprivateKey, err := crypto.HexToECDSA(hexPrivateKey)\n\tif err != nil {\n    \t\tlog.Fatal(err)\n\t}\n\tdataHash := crypto.Keccak256Hash(dataToSign) //0x8d218fc37d2fd952b2d115046b786b787e44d105cccf156882a2e74ad993ee13\n\tsignHash := signHash(dataHash.Bytes())\n\tsignatureBytes, err := crypto.Sign(signHash.Bytes(), privateKey)\n\tif err != nil {\n    \t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(\"0x\" + hex.EncodeToString(signatureBytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69299894/how-to-do-unit-testing-with-gorm",
    "body": "func TestSomeHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/some-endpoint\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(SomeHandler)\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/69299894/how-to-do-unit-testing-with-gorm",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\nfunc TestGetAllJobs(t *testing.T) {\n\t// Initialize the DB\n\tinitDB(\"test111\")\n\treq, err := http.NewRequest(\"GET\", \"/GetAllJobs\", nil)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\trr := httptest.NewRecorder()\n\thandler := http.HandlerFunc(GetAllJobs)\n\thandler.ServeHTTP(rr, req)\n\t// Check the status code is what we expect.\n\tif status := rr.Code; status != http.StatusOK {\n\t\tt.Errorf(\"handler returned wrong status code: got %v want %v\",\n\t\t\tstatus, http.StatusOK)\n\t}\n\tvar response []Jobs\n\tif err := json.Unmarshal(rr.Body.Bytes(), &response); err != nil {\n\t\tt.Errorf(\"got invalid response, expected list of jobs, got: %v\", rr.Body.String())\n\t}\n\tif len(response) < 1 {\n\t\tt.Errorf(\"expected at least 1 job, got %v\", len(response))\n\t}\n\tfor _, job := range response {\n\t\tif job.SourcePath == \"\" {\n\t\t\tt.Errorf(\"expected job id %d to  have a source path, was empty\", job.JobID)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63658002/is-it-possible-to-wrap-logrus-logger-functions-without-losing-the-line-number-pr",
    "body": "package mylog\nimport (\n\t\"fmt\"\n\t\"github.com/Sirupsen/logrus\"\n\t\"runtime\"\n\t\"strings\"\n)\nvar logger = logrus.New()\nfunc SetLogFormatter(formatter logrus.Formatter) {\n\tlogger.Formatter = formatter\n}\n// Info logs a message at level Info on the standard logger.\nfunc Info(args ...interface{}) {\n\tif logger.Level >= logrus.InfoLevel {\n\t\tentry := logger.WithFields(logrus.Fields{})\n\t\tentry.Data[\"file\"] = fileInfo(2)\n\t\tentry.Info(args...)\n\t}\n}\nfunc fileInfo(skip int) string {\n\t_, file, line, ok := runtime.Caller(skip)\n\tif !ok {\n\t\tfile = \"<???>\"\n\t\tline = 1\n\t} else {\n\t\tslash := strings.LastIndex(file, \"/\")\n\t\tif slash >= 0 {\n\t\t\tfile = file[slash+1:]\n\t\t}\n\t}\n\treturn fmt.Sprintf(\"%s:%d\", file, line)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62453446/scroll-to-selected-row-in-gtklistbox",
    "body": "func ListBoxScrollToSelected(listBox *gtk.ListBox) {\n\t// If there's selection\n\tif row := listBox.GetSelectedRow(); row != nil {\n\t\t// Convert the row's Y coordinate into the list box's coordinate\n\t\tif _, y, _ := row.TranslateCoordinates(listBox, 0, 0); y >= 0 {\n\t\t\t// Scroll the vertical adjustment to center the row in the viewport\n\t\t\tif adj := listBox.GetAdjustment(); adj != nil {\n\t\t\t\t_, rowHeight := row.GetPreferredHeight()\n\t\t\t\tadj.SetValue(float64(y) - (adj.GetPageSize()-float64(rowHeight))/2)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76469783/proto-cannot-parse-invalid-wire-format-data",
    "body": "// The types in here indicate how protobuf-net represents certain types when using protobuf-net specific\n// library features. Note that it is not *required* to use any of these types, and cross-platform code\n// should usually avoid them completely (ideally starting from a .proto schema)\n// Some of these are ugly, sorry. The TimeSpan / DateTime dates here pre-date the introduction of Timestamp\n// and Duration, and the \"well known\" types should be preferred when possible. Guids are particularly\n// awkward - it turns out that there are multiple guid representations, and I accidentally used one that\n// I can only call... \"crazy-endian\". Just make sure you check the order!\n// It should not be necessary to use bcl.proto from code that uses protobuf-net\nsyntax = \"proto3\";\noption csharp_namespace = \"ProtoBuf.Bcl\";\noption go_package = \"./protos\";\npackage bcl;\nmessage TimeSpan {\n  sint64 value = 1; // the size of the timespan (in units of the selected scale)\n  TimeSpanScale scale = 2; // the scale of the timespan [default = DAYS]\n  enum TimeSpanScale {\n    DAYS = 0;\n    HOURS = 1;\n    MINUTES = 2;\n    SECONDS = 3;\n    MILLISECONDS = 4;\n\tTICKS = 5;\n    MINMAX = 15; // dubious\n  }\n}\nmessage DateTime {\n  sint64 value = 1; // the offset (in units of the selected scale) from 1970/01/01\n  TimeSpanScale scale = 2; // the scale of the timespan [default = DAYS]\n  DateTimeKind kind = 3; // the kind of date/time being represented [default = UNSPECIFIED]\n  enum TimeSpanScale {\n    DAYS = 0;\n    HOURS = 1;\n    MINUTES = 2;\n    SECONDS = 3;\n    MILLISECONDS = 4;\n\tTICKS = 5;\n    MINMAX = 15; // dubious\n  }\n  enum DateTimeKind\n  {\n     // The time represented is not specified as either local time or Coordinated Universal Time (UTC).\n     UNSPECIFIED = 0;\n     // The time represented is UTC.\n     UTC = 1;\n     // The time represented is local time.\n     LOCAL = 2;\n   }\n}\nmessage NetObjectProxy {\n  int32 existingObjectKey = 1; // for a tracked object, the key of the **first** time this object was seen\n  int32 newObjectKey = 2; // for a tracked object, a **new** key, the first time this object is seen\n  int32 existingTypeKey = 3; // for dynamic typing, the key of the **first** time this type was seen\n  int32 newTypeKey = 4; // for dynamic typing, a **new** key, the first time this type is seen\n  string typeName = 8; // for dynamic typing, the name of the type (only present along with newTypeKey)\n  bytes payload = 10; // the new string/value (only present along with newObjectKey)\n}\nmessage Guid {\n  fixed64 lo = 1; // the first 8 bytes of the guid (note:crazy-endian)\n  fixed64 hi = 2; // the second 8 bytes of the guid (note:crazy-endian)\n}\nmessage Decimal {\n  uint64 lo = 1; // the first 64 bits of the underlying value\n  uint32 hi = 2; // the last 32 bis of the underlying value\n  uint32 signScale = 3; // the number of decimal digits (bits 1-16), and the sign (bit 0)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76469783/proto-cannot-parse-invalid-wire-format-data",
    "body": "syntax = \"proto3\";\npackage execution;\noption go_package = \"./protos\";\nimport \"bcl.proto\";\nenum OrderStatus {\n  Working = 0;\n  Rejected = 1;\n  Cancelled = 2;\n  Completed = 3;\n}\nenum OrderType {\n  Limit = 0;\n  Market = 1;\n  StopLimit = 2;\n  StopMarket = 3;\n}\nenum OrderSide {\n  Buy = 0;\n  Sell = 1;\n}\nenum RejectReason {\n  NoRejection = 0;\n  InstrumentNotFound = 1;\n  OrderNotFound = 2;\n  InvalidOrderType = 3;\n  InvalidAccount = 4;\n  InvalidSide = 5;\n  InvalidAmount = 6;\n  InvalidLimitPrice = 7;\n  InvalidQuoteLimit = 8;\n  InvalidActivationPrice = 9;\n  InvalidTimeInForce = 10;\n  MarketHalted = 11;\n  MarketPaused = 12;\n  NoCounterOrders = 13;\n  MissingExpirationTime = 14;\n  IncorrectExpirationTime = 15;\n  InternalError = 16;\n  IllegalStatusSwitch = 17;\n  OrderAlreadyExists = 18;\n  InstrumentNotReady = 19;\n  ExternalSystemError = 20;\n}\nenum ReportCause {\n  NONE = 0;\n  NewOrder = 1;\n  CancelOrder = 2;\n  MassCancel = 3;\n  Expiration = 4;\n  Trigger = 5;\n  MarketStatusChange = 6;\n}\nenum TimeInForce {\n  GoodTillCancel = 0;\n  ImmediateOrCancel = 1;\n  FillOrKill = 2;\n}\nenum CancelReason {\n  NotCancelled = 0;\n  CancelledByTrader = 1;\n  CancelledBySystem = 2;\n  SelfMatchPrevention = 3;\n  OrderTimeInForce = 4;\n  Liquidation = 100;\n}\nmessage TradeData {\n  int64 TradeId = 1;\n  bcl.Decimal Amount = 4;\n  bcl.Decimal ExecutionPrice = 5;\n  OrderStatus OrderStatus = 7;\n  int64 AccountId = 11;\n  bcl.Guid MatchedOrderExternalId = 14;\n  int64 MatchedOrderId = 16;\n  bcl.Decimal RemainingAmount = 17;\n}\nmessage Execution {\n  bytes Origin = 4;\n  OrderSide Side = 7;\n  bcl.Decimal RequestedPrice = 8;\n  bcl.Decimal RequestedAmount = 9;\n  bcl.Decimal RemainingAmount = 10;\n  int64 ExecutedAt = 13;\n  OrderStatus OrderStatus = 14;\n  repeated TradeData Trades = 16;\n  OrderType OrderType = 20;\n  int64 Version = 22;\n  int64 AccountId = 23;\n  RejectReason RejectReason = 25;\n  ReportCause ReportCause = 26;\n  bcl.Guid InstructionId = 27;\n  bcl.Guid ExternalOrderId = 28;\n  int32 ExecutionEngineMarketId = 29;\n  int64 OrderId = 30;\n  CancelReason CancelReason = 31;\n  int64 TxId = 32;\n  TimeInForce TimeInForce = 34;\n  string CancelledBy = 35;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76469783/proto-cannot-parse-invalid-wire-format-data",
    "body": "package main\nimport (\n\t\"encoding/binary\"\n\t\"log\"\n\t\"google.golang.org/protobuf/proto\"\n\t\"mymodule.local/protos\"\n)\nfunc main() {\n\tdata := []byte{5, 85, 0, 0, 0, 56, 1, 66, 3, 8, 144, 78, 74, 2, 8, 1, 82, 2, 8, 1, 104, 197, 192, 132, 194, 159, 143, 219, 237, 8, 176, 1, 25, 184, 1, 11, 208, 1, 1, 218, 1, 18, 9, 133, 66, 138, 247, 239, 67, 93, 77, 17, 176, 192, 189, 75, 170, 203, 186, 145, 226, 1, 18, 9, 133, 66, 138, 247, 239, 67, 93, 77, 17, 176, 192, 189, 75, 170, 203, 186, 145, 232, 1, 1, 240, 1, 25, 128, 2, 25}\n\tif len(data) < 5 {\n\t\tlog.Fatal(\"data should contain at least 5 bytes\")\n\t}\n\tmessageType := data[0]\n\tlength := binary.LittleEndian.Uint32(data[1:5])\n\tdata = data[5:]\n\tif length != uint32(len(data)) {\n\t\tlog.Fatalf(\"invalid data length: %d\", length)\n\t}\n\texecution := &protos.Execution{}\n\terr := proto.Unmarshal(data, execution)\n\tif err != nil {\n\t\tlog.Fatalf(\"Err unmarshalling!: %v\", err)\n\t}\n\tlog.Printf(\"message type: %d, message: %+v\", messageType, execution)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73678238/how-to-add-set-header-after-next-in-golang-echo-middleware",
    "body": "// ExecTime is the middleware function.\nfunc (s *Stats) ExecTime(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tbefore := time.Now()\n\t\tc.Response().Header().Set(\"ExecutionStartedAt\", before.String())\n\t\tc.Response().Before(func() {\n\t\t\tafter := time.Now()\n\t\t\telapsed := time.Since(before)\n\t\t\tc.Response().Header().Set(\"ExecutionDoneAt\", after.String())\n\t\t\tc.Response().Header().Set(\"ExecutionTime\", elapsed.String())\n\t\t})\n\t\tif err := next(c); err != nil { //exec main process\n\t\t\tc.Error(err)\n\t\t}\n\t\treturn nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60284441/how-to-make-sure-code-has-no-data-races-in-go",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"time\"\n)\ntype cacheItem struct {\n\tdata      string\n\texpire_at time.Time\n}\ntype stringCache struct {\n\tm   map[string]cacheItem\n\texp time.Duration\n}\nfunc (sc *stringCache) Get(key string) (string, bool) {\n\tif item, ok := sc.m[key]; !ok {\n\t\treturn \"\", false\n\t} else {\n\t\treturn item.data, true\n\t}\n}\nfunc (sc *stringCache) Put(key, data string) {\n\tsc.m[key] = cacheItem{\n\t\tdata:      data,\n\t\texpire_at: time.Now().Add(sc.exp),\n\t}\n}\nfunc NewStringCache(d time.Duration) *stringCache {\n\treturn &stringCache{\n\t\tm:   make(map[string]cacheItem),\n\t\texp: d,\n\t}\n}\nfunc TestStringCache(t *testing.T) {\n\tcache := NewStringCache(time.Minute)\n\tch := make(chan struct{})\n\tgo func() {\n\t\tcache.Put(\"here\", \"this\")\n\t\tclose(ch)\n\t}()\n\t_, _ = cache.Get(\"here\")\n\t<-ch\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60284441/how-to-make-sure-code-has-no-data-races-in-go",
    "body": "tmp$ go test -race -c -o sc_test ./sc_test.go\ntmp$ ./sc_test\n==================\nWARNING: DATA RACE\nWrite at 0x00c00009e270 by goroutine 8:\n  runtime.mapassign_faststr()\n      /home/kostix/devel/golang-1.13.6/src/runtime/map_faststr.go:202 +0x0\n  command-line-arguments.(*stringCache).Put()\n      /home/kostix/tmp/sc_test.go:27 +0x144\n  command-line-arguments.TestStringCache.func1()\n      /home/kostix/tmp/sc_test.go:46 +0x62\nPrevious read at 0x00c00009e270 by goroutine 7:\n  runtime.mapaccess2_faststr()\n      /home/kostix/devel/golang-1.13.6/src/runtime/map_faststr.go:107 +0x0\n  command-line-arguments.TestStringCache()\n      /home/kostix/tmp/sc_test.go:19 +0x125\n  testing.tRunner()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:909 +0x199\nGoroutine 8 (running) created at:\n  command-line-arguments.TestStringCache()\n      /home/kostix/tmp/sc_test.go:45 +0xe4\n  testing.tRunner()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:909 +0x199\nGoroutine 7 (running) created at:\n  testing.(*T).Run()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:960 +0x651\n  testing.runTests.func1()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:1202 +0xa6\n  testing.tRunner()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:909 +0x199\n  testing.runTests()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:1200 +0x521\n  testing.(*M).Run()\n      /home/kostix/devel/golang-1.13.6/src/testing/testing.go:1117 +0x2ff\n  main.main()\n      _testmain.go:44 +0x223\n==================\n--- FAIL: TestStringCache (0.00s)\n    testing.go:853: race detected during execution of test\nFAIL"
  },
  {
    "url": "https://stackoverflow.com/questions/55308878/attempting-to-convert-some-code-to-go-cdk-when-using-kms",
    "body": "import (\n    \"context\"\n    \"io\"\n    \"cloud.google.com/go/storage\"\n    \"gocloud.dev/blob\"\n    _ \"gocloud.dev/blob/gcsblob\" // link in \"gs://\" URLs\n)\nfunc upload(ctx context.Context, bucket, keyName, path string, reader io.Reader) error {\n    bucket, err := blob.OpenBucket(ctx, \"gs://\" + bucket)\n    if err != nil {\n        return err\n    }\n    defer bucket.Close()\n    writeCtx, cancelWrite := context.WithCancel(ctx)\n    defer cancelWrite()\n    writer, err := bucket.NewWriter(writeCtx, path, &blob.WriterOptions{\n        // Use BeforeWrite to set provider-specific properties.\n        BeforeWrite: func(asFunc func(interface{}) bool) error {\n            var gcsWriter *storage.Writer\n            // asFunc returns true if the writer can be converted to the type\n            // pointed to.\n            if asFunc(&gcsWriter) {\n                gcsWriter.KMSKeyName = keyName\n            }\n            return nil\n        },\n    })\n    if err != nil {\n        return err\n    }\n    if _, err := io.Copy(writer, reader); err != nil {\n        cancelWrite()  // Abort the write to the bucket.\n        writer.Close()\n        return err\n    }\n    if err := writer.Close(); err != nil {\n        return err\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74681745/windows-terminal-minimizes-instead-of-hiding-when-using-sw-hide",
    "body": "import ctypes\nimport win32.lib.win32con as win32con\nimport win32gui # pip install pywin32\nfrom time import sleep\nkernel32 = ctypes.WinDLL('kernel32')\nuser32 = ctypes.WinDLL('user32')\na = input('Input value here:')\n# get the console window\nhWnd = kernel32.GetConsoleWindow()\n# set it as foreground\nwin32gui.SetForegroundWindow(hWnd)\n# get the foreground window\nhWnd = win32gui.GetForegroundWindow()\n# hide it\nwin32gui.ShowWindow(hWnd, win32con.SW_HIDE)\nprint(\"I'm hidden!\")\nsleep(2)\n# show again\nwin32gui.ShowWindow(hWnd, win32con.SW_SHOW)\nprint(\"I'm not hidden anymore!\")"
  },
  {
    "url": "https://stackoverflow.com/questions/74148348/modifying-metadata-on-go-grpc-server-streaming-interceptor",
    "body": "type serverStreamWrapper struct {\n\tss  grpc.ServerStream\n\tctx context.Context\n}\nfunc (w serverStreamWrapper) Context() context.Context        { return w.ctx }\nfunc (w serverStreamWrapper) RecvMsg(msg interface{}) error   { return w.ss.RecvMsg(msg) }\nfunc (w serverStreamWrapper) SendMsg(msg interface{}) error   { return w.ss.SendMsg(msg) }\nfunc (w serverStreamWrapper) SendHeader(md metadata.MD) error { return w.ss.SendHeader(md) }\nfunc (w serverStreamWrapper) SetHeader(md metadata.MD) error  { return w.ss.SetHeader(md) }\nfunc (w serverStreamWrapper) SetTrailer(md metadata.MD)       { w.ss.SetTrailer(md) }\nfunc UserIDInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\tmd, ok := metadata.FromIncomingContext(ss.Context())\n\tif ok {\n\t\tmd.Append(\"X-User-Id\", \"real_user_id\")\n\t}\n\tnewCtx := metadata.NewIncomingContext(ss.Context(), md)\n\treturn handler(srv, serverStreamWrapper{ss, newCtx})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74148348/modifying-metadata-on-go-grpc-server-streaming-interceptor",
    "body": "type wrappedStream struct {\n\tgrpc.ServerStream\n\tctx context.Context\n}\nfunc (w *wrappedStream) Context() context.Context {\n\treturn w.ctx\n}\nfunc (w *wrappedStream) SetContext(ctx context.Context) {\n\tw.ctx = ctx\n}\nfunc (w *wrappedStream) RecvMsg(m interface{}) error {\n\treturn w.ServerStream.RecvMsg(m)\n}\nfunc (w *wrappedStream) SendMsg(m interface{}) error {\n\treturn w.ServerStream.SendMsg(m)\n}\ntype StreamContextWrapper interface {\n\tgrpc.ServerStream\n\tSetContext(context.Context)\n}\nfunc newStreamContextWrapper(ss grpc.ServerStream) StreamContextWrapper {\n\tctx := ss.Context()\n\treturn &wrappedStream{\n\t\tss,\n\t\tctx,\n\t}\n}\nfunc UserIDInterceptor(srv interface{}, ss grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\tmd, ok := metadata.FromIncomingContext(ss.Context())\n\tif ok {\n\t\tmd.Append(\"X-User-Id\", \"real_user_id\")\n\t}\n\tnewCtx := metadata.NewIncomingContext(ss.Context(), md)\n\tsw := newStreamContextWrapper(ss)\n\tsw.SetContext(newCtx)\n\treturn handler(srv, sw)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72313698/custom-unmarshaling-a-struct-into-a-map-of-slices",
    "body": "func (r *OHLC_RESS) UnmarshalJSON(d []byte) error {\n    // first, decode just the object's keys and leave\n    // the values as raw, non-decoded JSON\n\tvar obj map[string]json.RawMessage\n\tif err := json.Unmarshal(d, &obj); err != nil {\n\t\treturn err\n\t}\n    // next, look up the \"last\" element's raw, non-decoded value\n    // and, if it is present, then decode it into the Last field\n\tif last, ok := obj[\"last\"]; ok {\n\t\tif err := json.Unmarshal(last, &r.Last); err != nil {\n\t\t\treturn err\n\t\t}\n        // remove the element so it's not in\n        // the way when decoding the rest below\n\t\tdelete(obj, \"last\")\n\t}\n    // finally, decode the rest of the element values\n    // in the object and store them in the Pair field\n\tr.Pair = make(map[string][]Candles, len(obj))\n\tfor key, val := range obj {\n\t\tcc := []Candles{}\n\t\tif err := json.Unmarshal(val, &cc); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tr.Pair[key] = cc\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69744248/how-to-write-scan-for-custom-type-in-postgresql-column-in-go",
    "body": "type Artists []Artist\nfunc (a *Artists) Scan(value interface{}) error {\n\tsource, ok := value.(string) // input example 👉🏻 {\"(david,38,url,1)\",\"(david2,2,\\\"url 2\\\",2)\"}\n\tif !ok {\n\t\treturn errors.New(\"incompatible type\")\n\t}\n\n\tvar res Artists\n\tartists := strings.Split(source, \"\\\",\\\"\")\n\tfor _, artist := range artists {\n\t\tfor _, old := range []string{\"\\\\\\\"\",\"\\\"\",\"{\", \"}\",\"(\",\")\"} {\n\t\t\tartist = strings.ReplaceAll(artist, old, \"\")\n\t\t}\n\t\tartistRawData := strings.Split(artist, \",\")\n\t\ti, err := strconv.Atoi(artistRawData[1])\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"parce ArtistRank raw data (%s) in %d iteration error: %v\", artist, i, err)\n\t\t}\n\t\tres = append(res, Artist{\n\t\t\tArtistName:     artistRawData[0],\n\t\t\tArtistId:       artistRawData[1],\n\t\t\tArtistImageURL: artistRawData[2],\n\t\t\tArtistRank:     i,\n\t\t})\n\t}\n\t*a = res\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67585093/is-there-a-way-to-intercept-go-function",
    "body": "package main\nimport \"fmt\"\ntype Foo struct{}\nfunc (foo Foo) f1(a int) {\n\tfmt.Printf(\"f1: %v\\n\", a)\n}\nfunc (foo Foo) f2(a, b int) {\n\tfmt.Printf(\"f2: %v, %v\\n\", a, b)\n}\nfunc (foo Foo) f3(a, b, c int) int {\n\tfmt.Printf(\"f3: %v, %v, %v\\n\", a, b, c)\n\treturn a + b + c\n}\nfunc Wrap(f func()) {\n\tfmt.Printf(\"preCall\\n\")\n\tf()\n\tfmt.Printf(\"postCall\\n\")\n}\nfunc main() {\n\tf := Foo{}\n\tvar res int\n\tWrap(func() { f.f1(1) })\n\tWrap(func() { f.f2(1, 2) })\n\tWrap(func() { res = f.f3(1, 2, 3) })\n\tfmt.Printf(\"res of f3: %v\\n\", res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59767267/access-to-a-remote-docker-repository-using-go",
    "body": "import (\n\t\"github.com/docker/distribution/registry/client\"\n\t\"github.com/docker/distribution/registry/client/auth\"\n\t\"github.com/docker/distribution/registry/client/auth/challenge\"\n\t\"github.com/docker/distribution/registry/client/transport\"\n)\n\ntype regCredentialStore struct {\n\tusername      string\n\tpassword      string\n\trefreshTokens map[string]string\n}\nfunc (tcs *regCredentialStore) Basic(*url.URL) (string, string) {\n\treturn tcs.username, tcs.password\n}\nfunc (tcs *regCredentialStore) RefreshToken(u *url.URL, service string) string {\n\treturn tcs.refreshTokens[service]\n}\nfunc (tcs *regCredentialStore) SetRefreshToken(u *url.URL, service string, token string) {\n\tif tcs.refreshTokens != nil {\n\t\ttcs.refreshTokens[service] = token\n\t}\n}\nfunc main() {\n\tcreds := &regCredentialStore{username: \"user\", password: \"pwd\"}\n\tchallengeManager := challenge.NewSimpleManager()\n    _, err = ping(challengeManager, \"https://registry-1.docker.io/v2/\", \"\")\n\tif err != nil {\n        .... exit .....\n    }\n\ttransport1 := transport.NewTransport(\n\t\tnil, auth.NewAuthorizer(challengeManager, auth.NewBasicHandler(creds)))\n\treg, err := client.NewRegistry(\"https://registry-1.docker.io/\", transport1)\n    ...\n}\nfunc ping(manager challenge.Manager, endpoint, versionHeader string) ([]auth.APIVersion, error) {\n\tresp, err := http.Get(endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif err := manager.AddResponse(resp); err != nil {\n\t\treturn nil, err\n\t}\n\treturn auth.APIVersions(resp, versionHeader), err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54244749/sending-a-gui-tui-over-a-socket-connection",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\tui \"github.com/gizak/termui\"\n\t\"github.com/kr/pty\"\n)\nvar termuiFlag = flag.Bool(\"termui\", false, \"run a termui example\")\nfunc main() {\n\tflag.Parse()\n\tvar err error\n\tif *termuiFlag {\n\t\terr = runTermui()\n\t} else {\n\t\terr = runServer()\n\t}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n// runTermui runs the termui \"Hello World\" example.\nfunc runTermui() error {\n\tif err := ui.Init(); err != nil {\n\t\treturn err\n\t}\n\tdefer ui.Close()\n\tp := ui.NewParagraph(\"Hello World!\")\n\tp.Width = 25\n\tp.Height = 5\n\tui.Render(p)\n\tfor e := range ui.PollEvents() {\n\t\tif e.Type == ui.KeyboardEvent {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}\n// runServer listens for TCP connections on a random port and connects\n// remote clients to a local PTY running the termui example.\nfunc runServer() error {\n\tln, err := net.Listen(\"tcp\", \"127.0.0.1:0\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer ln.Close()\n\tlog.Printf(\"Listening for requests on %v\", ln.Addr())\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"Connecting remote client %v to termui\", conn.RemoteAddr())\n\t\tgo connectTermui(conn)\n\t}\n}\n// connectTermui connects a client connection to a termui process running in a\n// PTY.\nfunc connectTermui(conn net.Conn) {\n\tdefer func() {\n\t\tlog.Printf(\"Closing remote client %v\", conn.RemoteAddr())\n\t\tconn.Close()\n\t}()\n\tt, err := pty.StartWithSize(\n\t\texec.Command(os.Args[0], \"--termui\"),\n\t\t&pty.Winsize{Cols: 80, Rows: 24},\n\t)\n\tif err != nil {\n\t\tlog.Printf(\"Error starting termui: %v\", err)\n\t\treturn\n\t}\n\tdefer t.Close()\n\tgo io.Copy(t, conn)\n\tio.Copy(conn, t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74261141/k8s-controller-watch-other-controller-cr",
    "body": "func (r *InternalReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n\t_ = log.FromContext(ctx)\n\tinternal := examplev1.Internal{}\n\tif err := r.Get(context.TODO(), types.NamespacedName{\n\t\tName:      req.Name,\n\t\tNamespace: req.Namespace,\n\t}, &internal); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\texternal := otherv2.External{}\n\tif err := r.Get(context.TODO(), types.NamespacedName{\n        // note how the name is taken from the internal spec\n\t\tName:      internal.Spec.ExternalResource,\n\t\tNamespace: req.Namespace,\n\t}, &internal); err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n\t// do something with internal and external here\n\treturn ctrl.Result{}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74261141/k8s-controller-watch-other-controller-cr",
    "body": "func (r *InternalReconciler) triggerReconcileBecauseExternalHasChanged(o client.Object) []reconcile.Request {\n\tusedByInternals := &examplev1.InternalList{}\n\tlistOps := &client.ListOptions{\n\t\tFieldSelector: fields.OneTermEqualSelector(\".spec.ExternalResource\", o.GetName()),\n\t\tNamespace:     o.GetNamespace(),\n\t}\n\terr := r.List(context.TODO(), usedByInternals, listOps)\n\tif err != nil {\n\t\treturn []reconcile.Request{}\n\t}\n\trequests := make([]reconcile.Request, len(usedByInternals.Items))\n\tfor i, item := range usedByInternals.Items {\n\t\trequests[i] = reconcile.Request{\n\t\t\tNamespacedName: types.NamespacedName{\n\t\t\t\tName:      item.GetName(),\n\t\t\t\tNamespace: item.GetNamespace(),\n\t\t\t},\n\t\t}\n\t}\n\treturn requests\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74261141/k8s-controller-watch-other-controller-cr",
    "body": "func (r *ExternalReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n _ = log.FromContext(ctx)\n // note, we can use the internal object here as long as the external object\n // does contain the same fields we want. That means when unmarshalling the extra\n // fields are dropped. If this cannot be done, you could first unmarshal into the external\n // resource and then assign the fields you need to the internal one, before passing it down\n obj := demov1.Internal{}\n if err := r.Get(ctx, req.NamespacedName, &obj); err != nil {\n  return ctrl.Result{}, err\n }\n return sharedLogic(r, &obj)\n}\nfunc (r *ExternalReconciler) SetupWithManager(mgr ctrl.Manager) error {\n return ctrl.NewControllerManagedBy(mgr).\n // note the external resource is imported from another project\n // you may be able to watch this without import by creating a minimal\n // type with the right GKV\n  For(otherv2.External{}).\n  Complete(r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69297989/import-proto-files-from-another-project",
    "body": "proto_out_dir=.\nGOBIN=~/go/bin\nprotoc \\\n      --go_out \"${proto_out_dir}\" \\\n      --go_opt paths=source_relative \\\n      --go-grpc_out \"${proto_out_dir}\" \\\n      --go-grpc_opt require_unimplemented_servers=false,paths=source_relative \\\n      --plugin protoc-gen-go=\"${GOBIN}/protoc-gen-go\" \\\n      --plugin protoc-gen-go-grpc=\"${GOBIN}/protoc-gen-go-grpc\" \\\n--go-grpc_opt=paths=source_relative \\\n--proto_path=../protoc-gen-validate \\\n--proto_path=../api-common-protos \\\n--proto_path=../clutch \\\n--proto_path=../clutch/api \\\n--proto_path=. \\\njob.proto"
  },
  {
    "url": "https://stackoverflow.com/questions/65363974/how-to-validate-a-belongs-to-relationship-when-creating-record-with-gorm",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\t\"github.com/stretchr/testify/require\"\n)\nvar inJSON = `{\n    \"Person\": {\n\t\t\"FirstName\": \"Test\"\n    },\n    \"RoleID\": 1\n}`\nfunc TestGORM(t *testing.T) {\n\trequire := require.New(t)\n\trequire.NoError(DB.Migrator().DropTable(&Employee{}, &EmployeeRole{}))\n\trequire.NoError(DB.Migrator().AutoMigrate(&Employee{}, &EmployeeRole{}))\n\temp := Employee{}\n\tjson.Unmarshal([]byte(inJSON), &emp)\n\t// create the role to simulate that it exists\n\trole := EmployeeRole{PrivateGormModel{ID: 1}, \"Test\"}\n\trequire.NoError(DB.Create(&role).Error)\n\t// avoid re-saving emp.Role\n\trequire.NoError(DB.Omit(\"Role\").Create(&emp).Error)\n\t// if instead the RoleID doesn't exist\n\temp.RoleID = 5\n\trequire.Error(DB.Create(&emp).Error)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64089074/exiting-forever-loop-using-channels-issues-with-go-playground",
    "body": "func main() {\n\tch := make(chan int)\n\tquit := make(chan bool)\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo produce(ch, quit, &wg)\n\tgo consume(ch, &wg)\n\ttime.Sleep(50 * time.Microsecond)\n\tfmt.Println(\"CLOSE\")\n\tclose(quit)\n\twg.Wait()\n}\nfunc produce(ch chan int, quit chan bool, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor i := 0; ; i++ {\n\t\tselect {\n\t\tcase <-quit:\n\t\t\tclose(ch)\n\t\t\tfmt.Println(\"exit\")\n\t\t\treturn\n\t\tcase ch <- i:\n\t\t\tfmt.Println(\"Producer sends\", i)\n\t\t}\n\t}\n}\nfunc consume(ch chan int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\n\tfor i := range ch {\n\t\tfmt.Println(\"Consumer receives\", i)\n\t\ttime.Sleep(time.Microsecond)\n\t}\n\n\tfmt.Println(\"exit consumer\")\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55993819/reading-midi-input-from-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"gitlab.com/gomidi/midi\"\n\t. \"gitlab.com/gomidi/midi/midimessage/channel\" // (Channel Messages)\n\t\"gitlab.com/gomidi/midi/reader\"\n\t\"gitlab.com/gomidi/rtmididrv\"\n)\n// This example reads from the first input port\nfunc main() {\n\tdrv, err := rtmididrv.New()\n\tmust(err)\n\t// make sure to close the driver at the end\n\tdefer drv.Close()\n\tins, err := drv.Ins()\n\tmust(err)\n\t// takes the first input\n\tin := ins[0]\n\tfmt.Printf(\"opening MIDI Port %v\\n\", in)\n\tmust(in.Open())\n\tdefer in.Close()\n\t// to disable logging, pass mid.NoLogger() as option\n\trd := reader.New(\n\t\treader.NoLogger(),\n\t\t// print every message\n\t\treader.Each(func(pos *reader.Position, msg midi.Message) {\n\t\t\t// inspect\n\t\t\tfmt.Println(msg)\n\t\t\tswitch v := msg.(type) {\n\t\t\tcase NoteOn:\n\t\t\t\tfmt.Printf(\"NoteOn at channel %v: key: %v velocity: %v\\n\", v.Channel(), v.Key(), v.Velocity())\n\t\t\tcase NoteOff:\n\t\t\t\tfmt.Printf(\"NoteOff at channel %v: key: %v\\n\", v.Channel(), v.Key())\n\t\t\t}\n\t\t}),\n\t)\n\t// listen for MIDI\n\terr = rd.ListenTo(in)\n\tmust(err)\n\ttime.Sleep(10 * time.Second)\n\terr = in.StopListening()\n\tmust(err)\n\tfmt.Printf(\"closing MIDI Port %v\\n\", in)\n}\nfunc must(err error) {\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76193188/request-context-deadline-exceeded",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n\t\"golang.org/x/exp/slices\"\n)\nfunc GetUserGroupsByUsername(ctx context.Context, db *pgxpool.Pool, userGroups ...string) (bool, error) {\n\trows, err := db.Query(ctx, \"values ('g1'),('g2')\")\n\tif err != nil {\n\t\tlog.Println(\"Query failed at GetUserGroupsByUsername:\", err)\n\t\treturn false, err\n\t}\n\t// uncomment the next line to address the issue.\n\t// defer rows.Close()\n\tvar userGroup string\n\tfor rows.Next() {\n\t\tif err = rows.Scan(&userGroup); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t\tif slices.Contains(userGroups, userGroup) {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\tlog.Println(\"error:\", rows.Err())\n\treturn true, nil\n}\nfunc main() {\n\tconnString := \"postgres://username:password@localhost:5432/dbname\"\n\tpool, err := pgxpool.New(context.Background(), connString)\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to connect to database: %v\\n\", err)\n\t}\n\tdefer pool.Close()\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tfor i := 0; i < 10; i++ {\n\t\tlog.Println(GetUserGroupsByUsername(ctx, pool, \"g1\"))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76193188/request-context-deadline-exceeded",
    "body": "2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:33 true <nil>\n2023/05/08 09:10:34 Query failed at GetUserGroupsByUsername: context deadline exceeded\n2023/05/08 09:10:34 false context deadline exceeded\n2023/05/08 09:10:34 Query failed at GetUserGroupsByUsername: context deadline exceeded\n2023/05/08 09:10:34 false context deadline exceeded\n^Csignal: interrupt"
  },
  {
    "url": "https://stackoverflow.com/questions/76096551/how-to-get-wav-audio-from-a-microphone-in-go",
    "body": "// Create an in-memory file to support io.WriteSeeker needed for NewEncoder which is needed for finalizing headers.\n\tinMemoryFilename := \"in-memory-output.wav\"\n\tinMemoryFile, err := fs.Create(inMemoryFilename)\n\tdbg(err)\n\t// We will call Close ourselves.\n\t// Convert audio data to IntBuffer\n\tinputBuffer := &audio.IntBuffer{Data: intData, Format: &audio.Format{SampleRate: iSampleRate, NumChannels: iNumChannels}}\n\t// Create a new WAV wavEncoder\n\tbitDepth := 16\n\taudioFormat := 1\n\twavEncoder := wav.NewEncoder(inMemoryFile, iSampleRate, bitDepth, iNumChannels, audioFormat)"
  },
  {
    "url": "https://stackoverflow.com/questions/69412331/how-to-add-keyusage-to-certificate-signing-request-in-golang",
    "body": "func marshalKeyUsage(ku x509.KeyUsage) (pkix.Extension, error) {\n\text := pkix.Extension{Id: asn1.ObjectIdentifier{2, 5, 29, 15}, Critical: true}\n\tvar a [2]byte\n\ta[0] = reverseBitsInAByte(byte(ku))\n\ta[1] = reverseBitsInAByte(byte(ku >> 8))\n\tl := 1\n\tif a[1] != 0 {\n\t\tl = 2\n\t}\n\tbitString := a[:l]\n\tvar err error\n\text.Value, err = asn1.Marshal(asn1.BitString{Bytes: bitString, BitLength: asn1BitLength(bitString)})\n\tif err != nil {\n\t\treturn ext, err\n\t}\n\treturn ext, nil\n}\nfunc reverseBitsInAByte(in byte) byte {\n\tb1 := in>>4 | in<<4\n\tb2 := b1>>2&0x33 | b1<<2&0xcc\n\tb3 := b2>>1&0x55 | b2<<1&0xaa\n\treturn b3\n}\nfunc asn1BitLength(bitString []byte) int {\n\tbitLen := len(bitString) * 8\n\tfor i := range bitString {\n\t\tb := bitString[len(bitString)-i-1]\n\t\tfor bit := uint(0); bit < 8; bit++ {\n\t\t\tif (b>>bit)&1 == 1 {\n\t\t\t\treturn bitLen\n\t\t\t}\n\t\t\tbitLen--\n\t\t}\n\t}\n\treturn 0\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69072757/receiving-inconsistent-data-in-go-api",
    "body": "package p\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\ts \"strings\"\n\t\"time\"\n\t\"cloud.google.com/go/firestore\"\n\t\"google.golang.org/api/iterator\"\n)\nvar ctx context.Context\nvar client *firestore.Client\nfunc PublicApi(w http.ResponseWriter, r *http.Request) {\n\tpath := s.Replace(r.URL.Path, \"/\", \"\", -1)\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\tw.Header().Set(\"Access-Control-Allow-Headers\", \"*\")\n\tnewFsConfigBytes, _ := json.Marshal(getPublicDTO(path))\n\tw.Write(newFsConfigBytes)\n}\nfunc getPublicDTO(path string) (publicDTO publicDTO) {\n\tctx = context.Background()\n\tclient = createClient()\n\tprofile, id := getProfiles(path)\n\tpublicDTO.Profile = profile\n\tpublicDTO.MilestoneDTOS = getMilestone(id)\n\treturn\n}\nfunc getProfiles(link string) (profile, string) {\n\tvar retVal profile\n\tvar id string\n\titer := client.Collection(\"profile\").Where(\"publicUrl\", \"==\", link).Documents(ctx)\n\tfor {\n\t\tdoc, err := iter.Next()\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tid = doc.Ref.ID\n\t\tb, _ := json.Marshal(doc.Data())\n\t\tjson.Unmarshal(b, &retVal)\n\t}\n\treturn retVal, id\n}\nfunc getMilestone(id string) []milestoneDTOS {\n\tvar retVal []milestoneDTOS\n\titer := client.Collection(\"milestone\").Where(\"userId\", \"==\", id).Documents(ctx)\n\tfor {\n\t\tvar milestoneDTO milestoneDTOS\n\t\tdoc, err := iter.Next()\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tb, _ := json.Marshal(doc.Data())\n\t\terr = json.Unmarshal(b, &milestoneDTO)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tretVal = append(retVal, milestoneDTO)\n\t}\n\treturn retVal\n}\nfunc createClient() *firestore.Client {\n\tprojectID := \"app_id_asda\"\n\tclient, err := firestore.NewClient(ctx, projectID)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create client: %v\", err)\n\t}\n\treturn client\n}\ntype profile struct {\n\tAddress          string    `json:\"address\"`\n\tCity             string    `json:\"city\"`\n\tCountry          string    `json:\"country\"`\n\tCoverPic         string    `json:\"coverPic\"`\n\tCreatedBy        string    `json:\"createdBy\"`\n\tCreatedDate      int       `json:\"createdDate\"`\n\tDescription      string    `json:\"description\"`\n\tDob              int64     `json:\"dob\"`\n\tEmail            string    `json:\"email\"`\n\tEnabled          bool      `json:\"enabled\"`\n\tExperience       int       `json:\"experience\"`\n\tFirstName        string    `json:\"firstName\"`\n\tFullName         string    `json:\"fullName\"`\n\tFullNameNoSpace  string    `json:\"fullNameNoSpace\"`\n\tImageURL         string    `json:\"imageUrl\"`\n\tInterests        []string  `json:\"interests\"`\n\tIsEnabled        bool      `json:\"isEnabled\"`\n\tLanguage         string    `json:\"language\"`\n\tLastModifiedDate int       `json:\"lastModifiedDate\"`\n\tLastName         string    `json:\"lastName\"`\n\tLatLng           string    `json:\"latLng\"`\n\tMemberFrom       time.Time `json:\"memberFrom\"`\n\tObjectID         string    `json:\"objectID\"`\n\tOrganization     string    `json:\"organization\"`\n\tPhoneNumber      string    `json:\"phoneNumber\"`\n\tPlanID           string    `json:\"planId\"`\n\tPublicURL        string    `json:\"publicUrl\"`\n\tReputation       int       `json:\"reputation\"`\n\tSetup            int       `json:\"setup\"`\n\tSocial           string    `json:\"social\"`\n\tState            string    `json:\"state\"`\n\tStatus           string    `json:\"status\"`\n\tTitle            string    `json:\"title\"`\n\tWebsite          string    `json:\"website\"`\n}\ntype milestoneDTOS struct {\n\tCategory          string    `json:\"category\"`\n\tCreatedBy         string    `json:\"createdBy\"`\n\tCreatedDate       int       `json:\"createdDate\"`\n\tDescription       string    `json:\"description\"`\n\tEnabled           bool      `json:\"enabled\"`\n\tEndDate           time.Time `json:\"endDate\"`\n\tIsCurrentPosition bool      `json:\"isCurrentPosition\"`\n\tIsEnabled         bool      `json:\"isEnabled\"`\n\tLastModifiedBy    time.Time `json:\"lastModifiedBy\"`\n\tLastModifiedDate  int       `json:\"lastModifiedDate\"`\n\tObjectID          string    `json:\"objectID\"`\n\tOrganization      string    `json:\"organization\"`\n\tPictureURL        string    `json:\"pictureURL\"`\n\tProfile           string    `json:\"profile\"`\n\tScore             float64   `json:\"score\"`\n\tStartDate         time.Time `json:\"startDate\"`\n\tTags              []string  `json:\"tags\"`\n\tTitle             string    `json:\"title\"`\n\tURL               string    `json:\"url\"`\n\tUserID            string    `json:\"userId\"`\n}\ntype publicDTO struct {\n\tProfile       profile         `json:\"profile\"`\n\tMilestoneDTOS []milestoneDTOS `json:\"milestoneDTOS\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60090988/how-to-configure-a-custom-zap-logger-that-writes-to-output-only-at-error-level",
    "body": "// struct to \"remember\" buffered entries\ntype log struct {\n\tentry zapcore.Entry\n\tfields []zapcore.Field\n}\n// custom encoder\ntype bufferEncoder struct {\n    // embeds a zapcore encoder\n\tzapcore.Encoder\n    // the entry buffer itself\n\tbuffer []*log\n    // the buffer pool, to return encoded entries\n\tpool buffer.Pool\n}\nfunc (b *bufferEncoder) EncodeEntry(entry zapcore.Entry, fields []zapcore.Field) (*buffer.Buffer, error) {\n    // buffer entries\n\tb.buffer = append(b.buffer, &log{entry, fields})\n    // return an empty buffer if the level is not error\n\tif entry.Level != zap.ErrorLevel {\n        return b.pool.Get(), nil\n    }\n\n    // new buffer\n\tbuf := b.pool.Get()\n\tfor _, log := range b.buffer {\n        // encode buffered entries and append them to buf\n\t\tencoded, err := b.Encoder.EncodeEntry(log.entry, log.fields)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tbuf.AppendString(encoded.String())\n\t}\n    // reset the buffer before returning\n\tb.buffer = nil\n\treturn buf, nil\n}\nfunc main() {\n\tenc := &bufferEncoder{\n\t\tEncoder: zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n\t\tpool: buffer.NewPool(),\n\t}\n\tcore := zapcore.NewCore(enc, os.Stdout, zap.NewAtomicLevelAt(zap.InfoLevel))\n\tlogger := zap.New(core)\n\tlogger.Info(\"info\")\n\tfmt.Println(\"buffered info\")\n\ttime.Sleep(500 * time.Millisecond)\n\tlogger.Warn(\"warn\")\n\tfmt.Println(\"buffered warn\")\n\ttime.Sleep(500 * time.Millisecond)\n\tlogger.Error(\"error\")\n\tfmt.Println(\"flushed\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57774691/redis-golang-client-periodically-discarding-bad-pubsub-connection-eof",
    "body": "func listenToControlChannel(client *redis.Client) {\n\tpubsub := client.Subscribe(\"control\")\n\tdefer pubsub.Close()\n\tif _, err := pubsub.Receive(); err != nil {\n\t\trootLogger.Error(\"failed to receive from control PubSub\", zap.Error(err))\n\t\treturn\n\t}\n\tcontrolCh := pubsub.Channel()\n\tfmt.Println(\"start listening on control PubSub\")\n\t// Endlessly listen to control channel,\n\tfor msg := range controlCh {\n\t\tcm := ControlMessageEvent{}\n\t\tpayload := []byte(msg.Payload)\n\t\tif err := json.Unmarshal(payload, &cm); err != nil {\n\t\t\tfmt.Printf(\"failed to parse control message: %s\\n\", err.Error())\n\t\t} else if err := handleIncomingEvent(&cm); err != nil {\n\t\t\tfmt.Printf(\"failed to handle control message: %s\\n\", err.Error())\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56401238/how-to-unmarshall-yaml-v3-with-full-access-to-node",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"gopkg.in/yaml.v3\"\n)\nfunc main() {\n\ttype Person struct {\n\t\tName    yaml.Node\n\t\tAddress yaml.Node\n\t}\n\tdata := `\nname: John Doe\n#comment here\naddress:\n    street: 123 E 3rd St\n    city: Denver\n    state: CO\n    zip: 81526\n`\n\tvar person Person\n\terr := yaml.Unmarshal([]byte(data), &person)\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to unmarshall: %v\", err)\n\t\tos.Exit(1)\n\t}\n\taddress := &yaml.Node{}\n\tdecErr := person.Address.Decode(address)\n\tif decErr != nil {\n\t\tfmt.Printf(\"Failed to decode: %v\", decErr)\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"%v\", address.HeadComment)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73479307/why-is-my-go-program-so-slow-when-navigating-the-files",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"log\"\n\t\"os\"\n\t\"sort\"\n\t\"sync\"\n\t\"github.com/google/fscrypt/filesystem\"\n\t\"github.com/sirupsen/logrus\"\n\t\"gopkg.in/alecthomas/kingpin.v2\"\n)\nvar (\n\tmountpoint = kingpin.Flag(\"mount\", \"The mount to find the largest file usages. Can be a subath of mount\").Required().String()\n\tlimit      = kingpin.Flag(\"limit\", \"The maximum number of files return to the display\").Default(\"10\").Short('l').Int()\n)\nvar device string\ntype fileDisplays struct {\n\tsync.RWMutex\n\tFiles []fileDisplay\n}\nvar files fileDisplays\ntype fileDisplay struct {\n\tSize int64\n\tPath string\n}\ntype bySize []fileDisplay\nfunc (a bySize) Len() int           { return len(a) }\nfunc (a bySize) Less(i, j int) bool { return a[i].Size < a[j].Size }\nfunc (a bySize) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc main() {\n\tlog.SetOutput(io.Discard)\n\tkingpin.Version(\"0.0.1\")\n\tkingpin.Parse()\n\t//Define limit after parsing\n\tlogrus.SetLevel(logrus.FatalLevel)\n\tif (*mountpoint)[len(*mountpoint)-1:] != \"/\" {\n\t\t*mountpoint = *mountpoint + \"/\"\n\t}\n\tfmt.Println(\"Finding the top\", *limit, \"largest files on filesystem\", *mountpoint, \"\\n================================================\")\n\tmount, err := filesystem.FindMount(*mountpoint)\n\tif err != nil {\n\t\tlogrus.Fatal(err)\n\t}\n\tdevice = mount.Device\n\tentries, err := os.ReadDir(*mountpoint)\n\tif err != nil {\n\t\tlogrus.Fatal(err)\n\t}\n\tvar wg sync.WaitGroup\n\tgetFiles(*mountpoint, entries, &wg)\n\twg.Wait()\n\tsort.Sort(bySize(files.Files))\n\tvar shortFiles []fileDisplay\n\tif len(files.Files) > *limit {\n\t\tshortFiles = files.Files[len(files.Files)-*limit:]\n\t} else {\n\t\tshortFiles = files.Files\n\t}\n\tfor _, file := range shortFiles {\n\t\tfmt.Println(file.Path, file.DisplaySizeIEC())\n\t}\n}\nfunc getFiles(start string, entries []fs.DirEntry, wg *sync.WaitGroup) {\n\tfor _, entry := range entries {\n\t\twg.Add(1)\n\t\tgo handleEntry(start, entry, wg)\n\t}\n}\nfunc handleEntry(start string, entry fs.DirEntry, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tvar file fileDisplay\n\tmount, err := filesystem.FindMount(start + entry.Name())\n\tif err != nil {\n\t\tlogrus.Errorln(err, start+entry.Name())\n\t\treturn\n\t}\n\tif mount.Device == device {\n\t\tif entry.Type().IsRegular() {\n\t\t\tfileInfo, err := os.Stat(start + entry.Name())\n\t\t\tif err != nil {\n\t\t\t\tlogrus.Errorln(err, start+entry.Name())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfile.Path = start + entry.Name()\n\t\t\tfile.Size = fileInfo.Size()\n\t\t\tfiles.Append(file)\n\t\t} else if entry.IsDir() {\n\t\t\tentries, err := os.ReadDir(start + entry.Name())\n\t\t\tif err != nil {\n\t\t\t\tlogrus.Errorln(err, start+entry.Name())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlogrus.Info(\"Searching \", start+entry.Name())\n\t\t\tgetFiles(start+entry.Name()+\"/\", entries, wg)\n\t\t}\n\t}\n}\nfunc (f *fileDisplay) DisplaySizeIEC() string {\n\tconst unit = 1024\n\tb := f.Size\n\tif b < unit {\n\t\treturn fmt.Sprintf(\"%dB\", b)\n\t}\n\tdiv, exp := int64(unit), 0\n\tfor n := b / unit; n >= unit; n /= unit {\n\t\tdiv *= unit\n\t\texp++\n\t}\n\treturn fmt.Sprintf(\"%.2f%ciB\",\n\t\tfloat64(b)/float64(div), \"KMGTPE\"[exp])\n}\nfunc (fd *fileDisplays) Append(item fileDisplay) {\n\tfd.Lock()\n\tdefer fd.Unlock()\n\tfd.Files = append(fd.Files, item)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72960838/how-to-use-pkg-errors-to-annotate-error-pretty-print-stack-trace-in-golang",
    "body": "2022/07/13 11:42:03 annotate with additional debug info: failing unconditionally\ngithub.com/kozmod/idea-tests/core/errors.myerror\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:10 // 1️⃣\ngithub.com/kozmod/idea-tests/core/errors.myerror1\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:14\ngithub.com/kozmod/idea-tests/core/errors.myerror2\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:18\ngithub.com/kozmod/idea-tests/core/errors.TestStack.func1\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:35\ntesting.tRunner\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/testing/testing.go:1439\nruntime.goexit\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/runtime/asm_amd64.s:1571\ngithub.com/kozmod/idea-tests/core/errors.myerror1\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:14 // 2️⃣\ngithub.com/kozmod/idea-tests/core/errors.myerror2\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:18\ngithub.com/kozmod/idea-tests/core/errors.TestStack.func1\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:35\ntesting.tRunner\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/testing/testing.go:1439\nruntime.goexit\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/runtime/asm_amd64.s:1571\ngithub.com/kozmod/idea-tests/core/errors.myerror2\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:18 // 3️⃣\ngithub.com/kozmod/idea-tests/core/errors.TestStack.func1\n\t/Users/19798572/GolandProjects/idea-tests/core/errors/stack_test.go:35\ntesting.tRunner\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/testing/testing.go:1439\nruntime.goexit\n\t/Library/GoLang/go1.18.2.darwin-amd64/src/runtime/asm_amd64.s:1571"
  },
  {
    "url": "https://stackoverflow.com/questions/71088064/how-can-i-use-the-aws-sdk-v2-for-go-with-digitalocean-spaces",
    "body": "package s3\nimport (\n\t\"context\"\n\t\"os\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/s3/manager\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nfunc read(ctx context.Context) error {\n\t// Define the parameters for the session you want to create.\n\tspacesKey := os.Getenv(\"SPACES_KEY\")\n\tspacesSecret := os.Getenv(\"SPACES_SECRET\")\n\tcreds := credentials.NewStaticCredentialsProvider(spacesKey, spacesSecret, \"\")\n\tcustomResolver := aws.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (aws.Endpoint, error) {\n\t\treturn aws.Endpoint{\n\t\t\tURL: \"https://sfo3.digitaloceanspaces.com\",\n\t\t}, nil\n\t})\n\tcfg, err := config.LoadDefaultConfig(ctx,\n\t\tconfig.WithRegion(\"us-east-1\"),\n\t\tconfig.WithCredentialsProvider(creds),\n\t\tconfig.WithEndpointResolverWithOptions(customResolver))\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Create an Amazon S3 service client\n\tawsS3Client := s3.NewFromConfig(cfg)\n\tinput := &s3.GetObjectInput{\n\t\tBucket: aws.String(\"zeus-fyi\"),\n\t\tKey:    aws.String(\"test.txt\"),\n\t}\n\tdownloader := manager.NewDownloader(awsS3Client)\n\tnewFile, err := os.Create(\"./local-test.txt\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer newFile.Close()\n\t_, err = downloader.Download(ctx, newFile, input)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70489167/uber-zap-logger-how-to-prepend-every-log-entry-with-a-string",
    "body": "type prependEncoder struct {\n    // embed a zapcore encoder\n    // this makes prependEncoder implement the interface without extra work\n\tzapcore.Encoder\n    // zap buffer pool\n\tpool buffer.Pool\n}\n// implementing only EncodeEntry\nfunc (e *prependEncoder) EncodeEntry(entry zapcore.Entry, fields []zapcore.Field) (*buffer.Buffer, error) {\n\t// new log buffer\n    buf := e.pool.Get()\n    // prepend the JournalD prefix based on the entry level\n\tbuf.AppendString(e.toJournaldPrefix(entry.Level))\n\tbuf.AppendString(\" \")\n    // calling the embedded encoder's EncodeEntry to keep the original encoding format\n\tconsolebuf, err := e.Encoder.EncodeEntry(entry, fields)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    // just write the output into your own buffer\n\t_, err = buf.Write(consolebuf.Bytes())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf, nil\n}\n// some mapper function\nfunc (e *prependEncoder) toJournaldPrefix(lvl zapcore.Level) string {\n\tswitch lvl {\n\tcase zapcore.DebugLevel:\n\t\treturn \"<7>\"\n\tcase zapcore.InfoLevel:\n\t\treturn \"<6>\"\n\tcase zapcore.WarnLevel:\n\t\treturn \"<4>\"\n\t}\n\treturn \"\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70489167/uber-zap-logger-how-to-prepend-every-log-entry-with-a-string",
    "body": "package main\nimport (\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/buffer\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"os\"\n)\nfunc getConfig() zap.Config {\n    // your current config options\n\treturn config\n}\nfunc main() {\n\tcfg := getConfig()\n    // constructing our prependEncoder with a ConsoleEncoder using your original configs\n\tenc := &prependEncoder{\n\t\tEncoder: zapcore.NewConsoleEncoder(cfg.EncoderConfig),\n\t\tpool:    buffer.NewPool(),\n\t}\n\tlogger := zap.New(\n        zapcore.NewCore(\n\t\t    enc,\n\t\t    os.Stdout,\n\t\t    zapcore.DebugLevel,\n\t    ),\n        // this mimics the behavior of NewProductionConfig.Build\n\t\tzap.ErrorOutput(os.Stderr),\n\t)\n\tlogger.Info(\"this is info\")\n    logger.Debug(\"this is debug\")\n    logger.Warn(\"this is warn\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70471845/how-to-specify-usage-for-cli-arguments-not-flags",
    "body": "package main\nimport \"github.com/alecthomas/kong\"\nvar CLI struct {\n  Rm struct {\n    Force     bool `help:\"Force removal.\"`\n    Recursive bool `help:\"Recursively remove files.\"`\n    Paths []string `arg:\"\" name:\"path\" help:\"Paths to remove.\" type:\"path\"`\n  } `cmd:\"\" help:\"Remove files.\"`\n  Ls struct {\n    Paths []string `arg:\"\" optional:\"\" name:\"path\" help:\"Paths to list.\" type:\"path\"`\n  } `cmd:\"\" help:\"List paths.\"`\n}\nfunc main() {\n  ctx := kong.Parse(&CLI)\n  switch ctx.Command() {\n  case \"rm <path>\":\n  case \"ls\":\n  default:\n    panic(ctx.Command())\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69961635/golang-creating-temporary-directory-for-testing-a-file-reading-function",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"log\"\n\t\"path\"\n\t\"reflect\"\n\t\"testing/fstest\"\n)\nfunc main() {\n\tvar myFiles fstest.MapFS = make(map[string]*fstest.MapFile)\n\tmyFiles[\"test_dir/i_am_a_file\"] = &fstest.MapFile{}\n\tmyFiles[\"test_dir/i_am_a_directory/add_me_to_map\"] = &fstest.MapFile{}\n\tmyFiles[\"test_dir/i_am_a_directory_too/add_me_to_map_too\"] = &fstest.MapFile{}\n\tmyFiles[\"test_dir/i_am_a_directory_too/and_me\"] = &fstest.MapFile{}\n\tmyFiles[\"test_dir/i_am_a_directory_too/do_not_add_me_to_map/\"] = &fstest.MapFile{}\n\tm, err := FileScan(myFiles, \"test_dir\")\n\tif err != nil {\n\t\tlog.Fatalln(\"Test failed:\", err)\n\t}\n\texpectedMap := map[string][]string{\n\t\t\"i_am_a_directory\":     {\"add_me_to_map\"},\n\t\t\"i_am_a_directory_too\": {\"add_me_to_map_too\", \"and_me\"},\n\t}\n\tif !reflect.DeepEqual(expectedMap, m) {\n\t\tlog.Fatalf(\"m: expected  = %v, observed = %v\", 2, expectedMap, m)\n\t}\n\tfmt.Println(\"OK\")\n}\nfunc FileScan(fileSystem fs.FS, dir string) (map[string][]string, error) {\n\tvar dataset = make(map[string][]string)\n\tfiles, err := fs.ReadDir(fileSystem, dir)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, file := range files {\n\t\tif !file.IsDir() {\n\t\t\tcontinue\n\t\t}\n\t\tdirFiles, err := fs.ReadDir(fileSystem, path.Join(dir, file.Name()))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfor _, dirFile := range dirFiles {\n\t\t\tif dirFile.IsDir() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdataset[file.Name()] = append(dataset[file.Name()], dirFile.Name())\n\t\t}\n\t}\n\treturn dataset, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68957644/docker-build-fails-due-to-kafka-undefined-error",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/confluentinc/confluent-kafka-go/kafka\"\n)\nfunc main() {\n\tp, err := kafka.NewProducer(&kafka.ConfigMap{\"bootstrap.servers\": \"localhost\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer p.Close()\n\t// Delivery report handler for produced messages\n\tgo func() {\n\t\tfor e := range p.Events() {\n\t\t\tswitch ev := e.(type) {\n\t\t\tcase *kafka.Message:\n\t\t\t\tif ev.TopicPartition.Error != nil {\n\t\t\t\t\tfmt.Printf(\"Delivery failed: %v\\n\", ev.TopicPartition)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Printf(\"Delivered message to %v\\n\", ev.TopicPartition)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\t// Produce messages to topic (asynchronously)\n\ttopic := \"myTopic\"\n\tfor _, word := range []string{\"Welcome\", \"to\", \"the\", \"Confluent\", \"Kafka\", \"Golang\", \"client\"} {\n\t\tp.Produce(&kafka.Message{\n\t\t\tTopicPartition: kafka.TopicPartition{Topic: &topic, Partition: kafka.PartitionAny},\n\t\t\tValue:          []byte(word),\n\t\t}, nil)\n\t}\n\t// Wait for message deliveries before shutting down\n\tp.Flush(15 * 1000)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68125608/docker-cli-swarm-package-import-issues",
    "body": "$ go get -d github.com/docker/swarmkit/api/...@2dcf70aafdc9ea55af3aaaeca440638cde0ecda6\ngo: downloading github.com/docker/swarmkit v1.12.1-0.20210611195518-2dcf70aafdc9\ngo: downloading github.com/coreos/etcd v0.5.0-alpha.5\ngo: downloading github.com/gogo/protobuf v1.3.2\ngo: downloading github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c\ngo: downloading github.com/coreos/etcd v3.3.25+incompatible\ngo: downloading google.golang.org/grpc v1.38.0\ngo: downloading github.com/golang/protobuf v1.4.2\ngo: downloading golang.org/x/net v0.0.0-20201021035429-f5854403a974\ngo: downloading google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013\ngo: downloading golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f\ngo: downloading google.golang.org/protobuf v1.25.0\ngo: downloading golang.org/x/text v0.3.3\ngo: downloading github.com/sirupsen/logrus v1.8.1\ngo get: added github.com/coreos/etcd v3.3.25+incompatible\ngo get: added github.com/docker/go-events v0.0.0-20190806004212-e31b211e4f1c\ngo get: added github.com/docker/swarmkit v1.12.1-0.20210611195518-2dcf70aafdc9\ngo get: added github.com/gogo/protobuf v1.3.2\ngo get: added github.com/golang/protobuf v1.4.2\ngo get: added github.com/sirupsen/logrus v1.8.1\ngo get: added golang.org/x/net v0.0.0-20201021035429-f5854403a974\ngo get: added golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f\ngo get: added golang.org/x/text v0.3.3\ngo get: added google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013\ngo get: added google.golang.org/grpc v1.38.0\ngo get: added google.golang.org/protobuf v1.25.0\n$ go build github.com/docker/swarmkit/api/...\n$"
  },
  {
    "url": "https://stackoverflow.com/questions/70727633/golang-equivalent-to-python-formatted-string-using-f-strings",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n\t\"text/template\"\n)\nfunc main() {\n\tdata := fdata{\n\t\t\"Name1\": \"Ele\",\n\t\t\"Name2\": \"Ben\",\n\t\t\"Name3\": \"Frank\",\n\t\t\"Age\":   45,\n\t}\n\tformat := \"My name is {{.Name1}} but I also get called {{.Name2}} and at times {{.Name3}}. Generally I prefer {{.Name1}} and my age is {{.Age}}.\"\n\tresult, err := fstring(format, data)\n\tif err != nil {\n\t\tlog.Fatalf(\"fstring() failed: %v\", err)\n\t}\n\tfmt.Println(result)\n}\ntype fdata map[string]interface{}\nfunc fstring(format string, data fdata) (string, error) {\n\tt, err := template.New(\"fstring\").Parse(format)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"error creating template: %v\", err)\n\t}\n\toutput := new(bytes.Buffer)\n\tif err := t.Execute(output, data); err != nil {\n\t\treturn \"\", fmt.Errorf(\"error executing template: %v\", err)\n\t}\n\treturn output.String(), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67415405/use-kubeconfig-for-helm-client-install-panding",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"helm.sh/helm/v3/pkg/action\"\n\t\"helm.sh/helm/v3/pkg/chart/loader\"\n\t\"helm.sh/helm/v3/pkg/kube\"\n    \"helm.sh/helm/v3/pkg/release\"\n\t_ \"k8s.io/client-go/plugin/pkg/client/auth\"\n)\nfunc main() {\n\tchartPath := \"./charts/dns\"\n\tchart, err := loader.Load(chartPath)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tkubeconfigPath := findKubeConfig()\n\treleaseName := \"test\"\n\treleaseNamespace := \"default\"\n\tactionConfig := new(action.Configuration)\n\tif err := actionConfig.Init(kube.GetConfig(kubeconfigPath, \"\", releaseNamespace), releaseNamespace, os.Getenv(\"HELM_DRIVER\"), func(format string, v ...interface{}) {\n\t\tfmt.Sprintf(format, v)\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\tiCli := action.NewInstall(actionConfig)\n\tiCli.Namespace = releaseNamespace\n\tiCli.ReleaseName = releaseName\n\trel, err := iCli.Run(chart, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"Successfully installed release: \", rel.Name)\nrel.Info.Status\n    // check Release Status, feel free to run it in a go routine along the deletetion logic\n    upCli := action.NewUpgrade(actionConfig)\n    upgradedRel, err := pollAndUpdate(rel.Info.Status, upCli) // see if its better to just run that code here directly :shrug:\n// if we still on pending, then delete it\n    if upgradedRel.Info.Status.IsPending() {\n      unCli := action.NewUninstall(actionConfig)\n      res, err := unCli.Run(rel.Name)\n      if err != nil {\n          panic(err)\n      }\n    }\n}\nfunc pollAndUpdate(originalRel *release.Release, upgradeCli *action.Upgrade) (*release.Release, error) {\n    if !originalRel.Info.Status.IsPending() {\n        return originalRel, nil\n    }\n    c := time.Tick(10 * time.Second) // we gonna time it out besides checking repeatedly\n    var rel *release.Release = originalRel\n    for _ = range c {\n         //check the status and try and upgrade\n         for rel.Info.Status.IsPending() { // https://pkg.go.dev/helm.sh/helm/v3@v3.5.4/pkg/release#Status.IsPending\n             // run the upgrade command you have\n             // its this function: https://github.com/helm/helm/blob/main/pkg/action/upgrade.go#L111\n             rel, err := upgradeCli.Run(/*you gotta get all the values this needs*/)\n             if err != nil {\n                 panic(err)\n             }\n         }\n    }\n    return rel, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54393340/golang-struct-default-value-using-bson",
    "body": "// Campaign represents a email campaign\ntype Campaign struct {\n    ID             bson.ObjectId   `json:\"id\" bson:\"_id\"`\n    CampaignName   string          `json:\"campaign_name\" bson:\"campaign_name\"`\n    FromName       []string        `json:\"from_name\" bson:\"from_name\"`\n    FromEmail      string          `json:\"from_email\" bson:\"from_email\"`\n    ReplyEmail     string          `json:\"reply_email\" bson:\"reply_email\"`\n    Subject        []string        `json:\"subject\" bson:\"subject\"`\n    BodyText       string          `json:\"body_text\" bson:\"body_text\"`\n    BodyHTML       string          `json:\"body_html\" bson:\"body_html\"`\n    SMTPList       bson.ObjectId `json:\"smtp_list\" bson:\"smtp_list\"`\n    EmailList      bson.ObjectId `json:\"email_list\" bson:\"email_list\"`\n    DateCreated    time.Time       `json:\"date_created\" bson:\"date_created\"`\n    DateUpdated    time.Time       `json:\"date_updated\" bson:\"date_updated\"`\n    DateSendFinish time.Time       `json:\"date_send_finish\" bson:\"date_send_finish\"`\n    OwnerID        bson.ObjectId   `json:\"owner_id\" bson:\"owner_id\"`\n    Opens          int             `json:\"opens\" bson:\"opens\"`\n    Clicks         int             `json:\"clicks\" bson:\"clicks\"`\n    Status         string          `json:\"status\" bson:\"status\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75684722/k8s-provide-kubeconfig-as-bytearray-genericclioptions",
    "body": "func getClientCmdConfig() (*clientcmdapi.Config, error) {\n   kubeconfigData := []byte(\"my_kubeconfig\")\n   var cfg clientcmdapi.Config\n   if err := json.Unmarshal(kubeconfigData, &cfg); err != nil {\n      return nil, err\n   }\n   return &cfg, nil\n}\nfunc useClientCmdConfig() (..., error) {\n   cfg, err := getClientCmdConfig()\n   if err != nil {\n      return ..., err\n   }\n\n   clientCfg, err := genericclioptions.NewDefaultClientConfig\n   if err != nil {\n      return ..., err\n   }\n   // ... do something with clientCfg\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72452261/changing-the-default-authentication-methods-in-the-aws-go-sdk-v2",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials/ec2rolecreds\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials/endpointcreds\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n)\nconst (\n\tecsContainerEndpoint = \"http://169.254.170.2\"\n)\nfunc ecsContainerURI(path string) string {\n\treturn fmt.Sprintf(\"%s%s\", ecsContainerEndpoint, path)\n}\nfunc main() {\n\tos.Setenv(\"AWS_SECRET_ACCESS_KEY\", \"TEST\")\n\tos.Setenv(\"AWS_ACCESS_KEY_ID\", \"TEST\")\n\t// ECS credentials are read from an endpoint that is passed through\n    // environment variables\n\t// os.Setenv(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\", \"/v2\")\n\tvar provider aws.CredentialsProvider\n\tenvConfig, _ := config.NewEnvConfig()\n\tswitch {\n\tcase len(envConfig.ContainerCredentialsRelativePath) != 0:\n\t\tprovider = endpointcreds.New(ecsContainerURI(envConfig.ContainerCredentialsRelativePath), func(options *endpointcreds.Options) {\n\t\t\toptions.AuthorizationToken = envConfig.ContainerAuthorizationToken\n\t\t\toptions.HTTPClient = &http.Client{\n\t\t\t\tTimeout: 1,\n\t\t\t}\n\t\t})\n\tdefault:\n\t\tprovider = ec2rolecreds.New()\n\t}\n\tcfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(\"us-west-2\"),\n\t\tconfig.WithCredentialsProvider(aws.NewCredentialsCache(provider)))\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to load SDK config, %v\", err)\n\t}\n    r, cerr := cfg.Credentials.Retrieve(context.TODO())\n\tfmt.Printf(\"%#v\\nError: %#v\", r, cerr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69369537/how-to-override-image-registry-urls-that-testcontainer-uses",
    "body": "func TestFoo(t *testing.T) {\n    authConfig := types.AuthConfig{\n\t\tUsername: os.Getenv(\"DOCKER_USER\"),\n\t\tPassword: os.Getenv(\"DOCKER_PWD\"),\n\t}\n\tjson, err := json.Marshal(authConfig)\n\tassert.Nil(t, err)\n\treq := testcontainers.ContainerRequest{\n\t\tImage:        \"docker.my-company.org/my-namespace/dynamodb-local:1.15.0\",\n\t\tExposedPorts: []string{\"8000\" + \"/tcp\"},\n\t\tRegistryCred: base64.URLEncoding.EncodeToString(json),\n\t}\n\tcontainer, err := testcontainers.GenericContainer(context.Background(), testcontainers.GenericContainerRequest{\n\t\tContainerRequest: req,\n\t\t// auto-start the container\n\t\tStarted: true,\n\t})\n\tassert.Nil(t, err)\n\tassert.NotNil(t, container)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67193342/i-o-timeout-issue-when-receiving-the-message-on-sqs-and-memory-leak-https-usage",
    "body": "type HTTPClientSettings struct {\n    Connect          time.Duration\n    ConnKeepAlive    time.Duration\n    ExpectContinue   time.Duration\n    IdleConn         time.Duration\n    MaxAllIdleConns  int\n    MaxHostIdleConns int\n    ResponseHeader   time.Duration\n    TLSHandshake     time.Duration\n}\nfunc NewHTTPClientWithSettings(httpSettings HTTPClientSettings) (*http.Client, error) {\n    var client http.Client\n    tr := &http.Transport{\n        ResponseHeaderTimeout: httpSettings.ResponseHeader,\n        Proxy:                 http.ProxyFromEnvironment,\n        DialContext: (&net.Dialer{\n            KeepAlive: httpSettings.ConnKeepAlive,\n            DualStack: true,\n            Timeout:   httpSettings.Connect,\n        }).DialContext,\n        MaxIdleConns:          httpSettings.MaxAllIdleConns,\n        IdleConnTimeout:       httpSettings.IdleConn,\n        TLSHandshakeTimeout:   httpSettings.TLSHandshake,\n        MaxIdleConnsPerHost:   httpSettings.MaxHostIdleConns,\n        ExpectContinueTimeout: httpSettings.ExpectContinue,\n    }\n    // So client makes HTTP/2 requests\n    err := http2.ConfigureTransport(tr)\n    if err != nil {\n        return &client, err\n    }\n    return &http.Client{\n        Transport: tr,\n    }, nil\n}\nhttpClient, err := NewHTTPClientWithSettings(HTTPClientSettings{\n    Connect:          5 * time.Second,\n    ExpectContinue:   1 * time.Second,\n    IdleConn:         90 * time.Second,\n    ConnKeepAlive:    30 * time.Second,\n    MaxAllIdleConns:  100,\n    MaxHostIdleConns: 10,\n    ResponseHeader:   5 * time.Second,\n    TLSHandshake:     5 * time.Second,\n})\nif err != nil {\n    fmt.Println(\"Got an error creating custom HTTP client:\")\n    fmt.Println(err)\n    return\n}\nsess := session.Must(session.NewSession(&aws.Config{\n    HTTPClient: httpClient,\n}))\nsqsClient := sqs.New(sess)"
  },
  {
    "url": "https://stackoverflow.com/questions/59427868/join-table-with-non-primary-key-in-gorm",
    "body": "import (\n\t\"fmt\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n)\ntype BookData struct {\n\tId                string              `gorm:\"primary_key;column:book_id\"`\n\tAuthorId          string              `gorm:\"column:author_id\"`\n\tAuthor            AuthorData          `gorm:\"ForeignKey:Id;References:AuthorId\"`\n\tPublisherProperty []PublisherProperty `gorm:\"ForeignKey:Id\"`\n}\ntype AuthorData struct {\n\tId   string `gorm:\"primary_key;column:author_id\"`\n\tName string `gorm:\"column:author_name\"`\n}\ntype PublisherProperty struct {\n\tId           string `gorm:\"primary_key;column:book_id\"`\n\tPublisherId  string `gorm:\"primary_key;column:publisher_id\"`\n\tPublisherTxt string `gorm:\"column:publisher_txt\"`\n}\nvar db *gorm.DB\nfunc init() {\n\tdsn := \"user:pass@tcp(127.0.0.1:3306)/temp?charset=utf8mb4&parseTime=True&loc=Local\"\n\tvar err error\n\tdb, err = gorm.Open(mysql.Open(dsn), &gorm.Config{\n\t\tLogger: logger.Default.LogMode(logger.Info),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc main() {\n\tvar books []BookData\n\terr := db.Preload(\"Author\").Preload(\"PublisherProperty\").\n\t\tFind(&books).Limit(10).Error\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(books)\n    // output:\n    // [{1 1 {1 author1} [{1 1 } {1 2 }]} {2 1 {1 author1} []}]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56403297/race-condition-reading-stdout-and-stderr-of-child-process",
    "body": "func GetOutputsWithTimeout(command string, args []string, timeout int) ([]byte, []byte, int, error) {\n\tcmd := exec.Command(command, args...)\n\t// get pipes to standard output/error\n\tstdout, err := cmd.StdoutPipe()\n\tif err != nil {\n\t\treturn nil, nil, -1, fmt.Errorf(\"cmd.StdoutPipe() error: %+v\", err.Error())\n\t}\n\tstderr, err := cmd.StderrPipe()\n\tif err != nil {\n\t\treturn nil, nil, -1, fmt.Errorf(\"cmd.StderrPipe() error: %+v\", err.Error())\n\t}\n\t// setup buffers to capture standard output and standard error\n\tvar stdoutBuf, stderrBuf []byte\n\t// create 3 goroutines: stdout, stderr, timer.\n\t// Use a waitgroup to wait.\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tvar err error\n\t\tif stdoutBuf, err = ioutil.ReadAll(stdout); err != nil {\n\t\t\tlog.Printf(\"%s: Error Slurping stdout: %+v\", command, err)\n\t\t}\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\tvar err error\n\t\tif stderrBuf, err = ioutil.ReadAll(stderr); err != nil {\n\t\t\tlog.Printf(\"%s: Error Slurping stderr: %+v\", command, err)\n\t\t}\n\t\twg.Done()\n\t}()\n\tt := time.AfterFunc(time.Duration(timeout)*time.Second, func() {\n\t\tcmd.Process.Kill()\n\t})\n\t// start process\n\tif err := cmd.Start(); err != nil {\n\t\tt.Stop()\n\t\treturn nil, nil, -1, fmt.Errorf(\"cmd.Start() error: %+v\", err.Error())\n\t}\n\terr = cmd.Wait()\n\ttimedOut := !t.Stop()\n\twg.Wait()\n\t// check if the timer timed out.\n\tif timedOut {\n\t\treturn stdoutBuf, stderrBuf, -1,\n\t\t\tfmt.Errorf(\"%s: timeout %d s reached, pid=%d process killed\",\n\t\t\t\tcommand, timeout, cmd.Process.Pid)\n\t}\n\tif err != nil {\n\t\trc := -1\n\t\tif exitErr, ok := err.(*exec.ExitError); ok {\n\t\t\trc = exitErr.Sys().(syscall.WaitStatus).ExitStatus()\n\t\t}\n\t\treturn stdoutBuf, stderrBuf, rc,\n\t\t\tfmt.Errorf(\"%s: process done with error: %+v\",\n\t\t\t\tcommand, err)\n\t}\n\t// cmd.Wait docs say that if err == nil, exit code is 0\n\treturn stdoutBuf, stderrBuf, 0, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56616196/how-to-convert-camel-case-string-to-snake-case",
    "body": "func ToSnake(camel string) (snake string) {\n\tvar b strings.Builder\n\tdiff := 'a' - 'A'\n\tl := len(camel)\n\tfor i, v := range camel {\n\t\t// A is 65, a is 97\n\t\tif v >= 'a' {\n\t\t\tb.WriteRune(v)\n\t\t\tcontinue\n\t\t}\n\t\t// v is capital letter here\n\t\t// irregard first letter\n\t\t// add underscore if last letter is capital letter\n\t\t// add underscore when previous letter is lowercase\n\t\t// add underscore when next letter is lowercase\n\t\tif (i != 0 || i == l-1) && ( // head and tail\n\t\t\t(i > 0 && rune(camel[i-1]) >= 'a') || // pre\n\t\t\t\t(i < l-1 && rune(camel[i+1]) >= 'a')) { //next\n\t\t\tb.WriteRune('_')\n\t\t}\n\t\tb.WriteRune(v + diff)\n\t}\n\treturn b.String()\n}\n// here is the test\nfunc TestToSnake(t *testing.T) {\n\tinput := \"MyLIFEIsAwesomE\"\n\twant := \"my_life_is_awesom_e\"\n\tif got := ToSnake(input); got != want {\n\t\tt.Errorf(\"ToSnake(%v) = %v, want %v\", input, got, want)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/45686163/how-to-write-isnumeric-function-in-golang",
    "body": "BenchmarkIsNumDot-8    \t34117197\t        31.2 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkIsNumeric-8   \t 1931089\t       630 ns/op\t     192 B/op\t       4 allocs/op\n// r = isNumDot(\"2.22\")\nBenchmarkIsNumDot-8    \t102849996\t        11.4 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkIsNumeric-8   \t21994874\t        48.5 ns/op\t       0 B/op\t       0 allocs/op\n// r = isNumDot(\"a 240\")\nBenchmarkIsNumDot-8    \t256610877\t         4.58 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkIsNumeric-8   \t 8962381\t       140 ns/op\t      48 B/op\t       1 allocs/op"
  },
  {
    "url": "https://stackoverflow.com/questions/49151104/watch-for-mongodb-change-streams",
    "body": "ctx := context.TODO()\n\tclientOptions := options.Client().ApplyURI(mongoURI)\n\tclient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = client.Ping(ctx, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Connected!\")\n\tcollection := client.Database(\"test\").Collection(\"test\")\n\tpipeline := mongo.Pipeline{bson.D{\n\t\t{\"$match\",\n\t\t\tbson.D{\n\t\t\t\t{\"fullDocument.field1\", 1},\n\t\t\t\t{\"fullDocument.field2\", false},\n\t\t\t},\n\t\t},\n\t}}\n\tstreamOptions := options.ChangeStream().SetFullDocument(options.UpdateLookup)\n\tstream, err := collection.Watch(ctx, pipeline, streamOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Print(\"waiting for changes\")\n\tvar changeDoc map[string]interface{}\n\tfor stream.Next(ctx) {\n\t\tif e := stream.Decode(&changeDoc); e != nil {\n\t\t\tlog.Printf(\"error decoding: %s\", e)\n\t\t}\n\t\tlog.Printf(\"change: %+v\", changeDoc)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/60540465/how-to-list-all-ips-in-a-network",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\nfunc Hosts(cidr string) ([]string, int, error) {\n\tip, ipnet, err := net.ParseCIDR(cidr)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tvar ips []string\n\tfor ip := ip.Mask(ipnet.Mask); ipnet.Contains(ip); inc(ip) {\n\t\tips = append(ips, ip.String())\n\t}\n\t// remove network address and broadcast address\n\tlenIPs := len(ips)\n\tswitch {\n\tcase lenIPs < 2:\n\t\treturn ips, lenIPs, nil\n\n\tdefault:\n\treturn ips[1 : len(ips)-1], lenIPs - 2, nil\n\t}\n}\nfunc inc(ip net.IP) {\n\tfor j := len(ip) - 1; j >= 0; j-- {\n\t\tip[j]++\n\t\tif ip[j] > 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\nfunc main() {\n\tips, count, err := Hosts(\"8.8.8.0/24\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor n := 0; n <= count; n += 8 {\n\t\tfmt.Println(ips[n])\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67788292/add-a-cache-to-a-go-function-as-if-it-were-a-static-member",
    "body": "func InitExpensiveFuncWithCache() func(p int) int {\n\tvar cache = make(map[int]int)\n\treturn func(p int) int {\n\t\tif ret, ok := cache[p]; ok {\n\t\t\tfmt.Println(\"from cache\")\n\t\t\treturn ret\n\t\t}\n\t\t// expensive computation\n\t\ttime.Sleep(1 * time.Second)\n\t\tr := p * 2\n\t\tcache[p] = r\n\t\treturn r\n\t}\n}\nfunc main() {\n\tExpensiveFuncWithCache := InitExpensiveFuncWithCache()\n\n\tfmt.Println(ExpensiveFuncWithCache(2))\n\tfmt.Println(ExpensiveFuncWithCache(2))\n}\noutput:\n4\nfrom cache\n4\nveryExpensiveFunctionCached := InitExpensiveFuncWithCache()"
  },
  {
    "url": "https://stackoverflow.com/questions/67788292/add-a-cache-to-a-go-function-as-if-it-were-a-static-member",
    "body": "type Cache struct {\n\tstore map[int]int\n\tmux   sync.RWMutex\n}\nfunc NewCache() *Cache {\n\treturn &Cache{make(map[int]int), sync.RWMutex{}}\n}\nfunc (c *Cache) Set(id, value int) {\n\tc.mux.Lock()\n\tc.store[id] = id\n\tc.mux.Unlock()\n}\nfunc (c *Cache) Get(id int) (int, error) {\n\tc.mux.RLock()\n\tv, ok := c.store[id]\n\tc.mux.RUnlock()\n\tif !ok {\n\t\treturn -1, errors.New(\"a value with given key not found\")\n\t}\n\treturn v, nil\n}\nfunc handleComplexOperation(c *Cache) http.HandlerFunc {\n\treturn http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request){\n\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62542897/how-to-use-gorilla-middleware-handlers-for-all-requests",
    "body": "type Route struct {\n\tName        string\n\tMethod      string\n\tPattern     string\n\tSecure      bool\n\tHandlerFunc http.HandlerFunc\n}\ntype Routes []Route\nvar routes = Routes{\n\tRoute{\n\t\tName:        \"Docs\",\n\t\tMethod:      \"GET\",\n\t\tPattern:     \"/v2/docs\",\n\t\tHandlerFunc: Docs,\n\t},\n\tRoute{\n\t\tName:        \"GetUserByName\",\n\t\tMethod:      \"GET\",\n\t\tPattern:     \"/v2/user/{username}\",\n\t\tHandlerFunc: user.GetUserByName,\n\t\tSecure:      true,\n\t},\n}\nfunc NewRouter() *mux.Router {\n\trouter := mux.NewRouter().StrictSlash(true)\n\trouter.NotFoundHandler = http.HandlerFunc(notFound)\n\trouter.MethodNotAllowedHandler = http.HandlerFunc(notAllowed)\n\tfor _, route := range routes {\n\t\tvar handler http.Handler\n\t\tif route.Secure {\n\t\t\thandler = AuthMiddleware(route.HandlerFunc)\n\t\t} else {\n\t\t\thandler = route.HandlerFunc\n\t\t}\n        handler = Logger(os.Stderr, handler)\n\t\trouter.\n\t\t\tMethods(route.Method).\n\t\t\tPath(route.Pattern).\n\t\t\tName(route.Name).\n\t\t\tHandler(handler)\n\t}\n\treturn router\n}\nfunc ApplicationRecovery(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tfmt.Fprintln(os.Stderr, \"Recovered from application error occurred\")\n\t\t\t\t_, _ = fmt.Fprintln(os.Stderr, err)\n\t\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t\t}))\n\t\t\t}\n\t\t}()\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc Middleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Add(\"Content-Type\", \"application/json\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc AuthMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        //TODO: Add authentication\n\t\tlog.Println(\"Authentication required\")\n        next.ServeHTTP(w, r)\n\t})\n}\nfunc Logger(inner http.Handler, name string) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tstart := time.Now()\n\t\tlog.Printf(\n\t\t\t\"%s %s %s %s\",\n\t\t\tr.Method,\n\t\t\tr.RequestURI,\n\t\t\tname,\n\t\t\ttime.Since(start),\n\t\t)\n\t\tinner.ServeHTTP(w, r)\n\t})\n}\nfunc notFound(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusNotFound)\n}\nfunc notAllowed(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusMethodNotAllowed)\n}\nfunc main() {\n\tsrv := http.Server{\n\t\tAddr:         \"0.0.0.0:8080\",\n\t\tHandler:      ApplicationRecovery(Middleware(NewRouter())),\n\t\tReadTimeout:  15 * time.Second,\n\t\tWriteTimeout: 15 * time.Second,\n\t}\n\tlog.Fatal(srv.ListenAndServe())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/31647406/mysql-real-escape-string-equivalent-for-golang",
    "body": "func Escape(sql string) string {\n\tdest := make([]byte, 0, 2*len(sql))\n\tvar escape byte\n\tfor i := 0; i < len(sql); i++ {\n\t\tc := sql[i]\n\t\tescape = 0\n\t\tswitch c {\n\t\tcase 0: /* Must be escaped for 'mysql' */\n\t\t\tescape = '0'\n\t\t\tbreak\n\t\tcase '\\n': /* Must be escaped for logs */\n\t\t\tescape = 'n'\n\t\t\tbreak\n\t\tcase '\\r':\n\t\t\tescape = 'r'\n\t\t\tbreak\n\t\tcase '\\\\':\n\t\t\tescape = '\\\\'\n\t\t\tbreak\n\t\tcase '\\'':\n\t\t\tescape = '\\''\n\t\t\tbreak\n\t\tcase '\"': /* Better safe than sorry */\n\t\t\tescape = '\"'\n\t\t\tbreak\n\t\tcase '\\032': //十进制26,八进制32,十六进制1a, /* This gives problems on Win32 */\n\t\t\tescape = 'Z'\n\t\t}\n\t\tif escape != 0 {\n\t\t\tdest = append(dest, '\\\\', escape)\n\t\t} else {\n\t\t\tdest = append(dest, c)\n\t\t}\n\t}\n\treturn string(dest)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/32438204/create-a-windows-shortcut-lnk-in-go",
    "body": "func makeLink(src, dst string) error {\n    ole.CoInitializeEx(0, ole.COINIT_APARTMENTTHREADED|ole.COINIT_SPEED_OVER_MEMORY)\n    oleShellObject, err := oleutil.CreateObject(\"WScript.Shell\")\n    if err != nil {\n        return err\n    }\n    defer oleShellObject.Release()\n    wshell, err := oleShellObject.QueryInterface(ole.IID_IDispatch)\n    if err != nil {\n        return err\n    }\n    defer wshell.Release()\n    cs, err := oleutil.CallMethod(wshell, \"CreateShortcut\", dst)\n    if err != nil {\n        return err\n    }\n    idispatch := cs.ToIDispatch()\n    oleutil.PutProperty(idispatch, \"TargetPath\", src)\n    oleutil.CallMethod(idispatch, \"Save\")\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76238545/how-to-extract-text-from-pdf-using-golang",
    "body": "$ pdftotext -layout -nopgbrk 2023-04-24_BU-12.pdf - | head\n                           ALL INDIA TENNIS ASSOCIATION\n                                        As on 24TH April , 2023\n       BOY'S UNDER-12                                 2011                BEST    BEST    25% BEST POINTS\n       24TH April , 2023                                                  Eight   Eight     Eight  CUT FOR     TTL.\n                                                                          SING.   DBLS.     DBLS. NO SHOW      PTS.\nRANK   NAME OF PLAYER                     REG NO.      DOB       STATE     PTS.   PTS.       PTS.  LATE WL    Final\n  1    VIVAAN MIRDHA                      432735    08-Apr-11      (RJ)    485     565     141.25     0        797\n  2    SMIT SACHIN UNDRE                  437763    07-Feb-11    (MH)      435     480       120      0      664.25\n  3    RISHIKESH MANE                     436806    15-Jan-11    (MH)      420     380        95      0        619\n  4    VIRAJ CHOUDHARY                    436648    03-Feb-11      (DL)    415     420       105      0      598.75"
  },
  {
    "url": "https://stackoverflow.com/questions/76238545/how-to-extract-text-from-pdf-using-golang",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"os/exec\"\n)\nfunc main() {\n\t// See \"man pdftotext\" for more options.\n\targs := []string{\n\t\t\"-layout\",              // Maintain (as best as possible) the original physical layout of the text.\n\t\t\"-nopgbrk\",             // Don't insert page breaks (form feed characters) between pages.\n\t\t\"2023-04-24_BU-12.pdf\", // The input file.\n\t\t\"-\",                    // Send the output to stdout.\n\t}\n\tcmd := exec.CommandContext(context.Background(), \"pdftotext\", args...)\n\tvar buf bytes.Buffer\n\tcmd.Stdout = &buf\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(buf.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69404758/transaction-in-golang-with-pgx",
    "body": "func (postgre *PostgreClient) list(query string, rs RowScanner) (err error) {\n\tconn, err := postgre.client.Acquire(context.TODO())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer conn.Release()\n\n\ttx, err := conn.BeginTx(context.TODO(), pgx.TxOptions{})\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err != nil {\n\t\t\ttx.Rollback(context.TODO())\n\t\t} else {\n\t\t\ttx.Commit(context.TODO())\n\t\t}\n\t}()\n\trows, err := tx.Query(context.TODO(), query)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tif err := rs.ScanRow(rows); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn rows.Err()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55426924/go-httputil-reverseproxy-not-overriding-the-host-header",
    "body": "// For server requests, Host specifies the host on which the URL\n        // is sought. Per RFC 7230, section 5.4, this is either the value\n        // of the \"Host\" header or the host name given in the URL itself.\n        // It may be of the form \"host:port\". For international domain\n        // names, Host may be in Punycode or Unicode form. Use\n        // golang.org/x/net/idna to convert it to either format if\n        // needed.\n        // To prevent DNS rebinding attacks, server Handlers should\n        // validate that the Host header has a value for which the\n        // Handler considers itself authoritative. The included\n        // ServeMux supports patterns registered to particular host\n        // names and thus protects its registered Handlers.\n        //\n        // For client requests, Host optionally overrides the Host\n        // header to send. If empty, the Request.Write method uses\n        // the value of URL.Host. Host may contain an international\n        // domain name.\n        Host string\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/74658175/mock-updateresult-from-updateone-using-go-mongo-driver-and-mtest",
    "body": "package test\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/integration/mtest\"\n\t\"go.mongodb.org/mongo-driver/x/mongo/driver/operation\"\n)\nconst (\n\tmockMatchedCount            int64  = 5\n\toneLessThanMockedMatchCount int64  = 4\n\tmockModifiedCount           int64  = 22\n\tmockUpsertedCount           int64  = 13\n\tmockUpsertedID              string = \"CouldBeAnythingIThink\"\n)\nfunc UpdateOneCall(mongoClient *mongo.Client) (*mongo.UpdateResult, error) {\n\tfilter := bson.D{{Key: \"SomeIDField\", Value: \"SomeID\"}}\n\tupdate := bson.D{{Key: \"$set\", Value: bson.D{{Key: \"ANewField\", Value: true}}}}\n\tcollection := mongoClient.Database(\"SomeDatabase\").Collection(\"SomeCollection\")\n\treturn collection.UpdateOne(context.Background(), filter, update)\n}\nfunc TestUpdateOneCall(t *testing.T) {\n\tmt := mtest.New(t, mtest.NewOptions().ClientType(mtest.Mock))\n\tdefer mt.Close()\n\tmt.Run(\"Successful Update\", func(mt *mtest.T) {\n\t\tupsertedVals := make([]operation.Upsert, mockUpsertedCount)\n\t\tupsertedVals[0] = operation.Upsert{ID: mockUpsertedID}\n\t\tmt.AddMockResponses(mtest.CreateSuccessResponse(\n\t\t\tbson.E{Key: \"n\", Value: mockMatchedCount},\n\t\t\tbson.E{Key: \"nModified\", Value: mockModifiedCount},\n\t\t\tbson.E{Key: \"upserted\", Value: upsertedVals},\n\t\t))\n\t\tresult, err := UpdateOneCall(mt.Client)\n\t\tassert.Nil(t, err, \"Should have successfully triggered update\")\n\t\tassert.Equal(t, result.MatchedCount, oneLessThanMockedMatchCount)\n\t\tassert.Equal(t, result.ModifiedCount, mockModifiedCount)\n\t\tassert.Equal(t, result.UpsertedCount, mockUpsertedCount)\n\t\tassert.Equal(t, result.UpsertedID, mockUpsertedID)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68853119/how-to-parse-time-using-a-specific-timezone",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\t// This will honor the given time zone.\n    // 2012-07-09 05:02:00 +0000 CEST\n\tconst formWithZone = \"Jan 2, 2006 at 3:04pm (MST)\"\n\tt, _ := time.ParseInLocation(formWithZone, \"Jul 9, 2012 at 5:02am (CEST)\", time.Local)\n\tfmt.Println(t)\n\t// Lacking a time zone, it will use your local time zone.\n    // Mine is PDT: 2012-07-09 05:02:00 -0700 PDT\n    const formWithoutZone = \"Jan 2, 2006 at 3:04pm\"\n\tt, _ = time.ParseInLocation(formWithoutZone, \"Jul 9, 2012 at 5:02am\", time.Local)\n\tfmt.Println(t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61653702/scale-deployment-replicas-with-kubernetes-go-client",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"path/filepath\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n\tkubeconfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfig)\n\tif err != nil {\n\t\tconfig, err = rest.InClusterConfig()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\tclient, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts, err := client.AppsV1().\n\t\tDeployments(\"default\").\n\t\tGetScale(context.TODO(), \"nginx\", metav1.GetOptions{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tsc := *s\n\tsc.Spec.Replicas = 10\n\tus, err := client.AppsV1().\n\t\tDeployments(\"default\").\n\t\tUpdateScale(context.TODO(),\n\t\t\t\"nginx\", &sc, metav1.UpdateOptions{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(*us)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57310483/whats-the-shortest-way-to-add-a-label-to-a-pod-using-the-kubernetes-go-client",
    "body": "package main\nimport (\n    \"fmt\"\n    \"encoding/json\"\n    \"time\"\n    \"k8s.io/apimachinery/pkg/types\"\n    eksauth \"github.com/chankh/eksutil/pkg/auth\"\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\ntype patchStringValue struct {\n    Op    string `json:\"op\"`\n    Path  string `json:\"path\"`\n    Value string `json:\"value\"`\n}\nfunc main() {\n    var updateErr error\n    cfg := &eksauth.ClusterConfig{ClusterName: \"my cluster name\"}\n    clientset, _ := eksauth.NewAuthClient(cfg)\n    api := clientset.CoreV1()\n\n    // Get all pods from all namespaces without the \"sent_alert_emailed\" label.\n    pods, _ := api.Pods(\"\").List(metav1.ListOptions{LabelSelector: \"!sent_alert_emailed\"})\n    for i, pod := range pods.Items {\n        fmt.Println(fmt.Sprintf(\"[%2d] %s, Phase: %s, Created: %s, HostIP: %s\", i, pod.GetName(), string(pod.Status.Phase), pod.GetCreationTimestamp(), string(pod.Status.HostIP)))\n        payload := []patchStringValue{{\n            Op:    \"replace\",\n            Path:  \"/metadata/labels/sent_alert_emailed\",\n            Value: time.Now().Format(\"2006-01-02_15.04.05\"),\n        }}\n        payloadBytes, _ := json.Marshal(payload)\n        _, updateErr = api.Pods(pod.GetNamespace()).Patch(pod.GetName(), types.JSONPatchType, payloadBytes)\n        if updateErr == nil {\n            fmt.Println(fmt.Sprintf(\"Pod %s labelled successfully.\", pod.GetName()))\n        } else {\n            fmt.Println(updateErr)\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56394456/unmarshal-json-field-is-int-or-string",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"strconv\"\n\t\"unicode/utf8\"\n)\ntype Person struct {\n\tName string          `json:\"name\"`\n\tAge  json.RawMessage `json:\"age\"`\n}\nfunc main() {\n\tvar j = []byte(`{\"name\": \"Joe\",\"age\": \"42\"}`)\n\tvar j2 = []byte(`{\"name\": \"Joe\",\"age\": 42}`)\n\tstringOrInt(j)\n\tstringOrInt(j2)\n}\nfunc stringOrInt(bytes []byte) {\n\tvar p Person\n\terr := json.Unmarshal(bytes, &p)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif utf8.Valid(p.Age) {\n\t\ti, err := strconv.Atoi(string(p.Age))\n\t\tif err != nil {\n\t\t\tfmt.Println(\"got int \" + strconv.Itoa(i))\n\t\t} else {\n\t\t\tfmt.Println(\"got string\")\n\t\t}\n\t} else {\n\t\tfmt.Println(\"whoops\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51717409/is-there-any-way-to-sign-the-windows-executables-generated-by-the-go-compiler",
    "body": "# golang makefile based on https://golangdocs.com/makefiles-golang\nBINARY_NAME=mygoproject.exe\n\nbuild:\n\tgo build -o ${BINARY_NAME} main.go\n\t# This runs signtool with a cert in your profile store instead of a *.pfx file, to avoid needing to store a password in the makefile or environment variable: https://stackoverflow.com/questions/26998439/signtool-with-certificate-stored-in-local-computer\n\tsigntool sign /sm /s My /n <certificateSubjectName> /t http://timestamp.digicert.com ${BINARY_NAME}\n\nrun:\n\tgo build -o ${BINARY_NAME} main.go\n\t./${BINARY_NAME}\n\nclean:\n\tgo clean\n\trm ${BINARY_NAME}"
  },
  {
    "url": "https://stackoverflow.com/questions/73935038/how-to-pass-remote-parent-span-properly-using-nats",
    "body": "func getParentContext(msg *nats.Msg) (spanContext trace.SpanContext, err error) {\n\tvar traceID trace.TraceID\n\ttraceID, err = trace.TraceIDFromHex(msg.Header.Get(otelTraceID))\n\tif err != nil {\n\t\treturn spanContext, err\n\t}\n\tvar spanID trace.SpanID\n\tspanID, err = trace.SpanIDFromHex(msg.Header.Get(otelSpanID))\n\tif err != nil {\n\t\treturn spanContext, err\n\t}\n\tvar spanContextConfig trace.SpanContextConfig\n\tspanContextConfig.TraceID = traceID\n\tspanContextConfig.SpanID = spanID\n\tspanContextConfig.TraceFlags = 01\n\tspanContextConfig.Remote = true\n\tspanContext = trace.NewSpanContext(spanContextConfig)\n\treturn spanContext, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70764915/how-to-check-the-size-of-packages-linked-into-my-go-code",
    "body": "package main\nimport (\n\t\"debug/elf\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"sort\"\n\t\"strings\"\n\t\"github.com/go-delve/delve/pkg/proc\"\n)\nfunc main() {\n\t// Use delve to decode the DWARF section\n\tbinInfo := proc.NewBinaryInfo(runtime.GOOS, runtime.GOARCH)\n\terr := binInfo.AddImage(os.Args[1], 0)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Make a list of unique packages\n\tpkgs := make([]string, 0, len(binInfo.PackageMap))\n\tfor _, fullPkgs := range binInfo.PackageMap {\n\t\tfor _, fullPkg := range fullPkgs {\n\t\t\texists := false\n\t\t\tfor _, pkg := range pkgs {\n\t\t\t\tif fullPkg == pkg {\n\t\t\t\t\texists = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !exists {\n\t\t\t\tpkgs = append(pkgs, fullPkg)\n\t\t\t}\n\t\t}\n\t}\n\t// Sort them for a nice output\n\tsort.Strings(pkgs)\n\t// Parse the ELF file ourselfs\n\telfFile, err := elf.Open(os.Args[1])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Get the symbol table\n\tsymbols, err := elfFile.Symbols()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tusage := make(map[string]map[string]int)\n\tfor _, sym := range symbols {\n\t\tif sym.Section == elf.SHN_UNDEF || sym.Section >= elf.SectionIndex(len(elfFile.Sections)) {\n\t\t\tcontinue\n\t\t}\n\t\tsectionName := elfFile.Sections[sym.Section].Name\n\t\tsymPkg := \"\"\n\t\tfor _, pkg := range pkgs {\n\t\t\tif strings.HasPrefix(sym.Name, pkg) {\n\t\t\t\tsymPkg = pkg\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Symbol doesn't belong to a known package\n\t\tif symPkg == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tpkgStats := usage[symPkg]\n\t\tif pkgStats == nil {\n\t\t\tpkgStats = make(map[string]int)\n\t\t}\n\t\tpkgStats[sectionName] += int(sym.Size)\n\t\tusage[symPkg] = pkgStats\n\t}\n\tfor _, pkg := range pkgs {\n\t\tsections, exists := usage[pkg]\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"%s:\\n\", pkg)\n\t\tfor section, size := range sections {\n\t\t\tfmt.Printf(\"%15s: %8d bytes\\n\", section, size)\n\t\t}\n\t\tfmt.Println()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70764915/how-to-check-the-size-of-packages-linked-into-my-go-code",
    "body": "bufio:\n          .text:    12733 bytes\n     .noptrdata:       64 bytes\n           .bss:      176 bytes\n        .rodata:       72 bytes\nbytes:\n           .bss:       48 bytes\n        .rodata:       64 bytes\n          .text:    12617 bytes\n     .noptrdata:      320 bytes\ncompress/flate:\n          .text:    20385 bytes\n     .noptrdata:      248 bytes\n           .bss:     2112 bytes\n      .noptrbss:       12 bytes\n        .rodata:       48 bytes\ncompress/zlib:\n          .text:     4138 bytes\n     .noptrdata:       96 bytes\n           .bss:       48 bytes\ncontainer/list:\n          .text:     4016 bytes\ncontext:\n          .text:      387 bytes\n     .noptrdata:       72 bytes\n           .bss:       40 bytes\ncrypto:\n          .text:    20982 bytes\n     .noptrdata:      416 bytes\n           .bss:       96 bytes\n        .rodata:       58 bytes\n      .noptrbss:        3 bytes\ndebug/dwarf:\n        .rodata:     1088 bytes\n          .text:   113878 bytes\n     .noptrdata:      247 bytes\n           .bss:       64 bytes\ndebug/elf:\n        .rodata:      168 bytes\n          .text:    36557 bytes\n     .noptrdata:      112 bytes\n          .data:     5160 bytes\n           .bss:       16 bytes\ndebug/macho:\n          .text:    22980 bytes\n     .noptrdata:       96 bytes\n          .data:      456 bytes\n        .rodata:       80 bytes\ndebug/pe:\n          .text:    26004 bytes\n     .noptrdata:       96 bytes\n        .rodata:      288 bytes\nencoding/base64:\n           .bss:       32 bytes\n        .rodata:       48 bytes\n          .text:      846 bytes\n     .noptrdata:       56 bytes\nencoding/binary:\n          .text:    27108 bytes\n     .noptrdata:       72 bytes\n           .bss:       56 bytes\n        .rodata:      136 bytes\nencoding/hex:\n           .bss:       16 bytes\n          .text:      288 bytes\n     .noptrdata:       64 bytes\nencoding/json:\n        .rodata:      108 bytes\n          .text:     2930 bytes\n     .noptrdata:      128 bytes\n           .bss:       80 bytes\nerrors:\n        .rodata:       48 bytes\n          .text:      744 bytes\n     .noptrdata:       40 bytes\n           .bss:       16 bytes\nfmt:\n          .text:    72010 bytes\n     .noptrdata:      136 bytes\n          .data:      104 bytes\n           .bss:       32 bytes\n        .rodata:      720 bytes\ngithub.com/cilium/ebpf:\n          .text:   170860 bytes\n     .noptrdata:     1405 bytes\n           .bss:      608 bytes\n        .rodata:     3971 bytes\n          .data:       16 bytes\n      .noptrbss:        8 bytes\ngithub.com/go-delve/delve/pkg/dwarf/frame:\n          .text:    18304 bytes\n     .noptrdata:       80 bytes\n           .bss:        8 bytes\n        .rodata:      211 bytes\ngithub.com/go-delve/delve/pkg/dwarf/godwarf:\n          .text:    40431 bytes\n     .noptrdata:      144 bytes\n        .rodata:      352 bytes\ngithub.com/go-delve/delve/pkg/dwarf/line:\n           .bss:       48 bytes\n        .rodata:      160 bytes\n          .text:    24069 bytes\n     .noptrdata:       96 bytes\ngithub.com/go-delve/delve/pkg/dwarf/loclist:\n     .noptrdata:       64 bytes\n        .rodata:       64 bytes\n          .text:     4538 bytes\ngithub.com/go-delve/delve/pkg/dwarf/op:\n          .text:    31142 bytes\n     .noptrdata:       80 bytes\n           .bss:       72 bytes\n        .rodata:     5313 bytes\ngithub.com/go-delve/delve/pkg/dwarf/reader:\n     .noptrdata:       72 bytes\n           .bss:       16 bytes\n        .rodata:       24 bytes\n          .text:     8037 bytes\ngithub.com/go-delve/delve/pkg/dwarf/regnum:\n           .bss:       40 bytes\n        .rodata:     2760 bytes\n          .text:     3943 bytes\n     .noptrdata:       48 bytes\ngithub.com/go-delve/delve/pkg/dwarf/util:\n          .text:     4028 bytes\n     .noptrdata:       64 bytes\n        .rodata:       96 bytes\ngithub.com/go-delve/delve/pkg/elfwriter:\n          .text:     3394 bytes\n     .noptrdata:       48 bytes\n        .rodata:       48 bytes\ngithub.com/go-delve/delve/pkg/goversion:\n     .noptrdata:      104 bytes\n           .bss:       64 bytes\n        .rodata:      160 bytes\n          .text:     4415 bytes\ngithub.com/go-delve/delve/pkg/logflags:\n           .bss:       32 bytes\n        .rodata:       40 bytes\n          .text:     2610 bytes\n     .noptrdata:      136 bytes\n      .noptrbss:        3 bytes\ngithub.com/go-delve/delve/pkg/proc:\n          .text:   432477 bytes\n     .noptrdata:      718 bytes\n          .data:     1448 bytes\n           .bss:      592 bytes\n        .rodata:    10106 bytes\ngithub.com/go-delve/delve/pkg/version:\n          .text:     1509 bytes\n     .noptrdata:       72 bytes\n          .data:      112 bytes\n        .rodata:       40 bytes\ngithub.com/hashicorp/golang-lru/simplelru:\n          .text:     3911 bytes\n     .noptrdata:       32 bytes\n        .rodata:      160 bytes\ngithub.com/sirupsen/logrus:\n      .noptrbss:       20 bytes\n        .rodata:      696 bytes\n          .text:    40175 bytes\n     .noptrdata:      204 bytes\n          .data:       64 bytes\n           .bss:       56 bytes\ngo/ast:\n          .text:    24407 bytes\n     .noptrdata:      104 bytes\n          .data:      112 bytes\n        .rodata:      120 bytes\ngo/constant:\n           .bss:        8 bytes\n        .rodata:      824 bytes\n          .text:    33910 bytes\n     .noptrdata:       88 bytes\ngo/parser:\n        .rodata:     1808 bytes\n          .text:    78751 bytes\n     .noptrdata:      136 bytes\n           .bss:       32 bytes\ngo/printer:\n          .text:    77202 bytes\n     .noptrdata:      113 bytes\n          .data:       24 bytes\n        .rodata:     1504 bytes\ngo/scanner:\n        .rodata:      240 bytes\n          .text:    18594 bytes\n     .noptrdata:       93 bytes\n          .data:       24 bytes\ngo/token:\n     .noptrdata:       72 bytes\n          .data:     1376 bytes\n           .bss:        8 bytes\n        .rodata:      192 bytes\n          .text:     7154 bytes\ngolang.org/x/arch/arm64/arm64asm:\n        .rodata:      856 bytes\n          .text:   116428 bytes\n     .noptrdata:       80 bytes\n           .bss:       80 bytes\n          .data:    46128 bytes\ngolang.org/x/arch/x86/x86asm:\n     .noptrdata:    29125 bytes\n           .bss:      112 bytes\n          .data:    20928 bytes\n        .rodata:     1252 bytes\n          .text:    76721 bytes\ngolang.org/x/sys/unix:\n          .text:     1800 bytes\n     .noptrdata:      128 bytes\n        .rodata:       70 bytes\n          .data:       80 bytes\nhash/adler32:\n          .text:     1013 bytes\n     .noptrdata:       40 bytes\ninternal/bytealg:\n        .rodata:       56 bytes\n      .noptrbss:        8 bytes\n          .text:     1462 bytes\n     .noptrdata:       32 bytes\ninternal/cpu:\n        .rodata:      500 bytes\n      .noptrbss:      416 bytes\n     .noptrdata:        8 bytes\n           .bss:       24 bytes\n          .text:     3017 bytes\ninternal/fmtsort:\n          .text:     7443 bytes\n     .noptrdata:       40 bytes\n        .rodata:       40 bytes\ninternal/oserror:\n          .text:      500 bytes\n     .noptrdata:       40 bytes\n           .bss:       80 bytes\ninternal/poll:\n          .text:    31565 bytes\n        .rodata:      192 bytes\n     .noptrdata:      112 bytes\n          .data:       96 bytes\n           .bss:       64 bytes\n      .noptrbss:       12 bytes\ninternal/reflectlite:\n          .text:    13761 bytes\n     .noptrdata:       32 bytes\n          .data:      456 bytes\n           .bss:       24 bytes\n        .rodata:      496 bytes\ninternal/syscall/unix:\n        .rodata:       72 bytes\n          .text:      708 bytes\n     .noptrdata:       40 bytes\n      .noptrbss:        4 bytes\ninternal/testlog:\n          .text:      827 bytes\n     .noptrdata:       32 bytes\n      .noptrbss:       12 bytes\n           .bss:       16 bytes\n        .rodata:       72 bytes\nio:\n     .noptrdata:      240 bytes\n           .bss:      272 bytes\n          .data:       56 bytes\n      .noptrbss:        0 bytes\n        .rodata:      128 bytes\n          .text:    10824 bytes\nlog:\n          .text:      188 bytes\n     .noptrdata:       80 bytes\n           .bss:        8 bytes\nmain:\n          .text:     3002 bytes\n     .noptrdata:       80 bytes\n        .rodata:      104 bytes\nmath:\n          .data:      136 bytes\n           .bss:     2672 bytes\n          .text:   184385 bytes\n     .noptrdata:    10211 bytes\n        .rodata:     2076 bytes\n      .noptrbss:        2 bytes\nnet:\n          .text:    24417 bytes\n     .noptrdata:      236 bytes\n          .data:      240 bytes\n           .bss:      584 bytes\n      .noptrbss:       16 bytes\n        .rodata:       48 bytes\nos:\n           .bss:      264 bytes\n          .data:       32 bytes\n        .rodata:      352 bytes\n          .text:    46276 bytes\n     .noptrdata:      296 bytes\n      .noptrbss:        1 bytes\npath:\n          .text:     9378 bytes\n     .noptrdata:      136 bytes\n           .bss:       48 bytes\n        .rodata:       48 bytes\nreflect:\n      .noptrbss:        1 bytes\n          .text:    97417 bytes\n     .noptrdata:       72 bytes\n        .rodata:     1728 bytes\n          .data:      456 bytes\n           .bss:      160 bytes\nregexp:\n        .rodata:      968 bytes\n          .text:   126451 bytes\n     .noptrdata:      558 bytes\n           .bss:      296 bytes\n      .noptrbss:       16 bytes\n          .data:      816 bytes\nruntime:\n      .noptrbss:    20487 bytes\n          .data:     8520 bytes\n           .bss:   184836 bytes\n          .tbss:        8 bytes\n      .typelink:     9020 bytes\n     .gopclntab:        0 bytes\n          .text:   408713 bytes\n     .noptrdata:     4347 bytes\n        .rodata:    23102 bytes\n      .itablink:     2952 bytes\nsort:\n          .text:    13055 bytes\n     .noptrdata:       32 bytes\n          .data:       16 bytes\n        .rodata:       24 bytes\nstrconv:\n          .text:    45928 bytes\n     .noptrdata:    17015 bytes\n          .data:     1680 bytes\n           .bss:       32 bytes\n        .rodata:      144 bytes\nstrings:\n          .text:    21070 bytes\n     .noptrdata:      320 bytes\n        .rodata:      168 bytes\nsync:\n        .rodata:      476 bytes\n     .noptrdata:       56 bytes\n           .bss:       56 bytes\n      .noptrbss:        8 bytes\n          .text:    14288 bytes\nsyscall:\n     .noptrdata:      127 bytes\n        .rodata:      978 bytes\n      .noptrbss:       76 bytes\n           .bss:      264 bytes\n          .data:     2720 bytes\n          .text:    33728 bytes\ntext/tabwriter:\n          .data:       96 bytes\n        .rodata:       88 bytes\n          .text:     8002 bytes\n     .noptrdata:       46 bytes\ntext/template:\n          .text:   166284 bytes\n     .noptrdata:      316 bytes\n      .noptrbss:        8 bytes\n           .bss:      176 bytes\n          .data:      376 bytes\n        .rodata:     3152 bytes\ntime:\n          .text:    83290 bytes\n     .noptrdata:      164 bytes\n          .data:      912 bytes\n           .bss:      208 bytes\n      .noptrbss:       20 bytes\n        .rodata:      832 bytes\nunicode:\n     .noptrdata:    50398 bytes\n          .data:    15248 bytes\n           .bss:       40 bytes\n      .noptrbss:        0 bytes\n          .text:    27198 bytes"
  },
  {
    "url": "https://stackoverflow.com/questions/67422258/how-to-perform-aws-s3-multipart-copy-with-golang",
    "body": "import (\n\t\"logger\"\n\t\"context\"\n\t\"errors\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n    \"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3/types\"\n)\n//constant for number of bits in 5 megabyte chunk\nconst max_part_size = 5 * 1024 * 1024\nvar log *logger.Logger\n//helper function to build the string for the range of bits to copy\nfunc buildCopySourceRange(start int64, objectSize int64) string {\n\tend := start + max_part_size - 1\n\tif end > objectSize {\n\t\tend = objectSize - 1\n\t}\n\tstartRange := strconv.FormatInt(start, 10)\n\tstopRange := strconv.FormatInt(end, 10)\n\treturn \"bytes=\" + startRange + \"-\" + stopRange\n}\n//function that starts, perform each part upload, and completes the copy\nfunc MultiPartCopy(svc *s3.Client, fileSize int64, sourceBucket string, sourceKey string, destBucket string, destKey string) error {\n\tlog = logger.GetLogger()\n\tctx, cancelFn := context.WithTimeout(context.TODO(), 10*time.Minute)\n\tdefer cancelFn()\n\t//struct for starting a multipart upload\n\tstartInput := s3.CreateMultipartUploadInput{\n\t\tBucket: &destBucket,\n\t\tKey:    &destKey,\n\t}\n\t//send command to start copy and get the upload id as it is needed later\n\tvar uploadId string\n\tcreateOutput, err := svc.CreateMultipartUpload(ctx, &startInput)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif createOutput != nil {\n\t\tif createOutput.UploadId != nil {\n\t\t\tuploadId = *createOutput.UploadId\n\t\t}\n\t}\n\tif uploadId == \"\" {\n\t\treturn errors.New(\"No upload id found in start upload request\")\n\t}\n\tvar i int64\n\tvar partNumber int32 = 1\n\tcopySource := \"/\" + sourceBucket + \"/\" + sourceKey\n\tparts := make([]types.CompletedPart, 0)\n\tnumUploads := fileSize / max_part_size\n\tlog.Infof(\"Will attempt upload in %d number of parts to %s\", numUploads, destKey)\n\tfor i = 0; i < fileSize; i += max_part_size {\n\t\tcopyRange := buildCopySourceRange(i, fileSize)\n\t\tpartInput := s3.UploadPartCopyInput{\n\t\t\tBucket:          &destBucket,\n\t\t\tCopySource:      &copySource,\n\t\t\tCopySourceRange: &copyRange,\n\t\t\tKey:             &destKey,\n\t\t\tPartNumber:      partNumber,\n\t\t\tUploadId:        &uploadId,\n\t\t}\n\t\tlog.Debugf(\"Attempting to upload part %d range: %s\", partNumber, copyRange)\n\t\tpartResp, err := svc.UploadPartCopy(context.TODO(), &partInput)\n\t\tif err != nil {\n\t\t\tlog.Error(\"Attempting to abort upload\")\n\t\t\tabortIn := s3.AbortMultipartUploadInput{\n\t\t\t\tUploadId: &uploadId,\n\t\t\t}\n\t\t\t//ignoring any errors with aborting the copy\n\t\t\tsvc.AbortMultipartUpload(context.TODO(), &abortIn)\n\t\t\treturn fmt.Errorf(\"Error uploading part %d : %w\", partNumber, err)\n\t\t}\n\t\t//copy etag and part number from response as it is needed for completion\n\t\tif partResp != nil {\n\t\t\tpartNum := partNumber\n\t\t\tetag := strings.Trim(*partResp.CopyPartResult.ETag, \"\\\"\")\n\t\t\tcPart := types.CompletedPart{\n\t\t\t\tETag:       &etag,\n\t\t\t\tPartNumber: partNum,\n\t\t\t}\n\t\t\tparts = append(parts, cPart)\n\t\t\tlog.Debugf(\"Successfully upload part %d of %s\", partNumber, uploadId)\n\t\t}\n\t\tpartNumber++\n\t\tif partNumber%50 == 0 {\n\t\t\tlog.Infof(\"Completed part %d of %d to %s\", partNumber, numUploads, destKey)\n\t\t}\n\t}\n\t//create struct for completing the upload\n\tmpu := types.CompletedMultipartUpload{\n\t\tParts: parts,\n\t}\n\t//complete actual upload\n\t//does not actually copy if the complete command is not received\n\tcomplete := s3.CompleteMultipartUploadInput{\n\t\tBucket:          &destBucket,\n\t\tKey:             &destKey,\n\t\tUploadId:        &uploadId,\n\t\tMultipartUpload: &mpu,\n\t}\n\tcompOutput, err := svc.CompleteMultipartUpload(context.TODO(), &complete)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"Error completing upload: %w\", err)\n\t}\n\tif compOutput != nil {\n\t\tlog.Infof(\"Successfully copied Bucket: %s Key: %s to Bucket: %s Key: %s\", sourceBucket, sourceKey, destBucket, destKey)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65610580/how-can-we-add-our-own-timestamp-in-prometheus-metric-series",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/prometheus/common/log\"\n)\ntype myCollector struct {\n\tmetric *prometheus.Desc\n}\nfunc (c *myCollector) Describe(ch chan<- *prometheus.Desc) {\n\tch <- c.metric\n}\nfunc (c *myCollector) Collect(ch chan<- prometheus.Metric) {\n\t// your logic should be placed here\n\tt := time.Date(2009, time.November, 10, 23, 0, 0, 12345678, time.UTC)\n\ts := prometheus.NewMetricWithTimestamp(t, prometheus.MustNewConstMetric(c.metric, prometheus.CounterValue, 123))\n\tch <- s\n}\nfunc main() {\n\tcollector := &myCollector{\n\t\tmetric: prometheus.NewDesc(\n\t\t\t\"my_metric\",\n\t\t\t\"This is my metric with custom TS\",\n\t\t\tnil,\n\t\t\tnil,\n\t\t),\n\t}\n\tprometheus.MustRegister(collector)\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Info(\"Beginning to serve on port :8080\")\n\thttp.ListenAndServe(\":2112\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63913044/json-stringify-equivalent-in-golang-for-mapstringinterface",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nfunc main() {\n    data := map[string]interface{}{\n\t\t\"isvalid\": true,\n\t\t\"value\": map[string]interface{}{\"prop\": nil},\n\t\t\"prop\": nil,\n\t}\n    final := removeNils(data)\n\tout, err := json.Marshal(final)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(out))\n}\nfunc removeNils(initialMap map[string]interface{}) map[string]interface{} {\n\twithoutNils := map[string]interface{}{}\n\tfor key, value := range initialMap {\n\t\t_, ok := value.(map[string]interface{})\n\t\tif ok {\n\t\t\tvalue = removeNils(value.(map[string]interface{}))\n\t\t\twithoutNils[key] = value\n\t\t\tcontinue\n\t\t}\n\t\tif value != nil {\n\t\t\twithoutNils[key] = value\n\t\t}\n\t}\n\treturn withoutNils\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60106885/how-can-i-check-if-my-db-query-returns-null-rows",
    "body": "age := 27\nrows, err := db.Query(\"SELECT name FROM users WHERE age=?\", age)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rows.Close()\nnames := make([]string, 0)\nfor rows.Next() {\n\tvar name string\n\tif err := rows.Scan(&name); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tnames = append(names, name)\n}\n// Check for errors from iterating over rows.\nif err := rows.Err(); err != nil {\n\tlog.Fatal(err)\n}\n// Check for no results\nif len(names) == 0 {\n\tlog.Fatal(\"No Results\")\n}\nlog.Printf(\"%s are %d years old\", strings.Join(names, \", \"), age)"
  },
  {
    "url": "https://stackoverflow.com/questions/53464099/read-multiple-yamls-in-a-file",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype Spec struct {\n\tName string `yaml:\"name\"`\n}\nfunc main() {\n\tf := io.Reader(os.Stdin)\n\td := yaml.NewDecoder(f)\n\tfor {\n\t\t// create new spec here\n\t\tspec := new(Spec)\n\t\t// pass a reference to spec reference\n\t\terr := d.Decode(&spec)\n\t\t// break the loop in case of EOF\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t// check it was parsed\n\t\tif spec == nil {\n\t\t\tfmt.Println(\"# spec is nil\")\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"name is '%s'\\n\", spec.Name)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64712646/how-to-properly-disconnect-mongodb-client",
    "body": "// db.go\npackage application\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"log\"\n\t\"os\"\n)\nvar client *mongo.Client\nfunc ResolveClientDB() *mongo.Client {\n\tif client != nil {\n\t\treturn client\n\t}\n\tvar err error\n    // TODO add to your .env.yml or .config.yml MONGODB_URI: mongodb://localhost:27017\n\tclientOptions := options.Client().ApplyURI(os.Getenv(\"MONGODB_URI\"))\n\tclient, err = mongo.Connect(context.Background(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// check the connection\n\terr = client.Ping(context.Background(), nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// TODO optional you can log your connected MongoDB client\n\treturn client\n}\nfunc CloseClientDB() {\n\tif client == nil {\n\t\treturn\n\t}\n\terr := client.Disconnect(context.TODO())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// TODO optional you can log your closed MongoDB client\n\tfmt.Println(\"Connection to MongoDB closed.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64712646/how-to-properly-disconnect-mongodb-client",
    "body": "// account_repository.go\n// TODO add here your account repository interface\nfunc (repository *accountRepository) getClient() *mongo.Client {\n\tif repository.client != nil {\n\t\treturn repository.client\n\t}\n\trepository.client = application.ResolveClientDB()\n\treturn repository.client\n}\nfunc (repository *accountRepository) FindOneByFilter(filter bson.D) (*model.Account, error) {\n\tvar account *model.Account\n\tcollection := repository.getClient().Database(\"yourDB\").Collection(\"account\")\n\terr := collection.FindOne(context.Background(), filter).Decode(&account)\n\treturn account, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64501096/how-to-mock-functions-from-libraries-like-amqp-dial",
    "body": "type AmqpChannel interface {\n\tExchangeDeclare(name, kind string, durable, autoDelete, internal, noWait bool, args amqp.Table) error\n\tQueueDeclare(name string, durable, autoDelete, exclusive, noWait bool, args amqp.Table) (amqp.Queue, error)\n\tQueueBind(name, key, exchange string, noWait bool, args amqp.Table) error\n\tConsume(queue, consumer string, autoAck, exclusive, noLocal, noWait bool, args amqp.Table) (<-chan amqp.Delivery, error)\n\tPublish(exchange, key string, mandatory, immediate bool, msg amqp.Publishing) error\n}\ntype AmqpConnection interface {\n\tChannel() (AmqpChannel, error)\n\tClose() error\n}\ntype AmqpDial func(url string) (AmqpConnection, error)"
  },
  {
    "url": "https://stackoverflow.com/questions/64501096/how-to-mock-functions-from-libraries-like-amqp-dial",
    "body": "func AmqpDialWrapper(url string) (AmqpConnection, error) {\n\tconn, err := amqp.Dial(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn AmqpConnectionWrapper{conn}, nil\n}\ntype AmqpConnectionWrapper struct {\n\tconn *amqp.Connection\n}\n// If *amqp.Channel does not satisfy the consumer.AmqpChannel interface\n// then you'll need another wrapper, a AmqpChannelWrapper, that implements\n// the consumer.AmqpChannel interface and delegates to *amqp.Channel.\nfunc (w AmqpConnectionWrapper) Channel() (AmqpChannel, error) {\n\treturn w.conn.Channel()\n}\nfunc (w AmqpConnectionWrapper) Close() error {\n\treturn w.conn.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73845670/convert-netip-addr-to-net-ip-for-ipv4-address-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/netip\"\n)\nfunc main() {\n\t// example Addr type\n\taddr, err := netip.ParseAddr(\"10.0.0.1\")\n\tfmt.Println(addr, err)\n\t// get Addr as []byte\n\ts := addr.AsSlice()\n\t// cast bytes slice to net.IP (it works as net.IP underlying type is also []byte so net.IP and []byte are identical)\n\tip := net.IP(s)\n\tfmt.Println(ip.IsPrivate())\n\t// lets see if everything works creating netip.Addr from net.IP (here you can also see how types work as netip.AddrFromSlice accepts []byte)\n\taddrFromIp, ok := netip.AddrFromSlice(ip)\n\tfmt.Println(addrFromIp, ok)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71987196/decrypt-in-go-what-was-encrypted-with-aes-in-cfb-mode-in-python",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n)\nfunc main() {\n\tciphertextHex := \"546ddf226c4c556c7faa386940f4fff9b09f7e3a2ccce2ed26f7424cf9c8cd743e826bc8a2854bb574df9f86a94e7b2b1e63886953a6a3eb69eaa5fa03d69ba5\" // Fix 1: Apply CFB128 on the Python side\n\tfmt.Println(Decrypt(ciphertextHex))                                                                                                                 // The quick brown fox jumps over the lazy dog\n}\nfunc PKCS5UnPadding(src []byte) []byte {\n\tlength := len(src)\n\tunpadding := int(src[length-1])\n\treturn src[:(length - unpadding)]\n}\nfunc Decrypt(ciphertext string) string {\n\th := sha256.New()\n\t//h.Write([]byte(os.Getenv(\"SECRET\")))\n\th.Write([]byte(\"my passphrase\")) // Apply passphrase from Python side\n\tkey := h.Sum(nil)\n\t//ciphertext_bytes := []byte(ciphertext)\n\tciphertext_bytes, _ := hex.DecodeString(ciphertext) // Fix 2. Hex decode ciphertext\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tiv := ciphertext_bytes[:aes.BlockSize]\n\tif len(ciphertext) < aes.BlockSize {\n\t\tpanic(\"ciphertext too short\")\n\t}\n\tciphertext_bytes = ciphertext_bytes[aes.BlockSize:]\n\tstream := cipher.NewCFBDecrypter(block, iv)\n\tstream.XORKeyStream(ciphertext_bytes, ciphertext_bytes)\n\tplaintext := PKCS5UnPadding(ciphertext_bytes)\n\treturn string(plaintext)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70574193/how-do-i-validate-the-body-structure-of-rest-api-request-in-golang",
    "body": "type UpdatePasswordData struct {\n        Password  string `json:\"password\" validate:\"required,min=8,max=32\"`\n        NewPassword string `json:\"new_password\" validate:\"required,min=8,max=32\"`\n        NewPasswordConfirm string `json:\"new_password_confirm\" validate:\"eqfield=NewPassword\"`\n}\nfunc UpdatePassword(c *fiber.Ctx) error {\n  var body UpdatePasswordData\n  if err := c.BodyParser(&body); err != nil {\n    return err\n  }\n  validate := validator.New()\n  if err := validate.Struct(body); err != nil {\n    return err\n  }\n  // do others\n  // get current user, check password == hash(body.password)\n  // save new passworld\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67281831/grpc-web-request-using-golang-client",
    "body": "grpcServer := grpc.NewServer()\ngreetpb.RegisterGreetServiceServer(grpcServer, &server{})\n// Your application is probably doing other things and you will want to be\n// able to shutdown cleanly; passing in a context is a good method..\nctx, cancel = context.Cancel(context.Background())\ndefer cancel()   // Ensure cancel function is called eventually\n// Start the grpc server on port 50050\ngrpcTerminated := make(chan struct{})\nlis, err := net.Listen(\"tcp\", \":50050\")\nif err != nil {\n\tpanic(fmt.Sprintf(\"gRPC - failed to listen: %s\", err))\n}\ngo func() {\n\tif sErr := grpcServer.Serve(lis); sErr != nil {\n\t   fmt.Printf(\"grpc server shutdown: %s\", err)\n\t}\n\tclose(grpcTerminated) // In case server is terminated without us requesting this\n}()\n// Start the grpc-Web server on port 5051\ngrpcWebTerminated := make(chan struct{})\ngrpc := grpcweb.WrapServer(grpcServer)\nmux := http.NewServeMux()\nmux.HandleFunc(\"/\", func(resp http.ResponseWriter, req *http.Request) {\n   allowCors(resp, req)\n   if grpc.IsGrpcWebRequest(req) || grpc.IsAcceptableGrpcCorsRequest(req) {\n      grpc.ServeHTTP(resp, req)\n    }\n}))\nrpcWebServer := &http.Server{\n\t\tHandler: mux,\n\t\tAddr:    \":50051\"}\nwg.Add(1)\ngo func() {\n   defer wg.Done()\n   if err := rpcWebServer.ListenAndServe(); err != nil {\n      fmt.Printf(\"Web server (GRPC) shutdown: %s\", err)\n   }\n   close(grpcWebTerminated) // In case server is terminated without us requesting this\n}()\n// Wait for the web server to shutdown OR the context to be cancelled...\nselect {\n   case <-ctx.Done():\n      // Shutdown the servers (there are shutdown commands to request this)\n   case <-grpcTerminated:\n      // You may want to exit if this happens (will be due to unexpected error)\n   case <-grpcWebTerminated:\n      // You may want to exit if this happens (will be due to unexpected error)\n}\n// Wait for the goRoutines to complete\n<-grpcTerminated:\n<-grpcWebTerminated"
  },
  {
    "url": "https://stackoverflow.com/questions/66090686/gqlgen-set-cookie-from-resolver",
    "body": "func setValInCtx(ctx *gin.Context, val interface{}) {\n    newCtx := context.WithValue(ctx.Request.Context(), \"ctxCookieAccessKey\", val)\n    ctx.Request = ctx.Request.WithContext(newCtx)\n}\nfunc Middleware() gin.HandlerFunc {\n    return func(ctx *gin.Context) {\n        cookieA := CookieAccess{\n            Writer: ctx.Writer,\n            IsLoggedIn: false, // Assume not logged in by default\n            UserId: 0,\n        }\n        setValInCtx(ctx, &cookieA)\n        c, err := ctx.Request.Cookie(\"tokenKey\")\n        if err != nil {\n            // If there's an error fetching the cookie, log it and proceed\n            log.Printf(\"Error fetching 'tokenKey' cookie: %v\", err)\n            ctx.Next()\n            return\n        }\n        // Proceed with token parsing only if the cookie is successfully fetched\n        rawToken := c.Value\n        userId, err := ParseToken(rawToken)\n        if err != nil {\n            // If there's an error parsing the token, log it and ensure user is not logged in\n            log.Printf(\"Error parsing token: %v\", err)\n        } else {\n            // If token is successfully parsed, mark user as logged in and set UserId\n            cookieA.IsLoggedIn = true\n            cookieA.UserId = userId\n        }\n        ctx.Next()\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66090686/gqlgen-set-cookie-from-resolver",
    "body": "func (r *MutationResolver) logginOrConsumerResolver(ctx context.Context, input Credentials) (*Response, error) {\n    // ctx.Request.Context() from middleware is here\n    ca := ctx.Value(\"ctxCookieAccessKey\").(*CookieAccess)\n    if ca.IsLoggedIn {\n        // this is the way to get token proceed result in other resolvers\n        return nil, fmt.Errorf(\"you are already have a valid token, userId: %v\", ca.userId)\n    }\n    http.SetCookie(ca.Writer, &http.Cookie{\n        Name:     \"tokenKey\",\n        Value:    token, // make your token\n        HttpOnly: true,\n        Path:     \"/\",\n        Expires:  time.Now().Add(24 * time.Hour),\n    })\n    return nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79547974/how-to-return-a-hashref-when-using-perl-xs",
    "body": "package main\n/*\n#define PERL_NO_GET_CONTEXT\n#include \"EXTERN.h\"\n#include \"perl.h\"\n#include \"XSUB.h\"\n// static inline avoids multiple definitions (see https://go.dev/wiki/cgo)\nstatic inline HV* helper_newHV(pTHX) { return newHV(); }\nstatic inline AV* helper_newAV(pTHX) { return newAV(); }\nstatic inline SV* helper_newRV_noinc(pTHX_ SV* thing) { return newRV_noinc(thing); }\nstatic inline SV* helper_newSVpv(pTHX_ const char* str, int len) { return newSVpv(str, len); }\nstatic inline SV* helper_newSViv(pTHX_ int i) { return newSViv(i); }\nstatic inline SV** helper_hv_store(pTHX_ HV* hv, const char* key, U32 klen, SV* val, U32 hash) {\n\treturn hv_store(hv, key, klen, val, hash);\n}\nstatic inline void helper_av_push(pTHX_ AV* av, SV* sv) { av_push(av, sv); }\n*/\nimport \"C\"\nimport \"unsafe\"\nfunc main() {}\ntype example struct {\n\tfoo string\n\tstatus int\n\tids []int\n}\n//export getit\nfunc getit(THX *C.PerlInterpreter) *C.SV {\n\tval := example{ foo: \"bar\", status: 1, ids: []int{1,2,3} };\n\thv := C.helper_newHV(THX);\n\tvar foo_key *C.char = C.CString(\"foo\")\n\tdefer C.free(unsafe.Pointer(foo_key))\n\tvar foo *C.char = C.CString(val.foo)\n\tdefer C.free(unsafe.Pointer(foo))\n\tfoo_val := C.helper_newSVpv(THX, foo, C.int(len(val.foo)))\n\tC.helper_hv_store(THX, hv, foo_key, C.uint(len(\"foo\")), foo_val, 0);\n\tvar status_key *C.char = C.CString(\"status\")\n\tdefer C.free(unsafe.Pointer(status_key))\n\tstatus_val := C.helper_newSViv(THX, C.int(val.status))\n\tC.helper_hv_store(THX, hv, status_key, C.uint(len(\"status\")), status_val, 0);\n\tids := C.helper_newAV(THX);\n\tfor _, id := range val.ids {\n\t\tC.helper_av_push(THX, ids, C.helper_newSViv(THX, C.int(id)))\n\t}\n\tvar ids_key *C.char = C.CString(\"ids\")\n\tdefer C.free(unsafe.Pointer(ids_key))\n\tids_val := C.helper_newRV_noinc(THX, (*C.SV)(unsafe.Pointer(ids)))\n\tC.helper_hv_store(THX, hv, ids_key, C.uint(len(\"ids\")), ids_val, 0);\n\trv := C.helper_newRV_noinc(THX, (*C.SV)(unsafe.Pointer(hv)))\n\treturn rv\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77473510/getting-address-and-private-key-for-mnemonic",
    "body": "package main\nimport (\n\t\"crypto/ecdsa\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/ethereum/go-ethereum/crypto\"\n\t\"github.com/tyler-smith/go-bip32\"\n\t\"github.com/tyler-smith/go-bip39\"\n)\nfunc main() {\n\t// Generate a mnemonic\n\tentropy, _ := bip39.NewEntropy(256)\n\tmnemonic, _ := bip39.NewMnemonic(entropy)\n\tfmt.Println(\"Mnemonic (gen): \", mnemonic)\n\t// Generate a Bip32 HD wallet for the mnemonic and a user supplied passphrase\n\tseed := bip39.NewSeed(mnemonic, \"Secret Passphrase\")\n\tmasterPrivateKey, _ := bip32.NewMasterKey(seed)\n\tmasterPublicKey := masterPrivateKey.PublicKey()\n\tfmt.Println(\"Master private key (gen): \", masterPrivateKey)\n\tfmt.Println(\"Master public key (gen): \", masterPublicKey)\n\t// Use Unsafe to suppress error, otherwise use crypto.ToECDSA\n\tecdaPrivateKey := crypto.ToECDSAUnsafe(masterPrivateKey.Key)\n\tecdaPublicKey := ecdaPrivateKey.Public().(*ecdsa.PublicKey)\n\tfmt.Println(\"ECDA Private key: \", ecdaPrivateKey.D)\n\tfmt.Println(\"ECDA Public key: \", ecdaPublicKey.X)\n\tprivateKeyHex := fmt.Sprintf(\"%x\", ecdaPrivateKey.D)\n\tpublicKeyHex := fmt.Sprintf(\"%x\", crypto.CompressPubkey(ecdaPublicKey)) // Encode a public key to the 33-byte compressed format\n\tfmt.Println(\"Private key (hex):\", privateKeyHex)\n\tfmt.Println(\"Public key (hex):\", publicKeyHex)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77473510/getting-address-and-private-key-for-mnemonic",
    "body": "// Decode the private key and public key from hex strings\n\tprivateKey, err := crypto.HexToECDSA(privateKeyHex)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid private key:\", err)\n\t\treturn\n\t}\n\tpublicKeyBytes, err := hex.DecodeString(publicKeyHex)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid public key:\", err)\n\t\treturn\n\t}\n\t// Use crypto.DecompressPubkey to decode the public key bytes\n\tgivenPublicKey, err := crypto.DecompressPubkey(publicKeyBytes)\n    if err != nil {\n\t\tfmt.Println(\"Invalid public key:\", err)\n\t\treturn\n\t}\n\t// Derive the public key from the private key\n\tderivedPublicKey := privateKey.Public().(*ecdsa.PublicKey)\n\t// Compare the derived public key with the given public key\n\tif derivedPublicKey.X.Cmp(givenPublicKey.X) == 0 && derivedPublicKey.Y.Cmp(givenPublicKey.Y) == 0 {\n\t\tfmt.Println(\"The private key matches the public key.\")\n\t} else {\n\t\tfmt.Println(\"The private key does not match the public key.\")\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/72121743/how-to-get-all-objects-with-jsonpaths-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/ohler55/ojg/jp\"\n\t\"github.com/ohler55/ojg/oj\"\n)\nvar jsonString string = `{\n// Your JSON string\n}`\nfunc main() {\n\tobj, err := oj.ParseString(jsonString)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tx, err := jp.ParseString(`$.phoneNumbers[?(@.type == \"iPhone\")]`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tys := x.Get(obj)\n\tfor k, v := range ys {\n\t\tfmt.Println(k, \"=>\", v)\n\t}\n}\n// Output:\n// 0 => map[number:0123-4567-8888 type:iPhone]\n// 1 => map[number:0123-4567-8910 type:iPhone]"
  },
  {
    "url": "https://stackoverflow.com/questions/55681650/golang-pack-a-struct",
    "body": "package main\nimport(\n        \"fmt\"\n        \"bytes\"\n        \"encoding/binary\"\n        \"unsafe\"\n)\ntype SomeStruct struct{\n    A   uint16\n    B   uint16\n    C   uint32\n    D   uint16\n}\nfunc main(){\n        var myStruct SomeStruct\n        myStruct.A = 1\n        myStruct.B = 2\n        myStruct.C = 3\n        myStruct.D = 4\n        buf := &bytes.Buffer{}\n        err := binary.Write(buf, binary.LittleEndian, myStruct)\n        fmt.Printf(\"Error: %v\\n\", err)\n        fmt.Printf(\"Sizeof myStruct: %d, Sizeof buf: %d, Len of buf: %d\\n\", unsafe.Sizeof(myStruct), unsafe.Sizeof(buf), buf.Len() )\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76458292/mock-awseventstream",
    "body": "func TestAwsEventStream(t *testing.T) {\n\tstreamEvents := make(chan s3.SelectObjectContentEventStreamEvent, 3)\n\teventStreamReader := stubSelectObjectContentEventStreamReader{\n\t\tStreamEvents: streamEvents,\n\t\tError:        nil,\n\t}\n\tmockEventStream := s3.NewSelectObjectContentEventStream(func(o *s3.SelectObjectContentEventStream) {\n\t\to.Reader = eventStreamReader\n\t\to.StreamCloser = io.NopCloser(bytes.NewReader(nil))\n\t})\n\tmockOutput := &s3.SelectObjectContentOutput{\n\t\tEventStream: mockEventStream,\n\t}\n\tstreamEvents <- &s3.RecordsEvent{Payload: []byte(\"hello world\")}\n    streamEvents <- &s3.EndEvent{}\n\tclose(streamEvents)\n\tgot := awsEventStream(mockOutput)\n\twant := \"hello world\"\n\tif got != want {\n\t\tt.Errorf(\"got %v, want %v\", got, want)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73717477/gcp-cloud-storage-golang-aws-sdk2-upload-file-with-s3-interoperability-creds",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\tv4 \"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/s3/manager\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nvar BUCKET_NAME = \"test\"\ntype RecalculateV4Signature struct {\n\tnext   http.RoundTripper\n\tsigner *v4.Signer\n\tcfg    aws.Config\n}\nfunc (lt *RecalculateV4Signature) RoundTrip(req *http.Request) (*http.Response, error) {\n\t// store for later use\n\tval := req.Header.Get(\"Accept-Encoding\")\n\t// delete the header so the header doesn't account for in the signature\n\treq.Header.Del(\"Accept-Encoding\")\n\t// sign with the same date\n\ttimeString := req.Header.Get(\"X-Amz-Date\")\n\ttimeDate, _ := time.Parse(\"20060102T150405Z\", timeString)\n\tcreds, _ := lt.cfg.Credentials.Retrieve(req.Context())\n\terr := lt.signer.SignHTTP(req.Context(), creds, req, v4.GetPayloadHash(req.Context()), \"s3\", lt.cfg.Region, timeDate)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Reset Accept-Encoding if desired\n\treq.Header.Set(\"Accept-Encoding\", val)\n\tfmt.Println(\"AfterAdjustment\")\n\trrr, _ := httputil.DumpRequest(req, false)\n\tfmt.Println(string(rrr))\n\t// follows up the original round tripper\n\treturn lt.next.RoundTrip(req)\n}\nfunc main() {\n\t//prepare gcp resolver\n\tgcpResolver := aws.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (aws.Endpoint, error) {\n\t\treturn aws.Endpoint{\n\t\t\tURL:               \"https://storage.googleapis.com\",\n\t\t\tSigningRegion:     \"auto\",\n\t\t\tSource:            aws.EndpointSourceCustom,\n\t\t\tHostnameImmutable: true,\n\t\t}, nil\n\t})\n\t//file with format : $accessKey:$secretKey\n\t//init the config options\n\toptConfig := []func(*config.LoadOptions) error{\n\t\tconfig.WithRegion(\"auto\"),\n\t\tconfig.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(\"test\", \"test\", \"session\")),\n\t\tconfig.WithClientLogMode(aws.LogRetries | aws.LogRequestWithBody | aws.LogResponseWithBody | aws.LogRequestEventMessage | aws.LogResponseEventMessage | aws.LogSigning),\n\t\tconfig.WithEndpointResolverWithOptions(gcpResolver),\n\t}\n\t//init config\n\tcfg, _ := config.LoadDefaultConfig(context.TODO(), optConfig...)\n\t// Assign custom client with our own transport\n\tcfg.HTTPClient = &http.Client{Transport: &RecalculateV4Signature{http.DefaultTransport, v4.NewSigner(), cfg}}\n\t//init service\n\tsvc := s3.NewFromConfig(cfg)\n\tuploader := manager.NewUploader(svc, func(u *manager.Uploader) {\n\t\tu.Concurrency = 1\n\t\tu.MaxUploadParts = 1\n\t})\n\t//upload\n\t_, err := uploader.Upload(context.TODO(), &s3.PutObjectInput{\n\t\tBucket: aws.String(BUCKET_NAME),\n\t\tKey:    aws.String(\"file-test.txt\"),\n\t\tBody:   strings.NewReader(\"HELLO\"),\n\t})\n\tfmt.Println(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72608810/kubernetes-client-go-use-informers-to-watch-deployments",
    "body": "labelOptions := informers.WithTweakListOptions(func(opts *v1.ListOptions) {\n    opts.FieldSelector = \"metadata.name=\" + name\n})\nfactory := informers.NewSharedInformerFactoryWithOptions(clientSet, 2*time.Second, informers.WithNamespace(namespace), labelOptions)\ninformer := factory.Apps().V1().Deployments().Informer()\ninformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n    AddFunc: func(obj interface{}) {\n        mObj, ok := obj.(*appsv1.Deployment)\n        if !ok {\n            doSomething()\n        }\n        replicas := int(*mObj.Spec.Replicas)\n        doSomething()\n    },\n\n    UpdateFunc: func(oldObj, newObj interface{}) {\n        old, ok := oldObj.(*appsv1.Deployment)\n        if !ok {\n            doSomething()\n        }\n        newDeployment, ok := newObj.(*appsv1.Deployment)\n        if !ok {\n            doSomething()\n        }\n        oldReplicas := int(*old.Spec.Replicas)\n        newReplicas := int(*newDeployment.Spec.Replicas)\n        if oldReplicas != newReplicas {\n            doSomething()\n        }\n    },\n})\n// Initializes all active informers and starts the internal goroutine\nfactory.Start(wait.NeverStop)\nfactory.WaitForCacheSync(wait.NeverStop)"
  },
  {
    "url": "https://stackoverflow.com/questions/72046461/how-to-insert-data-inside-googlesheet-using-golang-with-spreadsheetid-spreadsh",
    "body": "sheetid := 0 // Please set sheet ID.\nspreadsheetId := \"###\" // Please set Spreadsheet ID\nrecords := [][]interface{}{{\"a1\", \"b1\", \"c1\"}} // This is a sample value.\n// 1. Convert sheet ID to sheet name.\nresponse1, err := srv.Spreadsheets.Get(spreadsheetId).Fields(\"sheets(properties(sheetId,title))\").Do()\nif err != nil || response1.HTTPStatusCode != 200 {\n\treturn err\n}\nsheetName := \"\"\nfor _, v := range response1.Sheets {\n\tprop := v.Properties\n\tsheetID := prop.SheetId\n\tif sheetID == int64(sheetid) {\n\t\tsheetName = prop.Title\n\t\tbreak\n\t}\n}\n// 2. Append value to the sheet.\nvalueInputOption := \"USER_ENTERED\"\ninsertDataOption := \"INSERT_ROWS\"\nrb := &sheets.ValueRange{\n\tValues: records,\n}\nresponse2, err := srv.Spreadsheets.Values.Append(spreadsheetId, sheetName, rb).ValueInputOption(valueInputOption).InsertDataOption(insertDataOption).Context(ctx).Do()\nif err != nil || response2.HTTPStatusCode != 200 {\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71787548/how-to-measure-rtt-latency-through-tcp-clients-created-in-golang-from-a-tcp-se",
    "body": "//go:build linux\npackage main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n\t\"golang.org/x/sys/unix\"\n)\nfunc main() {\n\tlistener, err := net.Listen(\"tcp\", \":0\")\n\tcheck(err)\n\tfmt.Println(\"Listening on\", listener.Addr())\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tcheck(err)\n\t\tgo func(conn *net.TCPConn) {\n\t\t\tdefer conn.Close()\n\t\t\tinfo, err := tcpInfo(conn)\n\t\t\tcheck(err)\n\t\t\trtt := time.Duration(info.Rtt) * time.Microsecond\n\t\t\tfmt.Println(rtt)\n\t\t}(conn.(*net.TCPConn))\n\t}\n}\nfunc tcpInfo(conn *net.TCPConn) (*unix.TCPInfo, error) {\n\traw, err := conn.SyscallConn()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar info *unix.TCPInfo\n\tctrlErr := raw.Control(func(fd uintptr) {\n\t\tinfo, err = unix.GetsockoptTCPInfo(int(fd), unix.IPPROTO_TCP, unix.TCP_INFO)\n\t})\n\tswitch {\n\tcase ctrlErr != nil:\n\t\treturn nil, ctrlErr\n\tcase err != nil:\n\t\treturn nil, err\n\t}\n\treturn info, nil\n}\nfunc check(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70400426/how-to-properly-capture-zap-logger-output-in-unit-tests",
    "body": "func main() {\n    // some arbitrary custom core logger\n\tmycore := zapcore.NewCore(\n\t\tzapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n\t\tos.Stderr,\n\t\tzapcore.InfoLevel,\n\t)\n    // test core\n\tobserved, logs := observer.New(zapcore.InfoLevel)\n\n    // new logger with the two cores tee'd together\n\tlogger := zap.New(zapcore.NewTee(mycore, observed))\n\tlogger.Error(\"foo\")\n    entry := logs.All()[0]\n\tfmt.Println(entry.Message == \"foo\")            // true\n    fmt.Println(entry.Level == zapcore.ErrorLevel) // true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70400426/how-to-properly-capture-zap-logger-output-in-unit-tests",
    "body": "// this would be placed in your main code\nfunc NewCustomLogger(pipeTo io.Writer) zapcore.Core {\n\treturn zapcore.NewCore(\n\t\tzapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),\n\t\tzap.CombineWriteSyncers(os.Stderr, zapcore.AddSync(pipeTo)),\n\t\tzapcore.InfoLevel,\n\t)\n}\nfunc TestLogger(t *testing.T) {\n\tb := &bytes.Buffer{}\n    // call the constructor from your test code with the arbitrary writer\n\tmycore := NewCustomLogger(b)\n\tlogger := zap.New(mycore)\n\tlogger.Error(\"foo\")\n\tfmt.Println(b.String()) // {\"level\":\"error\",\"ts\":1639813360.853494,\"msg\":\"foo\"}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70189755/dockerfile-for-go-and-chromedp",
    "body": "package main\nimport (\n        \"context\"\n        \"log\"\n        \"fmt\"\n        \"time\"\n        \"github.com/chromedp/chromedp\"\n)\nfunc main() {\n        ctx, cancel := chromedp.NewContext(\n                context.Background(),\n                chromedp.WithLogf(log.Printf),\n        )\n        defer cancel()\n        ctx, cancel = context.WithTimeout(ctx, 15*time.Second)\n        defer cancel()\n        err := chromedp.Run(ctx,\n                chromedp.Navigate(`https://golang.org/pkg/time/`),\n        )\n        if err != nil {\n            fmt.Println(err)\n        }\n        fmt.Println(\"done\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69904000/can-not-use-enum-in-template",
    "body": "type flag int\nfunc (f flag) get() flag { return f }\nconst (\n\tAdmin flag = iota + 1 // iota = 0\n\tEditor\n)\nvar funcMap = template.FuncMap{\n\t\"Admin\":  Admin.get,\n\t\"Editor\": Editor.get,\n\t// ...\n}\nvar file = `{{ $v := . }}\n{{- if eq $v Admin }}is admin{{ else }}is not admin{{ end }}\n{{ if eq $v Editor }}is editor{{ else }}is not editor{{ end }}\n`\nfunc main() {\n\tt := template.Must(template.New(\"t\").Funcs(funcMap).Parse(file))\n\tfor _, v := range []interface{}{Admin, Editor, 1234} {\n\t\tif err := t.Execute(os.Stdout, v); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(\"----------------\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68971830/create-base-entity-in-go-ent-framework",
    "body": "func (User) Mixin() []ent.Mixin {\n    return []ent.Mixin{\n        TimeStamp{},\n    }\n}\nfunc (User) Fields() []ent.Field {\n    return []ent.Field{\n        field.Int(\"id\"),\n        field.String(\"name\").MaxLen(70),\n        field.String(\"email\"),\n    }\n}\n.....\nfunc (Product) Mixin() []ent.Mixin {\n    return []ent.Mixin{\n        TimeStamp{},\n    }\n}\nfunc (Product) Fields() []ent.Field {\n    return []ent.Field{\n        field.Int(\"id\"),\n        field.String(\"name\").MaxLen(70),\n        field.Float(\"price\"),\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68426700/how-to-wait-a-js-async-function-from-golang-wasm",
    "body": "func await(awaitable js.Value) ([]js.Value, []js.Value) {\n\tthen := make(chan []js.Value)\n\tdefer close(then)\n\tthenFunc := js.FuncOf(func(this js.Value, args []js.Value) interface{} {\n\t\tthen <- args\n\t\treturn nil\n\t})\n\tdefer thenFunc.Release()\n\tcatch := make(chan []js.Value)\n\tdefer close(catch)\n\tcatchFunc := js.FuncOf(func(this js.Value, args []js.Value) interface{} {\n\t\tcatch <- args\n\t\treturn nil\n\t})\n\tdefer catchFunc.Release()\n\tawaitable.Call(\"then\", thenFunc).Call(\"catch\", catchFunc)\n\tselect {\n\tcase result := <-then:\n\t\treturn result, nil\n\tcase err := <-catch:\n\t\treturn nil, err\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67543729/kubernetes-go-client-to-list-out-pod-details-similar-to-kubectl-get-pods",
    "body": "// List all the pods similar to kubectl get pods -n <my namespace>\n\t\t\tfor _, pod := range podList.Items {\n\t\t\t\t// Calculate the age of the pod\n\t\t\t\tpodCreationTime := pod.GetCreationTimestamp()\n\t\t\t\tage := time.Since(podCreationTime.Time).Round(time.Second)\n\t\t\t\t// Get the status of each of the pods\n\t\t\t\tpodStatus := pod.Status\n\t\t\t\tvar containerRestarts int32\n\t\t\t\tvar containerReady int\n\t\t\t\tvar totalContainers int\n\t\t\t\t// If a pod has multiple containers, get the status from all\n\t\t\t\tfor container := range pod.Spec.Containers {\n\t\t\t\t\tcontainerRestarts += podStatus.ContainerStatuses[container].RestartCount\n\t\t\t\t\tif podStatus.ContainerStatuses[container].Ready {\n\t\t\t\t\t\tcontainerReady++\n\t\t\t\t\t}\n\t\t\t\t\ttotalContainers++\n\t\t\t\t}\n\t\t\t\t// Get the values from the pod status\n\t\t\t\tname := pod.GetName()\n\t\t\t\tready := fmt.Sprintf(\"%v/%v\", containerReady, totalContainers)\n\t\t\t\tstatus := fmt.Sprintf(\"%v\", podStatus.Phase)\n\t\t\t\trestarts := fmt.Sprintf(\"%v\", containerRestarts)\n\t\t\t\tageS := age.String()\n\t\t\t\t// Append this to data to be printed in a table\n\t\t\t\tdata = append(data, []string{name, ready, status, restarts, ageS})\n\t\t\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/63785376/inserting-empty-string-or-null-into-postgres-as-null-using-jackc-pgx",
    "body": "type Dividend struct {\n\tSymbol  string  `json:\"symbol\"`\n\tDateex  string  `json:\"dateex\"`\n\tDatedec *string `json:\"datedec\"`\n\tAmount  string  `json:\"amount\"`\n\tCurr    *string `json:\"curr\"`\n\tFreq    string  `json:\"freq\"`\n}\nfunc unmarshal(in[]byte, div *Dividend) {\n\terr := json.Unmarshal(in, div)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    // The below is not necessary unless if you want to ensure that blanks\n    // and missing values are both written to the database as NULL...\n\tif div.Datedec != nil && len(*div.Datedec) == 0 {\n\t\tdiv.Datedec = nil\n\t}\n\tif div.Curr != nil && len(*div.Curr) == 0 {\n\t\tdiv.Curr = nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63676241/how-to-set-setkeepaliveperiod-on-a-tls-conn",
    "body": "setTCPKeepAlive := func(clientHello *tls.ClientHelloInfo) (*tls.Config, error) {\n  // Check that the underlying connection really is TCP.\n  if tcpConn, ok := clientHello.Conn.(*net.TCPConn); ok {\n    if err := tcpConn.SetKeepAlivePeriod(1000 * time.Second); err != nil {\n      fmt.Println(\"Could not set keep alive period\", err)\n    } else {\n      fmt.Println(\"update keep alive period\")\n    }\n  } else {\n    fmt.Println(\"TLS over non-TCP connection\")\n  }\n  // Make sure to return nil, nil to let the caller fall back on the default behavior.\n  return nil, nil\n}\ntlsConfig := &tls.Config{\n    ...\n    GetConfigForClient: setTCPKeepAlive,\n    ...\n}\nserver := &http.Server{\n    Addr:      \":8080\",\n    TLSConfig: tlsConfig,\n}\nserver.ListenAndServeTLS(\"../example.crt\", \"../example.key\")"
  },
  {
    "url": "https://stackoverflow.com/questions/57304563/prometheus-exporter-direct-instrumentation-vs-custom-collector",
    "body": "package main\nimport (\n    \"sync\"\n    \"github.com/prometheus/client_golang/prometheus\"\n)\n// Exporter is a prometheus.Collector implementation.\ntype Exporter struct {\n    // We need some way to map gRPC streams to their metrics. Using the stream\n    // itself as a map key is simple enough, but anything works as long as we\n    // can remove metrics once the stream ends.\n    sync.Mutex\n    Metrics map[StreamServer]*DeviceMetrics\n}\ntype DeviceMetrics struct {\n    sync.Mutex\n    CPU prometheus.Metric\n}\n// Globally defined descriptions are fine.\nvar cpu5SecDesc = prometheus.NewDesc(\n    \"cisco_iosxe_iosd_cpu_busy_5_sec_percentage\",\n    \"The IOSd daemon CPU busy percentage over the last 5 seconds\",\n    []string{\"node\"},\n    nil, // constant labels\n)\n// Collect implements prometheus.Collector.\nfunc (e *Exporter) Collect(ch chan<- prometheus.Metric) {\n    // Copy current metrics so we don't lock for very long if ch's consumer is\n    // slow.\n    var metrics []prometheus.Metric\n    e.Lock()\n    for _, deviceMetrics := range e.Metrics {\n        deviceMetrics.Lock()\n        metrics = append(metrics,\n            deviceMetrics.CPU,\n        )\n        deviceMetrics.Unlock()\n    }\n    e.Unlock()\n    for _, m := range metrics {\n        if m != nil {\n            ch <- m\n        }\n    }\n}\n// Describe implements prometheus.Collector.\nfunc (e *Exporter) Describe(ch chan<- *prometheus.Desc) {\n    ch <- cpu5SecDesc\n}\n// Service is the gRPC service implementation.\ntype Service struct {\n    exp *Exporter\n}\nfunc (s *Service) RPCMethod(stream StreamServer) (*Response, error) {\n    deviceMetrics := new(DeviceMetrics)\n    s.exp.Lock()\n    s.exp.Metrics[stream] = deviceMetrics\n    s.exp.Unlock()\n    defer func() {\n        // Stop emitting metrics for this stream.\n        s.exp.Lock()\n        delete(s.exp.Metrics, stream)\n        s.exp.Unlock()\n    }()\n    for {\n        req, err := stream.Recv()\n        // TODO: handle error\n        var msg *Telemetry = parseRequest(req) // Your existing code that unmarshals the nested message.\n        var (\n            metricField *prometheus.Metric\n            metric      prometheus.Metric\n        )\n        switch msg.GetEncodingPath() {\n        case CpuYANGEncodingPath:\n            metricField = &deviceMetrics.CPU\n            metric = prometheus.MustNewConstMetric(\n                cpu5SecDesc,\n                prometheus.GaugeValue,\n                ParsePBMsgCpuBusyPercent(msg), // func(*Telemetry) float64\n                \"node\", msg.GetNodeIdStr(),\n            )\n        default:\n            continue\n        }\n        deviceMetrics.Lock()\n        *metricField = metric\n        deviceMetrics.Unlock()\n    }\n    return nil, &Response{}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56692230/stop-channels-when-ws-not-able-to-connect",
    "body": "package main\nimport \"errors\"\nfunc run(appName string) (err error) {\n\t// first, define one channel per socket-closing-reason (DO NOT defer close these channels.)\n\tconnectErrorChan := make(chan struct{})\n\tsuccessDoneChan := make(chan struct{})\n\tsurpriseDisconnectChan := make(chan struct{})\n\t// next, wrap calls to your handlers in a closure `https://gobyexample.com/closures`\n\t// that captures a reference to the channel you care about\n\tOnConnectErrorHandler := func(err error, socket gowebsocket.Socket) {\n\t\tMyOnConnectErrorHandler(connectErrorChan, err, socket)\n\t}\n\tOnDisconnectedHandler := func(err error, socket gowebsocket.Socket) {\n\t\tMyOnDisconectedHandler(surpriseDisconnectChan, err, socket)\n\t}\n\t// ... declare any other handlers that might close the connection here\n\t// Do your setup logic here\n\t// serviceURL, e := GetContext().getServiceURL(appName)\n\t// . . .\n\t// socket := gowebsocket.New(url)\n\tsocket.OnConnectError = OnConnectErrorHandler\n\tsocket.OnConnected = OnConnectedHandler\n\tsocket.OnTextMessage = socketTextMessageHandler\n\tsocket.OnDisconnected = OnDisconnectedHandler\n\t// Prepare and send your message here...\n\t// LogDebug(\"In %v func connecting to URL  %v\", methodName, url)\n\t// . . .\n\t// socket.SendText(jsonStr)\n\t// now wait for one of your signalling channels to close.\n\tselect { // this will block until one of the handlers signals an exit\n\tcase <-connectError:\n\t\terr = errors.New(\"never connected  :( \")\n\tcase <-successDone:\n\t\tsocket.Close()\n\t\tLogDebug(\"mission accomplished! :) \")\n\tcase <-surpriseDisconnect:\n\t\terr = errors.New(\"somebody cut the wires!  :O \")\n\t}\n\tif err != nil {\n\t\tLogDebug(err)\n\t}\n\treturn err\n}\n// *Your* connect error handler will take an extra channel as a parameter\nfunc MyOnConnectErrorHandler(done chan struct{}, err error, socket gowebsocket.Socket) {\n\tmethodName := \"OnConnectErrorHandler\"\n\tLogDebug(\"Starting %v parameters [err = %v , socket = %v]\", methodName, err, socket)\n\tLogInfo(\"Disconnected from server \")\n\tclose(done) // signal we are done.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78164496/why-iterating-over-slice-may-be-slower-than-over-map-in-go",
    "body": "import \"slices\"\ntype void struct{}\nfunc longestConsecutive(nums []int) int {\n    max_seq := 0\n    numSet := make(map[int]void, len(nums))\n    for _, n := range nums {\n        numSet[n] = void{}\n    }\n    slices.Sort(nums)\n    for _, n := range nums {\n        if _, prev_exists := numSet[n-1]; !prev_exists {\n            for i := 1; ; i++ {\n                if _, next_exists := numSet[n+i]; !next_exists {\n                    max_seq = max(max_seq, i)\n                    break\n                }\n            }\n        }\n    }\n    return max_seq\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74935777/how-to-create-foreign-keys-in-gorm",
    "body": "package storage2\nimport (\n\t\"log\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n)\ntype Post struct {\n\tBody   string `gorm:\"type:text\"`\n\tId     string `gorm:\"type:uuid;primary_key\"`\n\tLikes  []Like `gorm:\"foreignkey:PostId;references:Id\"`\n\tUser   User   `gorm:\"foreignkey:UserId;references:Id\"`\n\tUserId string\n}\ntype Like struct {\n\tId     string `gorm:\"type:uuid;primary_key\"`\n\tPostId string `gorm:\"type:uuid;not null\"`\n\tUser   User   `gorm:\"foreignkey:UserId;references:Id\"`\n\tUserId string\n}\ntype User struct {\n\tId   string `gorm:\"type:uuid;primary_key\"`\n\tName string\n}\nfunc GormTest() {\n\tdb, err := gorm.Open(sqlite.Open(\"gorm.db\"), &gorm.Config{\n\t\tLogger: logger.Default.LogMode(logger.Info),\n\t})\n\tif err != nil {\n\t\tlog.Fatal(\"could not open database\")\n\t}\n\terr = db.AutoMigrate(&User{}, &Post{}, &Like{})\n\tif err != nil {\n\t\tlog.Fatal(\"could not migrate database\")\n\t}\n\tcreateTestData(db)\n\tfetchData(db)\n}\nfunc createTestData(db *gorm.DB) {\n\tusers := []User{\n\t\t{Id: \"0b83313d-1f85-4093-8621-efd2f21419d3\", Name: \"Shahriar\"},\n\t\t{Id: \"bddd6566-bcd2-4ad1-8eb9-65a23f5a9856\", Name: \"John\"},\n\t\t{Id: \"663c1328-dce2-4527-aecb-7fc478c229c2\", Name: \"Durand\"}}\n\terr := db.Create(&users).Error\n\tif err != nil {\n\t\tlog.Println(\"failed to create user data\")\n\t}\n\tlike := Like{\n\t\tId:     \"45ba45fc-0900-4fcc-80dd-c394170b777b\",\n\t\tUserId: users[0].Id,\n\t}\n\tpost := Post{\n\t\tId:     \"4cebb4c7-d44e-4160-a2df-a06f43211d45\",\n\t\tBody:   \"Test Post\",\n\t\tLikes:  []Like{like},\n\t\tUserId: users[1].Id,\n\t}\n\terr = db.Create(&post).Error\n\tif err != nil {\n\t\tlog.Println(\"failed to crete post\")\n\t}\n}\nfunc fetchData(db *gorm.DB) {\n\tpost := Post{\n\t\tId: \"4cebb4c7-d44e-4160-a2df-a06f43211d45\",\n\t}\n\tif err := db.Preload(\"Likes\").First(&post).Error; err != nil {\n\t\tlog.Println(\"failed to load post\")\n\t}\n\tlog.Println(post)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72782161/modifying-responsebody-in-connect-go-interceptor",
    "body": "res, err := next(ctx, req)\nif err != nil {\n\treturn nil, err\n}\nmsg, ok := res.Any().(proto.Message)\nif !ok {\n\treturn res, nil\n}\n// Keep your logic to calculate offset!\nvar deviceTimeOffset time.Duration\n// You could make this a global.\ndurationName := (*durationpb.Duration)(nil).ProtoReflect().Descriptor().FullName()\nrefMsg := msg.ProtoReflect()\noffsetFD := refMsg.Descriptor().Fields().ByName(\"DeviceOffset\")\nif offsetFD != nil &&\n    offsetFD.Message() != nil &&\n    offsetFD.Message().FullName() == durationName {\n    refOffset := durationpb.New(deviceTimeOffset).ProtoReflect()\n    refMsg.Set(\n        offsetFD,\n        protoreflect.ValueOf(refOffset),\n    )\n}\nreturn res, nil"
  },
  {
    "url": "https://stackoverflow.com/questions/71723032/how-to-decode-flutter-iso8601-datetime-to-go-api-rfc3339-pgtype-date-and-pgtype",
    "body": "type Contract struct {\n\tContractId          *int       `json:\"contract_id\"`\n\tCompanyId           *int       `json:\"company_id\"`\n\tDateEstablished     *time.Time `json:\"date_established\"`\n\tExpiryDate          *time.Time `json:\"expiry_date\"`\n\tExtensionExpiryDate *time.Time `json:\"extension_expiry_date\"`\n\tDescription         *string    `json:\"description\"`\n}\nfunc main() {\n\tbody := `{\"contract_id\":0,\"date_established\":\"2022-04-03T00:00:00.000Z\",\"expiry_date\":null,\"extension_expiry_date\":null,\"description\":\"fffff\"}`\n\tvar contract Contract\n\treader := strings.NewReader(body)\n\tdecoder := json.NewDecoder(reader)\n\terr := decoder.Decode(&contract)\n\tif err != nil {\n\t\tfmt.Println(\"Error: \", err)\n\t} else {\n\t\tfmt.Printf(\"Contract: %+v\\n\", contract)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71186925/how-to-sign-a-message-with-ecdsa-privatekey-using-golang",
    "body": "package main\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"math/big\"\n\t\"github.com/cosmos/cosmos-sdk/crypto/hd\"\n\t\"github.com/cosmos/go-bip39\"\n\t\"github.com/tendermint/tendermint/crypto/secp256k1\"\n\t//\"github.com/btcsuite/btcd/btcec\"\n\t\"golang.org/x/crypto/cryptobyte\"\n\t\"golang.org/x/crypto/cryptobyte/asn1\"\n)\nfunc main() {\n\t//\n\t// Derive private and public key (this part works)\n\t//\n\tseed := bip39.NewSeed(\"blast about old claw current first paste risk involve victory edit current\", \"\")\n\tfmt.Println(\"Seed: \", hex.EncodeToString(seed)) // Seed:  dd5ffa7088c0fa4c665085bca7096a61e42ba92e7243a8ad7fbc6975a4aeea1845c6b668ebacd024fd2ca215c6cd510be7a9815528016af3a5e6f47d1cca30dd\n\tmaster, ch := hd.ComputeMastersFromSeed(seed)\n\tpath := \"m/44'/1022'/0'/0/0'\"\n\tpriv, _ := hd.DerivePrivateKeyForPath(master, ch, path)\n\tfmt.Println(\"Derivation Path: \", path)                 // Derivation Path:  m/44'/1022'/0'/0/0'\n\tfmt.Println(\"Private Key: \", hex.EncodeToString(priv)) // Private Key:  33f34dad4bc0ce9dc320863509aed43cab33a93a29752779ae0df6dbbea33e56\n\tvar privKey = secp256k1.PrivKey(priv)\n\tpubKey := privKey.PubKey()\n\tfmt.Println(\"Public Key: \", hex.EncodeToString(pubKey.Bytes())) // Public Key:  026557fe37d5cab1cc8edf474f4baff67dbb2305f1764e42d31b09f83296f5de2b\n\t//\n\t// Sign (this part needs to be fixed)\n\t//\n\tdata := \"test\"\n\tsignature, _ := privKey.Sign([]byte(data))\n\tfmt.Println(hex.EncodeToString(signature))\n\trVal := new(big.Int)\n\trVal.SetBytes(signature[0:32])\n\tsVal := new(big.Int)\n\tsVal.SetBytes(signature[32:64])\n\tvar b cryptobyte.Builder\n\tb.AddASN1(asn1.SEQUENCE, func(b *cryptobyte.Builder) {\n\t\tb.AddASN1BigInt(rVal)\n\t\tb.AddASN1BigInt(sVal)\n\t})\n\tsignatureDER, _ := b.Bytes()\n\tfmt.Println(\"Signature, DER: \", hex.EncodeToString(signatureDER))\n\t/*\n\t\thash, _ := hex.DecodeString(\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\")\n\t\t// Sign without hashing\n\t\tprivateKey, _ := btcec.PrivKeyFromBytes(btcec.S256(), priv)\n\t\tsignature, _ := privateKey.Sign(hash[:])\n\t\t// Convert to ASN1/DER\n\t\trVal := new(big.Int)\n\t\trVal.SetBytes(signature.R.Bytes())\n\t\tsVal := new(big.Int)\n\t\tsVal.SetBytes(signature.S.Bytes())\n\t\tvar b cryptobyte.Builder\n\t\tb.AddASN1(asn1.SEQUENCE, func(b *cryptobyte.Builder) {\n\t\t\tb.AddASN1BigInt(rVal)\n\t\t\tb.AddASN1BigInt(sVal)\n\t\t})\n\t\tsignatureDER, _ := b.Bytes()\n\t\tfmt.Println(\"Signature, DER: \", hex.EncodeToString(signatureDER))\n\t*/\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71186925/how-to-sign-a-message-with-ecdsa-privatekey-using-golang",
    "body": "Seed:  dd5ffa7088c0fa4c665085bca7096a61e42ba92e7243a8ad7fbc6975a4aeea1845c6b668ebacd024fd2ca215c6cd510be7a9815528016af3a5e6f47d1cca30dd\nDerivation Path:  m/44'/1022'/0'/0/0'\nPrivate Key:  33f34dad4bc0ce9dc320863509aed43cab33a93a29752779ae0df6dbbea33e56\nPublic Key:  026557fe37d5cab1cc8edf474f4baff67dbb2305f1764e42d31b09f83296f5de2b\n57624717f71fae8b5917cde0f82dfe6c2e2104183ba01c6a1c9f0a8e66d3303e5035b52876d833522aace232c1d231b3aeeff303cf02d1677a240102365ce71b\nSignature, DER:  3044022057624717f71fae8b5917cde0f82dfe6c2e2104183ba01c6a1c9f0a8e66d3303e02205035b52876d833522aace232c1d231b3aeeff303cf02d1677a240102365ce71b"
  },
  {
    "url": "https://stackoverflow.com/questions/71186925/how-to-sign-a-message-with-ecdsa-privatekey-using-golang",
    "body": "from ecdsa.util import sigdecode_der\nsignature = signing_key.sign_digest(  # from Python Code\n    digest=bytearray.fromhex(data),\n    sigencode=sigencode_der\n)\n#signature = bytes.fromhex('3044022057624717f71fae8b5917cde0f82dfe6c2e2104183ba01c6a1c9f0a8e66d3303e02205035b52876d833522aace232c1d231b3aeeff303cf02d1677a240102365ce71b') # from Go code\nverifying_key = signing_key.verifying_key\nverified = verifying_key.verify_digest(signature, digest=bytearray.fromhex(data), sigdecode=sigdecode_der)\nprint(verified)\nreturn signature.hex()"
  },
  {
    "url": "https://stackoverflow.com/questions/70867224/selenium-go-how-to",
    "body": "package main\nimport (\n\t\"github.com/tebeka/selenium\"\n    \"github.com/tebeka/selenium/chrome\"\n)\nfunc main() error {\n\t// Run Chrome browser\n\tservice, err := selenium.NewChromeDriverService(\"./chromedriver\", 4444)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer service.Stop()\n\tcaps := selenium.Capabilities{}\n\tcaps.AddChrome(chrome.Capabilities{Args: []string{\n\t\t\"window-size=1920x1080\",\n\t\t\"--no-sandbox\",\n\t\t\"--disable-dev-shm-usage\",\n\t\t\"disable-gpu\",\n\t\t// \"--headless\",  // comment out this line to see the browser\n\t}})\n\tdriver, err := selenium.NewRemote(caps, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdriver.Get(\"https://www.google.com\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70163625/debug-golang-in-vscode-but-output-path-is-wrong",
    "body": "// Default output file pathname for the compiled binary in debug or test modes\n// when temporary debug binary creation fails.\n// This is relative to the current working directory of the server.\nconst defaultDebugBinary string = \"./__debug_bin\"\nfunc (s *Session) tempDebugBinary() string {\n\tbinaryPattern := \"__debug_bin\"\n\tif runtime.GOOS == \"windows\" {\n\t\tbinaryPattern = \"__debug_bin*.exe\"\n\t}\n\tf, err := ioutil.TempFile(\"\", binaryPattern)\n\tif err != nil {\n\t\ts.config.log.Errorf(\"failed to create a temporary binary (%v), falling back to %q\", err, defaultDebugBinary)\n\t\treturn cleanExeName(defaultDebugBinary)\n\t}\n    ...\n}\nThis is [called by][6]:"
  },
  {
    "url": "https://stackoverflow.com/questions/69270267/parse-yaml-manifests-to-kubernetes-client-object",
    "body": "import (\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\tapiextensionsv1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1\"\n\tapiextensionsv1beta1 \"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1\"\n)\nfunc deserialize(data []byte) (*client.Object, error) {\n   \tapiextensionsv1.AddToScheme(scheme.Scheme)\n\tapiextensionsv1beta1.AddToScheme(scheme.Scheme)\n\tdecoder := scheme.Codecs.UniversalDeserializer()\n\truntimeObject, groupVersionKind, err := decoder.Decode(data, nil, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn runtime\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63271031/how-to-redirect-to-a-login-page-if-flutter-api-response-is-unauthorized",
    "body": "Future<List<Tbl>> getTables(BuildContext context) async {\n  var tables = List<Tbl>();\n  try {\n      var response = await http.get('$_baseUrl/tables/list');\n      //Check response status code\n      if(response.statusCode == 401) {\n        Navigator.of(context).pushNamed(RoutePaths.Login);//Navigator is used here to go to login only with 401 status code\n        return null;\n      }\n      var parsed = json.decode(response.body) as List<dynamic>;\n      if (parsed != null) {\n         for (var table in parsed) {\n             tables.add(Tbl.fromJson(table));\n         }\n      }\n  } catch (e) {print(e); return null;}\n  return tables;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61916842/echo-web-framework-binding-formfile",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"github.com/labstack/echo\"\n\t\"io/ioutil\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"reflect\"\n\t\"strings\"\n\t\"time\"\n)\nvar (\n\ttypeMultipartFileHeader      = reflect.TypeOf((*multipart.FileHeader)(nil))\n\ttypeMultipartSliceFileHeader = reflect.TypeOf(([]*multipart.FileHeader)(nil))\n)\ntype File struct {\n\tFile  *multipart.FileHeader   `form:\"file\"`\n\tFiles []*multipart.FileHeader `form:\"files\"`\n}\nfunc main() {\n\tapp := echo.New()\n\t// warp bind suppet bind FormFile\n\tapp.Binder = NewBindFile(app.Binder)\n\tapp.Any(\"/file\", func(ctx echo.Context) error {\n\t\tvar file File\n\t\terr := ctx.Bind(&file)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treadfile := func(file *multipart.FileHeader) {\n\t\t\tf, err := file.Open()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Printf(\"open %s error: %s\\n\", file.Filename, err.Error())\n\t\t\t\treturn\n\t\t\t}\n\t\t\tbody, err := ioutil.ReadAll(f)\n\t\t\tfmt.Printf(\"read file %s error: %v body: %s\\n\", file.Filename, err, body)\n\t\t}\n\t\treadfile(file.File)\n\t\tfor _, file := range file.Files {\n\t\t\treadfile(file)\n\t\t}\n\t\treturn err\n\t})\n\tgo func() {\n\t\ttime.Sleep(200 * time.Millisecond)\n\t\tbuf := bytes.NewBuffer(nil)\n\t\tw := multipart.NewWriter(buf)\n\t\tpart, _ := w.CreateFormFile(\"file\", \"file\")\n\t\tpart.Write([]byte(\"this one file\"))\n\t\tpart, _ = w.CreateFormFile(\"files\", \"files\")\n\t\tpart.Write([]byte(\"fils part 1\"))\n\t\tpart, _ = w.CreateFormFile(\"files\", \"files\")\n\t\tpart.Write([]byte(\"fils part 2\"))\n\t\tpart, _ = w.CreateFormFile(\"files\", \"files\")\n\t\tpart.Write([]byte(\"fils part 3\"))\n\t\tpart, _ = w.CreateFormFile(\"files\", \"files\")\n\t\tpart.Write([]byte(\"fils part 4\"))\n\t\tw.Close()\n\t\thttp.Post(\"http://localhost:1323/file\", w.FormDataContentType(), buf)\n\t}()\n\tapp.Start(\":1323\")\n}\ntype BindFunc func(interface{}, echo.Context) error\nfunc (fn BindFunc) Bind(i interface{}, ctx echo.Context) error {\n\treturn fn(i, ctx)\n}\nfunc NewBindFile(b echo.Binder) echo.Binder {\n\treturn BindFunc(func(i interface{}, ctx echo.Context) error {\n\t\terr := b.Bind(i, ctx)\n\t\tif err == nil {\n\t\t\tctype := ctx.Request().Header.Get(echo.HeaderContentType)\n\t\t\t// if bind form\n\t\t\tif strings.HasPrefix(ctype, echo.MIMEApplicationForm) || strings.HasPrefix(ctype, echo.MIMEMultipartForm) {\n\t\t\t\t// get form files\n\t\t\t\tvar form *multipart.Form\n\t\t\t\tform, err = ctx.MultipartForm()\n\t\t\t\tif err == nil {\n\t\t\t\t\terr = EchoBindFile(i, ctx, form.File)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn err\n\t})\n}\nfunc EchoBindFile(i interface{}, ctx echo.Context, files map[string][]*multipart.FileHeader) error {\n\tiValue := reflect.Indirect(reflect.ValueOf(i))\n\t// check bind type is struct pointer\n\tif iValue.Kind() != reflect.Struct {\n\t\treturn fmt.Errorf(\"BindFile input not is struct pointer, indirect type is %s\", iValue.Type().String())\n\t}\n\tiType := iValue.Type()\n\tfor i := 0; i < iType.NumField(); i++ {\n\t\tfType := iType.Field(i)\n\t\t// check canset field\n\t\tfValue := iValue.Field(i)\n\t\tif !fValue.CanSet() {\n\t\t\tcontinue\n\t\t}\n\t\t// revc type must *multipart.FileHeader or []*multipart.FileHeader\n\t\tswitch fType.Type {\n\t\tcase typeMultipartFileHeader:\n\t\t\tfile := getFiles(files, fType.Name, fType.Tag.Get(\"form\"))\n\t\t\tif len(file) > 0 {\n\t\t\t\tfValue.Set(reflect.ValueOf(file[0]))\n\t\t\t}\n\t\tcase typeMultipartSliceFileHeader:\n\t\t\tfile := getFiles(files, fType.Name, fType.Tag.Get(\"form\"))\n\t\t\tif len(file) > 0 {\n\t\t\t\tfValue.Set(reflect.ValueOf(file))\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\nfunc getFiles(files map[string][]*multipart.FileHeader, names ...string) []*multipart.FileHeader {\n\tfor _, name := range names {\n\t\tfile, ok := files[name]\n\t\tif ok {\n\t\t\treturn file\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61618623/how-to-create-kafka-topic-using-segmentios-kafka-go",
    "body": "conn, err := kafka.Dial(\"tcp\", \"host:port\")\nif err != nil {\n    panic(err.Error())\n}\ndefer conn.Close()\ncontroller, err := conn.Controller()\nif err != nil {\n    panic(err.Error())\n}\ncontrollerConn, err := kafka.Dial(\"tcp\", net.JoinHostPort(controller.Host, strconv.Itoa(controller.Port)))\nif err != nil {\n    panic(err.Error())\n}\ndefer controllerConn.Close()\ntopicConfigs := []kafka.TopicConfig{{Topic: \"sometopic\", NumPartitions: 1, ReplicationFactor: 1}}\nerr = controllerConn.CreateTopics(topicConfigs...)\nif err != nil {\n    panic(err.Error())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58711371/how-to-get-the-result-and-the-status-of-a-transaction",
    "body": "func checkTransactionReceipt(_txHash string) int {\n\tclient, _ := getClient(\"https://ropsten.infura.io/v3/XXXXXX\")\n\ttxHash := common.HexToHash(_txHash)\n\ttx, err := client.TransactionReceipt(context.Background(), txHash)\n    if (Error.HasError(err)) {\n\t\treturn (-1)\n\t}\n\treturn (int(tx.Status))\n}\nfunc\tWaitForBlockCompletation(data EthData, hashToRead string) int {\n    soc := make(chan *types.Header)\n    sub, err := data.WssClient.SubscribeNewHead(context.Background(), soc)\n    if (err != nil) {\n        return -1\n    }\n    for {\n        select {\n\t\t\tcase err := <-sub.Err():\n\t\t\t\t_ = err\n\t\t\t\treturn -1\n\t\t\tcase header := <-soc:\n\t\t\t\tlogs.Info(header.TxHash.Hex())\n\t\t\t\ttransactionStatus := checkTransactionReceipt(hashToRead)\n\t\t\t\tif (transactionStatus == 0) {\n\t\t\t\t\t//FAILURE\n\t\t\t\t\tsub.Unsubscribe()\n\t\t\t\t\treturn 0\n\t\t\t\t} else if (transactionStatus == 1) {\n\t\t\t\t\t//SUCCESS\n\t\t\t\t\tsub.Unsubscribe()\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t}\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54233076/decrypting-a-non-ascii-armored-pgp-file-in-go",
    "body": "keyRing, err := os.Open(\"keyArmoredFile.asc\")\nif err != nil {\n\tlog.Fatal(err)\n}\nentityList, err := openpgp.ReadArmoredKeyRing(keyRing)\nif err != nil {\n\tlog.Fatal(err)\n}\nentity := entityList[0]\npassphraseByte := []byte(\"password\")\nerr = entity.PrivateKey.Decrypt(passphraseByte)\nif err != nil {\n\tlog.Fatal(err)\n}\nfor _, subkey := range entity.Subkeys {\n\tsubkey.PrivateKey.Decrypt(passphraseByte)\n}\nencryptedContent, err := os.Open(\"encryptedFile.pgp\")\nif err != nil {\n\tlog.Fatal(err)\n}\nmd, err := openpgp.ReadMessage(encryptedContent, entityList, nil, nil)\nif err != nil {\n\tlog.Fatal(err)}\nbytes, err := ioutil.ReadAll(md.UnverifiedBody)\nif err != nil {\n\tlog.Fatal(err)\n}\n// decryption result\ndecStr := string(bytes)"
  },
  {
    "url": "https://stackoverflow.com/questions/79494305/unable-to-delete-items-using-supabase-go-client",
    "body": "func (s *SupabaseService) DeleteItem(id string) error {\n    tableName := \"items\"\n\n    fmt.Printf(\"DEBUG SERVICE: Deleting item with ID: %s from table %s\\n\", id, tableName)\n\n    resp, _, err := s.client.From(tableName).Delete(\"*\", \"\").Filter(\"id\", \"eq\", id).Execute()\n    if err != nil {\n        return fmt.Errorf(\"failed to delete item: %w\", err)\n    }\n    fmt.Printf(\"DEBUG SERVICE: Delete response: %s\\n\", string(resp))\n\n    // Handle empty response (successful deletion)\n    if len(resp) == 0 || string(resp) == \"\" || string(resp) == \"[]\" {\n        fmt.Println(\"DEBUG SERVICE: Empty response, assuming successful deletion\")\n        return nil\n    }\n    // Only parse as JSON if response is not empty\n    var deleted []interface{}\n    if err := json.Unmarshal(resp, &deleted); err != nil {\n        return fmt.Errorf(\"failed to unmarshal delete response: %w (%s)\", err, string(resp))\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79494305/unable-to-delete-items-using-supabase-go-client",
    "body": "func (s *SupabaseService) DeleteItem(id string) error {\n    tableName := \"items\"\n\n    fmt.Printf(\"DEBUG: Deleting item with ID: %s from table %s\\n\", id, tableName)\n\n    // Using Eq method instead of Filter\n    resp, _, err := s.client.From(tableName).Delete(\"*\", \"\").Eq(\"id\", id).Execute()\n    if err != nil {\n        return fmt.Errorf(\"failed to delete item: %w\", err)\n    }\n    fmt.Printf(\"DEBUG: Delete response: %s\\n\", string(resp))\n\n    // Handle empty response (successful deletion)\n    if len(resp) == 0 || string(resp) == \"\" || string(resp) == \"[]\" {\n        fmt.Println(\"DEBUG: Empty response, assuming successful deletion\")\n        return nil\n    }\n    // Only parse as JSON if response is not empty\n    var deleted []interface{}\n    if err := json.Unmarshal(resp, &deleted); err != nil {\n        return fmt.Errorf(\"failed to unmarshal delete response: %w (%s)\", err, string(resp))\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78608449/remove-leading-digit-from-an-uint-in-without-parsing-to-string-and-back",
    "body": "var powers = []uint64{\n\t10,\n\t100,\n\t1_000,\n\t10_000,\n\t100_000,\n\t1_000_000,\n\t10_000_000,\n\t100_000_000,\n\t1_000_000_000,\n\t10_000_000_000,\n\t100_000_000_000,\n\t1_000_000_000_000,\n\t10_000_000_000_000,\n\t100_000_000_000_000,\n\t1_000_000_000_000_000,\n\t10_000_000_000_000_000,\n\t100_000_000_000_000_000,\n\t1_000_000_000_000_000_000,\n\t10_000_000_000_000_000_000,\n}\nfunc stripLeading(i uint) uint {\n\tif i < 10 {\n\t\treturn 0\n\t}\n\tv, c := uint64(i), 1\n\tfor ; c < len(powers) && powers[c] <= v; c++ {\n\t}\n\treturn uint(v % powers[c-1])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78608449/remove-leading-digit-from-an-uint-in-without-parsing-to-string-and-back",
    "body": "package main\nimport (\n\t\"math/rand/v2\"\n\t\"testing\"\n)\nfunc BenchmarkStripLeading(b *testing.B) {\n\tbenchmarks := []struct {\n\t\tname         string\n\t\tstripLeading func(uint) uint\n\t}{\n\t\t{\"stripLeadingMult\", stripLeading1},\n\t\t{\"stripLeadingTable\", stripLeading2},\n\t\t{\"stripLeadingBinary\", stripLeading3},\n\t\t{\"stripLeadingAlternate\", stripLeadingAlternate},\n\t}\n\tfor _, bm := range benchmarks {\n\t\tb.Run(bm.name, func(b *testing.B) {\n\t\t\tbenchmarkValues := newBenchmarkValues(b.N)\n\t\t\tb.ResetTimer()\n\t\t\tfor _, i := range benchmarkValues {\n\t\t\t\t_ = bm.stripLeading(i)\n\t\t\t}\n\t\t})\n\t}\n}\nfunc newBenchmarkValues(n int) []uint {\n\tr := rand.New(rand.NewPCG(42, 24))\n\tbenchmarkValues := make([]uint, n)\n\tfor i := range benchmarkValues {\n\t\tbenchmarkValues[i] = r.UintN(1_000_000_000)\n\t}\n\treturn benchmarkValues\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75798345/golang-create-a-mock-database-with-handler-and-call-to-database-using-interfaces",
    "body": "package handlers\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\t\"handlertest/repo\"\n)\ntype SignUpJson struct {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n\tEmail    string `json:\"email\"`\n}\nfunc SignUp(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tvar newUser SignUpJson\n\tbs, _ := io.ReadAll(r.Body)\n\tif err := json.Unmarshal(bs, &newUser); err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tw.Write([]byte(err.Error()))\n\t\treturn\n\t}\n\tctx, cancel := context.WithTimeout(r.Context(), time.Minute*2)\n\tdefer cancel()\n\tdb, _ := ctx.Value(\"DB\").(*sql.DB)\n\tif isExistingUserName := repo.GetUserName(ctx, db, newUser.Username); isExistingUserName {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tw.Write([]byte(\"username already present\"))\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75798345/golang-create-a-mock-database-with-handler-and-call-to-database-using-interfaces",
    "body": "package handlers\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"github.com/DATA-DOG/go-sqlmock\"\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestSignUp(t *testing.T) {\n\tdb, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))\n\tif err != nil {\n\t\tt.Fatalf(\"err not expected while open a mock db, %v\", err)\n\t}\n\tdefer db.Close()\n\tt.Run(\"NewUser\", func(t *testing.T) {\n\t\tmock.ExpectQuery(\"SELECT username FROM users WHERE username = $1\").WithArgs(\"john.doe@example.com\").WillReturnError(pgx.ErrNoRows)\n\t\tw := httptest.NewRecorder()\n\t\tr := httptest.NewRequest(http.MethodPost, \"/signup\", strings.NewReader(`{\"username\": \"john.doe@example.com\", \"password\": \"1234\", \"email\": \"john.doe@example.com\"}`))\n\t\tctx := context.WithValue(r.Context(), \"DB\", db)\n\t\tr = r.WithContext(ctx)\n\t\tSignUp(w, r)\n\t\tassert.Equal(t, http.StatusOK, w.Code)\n\t\tif err := mock.ExpectationsWereMet(); err != nil {\n\t\t\tt.Errorf(\"not all expectations were met: %v\", err)\n\t\t}\n\t})\n\tt.Run(\"AlreadyExistentUser\", func(t *testing.T) {\n\t\trows := sqlmock.NewRows([]string{\"username\"}).AddRow(\"john.doe@example.com\")\n\t\tmock.ExpectQuery(\"SELECT username FROM users WHERE username = $1\").WithArgs(\"john.doe@example.com\").WillReturnRows(rows)\n\t\tw := httptest.NewRecorder()\n\t\tr := httptest.NewRequest(http.MethodPost, \"/signup\", strings.NewReader(`{\"username\": \"john.doe@example.com\", \"password\": \"1234\", \"email\": \"john.doe@example.com\"}`))\n\t\tctx := context.WithValue(r.Context(), \"DB\", db)\n\t\tr = r.WithContext(ctx)\n\t\tSignUp(w, r)\n\t\tassert.Equal(t, http.StatusBadRequest, w.Code)\n\t\tif err := mock.ExpectationsWereMet(); err != nil {\n\t\t\tt.Errorf(\"not all expectations were met: %v\", err)\n\t\t}\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74403870/unmarshal-json-object-into-slice-of-structs-with-key-and-value",
    "body": "type ResultList []Result\nfunc (ls *ResultList) UnmarshalJSON(data []byte) error {\n\tvar obj map[string]json.RawMessage\n\tif err := json.Unmarshal(data, &obj); err != nil {\n\t\treturn err\n\t}\n\tfor key, raw := range obj {\n\t\tr := Result{Key: key}\n\t\tif raw[0] == '[' { // assume array of ints\n\t\t\tif err := json.Unmarshal(raw, &r.Value); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else { // assume single int\n\t\t\tvar i int\n\t\t\tif err := json.Unmarshal(raw, &i); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tr.Value = append(r.Value, i)\n\t\t}\n\t\t*ls = append(*ls, r)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72893095/how-to-reuse-slice-with-sync-pool-in-golang",
    "body": "func TestSliceWithPool(t *testing.T) {\n\tvar slicePool = sync.Pool{\n\t\tNew: func() interface{} {\n\t\t\tt.Log(\"Created\")\n\t\t\ts := make([]interface{}, 0)\n\t\t\treturn s\n\t\t},\n\t}\n\ts, _ := slicePool.Get().([]interface{})\n\tfor i := 0; i < 10; i++ {\n\t\ts = append(s, i)\n\t}\n\tfmt.Println(s)\n    // ^ output: [0 1 2 3 4 5 6 7 8 9]\n\ts = s[:0]\n\tslicePool.Put(s)\n\ts2, _ := slicePool.Get().([]interface{})\n\tfmt.Println(s)\n    // ^ output: []\n\tfor i := 0; i < 5; i++ {\n\t\ts2 = append(s2, i*10)\n\t}\n\tfmt.Println(s2)\n    // ^ output: [0 10 20 30 40]\n\tfmt.Println(s2[:10])\n    // ^ output: [0 10 20 30 40 5 6 7 8 9]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72812236/golang-logrus-enable-opentelemetry-trace-id-and-span-id-in-all-application-logs",
    "body": "{\"Context\":{\"TraceID\":\"00000000000000000000000000000000\",\"SpanID\":\"0000000000000000\",\"TraceFlags\":\"00\",\"TraceState\":\"\",\"Remote\":false},\"level\":\"info\",\"message\":\"Listening...\",\"span_id\":\"0000000000000000\",\"time\":\"2022-07-02T21:39:49+08:00\",\"trace_id\":\"00000000000000000000000000000000\"}\n{\"Context\":{\"TraceID\":\"7cab2739ea2c5b2d3e6a08cfb57858a9\",\"SpanID\":\"ec5ba151b6823658\",\"TraceFlags\":\"01\",\"TraceState\":\"\",\"Remote\":false},\"level\":\"info\",\"message\":\"About End Point Printning...\",\"span_id\":\"ec5ba151b6823658\",\"time\":\"2022-07-02T21:39:54+08:00\",\"trace_id\":\"7cab2739ea2c5b2d3e6a08cfb57858a9\"}"
  },
  {
    "url": "https://stackoverflow.com/questions/72042511/terraform-custom-provider-data-source-schema",
    "body": "package main\nimport (\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    s := `\n    {\n      \"members\": [\n        \"test12\",\n        \"test8800\",\n        \"test0032\",\n        \"test1234\"\n      ],\n      \"owners\": [\n        \"test000\",\n        \"test111\",\n        \"test12\",\n        \"test1234\"\n      ]\n    }\n    `\n    http.HandleFunc(\"/projects\", func(w http.ResponseWriter, _ *http.Request) {\n      log.Println(\"Getting Projects\")\n      w.WriteHeader(http.StatusOK)\n      w.Write([]byte(s))\n    })\n    log.Println(\"Listening...\")\n    log.Fatal(http.ListenAndServe(\":8000\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72042511/terraform-custom-provider-data-source-schema",
    "body": "package hashicups\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/hashicorp/terraform-plugin-sdk/v2/diag\"\n\t\"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema\"\n)\nfunc dataSourceProjects() *schema.Resource {\n  return &schema.Resource{\n    ReadContext: dataSourceProjectsRead,\n    Schema: map[string]*schema.Schema{\n      \"members\": &schema.Schema{\n        Type:     schema.TypeList,\n        Elem:     &schema.Schema{Type: schema.TypeString},\n        Computed: true,\n      },\n      \"owners\": &schema.Schema{\n        Type:     schema.TypeList,\n        Elem:     &schema.Schema{Type: schema.TypeString},\n        Computed: true,\n      },\n    },\n  }\n}\nfunc dataSourceProjectsRead(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {\n\tclient := &http.Client{Timeout: 10 * time.Second}\n\t// Warning or errors can be collected in a slice type\n\tvar diags diag.Diagnostics\n\treq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%s/projects\", \"http://localhost:8000\"), nil)\n\tif err != nil {\n\t\treturn diag.FromErr(err)\n\t}\n\tr, err := client.Do(req)\n\tif err != nil {\n\t\treturn diag.FromErr(err)\n\t}\n\tdefer r.Body.Close()\n    var projects map[string]interface{}\n\terr = json.NewDecoder(r.Body).Decode(&projects)\n\tif err != nil {\n\t\treturn diag.FromErr(err)\n\t}\n\tif err := d.Set(\"members\", projects[\"members\"]); err != nil {\n\t\treturn diag.FromErr(err)\n\t}\n\tif err := d.Set(\"owners\", projects[\"owners\"]); err != nil {\n\t\treturn diag.FromErr(err)\n\t}\n\t// always run\n\td.SetId(strconv.FormatInt(time.Now().Unix(), 10))\n\treturn diags\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71401299/mock-a-go-logr-and-verify-the-message-it-logs",
    "body": "package main\nimport (\n    \"testing\"\n    \"github.com/stretchr/testify/assert\"\n    // ... some extra imports\n)\ntype TestLogger struct {\n\tOutput map[string]map[int][]interface{}\n\tr RuntimeInfo\n}\nfunc (t *TestLogger) doLog(level int, msg string, keysAndValues ...interface{}) {\n\tm := make(map[int][]interface{}, len(keysAndValues))\n    m[level] = keysAndValues\n\tt.output[msg] = m\n}\nfunc (t *TestLogger) Init(info RuntimeInfo) { t.r = info}\nfunc (t *TestLogger) Enabled(level int) bool {return true}\nfunc (t *TestLogger) Info(level int, msg string, keysAndValues ...interface{}) { t.doLog(level, msg, keysAndValues...) }\nfunc (t *TestLogger) Error(err error, msg string, keysAndValues ...interface{}) { t.doLog(level, msg, append(keysAndValues, err)...) }\nfunc (t *TestLogger) WithValues(keysAndValues ...interface{}) LogSink { return t}\nfunc (t *TestLogger) WithName(name string) LogSink { return t }\nfunc TestLoggerHasOutput(t *testing.T) {\n        l := &TestLogger{make(map[string]map[int][]interface[]), RuntimeInfo{1}}\n        tl := logr.New(l)\n        config, err := GetConfig(kcfgFilePath, \"ns\", tl, \"test\")\n        assert.Contains(t, l.Output, \"ns\") // you can also test the contents of the output as well\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71281242/cant-solve-token-contains-an-invalid-number-of-segments",
    "body": "package main\nimport (\n\t\"crypto/rsa\"\n\t\"log\"\n\t\"net/http\"\n\tjwt \"github.com/golang-jwt/jwt/v4\"\n\trequest \"github.com/golang-jwt/jwt/v4/request\"\n)\nvar verifyKey *rsa.PublicKey\nfunc init() {\n\tverifyKey, _ = jwt.ParseRSAPublicKeyFromPEM([]byte(\"SECRETKEY\"))\n}\nfunc verifyToken(w http.ResponseWriter, r *http.Request) bool {\n\tclaims := jwt.StandardClaims{}\n\textractor := request.AuthorizationHeaderExtractor\n\ttoken, err := request.ParseFromRequestWithClaims(r, extractor, &claims, func(token *jwt.Token) (interface{}, error) {\n\t\treturn verifyKey, nil\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"verifyToken failed: %v\", err)\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\treturn false\n\t}\n\tlog.Printf(\"verifyToken: success, claims: %v\", token.Claims)\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69915566/calling-a-function-from-javascript",
    "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>WASM</title>\n    <!-- WASM -->\n    <script src=\"http://localhost:8080/www/wasm_exec.js\"></script>\n    <script src=\"http://localhost:8080/www/loadWasm.js\"></script>\n</head>\n<body>\n</body>\n<script>\n    (async () => {\n        try {\n            await init();\n            alert(\"Wasm had been loaded\")\n            console.log(multiply(5, 3));\n        } catch (e) {\n            console.log(e);\n        }\n    })();\n/***** OR ****/\n    (async () => {\n        await init();\n        alert(\"Wasm had been loaded\")\n        console.log(multiply(5, 3));\n    })().catch(e => {\n        console.log(e);\n    });\n/*************/\n</script>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/69556144/calling-google-cloud-run-grpc-from-dart-with-firebase-authentication-certificat",
    "body": "FROM golang as build\nWORKDIR /all\nCOPY . .\n# Build static binary\nRUN CGO_ENABLED=0 GOOS=linux \\\n    go build -a -installsuffix cgo \\\n    -o /go/bin/server \\\n    cmd/main/main.go\nFROM scratch\nCOPY --from=build /go/bin/server /server\nCOPY --from=build /all/config.yaml /config.yaml\nCOPY --from=build /all/svc.dev.json /svc.dev.json\n### THIS SOLVED\nCOPY --from=build /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n###\nENV GOOGLE_APPLICATION_CREDENTIALS /svc.dev.json\nENTRYPOINT [\"/server\", \"./config.yaml\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/67337522/docker-go-get-from-bitbucket-private-repo",
    "body": "image: python:3.7.4-alpine3.10\npipelines:\n  branches:\n    master:\n      - step:\n          services:\n            - docker\n          caches:\n            - pip\n          script:\n            - apk add --update coreutils\n            - mkdir -p ~/.ssh\n            - (umask  077 ; echo $SSH_PRV_KEY | base64 --decode > ~/.ssh/id_rsa)\n            - pip3 install awscli\n            - IMAGE=\"$AWS_IMAGE_PATH/jb_common\"\n            - TAG=1.0.${BITBUCKET_BUILD_NUMBER}\n            - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_IMAGE_PATH\n            - aws ecr list-images --repository-name \"jb_common\" --region $AWS_DEFAULT_REGION\n            - docker build -t $IMAGE:$TAG --build-arg ssh_prv_key=\"$(cat ~/.ssh/id_rsa)\"  .\n            - docker push $IMAGE:$TAG"
  },
  {
    "url": "https://stackoverflow.com/questions/66833699/stop-main-go-when-sigterm-triggered",
    "body": "func main() {\n\tport := os.Getenv(\"PORT\")\n\tfmt.Printf(\"Started\\n\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\tgo func() {\n\t\thttp.HandleFunc(\"/\", HelloServer)\n\t\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\tsignalChannel := make(chan os.Signal, 2)\n\tsignal.Notify(signalChannel, os.Interrupt, syscall.SIGTERM)\n\tfor {\n\t\tsig := <-signalChannel\n\t\tswitch sig {\n\t\tcase os.Interrupt:\n\t\t\tfmt.Println(\"sigint\")\n\t\tcase syscall.SIGTERM:\n\t\t\tfmt.Println(\"sigterm\")\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61966649/implementation-of-nor-flip-flop-logic-gates-in-go",
    "body": "package main\nimport \"fmt\"\ntype flipFlop struct {\n\tA0, A1 bool\n\tout0, out1 bool\n}\nfunc nor(a, b bool) bool { return !(a || b) }\nfunc (ff *flipFlop)Eval() {\n    // Evaluate the circuit until it is stable\n\tfor {\n\t\tprev0, prev1 := ff.out0, ff.out1\n\t\tff.out0 = nor(ff.A1, ff.out1)\n\t\tff.out1 = nor(ff.A0, ff.out0)\n\t\tif ff.out0 == prev0 && ff.out1 == prev1 {\n\t\t\tbreak // flip flop is stable\n\t\t}\n\t}\n}\nfunc main() {\n\tvar ff flipFlop\n\tfmt.Println(ff)\n    // Pulse a0\n\tff.A0 = true\n\tff.Eval()\n\tfmt.Println(ff)\n\tff.A0 = false\n\tff.Eval()\n\tfmt.Println(ff)\n    // Pulse a1\n\tff.A1 = true\n\tff.Eval()\n\tfmt.Println(ff)\n\tff.A1 = false\n\tff.Eval()\n\tfmt.Println(ff)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58128541/build-golang-application-with-librdkafka-in-a-debian-docker-image",
    "body": "FROM golang:1.12.9-alpine AS build-stage\nLABEL app=\"application_name\"\nENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n# Because of https://github.com/docker/docker/issues/14914\n# required by go get\nRUN apk add --update --no-cache alpine-sdk bash python ca-certificates \\\n      libressl \\\n      tar \\\n      git openssh openssl yajl-dev zlib-dev cyrus-sasl-dev openssl-dev coreutils\nWORKDIR /src/application_name\nRUN git clone https://github.com/edenhill/librdkafka.git\nWORKDIR /src/application_name/librdkafka\nRUN /src/application_name/librdkafka/configure --prefix /usr\nRUN make\nRUN make install\nWORKDIR /src/application_name\nCOPY . .\n# build the application\nRUN GOOS=linux go build -a -o image-name ."
  },
  {
    "url": "https://stackoverflow.com/questions/55989902/lookup-google-com-on-192-168-65-153-cannot-unmarshal-dns-message",
    "body": "$ docker build -t test . && docker run --rm -it --dns 8.8.8.8  test\nSending build context to Docker daemon  27.14kB\nStep 1/7 : FROM golang:1.12.4\n ---> b860ab44e93e\nStep 2/7 : RUN mkdir /app\n ---> Using cache\n ---> 2a339a5e5fde\nStep 3/7 : RUN uname -a\n ---> Using cache\n ---> dac4362453e6\nStep 4/7 : RUN go version\n ---> Using cache\n ---> ae654c1c4aa6\nStep 5/7 : WORKDIR /app\n ---> Using cache\n ---> db3c82038173\nStep 6/7 : COPY . /app/\n ---> 9dba317a267d\nStep 7/7 : CMD [\"go\",\"run\",\"run_stuff.go\"]\n ---> Running in 2ea6b38869f1\nRemoving intermediate container 2ea6b38869f1\n ---> 0a0f817b51bb\nSuccessfully built 0a0f817b51bb\nSuccessfully tagged test:latest\ncname: _xmpp-server._tcp.google.com.\nxmpp-server.l.google.com.:5269:5:0\nalt4.xmpp-server.l.google.com.:5269:20:0\nalt3.xmpp-server.l.google.com.:5269:20:0\nalt1.xmpp-server.l.google.com.:5269:20:0\nalt2.xmpp-server.l.google.com.:5269:20:0"
  },
  {
    "url": "https://stackoverflow.com/questions/55416148/why-is-there-a-seemingly-useless-infinite-for-loop-in-the-main-function-in-src-r",
    "body": "func Fatalf(fmt_ string, args ...interface{}) {\n\tflusherrors()\n\tif Debug_panic != 0 || nsavederrors+nerrors == 0 {\n\t\tfmt.Printf(\"%v: internal compiler error: \", linestr(lineno))\n\t\tfmt.Printf(fmt_, args...)\n\t\tfmt.Printf(\"\\n\")\n\t\t// If this is a released compiler version, ask for a bug report.\n\t\tif strings.HasPrefix(objabi.Version, \"go\") {\n\t\t\tfmt.Printf(\"\\n\")\n\t\t\tfmt.Printf(\"Please file a bug report including a short program that triggers the error.\\n\")\n\t\t\tfmt.Printf(\"https://golang.org/issue/new\\n\")\n\t\t} else {\n\t\t\t// Not a release; dump a stack trace, too.\n\t\t\tfmt.Println()\n\t\t\tos.Stdout.Write(debug.Stack())\n\t\t\tfmt.Println()\n\t\t}\n\t}\n\thcrash()\n\terrorexit()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/40642689/how-to-get-consumer-group-offsets-for-partition-in-golang-kafka-10",
    "body": "package main\n\n    import (\n        \"context\"\n        \"log\"\n        \"strings\"\n\n        \"github.com/Shopify/sarama\"\n    )\n\n    func main() {\n        groupName := \"testgrp\"\n        topic := \"topic_name\"\n        offset, e := GetCGOffset(context.Background(), \"localhost:9092\", groupName, topic)\n        if e != nil {\n            log.Fatal(e)\n        }\n        log.Printf(\"Consumer group %s offset for topic %s is: %d\", groupName, topic, offset)\n    }\n\n    type gcInfo struct {\n        offset int64\n    }\n\n    func (g *gcInfo) Setup(sarama.ConsumerGroupSession) error {\n        return nil\n    }\n\n    func (g *gcInfo) Cleanup(sarama.ConsumerGroupSession) error {\n        return nil\n    }\n\n    func (g *gcInfo) ConsumeClaim(_ sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {\n        g.offset = claim.InitialOffset()\n        return nil\n    }\n\n    func GetCGOffset(ctx context.Context, brokers, groupName, topic string) (int64, error) {\n        config := sarama.NewConfig()\n        config.Consumer.Offsets.AutoCommit.Enable = false // we're not going to update the consumer group offsets\n        client, err := sarama.NewConsumerGroup(strings.Split(brokers, \",\"), groupName, config)\n        if err != nil {\n            return 0, err\n        }\n        info := gcInfo{}\n        if err := client.Consume(ctx, []string{topic}, &info); err != nil {\n            return 0, err\n        }\n        return info.offset, nil\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/76585245/fizz-openapi-generator-for-gin-is-renaming-types",
    "body": "1\t// setOperationParams adds the fields of the struct type t\n 2\t// to the given operation.\n 3\tfunc (g *Generator) setOperationParams(op *Operation, t, parent reflect.Type, allowBody bool, path string) error {\n 4\t\tif t.Kind() != reflect.Struct {\n 5\t\t\treturn errors.New(\"input type is not a struct\")\n 6\t\t}\n 7\t\tif err := g.buildParamsRecursive(op, t, parent, allowBody); err != nil {\n 8\t\t\treturn err\n 9\t\t}\n10\t\t// Input fields that are neither path- nor query-bound\n11\t\t// have been extracted into the operation's RequestBody\n12\t\t// If the RequestBody is not nil, give it a name and\n13\t\t// move it to the openapi spec's components/schemas section\n14\t\t// Replace the RequestBody's schema with a reference\n15\t\t// to the named schema in components/schemas\n16\t\tif op.RequestBody != nil {\n17\t\t\tmt := tonic.MediaType()\n18\t\t\tif mt == \"\" {\n19\t\t\t\tmt = anyMediaType\n20\t\t\t}\n21\t\t\tsch := op.RequestBody.Content[mt].Schema\n22\t\t\tif sch != nil {\n23\t\t\t\tname := strings.Title(op.ID) + \"Input\"\n24\t\t\t\tg.api.Components.Schemas[name] = sch\n25\t\t\t\top.RequestBody.Content[mt].Schema = &SchemaOrRef{Reference: &Reference{\n26\t\t\t\t\tRef: componentsSchemaPath + name,\n27\t\t\t\t}}\n28\t\t\t}\n29\t\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76448408/cors-policy-response-to-preflight-request-doesnt-pass-access-control-check-no",
    "body": "package main\nimport (\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-contrib/sessions\"\n\t\"github.com/gin-contrib/sessions/cookie\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\trouter := gin.Default()\n\tconfig := cors.DefaultConfig()\n\tconfig.AddAllowHeaders(\"Authorization\")\n\tconfig.AllowCredentials = true\n\tconfig.AllowAllOrigins = false\n\t// I think you should whitelist a limited origins instead:\n\t//\tconfig.AllowAllOrigins = []{\"xxxx\", \"xxxx\"}\n\tconfig.AllowOriginFunc = func(origin string) bool {\n\t\treturn true\n\t}\n\trouter.Use(cors.New(config))\n\tstore := cookie.NewStore([]byte(\"your-secret-key\"))\n\tstore.Options(sessions.Options{MaxAge: 60 * 60 * 24})\n\trouter.Use(sessions.Sessions(\"sessions\", store))\n\t// routes below\n\trouter.Run(\"localhost:3000\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75604402/wait-until-a-value-in-a-map-becomes-available-in-go",
    "body": "type Map struct {\n\tsync.Mutex\n\tm    map[string]any\n\tsubs map[string][]chan any\n}\nfunc (m *Map) Set(key string, value any) {\n\tm.Lock()\n\tdefer m.Unlock()\n\tm.m[key] = value\n\t// Send the new value to all waiting subscribers of the key\n\tfor _, sub := range m.subs[key] {\n\t\tsub <- value\n\t}\n\tdelete(m.subs, key)\n}\nfunc (m *Map) Wait(key string) any {\n\tm.Lock()\n\t// Unlock cannot be deferred so we can unblock Set() while waiting\n\tvalue, ok := m.m[key]\n\tif ok {\n\t\tm.Unlock()\n\t\treturn value\n\t}\n\t// if there is no value yet, subscribe to any new values for this key\n\tch := make(chan any)\n\tm.subs[key] = append(m.subs[key], ch)\n\tm.Unlock()\n\treturn <-ch\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74808999/gorm-get-all-data-from-table-with-condition-on-nested-table",
    "body": "package main\nimport (\n\t\"fmt\"\n\t_ \"github.com/lib/pq\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Order struct {\n\tId            int\n\tTransactionId int\n\tTransaction   Transaction\n}\ntype Transaction struct {\n\tId        int\n\tProfileId int\n\tProfile   Profile\n}\ntype Profile struct {\n\tId        int\n\tAccountId int\n\tAccount   Account\n}\ntype Account struct {\n\tId int\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Account{})\n\tdb.AutoMigrate(&Profile{})\n\tdb.AutoMigrate(&Transaction{})\n\tdb.AutoMigrate(&Order{})\n\tdb.Create(&Account{})\n\tdb.Create(&Profile{AccountId: 1})\n\tdb.Create(&Transaction{ProfileId: 1})\n\tdb.Create(&Order{TransactionId: 1})\n\t// order + transaction + profile + account\n\tvar order Order\n\tdb.Debug().Preload(\"Transaction.Profile.Account\").Joins(\"inner join transactions t on orders.transaction_id = t.id\").Joins(\"inner join profiles p on p.id = t.profile_id\").Joins(\"inner join accounts a on p.account_id = a.id\").First(&order, \"a.id = ?\", 1)\n\tfmt.Println(order)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74306502/fastest-way-to-extract-tar-files-in-side-tar-file-using-go",
    "body": "package main\nimport (\n\t\"archive/tar\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n)\ntype Semaphore struct {\n\tWg sync.WaitGroup\n\tCh chan int\n}\n// Limit on the number of simultaneously running goroutines.\n// Depends on the number of processor cores, storage performance, amount of RAM, etc.\nconst grMax = 10\nconst tarFileName = \"docker_image.tar\"\nconst dstDir = \"output/docker\"\nfunc extractTar(tarFileName string, dstDir string) error {\n\tf, err := os.Open(tarFileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsem := Semaphore{}\n\tsem.Ch = make(chan int, grMax)\n\tif err := Untar(dstDir, f, &sem, true); err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"extractTar: wait for complete\")\n\tsem.Wg.Wait()\n\treturn nil\n}\nfunc Untar(dst string, r io.Reader, sem *Semaphore, godeep bool) error {\n\ttr := tar.NewReader(r)\n\tfor {\n\t\theader, err := tr.Next()\n\t\tswitch {\n\t\tcase err == io.EOF:\n\t\t\treturn nil\n\t\tcase err != nil:\n\t\t\treturn err\n\t\t}\n\t\t// the target location where the dir/file should be created\n\t\ttarget := filepath.Join(dst, header.Name)\n\t\tswitch header.Typeflag {\n\t\t// if its a dir and it doesn't exist create it\n\t\tcase tar.TypeDir:\n\t\t\tif _, err := os.Stat(target); err != nil {\n\t\t\t\tif err := os.MkdirAll(target, 0755); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t// if it's a file create it\n\t\tcase tar.TypeReg:\n\t\t\tif err := saveFile(tr, target, os.FileMode(header.Mode)); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\text := filepath.Ext(target)\n\t\t\t// if it's tar file and we are on top level, extract it\n\t\t\tif ext == \".tar\" && godeep {\n\t\t\t\tsem.Wg.Add(1)\n\t\t\t\t// A buffered channel is used to limit the number of simultaneously running goroutines\n\t\t\t\tsem.Ch <- 1\n\t\t\t\t// the file is unpacked to a directory with the file name (without extension)\n\t\t\t\tnewDir := filepath.Join(dst, strings.TrimSuffix(header.Name, \".tar\"))\n\t\t\t\tif err := os.Mkdir(newDir, 0755); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tgo func(target string, newDir string, sem *Semaphore) {\n\t\t\t\t\tfmt.Println(\"start goroutine, chan length:\", len(sem.Ch))\n\t\t\t\t\tfmt.Println(\"START:\", target)\n\t\t\t\t\tdefer sem.Wg.Done()\n\t\t\t\t\tdefer func() {<-sem.Ch}()\n\t\t\t\t\t// the internal tar file opens\n\t\t\t\t\tft, err := os.Open(target)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tdefer ft.Close()\n\t\t\t\t\t// the godeep parameter is false here to avoid unpacking archives inside the current archive.\n\t\t\t\t\tif err := Untar(newDir, ft, sem, false); err != nil {\n\t\t\t\t\t\tfmt.Println(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tfmt.Println(\"DONE:\", target)\n\t\t\t\t}(target, newDir, sem)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\nfunc saveFile(r io.Reader, target string, mode os.FileMode) error {\n\tf, err := os.OpenFile(target, os.O_CREATE|os.O_RDWR, mode)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer f.Close()\n\tif _, err := io.Copy(f, r); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nfunc main() {\n\terr := extractTar(tarFileName, dstDir)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73987493/golang-image-gif-encodeall-have-many-black-dots",
    "body": "package main\nimport (\n\t\"image\"\n\t\"image/draw\"\n\t\"image/gif\"\n\t_ \"image/png\"\n\t\"os\"\n\t\"github.com/xyproto/palgen\"\n)\nfunc main() {\n\tg := new(gif.GIF)\n\tg.Image = make([]*image.Paletted, 1)\n\tg.Delay = make([]int, 1)\n\tf, err := os.Open(\"source.png\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer f.Close()\n\timg, _, err := image.Decode(f)\n\tpal, err := palgen.Generate(img, 256)\n\tPaletted := image.NewPaletted(img.Bounds(), pal)\n\tdraw.FloydSteinberg.Draw(Paletted, img.Bounds(), img, image.Point{})\n\tg.Image[0] = Paletted\n\tg.Delay[0] = 100\n\tout, err := os.Create(\"gif.gif\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer out.Close()\n\terr = gif.EncodeAll(out, g)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71849785/how-to-run-database-setup-only-once-from-multiple-go-packages",
    "body": "package testutil\nimport (\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"testing\"\n)\n//                  v: the directory of a package\n//                          v: the files in a directory\n//                            v: the tests in a file\nvar tests = make(map[string][][]func(*testing.T))\nfunc Register(ft ...func(*testing.T)) int {\n\t// Use the directory of the Caller's file\n\t// to map the tests. Why this can be useful\n\t// will be shown later.\n\t_, f, _, _ := runtime.Caller(1)\n\tdir := filepath.Dir(f)\n\ttests[dir] = append(tests[dir], ft)\n    // This is not necessary, but a function with a return\n    // can be used in a top-level variable declaration which\n    // can be used to avoid unnecessary init() functions.\n\treturn 0\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70106874/daily-log-rotation-for-golang-project",
    "body": "var (\n\tlogFile *dailyrotate.File\n)\nfunc openLogFile(pathFormat string, onClose func(string, bool)) error {\n\tw, err := dailyrotate.NewFile(pathFormat, onLogClose)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogFile = w\n\treturn nil\n}\nfunc main() {\n\tlogDir := \"logs\"\n\t// we have to ensure the directory we want to write to\n\t// already exists\n\terr := os.MkdirAll(logDir, 0755)\n\tif err != nil {\n\t\tlog.Fatalf(\"os.MkdirAll()(\")\n\t}\n\tpathFormat := filepath.Join(logDir, \"2006-01-02.txt\")\n\terr = openLogFile(pathFormat, onLogClose)\n\tif err != nil {\n\t\tlog.Fatalf(\"openLogFile failed with '%s'\\n\", err)\n\t}\n  // ... the rest of your program\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68107667/regexp-multiline-non-greedy-match-until-optional-string",
    "body": "--------------------------------------------------------------------------------\n  (?s)                     set flags for this block (with . matching\n                           \\n) (case-sensitive) (with ^ and $\n                           matching normally) (matching whitespace\n                           and # normally)\n--------------------------------------------------------------------------------\n  \\A                       the beginning of the string\n--------------------------------------------------------------------------------\n  Key1:                    'Key1:'\n--------------------------------------------------------------------------------\n  \\n                       '\\n' (newline)\n--------------------------------------------------------------------------------\n  (?P<Key1>                 group and capture to \"Key1\":\n--------------------------------------------------------------------------------\n    .*                       any character (0 or more times (matching\n                             the most amount possible))\n--------------------------------------------------------------------------------\n  )                        end of \"Key1\"\n--------------------------------------------------------------------------------\n  Key2:                    'Key2:'\n--------------------------------------------------------------------------------\n  \\n                       '\\n' (newline)\n--------------------------------------------------------------------------------\n  (?P<Key2>                group and capture to \"Key2\":\n--------------------------------------------------------------------------------\n    .*?                      any character (0 or more times (matching\n                             the least amount possible))\n--------------------------------------------------------------------------------\n  )                        end of \"Key2\"\n--------------------------------------------------------------------------------\n  (?:                      group, but do not capture (optional\n                           (matching the most amount possible)):\n--------------------------------------------------------------------------------\n    OptionalKey3:            'OptionalKey3:'\n--------------------------------------------------------------------------------\n    \\n                       '\\n' (newline)\n--------------------------------------------------------------------------------\n    (?P<OptionalKey3>         group and capture to \"OptionalKey3\":\n--------------------------------------------------------------------------------\n      .*                       any character (0 or more times\n                               (matching the most amount possible))\n--------------------------------------------------------------------------------\n    )                        end of \"OptionalKey3\"\n--------------------------------------------------------------------------------\n  )?                       end of grouping\n--------------------------------------------------------------------------------\n  \\z                       the end of the string"
  },
  {
    "url": "https://stackoverflow.com/questions/63933234/memory-leak-when-calling-c-malloc-c-free-in-goroutines",
    "body": "package main\n/*\n#include <stdlib.h>\n*/\nimport \"C\"\nimport (\n        \"time\"\n        \"unsafe\"\n)\nfunc loopStuff() {\n        ptrs := make([]*unsafe.Pointer, 20)\n        for {\n                for i := 0; i < 20; i++ {\n                        tmp := C.malloc(16 * (1 << i))\n                        ptrs[i] = &tmp\n                }\n                time.Sleep(1 * time.Millisecond)\n                for i := 0; i < 20; i++ {\n                        C.free(*ptrs[i])\n                }\n        }\n}\nfunc main() {\n        for i := 0; i < 10; i++ {\n                go loopStuff()\n        }\n        loopStuff()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63545226/how-to-store-protocol-buffers-oneof-field-with-json",
    "body": "package main\nimport (\n\t\"fmt\"\n\tpb \"test/proto\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nfunc main() {\n\tobj := pb.Example{Test: &pb.Example_One{true}}\n\tfmt.Println(obj)\n\tfmt.Println(\"before one: \", obj.GetOne())\n\tfmt.Println(\"before two: \", obj.GetTwo())\n\tjsonData, _ := protojson.Marshal(&obj)\n\tfmt.Println(string(jsonData))\n\tfmt.Println(\"-----\")\n\tobj2 := pb.Example{}\n\t_ = protojson.Unmarshal(jsonData, &obj2)\n\tfmt.Println(obj2)\n\tfmt.Println(\"after one: \", obj2.GetOne())\n\tfmt.Println(\"after two: \", obj2.GetTwo())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54751609/go-tui-programming-using-tcell-api",
    "body": "package main\nimport (\n        \"fmt\"\n        \"github.com/gdamore/tcell\"\n        \"github.com/gdamore/tcell/encoding\"\n        \"os\"\n        \"time\"\n)\nfunc main() {\n        encoding.Register()\n        scn, err := tcell.NewScreen()\n        scn.Init()\n        if err != nil {\n                fmt.Fprintf(os.Stderr, \"%v\\n\", err)\n                os.Exit(1)\n        }\n        scn.Clear()\n        scn.SetContent(10, 10, rune('h'), []rune(\"\"), tcell.StyleDefault)\n        scn.Show()\n        time.Sleep(time.Second * 2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/43165507/how-to-maintain-migration-and-schema-in-xorm",
    "body": "var migrations = []*migrate.Migration{\n\t{\n\t\tID: \"201608301400\",\n\t\tMigrate: func(tx *xorm.Engine) error {\n\t\t\treturn tx.Sync2(&Person{})\n\t\t},\n\t\tRollback: func(tx *xorm.Engine) error {\n\t\t\treturn tx.DropTables(&Person{})\n\t\t},\n\t},\n\t{\n\t\tID: \"201608301430\",\n\t\tMigrate: func(tx *xorm.Engine) error {\n\t\t\treturn tx.Sync2(&Pet{})\n\t\t},\n\t\tRollback: func(tx *xorm.Engine) error {\n\t\t\treturn tx.DropTables(&Person{})\n\t\t},\n\t},\n\t{\n\t\tID: \"201608301460\",\n\t\tMigrate: func(tx *xorm.Engine) error {\n\t\t\treturn tx.Sync2(&Person{})\n\t\t},\n\t\tRollback: func(tx *xorm.Engine) error {\n\t\t\t_, e := tx.QueryString(\"ALTER TABLE dbo.person DROP COLUMN IF EXISTS your_new_column\")\n\t\t\treturn e\n\t\t},\n\t},\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77613161/why-is-there-a-growing-time-delaying-when-getting-values-from-redis-using-go-red",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/redis/go-redis/v9\"\n)\nvar ctx = context.Background()\nfunc main() {\n\t// Create a semaphore using a buffered channel\n\tsem := make(chan struct{}, 5)\n\t// Create a new Redis client\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr: \"localhost:6379\",\n\t\tDB:   5,\n\t})\n\t// Store a 100k value in Redis\n\tkey := \"some:test:key\"\n\tvalue := strings.Repeat(\"a\", 100000)\n\terr := rdb.Set(ctx, key, value, 0).Err()\n\tif err != nil {\n\t\tfmt.Println(\"Failed to set value:\", err)\n\t\treturn\n\t}\n\t// Get the value asynchronously 500 times, log the time it takes for each\n\tfor i := 0; i < 1000; i++ {\n\t\tgo func(i int) {\n\t\t\t// aquire semaphore\n\t\t\tsem <- struct{}{}\n\t\t\tdefer func() {\n\t\t\t\t// release semaphore\n\t\t\t\t<-sem\n\t\t\t}()\n\t\t\tt1 := time.Now()\n\t\t\tval, err := rdb.Get(ctx, key).Result()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Failed to get value:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tt2 := time.Now()\n\t\t\tfmt.Printf(\"%d: time: %vμs, val size: %d\\n\", i, t2.Sub(t1).Microseconds(), len(val))\n\t\t}(i)\n\t}\n\t// Wait for a while to ensure all goroutines have finished\n\ttime.Sleep(2 * time.Second)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77613161/why-is-there-a-growing-time-delaying-when-getting-values-from-redis-using-go-red",
    "body": "…\n991: time: 907μs, val size: 100000\n992: time: 835μs, val size: 100000\n993: time: 905μs, val size: 100000\n994: time: 875μs, val size: 100000\n995: time: 783μs, val size: 100000\n996: time: 829μs, val size: 100000\n997: time: 850μs, val size: 100000\n853: time: 775μs, val size: 100000\n998: time: 2117μs, val size: 100000\n852: time: 2187μs, val size: 100000\n842: time: 1957μs, val size: 100000\n858: time: 1268μs, val size: 100000\n854: time: 890μs, val size: 100000\n859: time: 1641μs, val size: 100000\n855: time: 1421μs, val size: 100000"
  },
  {
    "url": "https://stackoverflow.com/questions/76009185/how-to-mock-pulumi-resources-in-go-unit-tests",
    "body": "func (mocks) NewResource(args pulumi.MockResourceArgs) (string, resource.PropertyMap, error) {\n\tpulumi.Printf(args.TypeToken)\n\toutputs := args.Inputs.Mappable()\n\tif args.TypeToken == \"aws:iam/openIdConnectProvider:OpenIdConnectProvider\" {\n\t\toutputs[\"arn\"] = \"arn:aws:iam::123:oidc-provider/oidc.eks.us-west-2.amazonaws.com/id/abc\"\n\t\toutputs[\"id\"] = \"abc\"\n\t\toutputs[\"url\"] = \"https://someurl\"\n\t}\n\treturn args.Name + \"_id\", resource.NewPropertyMapFromMap(outputs), nil\n}\nfunc (mocks) Call(args pulumi.MockCallArgs) (resource.PropertyMap, error) {\n    outputs := map[string]interface{}{}\n    return resource.NewPropertyMapFromMap(outputs), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75997686/fx-uber-how-to-deal-with-request-scoped-lifecycle-for-database-transient-connec",
    "body": "type Scope struct {\n\trequest *http.Request\n}\nfunc NewScope(c *gin.Context) *Scope {\n\treturn &Scope{\n\t\trequest: c.Request,\n\t}\n}\nfunc (f *Scope) NewRepository() repository.Repository {\n\treturn ...\n}\nfunc NewGinHandler(log *zap.Logger) http.Handler {\n\tr := gin.New()\n\tr.GET(\"/todos\", func(c *gin.Context) {\n\t\tscope := NewScope(c)\n\t\tfx.New(\n            // register repository constructor\n\t\t\tfx.Provide(scope.NewRepository),\n            // actual request handler with access to repository\n\t\t\tfx.Invoke(func(repository repository.Repository) {\n\t\t\t\ttodos := repository.FindAll()\n\t\t\t\tc.JSON(200, todos)\n\t\t\t}),\n\t\t)\n\t})\n\treturn r\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75913434/how-to-inject-a-repo-or-service-in-a-middleware-in-a-clean-way",
    "body": "type AuthenticationRepository interface {\n\tGetApiKey(location string) (string, error)\n}\nfunc AuthorizationMiddleware(authRepo AuthenticationRepository) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\t// Get the location and key from headers\n\t\tlocation := c.GetHeader(\"Host\")\n\t\tapiKey := c.GetHeader(\"Key\")\n\t\t// Use the repository to get the API key from location\n\t\texpectedKey, err := authRepo.GetApiKey(location)\n\t\tif err != nil {\n\t\t\tlog.Errorf(\"Unexpected error when trying to get api key: %v\", err)\n\t\t\tc.AbortWithStatus(http.StatusServiceUnavailable)\n\t\t\treturn\n\t\t}\n\t\tif expectedKey != apiKey {\n\t\t\tc.AbortWithStatus(http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\t\t// Call the next handler\n\t\tc.Next()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75451501/gin-gonic-nested-templates",
    "body": "package main\nimport (\n\t\"github.com/gin-contrib/multitemplate\"\n\t\"github.com/gin-gonic/gin\"\n)\n// setupRenderer creates a new multitemplate Renderer with templates added.\nfunc setupRenderer() multitemplate.Renderer {\n\trenderer := multitemplate.NewRenderer()\n\trenderer.AddFromFiles(\n\t\t\"myTemplates\",\n\t\t\"templates/base.html\",\n\t\t\"templates/head.html\",\n\t\t\"templates/body.html\",\n\t)\n\treturn renderer\n}\n// setupRouter initializes a gin Engine, assigns a template renderer, and creates multiple views to return the templates.\nfunc setupRouter() *gin.Engine {\n\trouter := gin.Default()\n\trouter.HTMLRender = setupRenderer()\n\trouter.GET(\"/\", func(ctx *gin.Context) {\n\t\tctx.HTML(200, \"myTemplates\", gin.H{\"context\": gin.H{\"title\": \"index\"}})\n\t})\n\trouter.GET(\"/other\", func(ctx *gin.Context) {\n\t\tctx.HTML(200, \"myTemplates\", gin.H{\"context\": gin.H{\"title\": \"other\"}})\n\t})\n\treturn router\n}\nfunc main() {\n\trouter := setupRouter()\n\trouter.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75248772/get-request-returns-data-in-thunder-client-postman-but-gives-blank-data-in-golan",
    "body": "client := &http.Client{Timeout: 40 * time.Second}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res.Header)\n\tvar reader io.ReadCloser\n\tswitch res.Header.Get(\"Content-Encoding\") {\n\tcase \"gzip\":\n\t\treader, err = gzip.NewReader(res.Body)\n\tdefault:\n\t\treader = res.Body\n\t}\n\tdefer reader.Close()\n\tvar data map[string]interface{}\n\terr = json.NewDecoder(reader).Decode(&data)\n\tif err != nil {\n\t\tlog.Fatalf(\"decode request: %v\", err)\n\t}\n\tfmt.Println(data) 👈🏻 // map[data:[map[CH_52WEEK_HIGH_PRICE:994 CH_52WEEK_LOW_PRICE:438.35 CH_CLOSING_PRICE:543.55 CH_ISIN:INE982J01020 CH_LAST_TRADED_PRICE:542.2 CH_MARKET_TYPE:N ..."
  },
  {
    "url": "https://stackoverflow.com/questions/74936745/assert-mock-i-dont-know-what-to-return-because-the-method-call-was-unexpected",
    "body": "package services\nimport (\n\t\"errors\"\n\t\"testifymock/repo\"\n)\ntype TeamService struct {\n\tTR TeamRepoInterface\n}\nfunc NewTeamService(repo TeamRepoInterface) *TeamService {\n\treturn &TeamService{\n\t\tTR: repo,\n\t}\n}\ntype TeamRepoInterface interface {\n\tGetByID(id int) (repo.Team, error)\n\tUpdate(team repo.Team) error\n}\nfunc (ts *TeamService) Update(team *repo.Team) error {\n\tt, err := ts.TR.GetByID(team.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif t.TeamOwnerID != team.TeamOwnerID {\n\t\treturn errors.New(\"forbidden\")\n\t}\n\treturn ts.TR.Update(*team)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74936745/assert-mock-i-dont-know-what-to-return-because-the-method-call-was-unexpected",
    "body": "package services\nimport (\n\t\"errors\"\n\t\"testing\"\n\t\"testifymock/repo\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n)\n// 1. declare the mock struct\ntype teamRepoMock struct {\n\tmock.Mock\n}\n// 2. implement the interface\nfunc (m *teamRepoMock) GetByID(id int) (repo.Team, error) {\n\targs := m.Called(id)\n\treturn args.Get(0).(repo.Team), args.Error(1)\n}\nfunc (m *teamRepoMock) Update(team repo.Team) error {\n\targs := m.Called(team)\n\treturn args.Error(0)\n}\nfunc TestUpdate(t *testing.T) {\n\tt.Run(\"GoodUpdate\", func(t *testing.T) {\n\t\t// 3. instantiate/setup mock\n\t\trepoMock := new(teamRepoMock)\n\t\trepoMock.On(\"GetByID\", 1).Return(repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}, nil).Times(1)\n\t\trepoMock.On(\"Update\", repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}).Return(nil).Times(1)\n\t\tsut := NewTeamService(repoMock)\n\t\terr := sut.Update(&repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"})\n\t\t// 4. check that all expectations were met on the mock\n\t\tassert.Nil(t, err)\n\t\tassert.True(t, repoMock.AssertExpectations(t))\n\t})\n\tt.Run(\"BadUpdate\", func(t *testing.T) {\n\t\t// 3. instantiate/setup mock\n\t\trepoMock := new(teamRepoMock)\n\t\trepoMock.On(\"GetByID\", 1).Return(repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}, nil).Times(1)\n\t\trepoMock.On(\"Update\", repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}).Return(errors.New(\"some error while updating\")).Times(1)\n\t\tsut := NewTeamService(repoMock)\n\t\terr := sut.Update(&repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"})\n\t\t// 4. check that all expectations were met on the mock\n\t\tassert.Equal(t, \"some error while updating\", err.Error())\n\t\tassert.True(t, repoMock.AssertExpectations(t))\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74841011/go-pg-how-to-select-also-entity-from-related-table",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/lib/pq\"\n)\ntype Book struct {\n\tgorm.Model\n\tTitle       string\n\tDescription string\n\tAuthorID    uint\n\tAuthor      Author\n}\ntype Author struct {\n\tgorm.Model\n\tFirstName string\n\tLastName  string\n\tBooks     []Book\n}\ntype Result struct {\n\tBookId    int\n\tAuthorId  int\n\tTitle     string\n\tFirstName string\n\tLastName  string\n}\nfunc main() {\n\tconn, err := sql.Open(\"postgres\", \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\t// query\n\tvar result []Result\n\trows, err := conn.Query(\"select b.id, a.id, b.title, a.first_name, a.last_name from authors a inner join books b on a.id = b.author_id\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\tvar record Result\n\t\tif err := rows.Scan(&record.BookId, &record.AuthorId, &record.Title, &record.FirstName, &record.LastName); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tresult = append(result, record)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%v\", result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74670325/how-to-convert-a-slice-of-maps-to-a-slice-of-structs-with-different-properties",
    "body": "var result []any\nfor _, m := range a {\n\tfields := make([]reflect.StructField, 0, len(m))\n\tfor k, v := range m {\n\t\tf := reflect.StructField{\n\t\t\tName: k,\n\t\t\tType: reflect.TypeOf(v), // allow for other types, not just strings\n\t\t}\n\t\tfields = append(fields, f)\n\t}\n\tst := reflect.StructOf(fields) // new struct type\n\tsv := reflect.New(st)          // new struct value\n\tfor k, v := range m {\n\t\tsv.Elem(). // dereference struct pointer\n\t\t\t\tFieldByName(k).         // get the relevant field\n\t\t\t\tSet(reflect.ValueOf(v)) // set the value of the field\n\t}\n\tresult = append(result, sv.Interface())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74439162/protobuf-any-unmarshal-from-a-json-rawmessage",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"google.golang.org/protobuf/types/known/anypb\"\n\t\"github.com/ZekeLu/demo/pb\"\n)\nfunc main() {\n\t// If the db stores an instance of pb.Foo, then unmarshal it first.\n\tbuf := json.RawMessage([]byte(`{\"v\":10}`))\n\tvar foo pb.Foo\n\terr := json.Unmarshal(buf, &foo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// And then marshal it into a new Any instance, which can be used to\n\t// create a slice that can be assigned to pb.MyMessage.List.\n\ta1, err := anypb.New(&foo)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tbar := &pb.Bar{V: \"10\"}\n\ta2, err := anypb.New(bar)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Initialize the List field.\n\tm := pb.MyMessage{List: []*anypb.Any{a1, a2}}\n\tbuf, err = json.Marshal(&m)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%s\\n\", buf)\n\t// Output: {\"list\":[{\"type_url\":\"type.googleapis.com/pb.Foo\",\"value\":\"CAo=\"},{\"type_url\":\"type.googleapis.com/pb.Bar\",\"value\":\"CgIxMA==\"}]}\n\t// If the db stores the output above, it can be unmarshal directly\n\tvar m2 pb.MyMessage\n\terr = json.Unmarshal(buf, &m2)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%v\\n\", m2.List)\n\t// Output: [[type.googleapis.com/pb.Foo]:{v:10} [type.googleapis.com/pb.Bar]:{v:\"10\"}]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72853519/how-can-i-return-two-different-concrete-types-from-a-single-method-in-go-1-18",
    "body": "func LoadConfiguration[T Configuration](data []byte) (*T, error) {\n    config, err := loadConf[T](data)\n    if err != nil {\n        return nil, err\n    }\n    // let's pretend there's only one value of type parameter type\n    // type-specific code\n    switch t := config.(type) {\n        case *Type1:\n            // ... some *Type1 specific code\n        case *Type2:\n            // ... some *Type2 specific code\n        default:\n            // can't really happen because T is restricted to Configuration but helps catch errors if you extend the union and forget to add a corresponding case\n            panic(\"invalid type\")\n    }\n    return config, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71960918/use-go-to-encrypt-message-with-ssh-rsa-public-key-which-then-can-be-decrypted-us",
    "body": "package main\nimport (\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"golang.org/x/crypto/ssh\"\n)\nfunc main() {\n\t// Key import\n\tpublicKey := \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8NGcNWf6cUno2lpny36js9ynXCQ6kuJ14yIViuPwty0ZkfhpPdw3zVKWmKV0zS1/QyO6a5d85I9ywvEXHiZr4+fE4JRPxdEIQVGMz7OThs0XgluE4zZrw55ywMt/b6elPC2TkshUHQfDYQuIh1ZBqFOnvUIh8yyGc1L4sLACGY75tpvSE29RZQRmaZaV5YpzIM0SbpFirOqWsjKd3kLMjPqPr9+ISpqOP2tTfOfw9IW8gvRUYa2oRUEyE7Ju4QrwSWmKj9JK9KTeAzRiy5rsSW6issDaxQIYg2BNT8YLrNVm+FWpOVRud6KwohOpk8/YeM0EKEO3vAfGJH6tYT9Zv whatever\"\n\tparsed, _, _, _, err := ssh.ParseAuthorizedKey([]byte(publicKey))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tparsedCryptoKey := parsed.(ssh.CryptoPublicKey)\n\tpubCrypto := parsedCryptoKey.CryptoPublicKey()\n\tpub := pubCrypto.(*rsa.PublicKey)\n\t// Encryption\n\tmsg := \"The quick brown fox jumps over the lazy dog\"\n\tencryptedBytes, err := rsa.EncryptPKCS1v15(\n\t\trand.Reader,\n\t\tpub,\n\t\t[]byte(msg),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(hex.EncodeToString(encryptedBytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71960918/use-go-to-encrypt-message-with-ssh-rsa-public-key-which-then-can-be-decrypted-us",
    "body": "7610da88661fc80b145f3bdd415cb71e73b1ad5100f7b5a9d9c5d27d9e3645d626dd784ccc5cc6c1e44aeec04b0e64072bfe1b58e88feec4b5e6ca63a14c5a23dad1370a303f2f775f4e6f349bab52a3f5883a51ac1f53247a4e05fb9989fc999878ac8f3821da0a079272738145dda7a340b7e4d44d922e563558972444b6f7400a4affffe2a6ee42d400cff51bf3eecc8cd1ffc9ea8c8d04ff6ef0e566d105a4841bcece7b16e2068a321e0c7b4cb964593fcf59795f0a14ec1ac95b941eaa452912bca2e1431992672dcdcc1ea42ff956ef7d21f126a1650c4a306817b4e094ee8c50a01dcc04a7be25e0c01b2ba678be3561774ae859353b5cc98a3b9b11"
  },
  {
    "url": "https://stackoverflow.com/questions/71960918/use-go-to-encrypt-message-with-ssh-rsa-public-key-which-then-can-be-decrypted-us",
    "body": "  -----BEGIN PRIVATE KEY-----\n  MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC8NGcNWf6cUno2\n  lpny36js9ynXCQ6kuJ14yIViuPwty0ZkfhpPdw3zVKWmKV0zS1/QyO6a5d85I9yw\n  vEXHiZr4+fE4JRPxdEIQVGMz7OThs0XgluE4zZrw55ywMt/b6elPC2TkshUHQfDY\n  QuIh1ZBqFOnvUIh8yyGc1L4sLACGY75tpvSE29RZQRmaZaV5YpzIM0SbpFirOqWs\n  jKd3kLMjPqPr9+ISpqOP2tTfOfw9IW8gvRUYa2oRUEyE7Ju4QrwSWmKj9JK9KTeA\n  zRiy5rsSW6issDaxQIYg2BNT8YLrNVm+FWpOVRud6KwohOpk8/YeM0EKEO3vAfGJ\n  H6tYT9ZvAgMBAAECggEBAKP++alNuSpYSDxXAPD86cMLIL9LGiJ46Gb+PBSpYr04\n  uy8IHz8NW++j2/AtbRQsYuKYpCn/koLE+CJc/GUCSDMaAJLO5FDq4EJAdm0hyNPP\n  Fl28u6Z2qsOu3v8+ZYjIi8+f+xu4/c/kKs0Xgtq+sOdvL+WkBDrR+okhbFErSo3O\n  z4SXkSTbRzKuFuZQA8HPi5kkDloEKhvZr3M0UyxUm6OtQTgW9mz3u+eabtBWVHEk\n  3CY6AVi+FpKX1wj1j3gYCl5kjAxJALVuPXg/MhuiHBJODWWtsl4qnlrUqVn/qYwW\n  G7GQb9dYjJK+WCjwG0VqoH2egEphaF4BrWMr6DLtseECgYEA5geNRjqKjmfxOlqm\n  mA5BV08tey9C59Ef11aYmrx+ngkKDdHNvY2JOkpEA3huoa0sT4rRylmmYNBUVxnM\n  UVqU8ppwRCfa58KTccopQO3BvSub74GvpwOX9MSn0CzW3brrFPfs72Lo3TAG4png\n  ENufcF1PGqTDFXhQsQC8ZPJmWbECgYEA0XQBcF8tuEN1UHzPwnG35YPayRPusrxd\n  3PD2BmOcp8B4DHS1KU2vJwu0nisi7S8eUbGxpRjwg3c5clQWFxWHuc//aRRb2QGl\n  TR1XvtnU6qjGAnH7jcF+tsRlWx6Qc35InGodzgS8SzemNzXEOVmI7U4r7LmQe9Q1\n  SX6dKzp/Gh8CgYB0bzwmYTmDLb/gDsSm0Qhn/k8CPID8QFGCuXWTVXgt3Ft3dUxT\n  91GP7MmSjCJLuhFkzdq1Nz3NYYZfdFKEl3ovdtb+2MGocEgb3/2TvQVFEM7ko9ta\n  iaogHm7nI9s67wNRYNFQttsyIr5JcyQExHZm9QQ2c1HAC1+kyL+TxVLjcQKBgQC7\n  g0+Geq9Dt6DfXd3iBkzMfS7xtZaNDXY6xr57GdK1m+ndvN4zDAkyu5gHwjaSgQxz\n  ttGDLMCl8abMY9si73ODNmNCf6d6r659Szey9PFY45/hsIm0bvYyScEzwjkwLG51\n  Gct1FWg9LqTv6IKzlSSwzrskQzzGn0TVdzTd7pC7oQKBgQDGTj2gvzn4gwFcAQI6\n  Zs4zbnXWwuQ0zt9y2Nzvs3Qwv8F2uryPnzv8DdbvdZ9dqnZCa8BvEALqfuOpKi4P\n  5wpd3+Tw6eCwtNZwNZ+TJXLxXelmQBehM52RUb9wM+QzRBhIJayEuveNzJ9Irc14\n  IDI76VfujESxC/qjZHFXkfdS3A==\n  -----END PRIVATE KEY-----"
  },
  {
    "url": "https://stackoverflow.com/questions/70778945/how-to-get-both-the-chardata-and-the-value-of-the-attributes-of-an-xml-tag-when",
    "body": "dec := xml.NewDecoder(strings.NewReader(sample))\n\nloop:\n\tfor {\n\t\ttok, err := dec.Token()\n\t\tswitch {\n\t\tcase err != nil && err != io.EOF:\n\t\t\tpanic(err)\n\t\tcase err == io.EOF:\n\t\t\tbreak loop\n\t\tcase tok == nil:\n\t\t\tfmt.Println(\"token is nill\")\n\t\t}\n\t\tswitch se := tok.(type) {\n\t\tcase xml.StartElement:\n\t\t\tif se.Name.Local == \"page\" {\n\t\t\t\tvar page Page\n\t\t\t\tif err := dec.DecodeElement(&page, &se); err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\ttarget := PageTarget{\n\t\t\t\t\tXMLName: page.XMLName,\n\t\t\t\t\tId:      page.Id,\n\t\t\t\t\tTitle:   page.Title,\n\t\t\t\t\tText:    page.Revision.Text,\n\t\t\t\t}\n\t\t\t\tout, err := xml.MarshalIndent(target, \" \", \"  \")\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tfmt.Println(string(out))\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/70508492/how-to-print-custom-output-in-terminal-terraform-custom-provider",
    "body": "func resourceLoadBalancerDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {\n\tvar diags diag.Diagnostics\n\tconn := meta.(*conns.AWSClient).ELBConn(ctx)\n\tlog.Printf(\"[INFO] Deleting ELB Classic Load Balancer: %s\", d.Id())\n\t_, err := conn.DeleteLoadBalancerWithContext(ctx, &elb.DeleteLoadBalancerInput{\n\t\tLoadBalancerName: aws.String(d.Id()),\n\t})\n\tif err != nil {\n\t\treturn sdkdiag.AppendErrorf(diags, \"deleting ELB Classic Load Balancer (%s): %s\", d.Id(), err)\n\t}\n\terr = deleteNetworkInterfaces(ctx, meta.(*conns.AWSClient).EC2Conn(ctx), d.Id())\n\tif err != nil {\n\t\tdiags = sdkdiag.AppendWarningf(diags, \"cleaning up ELB Classic Load Balancer (%s) ENIs: %s\", d.Id(), err)\n\t}\n\treturn diags\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69958509/opencv-estimateaffinepartial2d-what-is-the-required-input-format",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"log\"\n\t\"os\"\n\t\"gocv.io/x/gocv\"\n)\nfunc run() error {\n\tvar nfeatures = 1000                    // default is 500\n\tvar scaleFactor float32 = 1.2           // default 1.2\n\tvar nlevels = 8                         // default 8\n\tvar edgeThreshold = 31                  // default 32\n\tvar firstLevel = 0                      // default 0\n\tvar WtaK = 2                            // default 2\n\tvar scoreType = gocv.ORBScoreTypeHarris // default ORBScoreTypeHarris\n\tvar patchSize = 31                      // default 31\n\tvar fastThreshold = 20                  // default 20\n\talgo := gocv.NewORBWithParams(nfeatures, scaleFactor, nlevels, edgeThreshold, firstLevel, WtaK, scoreType, patchSize, fastThreshold)\n\toverlayFile := \"score_overlay_2021_1280.png\"\n\toverlay := gocv.IMRead(overlayFile, gocv.IMReadColor)\n\tif overlay.Empty() {\n\t\treturn fmt.Errorf(\"unable to load %s\", overlayFile)\n\t}\n\tkp1, des1 := algo.DetectAndCompute(overlay, gocv.NewMat())\n\tmatcher := gocv.NewBFMatcher()\n\tframeFile := \"frame-00570.jpg\"\n\timg := gocv.IMRead(frameFile, gocv.IMReadColor)\n\tif img.Empty() {\n\t\treturn fmt.Errorf(\"unable to load %s\", frameFile)\n\t}\n\tnewWidth := 1280.0\n\tnewHeight := newWidth*(float64(img.Rows())/float64(img.Cols()))\n\tgocv.Resize(img, &img, image.Pt(int(newWidth), int(newHeight)), 0,0, gocv.InterpolationDefault)\n\tkp2, des2 := algo.DetectAndCompute(img, gocv.NewMat())\n\tmatches := matcher.KnnMatch(des1, des2, 4)\n\t// Store all the good matches as per Lowe's ratio test\n\tgoodMatches := make([]gocv.DMatch, 0)\n\tfor _, submatches := range matches {\n\t\tif submatches[0].Distance < 0.75 * submatches[1].Distance {\n\t\t\tgoodMatches = append(goodMatches, submatches[0])\n\t\t}\n\t}\n\tconst MinGoodMatches = 7\n\tif len(goodMatches) < MinGoodMatches {\n\t\treturn fmt.Errorf(\"only found %d matches, need at least %d\", len(goodMatches), MinGoodMatches)\n\t}\n\tkp1f := make([]gocv.Point2f, 0)\n\tfor _, gm := range goodMatches {\n\t\tkp1f = append(kp1f, gocv.Point2f{\n\t\t\tX: float32(kp1[gm.QueryIdx].X),\n\t\t\tY: float32(kp1[gm.QueryIdx].Y),\n\t\t})\n\t}\n\tkp1vec := gocv.NewPoint2fVectorFromPoints(kp1f)\n\tkp2f := make([]gocv.Point2f, 0)\n\tfor _, gm := range goodMatches {\n\t\tkp2f = append(kp2f, gocv.Point2f{\n\t\t\tX: float32(kp2[gm.TrainIdx].X),\n\t\t\tY: float32(kp2[gm.TrainIdx].Y),\n\t\t})\n\t}\n\tkp2vec := gocv.NewPoint2fVectorFromPoints(kp2f)\n\tlog.Printf(\"kp1:%d kp2:%d\", kp1vec.Size(),kp2vec.Size())\n\tt := gocv.EstimateAffinePartial2D(kp1vec, kp2vec)\n\n\tscale := t.GetDoubleAt(0,0)\n\ttx := t.GetDoubleAt(0,2)\n\tty := t.GetDoubleAt(1,2)\n\tlog.Printf(\"Scale: %f Tx: %f Ty: %f\", scale, tx, ty)\n\treturn nil\n}\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Printf(\"Error: %s\", err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69699656/how-to-get-go-delve-debugger-dlv-display-command-to-show-all-values-of-a-sli",
    "body": "(dlv) args\nhandler = (*main.ProduceHandler)(0x14000112d10)\nwri = net/http.ResponseWriter(*net/http.response) 0x14000193708\nreq = (\"*net/http.Request\")(0x14000182000)\n(dlv) display -a wri.w.wr.res.handlerHeader[\"Content-Type\"][0]\n0: wri.w.wr.res.handlerHeader[\"Content-Type\"][0] = error key not found\n(dlv) print %T wri.w.wr.res.handlerHeader\nnet/http.Header []\n(dlv) n\n> main.(*ProduceHandler).ServeHTTP() ./api.go:144 (PC: 0x100984480)\n   139:\t\tswitch req.Method {\n   140:\t\tcase http.MethodGet:\n   141:\t\t\tif len(req.URL.Query()[\"code\"]) == 0 {\n   142:\t\t\t\tlog.Println(\"Sending entire produce database\")\n   143:\t\t\t\twri.Header().Add(\"Content-Type\", \"application/json\")\n=> 144:\t\t\t\twri.WriteHeader(http.StatusOK)\n   145:\t\t\t\tjson.NewEncoder(wri).Encode(handler.DB)\n   146:\t\t\t\treturn\n   147:\t\t\t}\n   148:\n   149:\t\t\tc := req.URL.Query()[\"code\"][0]\n0: wri.w.wr.res.handlerHeader[\"Content-Type\"][0] = \"application/json\""
  },
  {
    "url": "https://stackoverflow.com/questions/65950468/go-reflect-array",
    "body": "var arr [2]byte\narr[0] = 'g'\narr[1] = 'o'\n// take ValueOf a *pointer* to your array, and let reflect dereference it :\nv := reflect.ValueOf(&arr).Elem()\n// this sets the \"canAddr\" flag on this value\nfmt.Println(\"arr value - CanAddr() :\", v.CanAddr()) // prints 'true'\nslice := v.Slice(0, v.Len())\nfmt.Printf(\"arr bytes : % x\\n\", slice.Bytes()) // prints '67 6f'\n// for a field inside a struct : take a pointer to the struct\nvar msg Auth_msg\nmsg.Msg_class[0] = 'a'\nmsg.Msg_class[1] = 'z'\nv = reflect.ValueOf(&msg).Elem()\nfmt.Println(\"msg value - CanAddr() :\", v.CanAddr()) // prints 'true'\n// now reflect accepts to call \".Slice()\" on one of its fields :\nfield := v.FieldByName(\"Msg_class\")\nslice = field.Slice(0, field.Len())\nfmt.Printf(\"msg.Msg_class bytes : % x\\n\", slice.Bytes()) // prints '61 7a'"
  },
  {
    "url": "https://stackoverflow.com/questions/62053696/go-aws-sdk-to-access-instance-information-on-aws",
    "body": "package main\nimport (\n    \"github.com/aws/aws-sdk-go/aws/session\"\n    \"github.com/aws/aws-sdk-go/service/ec2\"\n    \"fmt\"\n)\nfunc main() {\n    // Load session from shared config\n    sess := session.Must(session.NewSessionWithOptions(session.Options{\n        SharedConfigState: session.SharedConfigEnable,\n    }))\n    // Create new EC2 client\n    ec2Svc := ec2.New(sess)\n    // Call to get detailed information on each instance\n    result, err := ec2Svc.DescribeInstances(nil)\n    if err != nil {\n        fmt.Println(\"Error\", err)\n    } else {\n        fmt.Println(\"Success\", result)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59722205/unmarshalling-xml-attributes-with-same-attribute-name-in-two-namespaces",
    "body": "func (s *Typemap) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n    nameAttr := \"\"\n    typeAttr := \"\"\n    xsiTypeAttr := \"\"\n\n    for _, attr := range start.Attr {\n        if attr.Name.Space == \"\" && attr.Name.Local == \"name\" {\n            nameAttr = attr.Value\n        }\n        if attr.Name.Space == \"\" && attr.Name.Local == \"type\" {\n            typeAttr = attr.Value\n        }\n        if attr.Name.Space == \"http://www.w3.org/2001/XMLSchema-instance\" && attr.Name.Local == \"type\" {\n            xsiTypeAttr = attr.Value\n        }\n    }\n\n    d.Skip()\n    *s = Typemap{Name: nameAttr, Type: typeAttr, XsiType: xsiTypeAttr}\n\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77489441/go-k8s-controller-runtime-upgrade-fake-client-lacks-functionality",
    "body": "type ErrorInjectingFakeClient struct {\n\tclient.WithWatch\n\twithSubResourceSimulation bool\n\twithObjects               []client.Object\n\twithStatusSubresource     []client.Object\n\tfailError                 error\n}\nfunc NewErrorInjectingFakeClient(scheme *runtime.Scheme, withSubResourceSimulation bool, initObjects ...client.Object) *ErrorInjectingFakeClient {\n\tbuilder := fake.NewClientBuilder().\n\t\tWithScheme(scheme).\n\t\tWithObjects(initObjects...).\n\t\tWithStatusSubresource(initObjects...)\n\treturn &ErrorInjectingFakeClient{\n\t\twithSubResourceSimulation: withSubResourceSimulation,\n\t\tWithWatch:                 builder.Build(),\n\t\twithObjects:               initObjects,\n\t\twithStatusSubresource:     initObjects,\n\t}\n}\n// Copied from sigs.k8s.io/controller-runtime@v0.16.3/pkg/client/fake/client.go#1217\nvar inTreeResourcesWithStatus = []schema.GroupVersionKind{\n\t{Version: \"v1\", Kind: \"Namespace\"},\n\t{Version: \"v1\", Kind: \"Node\"},\n\t{Version: \"v1\", Kind: \"PersistentVolumeClaim\"},\n\t{Version: \"v1\", Kind: \"PersistentVolume\"},\n\t{Version: \"v1\", Kind: \"Pod\"},\n\t{Version: \"v1\", Kind: \"ReplicationController\"},\n\t{Version: \"v1\", Kind: \"Service\"},\n\t{Group: \"apps\", Version: \"v1\", Kind: \"Deployment\"},\n\t{Group: \"apps\", Version: \"v1\", Kind: \"DaemonSet\"},\n\t{Group: \"apps\", Version: \"v1\", Kind: \"ReplicaSet\"},\n\t{Group: \"apps\", Version: \"v1\", Kind: \"StatefulSet\"},\n\t{Group: \"autoscaling\", Version: \"v1\", Kind: \"HorizontalPodAutoscaler\"},\n\t{Group: \"batch\", Version: \"v1\", Kind: \"CronJob\"},\n\t{Group: \"batch\", Version: \"v1\", Kind: \"Job\"},\n\t{Group: \"certificates.k8s.io\", Version: \"v1\", Kind: \"CertificateSigningRequest\"},\n\t{Group: \"networking.k8s.io\", Version: \"v1\", Kind: \"Ingress\"},\n\t{Group: \"networking.k8s.io\", Version: \"v1\", Kind: \"NetworkPolicy\"},\n\t{Group: \"policy\", Version: \"v1\", Kind: \"PodDisruptionBudget\"},\n\t{Group: \"storage.k8s.io\", Version: \"v1\", Kind: \"VolumeAttachment\"},\n\t{Group: \"apiextensions.k8s.io\", Version: \"v1\", Kind: \"CustomResourceDefinition\"},\n\t{Group: \"flowcontrol.apiserver.k8s.io\", Version: \"v1beta2\", Kind: \"FlowSchema\"},\n\t{Group: \"flowcontrol.apiserver.k8s.io\", Version: \"v1beta2\", Kind: \"PriorityLevelConfiguration\"},\n}\nfunc (c *ErrorInjectingFakeClient) Create(ctx context.Context, obj client.Object, opts ...client.CreateOption) error {\n\tif c.failError != nil {\n\t\treturn c.failError\n\t}\n\tif err := c.WithWatch.Create(ctx, obj, opts...); err != nil {\n\t\treturn err\n\t}\n\tif !c.withSubResourceSimulation {\n\t\treturn nil\n\t}\n\tc.withObjects = append(c.withObjects, obj)\n\terr := c.recreateFake(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (c *ErrorInjectingFakeClient) Delete(ctx context.Context, obj client.Object, opts ...client.DeleteOption) error {\n\tif c.failError != nil {\n\t\treturn c.failError\n\t}\n\tif err := c.WithWatch.Delete(ctx, obj, opts...); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (c *ErrorInjectingFakeClient) Update(ctx context.Context, obj client.Object, opts ...client.UpdateOption) error {\n\tif c.failError != nil {\n\t\treturn c.failError\n\t}\n\treturn c.WithWatch.Update(ctx, obj, opts...)\n}\n// TODO add other K8S client functions you want to inject failures into\nfunc (c *ErrorInjectingFakeClient) SetError(err error) {\n\tc.failError = err\n}\nfunc (c *ErrorInjectingFakeClient) recreateFake(ctx context.Context) error {\n\t// This is a pretty disgusting hack to get around the fact that the fake client doesn't support creating status subresources\n\t// Discussed here https://github.com/kubernetes-sigs/controller-runtime/issues/2386#issuecomment-1607768830\n\t// and here https://github.com/kubernetes-sigs/controller-runtime/issues/2362#issuecomment-1699415588\n\t// and here https://stackoverflow.com/questions/77489441/go-k8s-controller-runtime-upgrade-fake-client-lacks-functionality\n\t// We need to collect all the objects from the fake client, and then re-create the fake client with the status subresource for the created object\n\tgvks := sets.New(inTreeResourcesWithStatus...)\n\tfor _, o := range c.withObjects {\n\t\tgvk, err := apiutil.GVKForObject(o, c.Scheme())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgvks.Insert(gvk)\n\t}\n\tvar objs []client.Object\n\tfor _, gvk := range gvks.UnsortedList() {\n\t\tobjList := &unstructured.UnstructuredList{}\n\t\tobjList.SetGroupVersionKind(schema.GroupVersionKind{Group: gvk.Group, Version: gvk.Version, Kind: gvk.Kind})\n\t\terr := c.List(ctx, objList)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, o := range objList.Items {\n\t\t\tobjs = append(objs, o.DeepCopy())\n\t\t}\n\t}\n\tinitObjs := sets.New(objs...).UnsortedList()\n\tc.withObjects = initObjs\n\tc.withStatusSubresource = initObjs\n\tc.WithWatch = fake.NewClientBuilder().\n\t\tWithScheme(c.Scheme()).\n\t\tWithObjects(c.withObjects...).\n\t\tWithStatusSubresource(c.withStatusSubresource...).\n\t\tBuild()\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72967455/how-to-use-camelcase-json-tags-for-marshaling-structs-in-grpc-generated-files-in",
    "body": "syntax = \"proto3\";\npackage helloworld.v1;\nimport \"google/api/annotations.proto\";\nimport \"gogo/protobuf/gogoproto/gogo.proto\";\noption go_package = \"github.com/pigfall/kratos-test/api/helloworld/v1;v1\";\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {\n    option (google.api.http) = {\n      get: \"/helloworld/{name}\"\n    };\n  }\n}\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n  string pre_name =2 [(gogoproto.jsontag)=\"perName\"];\n}\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69252083/upload-image-to-minio",
    "body": "$ MINIO_ROOT_USER=minio MINIO_ROOT_PASSWORD=minio123 minio server /Volumes/data{1...4} --address :9000 --console-address :9001\nMinIO Object Storage Server\nStatus:         4 Online, 0 Offline.\nAPI: http://192.168.0.13:9000  http://127.0.0.1:9000\nRootUser: minio\nRootPass: minio123\nConsole: http://192.168.0.13:9001 http://127.0.0.1:9001\nRootUser: minio\nRootPass: minio123\nCommand-line: https://min.io/docs/minio/linux/reference/minio-mc.html#quickstart\n   $ mc alias set myminio http://192.168.0.13:9000 minio minio123\nDocumentation: https://min.io/docs/minio/linux/index.html"
  },
  {
    "url": "https://stackoverflow.com/questions/69252083/upload-image-to-minio",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\nfunc main() {\n\tendpoint := \"127.0.0.1:9000\"\n\taccessKeyID := \"minio\"\n\tsecretAccessKey := \"minio123\"\n\tuseSSL := false\n\ts3Client, err := minio.New(\n\t\tendpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif _, err := s3Client.FPutObject(context.Background(), \"my-bucketname\", \"my-objectname.png\", \"my-filename.png\", minio.PutObjectOptions{\n\t\tContentType: \"application/csv\",\n\t}); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tlog.Println(\"Successfully uploaded\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55988417/how-to-add-ocsp-stapling-in-golang-server",
    "body": "package ocsp_stapling\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"golang.org/x/crypto/ocsp\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n)\ntype OcspHandler struct {\n\tcrt                tls.Certificate\n\tisRevoked          bool\n\tocspNextUpdate     time.Time\n\tcachedOcspResponse []byte\n\tleaf, issuer       *x509.Certificate\n\tclient             *http.Client\n}\nfunc (h *OcspHandler) getResponse() ([]byte, error) {\n\tocspReq, err := ocsp.CreateRequest(h.leaf, h.issuer, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tocspReqBase64 := base64.StdEncoding.EncodeToString(ocspReq)\n\treqURL := h.leaf.OCSPServer[0] + \"/\" + ocspReqBase64\n\thttpReq, err := http.NewRequest(\"GET\", reqURL, nil)\n\thttpReq.Header.Add(\"Content-Language\", \"application/ocsp-request\")\n\thttpReq.Header.Add(\"Accept\", \"application/ocsp-response\")\n\tresp, err := h.client.Do(httpReq)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbarOcspResp, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tocspRes, err := ocsp.ParseResponse(barOcspResp, h.issuer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\th.isRevoked = ocspRes.Status == ocsp.Revoked\n\tif ocspRes.Status == ocsp.Good {\n\t\th.ocspNextUpdate = ocspRes.NextUpdate\n\t\th.cachedOcspResponse = barOcspResp\n\t\treturn barOcspResp, nil\n\t} else {\n\t\th.ocspNextUpdate = time.Time{}\n\t\th.cachedOcspResponse = nil\n\t}\n\treturn nil, nil\n}\nfunc (h *OcspHandler) Start() {\n\tfor {\n\t\tres, err := h.getResponse()\n\t\th.crt.OCSPStaple = res\n\t\tif h.isRevoked {\n\t\t\tbreak\n\t\t}\n\t\tvar sleep time.Duration\n\t\tif err != nil || h.ocspNextUpdate.IsZero() {\n\t\t\tsleep = 5 * time.Minute\n\t\t} else {\n\t\t\tsleep = h.ocspNextUpdate.Sub(time.Now())\n\t\t}\n\t\ttime.Sleep(sleep)\n\t}\n}\nfunc NewOcspHandler(crt tls.Certificate) (*OcspHandler, error) {\n\tif len(crt.Certificate) < 2 {\n\t\treturn nil, errors.New(\"no issuer in chain\")\n\t}\n\tleaf, err := x509.ParseCertificate(crt.Certificate[0])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tissuer, err := x509.ParseCertificate(crt.Certificate[1])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &OcspHandler{\n\t\tcrt:    crt,\n\t\tleaf:   leaf,\n\t\tissuer: issuer,\n\t\tclient: &http.Client{Timeout: 5 * time.Second},\n\t}, nil\n}\nfunc (h *OcspHandler) GetCertificate(info *tls.ClientHelloInfo) (*tls.Certificate, error) {\n\treturn &h.crt, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55988417/how-to-add-ocsp-stapling-in-golang-server",
    "body": "func panicIfError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc handleRequest(w http.ResponseWriter, r *http.Request) {\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"hello\\n\"))\n}\nfunc main() {\n\tvar addr = flag.String(\"addr\", \":8443\", \"the TCP address for the server to listen on\")\n\tflag.Parse()\n\tcertFile, keyFile := \"server.crt\", \"server.key\"\n\tcrt, err := tls.LoadX509KeyPair(certFile, keyFile)\n\tpanicIfError(err)\n\tocspHandler, err := ocsp_stapling.NewOcspHandler(crt)\n\tpanicIfError(err)\n\tgo ocspHandler.Start()\n\tsrv := &http.Server{\n\t\tAddr: *addr, Handler: http.HandlerFunc(handleRequest), TLSConfig: &tls.Config{\n\t\t\tGetCertificate: ocspHandler.GetCertificate,\n\t\t},\n\t}\n\tlog.Fatal(srv.ListenAndServeTLS(\"\", \"\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57771228/mocking-hashicorp-vault-in-go",
    "body": "package main\nimport (\n    \"net\"\n    \"testing\"\n    \"github.com/hashicorp/vault/api\"\n    \"github.com/hashicorp/vault/http\"\n    \"github.com/hashicorp/vault/vault\"\n)\nfunc TestVaultStuff(t *testing.T) {\n    ln, client := createTestVault(t)\n    defer ln.Close()\n    // Pass the client to the code under test.\n    myFunction(client)\n}\nfunc createTestVault(t *testing.T) (net.Listener, *api.Client) {\n    t.Helper()\n    // Create an in-memory, unsealed core (the \"backend\", if you will).\n    core, keyShares, rootToken := vault.TestCoreUnsealed(t)\n    _ = keyShares\n    // Start an HTTP server for the core.\n    ln, addr := http.TestServer(t, core)\n    // Create a client that talks to the server, initially authenticating with\n    // the root token.\n    conf := api.DefaultConfig()\n    conf.Address = addr\n    client, err := api.NewClient(conf)\n    if err != nil {\n        t.Fatal(err)\n    }\n    client.SetToken(rootToken)\n    // Setup required secrets, policies, etc.\n    _, err = client.Logical().Write(\"secret/foo\", map[string]interface{}{\n        \"secret\": \"bar\",\n    })\n    if err != nil {\n        t.Fatal(err)\n    }\n    return ln, client\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/41176256/how-to-integrate-aws-sdk-ses-in-golang",
    "body": "var mailClient *sesv2.Client\nfunc init() {\n  accessKey := os.Getenv(\"AWS_ACCESS_KEY\")\n  secretKey := os.Getenv(\"AWS_SECRET_KEY\")\n  region := os.Getenv(\"AWS_REGION\")\n  amazonConfiguration, createAmazonConfigurationError :=\n    config.LoadDefaultConfig(\n      context.Background(),\n      config.WithRegion(region),\n\t  config.WithCredentialsProvider(\n\t    credentials.NewStaticCredentialsProvider(\n          accessKey, secretKey, \"\",\n        ),\n      ),\n    )\n  if createAmazonConfigurationError != nil {\n    // log error\n  }\n  mailClient = sesv2.NewFromConfig(amazonConfiguration)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/41176256/how-to-integrate-aws-sdk-ses-in-golang",
    "body": "func main() {\n  mailFrom := \"sender@example.com\"\n  // mailFrom := os.Getenv(\"MAIL_FROM\")\n  mailTo := \"reciever@example.com\"\n  charset := aws.String(\"UTF-8\")\n  mail := &sesv2.SendEmailInput{\n    FromEmailAddress: aws.String(mailTo),\n    Destination: &types.Destination{\n      ToAddresses: []string{ mailTo },\n    },\n    Content: &types.EmailContent{\n      Simple: &types.Message{\n        Subject: &types.Content{\n          Charset: charset,\n          Data: aws.String(\"subject\"),\n        },\n        Body: &types.Body{\n          Text: &types.Content{\n            Charset: charset,\n            Data: aws.String(\"body\"),\n          },\n        },\n      },\n    },\n  }\n  _, createMailError := mailClient.sendMail(context.Background(), mail)\n  if createMailError != nil {\n    // log error\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63564764/how-to-prepend-a-string-in-golang-without-plus-operation",
    "body": "go test -benchtime=4731808x -benchmem -bench .\nBenchmarkBufferArraySimplified-8  4731808   11.36 ns/op   0 B/op  0 allocs/op\nBenchmarkBufferArray-8            4731808   62.19 ns/op   0 B/op  0 allocs/op\nBenchmarkBuilder-8                4731808  140.7 ns/op   32 B/op  3 allocs/op\nBenchmarkBuffer-8                 4731808  200.7 ns/op  128 B/op  2 allocs/op\nBenchmarkByteAppend-8             4731808  223.2 ns/op   16 B/op  4 allocs/op\nBenchmarkPlus-8                   4731808  226.2 ns/op   16 B/op  4 allocs/op\nBenchmarkByteCopy-8               4731808  254.1 ns/op   32 B/op  5 allocs/op\nBenchmarkPrepend-8                4731808  273.7 ns/op   24 B/op  5 allocs/op"
  },
  {
    "url": "https://stackoverflow.com/questions/63564764/how-to-prepend-a-string-in-golang-without-plus-operation",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"strings\"\n\t\"testing\"\n)\nfunc BenchmarkBufferArraySimplified(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar y [11]byte // should you know the length beforehand\n\t\ty[6] = 'W'\n\t\ty[7] = 'o'\n\t\ty[8] = 'r'\n\t\ty[9] = 'l'\n\t\ty[10] = 'd'\n\t\tcopy(y[0:], \"Hello \")\n\t\t_ = string(y[:])\n\t}\n}\nfunc BenchmarkBufferArray(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar y [11]byte\n\t\thello := \"Hello \"\n\t\tn := len(hello) // should you know the length beforehand\n\t\tb := bytes.NewBuffer(y[:n])\n\t\tb.WriteString(\"W\")\n\t\tb.WriteString(\"o\")\n\t\tb.WriteString(\"r\")\n\t\tb.WriteString(\"l\")\n\t\tb.WriteString(\"d\")\n\t\ta := bytes.NewBuffer(y[:0])\n\t\ta.WriteString(hello) // prepend\n\t\t_ = b.String()\n\t}\n}\nfunc BenchmarkBuilder(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"W\")\n\t\tb.WriteString(\"o\")\n\t\tb.WriteString(\"r\")\n\t\tb.WriteString(\"l\")\n\t\tb.WriteString(\"d\")\n\t\tvar a strings.Builder\n\t\ta.WriteString(\"Hello \") // prepend\n\t\ta.WriteString(b.String())\n\t\t_ = a.String()\n\t}\n}\nfunc BenchmarkBuffer(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tvar b bytes.Buffer\n\t\tb.WriteString(\"W\")\n\t\tb.WriteString(\"o\")\n\t\tb.WriteString(\"r\")\n\t\tb.WriteString(\"l\")\n\t\tb.WriteString(\"d\")\n\t\tvar a bytes.Buffer\n\t\ta.WriteString(\"Hello \") // prepend\n\t\ta.WriteString(b.String())\n\t\t_ = a.String()\n\t}\n}\nfunc BenchmarkByteAppend(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tb := \"W\"\n\t\tb += \"o\"\n\t\tb += \"r\"\n\t\tb += \"l\"\n\t\tb += \"d\"\n\t\t_ = ByteAppend(\"Hello \", b) // prepend\n\t}\n}\nfunc ByteAppend(a, b string) string {\n\treturn string(append([]byte(a), []byte(b)...)) // a+b\n}\nfunc BenchmarkPlus(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tb := \"W\"\n\t\tb += \"o\"\n\t\tb += \"r\"\n\t\tb += \"l\"\n\t\tb += \"d\"\n\t\t_ = \"Hello \" + b // prepend\n\t}\n}\nfunc BenchmarkByteCopy(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tb := \"W\"\n\t\tb += \"o\"\n\t\tb += \"r\"\n\t\tb += \"l\"\n\t\tb += \"d\"\n\t\t_ = byteCopy(\"Hello \", b) // prepend\n\t}\n}\nfunc byteCopy(a, b string) string {\n\tc := make([]byte, len(a)+len(b))\n\tcopy(c, a)\n\tcopy(c[len(a):], b) // a+b\n\treturn string(c)\n}\nfunc BenchmarkPrepend(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tb := \" \"\n\t\tb += \"W\"\n\t\tb += \"o\"\n\t\tb += \"r\"\n\t\tb += \"l\"\n\t\tb += \"d\"\n\t\t_ = string(prepend([]byte(b), []byte(\"Hello\"))) // prepend\n\t}\n}\n// prepend: insert b into a at index 0:  len(a) >= len(b)\nfunc prepend(a, b []byte) []byte {\n\t// if len(a) >= len(b) {\n\ta = append(a[:len(b)], a...) // grow\n\tcopy(a, b)\n\treturn a\n\t// }\n\t// return append(b, a...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69286881/java-rsa-ecb-oaepwithsha-256andmgf1padding-migrate-to-go",
    "body": "package main\nimport (\n\t\"crypto/rand\"\n\t\"crypto/subtle\"\n\t\"crypto/rsa\"\n\t\"crypto/sha256\"\n\t\"crypto/sha1\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"encoding/base64\"\n\t\"hash\"\n\t\"errors\"\n\t\"io\"\n\t\"math/big\"\n\t\"sync\"\n\t\"fmt\"\n\t)\nfunc main() {\n\tvar publicKeyData = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZ67dtUTLxoXnNEzRBFB\nmwukEJGC+y69cGgpNbtElQj3m4Aft/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKH\nyVgFEGO4SA8RNnjhJt2D7z8RDMWX3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+I\nd0YDheCkVCoCEeUjQ8koXZhTwhYkGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DI\nhFKnOTnYXnpXiwRwtPyYoGTa64yWfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U\n1aHjDDGEnulTYJyEqCzNGwBpzEHUjqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RC\nsQIDAQAB\n-----END PUBLIC KEY-----`\n\tvar privateKeyData = `-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAoZ67dtUTLxoXnNEzRBFBmwukEJGC+y69cGgpNbtElQj3m4Af\nt/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKHyVgFEGO4SA8RNnjhJt2D7z8RDMWX\n3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+Id0YDheCkVCoCEeUjQ8koXZhTwhYk\nGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DIhFKnOTnYXnpXiwRwtPyYoGTa64yW\nfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U1aHjDDGEnulTYJyEqCzNGwBpzEHU\njqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RCsQIDAQABAoIBAGoYl5ukuJk9Ga8a\nLftLELRFaghuXXui7T0zQ4pASv9DCbiM3UWeCy1OjK1zAtXR2Kywz8JgN9DtnrVF\n2uyCXr0wCPL/Y2P6cCRAKh2nYQrXbcvikpXt9311zH4qHGvdx/nP5oM0JHejuJCu\nRe1btiwGTB3AoF+XzBAPSZ0gGl2FqDQ7qLqqwG9Xr+78STLdN8UOUCsKV3qdTM6N\nXLeXliI0XIFQgT6XMiRGEvhJVaUTJ/3q23xza87k8jpqGsh5ArtnG6LUON26rEed\nBL2ome7HNV+IOR143PXVrBMyn6qnwAas+Zt+WfCbBCP0k68oL7mzLmP6IzY4KBE9\nBFEo04ECgYEA9GMgi2Xm9OqjUmihMt0oPnPcMx0DR+4mZezPVED2f3garOKcWvOV\ny1N/Mn5A9L785jPjWE+ui7i5DT6AMJiWxkeEdYjXmZhpG9I3pha1yaLzBXjl+Dri\n/dCXZxQq+Z7axnBxwIhDNHAeeCAau6hLfzsGgv5YAvSeg6KU7Af16dkCgYEAqUzG\njvZxfV/2qPMdNh9oUcvVbIcnIphnTP1Ma7BAD6anTnSru2EDLR66yiRtdrC9E54d\n4xWeTNHsSUcaQBkAsyp7Cpewgy4vmo8GE3qUu91Jk3/1ZN6jxLyMoakyzhYTmq4s\nQsTPC1daUXqpRjGYzP/8dMMzlKQ2Vncp+2BXgJkCgYEAinzJ6nSahluYpZBpGLu+\nnHVnaQed3lsUI1oouyP9C4ryAtp/pAK49fmg8OoewRKhmYn54Qd2b/MD2n96gQ9X\nEZFhfIFJO97kYUGlC1d/OH5AnO8/0oT8MLzNrzn8iGv+qcj6jRIqk0Kd4ZC/1Wuv\nLLA0JnMfSL16PjoZjg+MyTECgYBRq47RooMnBycXY4hA9q+9XcZMP3qajsiudDbs\ncC7HHg7xowjBMNB2cK+NGjuQGTxs/UbPqDsgNdh1lQ5Nw4H57FFEz94/ugUO21YE\nCYs8gUigFgdMLLb2DjsNNXEjx7SXVtRVNVnnz7DrQ2/rQ7vBkO+5Z/03BGyOE5g2\nAsjTaQKBgDLpbXN2p3eubQGJqv/K6f/9LBux/RWGXnZ+C1oCtGrUj+Ja8N6+cd6G\nMz9Go00GCdCUZXByx6rAZQaw7kWcI646miaplX4YtbX1d2mwbnmmz9EH4aRhzdby\n9VDoPXBgf4dufgNoS3xP4NS4H5oPg0gPS0vwpWspWqplLM+N/kGj\n-----END RSA PRIVATE KEY-----`\n\n\tsecretMessage := []byte(\"The quick brown fox jumps over the lazy dog\")\n\tlabel := []byte(\"\")\n\trng := rand.Reader\n\t// Encryption -------------------------------------------------------------\n\n\t// Load public key\n\tpubKeyBlock, _ := pem.Decode([]byte(publicKeyData))\n\tvar rsaPublicKey *rsa.PublicKey\n\tpubInterface, parseErr := x509.ParsePKIXPublicKey(pubKeyBlock.Bytes)\n\tif parseErr != nil {\n\t\tfmt.Println(\"Load public key error\")\n\t\tpanic(parseErr)\n\t}\n\trsaPublicKey = pubInterface.(*rsa.PublicKey)\n\tciphertext, err := EncryptOAEP(sha256.New(), sha1.New(), rng, rsaPublicKey, secretMessage, label)\n\tif err != nil {\n    \t\tfmt.Printf(\"Error from encryption: %s\\n\", err)\n    \t\treturn\n\t}\n\t// Decryption -------------------------------------------------------------\n\n\t// Load private key\n\tprivateKeyBlock, _ := pem.Decode([]byte(privateKeyData))\n\tvar rsaPrivateKey *rsa.PrivateKey\n\trsaPrivateKey, _ = x509.ParsePKCS1PrivateKey(privateKeyBlock.Bytes)\n\n\tdecrypted, err := DecryptOAEP(sha256.New(), sha1.New(), rng, rsaPrivateKey, ciphertext, label)\n\tif err != nil {\n    \t\tfmt.Printf(\"Error from decryption: %s\\n\", err)\n    \t\treturn\n\t}\n\tfmt.Println(\"Go Encryption/Decryption : \" + string(decrypted))\n\n\t// Cross-platform test: ciphertext from Java\n\t/*\n\t\tCipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n\t\tOAEPParameterSpec oaepParameterSpec = new OAEPParameterSpec(\"SHA-256\", \"MGF1\", MGF1ParameterSpec.SHA1, PSource.PSpecified.DEFAULT);\n \t\tcipher.init(Cipher.ENCRYPT_MODE, publicKeyObject, oaepParameterSpec);\n\t    String ciphertextB64 = Base64.getEncoder().encodeToString(cipher.doFinal(data));\n\t*/\n\tciphertext,_ = base64.StdEncoding.DecodeString(\"cCrJasWOwVFrAQ8S+p7Cdn7OnCJn/FiCjZLzDkDISOSv15u1HcLbVAqNa7ory2AW/tsV5tNz5Y53azs6SN7dwYlu58YH7kwqkwfmvUwK8pLdPPRXGaUy8/gEbM4wkwHUuxbYm/bpoEjpmICBtWzb5VOsE1RWHnZu1G2BqGKe1+sE1XadVKQpBqNSahYdthY2Dk21i/PStO5S4eRrgW2nDdmxCs9UtV4MBU8BVYHYF0TYweA/udBoGTizSDjgmWn0RXYJruGvFMHWCRRlPnj+pcelatIfY4YKOHREYifKVkphkB7PT/JaVFyMZWzOtqzE13ZBWBwBmA/yCNLE/7krcg==\")\n\tdecrypted, err = DecryptOAEP(sha256.New(), sha1.New(), rng, rsaPrivateKey, ciphertext, label)\n\tif err != nil {\n    \t\tfmt.Printf(\"Error from decryption: %s\\n\", err)\n    \t\treturn\n\t}\n\tfmt.Println(\"Cross platform decryption: \" + string(decrypted))\n\n}\n// From rsa package - Encryption -------------------------------------------------------------\nfunc EncryptOAEP(hash hash.Hash, hashMGF1 hash.Hash, random io.Reader, pub *rsa.PublicKey, msg []byte, label []byte) ([]byte, error) {\n\tif err := checkPub(pub); err != nil {\n\t\treturn nil, err\n\t}\n\thash.Reset()\n\tk := pub.Size()\n\tif len(msg) > k-2*hash.Size()-2 {\n\t\treturn nil, rsa.ErrMessageTooLong\n\t}\n\thash.Write(label)\n\tlHash := hash.Sum(nil)\n\thash.Reset()\n\tem := make([]byte, k)\n\tseed := em[1 : 1+hash.Size()]\n\tdb := em[1+hash.Size():]\n\tcopy(db[0:hash.Size()], lHash)\n\tdb[len(db)-len(msg)-1] = 1\n\tcopy(db[len(db)-len(msg):], msg)\n\t_, err := io.ReadFull(random, seed)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thashMGF1.Reset()\n\tmgf1XOR(db, hashMGF1, seed)\n\tmgf1XOR(seed, hashMGF1, db)\n\tm := new(big.Int)\n\tm.SetBytes(em)\n\tc := encrypt(new(big.Int), pub, m)\n\tout := make([]byte, k)\n\treturn c.FillBytes(out), nil\n}\nfunc encrypt(c *big.Int, pub *rsa.PublicKey, m *big.Int) *big.Int {\n\te := big.NewInt(int64(pub.E))\n\tc.Exp(m, e, pub.N)\n\treturn c\n}\n// From rsa package - Decryption -------------------------------------------------------------\nfunc DecryptOAEP(hash hash.Hash, hashMGF1 hash.Hash, random io.Reader, priv *rsa.PrivateKey, ciphertext []byte, label []byte) ([]byte, error) { // hashMGF1 hash.Hash added\n\tif err := checkPub(&priv.PublicKey); err != nil {\n\t\treturn nil, err\n\t}\n\tk := priv.Size()\n\tif len(ciphertext) > k ||\n\t\tk < hash.Size()*2+2 {\n\t\treturn nil, rsa.ErrDecryption\n\t}\n\tc := new(big.Int).SetBytes(ciphertext)\n\tm, err := decrypt(random, priv, c)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thash.Write(label)\n\tlHash := hash.Sum(nil)\n\thash.Reset()\n\t// We probably leak the number of leading zeros.\n\t// It's not clear that we can do anything about this.\n\tem := m.FillBytes(make([]byte, k))\n\tfirstByteIsZero := subtle.ConstantTimeByteEq(em[0], 0)\n\tseed := em[1 : hash.Size()+1]\n\tdb := em[hash.Size()+1:]\n\thashMGF1.Reset()\n\tmgf1XOR(seed, hashMGF1, db) // apply hashMGF1\n\tmgf1XOR(db, hashMGF1, seed) // apply hashMGF1\n\tlHash2 := db[0:hash.Size()]\n\t// We have to validate the plaintext in constant time in order to avoid\n\t// attacks like: J. Manger. A Chosen Ciphertext Attack on RSA Optimal\n\t// Asymmetric Encryption Padding (OAEP) as Standardized in PKCS #1\n\t// v2.0. In J. Kilian, editor, Advances in Cryptology.\n\tlHash2Good := subtle.ConstantTimeCompare(lHash, lHash2)\n\t// The remainder of the plaintext must be zero or more 0x00, followed\n\t// by 0x01, followed by the message.\n\t//   lookingForIndex: 1 iff we are still looking for the 0x01\n\t//   index: the offset of the first 0x01 byte\n\t//   invalid: 1 iff we saw a non-zero byte before the 0x01.\n\tvar lookingForIndex, index, invalid int\n\tlookingForIndex = 1\n\trest := db[hash.Size():]\n\tfor i := 0; i < len(rest); i++ {\n\t\tequals0 := subtle.ConstantTimeByteEq(rest[i], 0)\n\t\tequals1 := subtle.ConstantTimeByteEq(rest[i], 1)\n\t\tindex = subtle.ConstantTimeSelect(lookingForIndex&equals1, i, index)\n\t\tlookingForIndex = subtle.ConstantTimeSelect(equals1, 0, lookingForIndex)\n\t\tinvalid = subtle.ConstantTimeSelect(lookingForIndex&^equals0, 1, invalid)\n\t}\n\tif firstByteIsZero&lHash2Good&^invalid&^lookingForIndex != 1 {\n\t\treturn nil, rsa.ErrDecryption\n\t}\n\treturn rest[index+1:], nil\n}\nvar bigZero = big.NewInt(0)\nvar bigOne = big.NewInt(1)\nfunc decrypt(random io.Reader, priv *rsa.PrivateKey, c *big.Int) (m *big.Int, err error) {\n\t// TODO(agl): can we get away with reusing blinds?\n\tif c.Cmp(priv.N) > 0 {\n\t\terr = rsa.ErrDecryption\n\t\treturn\n\t}\n\tif priv.N.Sign() == 0 {\n\t\treturn nil, rsa.ErrDecryption\n\t}\n\tvar ir *big.Int\n\tif random != nil {\n\t\tMaybeReadByte(random)\n\t\t// Blinding enabled. Blinding involves multiplying c by r^e.\n\t\t// Then the decryption operation performs (m^e * r^e)^d mod n\n\t\t// which equals mr mod n. The factor of r can then be removed\n\t\t// by multiplying by the multiplicative inverse of r.\n\t\tvar r *big.Int\n\t\tir = new(big.Int)\n\t\tfor {\n\t\t\tr, err = rand.Int(random, priv.N)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif r.Cmp(bigZero) == 0 {\n\t\t\t\tr = bigOne\n\t\t\t}\n\t\t\tok := ir.ModInverse(r, priv.N)\n\t\t\tif ok != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tbigE := big.NewInt(int64(priv.E))\n\t\trpowe := new(big.Int).Exp(r, bigE, priv.N) // N != 0\n\t\tcCopy := new(big.Int).Set(c)\n\t\tcCopy.Mul(cCopy, rpowe)\n\t\tcCopy.Mod(cCopy, priv.N)\n\t\tc = cCopy\n\t}\n\tif priv.Precomputed.Dp == nil {\n\t\tm = new(big.Int).Exp(c, priv.D, priv.N)\n\t} else {\n\t\t// We have the precalculated values needed for the CRT.\n\t\tm = new(big.Int).Exp(c, priv.Precomputed.Dp, priv.Primes[0])\n\t\tm2 := new(big.Int).Exp(c, priv.Precomputed.Dq, priv.Primes[1])\n\t\tm.Sub(m, m2)\n\t\tif m.Sign() < 0 {\n\t\t\tm.Add(m, priv.Primes[0])\n\t\t}\n\t\tm.Mul(m, priv.Precomputed.Qinv)\n\t\tm.Mod(m, priv.Primes[0])\n\t\tm.Mul(m, priv.Primes[1])\n\t\tm.Add(m, m2)\n\t\tfor i, values := range priv.Precomputed.CRTValues {\n\t\t\tprime := priv.Primes[2+i]\n\t\t\tm2.Exp(c, values.Exp, prime)\n\t\t\tm2.Sub(m2, m)\n\t\t\tm2.Mul(m2, values.Coeff)\n\t\t\tm2.Mod(m2, prime)\n\t\t\tif m2.Sign() < 0 {\n\t\t\t\tm2.Add(m2, prime)\n\t\t\t}\n\t\t\tm2.Mul(m2, values.R)\n\t\t\tm.Add(m, m2)\n\t\t}\n\t}\n\tif ir != nil {\n\t\t// Unblind.\n\t\tm.Mul(m, ir)\n\t\tm.Mod(m, priv.N)\n\t}\n\treturn\n}\nvar (\n\tclosedChanOnce sync.Once\n\tclosedChan     chan struct{}\n)\nfunc MaybeReadByte(r io.Reader) { // from \"crypto/internal/randutil\"\n\tclosedChanOnce.Do(func() {\n\t\tclosedChan = make(chan struct{})\n\t\tclose(closedChan)\n\t})\n\tselect {\n\tcase <-closedChan:\n\t\treturn\n\tcase <-closedChan:\n\t\tvar buf [1]byte\n\t\tr.Read(buf[:])\n\t}\n}\n// From rsa package - both -------------------------------------------------------------\nfunc mgf1XOR(out []byte, hash hash.Hash, seed []byte) {\n\tvar counter [4]byte\n\tvar digest []byte\n\tdone := 0\n\tfor done < len(out) {\n\t\thash.Write(seed)\n\t\thash.Write(counter[0:4])\n\t\tdigest = hash.Sum(digest[:0])\n\t\thash.Reset()\n\t\tfor i := 0; i < len(digest) && done < len(out); i++ {\n\t\t\tout[done] ^= digest[i]\n\t\t\tdone++\n\t\t}\n\t\tincCounter(&counter)\n\t}\n}\nfunc checkPub(pub *rsa.PublicKey) error {\n\tif pub.N == nil {\n\t\treturn errPublicModulus\n\t}\n\tif pub.E < 2 {\n\t\treturn errPublicExponentSmall\n\t}\n\tif pub.E > 1<<31-1 {\n\t\treturn errPublicExponentLarge\n\t}\n\treturn nil\n}\nvar (\n\terrPublicModulus       = errors.New(\"crypto/rsa: missing public modulus\")\n\terrPublicExponentSmall = errors.New(\"crypto/rsa: public exponent too small\")\n\terrPublicExponentLarge = errors.New(\"crypto/rsa: public exponent too large\")\n)\nfunc incCounter(c *[4]byte) {\n\tif c[3]++; c[3] != 0 {\n\t\treturn\n\t}\n\tif c[2]++; c[2] != 0 {\n\t\treturn\n\t}\n\tif c[1]++; c[1] != 0 {\n\t\treturn\n\t}\n\tc[0]++\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75091383/why-does-golang-http-responsewriter-auto-add-content-length-if-its-no-more-than",
    "body": "// This should be >= 512 bytes for DetectContentType,\n// but otherwise it's somewhat arbitrary.\nconst bufferBeforeChunkingSize = 2048\n// chunkWriter writes to a response's conn buffer, and is the writer\n// wrapped by the response.w buffered writer.\n//\n// chunkWriter also is responsible for finalizing the Header, including\n// conditionally setting the Content-Type and setting a Content-Length\n// in cases where the handler's final output is smaller than the buffer\n// size. It also conditionally adds chunk headers, when in chunking mode.\n//\n// See the comment above (*response).Write for the entire write flow.\ntype chunkWriter struct {"
  },
  {
    "url": "https://stackoverflow.com/questions/69342582/how-do-i-bind-a-date-string-to-a-struct",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/labstack/echo/v4\"\n)\ntype CustomTime struct {\n\ttime.Time\n}\ntype TestModel struct {\n\tDate CustomTime `json:\"date\"`\n}\nfunc (t CustomTime) MarshalJSON() ([]byte, error) {\n\tdate := t.Time.Format(\"2006-01-02\")\n\tdate = fmt.Sprintf(`\"%s\"`, date)\n\treturn []byte(date), nil\n}\nfunc (t *CustomTime) UnmarshalJSON(b []byte) (err error) {\n\ts := strings.Trim(string(b), \"\\\"\")\n\tdate, err := time.Parse(\"2006-01-02\", s)\n\tif err != nil {\n\t\treturn err\n\t}\n\tt.Time = date\n\treturn\n}\nfunc main() {\n\te := echo.New()\n\te.POST(\"/test\", CreateDiary)\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\nfunc CreateDiary(c echo.Context) error {\n\tvar getData TestModel\n\tif err := (&echo.DefaultBinder{}).BindBody(c, &getData); err != nil {\n\t\tfmt.Print(err.Error())\n\t}\n\treturn c.JSON(200, getData)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64460591/unmarshalling-json-returns-an-error-invalid-character-x1f-looking-for-beginn",
    "body": "    // Check if the response is encoded in gzip format\n    if resp.Header.Get(\"Content-Encoding\") == \"gzip\" {\n        reader, err := gzip.NewReader(resp.Body)\n        if err != nil {\n            panic(err)\n        }\n        defer reader.Close()\n        // Read the decompressed response body\n        body, err := io.ReadAll(reader)\n        if err != nil {\n            panic(err)\n        }\n        // Do something with the response body\n        fmt.Println(string(body))\n    } else {\n        // The response is not gzip encoded, so read it directly\n        body, err := io.ReadAll(resp.Body)\n        if err != nil {\n            panic(err)\n        }\n        // Do something with the response body\n        fmt.Println(string(body))\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63567945/how-to-extend-go-yaml-to-support-custom-tags",
    "body": "package main\nimport (\n  \"errors\"\n  \"fmt\"\n  \"io/ioutil\"\n  \"gopkg.in/yaml.v3\"\n)\n// used for loading included files\ntype Fragment struct {\n  content *yaml.Node\n}\nfunc (f *Fragment) UnmarshalYAML(value *yaml.Node) error {\n  var err error\n  // process includes in fragments\n  f.content, err = resolveIncludes(value)\n  return err\n}\ntype IncludeProcessor struct {\n  target interface{}\n}\nfunc (i *IncludeProcessor) UnmarshalYAML(value *yaml.Node) error {\n  resolved, err := resolveIncludes(value)\n  if err != nil {\n    return err\n  }\n  return resolved.Decode(i.target)\n}\nfunc resolveIncludes(node *yaml.Node) (*yaml.Node, error) {\n  if node.Tag == \"!include\" {\n    if node.Kind != yaml.ScalarNode {\n      return nil, errors.New(\"!include on a non-scalar node\")\n    }\n    file, err := ioutil.ReadFile(node.Value)\n    if err != nil {\n      return nil, err\n    }\n    var f Fragment\n    err = yaml.Unmarshal(file, &f)\n    return f.content, err\n  }\n  if node.Kind == yaml.SequenceNode || node.Kind == yaml.MappingNode {\n    var err error\n    for i := range node.Content {\n      node.Content[i], err = resolveIncludes(node.Content[i])\n      if err != nil {\n        return nil, err\n      }\n    }\n  }\n  return node, nil\n}\ntype MyStructure struct {\n  // this structure holds the values you want to load after processing\n  // includes, e.g.\n  Num int\n}\nfunc main() {\n  var s MyStructure\n  yaml.Unmarshal([]byte(\"!include foo.yaml\"), &IncludeProcessor{&s})\n  fmt.Printf(\"Num: %v\", s.Num)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62663990/creating-a-grpc-client-connection-with-the-withblock-option-to-an-asynchronous",
    "body": "// A blocking dial blocks until the clientConn is ready.\n\tif cc.dopts.block {\n\t\tfor {\n\t\t\ts := cc.GetState()\n\t\t\tif s == connectivity.Ready {\n\t\t\t\tbreak\n\t\t\t} else if cc.dopts.copts.FailOnNonTempDialError && s == connectivity.TransientFailure {\n\t\t\t\tif err = cc.connectionError(); err != nil {\n\t\t\t\t\tterr, ok := err.(interface {\n\t\t\t\t\t\tTemporary() bool\n\t\t\t\t\t})\n\t\t\t\t\tif ok && !terr.Temporary() {\n\t\t\t\t\t\treturn nil, err\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n    \t\tif !cc.WaitForStateChange(ctx, s) {\n\t\t\t\t// ctx got timeout or canceled.\n\t\t\t\tif err = cc.connectionError(); err != nil && cc.dopts.returnLastError {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\treturn nil, ctx.Err()\n\t\t\t}\n\t\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/58237670/terminal-raw-mode-does-not-support-arrows-on-windows",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/containerd/console\"\n\t\"golang.org/x/crypto/ssh/terminal\"\n)\nfunc main() {\n\tcurrent := console.Current()\n\tdefer current.Reset()\n\tif err := current.SetRaw(); err != nil {\n\t\tpanic(err)\n\t}\n\tterm := terminal.NewTerminal(current, \"\")\n\tterm.AutoCompleteCallback = func(line string, pos int, key rune) (newLine string, newPos int, ok bool) {\n\t\t// fmt.Println(\"callback:\", line, pos, key)\n\t\treturn \"\", 0, false\n\t}\n\tline, err := term.ReadLine()\n\tfmt.Println(\"result:\", line, err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57841681/dynamodb-marshal-and-unmarshal-golang-time-time-as-millis-since-epoch",
    "body": "type MillisTime time.Time\nfunc (e MillisTime) MarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {\n\tmillis := timeAsMillis(time.Time(e))\n\tmillisStr := fmt.Sprintf(\"%d\", millis)\n\tav.N = &millisStr\n\treturn nil\n}\nfunc (e *MillisTime) UnmarshalDynamoDBAttributeValue(av *dynamodb.AttributeValue) error {\n\tmillis, err := strconv.ParseInt(*av.N, 10, 0)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*e = MillisTime(millisAsTime(millis))\n\treturn nil\n}\nfunc timeAsMillis(t time.Time) int64 {\n\tnanosSinceEpoch := t.UnixNano()\n\treturn (nanosSinceEpoch / 1_000_000_000) + (nanosSinceEpoch % 1_000_000_000)\n}\nfunc millisAsTime(millis int64) time.Time {\n\tseconds := millis / 1_000\n\tnanos := (millis % 1_000) * 1_000_000\n\treturn time.Unix(seconds, nanos)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54915307/error-unmarshaling-a-simple-xml-in-golang",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"golang.org/x/text/encoding/charmap\"\n)\n// Contains the array of articles in the dblp xml\ntype Dblp struct {\n\tXMLName xml.Name  `xml:\"dblp\"`\n\tDblp    []Article `xml:\"article\"`\n}\n// Contains the article element tags and attributes\ntype Article struct {\n\tXMLName xml.Name `xml:\"article\"`\n\tKey     string   `xml:\"key,attr\"`\n\tYear    string   `xml:\"year\"`\n}\nfunc main() {\n\txmlFile, err := os.Open(\"dblp.xml\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"Successfully Opened TestDblp.xml\")\n\t// defer the closing of our xmlFile so that we can parse it later on\n\tdefer xmlFile.Close()\n\tvar articles Dblp\n\tdecoder := xml.NewDecoder(xmlFile)\n\tdecoder.CharsetReader = makeCharsetReader\n\terr = decoder.Decode(&articles)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfor i := 0; i < len(articles.Dblp); i++ {\n\t\tfmt.Println(\"Entered loop\")\n\t\tfmt.Println(\"get title: \" + articles.Dblp[i].Key)\n\t\tfmt.Println(\"get year: \" + articles.Dblp[i].Year)\n\t}\n}\nfunc makeCharsetReader(charset string, input io.Reader) (io.Reader, error) {\n\tif charset == \"ISO-8859-1\" {\n\t\t// Windows-1252 is a superset of ISO-8859-1, so should do here\n\t\treturn charmap.Windows1252.NewDecoder().Reader(input), nil\n\t}\n\treturn nil, fmt.Errorf(\"Unknown charset: %s\", charset)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70516345/how-to-get-url-param-in-middleware-go-chi",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi\"\n)\nfunc AuthMiddleware(h http.Handler) http.Handler {\n\tfn := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Println(chi.URLParam(r, \"id\"))\n\t\th.ServeHTTP(w, r)\n\t}\n\treturn http.HandlerFunc(fn)\n}\nfunc main() {\n\tr := chi.NewRouter()\n\tr.Route(\"/platform/{id}\", func(r chi.Router) {\n\t\tr.Use(AuthMiddleware)\n\t\tr.Get(\"/latest\", func(rw http.ResponseWriter, r *http.Request) {\n\t\t\tfmt.Println(\"here \", chi.URLParam(r, \"id\")) // <- here\n\t\t})\n\t})\n\thttp.ListenAndServe(\":8080\", r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70516345/how-to-get-url-param-in-middleware-go-chi",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"github.com/go-chi/chi\"\n)\nfunc AuthMiddleware(h http.Handler) http.Handler {\n\tfn := func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Printf(\"Middleware First, id: %+v\\n\", chi.URLParam(r, \"id\"))\n\t\tid, _ := strconv.Atoi(chi.URLParam(r, \"id\"))\n\t\tif id > 100 {\n\t\t\thttp.Error(w, errors.New(\"Error\").Error(), http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\t\th.ServeHTTP(w, r)\n\t}\n\treturn http.HandlerFunc(fn)\n}\nfunc main() {\n\tr := chi.NewRouter()\n\t// This works too ()\n\t// r.Route(\"/platform/{id}\", func(r chi.Router) {\n\t// \tr.Use(AuthMiddleware)\n\t// \tr.Get(\"/latest\", func(rw http.ResponseWriter, r *http.Request) {\n\t// \t\tfmt.Println(\"second: \", chi.URLParam(r, \"id\")) // <- here\n\t// \t})\n\t// })\n\t// Other Solution (Wrapping Middleware)\n\tr.Route(\"/platform\", func(r chi.Router) {\n\t\tr.Get(\"/{id}/latest\", AuthMiddleware(http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n\t\t\tfmt.Println(\"second: \", chi.URLParam(r, \"id\")) // <- here\n\t\t})).ServeHTTP)\n\t})\n\thttp.ListenAndServe(\":8080\", r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69031143/using-context-with-cancel-go-routine-doesnt-terminate",
    "body": "func (group *Group) MemberWithID(ctx context.Context, id string) (*Member, error) {\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\tvar (\n\t\twg sync.WaitGroup\n\t\tmember    *Member\n\t\tfoundOnce sync.Once\n\t\tfirstNontrivialErr error\n\t\terrOnce            sync.Once\n\t)\n\tfor _, client := range group.Clients {\n\t\twg.Add(1)\n\t\tclient := client // https://golang.org/doc/faq#closures_and_goroutines\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tm, err := client.ClientMemberWithID(ctx, id)\n\t\t\tif m != nil {\n\t\t\t\tfoundOnce.Do(func() {\n\t\t\t\t\tmember = m\n\t\t\t\t\tcancel()\n\t\t\t\t})\n\t\t\t} else if nf := (*MemberNotFoundError)(nil); !errors.As(err, &nf) {\n\t\t\t\terrOnce.Do(func() {\n\t\t\t\t\tfirstNontrivialErr = err\n\t\t\t\t})\n\t\t\t}\n\t\t}()\n\t}\n\twg.Wait()\n\tif member == nil {\n\t\tif firstNontrivialErr != nil {\n\t\t\treturn nil, firstNontrivialErr\n\t\t}\n\t\treturn nil, &MemberNotFoundError{ID: id}\n\t}\n\treturn member, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68272112/reading-from-a-stdoutpipe-in-go-freezes",
    "body": "func runProcess(process *exec.Cmd) (stdout, stderr string, err error) {\n\toutPipe, err := process.StdoutPipe()\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\t// Call StderrPipe BEFORE Start().\n\t// Easy way to do it: outside the goroutine.\n\terrPipe, err := process.StderrPipe()\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\t// Start process.\n\tif err := process.Start(); err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\t// Read stderr in goroutine.\n\tvar wg sync.WaitGroup\n\tvar stderrErr error\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tdata, err := ioutil.ReadAll(errPipe)\n\t\tif err != nil {\n\t\t\tstderrErr = err\n\t\t} else {\n\t\t\tstderr = string(data)\n\t\t}\n\t}()\n\t// Read stdout in main thread.\n\tdata, stdoutErr := ioutil.ReadAll(outPipe)\n\t// Wait until we are done reading stderr.\n\twg.Wait()\n\t// Wait for process to finish.\n\tif err := process.Wait(); err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\t// Handle error from reading stdout.\n\tif stdoutErr != nil {\n\t\treturn \"\", \"\", stderrErr\n\t}\n\t// Handle error from reading stderr.\n\tif stderrErr != nil {\n\t\treturn \"\", \"\", stderrErr\n\t}\n\tstdout = string(data)\n\treturn stdout, stderr, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63105661/gorm-associations-many-to-many",
    "body": "type Exercise struct {\n\tgorm.Model\n\tName        string `gorm:\"not null\" json:\"name\"`\n\tDescription string `gorm:\"not null\" json:\"description\"`\n\tWorkouts    []WorkoutExercise\n}\ntype Workout struct {\n\tgorm.Model\n\tName      string    `gorm:\"not null\" json:\"name\"`\n\tCreatedAt time.Time `gorm:\"not null\" json:\"created_at\"`\n\tExercises []WorkoutExercise\n}\ntype WorkoutExercise struct {\n\tgorm.Model\n\tWorkoutID  uint\n\tWorkout    Workout `gorm:\"foreignKey:WorkoutID;references:ID\"`\n\tExerciseID uint\n\tExercise   Exercise `gorm:\"foreignKey:ExerciseID;references:ID\"`\n\tSets       uint\n\tReps       uint\n\tWeights    uint\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63105661/gorm-associations-many-to-many",
    "body": "gym=# \\dt\n               List of relations\n Schema |       Name        | Type  |   Owner\n--------+-------------------+-------+-----------\n public | installations     | table | gym\n public | workout_exercises | table | gym\n public | workouts          | table | gym\n(3 rows)\ngym=# \\d workouts\n                                       Table \"public.workouts\"\n   Column   |           Type           | Collation | Nullable |               Default\n------------+--------------------------+-----------+----------+--------------------------------------\n id         | bigint                   |           | not null | nextval('workouts_id_seq'::regclass)\n created_at | timestamp with time zone |           | not null |\n updated_at | timestamp with time zone |           |          |\n deleted_at | timestamp with time zone |           |          |\n name       | text                     |           | not null |\nIndexes:\n    \"workouts_pkey\" PRIMARY KEY, btree (id)\n    \"idx_workouts_deleted_at\" btree (deleted_at)\nReferenced by:\n    TABLE \"workout_exercises\" CONSTRAINT \"fk_workouts_exercises\" FOREIGN KEY (workout_id) REFERENCES workouts(id)\ngym=# \\d exercises\n                                       Table \"public.exercises\"\n   Column    |           Type           | Collation | Nullable |                Default\n-------------+--------------------------+-----------+----------+---------------------------------------\n id          | bigint                   |           | not null | nextval('exercises_id_seq'::regclass)\n created_at  | timestamp with time zone |           |          |\n updated_at  | timestamp with time zone |           |          |\n deleted_at  | timestamp with time zone |           |          |\n name        | text                     |           | not null |\n description | text                     |           | not null |\nIndexes:\n    \"exercises_pkey\" PRIMARY KEY, btree (id)\n    \"idx_exercises_deleted_at\" btree (deleted_at)\nReferenced by:\n    TABLE \"workout_exercises\" CONSTRAINT \"fk_exercises_workouts\" FOREIGN KEY (exercise_id) REFERENCES exercises(id)\ngym=# \\d workout_exercises\n                                       Table \"public.workout_exercises\"\n   Column    |           Type           | Collation | Nullable |                    Default\n-------------+--------------------------+-----------+----------+-----------------------------------------------\n id          | bigint                   |           | not null | nextval('workout_exercises_id_seq'::regclass)\n created_at  | timestamp with time zone |           |          |\n updated_at  | timestamp with time zone |           |          |\n deleted_at  | timestamp with time zone |           |          |\n workout_id  | bigint                   |           |          |\n exercise_id | bigint                   |           |          |\n sets        | bigint                   |           |          |\n reps        | bigint                   |           |          |\n weights     | bigint                   |           |          |\nIndexes:\n    \"workout_exercises_pkey\" PRIMARY KEY, btree (id)\n    \"idx_workout_exercises_deleted_at\" btree (deleted_at)\nForeign-key constraints:\n    \"fk_exercises_workouts\" FOREIGN KEY (exercise_id) REFERENCES exercises(id)\n    \"fk_workouts_exercises\" FOREIGN KEY (workout_id) REFERENCES workouts(id)"
  },
  {
    "url": "https://stackoverflow.com/questions/61821424/how-to-use-channels-to-gather-response-from-various-goroutines",
    "body": "package main\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"sync\"\n    \"time\"\n)\nfunc process(input int, wg *sync.WaitGroup, resultChan chan<- int) {\n    defer wg.Done()\n    rand.Seed(time.Now().UnixNano())\n    n := rand.Intn(5)\n    time.Sleep(time.Duration(n) * time.Second)\n    resultChan <- input * 10\n}\nfunc main() {\n    var wg sync.WaitGroup\n    resultChan := make(chan int)\n    for i := range []int{1,2,3,4,5} {\n        wg.Add(1)\n        go process(i, &wg, resultChan)\n    }\n    go func() {\n        wg.Wait()\n        close(resultChan)\n    }()\n    var result []int\n    for r := range resultChan {\n        result = append(result, r)\n    }\n    fmt.Println(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60497980/golang-vscode-configuration-best-setup",
    "body": "\"go.inferGopath\": false,\n    \"go.buildOnSave\": \"workspace\",\n    \"go.lintOnSave\": \"package\",\n    \"go.vetOnSave\": \"package\",\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatTool\": \"goreturns\",\n    \"go.gocodeAutoBuild\": false,\n    \"go.useLanguageServer\": true,\n    \"go.alternateTools\": {\n      \"go-langserver\": \"gopls\", \n    },\n    \"go.languageServerExperimentalFeatures\": {\n      \"format\": true,\n      \"autoComplete\": true\n    },\n    \"[go]\": {\n        \"editor.codeActionsOnSave\": {\n            \"source.organizeImports\": true\n        },\n    },"
  },
  {
    "url": "https://stackoverflow.com/questions/60105111/use-google-protobuf-value-in-a-protobuf-file-with-go-interface-field-in-a-stru",
    "body": "func convertToValue(v interface{}, from reflect.Type) (*types.Value, error) {\n    switch from.Kind() {\n    case reflect.String:\n        if reflect.ValueOf(v).String() == \"true\" || reflect.ValueOf(v).String() == \"false\" {\n            boolVal, err := strconv.ParseBool(reflect.ValueOf(v).String())\n            if err != nil {\n                return nil, err\n            }\n            return &types.Value{Kind:&types.Value_BoolValue{BoolValue:boolVal}}, nil\n        }\n        return &types.Value{Kind:&types.Value_StringValue{StringValue:reflect.ValueOf(v).String()}}, nil\n    case reflect.Int64:\n    case reflect.Float64:\n        return &types.Value{Kind:&types.Value_NumberValue{NumberValue:reflect.ValueOf(v).Float()}}, nil\n    case reflect.Slice:\n\t\tlist := reflect.ValueOf(v)\n\t\toutputList := make([]*types.Value,0)\n\t\tfor i:=0 ; i < list.Len(); i++ {\n\t\t\tval, err := convertToValue(list.Index(i).Interface(), reflect.TypeOf(list.Index(i).Interface()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\toutputList = append(outputList, val)\n\t\t}\n\t\treturn &types.Value{Kind:&types.Value_ListValue{ListValue:&types.ListValue{Values:outputList}}}, nil\n    case reflect.Struct:\n\t\tvalStruct := reflect.ValueOf(v)\n\t\toutputMap := make(map[string]*types.Value)\n\t\tnumOfField := valStruct.NumField()\n\t\tfor i := 0; i < numOfField; i++ {\n\t\t\tval, err := convertToValue(valStruct.Field(i).Interface(), reflect.TypeOf(valStruct.Field(i).Interface()))\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\toutputMap[valStruct.Field(i).Type().Name()] = val\n\t\t}\n\t\treturn &types.Value{Kind:&types.Value_StructValue{StructValue:&types.Struct{Fields:outputMap}}}, nil\n    default:\n\t    return nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60105111/use-google-protobuf-value-in-a-protobuf-file-with-go-interface-field-in-a-stru",
    "body": "func convertValueToInterface(value types.Value) (interface{}, error) {\n\tswitch {\n\tcase _ , ok := value.Kind.(*types.Value_NullValue); ok:\n\t\treturn nil, nil\n\tcase x , ok := value.Kind.(*types.Value_StringValue); ok:\n\t\treturn x.StringValue, nil\n\tcase x , ok := value.Kind.(*types.Value_NumberValue); ok:\n\t\treturn x.NumberValue, nil\n\tcase x , ok := value.Kind.(*types.Value_BoolValue); ok:\n\t\treturn strconv.FormatBool(x.BoolValue), nil\n\tcase x , ok := value.Kind.(*types.Value_ListValue); ok:\n\t\tif x == nil || x.ListValue == nil || x.ListValue.Values == nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tlistValue := x.ListValue.Values\n\t\tif len(listValue) == 0 {\n\t\t\treturn nil, nil\n\t\t}\n\t\tval, err := convertValueToInterface(*listValue[0])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttyp := reflect.TypeOf(val)\n\t\toutputList := reflect.MakeSlice(reflect.SliceOf(typ),0,0)\n\t\tfor _, value := range listValue {\n\t\t\tif value != nil {\n\t\t\t\tval, err := convertValueToInterface(*value)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\toutputList = reflect.Append(outputList, reflect.ValueOf(val))\n\t\t\t}\n\t\t}\n\t\treturn outputList.Interface(), nil\n\tcase x , ok := value.Kind.(*types.Value_StructValue); ok:\n\t\tif x == nil || x.StructValue == nil || x.StructValue.Fields == nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tmapValue := x.StructValue.Fields\n\t\tvar keyTyp reflect.Type\n\t\tvar typ reflect.Type\n\t\tfor key,value := range mapValue {\n\t\t\tif value != nil {\n\t\t\t\tval, err := convertValueToInterface(*value)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\tkeyTyp = reflect.TypeOf(key)\n\t\t\t\ttyp = reflect.TypeOf(val)\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\treturn nil, nil\n\t\t\t}\n\t\t}\n\t\toutputMap := reflect.MakeMap(reflect.MapOf(keyTyp, typ))\n\t\tfor key,value := range mapValue {\n\t\t\tif value != nil {\n\t\t\t\tval, err := convertValueToInterface(*value)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t\toutputMap.SetMapIndex(reflect.ValueOf(key), reflect.ValueOf(val))\n\t\t\t}\n\t\t}\n\t\treturn outputMap.Interface(), nil\n    default:\n\t    return nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55186926/set-objectmeta-on-istio-resource-with-go-client",
    "body": "import (\n    v1alpha1 \"istio.io/api/rbac/v1alpha1\"\n   \"istio.io/istio/pilot/pkg/model\"\n)\nfunc getDefaultServiceRole() *v1alpha1.ServiceRole {\n    return &v1alpha1.ServiceRole{\n        Rules: []*v1alpha1.AccessRule{\n            {\n                Ports: []int32{2},\n            },\n        },\n    }\n}\nfunc toConfig(app *nais.Application, role *v1alpha1.ServiceRole) model.Config {\n    return &model.Config{\n        ConfigMeta: model.ConfigMeta{\n            Name:      app.Name,\n            Namespace: app.Namespace,\n        },\n        Spec: app,\n    }\n}\ntype Client model.ConfigStore\nfunc (c Client) CreateRoleFor(app nais.Application, role *v1alpha1.ServiceRole) error {\n    cfg := toConfig(app, role)\n    _, err := c.Create(cfg)\n    return err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77334063/failed-to-get-rpc-descriptor",
    "body": "localhost:9090> show package\n+-------------------------+\n|         PACKAGE         |\n+-------------------------+\n| example                 |\n| grpc.reflection.v1      |\n| grpc.reflection.v1alpha |\n+-------------------------+\nlocalhost:9090> package example\nexample@localhost:9090> show service\n+-----------+---------+--------------+---------------+\n|  SERVICE  |   RPC   | REQUEST TYPE | RESPONSE TYPE |\n+-----------+---------+--------------+---------------+\n| MyService | GetData | GetRequest   | GetResponse   |\n+-----------+---------+--------------+---------------+\nexample@localhost:9090> service MyService\nexample.MyService@localhost:9090> call GetData\nid (TYPE_INT32) => 1"
  },
  {
    "url": "https://stackoverflow.com/questions/76082755/equivalent-of-optional-parameters-in-go",
    "body": "package main\nimport (\n\t\"log\"\n)\ntype createIntAttributeParams struct {\n\tname         string\n\thasDefault   bool\n\tdefaultValue int\n}\n// mandatory parameters here\nfunc createIntAttribute(name string) *createIntAttributeParams {\n\treturn &createIntAttributeParams{\n\t\tname: name,\n\t}\n}\n// optional parameter\nfunc (p *createIntAttributeParams) withDefault(value int) *createIntAttributeParams {\n\tp.hasDefault = true\n\tp.defaultValue = value\n\treturn p\n}\n// other with* functions to set more optional parameters\n// execute\nfunc (p *createIntAttributeParams) do() {\n\tlog.Println(*p)\n}\nfunc main() {\n\tcreateIntAttribute(\"test1\").do()\n\tcreateIntAttribute(\"test1\").withDefault(10).do()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71123356/watch-and-wait-for-pod-deletion-with-golang-k8s-client",
    "body": "func (k *k8sClient) createPodWatcher(ctx context.Context, resName string) (watch.Interface, error) {\n\tlabelSelector := fmt.Sprintf(\"app.kubernetes.io/instance=%s\", resName)\n\tk.logger.Debugf(\"Creating watcher for POD with label: %s\", labelSelector)\n\topts := metav1.ListOptions{\n\t\tTypeMeta:      metav1.TypeMeta{},\n\t\tLabelSelector: labelSelector,\n\t\tFieldSelector: \"\",\n\t}\n\treturn k.clientset.CoreV1().Pods(k.cfg.Kubernetes.Namespace).Watch(ctx, opts)\n}\nfunc (k *k8sClient) waitPodDeleted(ctx context.Context, resName string) error {\n    watcher, err := k.createPodWatcher(ctx, resName)\n    if err != nil {\n        return err\n    }\n    defer watcher.Stop()\n    for {\n        select {\n        case event := <-watcher.ResultChan():\n            if event.Type == watch.Deleted {\n                k.logger.Debugf(\"The POD \\\"%s\\\" is deleted\", resName)\n                return nil\n            }\n        case <-ctx.Done():\n            k.logger.Debugf(\"Exit from waitPodDeleted for POD \\\"%s\\\" because the context is done\", resName)\n            return nil\n        }\n    }\n}\nfunc (k *k8sClient) waitPodRunning(ctx context.Context, resName string) error {\n\twatcher, err := k.createPodWatcher(ctx, resName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer watcher.Stop()\n\tfor {\n\t\tselect {\n\t\tcase event := <-watcher.ResultChan():\n\t\t\tpod := event.Object.(*v1.Pod)\n\t\t\tif pod.Status.Phase == v1.PodRunning {\n\t\t\t\tk.logger.Infof(\"The POD \\\"%s\\\" is running\", resName)\n\t\t\t\treturn nil\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\tk.logger.Debugf(\"Exit from waitPodRunning for POD \\\"%s\\\" because the context is done\", resName)\n\t\t\treturn nil\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70933451/golang-how-to-access-promoted-type",
    "body": "package main\nimport (\n\t\"log\"\n\t\"reflect\"\n)\ntype Common struct {\n\tname string\n}\ntype apple struct {\n\tCommon\n}\ntype orange struct {\n\tCommon\n}\nfunc getFruitArray(theMap interface{}) []*Common {\n\tm := reflect.ValueOf(theMap)\n\tcf := make([]*Common, 0, m.Len())\n\tfor _, mk := range m.MapKeys() {\n\t\tv := m.MapIndex(mk)\n\t\tf := v.Elem().FieldByName(\"Common\")\n\t\tcf = append(cf, f.Addr().Interface().(*Common))\n\t}\n\treturn cf\n}\nfunc main() {\n\tappleMap := make(map[string]*apple)\n\torangeMap := make(map[string]*orange)\n\ta1 := &apple{}\n\ta1.name = \"my apple\"\n\tappleMap[\"test\"] = a1\n\to1 := &orange{}\n\to1.name = \"my orange\"\n\torangeMap[\"test2\"] = o1\n\tf1 := getFruitArray(appleMap)\n\tfor _, c := range f1 {\n\t\tlog.Printf(\"f1: %s\", c.name)\n\t}\n\tf2 := getFruitArray(orangeMap)\n\tfor _, c := range f2 {\n\t\tlog.Printf(\"f2: %s\", c.name)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67469221/timescale-db-not-creating-hypertable",
    "body": "tsdb=> \\dx\n                                          List of installed extensions\n        Name         | Version |   Schema   |                            Description\n---------------------+---------+------------+-------------------------------------------------------------------\n plpgsql             | 1.0     | pg_catalog | PL/pgSQL procedural language\n timescale_analytics | 0.2     | public     | timescale_analytics\n timescaledb         | 2.2.0   | public     | Enables scalable inserts and complex queries for time-series data\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/64772147/querying-using-database-sql-is-significantly-slower-than-querying-the-database",
    "body": "func main() {\n\t// setup database connection\n\tdb, err := sql.Open(\"postgres\", \"postgres:///?sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t} else if err := db.Ping(); err != nil {\n        panic(err)\n    }\n\tfor i := 0; i < 5; i++ {\n\t\t// query database\n\t\tfirstQueryStart := time.Now()\n\t\trows, err := db.Query(\"select 1;\")\n\t\tfirstQueryEnd := time.Now()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n        // put the connection back to the pool so\n        // that it can be reused by next iteration\n\t\trows.Close()\n\t\tfmt.Println(fmt.Sprintf(\"query #%d took %s\", i, firstQueryEnd.Sub(firstQueryStart).String()))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64772147/querying-using-database-sql-is-significantly-slower-than-querying-the-database",
    "body": "    ...\n    // Check to see if we can use the \"simpleQuery\" interface, which is\n\t// *much* faster than going through prepare/exec\n\tif len(args) == 0 {\n\t\treturn cn.simpleQuery(query)\n\t}\n\tif cn.binaryParameters {\n\t\tcn.sendBinaryModeQuery(query, args)\n\t\tcn.readParseResponse()\n\t\tcn.readBindResponse()\n\t\trows := &rows{cn: cn}\n\t\trows.rowsHeader = cn.readPortalDescribeResponse()\n\t\tcn.postExecuteWorkaround()\n\t\treturn rows, nil\n\t}\n\tst := cn.prepareTo(query, \"\")\n\tst.exec(args)\n\treturn &rows{\n\t\tcn:         cn,\n\t\trowsHeader: st.rowsHeader,\n\t}, nil\n    ..."
  },
  {
    "url": "https://stackoverflow.com/questions/64243247/go-gorilla-log-each-request-duration-and-status-code",
    "body": "type LogMiddleware struct {\n\tlogger *log.Logger\n}\nfunc NewLogMiddleware(logger *log.Logger) *LogMiddleware {\n\treturn &LogMiddleware{logger: logger}\n}\nfunc (m *LogMiddleware) Func() mux.MiddlewareFunc {\n\treturn func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tstartTime := time.Now()\n\t\t\tlogRespWriter := NewLogResponseWriter(w)\n\t\t\tnext.ServeHTTP(logRespWriter, r)\n\t\t\tm.logger.Printf(\n\t\t\t\t\"duration=%s status=%d body=%s\",\n\t\t\t\ttime.Since(startTime).String(),\n\t\t\t\tlogRespWriter.statusCode,\n\t\t\t\tlogRespWriter.buf.String())\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54615873/testmain-no-tests-to-run",
    "body": "func TestCompile(t *testing.T) {\n\ttmpDir, err := ioutil.TempDir(\"\", \"testdata\")\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tdefer os.Remove(tmpDir)\n\ttests := []struct {\n\t\tname, inFile, outFile string\n\t\terr                   error\n\t}{\n\t\t{\"OutputFileCreated\", \"correct.c\", \"correct_out\", nil},\n\t\t{\"OutputFileNotCreatedForIncorrectSource\", \"wrong.c\", \"wrong_out\", someErr},\n\t}\n\tfor _, test := range tests {\n\t\tvar (\n\t\t\tin  = filepath.Join(\"testdata\", test.inFile)\n\t\t\tout = filepath.Join(tmpDir, test.outFile)\n\t\t)\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\terr = Compile(in, out)\n\t\t\tif err != test.err {\n\t\t\t\tt.Errorf(\"Compile(%q, %q) == %v; Wanted %v\", in, out, err, test.err)\n\t\t\t}\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78284516/how-to-unmarshall-json-when-the-fields-can-have-different-types-depending-on-oth",
    "body": "type message struct {\n\tType string            `json:\"type\"`\n\tData []json.RawMessage `json:\"data\"`\n}\ntype car struct {\n\tColor string\n\tMPG   float64\n}\ntype house struct {\n\tColor string\n\tState string\n}\nfunc main() {\n\tif err := parseAndPrint(carJSON); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := parseAndPrint(houseJSON); err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc parseAndPrint(b []byte) error {\n\tmsg := new(message)\n\tif err := json.Unmarshal(b, msg); err != nil {\n\t\tpanic(err)\n\t}\n\tswitch msg.Type {\n\tcase \"car\":\n\t\tfor _, data := range msg.Data {\n\t\t\tc := new(car)\n\t\t\tif err := json.Unmarshal(data, c); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(c)\n\t\t}\n\tcase \"house\":\n\t\tfor _, data := range msg.Data {\n\t\t\th := new(house)\n\t\t\tif err := json.Unmarshal(data, h); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfmt.Println(h)\n\t\t}\n\t}\n\treturn nil\n}\n// Tucked here to get out of the way of the example\nvar carJSON = []byte(`\n{\n    \"type\": \"car\",\n    \"data\": [{\"color\": \"red\", \"mpg\": 16.4}]\n}\n`)\nvar houseJSON = []byte(`{\n    \"type\": \"house\",\n    \"data\": [{\"color\": \"blue\", \"state\": \"CA\"}]\n}\n`)"
  },
  {
    "url": "https://stackoverflow.com/questions/78214770/go-net-http-routes",
    "body": "// Create a new ServeMux that is responsible for handling your API requests.\napi := http.NewServeMux()\napi.Handle(\"/users\", userHandler)\napi.Handle(\"/posts\", postHandler)\nroot := http.NewServeMux()\n// A mux is also a http.Handler. So, simply use your api mux\n// as a handler for the correct path. HOWEVER, since the subrouter does\n// have no clue about the /api/v1/ prefix, you need to strip it off.\n// So basically, if a request for /api/v1/users comes in, the /api/v1/ part\n// is stripped off and the /users part is passed to the api mux.\n// Note that you will have to order the paths from most to least specific.\nroot.Handle(\"/api/v1/\", http.StripPrefix(\"/api/v1\", api))"
  },
  {
    "url": "https://stackoverflow.com/questions/73743233/how-to-convert-markdown-to-html-in-golang-with-adding-section-tag",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"regexp\"\n\t\"strings\"\n\t\"github.com/gomarkdown/markdown\"\n\t\"github.com/gomarkdown/markdown/ast\"\n\t\"github.com/gomarkdown/markdown/html\"\n)\n// levels tracks how deep we are in a heading \"structure\"\nvar levels []int\nfunc hasLevels() bool {\n\treturn len(levels) > 0\n}\nfunc lastLevel() int {\n\tif hasLevels() {\n\t\treturn levels[len(levels)-1]\n\t}\n\treturn 0\n}\nfunc popLevel() int {\n\tlevel := lastLevel()\n\tlevels = levels[:len(levels)-1]\n\treturn level\n}\nfunc pushLevel(x int) {\n\tlevels = append(levels, x)\n}\nvar reID = regexp.MustCompile(`\\s+`)\n// renderSections catches an ast.Heading node, and wraps the node\n// and its \"children\" nodes in <section>...</section> tags; there's no\n// real hierarchy in Markdown, so we make one up by saying things like:\n// - H2 is a child of H1, and so forth from 1 → 2 → 3 ... → N\n// - an H1 is a sibling of another H1\nfunc renderSections(w io.Writer, node ast.Node, entering bool) (ast.WalkStatus, bool) {\n\topenSection := func(level int, id string) {\n\t\tw.Write([]byte(fmt.Sprintf(\"<section id=\\\"%s\\\">\\n\", id)))\n\t\tpushLevel(level)\n\t}\n\tcloseSection := func() {\n\t\tw.Write([]byte(\"</section>\\n\"))\n\t\tpopLevel()\n\t}\n\tif _, ok := node.(*ast.Heading); ok {\n\t\tlevel := node.(*ast.Heading).Level\n\t\tif entering {\n\t\t\t// close heading-sections deeper than this level; we've \"come up\" some number of levels\n\t\t\tfor lastLevel() > level {\n\t\t\t\tcloseSection()\n\t\t\t}\n\t\t\ttxtNode := node.GetChildren()[0]\n\t\t\tif _, ok := txtNode.(*ast.Text); !ok {\n\t\t\t\tpanic(fmt.Errorf(\"expected txtNode to be *ast.Text; got %T\", txtNode))\n\t\t\t}\n\t\t\theadTxt := string(txtNode.AsLeaf().Literal)\n\t\t\tid := strings.ToLower(reID.ReplaceAllString(headTxt, \"-\"))\n\t\t\topenSection(level, id)\n\t\t}\n\t}\n\t// at end of document\n\tif _, ok := node.(*ast.Document); ok {\n\t\tif !entering {\n\t\t\tfor hasLevels() {\n\t\t\t\tcloseSection()\n\t\t\t}\n\t\t}\n\t}\n\t// continue as normal\n\treturn ast.GoToNext, false\n}\nfunc main() {\n\tlines := []string{\n\t\t\"## Hello\",\n\t\t\"### This is a test message\",\n\t\t\"Ligisnfmkdfn\",\n\t}\n\tmd := strings.Join(lines, \"\\n\")\n\topts := html.RendererOptions{\n\t\tFlags:          html.CommonFlags,\n\t\tRenderNodeHook: renderSections,\n\t}\n\trenderer := html.NewRenderer(opts)\n\thtml := markdown.ToHTML([]byte(md), nil, renderer)\n\tfmt.Println(string(html))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69941303/how-to-set-a-timezone-to-an-existing-timestamp-without-reinterpreting-it",
    "body": "package main\nimport (\n    \"fmt\"\n    \"time\"\n)\nfunc main() {\n    myTime := time.Now()\n    fmt.Println(myTime.Format(time.RFC3339))\n\n    loc, err := time.LoadLocation(\"America/New_York\")\n    if err != nil {\n        panic(err)\n    }\n    locTime := myTime.In(loc)\n    _, zoneOffset := locTime.Zone()\n\n    inZoneTime := locTime.Add(-time.Duration(zoneOffset) * time.Second)\n    // handle DST transitions\n    if inZoneTime.IsDST() {\n\t\tinZoneTime = inZoneTime.Add(1*time.Hour)\n\t}\n\n    fmt.Println(inZoneTime.Format(time.RFC3339))\n    // 2009-11-10T23:00:00-05:00\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69326129/does-set-method-of-echo-context-saves-the-value-to-the-underlying-context-cont",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/labstack/echo\"\n\t\"github.com/labstack/echo/middleware\"\n\t\"net/http\"\n)\nfunc main() {\n\t// Echo instance\n\te := echo.New()\n\t// Middleware\n\te.Use(NewMiddlewareContextValue)\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\t// Routes\n\te.GET(\"/\", hello)\n\te.GET(\"/val\", getval)\n\t// Start server\n\te.Logger.Fatal(e.Start(\":1323\"))\n}\n// Handler\nfunc hello(c echo.Context) error {\n\treturn c.String(http.StatusOK, \"Hello, World!\")\n}\nfunc getval(c echo.Context) error {\n\tc.Set(\"111\", \"aa\")\n\tc.Set(\"222\", \"bb\")\n\treturn c.String(http.StatusOK, fmt.Sprint(c.Request().Context()))\n}\n// ---------- method1 ----------\nfunc NewMiddlewareContextValue(fn echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(ctx echo.Context) error {\n\t\treturn fn(contextValue{ctx})\n\t}\n}\ntype contextValue struct {\n\techo.Context\n}\n// Get retrieves data from the context.\nfunc (ctx contextValue) Get(key string) interface{} {\n\t// get old context value\n\tval := ctx.Context.Get(key)\n\tif val != nil {\n\t\treturn val\n\t}\n\treturn ctx.Request().Context().Value(key)\n}\n// Set saves data in the context.\nfunc (ctx contextValue) Set(key string, val interface{}) {\nctx.SetRequest(ctx.Request().WithContext(context.WithValue(ctx.Request().Context(), key, val)))\n}\n// ---------- method2 ----------\nfunc NewMiddlewareContextValue2(fn echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(ctx echo.Context) error {\n\t\tctxdata := contextValueData2{\n\t\t\tContext: ctx.Request().Context(),\n\t\t}\n\t\tctx.SetRequest(ctx.Request().WithContext(ctxdata))\n\t\treturn fn(&contextValue2{Context: ctx, contextValueData2: ctxdata})\n\t}\n}\ntype contextValue2 struct {\n\techo.Context\n\tcontextValueData2\n}\ntype contextValueData2 struct {\n\tcontext.Context\n\tData map[string]interface{}\n}\n// Get retrieves data from the context.\nfunc (ctx *contextValue2) Get(key string) interface{} {\n\t// get old context value\n\tval := ctx.Context.Get(key)\n\tif val != nil {\n\t\treturn val\n\t}\n\t// get my data value\n\tval, ok := ctx.contextValueData2.Data[key]\n\tif ok {\n\t\treturn val\n\t}\n\treturn ctx.contextValueData2.Context.Value(key)\n}\n// Set saves data in the context.\nfunc (ctx *contextValue2) Set(key string, val interface{}) {\n\tif ctx.Data == nil {\n\t\tctx.contextValueData2.Data = make(map[string]interface{})\n\t}\n\tctx.contextValueData2.Data[key] = val\n}\nfunc (ctx contextValueData2) Value(key interface{}) interface{} {\n\tstr, ok := key.(string)\n\tif ok {\n\t\tval, ok := ctx.Data[str]\n\t\tif ok {\n\t\t\treturn val\n\t\t}\n\t}\n\treturn ctx.Context.Value(key)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66289603/use-existing-session-cookie-in-gin-router",
    "body": "package main\nimport (\n\"github.com/gin-contrib/sessions\"\n\"github.com/gin-contrib/sessions/cookie\"\n\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tstore := cookie.NewStore([]byte(\"secret\"))\n\tstore.Options(sessions.Options{MaxAge:   60 * 60 * 24}) // expire in a day\n\tr.Use(sessions.Sessions(\"mysession\", store))\n\tr.GET(\"/incr\", func(c *gin.Context) {\n\t\tsession := sessions.Default(c)\n\t\tvar count int\n\t\tv := session.Get(\"count\")\n\t\tif v == nil {\n\t\t\tcount = 0\n\t\t} else {\n\t\t\tcount = v.(int)\n\t\t\tcount++\n\t\t}\n\t\tsession.Set(\"count\", count)\n\t\tsession.Save()\n\t\tc.JSON(200, gin.H{\"count\": count})\n\t})\n\tr.Run(\":8000\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64929217/bazel-gazelle-error-no-such-package-org-golang-x-tools-go-analysis-internal",
    "body": "load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n    name = \"io_bazel_rules_go\",\n    sha256 = \"6f111c57fd50baf5b8ee9d63024874dd2a014b069426156c55adbf6d3d22cb7b\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.25.0/rules_go-v0.25.0.tar.gz\",\n        \"https://github.com/bazelbuild/rules_go/releases/download/v0.25.0/rules_go-v0.25.0.tar.gz\",\n    ],\n)\nhttp_archive(\n    name = \"bazel_gazelle\",\n    sha256 = \"b85f48fa105c4403326e9525ad2b2cc437babaa6e15a3fc0b1dbab0ab064bc7c\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.2/bazel-gazelle-v0.22.2.tar.gz\",\n        \"https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.22.2/bazel-gazelle-v0.22.2.tar.gz\",\n    ],\n)\nload(\"@io_bazel_rules_go//go:deps.bzl\", \"go_register_toolchains\", \"go_rules_dependencies\")\ngo_rules_dependencies()\nload(\"@bazel_gazelle//:deps.bzl\", \"gazelle_dependencies\")\nload(\"//:go_third_party.bzl\", \"go_deps\")\n# gazelle:repository_macro go_third_party.bzl%go_deps\ngo_deps()\ngo_register_toolchains(version = \"1.15.5\")\ngazelle_dependencies()"
  },
  {
    "url": "https://stackoverflow.com/questions/59495537/how-to-do-unit-testing-in-the-case-of-access-log-middleware",
    "body": "package accesslog\nimport (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"github.com/go-chi/chi\"\n\t\"transactionService/pkg/log\"\n)\nfunc TestHandler(t *testing.T) {\n\tlogger, _ := log.NewForTest()\n\tr := chi.NewRouter()\n\tr.Use(Handler(logger))\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\t_, _ = w.Write([]byte(\"test\"))\n\t})\n\tts := httptest.NewServer(r)\n\tdefer ts.Close()\n\tif resp, body := testRequest(t, ts, \"GET\", \"/\", nil); body != \"root\" && resp.StatusCode != 200 {\n\t\tt.Fatalf(body)\n\t}\n}\nfunc testRequest(t *testing.T, ts *httptest.Server, method, path string, body io.Reader) (*http.Response, string) {\n\treq, err := http.NewRequest(method, ts.URL+path, body)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t\treturn nil, \"\"\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t\treturn nil, \"\"\n\t}\n\trespBody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t\treturn nil, \"\"\n\t}\n\tdefer resp.Body.Close()\n\treturn resp, string(respBody)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77746579/go-memory-usage-with-cipher-aead-seal",
    "body": "package main\nimport (\n        \"fmt\"\n        \"os\"\n        \"runtime\"\n        \"golang.org/x/crypto/chacha20poly1305\"\n)\nfunc main() {\n        showMemUsage(\"START\")\n        plaintext := make([]byte, 4<<30, 4<<30+chacha20poly1305.Overhead)\n        showMemUsage(\"STAGE 1\")\n        key := make([]byte, chacha20poly1305.KeySize)\n        if cipher, err := chacha20poly1305.New(key); err == nil {\n                showMemUsage(\"STAGE 2\")\n                nonce := make([]byte, chacha20poly1305.NonceSize)\n                cipher.Seal(plaintext[:0], nonce, plaintext, nil)\n        }\n        showMemUsage(\"END\")\n}\nfunc showMemUsage(tag string) {\n        var m runtime.MemStats\n        runtime.ReadMemStats(&m)\n        fmt.Fprintf(os.Stdout, \"[%s] Alloc = %v MiB, TotalAlloc = %v MiB\\n\", tag, m.Alloc>>20, m.TotalAlloc>>20)\n}\n// Output:\n// [START] Alloc = 0 MiB, TotalAlloc = 0 MiB\n// [STAGE 1] Alloc = 4096 MiB, TotalAlloc = 4096 MiB\n// [STAGE 2] Alloc = 4096 MiB, TotalAlloc = 4096 MiB\n// [END] Alloc = 4096 MiB, TotalAlloc = 4096 MiB"
  },
  {
    "url": "https://stackoverflow.com/questions/75987082/golang-gin-receive-json-data-and-image",
    "body": "var updateRequest struct {\n\tAvatar *multipart.FileHeader `form:\"avatar\" binding:\"required\"`\n\tUser   struct {\n\t\tUsername    string `json:\"username\" binding:\"required,min=4,max=20\"`\n\t\tDescription string `json:\"description\" binding:\"required,max=100\"`\n\t} `form:\"user\" binding:\"required\"`\n}\n// c.ShouldBind will choose binding.FormMultipart based on the Content-Type header.\n// We call c.ShouldBindWith to make it explicitly.\nif err := c.ShouldBindWith(&updateRequest, binding.FormMultipart); err != nil {\n\t_ = c.AbortWithError(http.StatusBadRequest, err)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75987082/golang-gin-receive-json-data-and-image",
    "body": "package m\nimport (\n\t\"bytes\"\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc handle(c *gin.Context) {\n\tvar updateRequest struct {\n\t\tAvatar *multipart.FileHeader `form:\"avatar\" binding:\"required\"`\n\t\tUser   struct {\n\t\t\tUsername    string `json:\"username\" binding:\"required,min=4,max=20\"`\n\t\t\tDescription string `json:\"description\" binding:\"required,max=100\"`\n\t\t} `form:\"user\" binding:\"required\"`\n\t\tEvent string `form:\"event\" binding:\"required\"`\n\t}\n\t// c.ShouldBind will choose binding.FormMultipart based on the Content-Type header.\n\t// We call c.ShouldBindWith to make it explicitly.\n\tif err := c.ShouldBindWith(&updateRequest, binding.FormMultipart); err != nil {\n\t\t_ = c.AbortWithError(http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v\\n\", updateRequest)\n\tvar event struct {\n\t\tAt     time.Time `xml:\"time\" binding:\"required\"`\n\t\tPlayer string    `xml:\"player\" binding:\"required\"`\n\t\tAction string    `xml:\"action\" binding:\"required\"`\n\t}\n\tif err := binding.XML.BindBody([]byte(updateRequest.Event), &event); err != nil {\n\t\t_ = c.AbortWithError(http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tfmt.Printf(\"%#v\\n\", event)\n}\nfunc TestMultipartForm(t *testing.T) {\n\ttestImage := make([]byte, 100)\n\tif _, err := rand.Read(testImage); err != nil {\n\t\tt.Fatal(err)\n\t}\n\timage := bytes.NewReader(testImage)\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\timageWriter, err := writer.CreateFormFile(\"avatar\", \"test_avatar.jpg\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif _, err := io.Copy(imageWriter, image); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := writer.WriteField(\"user\", `{\"username\":\"bobik\",\"description\":\"wanna be sharik\"}`); err != nil {\n\t\tt.Fatal(err)\n\t}\n\txmlBody := `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n   <time>2023-02-14T19:04:12Z</time>\n   <player>playerOne</player>\n   <action>strike (miss)</action>\n</root>`\n\tif err := writer.WriteField(\"event\", xmlBody); err != nil {\n\t\tt.Fatal(err)\n\t}\n\twriter.Close()\n\treq := httptest.NewRequest(\n\t\thttp.MethodPost,\n\t\t\"http://localhost:8080/update\",\n\t\tbody,\n\t)\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\tfmt.Printf(\"%v\\n\", req)\n\tw := httptest.NewRecorder()\n\tc, engine := gin.CreateTestContext(w)\n\tengine.POST(\"/update\", handle)\n\tc.Request = req\n\tengine.HandleContext(c)\n\tassert.Equal(t, 200, w.Result().StatusCode)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71689285/how-to-get-monotonic-part-of-time-time-in-go",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\nfunc main() {\n\tt0 := time.Now()\n\tfmt.Println(\"...example event...\")\n\ttime.Sleep(time.Millisecond)\n\tt1 := time.Now()\n\tfmt.Println(\"Event start:\", t0)\n\tfmt.Println(\"Event completed:\", t1)\n\tfmt.Println(\"=== Not recommended ===\")\n\toffsetT0, _ := monoOffset(t0)\n\tfmt.Println(\"Parsed start offset:\", offsetT0)\n\tstartNano, _ := calculateStartNano()\n\tfmt.Println(\"Calculate start offset via startNano: \", t0.Sub(startNano))\n\tfmt.Println(\"=== Recommended ===\")\n\tfmt.Println(\"Example event duration:\", t1.Sub(t0))\n\tfmt.Println(\"Time since startup\", time.Since(t0))\n}\n// You should never need anything below here (code smell).\nfunc monoOffset(t time.Time) (time.Duration, error) {\n\t// Recommend strings.Cut on Go1.18+.\n\tparts := strings.Split(t.String(), \" m=\")\n\tif len(parts) != 2 {\n\t\treturn 0, errors.New(\"missing monotonic offset\")\n\t}\n\tseconds, err := strconv.ParseFloat(parts[1], 64)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tnanos := math.Round(seconds * 1e9)\n\treturn time.Duration(nanos), nil\n}\nfunc calculateStartNano() (time.Time, error) {\n\tnow := time.Now()\n\toffset, err := monoOffset(now)\n\tif err != nil {\n\t\treturn time.Time{}, err\n\t}\n\treturn now.Add(-offset), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71284340/data-loss-when-sending-to-multiple-slices-using-channel",
    "body": "func main() {\n\tch := make(chan int)\n\twg := sync.WaitGroup{}\n\tvar bag1 []int\n\tvar bag2 []int\n\tvar bag3 []int\n\tgo func() {\n\t\tfor i := 0; i < 1000000; i++ {\n\t\t\tch <- i\n\t\t}\n\t\tclose(ch)\n\t}()\n\twg.Add(3)\n\tgo sendToBag(&bag1, ch, &wg)\n\tgo sendToBag(&bag2, ch, &wg)\n\tgo sendToBag(&bag3, ch, &wg)\n\twg.Wait()\n\tlen1 := (len(bag1))\n\tlen2 := (len(bag2))\n\tlen3 := (len(bag3))\n\tfmt.Println(\"length of bag1:\", len1)\n\tfmt.Println(\"length of bag2:\", len2)\n\tfmt.Println(\"length of bag3:\", len3)\n\tfmt.Println(\"total length:\", len1+len2+len3)\n}\nfunc sendToBag(bag *[]int, ch <-chan int, wg *sync.WaitGroup) {\n\tfor n := range ch {\n\t\t*bag = append(*bag, n)\n\t}\n\twg.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70582931/how-to-combine-the-work-of-channels-and-wait-group",
    "body": "package main\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n\t\"golang.org/x/sync/errgroup\"\n)\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tres, err := MockFunc()\n\tfmt.Printf(\"res - %v, err - %v\\n\", res, err)\n}\nfunc MockFunc() ([]int, error) {\n\targs := []int{1, 2, 3, 4, 5}\n\tresultChan := make(chan int)\n\tresult := make([]int, 0)\n\teg, ctx := errgroup.WithContext(context.Background())\n\t// Read all results into an array\n\teg.Go(func() error {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\t// Always check to see if the context has cancelled,\n\t\t\t\t// if there is an error errgroup will cancel the\n\t\t\t\t// context and all goroutines will need to exit\n\t\t\t\t// before `eg.Wait` returns.\n\t\t\t\treturn context.Canceled\n\t\t\tcase val := <-resultChan:\n\t\t\t\tresult = append(result, val)\n\t\t\t\tif len(result) == len(args) {\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\tfor _, a := range args {\n\t\taLit := a // Copy the value so that we don't re-use the memory address\n\t\teg.Go(func() error {\n\t\t\tvalue, err := RandomError(aLit)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase resultChan <- value:\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn context.Canceled\n\t\t\tdefault:\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\treturn result, eg.Wait()\n}\nfunc RandomError(arg int) (int, error) {\n\ttime.Sleep(time.Millisecond * 100 * time.Duration(arg))\n\terrChance := rand.Intn(100)\n\tif errChance > 40 {\n\t\tfmt.Printf(\"error on arg - %d\\n\", arg)\n\t\treturn 0, errors.New(\"mock err\")\n\t}\n\treturn errChance, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70582931/how-to-combine-the-work-of-channels-and-wait-group",
    "body": "func MockFunc() ([]int, error) {\n\targs := []int{1, 2, 3, 4, 5}\n\tresultChan := make(chan int, len(args))\n\tresult := make([]int, 0)\n\teg, ctx := errgroup.WithContext(context.Background())\n\tfor _, a := range args {\n\t\taLit := a // Copy the value so that we don't re-use the memory address\n\t\teg.Go(func() error {\n\t\t\tvalue, err := RandomError(aLit)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase resultChan <- value:\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn context.Canceled\n\t\t\tdefault:\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\tif err := eg.Wait(); err != nil {\n\t\treturn nil, err\n\t}\n\tclose(resultChan)\n\tfor val := range resultChan {\n\t\tresult = append(result, val)\n\t}\n\treturn result, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66611240/format-x509-pem-by-removing-headers-and-parsing-block-into-a-single-line-in-gola",
    "body": "package main\nimport (\n\t\"encoding/base64\"\n\t\"encoding/pem\"\n\t\"fmt\"\n)\nvar cert = []byte(`-----BEGIN CERTIFICATE-----\nMIICNzCCAd2gAwIBAgITPLBoBQhl1hqFND9S+SGWbfzaRTAKBggqhkjOPQQDAjBo\nMQswCQYDVQQGEwJVSzESMBAGA1UECBMJV2lsdHNoaXJlMRMwEQYDVQQHEwpDaGlw\ncGVuaGFtMQ8wDQYDVQQKEwZSZWRIYXQxDDAKBgNVBAsTA0NUTzERMA8GA1UEAxMI\ndGVzdGNlcnQwHhcNMjEwMzEyMjMyNDQ5WhcNMzEwMjI4MjMyNDQ5WjBoMQswCQYD\nVQQGEwJVSzESMBAGA1UECBMJV2lsdHNoaXJlMRMwEQYDVQQHEwpDaGlwcGVuaGFt\nMQ8wDQYDVQQKEwZSZWRIYXQxDDAKBgNVBAsTA0NUTzERMA8GA1UEAxMIdGVzdGNl\ncnQwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQRn+Alyof6xP3GQClSwgV0NFuY\nYEwmKP/WLWr/LwB6LUYzt5v49RlqG83KuaJSpeOj7G7MVABdpIZYWwqAiZV3o2Yw\nZDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBATAdBgNVHQ4EFgQU\nT8Jwm6JuVb0dsiuHUROiHOOVHVkwHwYDVR0jBBgwFoAUT8Jwm6JuVb0dsiuHUROi\nHOOVHVkwCgYIKoZIzj0EAwIDSAAwRQIhAJkNZmP6sKA+8EebRXFkBa9DPjacBpTc\nOljJotvKidRhAiAuNrIazKEw2G4dw8x1z6EYk9G+7fJP5m93bjm/JfMCdF==\n-----END CERTIFICATE-----`)\nfunc main() {\n\tblock, _ := pem.Decode(cert)\n\tfmt.Println(base64.StdEncoding.EncodeToString(block.Bytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65038949/how-to-write-a-antlr4-visitor",
    "body": "package antlr4demo\nimport (\n\t\"strconv\"\n\t\"github.com/antlr/antlr4/runtime/Go/antlr\"\n)\ntype EvalVisitor struct {\n\tBaseExpressionVisitor\n\tResults map[int]float64\n}\nfunc (v *EvalVisitor) Visit(tree antlr.ParseTree) float64 {\n\tswitch val := tree.(type) {\n\tcase *ParseContext:\n\t\treturn v.VisitParse(val)\n\tcase *MultDivExprContext:\n\t\treturn v.VisitMultDivExpr(val)\n\tcase *NumberExprContext:\n\t\treturn v.VisitNumberExpr(val)\n\tcase *PlusSubExprContext:\n\t\treturn v.VisitPlusSubExpr(val)\n\tcase *NestedExprContext:\n\t\treturn v.VisitNestedExpr(val)\n\tcase *UnaryExprContext:\n\t\treturn v.VisitUnaryExpr(val)\n\tdefault:\n\t\tpanic(\"Unknown context\")\n\t}\n}\nfunc (v *EvalVisitor) VisitParse(ctx *ParseContext) float64 {\n\tfor index, expr := range ctx.expr_list {\n\t\tv.Results[index] = v.Visit(expr)\n\t}\n\treturn v.Results[len(v.Results)-1]\n}\nfunc (v *EvalVisitor) VisitMultDivExpr(ctx *MultDivExprContext) float64 {\n\tlhs := v.Visit(ctx.lhs)\n\trhs := v.Visit(ctx.rhs)\n\tif ctx.op.GetTokenType() == ExpressionLexerMULT {\n\t\treturn lhs * rhs\n\t} else {\n\t\treturn lhs / rhs\n\t}\n}\nfunc (v *EvalVisitor) VisitPlusSubExpr(ctx *PlusSubExprContext) float64 {\n\tlhs := v.Visit(ctx.lhs)\n\trhs := v.Visit(ctx.rhs)\n\tif ctx.op.GetTokenType() == ExpressionLexerPLUS {\n\t\treturn lhs + rhs\n\t} else {\n\t\treturn lhs - rhs\n\t}\n}\nfunc (v *EvalVisitor) VisitNumberExpr(ctx *NumberExprContext) float64 {\n\tval, _ := strconv.ParseFloat(ctx.NUMBER().GetText(), 10)\n\treturn val\n}\nfunc (v *EvalVisitor) VisitNestedExpr(ctx *NestedExprContext) float64 {\n\treturn v.Visit(ctx.Expr())\n}\nfunc (v *EvalVisitor) VisitUnaryExpr(ctx *UnaryExprContext) float64 {\n\treturn -v.Visit(ctx.Expr())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65038949/how-to-write-a-antlr4-visitor",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"./antlr4demo\"\n\t\"github.com/antlr/antlr4/runtime/Go/antlr\"\n)\nfunc main() {\n\texpression := \"1000 25/5 (1 + 2) * -3.14159265\"\n\tinput := antlr.NewInputStream(expression)\n\tlexer := antlr4demo.NewExpressionLexer(input)\n\tstream := antlr.NewCommonTokenStream(lexer, 0)\n\tparser := antlr4demo.NewExpressionParser(stream)\n\tparser.BuildParseTrees = true\n\ttree := parser.Parse()\n\tvisitor := antlr4demo.EvalVisitor{\n\t\tResults: make(map[int]float64),\n\t}\n\tvar result = visitor.Visit(tree)\n\tfmt.Println(expression, \"=\", result)\n\tfmt.Println(\"All results: \", visitor.Results)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"github.com/gammazero/workerpool\"\n)\nvar (\n    numWorkers = 10\n)\ntype MyReturnType struct {\n    Name string\n    Data interface{}\n}\nfunc wrapJob(rc chan MyReturnType, f func() MyReturnType) func() {\n    return func() {\n        rc <- f()\n    }\n}\nfunc main() {\n    // create results chan and worker pool\n    // should prob make your results channel typed to what you need\n    jobs := []func() MyReturnType {\n        func() MyReturnType {\n            // whatever you want to do here\n            return MyReturnType{Name: \"job1\", Data: map[string]string{\"Whatever\": \"You want\"}}\n        },\n        func() MyReturnType {\n            // whatever you want to do here\n            // do a curl or a kubectl or whatever you want\n            resultFromCurl := \"i am a result\"\n            return MyReturnType{Name: \"job2\", Data: resultFromCurl}\n        },\n    }\n    results := make(chan MyReturnType, len(jobs))\n    pool := workerpool.New(numWorkers)\n    for _, job := range jobs {\n        j := job\n        pool.Submit(wrapJob(results, j))\n    }\n    // Wait for all jobs to finish\n    pool.StopWait()\n    // Close results chan\n    close(results)\n    // Iterate over results, printing to console\n    for res := range results {\n        prettyPrint(res)\n    }\n}\nfunc prettyPrint(i interface{}) {\n    prettyJSON, err := json.MarshalIndent(i, \"\", \"    \")\n    if err != nil {\n        fmt.Printf(\"Error : %s \\n\", err.Error())\n    }\n    fmt.Printf(\"MyReturnType %s\\n\", string(prettyJSON))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gammazero/workerpool\"\n)\nvar (\n\tnumWorkers = 10\n\turls       = []string{\"yahoo.com\", \"example.com\", \"google.com\"}\n)\nfunc main() {\n\t// create results chan and worker pool\n    // should prob make your results channel typed to what you need\n\tresults := make(chan interface{}, len(urls))\n\tpool := workerpool.New(numWorkers)\n\t// Create jobs by iterating over urls\n\tfor i, u := range urls {\n\t\turl := u\n\t\tjobNum := i\n\t\t// Create job\n\t\tf := func() {\n\t\t\tstart := time.Now()\n\t\t\tc := &http.Client{}\n\t\t\tr, e := c.Get(\"http://\" + url)\n\t\t\tif e != nil {\n\t\t\t\tfmt.Println(e.Error())\n\t\t\t}\n\t\t\ttook := time.Since(start).Milliseconds()\n\t\t\to := fmt.Sprintf(\"completed job '%d' to '%s' in '%dms' with status code '%d'\\n\", jobNum, url, took, r.StatusCode)\n\t\t\tresults <- o\n\t\t}\n\t\t// Add job to workerpool\n\t\tpool.Submit(f)\n\t}\n\t// Wait for all jobs to finish\n\tpool.StopWait()\n\t// Close results chan\n\tclose(results)\n\t// Iterate over results, printing to console\n\tfor res := range results {\n\t\tfmt.Printf(res.(string))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "pool := New(3)\npool.Job(func() {\n    c := &http.Client{}\n    r, e := c.Get(\"http://google.com\")\n    if e != nil {\n        panic(e.Error())\n    }\n    fmt.Printf(\"To google.com %d\\n\", r.StatusCode)\n})\npool.Job(func() {\n    c := &http.Client{}\n    r, e := c.Get(\"http://yahoo.com\")\n    if e != nil {\n        panic(e.Error())\n    }\n    fmt.Printf(\"To yahoo.com %d\\n\", r.StatusCode)\n})\npool.Job(func() {\n    c := &http.Client{}\n    r, e := c.Get(\"http://example.com\")\n    if e != nil {\n        panic(e.Error())\n    }\n    fmt.Printf(\"To example.com %d\\n\", r.StatusCode)\n})\npool.Seal()"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package puddle\nimport (\n    \"container/list\"\n    \"fmt\"\n    \"net/http\"\n\t\"sync\"\n\t\"time\"\n)\nconst (\n\tidleTimeout = time.Second * 2\n)\n// New creates a new puddle (aka worker pool)\nfunc New(maxWorkers int) Puddle {\n\t// There must be at least one worker\n\tif maxWorkers < 1 {\n\t\tmaxWorkers = 1\n\t}\n\tp := &puddle{\n\t\tmaxWorkers: maxWorkers,\n\t\tjobs:       make(chan func(), 1),\n\t\tworkers:    make(chan func()),\n\t\tkillswitch: make(chan struct{}),\n\t}\n\t// Start accepting/working jobs as they come in\n\tgo p.serve()\n\treturn p\n}\n// Puddle knows how to interact with worker pools\ntype Puddle interface {\n\tJob(f func())\n\tSeal()\n}\n// puddle is a worker pool that holds workers, tasks, and misc metadata\ntype puddle struct {\n\tmaxWorkers int\n\tjobs       chan func()\n\tworkers    chan func()\n\tkillswitch chan struct{}\n\tqueue      List\n\tonce       sync.Once\n\tstopped    int32\n\twaiting    int32\n\twait       bool\n}\n// Job submits a new task to the worker pool\nfunc (p *puddle) Job(f func()) {\n\tif f != nil {\n\t\tp.jobs <- f\n\t}\n}\n// Seal stops worker pool and waits for queued tasks to complete\nfunc (p *puddle) Seal() {\n\tp.stop(true)\n}\nfunc (p *puddle) stop(wait bool) {\n\tp.once.Do(func() {\n\t\tp.wait = wait\n\t\t// Close task queue and wait for currently running tasks to finish\n\t\tclose(p.jobs)\n\t})\n\t<-p.killswitch\n}\nfunc (p *puddle) killWorkerIfIdle() bool {\n\tselect {\n\tcase p.workers <- nil:\n\t\t// Kill worker\n\t\treturn true\n\tdefault:\n\t\t// No ready workers\n\t\treturn false\n\t}\n}\n// process puts new jobs onto the queue, and removes jobs from the queue as workers become available.\n// Returns false if puddle is stopped.\nfunc (p *puddle) process() bool {\n\tselect {\n\tcase task, ok := <-p.jobs:\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n\t\tp.queue.PushBack(task)\n\tcase p.workers <- p.queue.Front().Value.(func()):\n\t\t// Give task to ready worker\n\t\tp.queue.PopFront()\n\t}\n\treturn true\n}\nfunc (p *puddle) serve() {\n\tdefer close(p.killswitch)\n\ttimeout := time.NewTimer(idleTimeout)\n\tvar workerCount int\n\tvar idle bool\nServing:\n\tfor {\n\t\tif p.queue.Len() != 0 {\n\t\t\tif !p.process() {\n\t\t\t\tbreak Serving\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tselect {\n\t\tcase job, ok := <-p.jobs:\n\t\t\tif !ok {\n\t\t\t\tbreak Serving\n\t\t\t}\n\t\t\t// Give a task to our workers\n\t\t\tselect {\n\t\t\tcase p.workers <- job:\n\t\t\tdefault:\n\t\t\t\t// If we are not maxed on workers, create a new one\n\t\t\t\tif workerCount < p.maxWorkers {\n\t\t\t\t\tgo startJob(job, p.workers)\n\t\t\t\t\tworkerCount++\n\t\t\t\t} else {\n\t\t\t\t\t// Place a task on the back of the queue\n\t\t\t\t\tp.queue.PushBack(job)\n\t\t\t\t}\n\t\t\t}\n\t\t\tidle = false\n\t\tcase <-timeout.C:\n\t\t\t// Timed out waiting for work to arrive.  Kill a ready worker if\n\t\t\t// pool has been idle for a whole timeout.\n\t\t\tif idle && workerCount > 0 {\n\t\t\t\tif p.killWorkerIfIdle() {\n\t\t\t\t\tworkerCount--\n\t\t\t\t}\n\t\t\t}\n\t\t\tidle = true\n\t\t\ttimeout.Reset(idleTimeout)\n\t\t}\n\t}\n\t// Allow queued jobs to complete\n\tif p.wait {\n\t\tp.work()\n\t}\n\t// Stop all workers before shutting down\n\tfor workerCount > 0 {\n\t\tp.workers <- nil\n\t\tworkerCount--\n\t}\n\ttimeout.Stop()\n}\n// work removes each task from the waiting queue and gives it to\n// workers until queue is empty.\nfunc (p *puddle) work() {\n\tfor p.queue.Len() != 0 {\n\t\t// A worker is ready, so give task to worker.\n\t\tp.workers <- p.queue.PopFront()\n\t}\n}\n// startJob runs initial task, then starts a worker waiting for more.\nfunc startJob(job func(), workerQueue chan func()) {\n\tjob()\n\tgo worker(workerQueue)\n}\n// worker executes tasks and stops when it receives a nil task.\nfunc worker(queue chan func()) {\n\tfor job := range queue {\n\t\tif job == nil {\n\t\t\treturn\n\t\t}\n\t\tjob()\n\t}\n}\n// List wraps `container/list`\ntype List struct {\n\tlist.List\n}\n// PopFront removes then returns first element in list as func()\nfunc (l *List) PopFront() func() {\n\tf := l.Front()\n\tl.Remove(f)\n\treturn f.Value.(func())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package worker\nimport \"fmt\"\ntype JobResponse struct {\n\terr  error\n\tname string\n\tres  int\n\turl  string\n}\ntype Job interface {\n\tName() string\n\tCallback() JobResponse\n}\nfunc Do(jobs []Job, maxWorkers int) {\n    jobsPool := make(chan Job, len(jobs))\n\tresultsPool := make(chan JobResponse, len(jobs))\n\tfor i := 0; i < maxWorkers; i++ {\n\t\tgo worker(jobsPool, resultsPool)\n\t}\n\tmakeJobs(jobsPool, jobs)\n\tgetResults(resultsPool, jobs)\n}\nfunc worker(jobs <-chan Job, response chan<- JobResponse) {\n\tfor n := range jobs {\n\t\tresponse <- n.Callback()\n\t}\n}\nfunc makeJobs(jobs chan<- Job, queue []Job) {\n\tfor _, t := range queue {\n\t\tjobs <- t\n\t}\n}\nfunc getResults(response <-chan JobResponse, queue []Job) {\n\tfor range queue {\n\t\tjob := <-response\n\t\tstatus := fmt.Sprintf(\"[result] '%s' to '%s' was fetched with status '%d'\\n\", job.name, job.url, job.res)\n\t\tif job.err != nil {\n\t\t\tstatus = fmt.Sprintf(job.err.Error())\n\t\t}\n\t\tfmt.Printf(status)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n    \"github.com/oze4/worker\"\n)\nfunc main() {\n    jobs := []worker.Job{\n        AddedByUser{name: \"1\"},\n        AddedByUser{name: \"2\"},\n        AddedByUser{name: \"3\"},\n        AddedByUser{name: \"4\"},\n        AddedByUser{name: \"5\"},\n        AddedByUser{name: \"6\"},\n    }\n\n    worker.Do(jobs, 5)\n}\ntype AddedByUser struct {\n\tname string\n}\nfunc (a AddedByUser) Name() string {\n\treturn a.name\n}\nfunc (a AddedByUser) Callback() worker.JobResponse {\n\t// User added func/callback goes here\n\treturn worker.JobResponse{}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tfmt.Println(\"Hello, playground\")\n}\ntype JobResponse struct {\n\terr  error\n\tname string\n\tres  int\n\turl  string\n}\ntype Job interface {\n\tName() string\n\tCallback() JobResponse\n}\nfunc worker(jobs <-chan Job, response chan<- JobResponse) {\n\tfor n := range jobs {\n\t\tresponse <- n.Callback()\n\t}\n}\nfunc makeJobs(jobs chan<- Job, queue []Job) {\n\tfor _, t := range queue {\n\t\tjobs <- t\n\t}\n}\nfunc getResults(response <-chan JobResponse, queue []Job) {\n\tfor range queue {\n\t\tj := <-response\n\t\tstatus := fmt.Sprintf(\"[result] '%s' to '%s' was fetched with status '%d'\\n\", j.name, j.url, j.res)\n\t\tif j.err != nil {\n\t\t\tstatus = fmt.Sprintf(j.err.Error())\n\t\t}\n\t\tfmt.Printf(status)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tjobsPool := make(chan Job, len(testers))\n\tresultsPool := make(chan JobResponse, len(testers))\n\tmaxWorkers := 5\n\tfor i := 0; i < maxWorkers; i++ {\n\t\tgo worker(jobsPool, resultsPool)\n\t}\n\tmakeJobs(jobsPool, testers)\n\tgetResults(resultsPool, testers)\n}\nvar testers = []Job{\n\tAddedByUser{name: \"abu\"}, // Using different types in Job\n\tTap{name: \"tap\"},         // Using different types in Job\n}\ntype AddedByUser struct {\n\tname string\n}\nfunc (a AddedByUser) Name() string {\n\treturn a.name\n}\nfunc (a AddedByUser) Callback() JobResponse {\n\t// User added func/callback goes here\n\treturn JobResponse{}\n}\ntype Tap struct {\n\tname string\n}\nfunc (t Tap) Name() string {\n\treturn t.name\n}\nfunc (t Tap) Callback() JobResponse {\n\t// User added func/callback goes here\n\treturn JobResponse{}\n}\ntype JobResponse struct {\n\terr  error\n\tname string\n\tres  int\n\turl  string\n}\ntype Job interface {\n\tName() string\n\tCallback() JobResponse\n}\nfunc worker(jobs <-chan Job, response chan<- JobResponse) {\n\tfor n := range jobs {\n\t\tresponse <- n.Callback()\n\t}\n}\nfunc makeJobs(jobs chan<- Job, queue []Job) {\n\tfor _, t := range queue {\n\t\tjobs <- t\n\t}\n}\nfunc getResults(response <-chan JobResponse, queue []Job) {\n\tfor range queue {\n\t\tjob := <-response\n\t\tstatus := fmt.Sprintf(\"[result] '%s' to '%s' was fetched with status '%d'\\n\", job.name, job.url, job.res)\n\t\tif job.err != nil {\n\t\t\tstatus = fmt.Sprintf(job.err.Error())\n\t\t}\n\t\tfmt.Printf(status)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t// \"os/exec\"\n\t\"time\"\n)\ntype HT interface {\n\tName() string\n\tCheck() testerResponse\n}\ntype testerResponse struct {\n\terr  error\n\tname string\n\t//res  http.Response\n\tres int\n\turl string\n}\ntype Tap struct {\n\turl     string\n\tname    string\n\ttimeout time.Duration\n\tclient  *http.Client\n}\nfunc (p *Tap) Check() testerResponse {\n\tfmt.Printf(\"[job][Tap1] Fetching %s %s \\n\", p.name, p.url)\n\tp.client = &http.Client{Timeout: p.timeout}\n\tres, err := p.client.Get(p.url)\n\tif err != nil {\n\t\treturn testerResponse{err: err}\n\t}\n\t// need to close body\n\tres.Body.Close()\n\treturn testerResponse{name: p.name, res: res.StatusCode, url: p.url}\n}\nfunc (p *Tap) Name() string {\n\treturn p.name\n}\n// ---- CUSTOM CHECKS-------------\n// ---- 1. NEW specific function -------------\ntype Tap2 struct {\n\turl     string\n\tname    string\n\ttimeout time.Duration\n\tclient  *http.Client\n}\nfunc (p *Tap2) Check() testerResponse {\n\t// Do some request here.....\n\tfmt.Printf(\"[job][Tap2] Fetching %s %s \\n\", p.name, p.url)\n\treturn testerResponse{res: 200, url: p.url, name: p.name}\n}\nfunc (p *Tap2) Name() string {\n\treturn \"yahoo custom check\"\n}\n// ---- 2. NEW specific function which is not running http\ntype Tap3 struct {\n\turl     string\n\tname    string\n\ttimeout time.Duration\n\tclient  *http.Client\n}\nfunc (p *Tap3) Check() testerResponse {\n\t// Do some request here....\n\tfmt.Printf(\"[job][Tap3] Fetching %s %s \\n\", p.name, p.url)\n\treturn testerResponse{res: 200, url: p.url, name: p.name}\n}\nfunc (p *Tap3) Name() string {\n\treturn \"custom check2\"\n}\n// makeJobs fills up our jobs channel\nfunc makeJobs(jch chan<- HT, jobs []HT) {\n\tfor _, t := range jobs {\n\t\tjch <- t\n\t}\n}\n// getResults takes a job from our jobs channel, gets the result, and\n// places it on the results channel\nfunc getResults(tr <-chan testerResponse, jobs []HT) []testerResponse {\n\tvar rts []testerResponse\n\tvar r testerResponse\n\tfor range jobs {\n\t\tr = <-tr\n\t\tstatus := fmt.Sprintf(\"[result] '%s' to '%s' was fetched with status '%d'\\n\", r.name, r.url, r.res)\n\t\tif r.err != nil {\n\t\t\tstatus = fmt.Sprintf(r.err.Error())\n\t\t}\n\t\tfmt.Printf(status)\n\t\trts = append(rts, r)\n\t}\n\treturn rts\n}\n// worker defines our worker func. as long as there is a job in the\n// \"queue\" we continue to pick up  the \"next\" job\nfunc worker(jobs <-chan HT, results chan<- testerResponse) {\n\tfor n := range jobs {\n\t\tresults <- n.Check()\n\t}\n}\nvar (\n\ttesters1 = []Tap{\n\t\t{\n\t\t\tname:    \"First Tap1\",\n\t\t\turl:     \"http://google.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"Second Tap1\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t}\n\ttesters2 = []Tap2{\n\t\t{\n\t\t\tname: \"First Tap2\",\n\t\t\turl:  \"http://1.tap2.com\",\n\t\t},\n\t\t{\n\t\t\tname: \"Second Tap2\",\n\t\t\turl:  \"http://2.tap2.com\",\n\t\t},\n\t}\n\ttesters3 = []Tap3{\n\t\t{\n\t\t\tname: \"First Tap3\",\n\t\t\turl:  \"http://1.tap3.com\",\n\t\t},\n\t\t{\n\t\t\tname: \"Second Tap3\",\n\t\t\turl:  \"http://2.tap3.com\",\n\t\t},\n\t}\n)\nfunc main() {\n\t// Aggregate all testers into one slice\n\tvar testers []HT\n\tfor _, t1 := range testers1 {\n\t\ttesters = append(testers, &t1)\n\t}\n\tfor _, t2 := range testers2 {\n\t\ttesters = append(testers, &t2)\n\t}\n\tfor _, t3 := range testers3 {\n\t\ttesters = append(testers, &t3)\n\t}\n\t// Make buffered channels\n\tbuffer := len(testers)\n\tjobsPipe := make(chan HT, buffer)                // Jobs will be of type `HT`\n\tresultsPipe := make(chan testerResponse, buffer) // Results will be of type `testerResponse`\n\t// Create worker pool\n\t// Max workers default is 5\n\tmaxWorkers := 5\n\tfor i := 0; i < maxWorkers; i++ {\n\t\tgo worker(jobsPipe, resultsPipe)\n\t}\n\tmakeJobs(jobsPipe, testers)\n\tgetResults(resultsPipe, testers)\n\t//fmt.Println(\"at the end\",tr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64133779/add-callback-instead-of-using-default-implementation",
    "body": "// [job][Tap1] Fetching Second Tap1 http://stackoverflow.com\n// [job][Tap2] Fetching Second Tap2 http://2.tap2.com\n// [job][Tap3] Fetching Second Tap3 http://2.tap3.com\n// [job][Tap3] Fetching Second Tap3 http://2.tap3.com\n// [result] 'Second Tap2' to 'http://2.tap2.com' was fetched with status '200'\n// [result] 'Second Tap3' to 'http://2.tap3.com' was fetched with status '200'\n// [result] 'Second Tap3' to 'http://2.tap3.com' was fetched with status '200'\n// [job][Tap2] Fetching Second Tap2 http://2.tap2.com\n// [job][Tap1] Fetching Second Tap1 http://stackoverflow.com\n// [result] 'Second Tap2' to 'http://2.tap2.com' was fetched with status '200'\n// [result] 'Second Tap1' to 'http://stackoverflow.com' was fetched with status '200'\n// [result] 'Second Tap1' to 'http://stackoverflow.com' was fetched with status '200'"
  },
  {
    "url": "https://stackoverflow.com/questions/60591996/add-shared-library-to-a-aws-lambda-go-binary",
    "body": "╰─ unzip -l function.zip\nArchive:  function.zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n  6764336  10-08-2020 01:01   imgconvert\n   284008  06-19-2020 09:16   libexif.so.12\n   276072  08-22-2019 08:14   libjpeg.so.62\n   155824  12-10-2015 02:17   libpng12.so.0\n   468376  10-01-2019 03:37   libtiff.so.5\n 12261600  10-08-2020 00:48   libvips.so.42\n  3579016  10-08-2020 00:45   libwebp.so.7\n    85328  10-08-2020 00:45   libwebpdemux.so.2\n   205696  10-08-2020 00:45   libwebpmux.so.3"
  },
  {
    "url": "https://stackoverflow.com/questions/58410216/golang-mongo-driver-performance",
    "body": "package mongobench\n// Use\n//  docker run -d --name mongobench -p 27017:27017 mongo\n// to create a suitable test instance and access it via\n//  docker exec -it mongobench mongo\nimport (\n    \"context\"\n    \"log\"\n    \"testing\"\n    \"github.com/globalsign/mgo\"\n    \"github.com/globalsign/mgo/bson\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Data struct {\n    ID      primitive.ObjectID `bson:\"_id\"`\n    Counter int\n}\nconst DefaultHost = \"localhost:27017\"\nconst DefaultDB = \"test\"\nconst DefaultCollection = \"bench\"\nvar sess *mgo.Session\nvar client *mongo.Client\nfunc init() {\n    var err error\n    sess, err = mgo.Dial(DefaultHost)\n    if err != nil {\n        log.Fatalf(\"setting up session: %s\", err)\n    }\n    client, err = mongo.NewClient(options.Client().ApplyURI(\"mongodb://\" + DefaultHost))\n    if err != nil {\n        log.Fatalf(\"setting up client: %s\", err)\n    }\n    if err = client.Connect(context.Background()); err != nil {\n        log.Fatalf(\"connecting with client: %s\", err)\n    }\n}\nfunc BenchmarkMgoInsert(b *testing.B) {\n    c := sess.DB(DefaultDB).C(\"simple\")\n    if _, err := c.RemoveAll(bson.M{}); err != nil {\n        b.Logf(\"cleaning collection 'simple': %s\", err)\n        b.FailNow()\n    }\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        if err := c.Insert(&Data{ID: bson.NewObjectId(), Counter: i}); err != nil {\n            b.Logf(\"error inserting: %s\", err)\n            b.FailNow()\n        }\n    }\n}\nfunc BenchmarkMgoBulk(b *testing.B) {\n    c := sess.DB(DefaultDB).C(\"bulk\")\n    if _, err := c.RemoveAll(bson.M{}); err != nil {\n        b.Logf(\"cleaning collection 'simple': %s\", err)\n        b.FailNow()\n    }\n    b.ResetTimer()\n    bulk := c.Bulk()\n    for i := 0; i < b.N; i++ {\n        bulk.Insert(&Data{ID: bson.NewObjectId(), Counter: i})\n    }\n    if _, err := bulk.Run(); err != nil {\n        b.Logf(\"executing bulk: %s\", err)\n        b.FailNow()\n    }\n}\nfunc BenchmarkMongoInsert(b *testing.B) {\n    c := client.Database(DefaultDB).Collection(\"mongosimple\")\n    if _, err := c.DeleteMany(context.Background(), bson.M{}); err != nil {\n        b.Logf(\"cleaning collection 'mongosimple': %s\", err)\n        b.FailNow()\n    }\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        c.InsertOne(context.Background(), &Data{ID: bson.NewObjectId(), Counter: i})\n    }\n}\nfunc BenchmarkMongoBulk(b *testing.B) {\n    c := client.Database(DefaultDB).Collection(\"mongobulk\")\n    if _, err := c.DeleteMany(context.Background(), bson.M{}); err != nil {\n        b.Logf(\"cleaning collection 'mongosimple': %s\", err)\n        b.FailNow()\n    }\n    d := make([]mongo.WriteModel, b.N)\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        d[i] = mongo.NewInsertOneModel().SetDocument(Data{ID: bson.NewObjectId(), Counter: i})\n    }\n    if _, err := c.BulkWrite(context.Background(), d); err != nil {\n        b.Logf(\"inserting bulk: %s\", err)\n        b.FailNow()\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56391444/how-to-mock-a-method-of-a-third-party-package",
    "body": "func CreateUser(c *gin.Context, userInserter UserInserter) {\n\tvar userdetail UserDetails\n\tbinderr := c.ShouldBindJSON(&userdetail)\n\tfmt.Println(binderr)\n\tif binderr != nil {\n\t\tc.JSON(500, gin.H{\n\t\t\t\"message\": \"Input payload not matching\",\n\t\t\t\"error\":   binderr,\n\t\t})\n\t\treturn\n\t}\n\t// this is the modified part\n\tinsertedID, err2 := userInserter.Insert(c, userdetail)\n\tif err2 != nil {\n\t\tlog.Println(\"Some error inserting the document\")\n\t}\n\tfmt.Println(insertedID)\n\tc.JSON(200, gin.H{\n\t\t\"message\": fmt.Sprintf(\"User %s created successfully\", insertedID),\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55103204/how-correctly-to-run-golang-application-in-docker",
    "body": "FROM golang:1.11-alpine AS builder\n########\n# Prep\n########\n# add the source\nCOPY . /go/src/questionnaire\nWORKDIR /go/src/questionnaire/\n########\n# Build Go Wrapper\n########\n# Install go dependencies\nRUN go get github.com/gorilla/mux && \\\n  go get github.com/gorilla/handlers && \\\n  go get github.com/lib/pq && \\\n  go get github.com/joho/godotenv && \\\n  go get github.com/jinzhu/gorm && \\\n  go get github.com/go-goracle/goracle\n#build the go app\nRUN GOOS=linux GOARCH=amd64 go build -o ./questionnaire ./main.go\n########\n# Package into runtime image\n########\nFROM alpine\n# copy the executable from the builder image\nCOPY --from=builder /go/src/questionnaire .\nENTRYPOINT [\"/questionnaire\"]\nEXPOSE 8080"
  },
  {
    "url": "https://stackoverflow.com/questions/78804560/rebuilding-golang-app-in-docker-upon-file-change",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"log/slog\"\n\t\"net/http\"\n)\nvar bindAddress = flag.String(\"bind\", \":8080\", \"HTTP server bind address\")\nvar dir = flag.String(\"dir\", \"./\", \"Directory to serve\")\n// Do not use this code in production. There are security implications which are not mitigated for the sake of brevity. You have been warned!\nfunc main() {\n\tflag.Parse()\n\tslog.Info(\"Starting server\", \"addr\", *bindAddress, \"dir\", *dir)\n\thttp.Handle(\"GET /files/\", http.StripPrefix(\"/files/\", http.FileServer(http.Dir(*dir))))\n\terr := http.ListenAndServe(*bindAddress, nil)\n\tif err != nil && err != http.ErrServerClosed {\n\t\tslog.Error(\"Failed to start server\", \"err\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78214263/how-are-consumers-implemented-in-nats",
    "body": "version: \"3.8\"\nservices:\n  # A nats cluster with 3 nodes\n  nats:\n    image: nats:2.10.14-alpine\n    command:\n      - \"--debug\"\n      - \"-m\"\n      - \"8222\"\n      - \"--cluster\"\n      - \"nats://0.0.0.0:6222\"\n      - \"--routes\"\n      # Note that this needs to be prefixed with the\n      # name of the directory that the docker-compose file is in.\n      # In this case it's \"nats-consumers-78214263\" (a mnemonic and question ID)\n      - \"nats://nats-consumers-78214263-nats-1:6222\"\n    hostname: nats\n    deploy:\n      replicas: 3\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--spider\", \"-q\", \"http://localhost:8222/varz\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n  # The producer\n  # You can scale this up via `docker compose scale producer=n`\n  # to see how the consumers handle the load\n  producer:\n    deploy:\n      replicas: 1\n    build:\n      context: .\n      args:\n        - BINARY_NAME=producer\n    command: [\"/usr/local/bin/producer\"]\n    environment:\n      - PRODUCER_NATS_URL=nats://nats:4222\n      - PRODUCER_PRODUCERS=1\n    depends_on:\n      nats:\n        condition: service_healthy\n  # The consumer\n  # You can scale this up via `docker compose scale consumer=n`\n  # to see how the consumers handle the load\n  consumer:\n    deploy:\n      replicas: 1\n    build:\n      context: .\n      args:\n        - BINARY_NAME=consumer\n    command: [\"/usr/local/bin/consumer\"]\n    environment:\n      - CONSUMER_NATS_URL=nats://nats:4222\n      - CONSUMER_TOPIC=test.>\n      - CONSUMER_CONSUMERS=15000\n    depends_on:\n      nats:\n        condition: service_healthy"
  },
  {
    "url": "https://stackoverflow.com/questions/78214263/how-are-consumers-implemented-in-nats",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/url\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\t\"time\"\n\t\"github.com/alecthomas/kong\"\n\t\"github.com/nats-io/nats.go\"\n)\nvar producercfg struct {\n\tNatsURL   url.URL `kong:\"name='nats-url',help='NATS server URL',default='nats://nats:4222'\"`\n\tProducers int     `kong:\"name='producers',help='Number of producers to start',default='1'\"`\n}\nfunc main() {\n\tctx := kong.Parse(&producercfg, kong.DefaultEnvars(\"PRODUCER\"))\n\t// Run the configured number of producers in goroutines\n\t// Note that all producers share the same NATS connection\n\t// Each producer sends a messsage every 100ms\n\tnc, err := nats.Connect(producercfg.NatsURL.String())\n\tctx.FatalIfErrorf(err, \"Could not connect to NATS server: %s\", producercfg.NatsURL.String())\n\tdefer nc.Close()\n\t// Handle SIGINT and SIGTERM to shut down gracefully\n\t// We use a context here because that makes it easy for us to shut down\n\t// all goroutines in one fell swoop, but gracefully so.\n\tsigs, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\tvar sent atomic.Int64\n\tfor i := 0; i < producercfg.Producers; i++ {\n\t\twg.Add(1)\n\t\tgo func(producerContext context.Context, conn *nats.Conn, id int) {\n\t\t\tctx.Printf(\"Starting publisher to %s\", fmt.Sprintf(\"test.%d\", id))\n\t\t\tdefer wg.Done()\n\t\t\tfor {\n\t\t\t\t// We have...\n\t\t\t\tselect {\n\t\t\t\t// either received a signal to shut down...\n\t\t\t\tcase <-producerContext.Done():\n\t\t\t\t\tctx.Printf(\"Producer %d shutting down\", id)\n\t\t\t\t\t// ... so we return from the goroutine.\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t\t// or we send a message.\n\t\t\t\t\tsent.Add(1)\n\t\t\t\t\terr := conn.Publish(fmt.Sprintf(\"test.%d\", id), []byte(\"Hello, World!\"))\n\t\t\t\t\tctx.FatalIfErrorf(err, \"Could not publish message: %s\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}(sigs, nc, i)\n\t}\n\ttick := time.NewTicker(time.Second)\nevt:\n\tfor {\n\t\t// Either we receive a signal to shut down...\n\t\tselect {\n\t\tcase <-sigs.Done():\n\t\t\tcancel()\n\t\t\tbreak evt\n\t\t// ... or we print out the number of messages sent so far.\n\t\tcase <-tick.C:\n\t\t\tctx.Printf(\"Sent %d messages\", sent.Load())\n\t\t}\n\t}\n\tctx.Printf(\"Received signal, shutting down producers...\")\n\twg.Wait()\n\tctx.Printf(\"All producers shut down. Exiting.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78214263/how-are-consumers-implemented-in-nats",
    "body": "package main\nimport (\n\t\"context\"\n\t\"net/url\"\n\t\"os/signal\"\n\t\"sync/atomic\"\n\t\"syscall\"\n\t\"time\"\n\t\"github.com/alecthomas/kong\"\n\t\"github.com/nats-io/nats.go\"\n)\nvar consumercfg struct {\n\tNatsURL   url.URL `kong:\"name='nats-url',help='NATS server URL',default='nats://nats:4222'\"`\n    // Note that with this topic, ALL consumers we create here\n    // will receive ALL messages by ALL producers.\n\tTopic     string  `kong:\"name='topic',help='NATS topic to subscribe to',default='test.>'\"`\n\tConsumers int     `kong:\"name='consumers',help='Number of consumers to start',default='1'\"`\n}\nfunc main() {\n\tctx := kong.Parse(&consumercfg, kong.DefaultEnvars(\"CONSUMER\"))\n\tctx.Printf(\"Starting consumer on %s, subscribing to %s\", consumercfg.NatsURL.String(), consumercfg.Topic)\n\tnc, err := nats.Connect(consumercfg.NatsURL.String())\n\tctx.FatalIfErrorf(err, \"Could not connect to NATS server: %s\", consumercfg.NatsURL.String())\n\t// Run the configured number of consumers in goroutines\n\t// Note that all consumers share the same NATS connection\n\t// Each consumer subscribes to the configured topic\n\t// and counts the number of messages received, printing them out every second.\n\t// The consumers will stop when SIGINT or SIGTERM are received.\n\tsigs, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n\tdefer cancel()\n\tfor i := 0; i < consumercfg.Consumers; i++ {\n\t\tgo func(sigs context.Context, conn *nats.Conn, topic string, id int) {\n\t\t\tcount := atomic.Int64{}\n\t\t\t// We use the same connection!\n\t\t\tsub, err := conn.Subscribe(topic, func(msg *nats.Msg) {\n\t\t\t\t// Callback for processing a new message.\n\t\t\t\tcount.Add(1)\n\t\t\t})\n\t\t\tctx.FatalIfErrorf(err, \"Could not subscribe to topic %s: %s\", topic, err)\n\t\t\tdefer sub.Unsubscribe()\n\t\t\ttick := time.NewTicker(time.Second)\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-sigs.Done():\n\t\t\t\t\tctx.Printf(\"Received shutdown signal.\")\n\t\t\t\t\tctx.Printf(\"Final result: received %d messages\", count.Load())\n\t\t\t\t\treturn\n\t\t\t\tcase <-tick.C:\n\t\t\t\t\tctx.Printf(\"%6d Received %d messages\", id, count.Load())\n\t\t\t\t}\n\t\t\t}\n\t\t}(sigs, nc, consumercfg.Topic, i)\n\t}\n\t<-sigs.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77636166/what-is-the-right-way-to-implement-graceful-shutdown-of-background-processes-in",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n\t\"go.uber.org/fx\"\n)\ntype AwesomeService struct {\n    // channel to shutdown background processes\n\tshutdown chan struct{}\n\t// to wait for background processes to gracefully finish\n\twg *sync.WaitGroup\n}\nfunc New(lc fx.Lifecycle) *AwesomeService {\n\tservice := &AwesomeService{\n\t\tshutdown: make(chan struct{}),\n\t\twg:     new(sync.WaitGroup),\n\t}\n\tlc.Append(fx.Hook{\n\t\tOnStart: service.start,\n\t\tOnStop:  service.stop,\n\t})\n\treturn service\n}\nfunc (s *AwesomeService) start(_ context.Context) error {\n\ts.runBackgroundProcess()\n\tlog.Println(\"Start done\")\n\treturn nil\n}\nfunc (s *AwesomeService) stop(_ context.Context) error {\n\tclose(s.shutdown)\n\ts.wg.Wait()\n\tlog.Println(\"Stop done\")\n\treturn nil\n}\n// runBackgroundProcess does some work till context is done.\nfunc (s *AwesomeService) runBackgroundProcess() {\n\ts.wg.Add(1)\n\tgo func() {\n\t\tdefer s.wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-s.shutdown:\n\t\t\t\treturn\n\t\t\tcase <-time.After(1 * time.Second):\n\t\t\t\tlog.Println(\"Working...\")\n\t\t\t}\n\t\t}\n\t}()\n}\nfunc main() {\n\tfx.New(\n\t\tfx.Provide(New),\n\t\tfx.Invoke(func(*AwesomeService) {}),\n\t).Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77484344/what-is-offset-in-wasmtime-memory-read",
    "body": "use wasmtime::*;\nuse wasmtime_wasi::sync::WasiCtxBuilder;\nuse std::mem;\n/// Go's string representation for export.\n///\n/// According to <https://tinygo.org/docs/concepts/compiler-internals/datatypes/#string> and\n/// <https://github.com/tinygo-org/tinygo/blob/731532cd2b6353b60b443343b51296ec0fafae09/src/runtime/string.go#L10-L13>\n#[derive(Debug)]\n#[repr(C)]\nstruct GoStringParameters {\n    ptr: i32,\n    len: i32,\n}\nfn main() {\n    // Create wasmtime runtime with WASI support, according to <https://docs.wasmtime.dev/examples-rust-wasi.html#wasirs>\n    let engine = Engine::default();\n    let module = Module::from_file(&engine, \"../return_string.wasm\").expect(\"Create module\");\n    let mut linker = Linker::new(&engine);\n    let wasi = WasiCtxBuilder::new()\n        .inherit_stdio()\n        .inherit_args().expect(\"WASI: inherit args\")\n        .build();\n    let mut store = Store::new(&engine, wasi);\n    wasmtime_wasi::add_to_linker(&mut linker, |s| s).expect(\"Add WASI to linker\");\n    let instance = linker.instantiate(&mut store, &module).expect(\"Create instance\");\n    // malloc a GoStringParameters in WASM memory\n    let go_str_addr = {\n        let malloc = instance.get_func(&mut store, \"malloc\").expect(\"Couldn't get malloc function\");\n        let mut result = [wasmtime::Val::I32(0)];\n        malloc.call(&mut store, &[wasmtime::Val::I32(mem::size_of::<GoStringParameters>() as i32)], &mut result).expect(\"malloc GoStringParameters\");\n        result[0].unwrap_i32()\n    };\n    // Call ReturnString() and pass a pointer where it should store the GoStringParameters\n    let wasm_return_string_function = instance.get_func(&mut store, \"ReturnString\").expect(\"Couldn't get function\");\n    wasm_return_string_function.call(&mut store, &[wasmtime::Val::I32(go_str_addr)], &mut []).expect(\"Call ReturnString\");\n    // Read the GoStringParameters from WASM memory\n    let mut buf = [0u8; mem::size_of::<GoStringParameters>()];\n    let mem = instance.get_memory(&mut store, \"memory\").unwrap();\n    mem.read(&mut store, go_str_addr as usize, &mut buf).expect(\"Get WASM memory\");\n    // SAFETY: This hack (mem::transmute) only works on little endian machines, because WASM memory is always in little endian\n    let go_str_parameters: GoStringParameters = unsafe { mem::transmute(buf) };\n    dbg!(&go_str_parameters);\n\n    // Read the actual bytes of the string from WASM memory\n    let mut str_bytes = vec![0u8; go_str_parameters.len as usize];\n    mem.read(&mut store, go_str_parameters.ptr as usize, &mut str_bytes).expect(\"Read string bytes\");\n    let rust_str = String::from_utf8(str_bytes).unwrap();\n    dbg!(rust_str);\n   // TODO: Call exported free() function on the GoStringParameters address\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75784912/golang-unmarshal-dynamic-yaml-annonation",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"unsafe\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype User struct {\n\tName string `yaml:\"dummy\"`\n}\nfunc (u *User) UnmarshalYAML(node *yaml.Node) error {\n\tt := reflect.TypeOf(*u)\n\tfields := make([]reflect.StructField, 0)\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tfields = append(fields, t.Field(i))\n\t\tif t.Field(i).Name == \"Name\" {\n\t\t\tfields[i].Tag = `yaml:\"name\"` // Dynamic annotation\n\t\t}\n\t}\n\tnewType := reflect.StructOf(fields)\n\tnewValue := reflect.NewAt(newType, unsafe.Pointer(u)).Elem()\n\terr := node.Decode(newValue.Addr().Interface())\n\treturn err\n}\nvar dat string = `name: abc`\nfunc main() {\n\tout := User{}\n\tyaml.Unmarshal([]byte(dat), &out)\n\tfmt.Printf(\"%+v\\n\", out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75709043/why-is-the-return-value-of-personality2-in-a-go-program-sometimes-incorrect",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"syscall\"\n\t\"kernel.org/pub/linux/libs/security/libcap/psx\"\n)\nvar wPSX = flag.Bool(\"psx\", false, \"disable ASLR with PSX thread mirroring\")\n// https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/personality.h\nconst addrNoRandomize = 0x0040000\nfunc main() {\n\tflag.Parse()\n\tdisableAslr()\n\tfor i := 0; i < 100; i++ {\n\t\truntime.LockOSThread()\n\t\tcurPersona := getCurrentPersona()\n\t\ttid := syscall.Gettid()\n\t\truntime.UnlockOSThread()\n\t\tif curPersona&addrNoRandomize != 0 {\n\t\t\tfmt.Printf(\"%d: good - ASLR is disabled (0x%08x)\\n\", tid, curPersona)\n\t\t} else {\n\t\t\tfmt.Printf(\"%d: bad - ASLR is not disabled (0x%08x)\\n\", tid, curPersona)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tgo func() {\n\t\t\t// Cause one OS thread to exit.\n\t\t\truntime.LockOSThread()\n\t\t}()\n\t\t// Allow this code to run on a different thread.\n\t\truntime.Gosched()\n\t}\n}\nfunc disableAslr() {\n\tpersona := getCurrentPersona()\n\tif persona&addrNoRandomize != 0 {\n\t\treturn\n\t}\n\tvar ret uintptr\n\tvar errno syscall.Errno\n\tif *wPSX {\n\t\tret, _, errno = psx.Syscall3(syscall.SYS_PERSONALITY, uintptr(persona|addrNoRandomize), 0, 0)\n\t} else {\n\t\tret, _, errno = syscall.Syscall(syscall.SYS_PERSONALITY, uintptr(persona|addrNoRandomize), 0, 0)\n\t}\n\tif int(ret) == -1 {\n\t\tpanic(fmt.Errorf(\"disable aslr: %v\", errno))\n\t}\n}\nfunc getCurrentPersona() int {\n\tpersona, _, errno := syscall.RawSyscall(syscall.SYS_PERSONALITY, uintptr(0xffffffff), 0, 0)\n\tif int(persona) == -1 {\n\t\tpanic(fmt.Errorf(\"get current persona: %v\", errno))\n\t}\n\treturn int(persona)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75709043/why-is-the-return-value-of-personality2-in-a-go-program-sometimes-incorrect",
    "body": "$ go mod init prog\n$ go mod tidy\n$ go build\n$ ./prog --psx=false\n24381: good - ASLR is disabled (0x00040000)\n24381: good - ASLR is disabled (0x00040000)\n24381: good - ASLR is disabled (0x00040000)\n24387: bad - ASLR is not disabled (0x00000000)\n$ ./prog --psx=true\n24368: good - ASLR is disabled (0x00040000)\n24369: good - ASLR is disabled (0x00040000)\n24370: good - ASLR is disabled (0x00040000)\n24371: good - ASLR is disabled (0x00040000)\n24372: good - ASLR is disabled (0x00040000)\n24374: good - ASLR is disabled (0x00040000)\n24373: good - ASLR is disabled (0x00040000)\n...\n$"
  },
  {
    "url": "https://stackoverflow.com/questions/75477937/handling-query-results-in-golang",
    "body": "gremlin> g.V().repeat(__.as(\"a\").inE().outV().simplePath()).emit().until(__.outE().count().is(0)).filter(__.hasLab\nel(\"person\")).project(\"entityID\", \"personID\", \"personValue\").by(__.select(\"a\").id()).by(__.id()).by(__.values()).toList()\n==>{entityID=2, personID=1, personValue=marko}\n==>{entityID=3, personID=1, personValue=marko}\n==>{entityID=3, personID=4, personValue=josh}\n==>{entityID=3, personID=6, personValue=peter}\n==>{entityID=4, personID=1, personValue=marko}\n==>{entityID=4, personID=1, personValue=marko}\n==>{entityID=5, personID=4, personValue=josh}\n==>{entityID=4, personID=1, personValue=marko}"
  },
  {
    "url": "https://stackoverflow.com/questions/75461990/testing-my-interface-in-golang-with-mocks-specifically-test-1-function-that-cal",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n)\n// 1. declare mock\ntype myStructMock struct {\n\tmock.Mock\n}\n// 2. implement the interface\nfunc (m *myStructMock) Foo() error {\n\targs := m.Called()\n\treturn args.Error(0)\n}\nfunc (m *myStructMock) Bar() error {\n\targs := m.Called()\n\treturn args.Error(0)\n}\nfunc TestFoo(t *testing.T) {\n\t// 3. instantiate/setup mock\n\tmyStructMock := new(myStructMock)\n\tmyStructMock.On(\"Bar\").Return(nil).Times(1)\n\tsut := NewMyStruct(myStructMock)\n\terr := sut.Foo()\n\t// 4. check that all expectations were met on the mock\n\tassert.Nil(t, err)\n\tassert.True(t, myStructMock.AssertExpectations(t))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75241603/go-structs-that-represent-sql-tables",
    "body": "package main\nimport (\n    \"fmt\"\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n)\ntype Patient struct {\n    ID              int `gorm:\"primaryKey\"`\n    Name            string\n    Image           string\n}\nfunc main() {\n    dsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable TimeZone=UTC\"\n    db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n    db.AutoMigrate(&Patient{})\n    patient := Patient{\n        Name: \"John Smith\",\n        Image: \"https://example.com/image.png\",\n    }\n    result := db.Create(&patient)\n    if result.Error != nil {\n        panic(result.Error)\n    }\n    fmt.Println(patient)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75241603/go-structs-that-represent-sql-tables",
    "body": "package main\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    _ \"github.com/lib/pq\"\n)\ntype Patient struct {\n    ID              int\n    Name            string\n    Image           string\n}\nfunc main() {\n    dsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable TimeZone=UTC\"\n    db, err := sql.Open(\"postgres\", dsn)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer db.Close()\n    _, err = db.Exec(`\n        CREATE TABLE IF NOT EXISTS patients (\n            id SERIAL PRIMARY KEY,\n            name TEXT,\n            image TEXT\n        )\n    `)\n    if err != nil {\n        log.Fatal(err)\n    }\n    patient := Patient{\n        Name: \"John Smith\",\n        Image: \"https://example.com/image.png\",\n    }\n    _, err = db.Exec(`\n        INSERT INTO patients (name, image) VALUES ($1, $2)\n    `, patient.Name, patient.Image)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(patient)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75241603/go-structs-that-represent-sql-tables",
    "body": "package main\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/pressly/goose\"\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n)\ntype Patient struct {\n    ID              int `gorm:\"primaryKey\"`\n    Name            string\n    Image           string\n}\nfunc main() {\n    dsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable TimeZone=UTC\"\n    db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n    goose.SetDialect(\"postgres\")\n    goose.SetTableName(\"schema_migrations\")\n    err = goose.Run(\"up\", db.DB(), \"migrations\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    patient := Patient{\n        Name: \"John Smith\",\n        Image: \"https://example.com/image.png\",\n    }\n    result := db.Create(&patient)\n    if result.Error != nil {\n        panic(result.Error)\n    }\n    fmt.Println(patient)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75003986/golang-intercepting-and-mocking-an-http-response-with-httptest",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\ntype contact struct {\n\tusername string\n\tnumber   int\n}\ntype Client interface {\n\tDo(req *http.Request) (*http.Response, error)\n}\nfunc main() {\n\tgetResponse(http.DefaultClient, contact{})\n}\nfunc getResponse(client Client, c contact) string {\n  url := fmt.Sprintf(\"https://mywebsite/%s\", c.username)\n  req, _ := http.NewRequest(http.MethodGet, url, nil)\n  // error checking\n  resp, _ := http.DefaultClient.Do(req)\n  // error checking and response processing\n  return response\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75003986/golang-intercepting-and-mocking-an-http-response-with-httptest",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n)\ntype contact struct {\n\tusername string\n\tnumber   int\n}\nfunc main() {\n\tfmt.Println(getResponse(contact{}))\n}\nfunc getResponse(c contact) string {\n\t// Make a test server\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintln(w, \"your response\")\n\t}))\n\tdefer ts.Close()\n\t// You should still set your base url\n\tbase_url := ts.URL\n\turl := fmt.Sprintf(\"%s/%s\", base_url, c.username)\n\treq, _ := http.NewRequest(http.MethodGet, url, nil)\n\t// Use ts.Client() instead of http.DefaultClient in your tests.\n\tresp, _ := ts.Client().Do(req)\n\t// Processing the response\n\tresponse, _ := io.ReadAll(resp.Body)\n\tresp.Body.Close()\n\treturn string(response)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73907312/i-want-to-connect-to-elasticcache-for-redis-in-which-cluster-mode-is-enabled-i",
    "body": "import (\n  goredis \"github.com/go-redis/redis/v8\"\n)\ngoredis.NewClusterClient(&goredis.ClusterOptions{\n\t\tAddrs:        []string{\"cluster-configuration-endpoint:6379\"},\n\t\tPassword:     \"password\",\n\t\tPoolSize:     10,\n\t\tMinIdleConns: 10,\n\t\tDialTimeout:  5 * time.Second,\n\t\tReadTimeout:  3 * time.Second,\n\t\tWriteTimeout: 3 * time.Second,\n\t\tPoolTimeout:  4 * time.Second,\n\t\tIdleCheckFrequency: 60 * time.Second,\n\t\tIdleTimeout:        5 * time.Minute,\n\t\tMaxConnAge:         0 * time.Second,\n\t\tMaxRetries:      10,\n\t\tMinRetryBackoff: 8 * time.Millisecond,\n\t\tMaxRetryBackoff: 512 * time.Millisecond,\n\t\tTLSConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t\tReadOnly:       false,\n\t\tRouteRandomly:  false,\n\t\tRouteByLatency: false,\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/72429858/gorm-query-customized-join-extra-column",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype Part struct {\n\tId              uint `gorm:\"primaryKey\"`\n\tName            string\n\tPartNumber      string `gorm:\"-:migration;->\"`\n\tPartDescription string `gorm:\"-:migration;->\"`\n}\ntype Diagram struct {\n\tId              uint `gorm:\"primaryKey\"`\n\tName            string\n\tParts           []Part `gorm:\"many2many:diagram_parts;\"`\n\t// PartNumber      string `gorm:\"-:migration;->\"`\n\t// PartDescription string `gorm:\"-:migration;->\"`\n}\ntype DiagramPart struct {\n\tDiagramId         uint `gorm:\"primaryKey\"`\n\tPartId            uint `gorm:\"primaryKey\"`\n\tPartDiagramNumber int\n\tPartNumber        string\n\tPartDescription   string\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"test.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdb.AutoMigrate(&Diagram{}, &Part{}, &DiagramPart{})\n\tdiagram := &Diagram{}\n\terr = db.Debug().Where(\"id = ?\", 1).\n\t\t// Select(\"diagrams.*, diagram_parts.part_number, diagram_parts.part_description\").\n\t\tPreload(\"Parts\", func(db *gorm.DB) *gorm.DB {\n\t\t\treturn db.Select(\"parts.*, diagram_parts.part_number, diagram_parts.part_description\").\n\t\t\t\tJoins(\"left join diagram_parts on diagram_parts.part_id = parts.id\")\n\t\t}).\n\t\t// Joins(\"left join diagram_parts on diagram_parts.diagram_id = diagrams.id\").\n\t\tFirst(diagram).Error\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"diagram: %v\\n\", diagram)\n\tfmt.Println(\"part number:\", diagram.Parts[0].PartNumber)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71977854/rate-limiting-for-a-third-party-api-with-a-golang-server",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\t\"golang.org/x/time/rate\"\n)\nfunc main() {\n\trl := rate.NewLimiter(rate.Every(10*time.Second), 50)\n\treqURL := \"https://www.google.com\"\n\tc := http.Client{}\n\treq, err := http.NewRequest(\"GET\", reqURL, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"failed to create request: %v\", err)\n\t}\n\tfor i := 0; i < 300; i++ {\n\t\t// Waiting for rate limiter\n\t\terr = rl.Wait(context.Background())\n\t\tif err != nil {\n\t\t\tlog.Println(\"failed to wait: %v\", err)\n\t\t}\n\t\t// and doing the requests if the rate is not exceeded\n\t\t_, err := c.Do(req)\n\t\tif err != nil {\n\t\t\tlog.Println(\"request failed: %v\", err)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71273703/golang-data-race-cause-by-concurrent-map-read",
    "body": "package main\nimport (\n\t\"sync\"\n\t\"time\"\n)\ntype event struct {\n\tdone chan bool\n}\ntype server struct {\n\tmu     sync.Mutex\n\tevents map[int]*event\n}\nfunc main() {\n\ts := server{}\n\ts.events = make(map[int]*event)\n\tfor i := 0; i < 10; i++ {\n\t\ts.events[i] = &event{}\n\t\ts.events[i].done = make(chan bool)\n\t}\n\tfor i := 0; i < 10; i++ {\n\t\tgo func(i int) {\n\t\t\ttime.Sleep(1 * time.Millisecond)\n\t\t\t<-s.events[i].done\n\t\t\t// server do something.\n\t\t}(i)\n\t}\n\ttime.Sleep(1 * time.Second)\n\tfor i := 0; i < 10; i++ {\n\t\t// event happen.\n\t\ts.events[i].done <- true\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71273703/golang-data-race-cause-by-concurrent-map-read",
    "body": "package main\nimport (\n\t\"sync\"\n\t\"time\"\n)\ntype event struct {\n\tdone chan bool\n}\ntype server struct {\n\tmu     sync.Mutex\n\tevents map[int]*event\n}\nfunc main() {\n\ts := server{}\n\ts.events = make(map[int]*event)\n\tfor i := 0; i < 10; i++ {\n\t\ts.events[i] = &event{}\n\t\tc := make(chan bool)\n\t\ts.events[i].done = c\n\t\tgo func(i int, c chan bool) {\n\t\t\ttime.Sleep(1 * time.Millisecond)\n\t\t\t<-c\n\t\t\t// server do something.\n\t\t}(i, c)\n\t}\n\ttime.Sleep(1 * time.Second)\n\tfor i := 0; i < 10; i++ {\n\t\t// event happen.\n\t\ts.events[i].done <- true\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71273703/golang-data-race-cause-by-concurrent-map-read",
    "body": "package main\nimport (\n\t\"sync\"\n\t\"time\"\n)\ntype event struct {\n\tdone chan bool\n}\ntype server struct {\n\tevents map[int]*event\n}\nfunc main() {\n\ts := server{}\n\ts.events = make(map[int]*event)\n\t// Routine to trigger channels\n\ttriggerChan := make(chan chan bool) // Send new triggers to this...\n\teventChan := make(chan struct{})    // Close this when the event happens and go routines should continue\n\tgo func() {\n\t\tvar triggers []chan bool\n\t\teventReceived := false\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase t, ok := <-triggerChan:\n\t\t\t\tif !ok { // You want some way for the goRoutine to shut down - in this case we wait on the closure of triggerChan\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif eventReceived {\n\t\t\t\t\tt <- true // The event has already happened so go routine can proceed immediately\n\t\t\t\t} else {\n\t\t\t\t\ttriggers = append(triggers, t)\n\t\t\t\t}\n\t\t\tcase <-eventChan:\n\t\t\t\tfor _, c := range triggers {\n\t\t\t\t\tc <- true\n\t\t\t\t}\n\t\t\t\teventReceived = true\n\t\t\t\teventChan = nil // Don't want select to be triggered again...\n\t\t\t}\n\t\t}\n\t}()\n\t// Start up the event handlers...\n\tvar wg sync.WaitGroup\n\twg.Add(10)\n\tfor i := 0; i < 10; i++ {\n\t\ts.events[i] = &event{}\n\t\tc := make(chan bool)\n\t\ttriggerChan <- c\n\t\tgo func(i int, c chan bool) {\n\t\t\ttime.Sleep(1 * time.Millisecond)\n\t\t\t<-c\n\t\t\t// server do something.\n\t\t\twg.Done()\n\t\t}(i, c)\n\t}\n\ttime.Sleep(1 * time.Second)\n\t// Event happened - release the go routines\n\tclose(eventChan)\n\twg.Wait()\n\tclose(triggerChan)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70981681/how-to-generate-hd-wallet-keys-addresses-given-seed-phrase-with-cosmos-sdk",
    "body": "package main\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/cosmos/cosmos-sdk/crypto/hd\"\n\t\"github.com/cosmos/go-bip39\"\n\t\"github.com/decred/dcrd/bech32\"\n\t\"github.com/tendermint/tendermint/crypto/secp256k1\"\n)\nfunc main() {\n\tseed := bip39.NewSeed(\"blast about old claw current first paste risk involve victory edit current\", \"\")\n\tfmt.Println(\"Seed: \", hex.EncodeToString(seed)) // Seed:  dd5ffa7088c0fa4c665085bca7096a61e42ba92e7243a8ad7fbc6975a4aeea1845c6b668ebacd024fd2ca215c6cd510be7a9815528016af3a5e6f47d1cca30dd\n\tmaster, ch := hd.ComputeMastersFromSeed(seed)\n\tpath := \"m/44'/118'/0'/0/0'\"\n\tpriv, err := hd.DerivePrivateKeyForPath(master, ch, path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Derivation Path: \", path)                 // Derivation Path:  m/44'/118'/0'/0/0'\n\tfmt.Println(\"Private Key: \", hex.EncodeToString(priv)) // Private Key:  69668f2378b43009b16b5c6eb5e405d9224ca2a326a65a17919e567105fa4e5a\n\tvar privKey = secp256k1.PrivKey(priv)\n\tpubKey := privKey.PubKey()\n\tfmt.Println(\"Public Key: \", hex.EncodeToString(pubKey.Bytes())) // Public Key:  03de79435cbc8a799efc24cdce7d3b180fb014d5f19949fb8d61de3f21b9f6c1f8\n\tdecodeString, err := hex.DecodeString(fmt.Sprintf(\"04%x\", pubKey.Bytes()))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Convert test data to base32:\n\tconv, err := bech32.ConvertBits(decodeString, 8, 5, true)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\tencoded, err := bech32.Encode(\"atom\", conv)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\t// Show the encoded data.\n\tfmt.Println(\"Wallet Address:\", encoded) // Wallet Address: atom1qspau72rtj7g57v7lsjvmnna8vvqlvq56hcejj0m34sau0eph8mvr7qgl9avu\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70937676/extract-all-json-keys-and-values-as-map",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nfunc main() {\n\tJSONStr := `{\n\t\t\"data\": {\"name\": \"John\", \"age\": 30},\n\t\t\"items\": [1, 2, 3],\n\t\t\"data2\": {\n\t\t\t\"name\": \"Johns\",\n\t\t\t\"age\": {\"test\": [1, 2, 3, {\"test2\": \"123\"}]}\n\t\t}\n\t}`\n\tvar JSON map[string]interface{}\n\tjson.Unmarshal([]byte(JSONStr), &JSON)\n\tneededOutput := jsonToMap(JSON)\n\tfmt.Println(neededOutput)\n}\nfunc jsonToMap(data map[string]interface{}) map[string][]string {\n\t// final output\n\tout := make(map[string][]string)\n\t// check all keys in data\n\tfor key, value := range data {\n\t\t// check if key not exist in out variable, add it\n\t\tif _, ok := out[key]; !ok {\n\t\t\tout[key] = []string{}\n\t\t}\n\t\tif valueA, ok := value.(map[string]interface{}); ok { // if value is map\n\t\t\tout[key] = append(out[key], \"\")\n\t\t\tfor keyB, valueB := range jsonToMap(valueA) {\n\t\t\t\tif _, ok := out[keyB]; !ok {\n\t\t\t\t\tout[keyB] = []string{}\n\t\t\t\t}\n\t\t\t\tout[keyB] = append(out[keyB], valueB...)\n\t\t\t}\n\t\t} else if valueA, ok := value.([]interface{}); ok { // if value is array\n\t\t\tfor _, valueB := range valueA {\n\t\t\t\tif valueC, ok := valueB.(map[string]interface{}); ok {\n\t\t\t\t\tfor keyD, valueD := range jsonToMap(valueC) {\n\t\t\t\t\t\tif _, ok := out[keyD]; !ok {\n\t\t\t\t\t\t\tout[keyD] = []string{}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout[keyD] = append(out[keyD], valueD...)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tout[key] = append(out[key], fmt.Sprintf(\"%v\", valueB))\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // if string and numbers and other ...\n\t\t\tout[key] = append(out[key], fmt.Sprintf(\"%v\", value))\n\t\t}\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70105631/unmarshal-nested-map-with-int-keys",
    "body": "type IntKeyMap map[int]interface{}\nfunc (m *IntKeyMap) UnmarshalJSON(data []byte) error {\n\traw := map[int]json.RawMessage{}\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn err\n\t}\n\tfor k, v := range raw {\n        // check if the value is a nested object\n\t\tif len(v) > 0 && v[0] == '{' && v[len(v)-1] == '}' {\n            // The following assumes that the nested JSON object's\n            // key strings represent integers, if that is not the\n            // case this block will fail.\n\t\t\tobj := IntKeyMap{}\n\t\t\tif err := json.Unmarshal([]byte(v), &obj); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*m)[k] = obj\n\t\t} else {\n\t\t\tvar i interface{}\n\t\t\tif err := json.Unmarshal([]byte(v), &i); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t(*m)[k] = i\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69493131/mysql-connection-refused-in-docker-compose",
    "body": "version: '3'\nservices:\n  app:\n    build: ./\n    volumes:\n      - ./internal/app:/app\n      - ./logs:/var/log/parser\n    depends_on:\n      - mysqldb\n    links:\n      - db\n  db:\n    image: mysql:8\n    container_name: mysqldb\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - ./docker/mysql/conf:/etc/mysql/conf/conf.d\n      - ./docker/mysql/logs/:/var/log/mysql\n      - ./docker/mysql/init:/docker-entrypoint-initdb.d\n      - ./docker/mysql/data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: pass\n      MYSQL_DATABASE: data\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass"
  },
  {
    "url": "https://stackoverflow.com/questions/68686006/set-particular-environment-variables-during-execution-of-a-test-suite",
    "body": "\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\t// NOTE: do NOT call t.Parallel in this subtest or its parent,\n\t\t\t// or the environment WILL be corrupted.\n\t\t\t//\n\t\t\t// (However, *subtests of* t may be run in parallel.)\n\t\t\tprevEnv := os.Environ()\n\t\t\tfor _, entry := range prevEnv {\n\t\t\t\tparts := strings.SplitN(entry, \"=\", 2)\n\t\t\t\tos.Unsetenv(parts[0])\n\t\t\t}\n\t\t\tfor k, v := range tc.envVars {\n\t\t\t\tos.Setenv(k, v)\n\t\t\t}\n\t\t\tt.Cleanup(func() {\n\t\t\t\tfor k := range tc.envVars {\n\t\t\t\t\tos.Unsetenv(k)\n\t\t\t\t}\n\t\t\t\tfor _, entry := range prevEnv {\n\t\t\t\t\tparts := strings.SplitN(entry, \"=\", 2)\n\t\t\t\t\tos.Setenv(parts[0], parts[1])\n\t\t\t\t}\n\t\t\t})\n\t\t\t…\n\t\t})\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/68064306/how-to-delete-a-non-empty-s3-bucket-using-aws-sdk-for-go-v2",
    "body": "func main() {\n\tcfg, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(\"us-east-1\"))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load config: %v\", err)\n\t}\n\tbucket := aws.String(\"your-bucket-name\")\n\tclient := s3.NewFromConfig(cfg)\n\tdeleteObject := func(bucket, key, versionId *string) {\n\t\tlog.Printf(\"Object: %s/%s\\n\", *key, aws.ToString(versionId))\n\t\t_, err := client.DeleteObject(context.TODO(), &s3.DeleteObjectInput{\n\t\t\tBucket:    bucket,\n\t\t\tKey:       key,\n\t\t\tVersionId: versionId,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to delete object: %v\", err)\n\t\t}\n\t}\n\tin := &s3.ListObjectsV2Input{Bucket: bucket}\n\tfor {\n\t\tout, err := client.ListObjectsV2(context.TODO(), in)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to list objects: %v\", err)\n\t\t}\n\t\tfor _, item := range out.Contents {\n\t\t\tdeleteObject(bucket, item.Key, nil)\n\t\t}\n\t\tif out.IsTruncated {\n\t\t\tin.ContinuationToken = out.ContinuationToken\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tinVer := &s3.ListObjectVersionsInput{Bucket: bucket}\n\tfor {\n\t\tout, err := client.ListObjectVersions(context.TODO(), inVer)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to list version objects: %v\", err)\n\t\t}\n\t\tfor _, item := range out.DeleteMarkers {\n\t\t\tdeleteObject(bucket, item.Key, item.VersionId)\n\t\t}\n\t\tfor _, item := range out.Versions {\n\t\t\tdeleteObject(bucket, item.Key, item.VersionId)\n\t\t}\n\t\tif out.IsTruncated {\n\t\t\tinVer.VersionIdMarker = out.NextVersionIdMarker\n\t\t\tinVer.KeyMarker = out.NextKeyMarker\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\t_, err = client.DeleteBucket(context.TODO(), &s3.DeleteBucketInput{Bucket: bucket})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to delete bucket: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66524733/implement-rpc-client-node-js-with-server-written",
    "body": "package main\nimport (\n        \"log\"\n        \"net\"\n        \"net/rpc\"\n        \"net/rpc/jsonrpc\"\n)\ntype HelloService struct{}\nfunc (p *HelloService) Hello(request string, reply *string) error {\n        *reply = \"Hello \" + request\n        return nil\n}\nfunc main() {\n        rpc.RegisterName(\"HelloService\", new(HelloService))\n        listener, err := net.Listen(\"tcp\", \":1234\")\n        if err != nil {\n                log.Fatal(\"ListenTCP error: \", err)\n        }\n        for {\n                conn, err := listener.Accept()\n                if err != nil {\n                        log.Fatal(\"Accept error: \", err)\n                }\n                log.Printf(\"New connection: %+v\\n\", conn.RemoteAddr())\n                go jsonrpc.ServeConn(conn)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65799886/unable-to-read-from-unix-socket-using-net-conn-read",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"time\"\n)\nfunc main() {\n\tbuf := make([]byte, 0, 4096)\n\tfmt.Println(buf)\n\tmain03()\n}\nfunc main01() {\n\t// nc -vlU /tmp/sock0120\n\tctl, err := net.Dial(\"unix\", \"/tmp/sock0120\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treader := bufio.NewReader(ctl)\n\tfor {\n\t\ttime.Sleep(time.Second)\n\t\tctl.Write([]byte(\"test write\\n\"))\n\t\tmsg, err := reader.ReadString('\\n')\n\t\tfmt.Printf(\"Len:%v, Data:%v, err:%v\\n\", len(msg), msg, err)\n\t}\n}\nfunc main02() {\n\t// nc -vlU /tmp/sock0120\n\tbuf := make([]byte, 4)\n\tctl, err := net.Dial(\"unix\", \"/tmp/sock0120\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\treader := bufio.NewReader(ctl)\n\tfor {\n\t\ttime.Sleep(time.Second)\n\t\tctl.Write([]byte(\"test write\\n\"))\n\t\tn, err := io.ReadFull(reader, buf)\n\t\tfmt.Printf(\"Len:%v, Data:%v, err:%v\\n\", n, buf, err)\n\t}\n}\nfunc main03() {\n\t// nc -vlU /tmp/sock0120\n\tbuf := make([]byte, 4)\n\tctl, err := net.Dial(\"unix\", \"/tmp/sock0120\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfor {\n\t\ttime.Sleep(time.Second)\n\t\tctl.Write([]byte(\"test write\\n\"))\n\t\tn, err := ctl.Read(buf)\n\t\tfmt.Printf(\"Len:%v, Data:%v, err:%v\\n\", n, buf, err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63866495/creating-a-rsa-private-key-with-triple-des-encryption",
    "body": "package main\nimport (\n  \"crypto/rand\"\n  \"crypto/rsa\"\n  \"crypto/x509\"\n  \"encoding/pem\"\n  \"io/ioutil\"\n)\nfunc main() {\n  // Generate a 2048 bit RSA key.\n  key, err := rsa.GenerateKey(rand.Reader, 2048)\n  if err != nil {\n    panic(err)\n  }\n  // Marshal it into DER-encoded ASN.1 format.\n  raw := x509.MarshalPKCS1PrivateKey(key)\n  // Encrypt using 3DES and password \"mypassword\".\n  block, err := x509.EncryptPEMBlock(rand.Reader, \"RSA PRIVATE KEY\", raw, []byte(\"mypassword\"), x509.PEMCipher3DES)\n  if err != nil {\n    panic(err)\n  }\n  // Encode the block into PEM.\n  encoded := pem.EncodeToMemory(block)\n  // Write it out.\n  err = ioutil.WriteFile(\"myfile.key\", encoded, 0400)\n  if err != nil {\n    panic(err)\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61894840/gin-golang-gin-gonic-does-not-parse-time-time-properly-for-unix-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"github.com/gin-gonic/gin\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\ntype myTime time.Time\nfunc (mt *myTime) UnmarshalJSON(bs []byte) error {\n\tvar timestamp int64\n\terr := json.Unmarshal(bs, &timestamp)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*mt = myTime(time.Unix(timestamp/1000, timestamp%1000*1e6))\n\treturn nil\n}\nfunc (mt myTime) MarshalJSON() ([]byte, error) {\n\ttimestamp := time.Time(mt).UnixNano() / 1e6\n\tlog.Println(time.Time(mt).UnixNano())\n\treturn json.Marshal(timestamp)\n}\ntype Timestamp struct {\n\tOneDay     myTime    `json:\"oneDay\" form:\"oneDay\"`\n\tAnotherDay time.Time `json:\"anotherDay\" form:\"anotherDay\" time_format:\"unix\"`\n}\nfunc parseTime(c *gin.Context) {\n\tvar example Timestamp\n\tif err := c.Bind(&example); err != nil {\n\t\tlog.Printf(\"bind timestamp error: %s\", err)\n\t}\n\tc.JSON(http.StatusOK, gin.H{\"data\": example})\n}\nfunc main() {\n\tr := gin.Default()\n\tr.POST(\"/time\", parseTime)\n\tr.Run(\"0.0.0.0:8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61289889/build-fails-when-importing-external-package-with-golang-and-docker",
    "body": "FROM golang:alpine as build\n# The default location is /go/src\nWORKDIR /go/src/app\nENV GOOS=linux \\\n    GOARCH=amd64\n# We simply copy everything to /go/src/app\nCOPY . .\n# Add the required build libraries\nRUN apk update && apk add gcc librdkafka-dev zstd-libs libsasl lz4-dev libc-dev musl-dev\n# Run the build\nRUN go build -o main\nFROM alpine\n# We use dockerize to make sure the kafka sever is up and running before the command starts.\nENV DOCKERIZE_VERSION v0.6.1\nENV KAFKA kafka\n# Add dockerize\nRUN apk --no-cache upgrade && apk --no-cache --virtual .get add curl \\\n && curl -L -O https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && apk del .get \\\n # Add the runtime dependency.\n && apk add --no-cache librdkafka\n# Fetch the binary\nCOPY --from=build /go/src/app/main /\n# Wait for kafka to come up, only then start /main\nENTRYPOINT [\"sh\",\"-c\",\"/usr/local/bin/dockerize -wait tcp://${KAFKA}:9092 /main kafka test\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/61289889/build-fails-when-importing-external-package-with-golang-and-docker",
    "body": "version: \"3.7\"\nservices:\n  zookeeper:\n    image: 'bitnami/zookeeper:3'\n    ports:\n      - '2181:2181'\n    volumes:\n      - 'zookeeper_data:/bitnami'\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes\n  kafka:\n    image: 'bitnami/kafka:2'\n    ports:\n      - '9092:9092'\n    volumes:\n      - 'kafka_data:/bitnami'\n    environment:\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n      - ALLOW_PLAINTEXT_LISTENER=yes\n    depends_on:\n      - zookeeper\n  server:\n    image: fals/kafka-main\n    build: .\n    command: \"kafka test\"\nvolumes:\n  zookeeper_data:\n  kafka_data:"
  },
  {
    "url": "https://stackoverflow.com/questions/61028110/with-golang-how-can-i-generate-a-rsa-certificates-then-export-the-private-key-to",
    "body": "func main() {\n    keyBytes, err := rsa.GenerateKey(rand.Reader, 1024)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := keyBytes.Validate(); err != nil {\n\t\tpanic(err)\n\t}\n\ttemplate := &x509.Certificate{\n\t\tSerialNumber: big.NewInt(1),\n\t\tSubject: pkix.Name{\n\t\t\tCountry:            []string{\"EN\"},\n\t\t\tOrganization:       []string{\"org\"},\n\t\t\tOrganizationalUnit: []string{\"org\"},\n\t\t\tLocality:           []string{\"city\"},\n\t\t\tProvince:           []string{\"province\"},\n\t\t\tCommonName:         \"name\",\n\t\t},\n\t}\n\tderBytes, err := x509.CreateCertificate(rand.Reader, template, template, &keyBytes.PublicKey, keyBytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcert, err := x509.ParseCertificate(derBytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpfxBytes, err := pkcs12.Encode(rand.Reader, keyBytes, cert, []*x509.Certificate{}, pkcs12.DefaultPassword)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    // see if pfxBytes valid\n\t_, _, _, err = pkcs12.DecodeChain(pfxBytes, pkcs12.DefaultPassword)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    if err := ioutil.WriteFile(\n\t\t\"/path/to/pri.pfx\",\n\t\tpfxBytes,\n\t\tos.ModePerm,\n\t); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59117025/how-to-read-data-from-telnet-session",
    "body": "// Thin function reads from Telnet session. \"expect\" is a string I use as signal to stop reading\nfunc ReaderTelnet(conn *telnet.Conn, expect string) (out string) {\n\tvar buffer [1]byte\n\trecvData := buffer[:]\n\tvar n int\n\tvar err error\n\tfor {\n\t\tn, err = conn.Read(recvData)\n\t\tfmt.Println(\"Bytes: \", n, \"Data: \", recvData, string(recvData))\n\t\tif n <= 0 || err != nil || strings.Contains(out, expect) {\n\t\t\tbreak\n\t\t} else {\n\t\t\tout += string(recvData)\n\t\t}\n\t}\n\treturn out\n}\n//convert a command to bytes, and send to Telnet connection followed by '\\r\\n'\nfunc SenderTelnet(conn *telnet.Conn, command string) {\n\tvar commandBuffer []byte\n\tfor _, char := range command {\n\t\tcommandBuffer = append(commandBuffer, byte(char))\n\t}\n\tvar crlfBuffer [2]byte = [2]byte{'\\r', '\\n'}\n\tcrlf := crlfBuffer[:]\n\tfmt.Println(commandBuffer)\n\tconn.Write(commandBuffer)\n\tconn.Write(crlf)\n}\nfunc main() {\n\tconn, err := telnet.DialTo(\"10.10.10.2:23\")\n\tif nil != err {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Print(ReaderTelnet(conn, \"Login\"))\n\tSenderTelnet(conn, \"root\")\n\tfmt.Print(ReaderTelnet(conn, \"Password\"))\n\tSenderTelnet(conn, \"root\")\n\tfmt.Print(ReaderTelnet(conn, \">\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58255555/why-this-golang-code-could-leak-value-of-variable-which-is-in-memory",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"text/template\"\n)\nfunc main() {\n\tbuf := &bytes.Buffer{}\n\tmy := &myWriter{\"You\", buf}\n\ttemplate.Must(template.New(\"my\").Parse(\"Hi{{.Name}}Bye.\")).Execute(my, my)\n\tfmt.Printf(\"<<%q>>\\n\", buf.String())\n}\nfunc (m *myWriter) Write(p []byte) (n int, err error) {\n\tfmt.Printf(\"len=%v cap=%v\\t%v %v\\n\", len(p), cap(p), string(p), p[:cap(p)])\n\tno++\n\tfmt.Println(\"gen:\", no, gen())\n\tm.Writer.Write(p)\n\t// m.Writer.Write(p[:8])\n\treturn 8, nil\n}\ntype myWriter struct {\n\tName string\n\tio.Writer\n}\nconst genLen = 8\nfunc gen() string {\n\tb := [genLen]byte{}\n\tfor i := range b {\n\t\tb[i] = no\n\t}\n\treturn string(b[:])\n}\nvar no = byte(49) //'1'"
  },
  {
    "url": "https://stackoverflow.com/questions/58255555/why-this-golang-code-could-leak-value-of-variable-which-is-in-memory",
    "body": "len=2 cap=8\tHi [72 105 0 0 0 0 0 0]\ngen: 50 2222222222222222222222222222222222222222222222222222222222222222\nlen=3 cap=128\tYou [89 111 117 58 32 53 48 32 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\ngen: 51 3333333333333333333333333333333333333333333333333333333333333333\nlen=4 cap=8\tBye. [66 121 101 46 0 0 0 0]\ngen: 52 4444444444444444444444444444444444444444444444444444444444444444\n<<\"HiYouBye.\">>"
  },
  {
    "url": "https://stackoverflow.com/questions/42500973/compiling-go-library-without-gco-to-run-on-alpine-error-in-libczmq",
    "body": "# stage 1: build the binary\n# we are using alpine Linux with the latest version of golang\nFROM golang:1.13-alpine as golang\n# first install some dependencies\n# (we are using the static versions for each for them as we want these libraries included statically, not dynamically!)\n# czmq requires libzmq which in turn requires libsodium\n# on alpine Linux we also need to install some specific tools to build C and C++ programs\n# libsodium also requires libuuid, which is included in util-linux-dev\nRUN apk add --no-cache libzmq-static czmq-dev libsodium-static build-base util-linux-dev\n# now we do the magic command mentioned here\n# https://stackoverflow.com/questions/34729748/installed-go-binary-not-found-in-path-on-alpine-linux-docker?noredirect=1&lq=1\n# this fools the C compiler into thinking we have glibc installed while we are actually using musl\n# since we are compiling statically, it makes sense to use musl as it is smaller\n# (and it uses the more permissive MIT license if you want to distribute your binary in some form, but check your other libraries before!)\nRUN mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2\n# create your project directory for the Go project\nWORKDIR /go/src/github.com/<username>/<projectname>/\n# copy in all your Go files, assuming these are in the same directory as your Dockerfile\nCOPY . .\n# here is the first hack: we need to tell CGO to use g++ instead of gcc or else it will struggle with libzmq, which is written in C++\n# creating and empty C++ file actually works for this\nRUN touch ./dummy.cc\n# now run go install (go build could also work here but your binary would end up in a different directory)\n# the -ldflags will be passed along the CGO toolchain\n# -extldflags is especially important here, it has two important flags that we need:\n# -static tells the compiler to use static linking, which does the actual magic of putting everything into one binary\n# -luuid is needed to correctly find the uuid library that czmq uses\nRUN go install -a -ldflags '-linkmode external -w -s -extldflags \"-static -luuid\" ' .\n# stage 2: here is your actual image that will later run on your Docker host\n# you can also use alpine here if you so choose\nFROM scratch\n# now we just copy over the completed binary from the old builder image\nCOPY --from=golang /go/bin/<projectname> bin\n# and we start our program\nENTRYPOINT [\"./bin\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/29111777/is-it-possible-to-partially-decode-and-update-json-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n)\ntype Color struct {\n\tSpace string\n\traw   map[string]json.RawMessage\n}\nfunc (c *Color) UnmarshalJSON(bytes []byte) error {\n\tif err := json.Unmarshal(bytes, &c.raw); err != nil {\n\t\treturn err\n\t}\n\tif space, ok := c.raw[\"Space\"]; ok {\n\t\tif err := json.Unmarshal(space, &c.Space); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\nfunc (c *Color) MarshalJSON() ([]byte, error) {\n\tbytes, err := json.Marshal(c.Space)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tc.raw[\"Space\"] = json.RawMessage(bytes)\n\treturn json.Marshal(c.raw)\n}\nfunc main() {\n\tbefore := []byte(`{\"Space\": \"YCbCr\", \"Point\": {\"Y\": 255, \"Cb\": 0, \"Cr\": -10}}`)\n\tlog.Println(\"before: \", string(before))\n\t// decode\n\tcolor := new(Color)\n\terr := json.Unmarshal(before, color)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// modify fields of interest\n\tcolor.Space = \"RGB\"\n\t// encode\n\tafter, err := json.Marshal(color)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"after:  \", string(after))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/18908698/go-signal-handling",
    "body": "package main\nimport (\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\n// We make sigHandler receive a channel on which we will report the value of var quit\nfunc sigHandler(q chan bool) {\n\tvar quit bool\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM, syscall.SIGHUP)\n\t// foreach signal received\n\tfor signal := range c {\n\t\t// logEvent(lognotice, sys, \"Signal received: \"+signal.String())\n\t\tswitch signal {\n\t\tcase syscall.SIGINT, syscall.SIGTERM:\n\t\t\tquit = true\n\t\tcase syscall.SIGHUP:\n\t\t\tquit = false\n\t\t}\n\t\tif quit {\n\t\t\tquit = false\n\t\t\t// closeDb()\n\t\t\t// logEvent(loginfo, sys, \"Terminating..\")\n\t\t\t// closeLog()\n\t\t\tos.Exit(0)\n\t\t}\n\t\t// report the value of quit via the channel\n\t\tq <- quit\n\t}\n}\nfunc main() {\n\t// init two channels, one for the signals, one for the main loop\n\tsig := make(chan bool)\n\tloop := make(chan error)\n\t// start the signal monitoring routine\n\tgo sigHandler(sig)\n\t// while vat quit is false, we keep going\n\tfor quit := false; !quit; {\n\t\t// we start the main loop code in a goroutine\n\t\tgo func() {\n\t\t\t// Main loop code here\n\t\t\t// we can report the error via the chan (here, nil)\n\t\t\tloop <- nil\n\t\t}()\n\t\t// We block until either a signal is received or the main code finished\n\t\tselect {\n\t\t// if signal, we affect quit and continue with the loop\n\t\tcase quit = <-sig:\n\t\t// if no signal, we simply continue with the loop\n\t\tcase <-loop:\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79439248/parse-xml-custom-properties-using-golang",
    "body": "    package main\n\n    import (\n    \t\"encoding/xml\"\n    \t\"fmt\"\n    \t\"os\"\n    )\n\n    type Project struct {\n    \tXMLName      xml.Name     `xml:\"project\"`\n    \tModelVersion string       `xml:\"modelVersion\"`\n    \tGroupID      string       `xml:\"groupId\"`\n    \tArtifactID   string       `xml:\"artifactId\"`\n    \tVersion      string       `xml:\"version\"`\n    \tParent       Parent       `xml:\"parent\"`\n    \tProperties   Properties   `xml:\"properties\"`\n    \tDependencies Dependencies `xml:\"dependencies\"`\n    }\n\n    type Parent struct {\n    \tGroupID    string `xml:\"groupId\"`\n    \tArtifactID string `xml:\"artifactId\"`\n    \tVersion    string `xml:\"version\"`\n    }\n\n    type Properties struct {\n    \tJMHVersion        string `xml:\"jmh.version\"`\n    \tSomeOtherProperty string `xml:\"some.other.property\"`\n    }\n\n    type Dependencies struct {\n    \tDependency []Dependency `xml:\"dependency\"`\n    }\n\n    type Dependency struct {\n    \tGroupID    string `xml:\"groupId\"`\n    \tArtifactID string `xml:\"artifactId\"`\n    \tVersion    string `xml:\"version\"`\n    }\n\n    func main() {\n    \t// Read the XML file\n    \txmlFile, err := os.ReadFile(\"pom.xml\")\n    \tif err != nil {\n    \t\tfmt.Println(\"Error reading file:\", err)\n    \t\treturn\n    \t}\n\n    \t// Unmarshal the XML into the Project struct\n    \tvar project Project\n    \terr = xml.Unmarshal(xmlFile, &project)\n    \tif err != nil {\n    \t\tfmt.Println(\"Error unmarshalling XML:\", err)\n    \t\treturn\n    \t}\n\n    \t// Print the parsed data\n    \tfmt.Printf(\"Project: %+v\\n\", project)\n    \tfmt.Printf(\"Parent: %+v\\n\", project.Parent)\n    \tfmt.Printf(\"Properties: %+v\\n\", project.Properties)\n    \tfor _, dep := range project.Dependencies.Dependency {\n    \t\tfmt.Printf(\"Dependency: %+v\\n\", dep)\n    \t}\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/78641399/os-appending-ip-header-even-with-raw-sockets-and-ipproto-raw",
    "body": "func main() {\n\tfd, _ := syscall.Socket(syscall.AF_INET, syscall.SOCK_RAW, syscall.IPPROTO_RAW)\n\taddr := syscall.SockaddrInet4{\n\t\tAddr: [4]byte{127, 0, 0, 1},\n\t}\n\tipHeader := []byte{\n\t\t0x45,       // versionIHL\n\t\t0x00,       // tos\n\t\t0x00, 0x00, // len\n\t\t0x00, 0x00, // id\n\t\t0x00, 0x00, // ffo\n\t\t0x40,       // ttl\n\t\t0x01,       // protocol\n\t\t0x00, 0x00, // checksum\n\t\t0x00, 0x00, 0x00, 0x00, // src\n\t\t0x7f, 0x00, 0x00, 0x01, // dest\n\t}\n\tdata := []byte{0x08, 0x00, 0xf7, 0xff, 0x00, 0x00, 0x00, 0x00}\n\tif runtime.GOOS == \"darwin\" {\n\t\t// setting IP_HDRINCL socket option explicitly\n\t\t_ = syscall.SetsockoptInt(fd, syscall.IPPROTO_IP, syscall.IP_HDRINCL, 1)\n\t\t// Populating total length in host byte order\n\t\tbinary.LittleEndian.PutUint16(ipHeader[2:4], 28)\n\n\t\t// Filling the fields that are auto filled in linux systems but not on mac.\n\t\tcopy(ipHeader[12:16], []byte{127, 0, 0, 1})\n\t\tbinary.BigEndian.PutUint16(ipHeader[4:6], 11)\n\t\tbinary.BigEndian.PutUint16(ipHeader[10:12], calculateChecksum(ipHeader))\n\t}\n\tp := append(ipHeader, data...)\n\tfmt.Printf(\"Transmitting bytes:\\n% x\\n\", p)\n\t_ := syscall.Sendto(fd, p, 0, &addr)\n\tfmt.Printf(\"Sent %d bytes\\n\", len(p))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78464680/golang-readwritecloser-as-io-file",
    "body": "func socketpair() (*os.File, *os.File, error) {\n\tfds, err := syscall.Socketpair(syscall.AF_UNIX, syscall.SOCK_STREAM, 0)\n\tif err != nil {\n\t\treturn nil, nil, err\n\t}\n\t// Setnonblock may not be necessary if only using these to pass to\n\t// another process, but the runtime will handled it either way.\n\tif err := syscall.SetNonblock(int(fds[0]), true); err != nil {\n\t\treturn nil, nil, err\n\t}\n\tif err := syscall.SetNonblock(int(fds[1]), true); err != nil {\n\t\treturn nil, nil, err\n\t}\n\tf0 := os.NewFile(uintptr(fds[0]), \"socket-0\")\n\tf1 := os.NewFile(uintptr(fds[1]), \"socket-1\")\n\treturn f0, f1, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76300272/reusing-methods-in-go-which-operate-on-struct-values",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"reflect\"\n)\nfunc main() {\n\t{\n\t\tp := Parent[ListShipmentsQuery]{}\n\t\tp.child.ShipmentId = \"hi\"\n\t\tp.child.OrderId = \"hi\"\n\t\tfmt.Println(p.toQueryString())\n\t}\n\t{\n\t\tp := Parent[ListProductsQuery]{}\n\t\tp.child.Sku = \"hi\"\n\t\tp.child.Name = \"hi\"\n\t\tfmt.Println(p.toQueryString())\n\t}\n}\ntype Parent[C any] struct {\n\tchild C\n}\nfunc (p *Parent[C]) toQueryString() string {\n\tquery := url.Values{}\n\tvalues := reflect.ValueOf(p.child)\n\ttypes := values.Type()\n\tfor i := 0; i < values.NumField(); i++ {\n\t\tvalue := values.Field(i).Interface().(string)\n\t\tif value != \"\" {\n\t\t\tquery.Add(types.Field(i).Tag.Get(\"url\"), value)\n\t\t}\n\t}\n\treturn query.Encode()\n}\ntype ListShipmentsQuery struct {\n\tShipmentId string `url:\"shipment_id\"`\n\tOrderId    string `url:\"order_id\"`\n}\ntype ListProductsQuery struct {\n\tSku  string `url:\"sku\"`\n\tName string `url:\"name\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75935165/failed-to-access-subdomain-from-main-domain-no-access-control-allow-origin",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/http/httputil\"\n\t\"github.com/gin-contrib/cors\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n\tr.Use(cors.Default())\n\tapi := r.Group(\"/api\")\n\tv1 := api.Group(\"/v1\")\n\tv1.POST(\"users\", func(ctx *gin.Context) {\n\t\tbuf, err := httputil.DumpRequest(ctx.Request, true)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to dump request: %v\", err)\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"%s\", buf)\n\t})\n\terr := r.Run()\n\tif err != nil {\n\t\tlog.Printf(\"failed to run gateway: %v\", err)\n\t}\n\tr.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75935165/failed-to-access-subdomain-from-main-domain-no-access-control-allow-origin",
    "body": "$ curl 'http://localhost:8080/api/v1/users' \\\n  -X 'OPTIONS' \\\n  -H 'Accept: */*' \\\n  -H 'Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6' \\\n  -H 'Access-Control-Request-Headers: content-type' \\\n  -H 'Access-Control-Request-Method: POST' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Origin: http://127.0.0.1:5501' \\\n  -H 'Pragma: no-cache' \\\n  -H 'Referer: http://127.0.0.1:5501/' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: cross-site' \\\n  -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36' \\\n  --compressed -i\nHTTP/1.1 204 No Content\nAccess-Control-Allow-Headers: Origin,Content-Length,Content-Type\nAccess-Control-Allow-Methods: GET,POST,PUT,PATCH,DELETE,HEAD,OPTIONS\nAccess-Control-Allow-Origin: *\nAccess-Control-Max-Age: 43200\nDate: Wed, 05 Apr 2023 03:50:06 GMT"
  },
  {
    "url": "https://stackoverflow.com/questions/74391247/not-able-to-set-header-when-calling-test-function-with-grpc-setheader-or-grpc-se",
    "body": "type mockServerTransportStream struct {}\nfunc (m *mockServerTransportStream) Method() string {\n\treturn \"foo\"\n}\nfunc (m *mockServerTransportStream) SetHeader(md metadata.MD) error {\n\treturn nil\n}\nfunc (m *mockServerTransportStream) SendHeader(md metadata.MD) error {\n\treturn nil\n}\nfunc (m *mockServerTransportStream) SetTrailer(md metadata.MD) error {\n\treturn nil\n}\nfunc TestDummy() {\n ctx := grpc.NewContextWithServerTransportStream(&mockServerTransportStream{})\n err := Dummy(ctx, &service.Request{})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74004588/how-to-add-a-new-entry-to-yaml-file-via-code",
    "body": "type YamlObject map[string]any\nfunc main() {\n    // Parse the initial document\n\tdoc := make(YamlObject)\n\tyaml.Unmarshal([]byte(document), &doc)\n    // Parse the additional nodes\n\taddon := make(YamlObject)\n\tyaml.Unmarshal([]byte(extra), &addon)\n    // Find the node by the path\n\tnode := findChild(doc, \"spec\", \"mec\", \"customConfig\", \"sif\")\n\tif node == nil {\n\t\tpanic(\"Must not happen\")\n\t}\n    // Add the keys from the additional document\n    // under the specified path\n\tfor key, val := range addon {\n\t\t(*node)[key] = val\n\t}\n    // Output the modified document\n\toutDoc, _ := yaml.Marshal(doc)\n\tprintln(string(outDoc))\n}\nfunc findChild(obj YamlObject, path ...string) *YamlObject {\n\tif len(path) == 0 {\n\t\treturn &obj\n\t}\n\tkey := path[0]\n\tchild, ok := obj[key]\n\tif !ok {\n\t\treturn nil\n\t}\n\tobj, ok = child.(YamlObject)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn findChild(obj, path[1:]...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74004588/how-to-add-a-new-entry-to-yaml-file-via-code",
    "body": "spec:\n    mec:\n        customConfig:\n            sif:\n                prom_exporter:\n                    type: prometheus_exporter\n                snk_dev:\n                    buffer:\n                        type: memory\n                    compression: gzip\n                    dken: ${SN}\n                    encoding:\n                        codec: json\n                    ep: ${NT}\n                    index: us\n                    inputs:\n                        - tesslt\n                    type: sk_hc_logs\n                snk_prod:\n                    buffer:\n                        type: memory\n                    compression: gzip\n                    dken: ${SN}\n                    encoding:\n                        codec: json\n                    ep: ${NT}\n                    index: us\n                    inputs:\n                        - tesslt\n                    type: sk_hc_logs\n        resources:\n            requests:\n                cpu: 100m\n                memory: 1Gi\n        tolerations:\n            - effect: NoSchedule\n              key: WorkGroup\n              operator: Equal\n              value: goxy"
  },
  {
    "url": "https://stackoverflow.com/questions/73947665/accessing-http-request-context-after-handler",
    "body": "type ctxKey uint8\nconst userKey ctxKey = 0\ntype user struct{ name string }\nfunc logMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tu := new(user)\n\t\tr = r.WithContext(context.WithValue(r.Context(), userKey, u))\n\t\tdefer func(start time.Time) {\n\t\t\tif u.name != \"\" {\n\t\t\t\tfmt.Printf(\"user %s has accessed %s, took %s\\n\", u.name, r.URL.Path, time.Since(start))\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"annonyous has accessed %s, took %s\\n\", r.URL.Path, time.Since(start))\n\t\t\t}\n\t\t}(time.Now())\n\t\tnext.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73691755/launch-applications-in-windows-using-appid-and-get-the-pid",
    "body": "// Make PowerShell not only launch Calculator, but also\n// determine and output its PID, as described in the next section.\nout, _ :=\n        exec.Command(\n          `powershell.exe`,\n          `-NoProfile`,\n          `-Command`,\n          `Start-Process -ErrorAction Stop calculator: ; (Get-Process Calculator | Where-Object SessionId -eq (Get-Process -ID $PID).SessionId).ID`,\n        ).Output()\n// Parse stdout output, which contains the PID, into an int\nvar pid int\nfmt.Sscanf(string(out), \"%d\\n\", &pid)"
  },
  {
    "url": "https://stackoverflow.com/questions/73652833/how-to-start-a-clickhouse-container-with-testcontainers",
    "body": "const (\n\t\tdbName       = \"crazy\"\n\t\tfakeUser     = \"jondoe\"\n\t\tfakePassword = \"bond girl\"\n\t)\n\tctx := context.Background()\n\treq := ContainerRequest{\n\t\tImage: \"clickhouse/clickhouse-server\",\n\t\tEnv: map[string]string{\n\t\t\t\"CLICKHOUSE_DB\":       dbName,\n\t\t\t\"CLICKHOUSE_USER\":     fakeUser,\n\t\t\t\"CLICKHOUSE_PASSWORD\": fakePassword,\n\t\t},\n\t\tExposedPorts: []string{\n\t\t\t\"8123/tcp\",\n\t\t\t\"9000/tcp\",\n\t\t},\n\t\tWaitingFor: wait.ForAll(\n\t\t\twait.ForHTTP(\"/ping\").WithPort(\"8123/tcp\").WithStatusCodeMatcher(\n\t\t\t\tfunc(status int) bool {\n\t\t\t\t\treturn status == http.StatusOK\n\t\t\t\t},\n\t\t\t),\n\t\t),\n\t}\n\tclickhouseContainer, err := GenericContainer(ctx, GenericContainerRequest{\n\t\tContainerRequest: req,\n\t\tStarted:          true,\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer clickhouseContainer.Terminate(ctx)"
  },
  {
    "url": "https://stackoverflow.com/questions/73606458/how-to-scan-jsonb-objects-from-postgresql-to-golang-structs",
    "body": "// I haven't tested the following but I'd assume it ought to work,\n// if not, then perhaps maybe small tweaks are needed here and there...\ntype advanceAndRoomPaymentList []advanceAndRoomPayment\nfunc (ls *advanceAndRoomPaymentList) Scan(src any) error {\n    return pq.GenericArray{ls}.Scan(src)\n}\n// implement Scanner for the element type of the slice\nfunc (a *advanceAndRoomPayment) Scan(src any) error {\n    var data []byte\n    switch v := src.(type) {\n    case string:\n        data = []byte(v)\n    case []byte:\n        data = v\n    }\n    return json.Unmarshal(data, a)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73439068/limit-max-number-of-requests-per-hour-with-didip-tollbooth",
    "body": "type ConcurrentLimiter struct {\n    max int\n    current int\n    mut sync.Mutex\n}\nfunc NewConcurrentLimiter(limit int) *ConcurrentLimiter {\n    return &ConcurrentLimiter {\n        max: limit,\n        mut: new(sync.Mutex),\n    }\n}\nfunc (limiter *ConcurrentLimiter) LimitConcurrentRequests(lmt *limiter.Limiter,\n    next http.Handler) http.Handler {\n    middle := func(w http.ResponseWriter, r *http.Request) {\n        limiter.mut.Lock()\n        maxHit := limiter.current == limiter.max\n        if maxHit {\n            limiter.mut.Unlock()\n            httpError := // Insert your HTTP error here\n            return\n        }\n        limiter.current += 1\n        limiter.mut.Unlock()\n        defer func() {\n            limiter.mut.Lock()\n            limiter.current -= 1\n            limiter.mut.Unlock()\n        }()\n        // There's no rate-limit error, serve the next handler.\n\t\tnext.ServeHTTP(w, r)\n    }\n    return tollbooth.LimitHandler(lmt, http.HandlerFunc(middle))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73162374/how-to-exit-outer-loop-from-within-go-routine",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\ntype Task struct {\n\tID        int    `json:\"id\"`\n\tUserID    int    `json:\"user_id\"`\n\tTitle     string `json:\"title\"`\n\tCompleted bool   `json:\"completed\"`\n}\nfunc main() {\n\tvar t Task\n\twg := &sync.WaitGroup{}\n\tstop := make(chan struct{})\n\tsem := make(chan struct{}, 10)\n\tresults := make(chan Task, 1)\n\tworker := func(i int) {\n\t\tdefer wg.Done()\n\t\tdefer func() { <-sem }()\n\t\tres, err := http.Get(fmt.Sprintf(\"https://jsonplaceholder.typicode.com/todos/%d\", i))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif err := json.NewDecoder(res.Body).Decode(&t); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif i == 20 {\n\t\t\tclose(stop)\n\t\t}\n\t\tresults <- t\n\t}\n\ti := 0\n\tgo func() {\n\t\tfor v := range results {\n\t\t\tfmt.Println(v)\n\t\t}\n\t}()\nouter:\n\tfor {\n\t\tselect {\n\t\tcase <-stop:\n\t\t\tfmt.Println(\"I came here\")\n\t\t\tclose(sem)\n\t\t\tbreak outer\n\t\tdefault:\n\t\t\twg.Add(1)\n\t\t\tsem <- struct{}{}\n\t\t\tgo worker(i)\n\t\t\ti++\n\t\t}\n\t}\n\twg.Wait()\n\tfmt.Println(\"I am done\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70955985/cant-generate-scalar-json-in-gqlgen",
    "body": "type JSON map[string]interface{}\nfunc MarshalJSON(b JSON) graphql.Marshaler {\n\treturn graphql.WriterFunc(func(w io.Writer) {\n\t\tbyteData, err := json.Marshal(b)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"FAIL WHILE MARSHAL JSON %v\\n\", string(byteData))\n\t\t}\n\t\t_, err = w.Write(byteData)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"FAIL WHILE WRITE DATA %v\\n\", string(byteData))\n\t\t}\n\t})\n}\nfunc UnmarshalJSON(v interface{}) (JSON, error) {\n\tbyteData, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn JSON{}, fmt.Errorf(\"FAIL WHILE MARSHAL SCHEME\")\n\t}\n\ttmp := make(map[string]interface{})\n\terr = json.Unmarshal(byteData, &tmp)\n\tif err != nil {\n\t\treturn JSON{}, fmt.Errorf(\"FAIL WHILE UNMARSHAL SCHEME\")\n\t}\n\treturn tmp, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70568992/unmarshal-json-when-only-half-of-the-key-is-known",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\ntype Entry struct {\n\tAnimalname string `json:\"animal_name\"`\n\tLocation   string\n}\nfunc main() {\n\tdata := []byte(`[{\"animal_name\": \"Goofy\", \"location\": \"Europe\"},  {\"person_name\": \"Gigo\", \"location\": \"Asia\"}]`)\n\t// json.Unmarshal will initialize it as a slice of maps: []map[string]string.\n    // Alternatively, you can set the type explicitly:\n    // var entries []map[string]string\n\tvar entries interface{}\n\terr := json.Unmarshal(data, &entries)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(entries)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70548299/how-to-convert-os-file-to-multipart-fileheader-in-go",
    "body": "func createMultipartFileHeader(filePath string) *multipart.FileHeader {\n    // open the file\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn nil\n\t}\n\tdefer file.Close()\n\t// create a buffer to hold the file in memory\n\tvar buff bytes.Buffer\n\tbuffWriter := io.Writer(&buff)\n\t// create a new form and create a new file field\n\tformWriter := multipart.NewWriter(buffWriter)\n\tformPart, err := formWriter.CreateFormFile(\"file\", filepath.Base(file.Name()))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn nil\n\t}\n\t// copy the content of the file to the form's file field\n\tif _, err := io.Copy(formPart, file); err != nil {\n\t\tlog.Fatal(err)\n\t\treturn nil\n\t}\n\t// close the form writer after the copying process is finished\n    // I don't use defer in here to avoid unexpected EOF error\n\tformWriter.Close()\n\t// transform the bytes buffer into a form reader\n\tbuffReader := bytes.NewReader(buff.Bytes())\n\tformReader := multipart.NewReader(buffReader, formWriter.Boundary())\n\t// read the form components with max stored memory of 1MB\n\tmultipartForm, err := formReader.ReadForm(1 << 20)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn nil\n\t}\n\t// return the multipart file header\n\tfiles, exists := multipartForm.File[\"file\"]\n\tif !exists || len(files) == 0 {\n\t\tlog.Fatal(\"multipart file not exists\")\n\t\treturn nil\n\t}\n\treturn files[0]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70536980/how-do-i-decode-zlib-stream-in-go",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"compress/zlib\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\totherzlib \"github.com/4kills/go-zlib\"\n)\nfunc main() {\n\tall()\n\tstream()\n\t// Alas it hangs :(\n\t// otherZlib()\n}\nfunc all() {\n\tfmt.Println(\"==== RUNNING DECOMPRESSION OF all.in\")\n\tfmt.Println(\"\")\n\tbuf, readErr := os.ReadFile(\"./chunks/all.in\")\n\tif readErr != nil {\n\t\tlog.Fatalf(\"readErr=%v\\n\", readErr)\n\t}\n\tfmt.Printf(\"Read bytes, n=%v\\n\", len(buf))\n\tbuffer := bytes.NewBuffer(buf)\n\tzlibReader, zlibErr := zlib.NewReader(buffer)\n\tif zlibErr != nil {\n\t\tlog.Fatalf(\"zlibErr=%v\\n\", zlibErr)\n\t}\n\tout := new(bytes.Buffer)\n\twritten, copyErr := io.Copy(out, zlibReader)\n\tif copyErr != nil {\n\t\tlog.Printf(\"copyErr=%v\\n\", copyErr)\n\t}\n\tfmt.Printf(\"Written bytes, n=%v, out:\\n%v\\n\", written, out.String())\n\tfmt.Println(\"\")\n}\nfunc stream() {\n\tfmt.Println(\"==== RUNNING DECOMPRESSION OF SEPARATE CHUNKS\")\n\tfmt.Println(\"\")\n\tpRead, pWrite := io.Pipe()\n\tgo func() {\n\t\tbuf, readErr := os.ReadFile(\"./chunks/0.in\")\n\t\tif readErr != nil {\n\t\t\tlog.Fatalf(\"readErr=%v\\n\", readErr)\n\t\t}\n\t\tfmt.Printf(\"Read 0 bytes, n=%v\\n\", len(buf))\n\t\twritten0, copy0Err := io.Copy(pWrite, bytes.NewBuffer(buf))\n\t\tif copy0Err != nil {\n\t\t\tlog.Printf(\"copy0Err=%v\\n\", copy0Err)\n\t\t}\n\t\tfmt.Printf(\"Written compressed bytes, n0=%v\", written0)\n\t\tbuf, readErr = os.ReadFile(\"./chunks/1.in\")\n\t\tif readErr != nil {\n\t\t\tlog.Fatalf(\"read1Err=%v\\n\", readErr)\n\t\t}\n\t\tfmt.Printf(\"Read 1 bytes, n=%v\\n\", len(buf))\n\t\twritten1, copy1Err := io.Copy(pWrite, bytes.NewBuffer(buf))\n\t\tif copy1Err != nil {\n\t\t\tlog.Printf(\"copy1Err=%v\\n\", copy1Err)\n\t\t}\n\t\tfmt.Printf(\"Written compressed bytes, n1=%v\", written1)\n\t\tpWrite.Close()\n\t}()\n\tzlibReader, zlibErr := zlib.NewReader(pRead)\n\tif zlibErr != nil {\n\t\tlog.Fatalf(\"zlibErr=%v\\n\", zlibErr)\n\t}\n\tout := new(bytes.Buffer)\n\twritten2, copy2Err := io.Copy(out, zlibReader)\n\tif copy2Err != nil {\n\t\tlog.Printf(\"copy2Err=%v\\n\", copy2Err)\n\t}\n\tfmt.Printf(\"Written decompressed bytes, n0=%v, out:\\n%v\\n\", written2, out.String())\n\tfmt.Println(\"\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70342902/how-to-implement-a-patch-with-database-sql",
    "body": "func patchSample(s Sample) {\n\tvar query strings.Builder\n\tparams := make([]interface{}, 0, 2)\n    // TODO Check if patch makes sense (e.g. id is non-zero, at least one patched value provided, etc.\n\tquery.WriteString(\"UPDATE sample SET\")\n\tif s.StringA != \"\" {\n\t\tquery.WriteString(\" stringA = ?\")\n\t\tparams = append(params, s.StringA)\n\t}\n\tif s.StringB != \"\" {\n\t\tquery.WriteString(\" stringB = ?\")\n\t\tparams = append(params, s.StringB)\n\t}\n\tquery.WriteString(\" WHERE id = ?\")\n\tparams = append(params, s.ID)\n\tfmt.Println(query.String(), params)\n\t//_, err := db.Exec(query.String(), params...)\n}\nfunc main() {\n\tpatchSample(Sample{1, \"Foo\", \"\"})\n\tpatchSample(Sample{2, \"\", \"Bar\"})\n\tpatchSample(Sample{3, \"Foo\", \"Bar\"})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70103171/http-read-on-closed-response-body-httptest-newserver",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n)\nvar Client = &http.Client{}\nfunc main() {\n\turl := \"https://httpbin.org/get\"\n\tstatus, data, err := GetData(url)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfmt.Println(status)\n\tfmt.Println(string(data))\n}\nfunc GetData(url string) (status string, body []byte, err error) {\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tresp, err := Client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err = io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\treturn resp.Status, body, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69813533/stricter-lint-of-golang-in-vscode",
    "body": "# https://staticcheck.io/docs/configuration\n# checks = [\"all\", \"-ST1000\", \"-ST1003\", \"-ST1016\", \"-ST1020\", \"-ST1021\", \"-ST1022\", \"-ST1023\"]\nchecks = [\"all\"]\ninitialisms = [\"ACL\", \"API\", \"ASCII\", \"CPU\", \"CSS\", \"DNS\",\n\t\"EOF\", \"GUID\", \"HTML\", \"HTTP\", \"HTTPS\", \"ID\",\n\t\"IP\", \"JSON\", \"QPS\", \"RAM\", \"RPC\", \"SLA\",\n\t\"SMTP\", \"SQL\", \"SSH\", \"TCP\", \"TLS\", \"TTL\",\n\t\"UDP\", \"UI\", \"GID\", \"UID\", \"UUID\", \"URI\",\n\t\"URL\", \"UTF8\", \"VM\", \"XML\", \"XMPP\", \"XSRF\",\n\t\"XSS\", \"SIP\", \"RTP\", \"AMQP\", \"DB\", \"TS\"]\ndot_import_whitelist = []\nhttp_status_code_whitelist = [\"200\", \"400\", \"404\", \"500\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/69188914/how-to-get-the-git-tags-for-a-particular-hash-in-go-using-go-git-package-to-get",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/go-git/go-git/v5\"\n\t\"github.com/go-git/go-git/v5/plumbing\"\n\t\"io\"\n\t\"log\"\n)\nfunc getTags(r *git.Repository) (map[plumbing.Hash]string, error) {\n\ttags := make(map[plumbing.Hash]string)\n\titer, err := r.Tags()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor {\n\t\tref, err := iter.Next()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil{\n\t\t\treturn nil, err\n\t\t}\n\t\ttags[ref.Hash()] = ref.Name().Short()\n\t}\n\treturn tags, nil\n}\nfunc main() {\n    appPath := \"\"\n\tr, err := git.PlainOpen(appPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\thashCommit, err := r.Head()\n\tif err != nil {\n\t\tlog.Fatal(\"head\", err)\n\t}\n\tfmt.Println(\"hash\", hashCommit)\n\ttags, err := getTags(r)\n\t// check if last commit is tagged\n\tif str, ok := tags[hashCommit.Hash()]; ok {\n\t\tfmt.Println(str)\n\t\treturn\n\t}\n\t// check if any commit is tagged\n\tcIter, err := r.Log(&git.LogOptions{From: hashCommit.Hash()})\n\tfor {\n\t\tcommit, err := cIter.Next()\n\t\tif errors.Is(err, io.EOF) {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil{\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif str, ok := tags[commit.Hash]; ok {\n\t\t\tfmt.Printf(\"%s-%s\\n\", str, hashCommit.Hash().String()[:8])\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Println(hashCommit.Hash().String()[:8])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68436921/setting-interface-as-an-attribute-having-many-implementations-using-gorm",
    "body": "type Table struct {\n\tID          int\n\tVehicleType string\n\tVehicle     Vehicle `gorm:\"-\"`\n\t// ...\n\tVehicleRaw []byte `gorm:\"column:vehicle\"`\n}\nfunc (t *Table) BeforeSave(tx *gorm.DB) (err error) {\n\traw, err := json.Marshal(t.Vehicle)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tt.VehicleRaw = raw\n\treturn nil\n}\nfunc (t *Table) AfterFind(tx *gorm.DB) (err error) {\n\tswitch t.VehicleType {\n\tcase \"CAR\":\n\t\tt.Vehicle = &Car{}\n    case \"BIKE\":\n        t.Vehicle = &Bike{}\n\t}\n\treturn json.Unmarshal(t.VehicleRaw, t.Vehicle)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67621557/how-do-you-marshal-a-line-break-in-go-yaml",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"text/template\"\n)\ntype Config struct {\n\tAuthor      string\n\tLicense     string\n\tWorkspace   string\n\tDescription string\n\tTarget      string\n}\nconst cfg_template = `\nconf:\n\tauthor: {{ .Author }}\n\tlicence: {{ .License }}\n\tworkspace: {{ .Workspace }}\n\tdescription: {{ .Description }}\n\t# you can even add comments to the template\n\ttarget: {{ .Target }}\n\t# other hardcoded config\n\tfoo: bar\n`\nfunc generate(config *Config) string {\n\tt, err := template.New(\"my yaml generator\").Parse(cfg_template)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tbuf := &bytes.Buffer{}\n\terr = t.Execute(buf, config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn buf.String()\n}\nfunc main() {\n\tc := Config{\n\t\tAuthor:      \"Germanio\",\n\t\tLicense:     \"MIT\",\n\t\tWorkspace:   \"/home/germanio/workspace\",\n\t\tDescription: \"a cool description\",\n\t\tTarget:      \"/home/germanio/target\",\n\t}\n\tyaml := generate(&c)\n\tfmt.Printf(\"yaml:\\n%s\", yaml)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66609418/how-to-ignore-one-router-for-basicauth-check-with-echo-framework",
    "body": "package main\nimport (\n\t\"crypto/subtle\"\n\t\"net/http\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\ntype Message struct {\n\tStatus string `json:\"status\"`\n}\nfunc main() {\n\te := echo.New()\n\tg := e.Group(\"/\")\n\tg.Use(middleware.BasicAuth(func(username, password string, c echo.Context) (bool, error) {\n\t\tif subtle.ConstantTimeCompare([]byte(username), []byte(\"username\")) == 1 &&\n\t\t\tsubtle.ConstantTimeCompare([]byte(password), []byte(\"password\")) == 1 {\n\t\t\treturn true, nil\n\t\t}\n\t\treturn false, nil\n\t}))\n\tg.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello, World!\")\n\t})\n\te.GET(\"/healthcheck\", func(c echo.Context) error {\n\t\tu := &Message{\n\t\t\tStatus: \"OK\",\n\t\t}\n\t\treturn c.JSON(http.StatusOK, u)\n\t})\n\te.Logger.Fatal(e.Start(\":8080\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66583504/how-to-deploy-an-echo-app-with-https-in-gke",
    "body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: testapp\nspec:\n  selector:\n    matchLabels:\n      app: testapp\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: testapp\n    spec:\n      containers:\n        - name: testapp\n          image: gcr.io/<ACCOUNT>/test\n          ports:\n            - containerPort: 8080\n          livenessProbe:\n            initialDelaySeconds: 10\n            periodSeconds: 10\n            exec:\n              command:\n                - \"true\"\n          readinessProbe:\n            initialDelaySeconds: 5\n            periodSeconds: 20\n            httpGet:\n              path: /health\n              port: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: testapp\nspec:\n  type: NodePort\n  ports:\n  - name: http\n    protocol: TCP\n    port: 80\n    targetPort: 8080\n  selector:\n    app: testapp\n---\napiVersion: \"extensions/v1beta1\"\nkind: \"Ingress\"\nmetadata:\n  name: \"lb-2\"\n  namespace: \"default\"\nspec:\n  backend:\n    serviceName: \"testapp\"\n    servicePort: 80"
  },
  {
    "url": "https://stackoverflow.com/questions/65341912/prometheus-collectandcount-always-returns-1",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/testutil\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestMetricT(t *testing.T) {\n\tassert := assert.New(t)\n\tvar A = prometheus.NewCounter(prometheus.CounterOpts{\n\t\tName: \"A\",\n\t\tHelp: \"Help\",\n\t})\n\tvar B = prometheus.NewCounter(prometheus.CounterOpts{\n\t\tName: \"B\",\n\t\tHelp: \"Help\",\n\t})\n\t// CounterVec is a Collector that bundles a set of Counters\n\tvar C = prometheus.NewCounterVec(prometheus.CounterOpts{\n\t\tName: \"C\",\n\t\tHelp: \"Help\",\n\t}, []string{\"subname\"},\n\t)\n\tprometheus.MustRegister(A, B, C)\n\t// After the registration, simple metrics like A and B can\n\t// be collected with the CollectAndCount function.\n\t// The CollectAndCount function seems to count the number of\n\t// metrics which were collected, not their value.\n\tassert.Equal(1, testutil.CollectAndCount(A))\n\tassert.Equal(1, testutil.CollectAndCount(B))\n\t// Different to the \"simple\" metrics like the counters A and B,\n\t// C is a CounterVec, a collection of counters that share\n\t// the same description.\n\t// After its registration, this collection contains 0 metrics,\n\t// until one is added to the collection.\n\tassert.Equal(0, testutil.CollectAndCount(C))\n\t// ToFloat64 returns the actual value of the metric. After the\n\t// registration, the value of the counters A and B is 0.\n\tassert.Equal(float64(0), testutil.ToFloat64(A))\n\tassert.Equal(float64(0), testutil.ToFloat64(B))\n\tA.Inc()\n\tB.Inc()\n\t// After we incremented A and B, CollectAndCount still\n\t// collects exactly one metric series for A, and one for B.\n\tassert.Equal(1, testutil.CollectAndCount(A))\n\tassert.Equal(1, testutil.CollectAndCount(B))\n\t// But the actual values of the counters were incremented by 1.\n\tassert.Equal(float64(1), testutil.ToFloat64(A))\n\tassert.Equal(float64(1), testutil.ToFloat64(B))\n\tA.Inc()\n\tB.Inc()\n\tassert.Equal(1, testutil.CollectAndCount(A))\n\tassert.Equal(1, testutil.CollectAndCount(B))\n\t// Now we incremented the counters again, and ToFloat64\n\t// returns 2, since we've incremented each counter 2 times.\n\tassert.Equal(float64(2), testutil.ToFloat64(A))\n\tassert.Equal(float64(2), testutil.ToFloat64(B))\n\tA.Inc()\n\tassert.Equal(1, testutil.CollectAndCount(A))\n\tassert.Equal(1, testutil.CollectAndCount(B))\n\t// Only incremented A\n\tassert.Equal(float64(3), testutil.ToFloat64(A))\n\tassert.Equal(float64(2), testutil.ToFloat64(B))\n\t// To increment C, we have to use a label. This\n\t// adds a metric with the label \"firstLabel\" to the\n\t// collection C.\n\tC.WithLabelValues(\"firstLabel\").Inc()\n\t// Now, CollectAndCount will collect the one metric which\n\t// is contained in the collection C.\n\tassert.Equal(1, testutil.CollectAndCount(C))\n\t// The ToFloat64 value of the metrics is as expected.\n\t// We have to again use a label here, since we cannot get a\n\t// single float value from a collection.\n\tassert.Equal(float64(1), testutil.ToFloat64(C.WithLabelValues(\"firstLabel\")))\n\t// Let's increase the \"firstLabel\" metric again and add another one.\n\tC.WithLabelValues(\"firstLabel\").Inc()\n\tC.WithLabelValues(\"secondLabel\").Inc()\n\t// CollectAndCount now collects 2 metrics from the collection C.\n\tassert.Equal(2, testutil.CollectAndCount(C))\n\tassert.Equal(float64(2), testutil.ToFloat64(C.WithLabelValues(\"firstLabel\")))\n\tassert.Equal(float64(1), testutil.ToFloat64(C.WithLabelValues(\"secondLabel\")))\n\tC.WithLabelValues(\"firstLabel\").Inc()\n\tC.WithLabelValues(\"secondLabel\").Inc()\n\tC.WithLabelValues(\"thirdLabel\").Inc()\n\tassert.Equal(3, testutil.CollectAndCount(C))\n\tassert.Equal(float64(3), testutil.ToFloat64(C.WithLabelValues(\"firstLabel\")))\n\tassert.Equal(float64(2), testutil.ToFloat64(C.WithLabelValues(\"secondLabel\")))\n\tassert.Equal(float64(1), testutil.ToFloat64(C.WithLabelValues(\"thirdLabel\")))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65024138/how-to-do-transaction-management",
    "body": "// Transaction represents both database connection pool and a single transaction/connection\ntype Transaction interface {\n\t// ExecContext from database/sql library\n\tExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)\n\t// PrepareContext from database/sql library\n\tPrepareContext(ctx context.Context, query string) (*sql.Stmt, error)\n\t// QueryContext from database/sql library\n\tQueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)\n\t// QueryRowContext from database/sql library\n\tQueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row\n\t// QueryxContext from sqlx library\n\tQueryxContext(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error)\n\t// QueryRowxContext from sqlx library\n\tQueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row\n\t// PreparexContext from sqlx library\n\tPreparexContext(ctx context.Context, query string) (*sqlx.Stmt, error)\n\t// GetContext from sqlx library\n\tGetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error\n\t// SelectContext from sqlx library\n\tSelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65024138/how-to-do-transaction-management",
    "body": "// A TxFn is a function that will be called with an initialized `Transaction` object\n// that can be used for executing statements and queries against a database.\ntype TxFn func(Transaction) error\n// WithTransaction creates a new transaction and handles rollback/commit based on the\n// error object returned by the `TxFn` or when it panics.\nfunc WithTransaction(ctx context.Context, db *sqlx.DB, fn TxFn) error {\n\tlogger := ctxval.GetLogger(ctx)\n\ttx, err := db.BeginTxx(ctx, &sql.TxOptions{\n\t\tIsolation: sql.LevelDefault,\n\t\tReadOnly:  false,\n\t})\n\tif err != nil {\n\t\tlogger.Error().Err(err).Msg(\"Cannot begin database transaction\")\n\t\treturn fmt.Errorf(\"cannot begin transaction: %w\", err)\n\t}\n\tdefer func() {\n\t\tif p := recover(); p != nil {\n\t\t\tlogger.Trace().Msg(\"Rolling database transaction back\")\n\t\t\terr := tx.Rollback()\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error().Err(err).Msg(\"Cannot rollback database transaction\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tpanic(p)\n\t\t} else if err != nil {\n\t\t\tlogger.Trace().Msg(\"Rolling database transaction back\")\n\t\t\terr := tx.Rollback()\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error().Err(err).Msg(\"Cannot rollback database transaction\")\n\t\t\t\treturn\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.Trace().Msg(\"Committing database transaction\")\n\t\t\terr = tx.Commit()\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error().Err(err).Msg(\"Cannot rollback database transaction\")\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\tlogger.Trace().Msg(\"Starting database transaction\")\n\terr = fn(tx)\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65024138/how-to-do-transaction-management",
    "body": "const (\n\tgetAccountById            = `SELECT * FROM accounts WHERE id = $1 LIMIT 1`\n)\ntype accountDaoSqlx struct {\n\tname               string\n\tgetById            *sqlx.Stmt\n}\nfunc getAccountDao(ctx context.Context, tx dao.Transaction) (dao.AccountDao, error) {\n\tvar err error\n\tdaoImpl := accountDaoSqlx{}\n\tdaoImpl.name = \"account\"\n\tdaoImpl.getById, err = tx.PreparexContext(ctx, getAccountById)\n\tif err != nil {\n\t\treturn nil, NewPrepareStatementError(ctx, &daoImpl, getAccountById, err)\n\t}\n\treturn &daoImpl, nil\n}\nfunc init() {\n\tdao.GetAccountDao = getAccountDao\n}\nfunc (dao *accountDaoSqlx) GetById(ctx context.Context, id uint64) (*models.Account, error) {\n\tquery := getAccountById\n\tstmt := dao.getById\n\tresult := &models.Account{}\n\terr := stmt.GetContext(ctx, result, id)\n\tif err != nil {\n\t\treturn nil, NewGetError(ctx, dao, query, err)\n\t}\n\treturn result, nil\n}\n// etc"
  },
  {
    "url": "https://stackoverflow.com/questions/65024138/how-to-do-transaction-management",
    "body": "// import sqlx implementation which calls init()\n_ \"internal/dao/sqlx\"\n\"internal/dao\"\n// etc\nfunc CreatePubkey(w http.ResponseWriter, r *http.Request) {\n\tpayload := &payloads.PubkeyRequest{}\n\tif err := render.Bind(r, payload); err != nil {\n\t\trenderError(w, r, payloads.NewInvalidRequestError(r.Context(), err))\n\t\treturn\n\t}\n    // example with transaction\n\terr := dao.WithTransaction(r.Context(), db.DB, func(tx dao.Transaction) error {\n\t\tpkDao, err := dao.GetPubkeyDao(r.Context(), tx)\n\t\tif err != nil {\n\t\t\treturn payloads.NewInitializeDAOError(r.Context(), \"pubkey DAO\", err)\n\t\t}\n\t\terr = pkDao.Create(r.Context(), payload.Pubkey)\n\t\tif err != nil {\n\t\t\treturn payloads.NewDAOError(r.Context(), \"create pubkey\", err)\n\t\t}\n        // ... cut ...\n\t\treturn nil\n\t})\n    // ignore errors etc\n}\nfunc ListPubkeys(w http.ResponseWriter, r *http.Request) {\n    // example without transaction\n\tpubkeyDao, err := dao.GetPubkeyDao(r.Context(), db.DB)\n\tif err != nil {\n\t\trenderError(w, r, payloads.NewInitializeDAOError(r.Context(), \"pubkey DAO\", err))\n\t\treturn\n\t}\n\tpubkeys, err := pubkeyDao.List(r.Context(), 100, 0)\n\tif err != nil {\n\t\trenderError(w, r, payloads.NewDAOError(r.Context(), \"list pubkeys\", err))\n\t\treturn\n\t}\n\tif err := render.RenderList(w, r, payloads.NewPubkeyListResponse(pubkeys)); err != nil {\n\t\trenderError(w, r, payloads.NewRenderError(r.Context(), \"list pubkeys\", err))\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64713878/custom-bson-marshal-and-unmarshal-using-mongo-driver",
    "body": "func (r *ReallyBig) MarshalBSON() ([]byte, error) {\n\ttype ReallyBigAlias ReallyBig\n\treallyBigRaw, err := getRaw(r.ReallyBigObj)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr.ReallyBigRaw = reallyBigRaw\n\treturn bson.Marshal((*ReallyBigAlias)(r))\n}\nfunc (r *ReallyBig) UnmarshalBSON(data []byte) error {\n\ttype ReallyBigAlias ReallyBig\n\terr := bson.Unmarshal(data, (*ReallyBigAlias)(r))\n\tif err != nil {\n\t\treturn err\n\t}\n\treallyBigProto, err := getProto(r.ReallyBigRaw)\n\tif err != nil {\n\t\treturn err\n\t}\n\tr.ReallyBigObj = reallyBigProto\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63073384/range-over-elements-of-a-protobuf-array-in-go",
    "body": "package msg\nimport (\n\t\"testing\"\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n)\nfunc TestVariable2(t *testing.T) {\n\tpb := &Msg{\n\t\tVariable2: []*Msg_SubMsg{\n\t\t\t{\n\t\t\t\tSubVariable1: \"string\",\n\t\t\t\tSubVariable2: 1,\n\t\t\t},\n\t\t},\n\t}\n\tpbreflect := pb.ProtoReflect()\n\tfd := pbreflect.Descriptor().Fields().ByJSONName(\"Variable2\")\n\tif !fd.IsList() {\n\t\tt.Fatal(\"expected a list\")\n\t}\n\tl := pbreflect.Get(fd).List()\n\tfor i := 0; i < l.Len(); i++ {\n\t\t// should test that we are now inspecting a message type\n\t\tli := l.Get(i).Message()\n\t\tli.Range(func(lifd protoreflect.FieldDescriptor, liv protoreflect.Value) bool {\n\t\t\tt.Logf(\"%v: %v\", lifd.Name(), liv)\n\t\t\treturn true\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59726608/editing-a-zip-file-in-memory",
    "body": "package main\nimport (\n\t\"archive/zip\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tengine := gin.Default()\n\tengine.GET(\"/log.zip\", func(c *gin.Context) {\n\t\tf, err := os.Open(\"./log.txt\")\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\t\tdefer f.Close()\n\t\tinfo, err := f.Stat()\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\t\tz := zip.NewWriter(c.Writer)\n\t\thead, err := zip.FileInfoHeader(info)\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\t\tdefer z.Close()\n\t\tw, err := z.CreateHeader(head)\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\t\t_, err = io.Copy(w, f)\n\t\tif err != nil {\n\t\t\tc.String(http.StatusInternalServerError, err.Error())\n\t\t\treturn\n\t\t}\n\t})\n\tengine.Run(\"127.0.0.1:8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59097215/how-can-i-get-pod-external-ip-from-go-code-at-runtime",
    "body": "import (\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/rest\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n)\n//\n// Pod infos\n//\nfunc GetPodDetails() (IP string, name string) {\n\t// creates the in-cluster config\n\tconfig, err := rest.InClusterConfig()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// creates the clientset\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tIP = \"\"\n\tfor {\n\t\tif IP != \"\" {\n\t\t\tbreak\n\t\t} else {\n\t\t\tlog.Printf(\"No IP for now.\\n\")\n\t\t}\n\t\tpods, err := clientset.CoreV1().Pods(\"default\").List(metav1.ListOptions{})\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t\tfor _, pod := range pods.Items {\n\t\t\tpod, _ := clientset.CoreV1().Pods(\"default\").Get(pod.Name, metav1.GetOptions{})\n\t\t\tif pod.Name == os.Getenv(\"HOSTNAME\") {\n\t\t\t\tIP = pod.Status.PodIP\n\t\t\t}\n\t\t}\n\t\tlog.Printf(\"Waits...\\n\")\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\tname = os.Getenv(\"HOSTNAME\")\n\tlog.Printf(\"Trying os.Getenv(\\\"HOSTNAME/IP\\\"): [%s][%s]\\n\", name, IP)\n\treturn IP, name\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57317626/golang-get-request-for-presigned-url-of-s3-object-with-sse-fails-with-403-error",
    "body": "getURL, err := target.NewSignedGetURL(context.TODO(), result.ObjectKey, time.Minute*5)\nif err != nil {\n\tt.Errorf(\"failed to sign url: %v\", err)\n\treturn\n}\nreq, _ := http.NewRequest(\"GET\", getURL, nil)\nreq.Header.Add(\"host\", req.Host)\nresp, err := http.DefaultClient.Do(req.WithContext(context.TODO()))\nif err != nil {\n\tt.Errorf(\"failed to request object from signed url: %v\", err)\n\treturn\n}\ndefer resp.Body.Close()\ndata, err := ioutil.ReadAll(resp.Body)\nif err != nil {\n\tt.Errorf(\"failed to read object stream from S3: %v\", err)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56385975/slice-modified-between-goroutines-with-mutex-not-showing-correct-synchronization",
    "body": "func NewScheduler(capacity int, handler func(interface {}) (interface{}, error)) *Scheduler {\n\tctx, cancel := context.WithCancel(context.Background())\n\tstate := State{}\n\tatomic.StoreInt32(&state.waiting, 0)\n\tatomic.StoreInt32(&state.processing, 0)\n\tatomic.StoreInt32(&state.completed, 0)\n\tatomic.StoreInt32(&state.errors, 0)\n\tscheduler := Scheduler{\n\t\titems: make(chan interface{}, capacity),\n\t\tbackPressure: make([]interface{}, 0),\n\t\tcapacity: capacity,\n\t\tcanceler: cancel,\n\t\tstate: state,\n\t}\n\tscheduler.initializeWorkers(ctx, handler)\n\treturn &scheduler\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52796842/goroutine-termination-on-calling-function-return",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\tfmt.Println(\"Test start\")\n\tinnerFunc()\n\treader := bufio.NewReader(os.Stdin)\n\tfmt.Print(\"Press Enter to exit test: \")\n\t_, _ = reader.ReadString('\\n')\n\tfmt.Println(\"Exiting\")\n}\nfunc innerFunc() {\n\tfmt.Println(\"innerFunc()\")\n\tgo func() {\n\t\tfmt.Println(\"Starting goroutine\")\n\t\tdefer func() { fmt.Println(\"Exiting goroutine (doesn't get called)\") }()\n\t\tfor {\n\t\t\tfmt.Println(\"goroutine running\")\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}()\n\tfmt.Println(\"Exiting innerFunc()\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46668308/bluetooth-rfcomm-socket-with-golang",
    "body": "package main\nimport (\n\t\"strconv\"\n\t\"strings\"\n\t\"syscall\"\n\t\"github.com/sirupsen/logrus\"\n\t\"golang.org/x/sys/unix\"\n)\nfunc main() {\n\tmac := str2ba(\"00:19:10:08:FE:08\") // YOUR BLUETOOTH MAC ADDRESS HERE\n\tfd, err := unix.Socket(syscall.AF_BLUETOOTH, syscall.SOCK_STREAM, unix.BTPROTO_RFCOMM)\n\tcheck(err)\n\taddr := &unix.SockaddrRFCOMM{Addr: mac, Channel: 1}\n\tvar data = make([]byte, 50)\n\tlogrus.Print(\"connecting...\")\n\terr = unix.Connect(fd, addr)\n\tcheck(err)\n\tdefer unix.Close(fd)\n\tlogrus.Println(\"done\")\n\tfor {\n\t\tn, err := unix.Read(fd, data)\n\t\tcheck(err)\n\t\tif n > 0 {\n\t\t\tlogrus.Infof(\"Received: %v\\n\", string(data[:n]))\n\t\t}\n\t}\n}\nfunc check(err error) {\n\tif err != nil {\n\t\tlogrus.Fatal(err)\n\t}\n}\n// str2ba converts MAC address string representation to little-endian byte array\nfunc str2ba(addr string) [6]byte {\n\ta := strings.Split(addr, \":\")\n\tvar b [6]byte\n\tfor i, tmp := range a {\n\t\tu, _ := strconv.ParseUint(tmp, 16, 8)\n\t\tb[len(b)-1-i] = byte(u)\n\t}\n\treturn b\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76986363/how-to-use-jackc-pgx-with-connection-pool-context-prepared-statements-etc",
    "body": "func f(ctx context.Context, pool *pgxpool.Pool) (err error) {\n    tx, err := pool.Begin(ctx)\n    if err != nil {\n        return err\n    }\n    defer func() {\n        if err != nil {\n            tx.Rollback(ctx)\n        } else {\n            tx.Commit(ctx)\n        }\n    }()\n    _, err := tx.Exec(ctx, \"insert into users (email) values ($1)\", \"c@em.com\")\n    if err != nil {\n        return err\n    }\n    var id int\n    row := tx.QueryRow(ctx, \"select id from users where email = $1\", \"c@em.com\")\n    if err := row.Scan(&id); err != nil {\n        return err\n    }\n    // NOTE: the above is just an example, if you need the auto\n    // generated id of an inserted record, please use the RETURNING\n    // clause supported by PostgreSQL.\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76986363/how-to-use-jackc-pgx-with-connection-pool-context-prepared-statements-etc",
    "body": "func f(ctx context.Context, pool *pgxpool.Pool) (err error) {\n    return pool.BeginFunc(ctx, func(tx pgx.Tx) error {\n        _, err := tx.Exec(ctx, \"insert into users (email) values ($1)\", \"c@em.com\")\n        if err != nil {\n            return err\n        }\n        var id int\n        row := tx.QueryRow(ctx, \"select id from users where email = $1\", \"c@em.com\")\n        if err := row.Scan(&id); err != nil {\n            return err\n        }\n        // NOTE: the above is just an example, if you need the auto\n        // generated id of an inserted record, please use the RETURNING\n        // clause supported by PostgreSQL.\n        return nil\n    })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76837673/how-to-format-the-way-provider-resources-get-generated-with-crossplane",
    "body": "   cat <<EOF > config/repository/config.go\n   package repository\n   import \"github.com/upbound/upjet/pkg/config\"\n   // Configure configures individual resources by adding custom ResourceConfigurators.\n   func Configure(p *config.Provider) {\n       p.AddResourceConfigurator(\"github_repository\", func(r *config.Resource) {\n           // We need to override the default group that upjet generated for\n           // this resource, which would be \"github\"\n           r.ShortGroup = \"repository\"\n       })\n   }\n   EOF"
  },
  {
    "url": "https://stackoverflow.com/questions/76506221/how-to-send-data-from-the-drop-down-list-to-the-server",
    "body": "var ul = document.querySelectorAll('ul > li');\n  for (let li of ul) {\n        li.addEventListener('click', function (event) {\n          let id = li.innerText;\n          var xhttp = new XMLHttpRequest();\n          xhttp.onreadystatechange = function() {\n            if (this.readyState == 4 && this.status == 200) {\n              //Do something with this.responseText;\n            }\n          };\n          xhttp.open(\"POST\", \"<yoururl>\", true);\n          xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n          xhttp.send(\"id=\" + id);\n\n      }\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/76476901/embedd-sveltekit-in-golang-binary",
    "body": "package main\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi/v5\"\n)\n//go:embed all:uibuild\nvar svelteStatic embed.FS\nfunc main() {\n\ts, err := fs.Sub(svelteStatic, \"uibuild\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tstaticServer := http.FileServer(http.FS(s))\n\tr := chi.NewRouter()\n\tr.Handle(\"/\", staticServer) // Not really needed (as the default will pick this up)\n\tr.Handle(\"/_app/*\", staticServer)      // Need to serve any app components from the embedded files\n\tr.Handle(\"/favicon.png\", staticServer) // Also serve favicon :-)\n\tr.HandleFunc(\"/*\", func(w http.ResponseWriter, r *http.Request) { // Everything else returns the index\n\t\tr.URL.Path = \"/\" // Replace the request path\n\t\tstaticServer.ServeHTTP(w, r)\n\t})\n\tfmt.Println(\"Running on port: 8082\")\n\tlog.Fatal(http.ListenAndServe(\":8082\", r))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76418306/is-it-possible-to-auto-migrate-tables-with-circular-relationships-in-gorm",
    "body": "package main\nimport (\n\t\"github.com/samber/lo\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Person struct {\n\tID        int\n\tName      string\n\tCompanyID *int\n\tCompany   *Company\n}\nfunc (p Person) TableName() string {\n\treturn \"people\"\n}\ntype Company struct {\n\tID       int\n\tName     string\n\tWorkerID *int\n\tWorker   *Worker\n}\ntype Worker struct {\n\tID       int\n\tName     string\n\tPersonID *int\n\tPerson   *Person\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{\n\t\tDisableForeignKeyConstraintWhenMigrating: true,\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Person{}, &Company{}, &Worker{})\n\tdb.Migrator().CreateConstraint(&Company{}, \"Worker\")\n\tdb.Migrator().CreateConstraint(&Company{}, \"fk_companies_people\")\n\tdb.Migrator().CreateConstraint(&Person{}, \"Company\")\n\tdb.Migrator().CreateConstraint(&Person{}, \"fk_people_companies\")\n\tdb.Migrator().CreateConstraint(&Worker{}, \"Person\")\n\tdb.Migrator().CreateConstraint(&Worker{}, \"fk_workers_people\")\n\tdb.Create(&Person{ID: 1, Name: \"John\", Company: &Company{ID: 1, Name: \"ACME\", Worker: &Worker{ID: 1, Name: \"Worker 1\"}}})\n\tdb.Model(&Person{ID: 1}).Update(\"company_id\", lo.ToPtr(1))\n\tdb.Model(&Company{ID: 1}).Update(\"worker_id\", lo.ToPtr(1))\n\tdb.Model(&Worker{ID: 1}).Update(\"person_id\", lo.ToPtr(1))\n\t// WRONG section!!!!!! uncomment any of these to try\n\t// db.Model(&Worker{ID: 1}).Update(\"person_id\", lo.ToPtr(2)) // id \"2\" breaks as it doesn't exist\n\t// db.Model(&Person{ID: 1}).Update(\"company_id\", lo.ToPtr(2)) // id \"2\" breaks as it doesn't exist\n\t// db.Model(&Company{ID: 1}).Update(\"worker_id\", lo.ToPtr(2)) // id \"2\" breaks as it doesn't exist\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76399227/is-it-safe-to-swap-two-integers-by-a-b-b-a-in-golang",
    "body": "$ cat x.go\npackage p\nfunc f(a, b int) {\n\ta, b = b, a\n}\n$ go tool compile -W x.go\nbefore walk f\n.   AS2 tc(1) # x.go:4:7\n.   AS2-Lhs\n.   .   NAME-p.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:8\n.   .   NAME-p.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:11\n.   AS2-Rhs\n.   .   NAME-p.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:11\n.   .   NAME-p.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:8\nafter walk f\n.   BLOCK # x.go:4:7\n.   BLOCK-List\n.   .   AS tc(1) # x.go:4:7\n.   .   .   NAME-p..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # x.go:4:7\n.   .   .   NAME-p.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:8\n.   .   AS tc(1) # x.go:4:7\n.   .   .   NAME-p.a esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:8\n.   .   .   NAME-p.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:11\n.   .   AS tc(1) # x.go:4:7\n.   .   .   NAME-p.b esc(no) Class:PPARAM Offset:0 OnStack Used int tc(1) # x.go:3:11\n.   .   .   NAME-p..autotmp_2 esc(N) Class:PAUTO Offset:0 AutoTemp OnStack Used int tc(1) # x.go:4:7"
  },
  {
    "url": "https://stackoverflow.com/questions/76350665/error-org-freedesktop-dbus-error-unknownmethod-unknown-invalid-method-notify",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/godbus/dbus/v5\"\n)\ntype notificationServer struct{}\nfunc (s notificationServer) Notify(appName string, replacesID uint32, appIcon string, summary string, body string, actions []string, hints map[string]dbus.Variant, expireTimeout int32) (uint32, *dbus.Error) {\n\tfmt.Printf(\"New notification: %s\\n\", body)\n\treturn 0, nil\n}\nfunc (s notificationServer) GetCapabilities() ([]string, *dbus.Error) {\n\treturn []string{\"action-icons\", \"actions\", \"body\", \"body-hyperlinks\", \"body-images\", \"body-markup\", \"icon-multi\", \"icon-static\", \"persistence\", \"sound\"}, nil\n}\nfunc (s notificationServer) GetServerInformation() (string, string, string, string, *dbus.Error) {\n\treturn \"antarctica\", \"antarctica.com\", \"1.0\", \"1.2\", nil\n}\nfunc main() {\n\tconn, err := dbus.ConnectSessionBus()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\tf := notificationServer{}\n\tconn.Export(f, \"/org/freedesktop/Notifications\", \"org.freedesktop.Notifications\")\n\treply, err := conn.RequestName(\"org.freedesktop.Notifications\", dbus.NameFlagDoNotQueue)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif reply != dbus.RequestNameReplyPrimaryOwner {\n\t\tfmt.Fprintln(os.Stderr, \"name already taken\")\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(\"Listening...\")\n\tselect {}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75847321/how-to-implement-social-login-with-github-when-user-email-is-private",
    "body": "type GithubData struct {\n\tUserInfo  UserInfo    `json:\"user_info\"`\n\tEmailInfo []EmailInfo `json:\"email_info,omitempty\"`\n}\ntype UserInfo struct {\n\tAvatarURL string `json:\"avatar_url\"`\n\tName      string `json:\"name\"`\n\tEmail     string `json:\"email\"`\n}\ntype EmailInfo struct {\n\tEmail      string `json:\"email\"`\n\tPrimary    bool   `json:\"primary\"`\n\tVerified   bool   `json:\"verified\"`\n\tVisibility string `json:\"visibility\"`\n}\nfunc GetGithubData(accessToken string) ([]byte, error) {\n\treq, reqerr := http.NewRequest(\"GET\", \"https://api.github.com/user\", nil)\n\tif reqerr != nil {\n\t\tlog.Panic(\"API Request creation failed\")\n\t}\n\tauthorizationHeaderValue := fmt.Sprintf(\"token %s\", accessToken)\n\treq.Header.Set(\"Authorization\", authorizationHeaderValue)\n\tresp, resperr := http.DefaultClient.Do(req)\n\tif resperr != nil {\n\t\tlog.Panic(\"Request failed\")\n\t}\n\trespbody, _ := ioutil.ReadAll(resp.Body)\n\treq, reqerr = http.NewRequest(\"GET\", \"https://api.github.com/user/emails\", nil)\n\tif reqerr != nil {\n\t\tlog.Panic(\"API Request creation failed\")\n\t}\n\treq.Header.Set(\"Authorization\", authorizationHeaderValue)\n\tresp, resperr = http.DefaultClient.Do(req)\n\tif resperr != nil {\n\t\tlog.Panic(\"Request failed\")\n\t}\n\temailResp, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcombinedData := fmt.Sprintf(`{\"basic_info\": %s, \"email_info\": %s}`, respbody, emailResp)\n\treturn []byte(combinedData), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75749610/issue-using-go-sqlmock-and-inserting-arguments-into-mock-queries",
    "body": "package repo\nimport (\n\t\"database/sql\"\n\t\"testing\"\n\t\"github.com/DATA-DOG/go-sqlmock\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestGetTransactionId(t *testing.T) {\n\tdb, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))\n\tif err != nil {\n\t\tt.Fatalf(\"err not expected while opening mock db, %v\", err)\n\t}\n\tt.Run(\"HappyPath\", func(t *testing.T) {\n\t\trows := sqlmock.NewRows([]string{\"tid\"}).AddRow(\"1\")\n\t\tmock.ExpectQuery(\"SELECT tid FROM trans_cmdline WHERE cmdline LIKE '%install $1%' ORDER BY tid DESC LIMIT 1\").\n            WithArgs(\"tcpdump\").\n            WillReturnRows(rows)\n\t\tgot, err := GetTransactionId(db, \"tcpdump\")\n\t\tassert.Equal(t, 1, got)\n\t\tassert.Nil(t, err)\n\t})\n\tt.Run(\"NoRowsReturned\", func(t *testing.T) {\n\t\tmock.ExpectQuery(\"SELECT tid FROM trans_cmdline WHERE cmdline LIKE '%install $1%' ORDER BY tid DESC LIMIT 1\").\n            WithArgs(\"tcpdump\").\n            WillReturnError(sql.ErrNoRows)\n\t\tgot, err := GetTransactionId(db, \"tcpdump\")\n\t\tassert.Equal(t, 0, got)\n\t\tassert.Equal(t, sql.ErrNoRows, err)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75474701/passing-data-from-handler-to-middleware-after-serving-request",
    "body": "func middleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcustom_data := make(map[string]any)\n\t\tr = r.WithContext(context.WithValue(r.Context(), \"custom_data\", custom_data))\n\t\t// Call the handler\n\t\tnext.ServeHTTP(w, r)\n\t\t// Retrieve custom data from the request object after the request is served\n\t\tv := r.Context().Value(\"custom_data\")\n\t\tfmt.Printf(\"Custom data(%T): %v\\n\", v, v)\n\t\t// or use the above defined map directly\n\t\tfmt.Printf(\"Custom data(%T): %v\\n\", custom_data, custom_data)\n\t})\n}\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tm, ok := r.Context().Value(\"custom_data\").(map[string]any)\n\tif ok && m != nil {\n\t\tm[\"value\"] = true\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75363034/how-to-signal-if-a-value-has-been-read-from-a-channel-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"runtime\"\n)\nfunc main() {\n\tnum := 5\n\t// Buffered channel with 5 values.\n\tch := make(chan int)\n\tdefer close(ch)\n\tfor i := 0; i < num; i++ {\n\t\tgo func(val int) {\n\t\t\tfmt.Printf(\"Added value: %d to the channel\\n\", val)\n\t\t\tch <- val\n\t\t}(i)\n\t}\n\tfmt.Println(\"NumGoroutine:\", runtime.NumGoroutine())\n\t// Read from our channel infinitely and increment each time a value has been read and operated upon\n\tcounter := 0\n\tfor {\n\t\t// Check our counter and if its == num then break the infinite loop\n\t\tif counter == num {\n\t\t\tbreak\n\t\t}\n\t\tval := <-ch\n\t\tcounter++\n\t\tfunc(i int) {\n\t\t\t// I'd like to verify a value was read from ch & it was processed before I increment the counter\n\t\t\tsq := i * i\n\t\t\tfmt.Println(sq)\n\t\t}(val)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75075928/is-it-possible-to-change-the-working-directory-in-vscode-for-a-golang-project",
    "body": "{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch Package\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${workspaceFolder}/cmd/server\",\n            \"cwd\": \"${workspaceFolder}\" // like intellij idea of working directory\n        }\n    ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73512227/golang-using-migrate-with-dockertest",
    "body": "func TestMain(m *testing.M) {\n\t// uses a sensible default on windows (tcp/http) and linux/osx (socket)\n\tpool, err := dockertest.NewPool(\"\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not connect to docker: %s\", err)\n\t}\n\t// pulls an image, creates a container based on it and runs it\n\tresource, err := pool.RunWithOptions(&dockertest.RunOptions{\n\t\tRepository: \"postgres\",\n\t\tTag:        \"11\",\n\t\tEnv: []string{\n\t\t\t\"POSTGRES_PASSWORD=secret\",\n\t\t\t\"POSTGRES_USER=user_name\",\n\t\t\t\"POSTGRES_DB=dbname\",\n\t\t\t\"listen_addresses = '*'\",\n\t\t},\n\t}, func(config *docker.HostConfig) {\n\t\t// set AutoRemove to true so that stopped container goes away by itself\n\t\tconfig.AutoRemove = true\n\t\tconfig.RestartPolicy = docker.RestartPolicy{Name: \"no\"}\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not start resource: %s\", err)\n\t}\n\thostAndPort := resource.GetHostPort(\"5432/tcp\")\n\tdatabaseUrl := fmt.Sprintf(\"postgres://user_name:secret@%s/dbname?sslmode=disable\", hostAndPort)\n\tlog.Println(\"Connecting to database on url: \", databaseUrl)\n\tresource.Expire(120) // Tell docker to hard kill the container in 120 seconds\n\t// exponential backoff-retry, because the application in the container might not be ready to accept connections yet\n\tpool.MaxWait = 120 * time.Second\n\tif err = pool.Retry(func() error {\n\t\tdb, err = sql.Open(\"postgres\", databaseUrl)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn db.Ping()\n\t}); err != nil {\n\t\tlog.Fatalf(\"Could not connect to docker: %s\", err)\n\t}\n\t// Migrating DB\n\tif err := runMigrations(\"../migrations\", db); err != nil {\n\t\tlog.Fatalf(\"Could not migrate db: %s\", err)\n\t}\n\t//Run tests\n\tcode := m.Run()\n\t// You can't defer this because os.Exit doesn't care for defer\n\tif err := pool.Purge(resource); err != nil {\n\t\tlog.Fatalf(\"Could not purge resource: %s\", err)\n\t}\n\tos.Exit(code)\n}\nfunc runMigrations(migrationsPath string, db *sql.DB) error {\n\tif migrationsPath == \"\" {\n\t\treturn errors.New(\"missing migrations path\")\n\t}\n\tdriver, err := postgres.WithInstance(db, &postgres.Config{})\n\tif err != nil {\n\t\treturn err\n\t}\n\tm, err := migrate.NewWithDatabaseInstance(\"file://\"+migrationsPath, \"postgres\", driver)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = m.Up()\n\tif err != nil && err != migrate.ErrNoChange {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73199081/scan-error-on-column-index-0-name-id-unsupported-scan-storing-driver-valu",
    "body": "rows, err := db.QueryContext(ctx, \"CALL usp_GetParentResourceListByResourceTypeID(?)\", resourceTypeId)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rows.Close()\nvar resourceList []Permission\nfor rows.Next() {\n\tvar resource Permission\n\tif err := rows.Scan(&resource.ID, &resource.Name); err != nil {\n\t\t// Check for a scan error.\n\t\t// Query rows will be closed with defer.\n\t\tlog.Fatal(err)\n\t}\n\tresourceList = append(resourceList, resource )\n}\nrerr := rows.Close()\nif rerr != nil {\n\tlog.Fatal(rerr)\n}\nif err := rows.Err(); err != nil {\n\tlog.Fatal(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73023464/how-to-create-azure-storage-sas-token-using-defaultazurecredential-class",
    "body": "    var strgAccName = _configuration.GetValue<string>(\"YourStorageAccountName\");\n    var saUri = $\"https://{strgAccName}.blob.core.windows.net\";\n    var blobServiceClient = new BlobServiceClient(new Uri(saUri), new DefaultAzureCredential());\n    var blobContainerClient = blobServiceClient.GetBlobContainerClient(_configuration.GetValue<string>(\"YourContainerName\"));\n    var blobClient = blobContainerClient.GetBlobClient(\"YourImage.jpg\");\n    // We can issue the SAS token till a maximum of 7 days.\n    var userDelegationKey =  blobServiceClient.GetUserDelegationKey(DateTimeOffset.UtcNow,\n                                                                    DateTimeOffset.UtcNow.AddHours(4));\n\n    var sasBuilder = new BlobSasBuilder()\n    {\n        BlobContainerName = blobClient.BlobContainerName,\n        BlobName = blobClient.Name,\n        Resource = \"b\", // b: blob, c: container\n        StartsOn = DateTimeOffset.UtcNow,\n        ExpiresOn = DateTimeOffset.UtcNow.AddHours(4),\n    };\n    sasBuilder.SetPermissions(BlobSasPermissions.Read);\n    var blobUriBuilder = new BlobUriBuilder(blobClient.Uri)\n    {\n        Sas = sasBuilder.ToSasQueryParameters(userDelegationKey,blobServiceClient.AccountName)\n    };\n    // Read this in any view like `blobUriBuilder.ToUri().ToString();`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72505935/fmt-println-stops-printing-chain-at-wrapped-custom-error-golang",
    "body": "type CustomError struct {\n\tMsg string\n\tErr error\n}\nfunc (e *CustomError) Error() string {\n\tif e.Err != nil {\n        // Added a \":\" here, because fmt.Errorf() does NOT\n        // automatically do this (as i accidentally thought above)!\n\t\twrappedError := fmt.Errorf(\"%s: %w\", e.Msg, e.Err)\n\t\twrappedErrorMsg := wrappedError.Error()\n\t\treturn wrappedErrorMsg\n        // Also you can do this instead (like most go-lib pkgs):\n        // return e.Msg + \": \" + e.Err.Error()\n\t}\n\treturn e.Msg\n}\nfunc (e *CustomError) Unwrap() error {\n\treturn e.Err\n}\nfunc printAllWrappedErrors(topLevelError error) {\n\tfmt.Println(topLevelError)\n}\nfunc printCustomErrorOnly(topLevelError error) {\n\tvar e *CustomError\n\tif errors.As(topLevelError, &e) {\n\t\tfmt.Println(e.Msg) // <-- This is the difference\n\t}\n}\nfunc printCustomErrorIncludingAllWrappedErrors(topLevelError error) {\n\tvar e *CustomError\n\tif errors.As(topLevelError, &e) {\n\t\tfmt.Println(e) // <-- This is the difference\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71983550/gorm-preload-as-deep-as-necessary",
    "body": "// associations are applied due to the naming convention eg. BlogPostID refers to BlogPost.ID, CommentID refers to Comment.ID\ntype Comment struct {\n\tID                uint `gorm:\"primaryKey\"`\n\tComment           string\n\tBlogPostID        *uint // if this is attached to a blogpost, the blogpost ID will be here otherwise nil\n\tDepth             uint\n\tTopLevelCommentID uint\n\tCommentID         *uint // if this is attached to a comment, the comment ID will be here otherwise nil\n\tSubComments       []Comment // SubComments will be here based on BlogPostID or CommentID if SubComments are preloaded\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71983550/gorm-preload-as-deep-as-necessary",
    "body": "// New comment instantiates and returns a new comment associated with its parent\nfunc NewComment(parentId uint, parentType ParentType, comment string) (*Comment, error) {\n\t// Create comment\n\tc := Comment{\n\t\tBlogPostID:  &parentId,\n\t\tComment:     comment,\n\t\tSubComments: nil,\n\t}\n\tswitch parentType {\n\tcase PT_BlogPost:\n\t\tblogPost := BlogPost{}\n\t\t// lookup blog post\n\t\tif err := DB().Preload(\"Comments\").Preload(clause.Associations).Where(\"id = ?\", parentId).First(&blogPost).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tblogPost.Comments = append(blogPost.Comments, c)\n\t\tDB().Session(&gorm.Session{FullSaveAssociations: true}).Save(&c)\n\t\tDB().Model(&c).UpdateColumn(\"top_level_comment_id\", c.ID)\n\t\tblogPost.Comments = append(blogPost.Comments, c)\n\t\treturn &c, nil\n\tcase PT_Comment:\n\t\tparentComment := Comment{}\n\t\t// lookup comment\n\t\tif err := DB().Preload(\"SubComments\").Preload(clause.Associations).Where(\"id = ?\", parentId).First(&parentComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttopComment := Comment{}\n\t\tif err := DB().Where(\"id = ?\", parentComment.TopLevelCommentID).First(&topComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttopComment.Depth++\n\t\tif err := DB().Model(&topComment).UpdateColumn(\"depth\", topComment.Depth).First(&topComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// Create comment and add comment to db\n\t\tc.TopLevelCommentID = parentComment.TopLevelCommentID\n\t\tparentComment.SubComments = append(parentComment.SubComments, c)\n\t\treturn &parentComment.SubComments[len(parentComment.SubComments)-1], nil\n\t}\n\treturn nil, errors.New(\"fell through parent type switch\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71983550/gorm-preload-as-deep-as-necessary",
    "body": "func main() {\n\tDB().AutoMigrate(&BlogPost{})\n\tDB().AutoMigrate(&Comment{})\n\t// blogpost\n\tbp, err := NewBlogPost(\"BlogPostTitle\", \"BlogPostContent\").Create()\n\tif err != nil {\n\t\tlog.Println(\"error creating blogpost\", err)\n\t}\n\t// top level comment under blogpost\n\tc, err := NewComment(bp.ID, PT_BlogPost, \"top level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating top level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating top level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"second level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating second level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating second level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"third level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating third level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating third level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"fourth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating fourth level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating fourth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"fifth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating fifth level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating fifth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"sixth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating sixth level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating sixth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"seventh level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating seventh level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating seventh level comment\", err)\n\t}\n\tfor _, v := range bp.GetComments() {\n\t\tcommentID := uint(0)\n\t\tblogPostID := uint(0)\n\t\tif v.BlogPostID != nil {\n\t\t\tblogPostID = *v.BlogPostID\n\t\t}\n\t\tif v.CommentID != nil {\n\t\t\tcommentID = *v.CommentID\n\t\t}\n\t\tlog.Printf(\"\\n\\nID: %d\\nComment: %s\\nCommentID: %d\\nBlogpostID: %d\\n\", v.ID, v.Comment, commentID, blogPostID)\n\t\tif v.SubComments != nil {\n\t\t\tsubComments := v.SubComments\n\t\tnextLevel:\n\t\t\tfor _, v := range subComments {\n\t\t\t\tcommentID := uint(0)\n\t\t\t\tblogPostID := uint(0)\n\t\t\t\tif v.BlogPostID != nil {\n\t\t\t\t\tblogPostID = *v.BlogPostID\n\t\t\t\t}\n\t\t\t\tif v.CommentID != nil {\n\t\t\t\t\tcommentID = *v.CommentID\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"\\n\\nID: %d\\nComment: %s\\nCommentID: %d\\nBlogpostID: %d\\n\", v.ID, v.Comment, commentID, blogPostID)\n\t\t\t\tif v.SubComments != nil {\n\t\t\t\t\tsubComments = v.SubComments\n\t\t\t\t\tgoto nextLevel // I use gotos to indicate recursion\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71983550/gorm-preload-as-deep-as-necessary",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/glebarez/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n\t\"gorm.io/gorm/logger\"\n)\ntype ParentType int\nconst (\n\tPT_BlogPost ParentType = iota\n\tPT_Comment\n)\nvar dB *gorm.DB\n// DB returns a live database connection\nfunc DB() *gorm.DB {\n\tvar database *gorm.DB\n\tvar err error\n\tif dB == nil {\n\t\tdatabase, err = gorm.Open(sqlite.Open(\"test.db\"), &gorm.Config{\n\t\t\tLogger: logger.Default.LogMode(logger.Info), // you need a logger if you are going to do this.\n\t\t\tNowFunc: func() time.Time {\n\t\t\t\treturn time.Now().Local() // timestamps\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\tpanic(\"Failed to connect to database!\")\n\t\t}\n\t\tdB = database\n\t}\n\treturn dB\n}\n// NewBlogPost instantiates and returns a *BlogPost\nfunc NewBlogPost(title, content string) *BlogPost {\n\treturn &BlogPost{\n\t\tTitle:   title,\n\t\tContent: content,\n\t}\n}\n// BlogPost describes a blog post\ntype BlogPost struct {\n\tID       uint `gorm:\"primaryKey\"`\n\tTitle    string\n\tContent  string\n\tComments []Comment\n}\n// Create inserts the record in the DB\nfunc (bp *BlogPost) Create() (*BlogPost, error) {\n\tif err := DB().Create(&bp).Error; err != nil {\n\t\treturn &BlogPost{}, err\n\t}\n\treturn bp, nil\n}\n// GetComments retrieves comments and sub comments associated with a BlogPost\nfunc (bp *BlogPost) GetComments() []Comment {\n\tblogPost := BlogPost{}\n\tsb := strings.Builder{}\n\tsb.WriteString(\"Comments.SubComments\")\n\terr := DB().Preload(\"Comments\").Find(&blogPost).Error\n\tif err != gorm.ErrRecordNotFound {\n\t\tDepth := uint(0)\n\t\tfor _, c := range blogPost.Comments {\n\t\t\tif c.Depth > Depth {\n\t\t\t\tDepth = c.Depth\n\t\t\t}\n\t\t}\n\t\ti := uint(1)\n\t\tfor i < Depth {\n\t\t\tsb.WriteString(\".SubComments\")\n\t\t\ti++\n\t\t}\n\t}\n\tDB().\n\t\tPreload(sb.String()).         // you may want to reconsider doing it with preloads.\n\t\tPreload(clause.Associations). // also, you will accumulate tech debt as these structures get larger.\n\t\tFirst(&blogPost) // .Error\n\treturn blogPost.Comments\n}\n// New comment instantiates and returns a new comment associated with its parent\nfunc NewComment(parentId uint, parentType ParentType, comment string) (*Comment, error) {\n\t// Create comment\n\tc := Comment{\n\t\tBlogPostID:  &parentId,\n\t\tComment:     comment,\n\t\tSubComments: nil,\n\t}\n\tswitch parentType {\n\tcase PT_BlogPost:\n\t\tblogPost := BlogPost{}\n\t\t// lookup blog post\n\t\tif err := DB().Preload(\"Comments\").Preload(clause.Associations).Where(\"id = ?\", parentId).First(&blogPost).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tblogPost.Comments = append(blogPost.Comments, c)\n\t\tDB().Session(&gorm.Session{FullSaveAssociations: true}).Save(&c)\n\t\tDB().Model(&c).UpdateColumn(\"top_level_comment_id\", c.ID)\n\t\tblogPost.Comments = append(blogPost.Comments, c)\n\t\treturn &c, nil\n\tcase PT_Comment:\n\t\tparentComment := Comment{}\n\t\t// lookup comment\n\t\tif err := DB().Preload(\"SubComments\").Preload(clause.Associations).Where(\"id = ?\", parentId).First(&parentComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttopComment := Comment{}\n\t\tif err := DB().Where(\"id = ?\", parentComment.TopLevelCommentID).First(&topComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\ttopComment.Depth++\n\t\tif err := DB().Model(&topComment).UpdateColumn(\"depth\", topComment.Depth).First(&topComment).Error; err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// Create comment and add comment to db\n\t\tc = Comment{\n\t\t\tCommentID:   &parentId,\n\t\t\tComment:     comment,\n\t\t\tSubComments: nil,\n\t\t}\n\t\tc.TopLevelCommentID = parentComment.TopLevelCommentID\n\t\tparentComment.SubComments = append(parentComment.SubComments, c)\n\t\treturn &parentComment.SubComments[len(parentComment.SubComments)-1], nil\n\t}\n\treturn nil, errors.New(\"fell through parent type switch\")\n}\n// associations are applied due to the naming convention eg. BlogPostID refers to BlogPost.ID, CommentID refers to Comment.ID\ntype Comment struct {\n\tID                uint `gorm:\"primaryKey\"`\n\tComment           string\n\tBlogPostID        *uint // if this is attached to a blogpost, the blogpost ID will be here otherwise nil\n\tDepth             uint\n\tTopLevelCommentID uint\n\tCommentID         *uint // if this is attached to a comment, the comment ID will be here otherwise nil\n\tSubComments       []Comment // SubComments will be here based on BlogPostID or CommentID if SubComments are preloaded\n}\n// Save saves a parent comment and all child associations to the database\nfunc (c *Comment) Save() (*Comment, error) {\n\tif err := DB().Session(&gorm.Session{FullSaveAssociations: true}).Save(c).Error; err != nil {\n\t\treturn c, errors.New(\"error saving comment to db\")\n\t}\n\treturn c, nil\n}\nfunc main() {\n\tDB().AutoMigrate(&BlogPost{})\n\tDB().AutoMigrate(&Comment{})\n\t// blogpost\n\tbp, err := NewBlogPost(\"BlogPostTitle\", \"BlogPostContent\").Create()\n\tif err != nil {\n\t\tlog.Println(\"error creating blogpost\", err)\n\t}\n\t// top level comment under blogpost\n\tc, err := NewComment(bp.ID, PT_BlogPost, \"top level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating top level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating top level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"second level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating second level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating second level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"third level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating third level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating third level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"fourth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating fourth level comment\", err)\n\t}\n\tc, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating fourth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"fifth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating fifth level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating fifth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"sixth level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating sixth level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating sixth level comment\", err)\n\t}\n\tc, err = NewComment(c.ID, PT_Comment, \"seventh level comment\")\n\tif err != nil {\n\t\tlog.Println(\"error creating seventh level comment\", err)\n\t}\n\t_, err = c.Save()\n\tif err != nil {\n\t\tlog.Println(\"error creating seventh level comment\", err)\n\t}\n\tfor _, v := range bp.GetComments() {\n\t\tcommentID := uint(0)\n\t\tblogPostID := uint(0)\n\t\tif v.BlogPostID != nil {\n\t\t\tblogPostID = *v.BlogPostID\n\t\t}\n\t\tif v.CommentID != nil {\n\t\t\tcommentID = *v.CommentID\n\t\t}\n\t\tlog.Printf(\"\\n\\nID: %d\\nComment: %s\\nCommentID: %d\\nBlogpostID: %d\\n\", v.ID, v.Comment, commentID, blogPostID)\n\t\tif v.SubComments != nil {\n\t\t\tsubComments := v.SubComments\n\t\tnextLevel:\n\t\t\tfor _, v := range subComments {\n\t\t\t\tcommentID := uint(0)\n\t\t\t\tblogPostID := uint(0)\n\t\t\t\tif v.BlogPostID != nil {\n\t\t\t\t\tblogPostID = *v.BlogPostID\n\t\t\t\t}\n\t\t\t\tif v.CommentID != nil {\n\t\t\t\t\tcommentID = *v.CommentID\n\t\t\t\t}\n\t\t\t\tlog.Printf(\"\\n\\nID: %d\\nComment: %s\\nCommentID: %d\\nBlogpostID: %d\\n\", v.ID, v.Comment, commentID, blogPostID)\n\t\t\t\tif v.SubComments != nil {\n\t\t\t\t\tsubComments = v.SubComments\n\t\t\t\t\tgoto nextLevel // I use gotos to indicate recursion\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71716447/go-golang-how-to-extract-least-significant-digits-from-big-float",
    "body": "package main\nimport (\n    \"fmt\"\n    \"math\"\n    \"math/big\"\n)\nfunc main() {\n    // Replace with larger calculation.\n    pi := big.NewFloat(math.Pi)\n    const (\n        // Pi: 3.1415926535897932...\n        // Output: 5926535897\n        digitOffset = 3\n        digitLength = 10\n    )\n    // Move the desired digits to the right side of the decimal point.\n    mult := pow(10, digitOffset)\n    digits := new(big.Float).Mul(pi, mult)\n    // Remove the integer component.\n    digits.Sub(digits, trunc(digits))\n    // Move the digits to the left of the decimal point, and truncate\n    // to an integer representing the desired digits.\n    // This avoids undesirable rounding if you simply print the N\n    // digits after the decimal point.\n    mult = pow(10, digitLength)\n    digits.Mul(digits, mult)\n    digits = trunc(digits)\n    // Display the next 'digitLength' digits. Zero padded.\n    fmt.Printf(\"%0*.0f\\n\", digitLength, digits)\n}\n// trunc returns the integer component.\nfunc trunc(n *big.Float) *big.Float {\n    intPart, accuracy := n.Int(nil)\n    _ = accuracy\n    return new(big.Float).SetInt(intPart)\n}\n// pow calculates n^idx.\nfunc pow(n, idx int64) *big.Float {\n    if idx < 0 {\n        panic(\"invalid negative exponent\")\n    }\n    result := new(big.Int).Exp(big.NewInt(n), big.NewInt(idx), nil)\n    return new(big.Float).SetInt(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71678320/update-property-in-a-yaml-file",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"gopkg.in/yaml.v3\"\n)\nvar input = []byte(`\nspec:\n  provider:\n    infrastructureConfig:\n      networks:\n        cloudNAT:\n          natIPNames:\n            - name: test\n`)\nfunc set(root *yaml.Node, path []string, value yaml.Node) {\n\tif len(path) == 0 {\n\t\t*root = value\n\t\treturn\n\t}\n\tkey := path[0]\n\trest := path[1:]\n\tswitch root.Kind {\n\tcase yaml.DocumentNode:\n\t\tset(root.Content[0], path, value)\n\tcase yaml.MappingNode:\n\t\tfor i := 0; i < len(root.Content); i += 2 {\n\t\t\tif root.Content[i].Value == key {\n\t\t\t\tset(root.Content[i+1], rest, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\tcase yaml.SequenceNode:\n\t\tindex, err := strconv.Atoi(key)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tset(root.Content[index], rest, value)\n\t}\n}\nfunc main() {\n\tvar doc yaml.Node\n\tif err := yaml.Unmarshal(input, &doc); err != nil {\n\t\tpanic(err)\n\t}\n\tnewVal := yaml.Node{\n\t\tKind:  yaml.ScalarNode,\n\t\tValue: \"test2\",\n\t}\n\tset(&doc, []string{\"spec\", \"provider\", \"infrastructureConfig\", \"networks\", \"cloudNAT\", \"natIPNames\", \"0\", \"name\"}, newVal)\n\tout, err := yaml.Marshal(doc.Content[0])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(out))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71104667/golang-fiber-and-auth0",
    "body": "// EnsureValidToken is a middleware that will check the validity of our JWT.\nfunc ensureValidToken(next http.Handler) http.Handler {\n\tissuerURL, err := url.Parse(\"https://\" + os.Getenv(\"AUTH0_DOMAIN\") + \"/\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the issuer url: %v\", err)\n\t}\n\tprovider := jwks.NewCachingProvider(issuerURL, 5*time.Minute)\n\tjwtValidator, err := validator.New(\n\t\tprovider.KeyFunc,\n\t\tvalidator.RS256,\n\t\tissuerURL.String(),\n\t\t[]string{os.Getenv(\"AUTH0_AUDIENCE\")},\n\t\tvalidator.WithCustomClaims(\n\t\t\tfunc() validator.CustomClaims {\n\t\t\t\treturn &CustomClaims{}\n\t\t\t},\n\t\t),\n\t\tvalidator.WithAllowedClockSkew(time.Minute),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to set up the jwt validator\")\n\t}\n\terrorHandler := func(w http.ResponseWriter, r *http.Request, err error) {\n\t\tlog.Printf(\"Encountered error while validating JWT: %v\", err)\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t\tw.Write([]byte(`{\"message\":\"Failed to validate JWT.\"}`))\n\t}\n\tmiddleware := jwtmiddleware.New(\n\t\tjwtValidator.ValidateToken,\n\t\tjwtmiddleware.WithErrorHandler(errorHandler),\n\t)\n\treturn middleware.CheckJWT(next)\n}\nvar EnsureValidToken = adaptor.HTTPMiddleware(ensureValidToken)\napp := fiber.New()\napp.Use(EnsureValidToken)\napp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn c.SendString(\"Hello, World!\")\n\t})\napp.Listen(\":3000\")"
  },
  {
    "url": "https://stackoverflow.com/questions/71089020/testing-a-function-by-passing-input-multiple-times",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\nfunc generateRandomNumber() int {\n\trand.Seed(time.Now().Unix())   // seed value based on time to generate non-deterministic random values\n\trandomNum := rand.Intn(10) + 1 // range: [0, 10); produces the same value without Seed(), i.e., pseudo-random\n\treturn randomNum\n}\nfunc guess(reader *bufio.Reader) (int, error) {\n\ttarget := generateRandomNumber()\n\tfmt.Println(\"Guess a number between 1 and 10\")\n\tfor attempts := 0; attempts < 3; attempts++ {\n\t\tfmt.Println(\"You have\", 3-attempts, \"guesses left\")\n\t\tuserVal, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tinput := strings.TrimSpace(userVal)\n\t\tanswer, err := strconv.Atoi(input)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif answer == target {\n\t\t\tfmt.Println(\"Congratulations !!\")\n\t\t\treturn answer, nil\n\t\t} else if answer > target {\n\t\t\tfmt.Println(\"Your guess was HIGHER\")\n\t\t} else if answer < target {\n\t\t\tfmt.Println(\"Your guess was LOWER\")\n\t\t}\n\t}\n\tfmt.Printf(\"Sorry, you've run out of attempts... The correct value is %d\\n\", target)\n\treturn target, fmt.Errorf(\"attempts is over\")\n}\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\tguess(reader)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71089020/testing-a-function-by-passing-input-multiple-times",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n)\nfunc TestRandomNumberOk(t *testing.T) {\n\twant := generateRandomNumber()\n\tmsg := fmt.Sprintf(\"3\\n4\\n%d\\n\", want)\n\treader := strings.NewReader(msg)\n\tr := bufio.NewReader(reader)\n\t_, err := guess(r)\n\tif err != nil {\n\t\tt.Errorf(\"guess must successfull\")\n\t}\n}\nfunc TestRandomNumberFail(t *testing.T) {\n\twant := generateRandomNumber()\n\tmsg := fmt.Sprintf(\"3\\n4\\n%d\\n\", want+1)\n\treader := strings.NewReader(msg)\n\tr := bufio.NewReader(reader)\n\t_, err := guess(r)\n\tif err == nil {\n\t\tt.Errorf(\"guess must unsuccessfull\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70569324/golang-mqtt-client-tls-implementation",
    "body": "package main\nimport (\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"errors\"\n\t\"fmt\"\n)\nfunc main() {\n\tvar pubPEMData = `-----BEGIN CERTIFICATE-----\nMIIG9TCCBd2gAwIBAgISBLS106X/pLzr6OgL1QIQaFjHMA0GCSqGSIb3DQEBCwUA\nMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQD\nEwJSMzAeFw0yMTEyMDUxNDE1NTJaFw0yMjAzMDUxNDE1NTFaMB4xHDAaBgNVBAMM\nEyouc3RhY2tleGNoYW5nZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\nAoIBAQCad2WyTsmxXwoyz/iQST49XuSAciGr8GcyUtrestK82l4uHvU0/eCsxkUa\nnT6xpm60l9OaAXCjJHEl9+0qKOUQ8+FJzr4W9PuiALE1E6j5mpYk3FRERZwX+AFZ\ndN2G1rSb+uZvDSiR9eUikj0ueR5TTA+ZUsNLaByE+/EzcUqja9Qxyq7zkizSolxy\n/RVTRPB2BaDkGY4I46avu8PJPm6R3skp0L96MnWSDVtJhIGc5lisoUEozrlTbTuT\nSfBvPAAIqFT6702LJqFIF5rW04++GrEBh6S1I+17IZxneTMcorx0sYmXVzRGvz6e\n0nOfXo6a80hAFgs+vci3UWEze7vrAgMBAAGjggQXMIIEEzAOBgNVHQ8BAf8EBAMC\nBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHQYDVR0OBBYEFMbQN0TT6bdr8CA4WpQ9UwT/XKTZMB8GA1UdIwQYMBaAFBQusxe3\nWFbLrlAJQOYfr52LFMLGMFUGCCsGAQUFBwEBBEkwRzAhBggrBgEFBQcwAYYVaHR0\ncDovL3IzLm8ubGVuY3Iub3JnMCIGCCsGAQUFBzAChhZodHRwOi8vcjMuaS5sZW5j\nci5vcmcvMIIB5AYDVR0RBIIB2zCCAdeCDyouYXNrdWJ1bnR1LmNvbYISKi5ibG9n\nb3ZlcmZsb3cuY29tghIqLm1hdGhvdmVyZmxvdy5uZXSCGCoubWV0YS5zdGFja2V4\nY2hhbmdlLmNvbYIYKi5tZXRhLnN0YWNrb3ZlcmZsb3cuY29tghEqLnNlcnZlcmZh\ndWx0LmNvbYINKi5zc3RhdGljLm5ldIITKi5zdGFja2V4Y2hhbmdlLmNvbYITKi5z\ndGFja292ZXJmbG93LmNvbYIVKi5zdGFja292ZXJmbG93LmVtYWlsgg8qLnN1cGVy\ndXNlci5jb22CDWFza3VidW50dS5jb22CEGJsb2dvdmVyZmxvdy5jb22CEG1hdGhv\ndmVyZmxvdy5uZXSCFG9wZW5pZC5zdGFja2F1dGguY29tgg9zZXJ2ZXJmYXVsdC5j\nb22CC3NzdGF0aWMubmV0gg1zdGFja2FwcHMuY29tgg1zdGFja2F1dGguY29tghFz\ndGFja2V4Y2hhbmdlLmNvbYISc3RhY2tvdmVyZmxvdy5ibG9nghFzdGFja292ZXJm\nbG93LmNvbYITc3RhY2tvdmVyZmxvdy5lbWFpbIIRc3RhY2tzbmlwcGV0cy5uZXSC\nDXN1cGVydXNlci5jb20wTAYDVR0gBEUwQzAIBgZngQwBAgEwNwYLKwYBBAGC3xMB\nAQEwKDAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcwggEF\nBgorBgEEAdZ5AgQCBIH2BIHzAPEAdwDfpV6raIJPH2yt7rhfTj5a6s2iEqRqXo47\nEsAgRFwqcwAAAX2LKmpMAAAEAwBIMEYCIQC1jB7OwpQiHacbVnEZgWegpCOksm6Z\nTYkTjXCmIo9m1AIhAPjs+1PPNr/avFzSydhUROI+Rvqx0iZqXzNc24PIOXjBAHYA\nKXm+8J45OSHwVnOfY6V35b5XfZxgCvj5TV0mXCVdx4QAAAF9iypqRAAABAMARzBF\nAiEA0oJ418l3aDXj4EVAtzf5o2nUdYiZiH7pLvA1hd7ZSKUCICFeACPl73NNLSzR\n7yoKEV6nO7Zlk4rUd/fUyROY35OMMA0GCSqGSIb3DQEBCwUAA4IBAQB+hvmbEaHF\njEkSZiTllNe+XWtfz6TiWIugoqdDL67app49ZTTZ94oLRGxybm62nBIEX/2gCRgd\nfqnDecg4BWIyl2jti73eKkmt9+pcCDqZ1JcbW8rDLmZJnzdcC0o739BGRq/ufP5R\nFb8qXAap2VH/29MQImxB166PsAb9rKdS1kNSfg4Zsu7nisg7q47dyzZMT9cTbajf\nD/T6hl30nHOyJFvny5vYwDLtiNg5BJ2xZzZFh4B73mY53jjN2EXn4S5LI9J+0NmY\ndic7TY+lsttvfrJ+cySMO7E1T1SkgEgHtfsadlRRWNFl80R91sS98FHbhBg/MSMk\nyAm4xgff5rYD\n-----END CERTIFICATE-----`\n\tcrt, _, err := strPEMToPubCert(pubPEMData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(crt.DNSNames)\n}\nfunc strPEMToPubCert(pemStr string) (*x509.Certificate, []byte, error) {\n\tblock, rest := pem.Decode([]byte(pemStr))\n\tif block == nil || block.Type != \"CERTIFICATE\" {\n\t\treturn nil, rest, errors.New(\"failed to decode PEM block containing certificate\")\n\t}\n\tcert, err := x509.ParseCertificate(block.Bytes)\n\tif err != nil {\n\t\treturn nil, rest, err\n\t}\n\treturn cert, rest, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70207857/reverse-proxy-using-go-to-cloud-run-instance",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"golang.org/x/oauth2\"\n\t\"google.golang.org/api/idtoken\"\n)\nvar port = \":8080\"\nvar backend = \"[CLOUD_RUN_INSTANCE_TO_PROXY].a.run.app\"\nfunc main() {\n\tlogger := log.New(os.Stdout, \"proxy: \", log.LstdFlags)\n\tlogger.Println(fmt.Sprintf(\"Proxy server is starting for: %s on port: %s\", backend, port))\n\trouter := http.NewServeMux()\n\trouter.Handle(\"/\", proxyHandler())\n\tserver := &http.Server{\n\t\tAddr:         port,\n\t\tHandler:      logging(logger)(router),\n\t\tErrorLog:     logger,\n\t\tReadTimeout:  30 * time.Second,\n\t\tWriteTimeout: 30 * time.Second,\n\t\tIdleTimeout:  15 * time.Second,\n\t}\n\tdone := make(chan bool)\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt)\n\tgo func() {\n\t\t<-quit\n\t\tlogger.Println(\"Proxy server is shutting down...\")\n\t\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\t\tdefer cancel()\n\t\tserver.SetKeepAlivesEnabled(false)\n\t\tif err := server.Shutdown(ctx); err != nil {\n\t\t\tlogger.Fatalf(\"Could not gracefully shutdown the server: %v\\n\", err)\n\t\t}\n\t\tclose(done)\n\t}()\n\tif err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\tlogger.Fatalf(\"Could not listen on %s: %v\\n\", port, err)\n\t}\n\t<-done\n\tlogger.Println(\"Server stopped\")\n}\nfunc proxyHandler() http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodOptions {\n\t\t\theaders := w.Header()\n\t\t\theaders.Add(\"Access-Control-Allow-Origin\", \"*\")\n\t\t\theaders.Add(\"Access-Control-Allow-Headers\", \"*\")\n\t\t\theaders.Add(\"Access-Control-Allow-Methods\", \"GET,HEAD,PUT,PATCH,POST,DELETE\")\n\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\treturn\n\t\t}\n\t\tpath := fmt.Sprintf(\"https://%s%s\", backend, r.RequestURI)\n\t\tat, _ := idTokenTokenSource(path)\n\t\tp := httputil.NewSingleHostReverseProxy(&url.URL{\n\t\t\tScheme: \"https\",\n\t\t\tHost:   backend,\n\t\t})\n\t\tp.Director = func(r *http.Request) {\n\t\t\tif at != nil {\n\t\t\t\tat.SetAuthHeader(r)\n\t\t\t}\n\t\t}\n\t\tp.ModifyResponse = func(res *http.Response) error {\n\t\t\tres.Header.Set(\"Access-Control-Allow-Methods\", \"GET,HEAD,PUT,PATCH,POST,DELETE\")\n\t\t\tres.Header.Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t\tres.Header.Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\t\tres.Header.Set(\"Access-Control-Allow-Headers\", \"*\")\n\t\t\treturn nil\n\t\t}\n\t\tr.URL.Scheme = \"https\"\n\t\tr.URL.Host = backend\n\t\tr.Header.Set(\"X-Forwarded-Host\", r.Header.Get(\"Host\"))\n\t\tr.Host = backend\n\t\tif at != nil {\n\t\t\tat.SetAuthHeader(r)\n\t\t}\n\t\tp.ServeHTTP(w, r)\n\t})\n}\nfunc logging(l *log.Logger) func(http.Handler) http.Handler {\n\treturn func(next http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tdefer func() {\n\t\t\t\trequestId := r.Header.Get(\"X-Request-Id\")\n\t\t\t\tif requestId == \"\" {\n\t\t\t\t\trequestId = fmt.Sprintf(\"%d\", time.Now().UnixNano())\n\t\t\t\t}\n\t\t\t\tw.Header().Set(\"X-Request-Id\", requestId)\n\t\t\t\tl.Println(requestId, r.Method, r.URL.Path, r.RemoteAddr, r.UserAgent())\n\t\t\t}()\n\t\t\tnext.ServeHTTP(w, r)\n\t\t})\n\t}\n}\nfunc idTokenTokenSource(audience string) (*oauth2.Token, error) {\n\tts, err := idtoken.NewTokenSource(context.Background(), audience)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tt, err := ts.Token()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn t, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68447348/authenticating-to-azure-in-go-using-rest-api",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n    \"strings\"\n)\nfunc main() {\n\tauthendpoint := \"https://login.microsoftonline.com/8xxxxx7-6372-4bcb-xxx-xxxxxx/oauth2/token\"\n\tbody := url.Values(map[string][]string{\n\t\t\"resource\":      {\"https://graph.microsoft.com\"},\n\t\t\"client_id\":     {\"xxxxxxxx-7549-4ea2-b00d-xxxxxxxxxxx\"},\n\t\t\"client_secret\": {\"Q.xxxxxxxxxxxxxx-6_CgA4yOi_8sS-\"},\n\t\t\"grant_type\":    {\"client_credentials\"}})\n\trequest, err := http.NewRequest(\n\t\thttp.MethodPost,\n\t\tauthendpoint,\n\t\tstrings.NewReader(body.Encode()))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trequest.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tclient := &http.Client{}\n\tresp, err := client.Do(request)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(resp.StatusCode)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68119052/how-to-use-a-package-of-generated-protobuf-inside-a-go-module",
    "body": "# Proto sources\nPROTO= $(shell find ${PROTODIR} -type f -name '*.proto')\nPBGO=  $(PROTO:.proto=.pb.go)\nDEST_DIR=.\nMODULE_NAME=company.tld/proj\nGO_OPT_FLAG=   --go_opt=module=${MODULE_NAME}\nGRPC_OPT_FLAG= --go-grpc_opt=module=${MODULE_NAME}\nPROTO_PKG_DIR=projpb\nPROTO_MODULE_NAME=${MODULE_NAME}/${PROTO_PKG_DIR}\nPROTO_GOMOD_FILE=${PROTO_PKG_DIR}/go.mod\n.PHONY: clean install proto gomod\nbuild: proto gomod\n\tgo build ${LDFLAGS} -o ${BINARY}\n%.pb.go: %.proto | $(PROTOBUF_GO_PLUGIN) $(GRPC_GO_PLUGIN) $(DEST_DIR)\n\t${PROTOC} --proto_path=${PROTODIR} --go_out=${DEST_DIR} ${GO_OPT_FLAG} --go-grpc_out=${DEST_DIR} ${GRPC_OPT_FLAG} $<\nproto: $(PBGO)\ngomod: ${PROTO_GOMOD_FILE}\n${PROTO_GOMOD_FILE}:\n\tcd ${PROTO_PKG_DIR} && go mod init ${PROTO_MODULE_NAME} && cd .."
  },
  {
    "url": "https://stackoverflow.com/questions/67911127/how-to-cascade-soft-delete-has-many-relationships-in-gorm",
    "body": "//Delete a project and it's associations.\nfunc DeleteProject(db *gorm.DB, id uint) (Project, error) {\n\tproject, err := GetProject(db, id)\n\tif err != nil {\n\t\treturn Project{}, err\n\t}\n\tif len(project.Diagrams) > 0 {\n\t\tfor _, projectDiagram := range project.Diagrams {\n\t\t\t_, err := DeleteDiagram(db, projectDiagram.ID)\n\t\t\tif err != nil {\n\t\t\t\treturn Project{}, err\n\t\t\t}\n\t\t}\n\t\tdb.Model(&project).Association(\"Diagrams\").Clear()\n\t}\n\tif err := db.Delete(&project, id).Error; err != nil {\n\t\treturn Project{}, err\n\t}\n\treturn project, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67911127/how-to-cascade-soft-delete-has-many-relationships-in-gorm",
    "body": "//Delete a diagram and it's associations.\nfunc DeleteDiagram(db *gorm.DB, id uint) (Diagram, error) {\n\tvar diagram, err = GetDiagram(db, id)\n\tif err != nil {\n\t\treturn Diagram{}, err\n\t}\n\tif len(diagram.Instances) > 0 {\n\t\tdb.Model(&diagram).Association(\"Instances\").Clear()\n\t\tfor _, diagramInstance := range diagram.Instances {\n\t\t\t_, err := DeleteInstance(db, diagramInstance.ID)\n\t\t\tif err != nil {\n\t\t\t\treturn Diagram{}, err\n\t\t\t}\n\t\t}\n\t}\n\tif err := db.Delete(&diagram).Error; err != nil {\n\t\treturn Diagram{}, err\n\t}\n\treturn diagram, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67508787/how-to-mock-a-gin-context",
    "body": "type MyGinContext struct {\n    *gin.Context\n}\nfunc (m *MyGinContext) BindJSON(obj interface{}) error {\n    fmt.Println(\"my own BindJSON\")\n    return m.Context.BindJSON(obj) // or entirely alternative implementation\n}\n// Using the appropriate function signature now\nfunc (repository *UrlRepo) CreateUrl(c *gin.Context) {\n    myCtx := &MyGinContext{c}\n    var url models.Url\n    _ = myCtx.BindJSON(&url) // will also print \"my own BindJSON\"\n    // ...\n    // other gin.Context methods are promoted and available on MyGinContext\n    myCtx.Status(200)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67347905/is-this-a-reasonable-way-to-run-sections-of-go-code-as-root-on-linux",
    "body": "package main\nimport (\n\t\"net\"\n\t\"net/rpc\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n)\nconst Addr = \"localhost:31337\"\ntype Api struct {\n\tserver *rpc.Server\n\tquit   *sync.WaitGroup\n}\nfunc newApi(address string, wg *sync.WaitGroup) (*Api, error) {\n\tif len(address) == 0 {\n\t\taddress = Addr\n\t}\n\trpcs := rpc.NewServer()\n\terrR := rpcs.RegisterName(\"V1\", &MethodsV1{ Quit : wg })\n\tsock, errL := net.Listen(\"tcp\", address)\n\tif errR != nil {\n\t\treturn nil, errR\n\t}\n\tif errL != nil {\n\t\treturn nil, errL\n\t}\n\tgo rpcs.Accept(sock)\n\treturn &Api{server: rpcs, quit: wg}, nil\n}\nfunc Server(wg *sync.WaitGroup, addr string) {\n\t_, err := newApi(addr, wg)\n\tif err != nil {\n\t\treturn\n\t}\n\tif wg != nil {\n\t\twg.Wait()\n\t} else {\n\t\t<- time.After(time.Second * 50)\n\t}\n}\nfunc Client(path string) (RpcResponse, error) {\n\taddr := Addr\n\tif a := os.Getenv(\"ADDR\"); len(a) > 0 {\n\t\taddr = a\n\t}\n\tresp := RpcResponse{}\n\tclient, errC := rpc.Dial(\"tcp\", addr)\n\tif nil == errC {\n\t\terrC = client.Call(\"V1.Cat\", &path, &resp);\n\t\tprintln(len(resp.Output))\n\t}\n\treturn resp, errC\n}\ntype RpcResponse struct { Output string }\ntype MethodsV1 struct {\n\tQuit *sync.WaitGroup\n}\nfunc (m1 *MethodsV1) Cat(path *string, response *RpcResponse) error {\n\tif m1.Quit != nil {\n\t\tdefer m1.Quit.Done()\n\t}\n\to, err := os.ReadFile(*path)\n\tresponse.Output = string(o)\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65243405/how-to-marshal-struct-as-if-it-were-an-anonymous-struct",
    "body": "type boo struct {\n\tBoo1 string `json:\"boo1\"`\n\t// \"-\" will tell encoding/json to ignore this field during (un)marshaling\n\tFoo foo `json:\"-\"`\n}\nfunc (b boo) MarshalJSON() ([]byte, error) {\n\t// Declare a new type using boo's definition, this\n\t// \"copies\" boo's structure but not its behaviour,\n\t// i.e. B has same fields as boo, but zero methods,\n\t// not even MarshalJSON -- this is necessary to avoid\n\t// infinite recursive calls to MarshalJSON.\n\ttype B boo\n\t// Declare a new type that *embeds* those structs whose\n\t// fields you want to be at the same level.\n\ttype T struct {\n\t\tB\n\t\tfoo\n\t}\n\t// Create an instance of the new type with its fields\n\t// set from the source boo instance and marshal it.\n\treturn json.Marshal(T{B: B(b), foo: b.Foo})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64068770/invoking-the-same-activity-inside-a-loop-in-cadence-workflow",
    "body": "func SampleWorkFlow(ctx workflow.Context, input string) error {\n    fmt.Println(\"Workflow started\")\n    ctx = workflow.WithTaskList(ctx, sampleTaskList)\n    ctx = workflow.WithActivityOptions(ctx, conf.ActivityOptions)\n    var result string\n    err := workflow.ExecuteActivity(ctx, \"SampleActivity\", input, \"string-value\").Get(ctx, &result)\n    if err != nil {\n        return err\n    }\n    var results []workflow.Future\n    for i := 1; i <= 10; i++ {\n    \tfuture := workflow.ExecuteActivity(ctx, \"SecondActivity\", input, i)\n    \tresults = append(results, future)\n    }\n    for i := 0; i < 10; i++ {\n    \tvar result string\n    \terr := results[i].Get(ctx, &result)\n    \tif err != nil {\n    \t\tlog.Println(\"err=\", err)\n    \t}\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63465062/how-to-set-context-path-for-go-chi",
    "body": "package main\nimport (\n    \"github.com/go-chi/chi\"\n    \"net/http\"\n)\nfunc main() {\n    r := chi.NewRouter()\n\n    r.Mount(\"/api\", Versions())\n    http.ListenAndServe(\"localhost:8080\", r)\n}\nfunc Versions() chi.Router {\n\tr := chi.NewRouter()\n\tr.Mount(\"/v1\", V1())\n // r.Mount(\"/v2\", V2())\n\treturn r\n}\nfunc V1() chi.Router {\n\tr := chi.NewRouter()\n\tr.Mount(\"/user\", User())\n//  r.Mount(\"/posts\", Post())\n\treturn r\n}\nfunc User() chi.Router {\n\tr := chi.NewRouter()\n    r.Route(\"/hello\", func(r chi.Router){\n        r.Get(\"/\", hello)\n    })\n\treturn r\n}\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Hello\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58698188/how-to-connect-ssl-on-hana-db-sap-sql-error-4321-only-secure-connections-ar",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"database/sql\"\n\t\"github.com/SAP/go-hdb/driver\"\n\t_ \"github.com/SAP/go-hdb/driver\"\n\t\"log\"\n)\nconst (\n\tHOST     = \"host\"\n\tPORT     = \":port\"\n\tUSERNAME = \"user\"\n\tPASSWORD = \"password\"\n)\nfunc main() {\n\tc := driver.NewBasicAuthConnector(\n\t\tHOST+PORT,\n\t\tUSERNAME,\n\t\tPASSWORD)\n\ttlsConfig := tls.Config{\n\t\tInsecureSkipVerify: false,\n\t\tServerName:         HOST,\n\t}\n\tc.SetTLSConfig(&tlsConfig)\n\tdb := sql.OpenDB(c)\n\tvar id int\n\tvar name string\n\tres := db.QueryRow(\"SELECT * FROM SCHEMA.TABLE LIMIT 1\")\n\tres.Scan(&id, &name)\n\tlog.Println(\"res \", id, name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57987883/why-are-database-connections-automatically-closed",
    "body": "var DB *gorm.DB\nfunc init() {\n    dbConfig = fmt.Sprintf(\"host=%s user=%s dbname=%s sslmode=%s password=%s\",\n\t\t\"localhost\",\n\t\t\"postgres\",\n\t\t\"dbname\",\n\t\t\"disable\",\n\t\t\"password\",\n\t)\n\tdb, err := gorm.Open(\"postgres\",\n\t\tdbConfig,\n\t)\n\tdb.SingularTable(true)\n\tdb.LogMode(true)\n\tdb.DB().SetConnMaxLifetime(10 * time.Second)\n\tdb.DB().SetMaxIdleConns(30)\n    DB = db\n\t// auto-connect，ping per 60s, re-connect on fail or error with intervels 3s, 3s, 15s, 30s, 60s, 60s ...\n\tgo func(dbConfig string) {\n\t\tvar intervals = []time.Duration{3 * time.Second, 3 * time.Second, 15 * time.Second, 30 * time.Second, 60 * time.Second,\n\t\t}\n\t\tfor {\n\t\t\ttime.Sleep(60 * time.Second)\n\t\t\tif e := DB.DB().Ping(); e != nil {\n\t\t\tL:\n\t\t\t\tfor i := 0; i < len(intervals); i++ {\n\t\t\t\t\te2 := RetryHandler(3, func() (bool, error) {\n\t\t\t\t\t\tvar e error\n\t\t\t\t\t\tDB, e = gorm.Open(\"postgres\", dbConfig)\n\t\t\t\t\t\tif e != nil {\n\t\t\t\t\t\t\treturn false, errorx.Wrap(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true, nil\n\t\t\t\t\t})\n\t\t\t\t\tif e2 != nil {\n\t\t\t\t\t\tfmt.Println(e.Error())\n\t\t\t\t\t\ttime.Sleep(intervals[i])\n\t\t\t\t\t\tif i == len(intervals)-1 {\n\t\t\t\t\t\t\ti--\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tbreak L\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}(dbConfig)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55596317/golang-gin-get-client-ip-in-ipv4-only",
    "body": "`\nfunc getClientIPByHeaders(req *http.Request) (ip string, err error) {\n\t// Client could be behid a Proxy, so Try Request Headers (X-Forwarder)\n\tipSlice := []string{}\n\tipSlice = append(ipSlice, req.Header.Get(\"X-Forwarded-For\"))\n\tipSlice = append(ipSlice, req.Header.Get(\"x-forwarded-for\"))\n\tipSlice = append(ipSlice, req.Header.Get(\"X-FORWARDED-FOR\"))\n\tfor _, v := range ipSlice {\n\t\tlog.Printf(\"debug: client request header check gives ip: %v\", v)\n\t\tif v != \"\" {\n\t\t\treturn v, nil\n\t\t}\n\t}\n\terr = errors.New(\"error: Could not find clients IP address from the Request Headers\")\n\treturn \"\", err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55206520/go-microservices-with-ambassador-api-gateway",
    "body": "apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: qotm\nspec:\n  replicas: 1\n  strategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: qotm\n    spec:\n      containers:\n        - name: qotm\n          image: <YOUR_IMAGE>\n          imagePullPolicy: Always\n          ports:\n            - name: http-api\n              containerPort: 3001\n          readinessProbe:\n            httpGet:\n              path: /health\n              port: 3001\n            initialDelaySeconds: 30\n            periodSeconds: 3\n          resources:\n            limits:\n              cpu: \"0.1\"\n              memory: 200Mi"
  },
  {
    "url": "https://stackoverflow.com/questions/54743025/how-to-decrease-the-size-of-docker-image-with-grpc-in-golang-supported",
    "body": "# Compile stage\nFROM golang:1.11 as build-env\nRUN apt-get update && \\\n    apt-get -y install git unzip build-essential autoconf libtool\nRUN git clone https://github.com/google/protobuf.git && \\\n    cd protobuf && \\\n    ./autogen.sh && \\\n    ./configure && \\\n    make && \\\n    make install && \\\n    ldconfig && \\\n    make clean && \\\n    cd .. && \\\n    rm -r protobuf\nRUN go get google.golang.org/grpc\nRUN go get github.com/golang/protobuf/protoc-gen-go\nRUN ls -la\nWORKDIR /helloworld\nCOPY . /helloworld\nRUN protoc -I helloworld/ helloworld/helloworld.proto --go_out=plugins=grpc:helloworld\nRUN go build -o server helloworld/greeter_server/main.go\n# Making image\nFROM alpine:3.8 AS host\nRUN apk add --no-cache \\\n\t\tca-certificates\nCOPY --from=build-env /helloworld/server /\n# copy any other files you need\nWORKDIR /\nEXPOSE 8000\nCMD [\"server\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/78159737/capture-zap-logger-output-when-i-cant-alter-the-way-logger-created",
    "body": "func TestNewLogger(t *testing.T) {\n\t// create a temporary file to redirect stderr\n\tfile, err := os.CreateTemp(\".\", \"temp\")\n\tassert.NoError(t, err)\n\tdefer os.Remove(file.Name())\n\tos.Stderr = file\n\t// init the logger as normal\n\tlogger, err := NewLogger(zapcore.DebugLevel, \"test\")\n\tassert.NoError(t, err)\n\tlogger.Info(\"test\")\n\t// read the file content for testing\n\tlogOut, err := os.ReadFile(file.Name())\n\tassert.NoError(t, err)\n\tassert.Regexp(t, `{\"level\":\"info\",\"ts\":.*,\"logger\":\"test\",\"caller\":\".*\",\"msg\":\"test\",\"INITIAL_FIELD\":\"INITIAL_FIELD_VALUE\"}`, string(logOut))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77681842/why-does-encoder-encodeelement-ignore-the-innerxml-tag",
    "body": "package main\nimport (\n    \"encoding/xml\"\n    \"fmt\"\n    \"strings\"\n)\nvar xmlFile string = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<statusdb>\n  <status date=\"today\">\n      <![CDATA[today is < yesterday]]>\n  </status>\n  <status  date=\"yesterday\">\n      <![CDATA[PM,\n      1. there are issues with the marshaller\n      2. i don't know how to solve them]]>\n  </status>\n</statusdb>`\ntype statusDB struct {\n    Status []*status `xml:\"status\"`\n}\ntype status struct {\n    XMLName xml.Name\n    Text string `xml:\",innerxml\"`\n    Date string `xml:\"date,attr\"`\n}\ntype statusMarshaller status\nfunc main() {\n    var projectStatus statusDB\n    err := xml.Unmarshal([]byte(xmlFile), &projectStatus)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    fmt.Println(\"In Go: \\\"\" + projectStatus.Status[0].Text + \"\\\"\")\n    fmt.Println(\"In Go: \\\"\" + projectStatus.Status[1].Text + \"\\\"\")\n    x, err := xml.MarshalIndent(projectStatus, \"\", \"  \")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    //why this is not printing properly\n    fmt.Printf(\"%s\\n\", x)\n}\nfunc (tagElement *status) UnmarshalXML(d *xml.Decoder, se xml.StartElement) error {\n    temp := statusMarshaller{}\n    d.DecodeElement(&temp, &se)\n    temp.Text = strings.TrimSpace(temp.Text)\n    temp.Text = strings.TrimPrefix(temp.Text, \"<![CDATA[\")\n    temp.Text = strings.TrimSuffix(temp.Text, \"]]>\")\n    *tagElement = status(temp)\n    return nil\n}\nfunc (tagElement status) MarshalXML(d *xml.Encoder, se xml.StartElement) error {\n    tagElement.Text = \"<![CDATA[\" + tagElement.Text + \"]]>\"\n    temp := statusMarshaller(tagElement)\n    return d.EncodeElement(temp, se)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77579885/set-different-middleware-for-a-subroute-in-go-chi",
    "body": "func main() {\n\tproxy, err := NewProxy(\"http://localhost:4422\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trouter := chi.NewRouter()\n\trouter.Get(\"/health\", handleHealth)\n\trouter.Route(\"/application\", func(r chi.Router) {\n\t\tr.Get(\"/health\", ProxyRequestHandler(proxy))\n\t\tr.Group(func(r chi.Router) {\n\t\t\tif mustBeSecure() {\n\t\t\t\tr.Use(keycloak.MustStandardKeycloakAuth(\"url\"))\n\t\t\t}\n\t\t\tr.HandleFunc(\"/*\", ProxyRequestHandler(proxy))\n\t\t})\n\t})\n\thttp.ListenAndServe(\"0.0.0.0:4411\", router)\n}\nfunc NewProxy(targetHost string) (*httputil.ReverseProxy, error) {\n\ttargetUrl, err := url.Parse(targetHost)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn httputil.NewSingleHostReverseProxy(targetUrl), nil\n}\nfunc ProxyRequestHandler(proxy *httputil.ReverseProxy) func(http.ResponseWriter, *http.Request) {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tproxy.ServeHTTP(w, r)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77553334/why-is-this-toy-go-quic-server-accepting-connections-but-not-streams-when-the-q",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/quic-go/quic-go\"\n)\nfunc main() {\n\ttlsConfig := &tls.Config{\n\t\tInsecureSkipVerify: true, // testing only\n\t\tNextProtos:         []string{\"h3\", \"http/1.1\"},\n\t}\n\turl := \"localhost:8080\"\n\treq, _ := http.NewRequest(\"POST\", url, bytes.NewBuffer([]byte(\"Hello, server!\")))\n\tfmt.Println(\"🚀 ~ file: client.go ~ line 21 ~ funcmain ~ req : \", req)\n\tctx := context.Background()\n\tconnection, err := quic.DialAddr(ctx, url, tlsConfig, nil)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n\tstream, err := connection.OpenStreamSync(context.Background())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\tn, err := stream.Write([]byte(\"Hello, server!\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = stream.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\" connection is ok\")\n\tfmt.Println(n)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77366365/get-trace-id-from-otel-trace-instrumented-with-golang-otelmux",
    "body": "func GetTraceID(ctx context.Context) string {\n\tspanCtx := trace.SpanContextFromContext(ctx)\n\tif spanCtx.HasTraceID() {\n\t\t// Since datadog trace provider (ddtrace) uses big endian uint64 for the trace ID, we must first to first convert it back to uint64.\n\t\ttraceID := spanCtx.TraceID()\n\t\ttraceIDRaw := [16]byte(traceID)\n\t\ttraceIDUint64 := byteArrToUint64(traceIDRaw[8:])\n\t\ttraceIDStr := strconv.FormatUint(traceIDUint64, 10)\n\t\treturn traceIDStr\n\t}\n\treturn \"\"\n}\nfunc byteArrToUint64(buf []byte) uint64 {\n\tvar x uint64\n\tfor i, b := range buf {\n\t\tx = x<<8 + uint64(b)\n\t\tif i == 7 {\n\t\t\treturn x\n\t\t}\n\t}\n\treturn x\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76728896/how-to-get-a-configuration-array-of-objects-using-viper-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/spf13/viper\"\n)\nfunc main() {\n\tviper.SetConfigType(\"json\")\n\tjsonConfig := `\n{\n    \"jobs\": [\n    {\n        \"source_folder\": \"folder1\",\n        \"create_albums\": \"off\",\n        \"delete_after_upload\": false,\n        \"include\": [\n            \"*.jpg\"\n        ],\n        \"exclude\": []\n    },\n    {\n        \"source_folder\": \"folder2\",\n        \"create_albums\": \"folderName\",\n        \"delete_after_upload\": true,\n        \"include\": [\n            \"*.jpg\", \"*.webp\"\n        ],\n        \"exclude\": [\n            \"abc*\"\n        ]\n    }\n    ]\n}`\n\ttype FolderUpload struct {\n\t\tSourceFolder      string   `mapstructure:\"source_folder\"`\n\t\tCreateAlbums      string   `mapstructure:\"create_albums\"`\n\t\tDeleteAfterUpload bool     `mapstructure:\"delete_after_upload\"`\n\t\tInclude           []string `mapstructure:\"include\"`\n\t\tExclude           []string `mapstructure:\"exclude\"`\n\t}\n\tif err := viper.ReadConfig(strings.NewReader(jsonConfig)); err != nil {\n\t\tpanic(err)\n\t}\n\tvar jobs []FolderUpload\n\tif err := viper.UnmarshalKey(\"jobs\", &jobs); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%+v\\n\", jobs)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76583884/how-to-compare-test-coverage-value-with-specific-threshold-for-golang-test-cases",
    "body": ".PHONY: lint\ntestcoverage := $(shell go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\\.[0-9]+')\nthreshold = 50\ntest:\n\t@go test -coverprofile=coverage.out -covermode=count  ./...\ncheck-coverage:\n\t@echo \"Test coverage: $(testcoverage)\"\n\t@echo \"Test Threshold: $(threshold)\"\n\t@echo \"-----------------------\"\n\t@if [ \"$(shell echo \"$(testcoverage) < $(threshold)\" | bc -l)\" -eq 1 ]; then \\\n\t\techo \"Please add more unit tests or adjust the threshold to a lower value.\"; \\\n\t\techo \"Failed\"; \\\n\t\texit 1; \\\n\telse \\\n\t\techo \"OK\"; \\\n\tfi"
  },
  {
    "url": "https://stackoverflow.com/questions/76583664/golang-chromedp-dockerfile",
    "body": "FROM golang:1.20.5-buster AS build-stage\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 go build -o dockergo\n# Build the test binary\nRUN CGO_ENABLED=0 go test -c -o dockergo.test\n# Run the tests in the container\nFROM chromedp/headless-shell:114.0.5735.199 AS run-test-stage\nWORKDIR /app\n# Copy other files that is needed to run the test (testdata?).\nCOPY . .\nCOPY --from=build-stage /app/dockergo.test ./dockergo.test\nRUN /app/dockergo.test -test.v\n# Deploy the application binary into a lean image\nFROM chromedp/headless-shell:114.0.5735.199 AS build-release-stage\nCOPY --from=build-stage /app/dockergo /dockergo\nEXPOSE 8080\nENTRYPOINT [\"/dockergo\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/76420390/golang-websocket-gorilla-with-cookie-authentification",
    "body": "package auth\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt\"\n)\nfunc ValidateToken(jwtToken string) (*jwt.MapClaims, error) {\n\t// parse the token\n\ttoken, err := jwt.Parse(strings.Replace(jwtToken, \"Bearer \", \"\", 1), func(token *jwt.Token) (interface{}, error) {\n\t\t_, ok := token.Method.(*jwt.SigningMethodHMAC)\n\t\tif !ok {\n\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n\t\t}\n\t\treturn []byte(\"Abcd1234!!\"), nil\n\t})\n\t// err while parsing the token\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// token valid\n\tvar claims jwt.MapClaims\n\tvar ok bool\n\tif claims, ok = token.Claims.(jwt.MapClaims); ok && token.Valid {\n\t\treturn &claims, nil\n\t}\n\treturn nil, fmt.Errorf(\"token not valid\")\n}\nfunc GenerateToken(username, password string) (string, error) {\n\t// TODO: here you can add logic to check against a DB\n\t//...\n\t// create a new token by providing the cryptographic algorithm\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\t// set default/custom claims\n\tclaims := token.Claims.(jwt.MapClaims)\n\tclaims[\"exp\"] = time.Now().Add(24 * time.Hour * 3).Unix()\n\tclaims[\"username\"] = username\n\tclaims[\"password\"] = password\n\ttokenString, err := token.SignedString([]byte(\"Abcd1234!!\"))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn tokenString, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420390/golang-websocket-gorilla-with-cookie-authentification",
    "body": "package middlewares\nimport (\n\t\"net/http\"\n\t\"websocketauth/auth\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc VerifyUser() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tnotAuth := []string{\"/signin\"}\n\t\trequestPath := c.Request.URL.Path\n\t\tfor _, val := range notAuth {\n\t\t\tif val == requestPath {\n\t\t\t\tc.Next()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\ttoken, err := c.Cookie(\"chartJWT\")\n\t\tif err != nil {\n\t\t\tc.Redirect(http.StatusPermanentRedirect, \"/signin\")\n\t\t}\n\t\tclaims, err := auth.ValidateToken(token)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\tc.Set(\"jwt\", *claims)\n\t\tc.Next()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420390/golang-websocket-gorilla-with-cookie-authentification",
    "body": "package handlers\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"websocketauth/auth\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt\"\n\t\"github.com/gorilla/websocket\"\n)\nvar Upgrader websocket.Upgrader\ntype LoginUserReq struct {\n\tUsername string `json:\"username\" binding:\"required\"`\n\tPassword string `json:\"password\" binding:\"required\"`\n}\nfunc LoginUser(c *gin.Context) {\n\tvar input LoginUserReq\n\tif err := c.ShouldBind(&input); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\treturn\n\t}\n\t// I don't know what you do within the handler.Service.LoginUser() method\n\ttoken, err := auth.GenerateToken(input.Username, input.Password)\n\tif err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\treturn\n\t}\n\tc.SetCookie(\"chartJWT\", token, 60*60*24, \"/\", \"localhost\", false, true)\n\tc.JSON(http.StatusOK, gin.H{\"user\": token})\n}\nfunc JoinRoom(c *gin.Context) {\n\tclaims := c.MustGet(\"jwt\").(jwt.MapClaims)\n\tfmt.Println(\"username\", claims[\"username\"])\n\tfmt.Println(\"password\", claims[\"password\"])\n\tws, err := Upgrader.Upgrade(c.Writer, c.Request, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tchartToken, err := c.Cookie(\"chartJWT\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"chartToken\", chartToken)\n\t_ = ws\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76286833/how-can-i-solve-the-issue-of-cookies-not-being-transferred-between-localhost-por",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n)\nfunc setHeader(w http.ResponseWriter, cookieName, cookieValue string, maxAge int) {\n\tw.Header().Set(\"Access-Control-Allow-Origin\", \"http://localhost:8080\")\n\tw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\thttp.SetCookie(w, &http.Cookie{\n\t\tName:     cookieName,\n\t\tValue:    cookieValue,\n\t\tMaxAge:   maxAge,\n\t\tHttpOnly: true,\n\t})\n}\nfunc main() {\n\tmuxWeb := http.NewServeMux()\n\t// serve the HTML page.\n\tmuxWeb.Handle(\"/\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t_, err := w.Write([]byte(page))\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}))\n\t// Dump the request to see what cookies is sent to the server.\n\tmuxWeb.Handle(\"/resource\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tdump, err := httputil.DumpRequest(r, false)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t_, _ = w.Write(dump)\n\t}))\n\tweb := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: muxWeb,\n\t}\n\tgo func() {\n\t\tlog.Fatal(web.ListenAndServe())\n\t}()\n\tmuxAPI := http.NewServeMux()\n\tmuxAPI.Handle(\"/login1\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tsetHeader(w, \"login1\", \"0.0.0.0\", 1200)\n\t}))\n\tmuxAPI.Handle(\"/login2\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tsetHeader(w, \"login2\", \"localhost-session\", 0)\n\t}))\n\tmuxAPI.Handle(\"/login3\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tsetHeader(w, \"login3\", \"localhost\", 1200)\n\t}))\n\tapi := &http.Server{\n\t\tAddr:    \":8081\",\n\t\tHandler: muxAPI,\n\t}\n\tgo func() {\n\t\tlog.Fatal(api.ListenAndServe())\n\t}()\n\tfmt.Println(\"Open http://localhost:8080/ in the browser\")\n\tselect {}\n}\nvar page string = `\n<!DOCTYPE html>\n<html>\n  <body>\n    <script type=\"module\">\n      async function login(url) {\n        const response = await fetch(url, {\n          mode: 'cors',\n          credentials: 'include',\n        });\n      }\n      await login('http://0.0.0.0:8081/login1');\n      await login('http://localhost:8081/login2');\n      await login('http://localhost:8081/login3');\n      window.location = '/resource';\n    </script>\n  </body>\n</html>\n`"
  },
  {
    "url": "https://stackoverflow.com/questions/75901868/how-to-mock-db-ping-without-sqlmock",
    "body": "// Connect opens a connection to the database.\nfunc Connect() (*sql.DB, error) {\n    return sql.Open(\"mysql\", \"root:secret@tcp(s-maria-db)/s_db\")\n}\n// Pinger defines an interface for pinging.\ntype Pinger interface {\n    Ping() error\n}\n// Ping attempts to ping the database, trying several times before failing.\nfunc Ping(p Pinger) error {\n    const maxAttempts = 60\n    var err error\n    for i := 0; i < maxAttempts; i++ {\n        if err = p.Ping(); err == nil {\n            return nil\n        }\n        if i < maxAttempts - 1 {\n            time.Sleep(time.Second)\n        }\n    }\n    return err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75850470/duplicate-entry-when-updating-through-parent-of-has-many-relationship",
    "body": "package main\nimport (\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n)\n// docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:latest\ntype Quiz struct {\n\tID uint `json:\"id\"`\n\t// UserID      string `json:\"userId\"`\n\tAuthor string `json:\"author\"`\n\t// Name        string `json:\"name\"`\n\t// Description string `json:\"description\"`\n\t// has many relationship with Question\n\tQuestions []Question `json:\"questions\" gorm:\"constraint:OnDelete:CASCADE;\"`\n}\ntype Question struct {\n\tID       uint   `json:\"id\"`\n\tQuestion string `json:\"question\"`\n\t// belongs to Quiz\n\tQuizID uint\n}\nfunc main() {\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/questions?charset=utf8mb4&parseTime=True&loc=Local\"\n\tdb, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Quiz{})\n\tdb.AutoMigrate(&Question{})\n\t// seed data\n\tquestionToIns := []Question{\n\t\t{ID: 1, Question: \"question 1\"},\n\t\t{ID: 2, Question: \"question 2\"},\n\t}\n\tquizToIns := []Quiz{\n\t\t{ID: 1, Author: \"John Doe\", Questions: questionToIns},\n\t}\n\tdb.Create(quizToIns)\n\t// start replacing\n\tif err = db.Where(\"quiz_id = ?\", 1).Delete(&Question{}).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tquestionToUpd := []Question{\n\t\t{ID: 3, Question: \"new question\", QuizID: 1},\n\t}\n\tif err = db.Create(questionToUpd).Error; err != nil {\n\t\tpanic(err)\n\t}\n\t// end replacing\n\t// start editing\n\tvar question Question\n\tif err = db.Find(&question, 3).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tquestion.Question = \"updated description\"\n\tif err = db.Updates(question).Error; err != nil {\n\t\tpanic(err)\n\t}\n\t// end editing\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75182353/how-to-serialize-and-deserialize-errors-string-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype RecursiveErr struct {\n\tMessage string `json:\"Message\"`\n\tErr     error  `json:\"error\"`\n}\nfunc (r RecursiveErr) Error() string {\n\treturn r.Message\n}\nfunc main() {\n\t// recursive - marshal\n\tchildErr := RecursiveErr{Message: \"leaf-child error\"}\n\tparentErr := RecursiveErr{Message: \"root error\", Err: &childErr}\n\tdata, _ := json.MarshalIndent(&parentErr, \"\", \"\\t\")\n\tfmt.Println(string(data))\n\t// recursive - unmarshal\n\tvar parsedParentErr RecursiveErr\n\tjson.Unmarshal(data, &parsedParentErr)\n\tfmt.Println(parsedParentErr.Message)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74950158/how-to-exclude-a-column-from-being-selected",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Product struct {\n\tID        int    `gorm:\"primaryKey\" json:\"id\"`\n\tName      string `gorm:\"notNull;size:125\" json:\"name\"`\n\tInventory int    `gorm:\"-:all\" json:\"inventory\"`\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Product{})\n\tdb.Create(&Product{Name: \"pen\"})\n\tdb.Create(&Product{Name: \"box\"})\n\tvar product Product\n\tdb.Find(&product, 1)\n    // here you can still access and set the JSON.\n    // Obviously, the value cannot be retrieved from the DB as it doesn't exist there\n\tproduct.Inventory = 22\n\tdata, _ := json.Marshal(product)\n\tfmt.Println(string(data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74806623/automatically-include-group-version-kind-in-serialized-kubernetes-resource",
    "body": "package main\nimport (\n\t\"os\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/apimachinery/pkg/runtime/serializer/json\"\n)\nfunc main() {\n\tscheme := runtime.NewScheme()\n\tcorev1.AddToScheme(scheme)\n\tserializer := json.NewSerializerWithOptions(\n\t\tjson.DefaultMetaFactory, scheme, scheme,\n\t\tjson.SerializerOptions{\n\t\t\tPretty: true,\n\t\t\tYaml:   true,\n\t\t\tStrict: true,\n\t\t})\n\tnamespace := corev1.Namespace{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: \"example\",\n\t\t},\n\t}\n\tgvks, isUnversioned, err := scheme.ObjectKinds(&namespace)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif !isUnversioned && len(gvks) == 1 {\n\t\tnamespace.TypeMeta = metav1.TypeMeta{\n\t\t\tKind:       gvks[0].Kind,\n\t\t\tAPIVersion: gvks[0].GroupVersion().Identifier(),\n\t\t}\n\t}\n\tif err := serializer.Encode(&namespace,\n\t\tos.Stdout); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74445816/aws-sdk-go-v2-putobject-api-error-accessdenied",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"net/http\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3/types\"\n)\nfunc GetAwsConfig() (*aws.Config, error) {\n\tcfg, err := config.LoadDefaultConfig(context.TODO(),\n\t\t// config.WithClientLogMode(aws.LogRequestWithBody|aws.LogResponseWithBody),\n\t\tconfig.WithRegion(\"eu-west-1\"),\n\t\tconfig.WithHTTPClient(&http.Client{Transport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t}}),\n\t\tconfig.WithEndpointResolverWithOptions(\n\t\t\taws.EndpointResolverWithOptionsFunc(func(service, region string, options ...interface{}) (aws.Endpoint, error) {\n\t\t\t\treturn aws.Endpoint{\n\t\t\t\t\tPartitionID:       \"aws\",\n\t\t\t\t\tURL:               \"http://127.0.0.1:4566\",\n\t\t\t\t\tSigningRegion:     \"eu-west-1\",\n\t\t\t\t\tHostnameImmutable: true,\n\t\t\t\t}, nil\n\t\t\t}),\n\t\t))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &cfg, err\n}\nfunc main() {\n\tcfg, _ := GetAwsConfig()\n\ts3Client := s3.NewFromConfig(*cfg, func(o *s3.Options) {\n\t\to.Credentials = aws.AnonymousCredentials{}\n\t})\n\tif _, err := s3Client.PutObject(context.Background(), &s3.PutObjectInput{\n\t\tBucket: aws.String(\"mybucket\"),\n\t\tKey:    aws.String(\"myfile\"),\n\t\tBody:   bytes.NewReader([]byte(\"hello\")),\n\t\tACL:    types.ObjectCannedACLPrivate,\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74445600/add-colly-package-output-text-to-map-in-golang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/gocolly/colly/v2\"\n)\ntype contest struct{}\nfunc AtcoderFunc(contests map[string]map[string]map[string]string) {\n\tcollector := colly.NewCollector(\n\t\tcolly.AllowedDomains(\"atcoder.jp\", \"www.atcoder.jp\"),\n\t)\n\tformat := \"2006-01-02 15:04:05-0700\"\n\tloc, _ := time.LoadLocation(\"Asia/Calcutta\")\n\tcontests[\"UpcomingContest\"] = make(map[string]map[string]string)\n\tfor i := 1; i < 3; i++ {\n\t\trawI := strconv.Itoa(i)\n\t\tcontests[\"UpcomingContest\"][rawI] = make(map[string]string)\n\t\tcontestSelTime := fmt.Sprintf(\"#contest-table-upcoming  div  div  table  tbody  tr:nth-child(%d)  td:nth-child(1)  a\", i+1)\n\t\tcontestSelName := fmt.Sprintf(\"#contest-table-upcoming  div  div  table  tbody  tr:nth-child(%d)  td:nth-child(2)\", i)\n\t\t// for contest name\n\t\tcollector.OnHTML(contestSelName, func(element *colly.HTMLElement) {\n\t\t\tcontestName := element.ChildText(\"a\")\n\t\t\tcontests[\"UpcomingContest\"][rawI][\"Name\"] = contestName\n\t\t})\n\t\t// for contestTime\n\t\tcollector.OnHTML(contestSelTime, func(element *colly.HTMLElement) {\n\t\t\tContestStartTime := element.ChildText(\"time\")\n\t\t\tparsed_time, _ := time.Parse(format, ContestStartTime)\n\t\t\tIST_time := parsed_time.In(loc)\n\t\t\tcontests[\"UpcomingContest\"][rawI][\"Time\"] = fmt.Sprint(IST_time)\n\t\t})\n\t}\n\tcollector.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n\tcollector.Visit(\"https://atcoder.jp/contests\")\n}\nfunc main() {\n\tcontests := make(map[string]map[string]map[string]map[string]string)\n\tcontests[\"AtCoder\"] = make(map[string]map[string]map[string]string)\n\tAtcoderFunc(contests[\"AtCoder\"])\n\tdata, _ := json.MarshalIndent(contests, \"\", \"  \")\n\tfmt.Println(string(data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74360571/how-to-insert-with-select-using-gorm",
    "body": "package main\nimport (\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n)\ntype TableOne struct {\n\tSomeValue int\n\tName      string\n\tAge       int\n}\ntype TableTwo struct {\n\tVal  int\n\tName string\n\tAge  int\n}\nfunc main() {\n\t// refer https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/todo?charset=utf8mb4&parseTime=True&loc=Local\"\n\tdb, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// first approach - Raw SQL\n\tif dbTrn := db.Exec(`INSERT INTO table_twos (val, name, age)\n\tSELECT table_ones.some_value, '', 0\n\tFROM table_ones\n\tWHERE table_ones.some_value = 50`).Error; dbTrn != nil {\n\t\tpanic(dbTrn.Error)\n\t}\n\t// second approach - split into two actions\n\tvar recordsOne []TableOne\n\trecordsTwo := make([]TableTwo, 0)\n\tdb.Where(\"some_value=?\", 50).Find(&recordsOne)\n\tfor _, v := range recordsOne {\n\t\trecordsTwo = append(recordsTwo, TableTwo{Val: v.SomeValue, Name: \"\", Age: 0})\n\t}\n\tdb.Create(&recordsTwo)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74043317/not-seeing-manually-created-nested-aws-xray-subsegments-in-aws-console",
    "body": "package main\nimport (\n\t\"net\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/aws/aws-xray-sdk-go/xray\"\n\t\"github.com/davecgh/go-spew/spew\"\n)\ntype ConsoleEmitter struct {\n}\nfunc (c *ConsoleEmitter) Emit(seg *xray.Segment) {\n\tspew.Dump(seg)\n}\nfunc (c *ConsoleEmitter) RefreshEmitterWithAddress(raddr *net.UDPAddr) {\n\treturn\n}\nvar _ xray.Emitter = (*ConsoleEmitter)(nil)\nfunc init() {\n\txray.Configure(xray.Config{\n\t\tDaemonAddr:     \"127.0.0.1:2000\", // default\n\t\tServiceVersion: \"1.2.3\",\n\t\t// console emitter to view the hierarchy of the traces locally\n\t\t// without the xray daemon\n\t\tEmitter: &ConsoleEmitter{},\n\t})\n}\nfunc main() {\n\thttp.Handle(\"/\", xray.Handler(xray.NewFixedSegmentNamer(\"myApp\"), http.HandlerFunc(top)))\n\thttp.ListenAndServe(\":7000\", nil)\n}\nfunc top(w http.ResponseWriter, r *http.Request) {\n\t// use the context provided by xray for nested hierarchy\n\tctx, subSeg := xray.BeginSubsegment(r.Context(), \"top\")\n\t_, childSeg := xray.BeginSubsegment(ctx, \"top-sleep\")\n\ttime.Sleep(time.Millisecond * 50)\n\tchildSeg.Close(nil)\n\tmiddle(w, r)\n\tsubSeg.Close(nil)\n}\nfunc middle(w http.ResponseWriter, r *http.Request) {\n\tctx, subSeg := xray.BeginSubsegment(r.Context(), \"middle\")\n\t_, childSeg := xray.BeginSubsegment(ctx, \"middle-sleep\")\n\ttime.Sleep(time.Millisecond * 100)\n\tchildSeg.Close(nil)\n\tbottom(w, r)\n\tsubSeg.Close(nil)\n}\nfunc bottom(w http.ResponseWriter, r *http.Request) {\n\t_, subSeg := xray.BeginSubsegment(r.Context(), \"bottom\")\n\tw.Write([]byte(\"Hello!\"))\n\tsubSeg.Close(nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73805159/why-golang-mysql-driver-return-bad-connection-in-update-delete-sql",
    "body": "//category_controller.go\ntype CategoryRepository interface {\n\tCreate(ctx context.Context, category domain.Category) domain.Category\n\tUpdate(ctx context.Context, category domain.Category) domain.Category\n\tDelete(ctx context.Context, category domain.Category)\n\tFindById(ctx context.Context, categoryId int) (domain.Category, error)\n\tFindAll(ctx context.Context) []domain.Category\n}\n//category_repository_impl.go\ntype CategoryRepositoryImpl struct {\n\tdb *sql.DB\n}\nfunc NewCategoryRepository(db *sql.DB) CategoryRepository {\n\treturn &CategoryRepositoryImpl{db: db}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73613808/how-can-i-separate-generated-code-package-and-user-code-but-have-them-accessible",
    "body": "package main\nimport (\n\t\"context\"\n\t\"database/sql\"\n)\n// Sample SQL C Code\ntype DBTX interface {\n\tExecContext(context.Context, string, ...interface{}) (sql.Result, error)\n\tPrepareContext(context.Context, string) (*sql.Stmt, error)\n\tQueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(context.Context, string, ...interface{}) *sql.Row\n}\ntype Queries struct {\n\tdb DBTX\n}\nfunc (q *Queries) DeleteAccount(ctx context.Context, id int64) error {\n\t// _, err := q.db.ExecContext(ctx, deleteAccount, id)\n\t// return err\n\treturn nil // Pretend that this always works\n}\ntype Querier interface {\n\tDeleteAccount(ctx context.Context, id int64) error\n}\n//\n// Your custom \"dynamic\" queries\n//\ntype myDynamicQueries struct {\n\tdb DBTX\n}\nfunc (m *myDynamicQueries) GetDynamicResult(ctx context.Context) error {\n\t// _, err := q.db.ExecContext(ctx, deleteAccount, id)\n\t// return err\n\treturn nil // Pretend that this always works\n}\ntype myDynamicQuerier interface {\n\tGetDynamicResult(ctx context.Context) error\n}\n// Combine things\ntype allDatabase struct {\n\t*Queries  // Note: You could embed this directly into myDynamicQueries instead of having a seperate struct if that is your preference\n\t*myDynamicQueries\n}\ntype DatabaseFunctions interface {\n\tQuerier\n\tmyDynamicQuerier\n}\nfunc main() {\n        // Basic example\n\tvar db DatabaseFunctions\n\tdb = getDatabase()\n\tdb.DeleteAccount(context.Background(), 0)\n\tdb.GetDynamicResult(context.Background())\n}\n// getDatabase - Perform whatever is needed to connect to database...\nfunc getDatabase() allDatabase {\n\tsqlc := &Queries{db: nil}           // In reality you would use New() to do this!\n\tmyDyn := &myDynamicQueries{db: nil} // Again it's often cleaner to use a function\n\treturn allDatabase{Queries: sqlc, myDynamicQueries: myDyn}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73222503/golang-example-of-jsonrpc-over-websocket",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"github.com/gorilla/websocket\"\n)\ntype Args struct {\n\tA int\n\tB int\n}\ntype Arith int\nfunc (t *Arith) Multiply(args *Args, reply *int) error {\n\t*reply = args.A * args.B\n\treturn nil\n}\ntype WebSocketConn struct {\n\tconn *websocket.Conn\n}\nfunc (wsc *WebSocketConn) Read(p []byte) (n int, err error) {\n\t_, msg, err := wsc.conn.ReadMessage()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tcopy(p, msg)\n\treturn len(msg), nil\n}\nfunc (wsc *WebSocketConn) Write(p []byte) (n int, err error) {\n\terr = wsc.conn.WriteMessage(websocket.TextMessage, p)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(p), nil\n}\nfunc (wsc *WebSocketConn) Close() error {\n\treturn wsc.conn.Close()\n}\nvar (\n\tupgrader = websocket.Upgrader{}\n\trpcServer = rpc.NewServer()\n\n)\n// WebSocket 处理函数\nfunc wsHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to upgrade connection\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tgo rpcServer.ServeCodec(jsonrpc.NewServerCodec(&WebSocketConn{conn: conn}))\n}\nfunc main() {\n\trpcServer.Register(new(Arith))\n\thttp.HandleFunc(\"/ws\", wsHandler)\n\thttp.ListenAndServe(\":7000\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73222503/golang-example-of-jsonrpc-over-websocket",
    "body": "// client.go\npackage main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"github.com/gorilla/websocket\"\n)\ntype Args struct {\n\tA int\n\tB int\n}\ntype WebSocketConn struct {\n\tconn *websocket.Conn\n}\nfunc (wsc *WebSocketConn) Read(p []byte) (n int, err error) {\n\t_, msg, err := wsc.conn.ReadMessage()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tcopy(p, msg)\n\treturn len(msg), nil\n}\nfunc (wsc *WebSocketConn) Write(p []byte) (n int, err error) {\n\terr = wsc.conn.WriteMessage(websocket.TextMessage, p)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn len(p), nil\n}\nfunc (wsc *WebSocketConn) Close() error {\n\treturn wsc.conn.Close()\n}\nfunc main() {\n\tconn, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:7000/ws\", nil)\n\tif err != nil {\n\t\tlog.Fatal(\"Error connecting to server:\", err)\n\t}\n\tdefer conn.Close()\n\twsc := &WebSocketConn{conn: conn}\n\targs := &Args{A: 3, B: 4}\n\tvar reply int\n\tclient := rpc.NewClientWithCodec(jsonrpc.NewClientCodec(wsc))\n\terr = client.Call(\"Arith.Multiply\", args, &reply)\n\tif err != nil {\n\t\tlog.Fatal(\"Multiply error:\", err)\n\t}\n\tfmt.Printf(\"Multiply: %d*%d=%d\\n\", args.A, args.B, reply)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72499124/golang-go-aes-cbc-ciphertext-gets-padded-with-16-0x00-bytes-for-some-reason",
    "body": "import (\n    ...\n    \"github.com/zenazn/pkcs7pad\"\n)\n...\nkey := []byte(\"b8ae2fe8669c0401fb289e6ab6247924\")\niv := []byte(\"e0332fc2a9743e4f\")\nplaintext := []byte(\"aaaaaaaaaaaa{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\")\nplaintext = pkcs7pad.Pad(plaintext, aes.BlockSize)\t// 1. pad the plaintext with PKCS#7\nblock, err := aes.NewCipher(key)\nif err != nil {\n    panic(err)\n}\nciphertext := make([]byte, len(plaintext))\t\t\t// 2. allocate len(plaintext)\nmode := cipher.NewCBCEncrypter(block, iv)\nmode.CryptBlocks(ciphertext, plaintext)\nfmt.Printf(\"%x\\n\", ciphertext) // caf8fe667f4087e1b67d8c9c57fcb1f56b368cafb4bfecbda1e481661ab7b93d87703fb140368d3034d5187c53861c74ccd202bac41937be75731f23796f1516"
  },
  {
    "url": "https://stackoverflow.com/questions/72499124/golang-go-aes-cbc-ciphertext-gets-padded-with-16-0x00-bytes-for-some-reason",
    "body": "import (\n    ...\n    \"crypto/rand\"\n    \"io\"\n    \"github.com/zenazn/pkcs7pad\"\n)\n...\nkey := []byte(\"b8ae2fe8669c0401fb289e6ab6247924\")\nplaintext := []byte(\"{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}\")\nplaintext = pkcs7pad.Pad(plaintext, aes.BlockSize)\nblock, err := aes.NewCipher(key)\nif err != nil {\n    panic(err)\n}\nciphertext := make([]byte, aes.BlockSize+len(plaintext))\niv := ciphertext[:aes.BlockSize]\n_, err = io.ReadFull(rand.Reader, iv)\t// create a random IV\nif err != nil {\n    panic(err)\n}\nmode := cipher.NewCBCEncrypter(block, iv)\nmode.CryptBlocks(ciphertext[aes.BlockSize:], plaintext)\nfmt.Printf(\"%x\\n\", ciphertext)"
  },
  {
    "url": "https://stackoverflow.com/questions/72312384/go-promoted-fields-in-nested-struct-for-xml-decoding",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\ntype News struct { // 👈 move to here\n\tPublishdate string `xml:\"news>publication_date\"` // 👈 Use \">\" to tell its parent. https://github.com/golang/go/blob/0a1a092c4b56a1d4033372fbd07924dad8cbb50b/src/encoding/xml/typeinfo.go#L198-L199\n\tTitle       string `xml:\"news>title\"`\n\tSummary     string `xml:\"news>keywords\"`\n}\ntype urlset struct {\n\tXMLName xml.Name `xml:\"urlset\"`\n\tURL     []struct {\n\t\tLoc  string `xml:\"loc\"`\n\t\tNews `xml:\"news\"` // 👈 do not give the name\n\t} `xml:\"url\"`\n}\nfunc getXML(url string) ([]byte, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn []byte{}, fmt.Errorf(\"GET error: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn []byte{}, fmt.Errorf(\"Status error: %v\", resp.StatusCode)\n\t}\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn []byte{}, fmt.Errorf(\"Read body: %v\", err)\n\t}\n\treturn data, nil\n}\nfunc main() {\n\tvar URLset urlset\n\t/* To avoid the link not working in the future, I write the value directly.\n\turl := \"https://www.dw.com/de/news-sitemap.xml\"\n\tif xmlBytes, err := getXML(url); err != nil {\n\t\tfmt.Printf(\"Failed to get XML: %v\", err)\n\t} else {\n\t\txml.Unmarshal(xmlBytes, &URLset)\n\t}\n\t*/\n\txmlBytes := []byte(`\n<urlset>\n\t<url>\n\t\t<loc>https://www.dw.com/de/kopf-an-kopf-rennen-bei-parlamentswahl-in-australien/a-61887162</loc>\n\t\t<news:news>\n\t\t\t<news:publication>\n\t\t\t\t<news:name>Deutsche Welle</news:name>\n\t\t\t\t<news:language>de</news:language>\n\t\t\t</news:publication>\n\t\t\t<news:publication_date>2022-05-21T11:28:55.875Z</news:publication_date>\n\t\t\t<news:title>Kopf-an-Kopf-Rennen bei Parlamentswahl in Australien</news:title>\n\t\t\t<news:keywords>Australien,Parlamentswahl,Scott Morrison,Anthony Albanese,Labor-Partei,Liberale</news:keywords>\n\t\t</news:news>\n\t\t<image:image>\n\t\t\t<image:loc>https://static.dw.com/image/61872101_403.jpg</image:loc>\n\t\t\t<image:caption>Der australische Premierminister Scott Morrison (r.) und sein Herausforderer, Oppositionsführer Anthony Albanese</image:caption>\n\t\t</image:image>\n\t</url>\n\t<url>\n\t\t<loc>https://www.dw.com/de/ukraine-aktuell-selenskyj-verlangt-entsch%C3%A4digungsfonds/a-61885143</loc>\n\t\t<news:news>\n\t\t\t<news:publication>\n\t\t\t\t<news:name>Deutsche Welle</news:name>\n\t\t\t\t<news:language>de</news:language>\n\t\t\t</news:publication>\n\t\t\t<news:publication_date>2022-05-21T11:10:21.813Z</news:publication_date>\n\t\t\t<news:title>Ukraine aktuell: Selenskyj verlangt Entschädigungsfonds</news:title>\n\t\t\t<news:keywords>Ukraine,Krieg,Russland,Wolodymyr Selenskyj,Wladimir Putin,Mariupol</news:keywords>\n\t\t</news:news>\n\t\t<image:image>\n\t\t\t<image:loc>https://static.dw.com/image/61885205_403.jpg</image:loc>\n\t\t\t<image:caption>75. Filmfestival Cannes | Rede von Wolodymyr Selenskyj</image:caption>\n\t\t</image:image>\n\t</url>\n<urlset>\n`)\n\txml.Unmarshal(xmlBytes, &URLset)\n\t/************************** XML parser *************************/\n\tfor _, URLElement := range URLset.URL {\n\t\t/*\n\t\t   fmt.Println(\n\t\t       \"[Element]:\",\n\t\t       \"\\nTitle #\", URLElement.News.Title,\n\t\t       \"\\nPublicationDate #\", URLElement.News.Publishdate,\n\t\t       \"\\nSummary#\", URLElement.News.Summary,\n\t\t       \"\\nLoc #\", URLElement.Loc, \"\\n\")\n\t\t*/\n\t\tfmt.Println( // 👈 Now, this work!\n\t\t\t\"[Element]:\",\n\t\t\t\"\\nTitle #\", URLElement.Title,\n\t\t\t\"\\nPublicationDate #\", URLElement.Publishdate,\n\t\t\t\"\\nSummary#\", URLElement.Summary,\n\t\t\t\"\\nLoc #\", URLElement.Loc, \"\\n\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72278723/how-to-handle-multiple-queries-in-gorm",
    "body": "var data []SlimeResponse\ndb := service.gormdb\nsubQueryHoldingOn := db.\n  Select(\"count(rnIg)\").\n  Where(\"rnSquidStatus = 'In system' AND rnSmId = ?\", smId).\n  Table(\"ruins\")\nsubQueryInSystem := db.\n  Select(\"count(rnIg)\").\n  Where(\"rnSquidStatus = 'Holding on' AND rnSmId = ?\", smId).\n  Table(\"ruins\")\ngroupSubQueryHoldingOn := db.\n  Select(\"GROUP_CONCAT(rnIg)\").\n  Where(\"rnSquidStatus = 'In system' AND rnSmId = ?\", smId).\n  Table(\"ruins\")\ngroupSubQueryInSystem := db.\n  Select(\"GROUP_CONCAT(rnIg)\").\n  Where(\"rnSquidStatus = 'Holding on' AND rnSmId = ?\", smId).\n  Table(\"ruins\")\ndb = db.Select(\"smId as slimeId, slStatus, slPPIV, slHighRiskSituation, (?) as holdingOn, (?) as inSystem, smSuspectedCorona, IF(smStatusClosed != 0, 1, 0) as statusClosed, smSurge, (?) as ruinsOnHold, (?) as ruinsInSystem\", subQueryHoldingOn, subQueryInSystem, groupSubQueryHoldingOn, groupSubQueryInSystem)\ndb = db.Where(\"smId != ?\", 0).Group(\"smId \").Having(\"smId > ?\", 0)\ndb = db.Table(\"slimes\").Find(&data)"
  },
  {
    "url": "https://stackoverflow.com/questions/72278723/how-to-handle-multiple-queries-in-gorm",
    "body": "var data []SlimeResponse\ndb := service.gormdb\ndb = db.Select(\n  `\n    smId AS 'slimeId',\n    slStatus,\n    slPPIV,\n    slHighRiskSituation,\n    (\n      SELECT count(rnIg) FROM ruins WHERE rnSquidStatus = 'Holding on' AND rnSmId = ?\n    ) AS 'holdingOn',\n    (\n      SELECT count(rnIg) FROM ruins WHERE rnSquidStatus = 'In system' AND rnSmId = ?\n    ) AS 'inSystem',\n    smSuspectedCorona,\n    IF(smStatusClosed != 0, 1, 0) as statusClosed,\n    smSurge,\n    (\n      SELECT GROUP_CONCAT(rnName) FROM ruins WHERE rnSquidStatus = 'Holding on' AND rnSmId = ?\n    ) as 'ruinsOnHold',\n    (\n      SELECT GROUP_CONCAT(rnName) FROM ruins WHERE rnSquidStatus = 'In system' AND rnSmId = ?\n    ) as 'ruinsInSystem'\n  `, smId, smId, smId, smId\n)\ndb = db.Where(\"smId != ?\", 0).Group(\"smId \").Having(\"smId > ?\", 0)\ndb = db.Table(\"slimes\").Find(&data)"
  },
  {
    "url": "https://stackoverflow.com/questions/72270386/go-colly-parallelism-decreases-the-number-of-links-scraped",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/gocolly/colly/v2\"\n\t\"github.com/gocolly/colly/v2/queue\"\n)\nfunc parallel(n int) {\n\tstart := time.Now()\n\tcnt := 0\n\tqueue, _ := queue.New(8, &queue.InMemoryQueueStorage{MaxSize: 1000}) // tried up to 8 threads\n\tfileName := \"data_par.csv\"\n\tfile, err := os.Create(fileName)\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not create file, err: %q\", err)\n\t\treturn\n\t}\n\tdefer file.Close() // close the file after the main routine exits\n\twriter := csv.NewWriter(file)\n\tdefer func() {\n\t\twriter.Flush()\n\t\tif err := writer.Error(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\tc := colly.NewCollector(\n\t\tcolly.AllowedDomains(\"internshala.com\", \"https://internshala.com/internship/detail\",\n\t\t\t\"https://internshala.com/internship/\", \"internshala.com/\", \"www.intershala.com\"),\n\t)\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tif e.Attr(\"class\") != \"view_detail_button\" {\n\t\t\treturn\n\t\t}\n\t\tdetailsLink := e.Attr(\"href\")\n\t\te.Request.Visit(detailsLink)\n\t})\n\tc.OnRequest(func(r *colly.Request) {\n\t\twriter.Write([]string{r.URL.String()})\n\t})\n\tfor i := 1; i < n; i++ {\n\t\tqueue.AddURL(\"https://internshala.com/internships/page-\" + strconv.Itoa(i))\n\t}\n\tqueue.Run(c)\n\tt := time.Since(start)\n\tlog.Printf(\"time: %v\\tamount: %d\\n\", t, cnt)\n}\nfunc seq(n int) {\n\tstart := time.Now()\n\tc := colly.NewCollector(\n\t\tcolly.AllowedDomains(\"internshala.com\", \"https://internshala.com/internship/detail\",\n\t\t\t\"https://internshala.com/internship/\", \"internshala.com/\", \"www.intershala.com\"),\n\t)\n\tfileName := \"data_seq.csv\"\n\tfile, err := os.Create(fileName)\n\tcnt := 0\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not create file, err: %q\", err)\n\t\treturn\n\t}\n\tdefer file.Close() // close the file after the main routine exits\n\twriter := csv.NewWriter(file)\n\tdefer func() {\n\t\twriter.Flush()\n\t\tif err := writer.Error(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tif e.Attr(\"class\") != \"view_detail_button\" {\n\t\t\treturn\n\t\t}\n\t\tdetailsLink := e.Attr(\"href\")\n\t\te.Request.Visit(detailsLink)\n\t})\n\tc.OnRequest(func(r *colly.Request) {\n\t\twriter.Write([]string{r.URL.String()})\n\t})\n\tfor i := 1; i < n; i++ {\n\t\tc.Visit(\"https://internshala.com/internships/page-\" + strconv.Itoa(i))\n\t}\n\tt := time.Since(start)\n\tlog.Printf(\"time: %v\\tamount: %d\\n\", t, cnt)\n}\nfunc main() {\n\tfmt.Println(\"sequential\")\n\tseq(6)\n\tfmt.Println(strings.Repeat(\"#\", 50))\n\tfmt.Println(\"parallel\")\n\tparallel(6)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71893934/how-to-connect-to-mongodb-running-inside-one-container-from-golang-app-container",
    "body": "func GetDatabase() (database *mongo.Database, ctx context.Context, err error) {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    client, err := mongo.Connect(ctx, options.Client().ApplyURI(\"mongodb://mongodb:27017\"))\n    if err != nil {\n        log.Println(\"database connection error\", err)\n        return nil, nil, err\n    }\n    err = client.Ping(ctx, readpref.Primary())\n    if err != nil {\n        log.Println(\"err\", err)\n        return\n    }\n    log.Println(\"Successfully connected and pinged.\")\n    dbName := GetDatabaseName()\n    database = client.Database(dbName)\n    log.Println(dbName, database.Name())\n    return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71737286/unexpected-behaviour-of-time-now-in-goroutine",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"sync\"\n\t\"time\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n///// global vars\nconst REQUESTS int = 100           // Single run size, performed two times (concurrent and sequential)\nconst URL string = \"SET_YOUR_OWN\" // Some file on a CDN somewhere; used for the GET requests\nconst DBNAME string = \"netRand.db\" // Name of the db file. Saved next to the executable\nconst WGMIN int = 1                // Start range for waitgroup size (inclusive)\nconst WGMAX int = 101              // Stop range for waitgroup size (exclusive)\nconst NREPEAT int = 10             // Number of times to repeat a run for a specific waitgroup size\n//// types\ntype timingResult struct {\n\t// Container for collecting results before persisting to DB\n\tWaitgroupSize       int\n\tConcurrentTimingsMs [REQUESTS]int64\n\tConcurrentTotalMs   int64\n\tSequentialTimingsMs [REQUESTS]int64\n\tSequentialTotalMs   int64\n}\n//// main\nfunc main() {\n\tdb := setupDb()\n\tdefer db.Close()\n\tfor i := WGMIN; i < WGMAX; i++ {\n\t\t// waitgroup size range\n\t\tfor j := 0; j < NREPEAT; j++ {\n\t\t\t// repeat for more data points\n\t\t\ttimings := requestTimes(i)\n\t\t\tpersistTimings(timings, db)\n\t\t\tfmt.Printf(\"\\n======== %v of %v ============\\n\", j+1, NREPEAT)\n\t\t\tfmt.Printf(\"current waitgroup size: %v\\n\", i)\n\t\t\tfmt.Printf(\"max waitgroup size: %v\\n\", WGMAX-1)\n\t\t}\n\t}\n}\nfunc requestTimes(waitgroupSize int) timingResult {\n\t// do NTIMES requests in go routines with waitgroupSize\n\t// do NTIMES requests sequentially\n\ttimings_concurrent, total_concurrent := concurrentRequests(waitgroupSize)\n\ttimings_sequential, total_sequential := sequentialRequests()\n\treturn timingResult{\n\t\tWaitgroupSize:       waitgroupSize,\n\t\tConcurrentTimingsMs: timings_concurrent,\n\t\tConcurrentTotalMs:   total_concurrent,\n\t\tSequentialTimingsMs: timings_sequential,\n\t\tSequentialTotalMs:   total_sequential,\n\t}\n}\nfunc persistTimings(timings timingResult, db *sql.DB) {\n\tpersistRun(timings, db)\n\tcurrentRunId := getCurrentRunId(db)\n\tpersistConcurrentTimings(currentRunId, timings, db)\n\tpersistSequentialTimings(currentRunId, timings, db)\n}\nfunc concurrentRequests(waitgroupSize int) ([REQUESTS]int64, int64) {\n\tstart := time.Now()\n\tvar wg sync.WaitGroup\n\tvar timings [REQUESTS]int64\n\tch := make(chan int64, REQUESTS)\n\tfor i := range timings {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tdoGetChannel(URL, ch)\n\t\t}()\n\t\t// waitgroupsize is controlled using modulo\n\t\t// making sure experiment size is always NTIMES\n\t\t// independent of waitgroupsize\n\t\tif i%waitgroupSize == 0 {\n\t\t\twg.Wait()\n\t\t}\n\t}\n\twg.Wait()\n\tclose(ch)\n\tcount := 0\n\tfor ret := range ch {\n\t\ttimings[count] = ret\n\t\tcount++\n\t}\n\treturn timings, time.Since(start).Milliseconds()\n}\nfunc doGetChannel(address string, channel chan int64) {\n\t// time get request and send to channel\n\tstartSub := time.Now().UnixMilli()\n\t_, err := http.Get(address)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tstopSub := time.Now().UnixMilli()\n\tdelta := stopSub - startSub\n\tchannel <- delta\n}\nfunc sequentialRequests() ([REQUESTS]int64, int64) {\n\tstartGo := time.Now()\n\tvar timings_sequential [REQUESTS]int64\n\tfor i := range timings_sequential {\n\t\ttimings_sequential[i] = doGetReturn(URL)\n\t}\n\treturn timings_sequential, time.Since(startGo).Milliseconds()\n}\nfunc doGetReturn(address string) int64 {\n\t// time get request without a waitgroup/channel\n\tstart := time.Now()\n\t_, err := http.Get(address)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tduration := time.Since(start).Milliseconds()\n\treturn duration\n}\n//// DB\nfunc setupDb() *sql.DB {\n\t//      __________________________runs____________________\n\t//     |                                                  |\n\t// concurrent_timings(fk: run_id)         sequential_timings(fk: run_id)\n\t//\n\tconst createRuns string = `\n    CREATE TABLE IF NOT EXISTS runs (\n    run_id INTEGER NOT NULL PRIMARY KEY,\n    time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    waitgroup_size INTEGER,\n    concurrent_total_ms INTEGER,\n    sequential_total_ms INTEGER,\n    concurrent_sequential_ratio REAL\n    );`\n\tconst createSequentialTimings string = `\n\tCREATE TABLE IF NOT EXISTS sequential_timings (\n\trun INTEGER,\n\tcall_number INTEGER,\n\ttiming_ms INTEGER,\n\tFOREIGN KEY(run) REFERENCES runs(run_id)\n\t);`\n\tconst createConcurrentTimings string = `\n\tCREATE TABLE IF NOT EXISTS concurrent_timings (\n\trun INTEGER,\n\tchannel_position INTEGER,\n\ttiming_ms INTEGER,\n\tFOREIGN KEY(run) REFERENCES runs(run_id)\n\t);`\n\t// retrieve platform appropriate connection string\n\tdbString := getConnectionString(DBNAME)\n\tdb, err := sql.Open(\"sqlite3\", dbString)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif _, err := db.Exec(createRuns); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif _, err := db.Exec(createSequentialTimings); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif _, err := db.Exec(createConcurrentTimings); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\treturn db\n}\nfunc getConnectionString(dbName string) string {\n\t// Generate platform appropriate connection string\n\t// the db is placed in the same directory as the current executable\n\t// retrieve the path to the currently executed executable\n\tex, err := os.Executable()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// retrieve path to containing dir\n\tdbDir := filepath.Dir(ex)\n\t// Append platform appropriate separator and dbName\n\tif runtime.GOOS == \"windows\" {\n\t\tdbDir = dbDir + \"\\\\\" + dbName\n\t} else {\n\t\tdbDir = dbDir + \"/\" + dbName\n\t}\n\treturn dbDir\n}\nfunc persistRun(timings timingResult, db *sql.DB) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tinsertRun, err := db.Prepare(`INSERT INTO runs(\n\t\twaitgroup_size,\n\t\tsequential_total_ms,\n\t\tconcurrent_total_ms,\n\t\tconcurrent_sequential_ratio)\n\t\tVALUES(?, ?, ?, ?)`)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tdefer tx.Stmt(insertRun).Close()\n\t_, err = tx.Stmt(insertRun).Exec(\n\t\ttimings.WaitgroupSize,\n\t\ttimings.SequentialTotalMs,\n\t\ttimings.ConcurrentTotalMs,\n\t\tfloat32(timings.ConcurrentTotalMs)/float32(timings.SequentialTotalMs),\n\t)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\nfunc getCurrentRunId(db *sql.DB) int {\n\trows, err := db.Query(\"SELECT MAX(run_id) FROM runs\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar run_id int\n\tfor rows.Next() {\n\t\terr = rows.Scan(&run_id)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}\n\trows.Close()\n\treturn run_id\n}\nfunc persistConcurrentTimings(runId int, timings timingResult, db *sql.DB) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tinsertTiming, err := db.Prepare(`INSERT INTO concurrent_timings(\n\t\trun,\n\t\tchannel_position,\n\t\ttiming_ms)\n\t\tVALUES(?, ?, ?)`)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfor i, timing := range timings.ConcurrentTimingsMs {\n\t\t_, err = tx.Stmt(insertTiming).Exec(\n\t\t\trunId,\n\t\t\ti,\n\t\t\ttiming,\n\t\t)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\nfunc persistSequentialTimings(runId int, timings timingResult, db *sql.DB) {\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tinsertTiming, err := db.Prepare(`INSERT INTO sequential_timings(\n\t\trun,\n\t\tcall_number,\n\t\ttiming_ms)\n\t\tVALUES(?, ?, ?)`)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfor i, timing := range timings.SequentialTimingsMs {\n\t\t_, err = tx.Stmt(insertTiming).Exec(\n\t\t\trunId,\n\t\t\ti,\n\t\t\ttiming,\n\t\t)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71716646/golang-calculate-address-of-another-process-memory-based-on-process-handle-and-o",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"github.com/0xrawsec/golang-win32/win32\"\n\tkernel32 \"github.com/0xrawsec/golang-win32/win32/kernel32\"\n\twindows \"golang.org/x/sys/windows\"\n)\nfunc memoryReadInit(pid uint32) (int64, bool) {\n\twin32handle, _ := kernel32.OpenProcess(0x0010 | windows.PROCESS_VM_READ | windows.PROCESS_QUERY_INFORMATION, win32.BOOL(0), win32.DWORD(pid))\n\tmoduleHandles, _ := kernel32.EnumProcessModules(win32handle)\n\tfor _, moduleHandle := range moduleHandles {\n\t\ts, _ := kernel32.GetModuleFilenameExW(win32handle, moduleHandle)\n\t\ttargetModuleFilename := \"UE4Game-Win64-Shipping.exe\"\n\t\tif(filepath.Base(s) == targetModuleFilename) {\n\t\t\tinfo, _ := kernel32.GetModuleInformation(win32handle, moduleHandle)\n\t\t\treturn int64(info.LpBaseOfDll), true\n\t\t}\n\t}\n\treturn 0, false\n}\nfunc main() {\n\tvar pid uint32 = 0x38E4 // put PID here, you can find it in Cheat Engine process list\n\tbaseAddress, _ := memoryReadInit(pid)\n\tfmt.Println(\"Base address is\", baseAddress)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71697664/insert-image-into-a-specific-place-of-docx-file-using-golang",
    "body": "`\npackage main\nimport (\n\t\"strconv\"\n\t\"github.com/nguyenthenguyen/docx\"\n)\nfunc main() {\n\t// Read from docx file\n\tr, err := docx.ReadDocxFile(\"./TestDocument.docx\")\n\t// Or read from memory\n\t// r, err := docx.ReadDocxFromMemory(data io.ReaderAt, size int64)\n\t// Or read from a filesystem object:\n\t// r, err := docx.ReadDocxFromFS(file string, fs fs.FS)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdocx1 := r.Editable()\n\t// Replace like https://golang.org/pkg/strings/#Replace\n\tdocx1.Replace(\"old_1_1\", \"new_1_1\", -1)\n\tdocx1.Replace(\"old_1_2\", \"new_1_2\", -1)\n\tdocx1.ReplaceLink(\"http://example.com/\", \"https://github.com/nguyenthenguyen/docx\", 1)\n\tdocx1.ReplaceHeader(\"out with the old\", \"in with the new\")\n\tdocx1.ReplaceFooter(\"Change This Footer\", \"new footer\")\n\tdocx1.WriteToFile(\"./new_result_1.docx\")\n\tdocx2 := r.Editable()\n\tdocx2.Replace(\"old_2_1\", \"new_2_1\", -1)\n\tdocx2.Replace(\"old_2_2\", \"new_2_2\", -1)\n\tdocx2.WriteToFile(\"./new_result_2.docx\")\n\t// Or write to ioWriter\n\t// docx2.Write(ioWriter io.Writer)\n\tdocx3 := r.Editable()\n\t//Currently only swaps apples for apples i.e. png to png, and not png to jpeg etc.\n\tdocx3.ReplaceImage(\"word/media/image1.png\", \"./new.png\")\n\t// replace the last image\n\timageIndex := docx3.ImagesLen()\n\tdocx3.ReplaceImage(\"word/media/image\"+strconv.Itoa(imageIndex)+\".png\", \"./new.png\")\n\tdocx3.WriteToFile(\"./new_result_3.docx\")\n\tr.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71232581/is-there-no-migration-file-at-all-in-gorm",
    "body": "func main() {\n    client, err := ent.Open(\"mysql\", \"root:pass@tcp(localhost:3306)/test\")\n    if err != nil {\n        log.Fatalf(\"failed connecting to mysql: %v\", err)\n    }\n    defer client.Close()\n    ctx := context.Background()\n    // Dump migration changes to an SQL script.\n    f, err := os.Create(\"migrate.sql\")\n    if err != nil {\n        log.Fatalf(\"create migrate file: %v\", err)\n    }\n    defer f.Close()\n    if err := client.Schema.WriteTo(ctx, f); err != nil {\n        log.Fatalf(\"failed printing schema changes: %v\", err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70312423/cannot-read-packet-from-minecraft-correctly-in-golang",
    "body": "  def _ReadVarintHelper(self):\n    \"\"\"Helper for the various varint-reading methods above.\n    Reads an unsigned, varint-encoded integer from the stream and\n    returns this integer.\n    Does no bounds checking except to ensure that we read at most as many bytes\n    as could possibly be present in a varint-encoded 64-bit number.\n    \"\"\"\n    result = 0\n    shift = 0\n    while 1:\n      if shift >= 64:\n        raise message.DecodeError('Too many bytes when decoding varint.')\n      try:\n        b = ord(self._buffer[self._pos])\n      except IndexError:\n        raise message.DecodeError('Truncated varint.')\n      self._pos += 1\n      result |= ((b & 0x7f) << shift)\n      shift += 7\n      if not (b & 0x80):\n        return result"
  },
  {
    "url": "https://stackoverflow.com/questions/69982637/bazel-build-docker-container-with-local-golang-module",
    "body": "load(\"@io_bazel_rules_go//go:def.bzl\", \"go_binary\", \"go_library\")\nload(\"@io_bazel_rules_docker//go:image.bzl\", \"go_image\")\nload(\"@io_bazel_rules_docker//container:container.bzl\", \"container_image\")\ngo_library(\n    name = \"hello_lib\",\n    srcs = [\"main.go\"],\n    importpath = \"go-example/cmd/hello\",\n    visibility = [\"//visibility:private\"],\n    deps = [\"//pkg/echo\"],\n)\ngo_binary(\n    name = \"hello\",\n    embed = [\":hello_lib\"],\n    visibility = [\"//visibility:public\"],\n)\ngo_image(\n    name = \"hello_go_image\",\n    embed = [\":hello_lib\"],\n    goarch = \"amd64\",\n    goos = \"linux\",\n    pure = \"on\",\n)\ncontainer_image(\n    name = \"docker\",\n    base = \":hello_go_image\",\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/69804291/ethereum-error-code-32000-messageunknown-account",
    "body": "import (\n  \"strings\"\n  \"crypto/ecdsa\"\n  \"math/big\"\n  \"github.com/ethereum/go-ethereum/ethclient\"\n  \"github.com/ethereum/go-ethereum/crypto\"\n  \"github.com/ethereum/go-ethereum/accounts/abi/bind\"\n)\nvar chainId = big.NewInt(1) // chain id for the ethereum mainnet, change according to needs\nfunc ecdsaPrivateKeyFromHex(privKeyHex string) *ecdsa.PrivateKey {\n  ecdsaKey, err := crypto.HexToECDSA(privKeyHex)\n  if err != nil { panic(err) }\n  return ecdsaKey\n}\nfunc newTransactOpts(privKey *ecdsa.PrivateKey) *bind.TransactOpts {\n  transactOpts, err := bind.NewKeyedTransactorWithChainID(privKey, chainId)\n  if err != nil { panic(err) }\n  return transactOpts\n}\nfunc newRpcClient() *ethclient.Client {\n  c, err := ethclient.Dial(\"insert rpc url here\")\n  if err != nil { panic(err) }\n\n  return c\n}\n// note: constructing the *types.Transaction object left as\n// an exercise to the reader\nfunc ExecuteTransaction(rawTransaction *types.Transaction) {\n  privKeyHex := \"0xblahblahblahblahblah\" // use your own account's private key\n  transactOpts := newTransactOpts(ecdsaPrivateKeyFromHex(privKeyHex))\n  signedTxn, err := transactOpts.Signer(transactOpts.From, rawTransaction)\n  if err != nil { panic(err) }\n\n  rpcClient := newRpcClient()\n  if err := rpcClient.SendTransaction(context.Background(), signedTxn); err != nil { panic(err) }\n  // do whatever\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69789292/how-to-sort-an-struct-array-by-dynamic-field-name-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"sort\"\n)\nfunc sortBy(jsonField string, arr []num) {\n\tif len(arr) < 1 {\n\t\treturn\n\t}\n\t// first we find the field based on the json tag\n\tvalueType := reflect.TypeOf(arr[0])\n\tvar field reflect.StructField\n\tfor i := 0; i < valueType.NumField(); i++ {\n\t\tfield = valueType.Field(i)\n\t\tif field.Tag.Get(\"json\") == jsonField {\n\t\t\tbreak\n\t\t}\n\t}\n\t// then we sort based on the type of the field\n\tsort.Slice(arr, func(i, j int) bool {\n\t\tv1 := reflect.ValueOf(arr[i]).FieldByName(field.Name)\n\t\tv2 := reflect.ValueOf(arr[j]).FieldByName(field.Name)\n\t\tswitch field.Type.Name() {\n\t\tcase \"int\":\n\t\t\treturn int(v1.Int()) < int(v2.Int())\n\t\tcase \"string\":\n\t\t\treturn v1.String() < v2.String()\n\t\tcase \"bool\":\n\t\t\treturn !v1.Bool() // return small numbers first\n\t\tdefault:\n\t\t\treturn false // return unmodified\n\t\t}\n\t})\n\tfmt.Printf(\"\\nsort by %s:\\n\", jsonField)\n\tprettyPrint(arr)\n}\nfunc prettyPrint(arr []num) {\n\tfor _, v := range arr {\n\t\tfmt.Printf(\"%+v\\n\", v)\n\t}\n}\ntype num struct {\n\tId   int    `json:\"id\"`\n\tName string `json:\"name\"`\n\tBig  bool   `json:\"big\"`\n}\nfunc main() {\n\tuserArray := []num{\n\t\t{1, \"one\", false},\n\t\t{5, \"five\", false},\n\t\t{40, \"fourty\", true},\n\t\t{9, \"nine\", false},\n\t\t{60, \"sixty\", true},\n\t}\n\tfmt.Println(\"original:\")\n\tprettyPrint(userArray)\n\tsortBy(\"id\", userArray[:])\n\tsortBy(\"name\", userArray[:])\n\tsortBy(\"big\", userArray[:])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69789292/how-to-sort-an-struct-array-by-dynamic-field-name-in-golang",
    "body": "original:\n{Id:1   Name:one     Big:false}\n{Id:5   Name:five    Big:false}\n{Id:40  Name:fourty  Big:true}\n{Id:9   Name:nine    Big:false}\n{Id:60  Name:sixty   Big:true}\nsort by id\n{Id:1   Name:one     Big:false}\n{Id:5   Name:five    Big:false}\n{Id:9   Name:nine    Big:false}\n{Id:40  Name:fourty  Big:true}\n{Id:60  Name:sixty   Big:true}\nsort by name\n{Id:5   Name:five    Big:false}\n{Id:40  Name:fourty  Big:true}\n{Id:9   Name:nine    Big:false}\n{Id:1   Name:one     Big:false}\n{Id:60  Name:sixty   Big:true}\nsort by big\n{Id:1   Name:one     Big:false}\n{Id:9   Name:nine    Big:false}\n{Id:5   Name:five    Big:false}\n{Id:40  Name:fourty  Big:true}\n{Id:60  Name:sixty   Big:true}"
  },
  {
    "url": "https://stackoverflow.com/questions/69691554/go-test-terminal-output",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"os\"\n\t\"testing\"\n)\nfunc TestOutput(t *testing.T) {\n\ttestData := []struct {\n\t\tArgs   []string\n\t\tOutput string\n\t}{\n\t\t{\n\t\t\tArgs:   []string{\"./macli\", \"hello\"},\n\t\t\tOutput: \"HELLO\\n\",\n\t\t},\n\t\t{\n\t\t\tArgs:   []string{\"\", \"Go <3\"},\n\t\t\tOutput: \"GO <3\\n\",\n\t\t},\n\t}\n\tfor _, test := range testData {\n\t\t// Init test\n\t\tos.Args = test.Args\n\t\tout = bytes.NewBuffer(nil)\n\t\t// Run test\n\t\tmain()\n\t\t// Evaluate output\n\t\tif actual := out.(*bytes.Buffer).String(); actual != test.Output {\n\t\t\tt.Errorf(\"expected '%s', but got '%s'\", test.Output, actual)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69343889/how-to-detect-if-current-terminal-supports-16-color-or-256-color-in-go",
    "body": "func Init(theme *ColorTheme, black bool, mouse bool) {\n\t{\n\t\tin, err := os.OpenFile(\"/dev/tty\", syscall.O_RDONLY, 0)\n\t\tif err != nil {\n\t\t\tpanic(\"Failed to open /dev/tty\")\n\t\t}\n\t\t_in = in\n\t\t// Break STDIN\n\t\t// syscall.Dup2(int(in.Fd()), int(os.Stdin.Fd()))\n\t}\n\tC.setlocale(C.LC_ALL, C.CString(\"\"))\n\t_screen = C.c_newterm()\n\tif _screen == nil {\n\t\tfmt.Println(\"Invalid $TERM: \" + os.Getenv(\"TERM\"))\n\t\tos.Exit(2)\n\t}\n\tC.set_term(_screen)\n\tif mouse {\n\t\tC.mousemask(C.ALL_MOUSE_EVENTS, nil)\n\t}\n\tC.noecho()\n\tC.raw() // stty dsusp undef\n\tif theme != nil {\n\t\tC.start_color()\n\t\tvar baseTheme *ColorTheme\n\t\tif C.tigetnum(C.CString(\"colors\")) >= 256 {\n\t\t\tbaseTheme = Dark256\n\t\t} else {\n\t\t\tbaseTheme = Default16\n\t\t}\n\t\tinitPairs(baseTheme, theme, black)\n\t\t_color = attrColored\n\t} else {\n\t\t_color = attrMono\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69093178/apply-yaml-file-using-k8s-sdk",
    "body": "package main\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"path/filepath\"\n\t\"github.com/pytimer/k8sutil/apply\"\n\t\"k8s.io/client-go/discovery\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\nconst applyStr = `\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-svc\nspec:\n  ports:\n  - name: web\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: ClusterIP\n`\nfunc main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\t// use the current context in kubeconfig\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdynamicClient, err := dynamic.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdiscoveryClient, err := discovery.NewDiscoveryClientForConfig(config)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tapplyOptions := apply.NewApplyOptions(dynamicClient, discoveryClient)\n\tif err := applyOptions.Apply(context.TODO(), []byte(applyStr)); err != nil {\n\t\tlog.Fatalf(\"apply error: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68688752/how-to-import-kfserving-client-package-in-golang",
    "body": "$ go list -m k8s.io/...\nk8s.io/api v0.19.2 => k8s.io/api v0.19.2\nk8s.io/apiextensions-apiserver v0.19.2 => k8s.io/apiextensions-apiserver v0.19.2\nk8s.io/apimachinery v0.19.2 => k8s.io/apimachinery v0.19.2\nk8s.io/apiserver v0.19.2 => k8s.io/apiserver v0.19.2\nk8s.io/client-go v11.0.1-0.20190805182717-6502b5e7b1b5+incompatible => k8s.io/client-go v0.19.2\nk8s.io/cloud-provider v0.19.2 => k8s.io/cloud-provider v0.19.2\nk8s.io/code-generator v0.19.2 => k8s.io/code-generator v0.19.2\nk8s.io/component-base v0.19.2 => k8s.io/component-base v0.19.2\nk8s.io/csi-translation-lib v0.19.2 => k8s.io/csi-translation-lib v0.19.2\nk8s.io/gengo v0.0.0-20200428234225-8167cfdcfc14\nk8s.io/klog v1.0.0 => k8s.io/klog v1.0.0\nk8s.io/klog/v2 v2.2.0\nk8s.io/kube-openapi v0.0.0-20200805222855-6aeccd4b50c6\nk8s.io/legacy-cloud-providers v0.17.4 => k8s.io/legacy-cloud-providers v0.19.2\nk8s.io/test-infra v0.0.0-20200803112140-d8aa4e063646 => k8s.io/test-infra v0.0.0-20200803112140-d8aa4e063646\nk8s.io/utils v0.0.0-20200912215256-4140de9c8800 => k8s.io/utils v0.0.0-20200324210504-a9aa75ae1b89"
  },
  {
    "url": "https://stackoverflow.com/questions/68623215/how-to-convert-google-cloud-pubsub-payload-to-logentry-object-in-golang",
    "body": "import (\n\t... omitted ...\n\t_ \"google.golang.org/genproto/googleapis/cloud/audit\"\n\tlogging \"google.golang.org/genproto/googleapis/logging/v2\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nfunc handlerLogEntry(w http.ResponseWriter, r *http.Request) {\n\tvar le logging.LogEntry\n\tbody, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Bad HTTP Request\", http.StatusBadRequest)\n\t\tlog.Printf(\"handlerLogEntry ReadAll error: %\", err)\n\t\treturn\n\t}\n\tif err := protojson.Unmarshal(body, &le); err != nil {\n\t\thttp.Error(w, \"Bad HTTP Request\", http.StatusBadRequest)\n\t\tlog.Printf(\"handlerLogEntry Unmarshal error: %\", err)\n\t\treturn\n\t}\n\ts := fmt.Sprintf(\"handlerLogEntry: %#v\", le)\n\tlog.Printf(s)\n\tfmt.Fprintln(w, s)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68591707/how-to-implement-authorization-code-grant-flow-in-golang-to-login-to-azure-ad",
    "body": "POST /{tenant}/oauth2/v2.0/token HTTP/1.1\nHost: https://login.microsoftonline.com\nContent-Type: application/x-www-form-urlencoded\nclient_id=6731de76-14a6-49ae-97bc-6eba6914391e\n&scope=https%3A%2F%2Fgraph.microsoft.com%2Fmail.read\n&code=OAAABAAAAiL9Kn2Z27UubvWFPbm0gLWQJVzCTE9UkP3pSx1aXxUjq3n8b2JRLk4OxVXr...\n&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F\n&grant_type=authorization_code\n&code_verifier=ThisIsntRandomButItNeedsToBe43CharactersLong\n&client_secret={client_secret}    // NOTE: Only required for web apps. This secret needs to be URL-Encoded."
  },
  {
    "url": "https://stackoverflow.com/questions/68465480/how-to-pass-a-java-string-array-string-to-go-via-cgo-jna",
    "body": "  public static _GoString_.ByValue JavaStringToGo(String jstr) {\n    try {\n      byte[] bytes = jstr.getBytes(\"utf-8\");\n      //\n      // Here you allocate memory for the bytes\n      //\n      ByteBuffer bb = ByteBuffer.allocateDirect(bytes.length);\n      bb.put(bytes);\n      //\n      // Here you only keep track of the pointer to the bytes\n      //\n      Pointer p = new Pointer(getAddress(bb));\n      //\n      // You never reference bb again, it is no longer reachable\n      // and its allocation can be reclaimed by the system\n      //\n      _GoString_.ByValue value = new _GoString_.ByValue();\n      value.n = new NativeSize(bytes.length);\n      value.p = p;\n      return value;\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/66778094/gorm-add-multiple-slices-in-inserting-in-a-many-to-many",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype User struct {\n\tgorm.Model\n\tName     string\n\tConversations []Conversation `gorm:\"many2many:user_conversations;\"`\n}\ntype Conversation struct {\n\tgorm.Model\n\tName string\n\tUsers []*User `gorm:\"many2many:user_conversations;\"`\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"many2many.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\t// Migrate the schema\n\terr = db.AutoMigrate(&User{}, &Conversation{})\n\tif err != nil {\n\t\tfmt.Print(err)\n\t}\n\tuserOne := User{\n\t\tName: \"User One\",\n\t}\n\tuserTwo := User{\n\t\tName: \"User Two\",\n\t}\n\t// Create users\n\tdb.Create(&userOne)\n\tdb.Create(&userTwo)\n\tconversation := Conversation{\n\t\tName: \"Conversation One\",\n\t}\n\t// Create conversation\n\tdb.Create(&conversation)\n\t// Append users\n\terr = db.Model(&conversation).Association(\"Users\").Append([]User{userOne, userTwo})\n\tif err != nil {\n\t\tfmt.Print(err)\n\t}\n\tfor _, convUser := range conversation.Users {\n\t\tfmt.Println(\"Hello I am in the conversation: \" + convUser.Name)\n\t}\n    // Clean up database\n\tdb.Delete(&userOne)\n\tdb.Delete(&userTwo)\n\tdb.Delete(&conversation)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64336549/cannot-find-input-layer-of-keras-model-when-loading",
    "body": "$ saved_model_cli show --dir ./url_recognizer --tag_set serve --signature_def serving_default\nThe given SavedModel SignatureDef contains the following input(s):\n  inputs['ExcessLength'] tensor_info:\n      dtype: DT_INT32\n      shape: (-1, 1)\n      name: serving_default_ExcessLength:0\n  [...]\nThe given SavedModel SignatureDef contains the following output(s):\n  outputs['output_1'] tensor_info:\n      dtype: DT_FLOAT\n      shape: (-1, 1)\n      name: StatefulPartitionedCall:0\nMethod name is: tensorflow/serving/predict"
  },
  {
    "url": "https://stackoverflow.com/questions/64336549/cannot-find-input-layer-of-keras-model-when-loading",
    "body": "// defining inputs\nexcessLength, err := tf.NewTensor([1]int32{0})\n// otherInput, err := tf.NewTensor([1]int32{0})\n// Calling session Run\noutput, err := model.Session.Run(\n    map[tf.Output]*tf.Tensor{\n        model.Graph.Operation(\"serving_default_ExcessLength\").Output(0): excessLength,\n        // model.Graph.Operation(\"serving_default_<OtherInput>\").Output(0): otherInput,\n    },\n    []tf.Output{\n        model.Graph.Operation(\"StatefulPartitionedCall\").Output(0),\n    },\n    nil)\nif err != nil {\n    fmt.Printf(\"Error using the model: %s\\n\", err.Error())\n    return\n}\n// Getting the result of the run throigh the graph\nval := output[0].Value()\nfmt.Printf(\"Output : %f\\n\", val)"
  },
  {
    "url": "https://stackoverflow.com/questions/63605243/how-to-get-the-ip-of-the-user-based-on-interaction-with-pod-in-k8s",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.HandleFunc(\"/\", ExampleHandler)\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc ExampleHandler(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Add(\"Content-Type\", \"application/json\")\n\tresp, _ := json.Marshal(map[string]string{\n\t\t\"ip\": GetIP(r),\n\t})\n\tw.Write(resp)\n}\n// GetIP gets a requests IP address by reading off the forwarded-for\n// header (for proxies) and falls back to use the remote address.\nfunc GetIP(r *http.Request) string {\n\tforwarded := r.Header.Get(\"X-FORWARDED-FOR\")\n\tif forwarded != \"\" {\n\t\treturn forwarded\n\t}\n\treturn r.RemoteAddr\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61859730/getting-random-coordinates-on-a-rectagle-without-overlapping",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"math\"\n\t\"math/rand\"\n\t\"os\"\n)\nconst (\n\twidth  int = 100\n\theight int = 200\n)\ntype Circle struct {\n\tCenter image.Point\n\tRadius int\n}\nfunc main() {\n\tcircles := map[Circle]bool{}\n\tbounds := image.Rectangle{image.Point{0, 0}, image.Point{width, height}}\n\tfor i := 0; i < 20; i++ {\n\t\tc := randomCircle(bounds)\n\t\tif overlaped(c, circles) {\n\t\t\tcontinue\n\t\t}\n\t\tcircles[c] = true\n\t}\n\tfmt.Println(circles)\n\tfile, err := os.Create(\"out.png\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\tdraw(width, height, circles, file)\n\tfile.Close()\n}\n// Determines if the circle overlaps with any in the given\n// circles collection.\nfunc overlaped(c Circle, circles map[Circle]bool) bool {\n\tfor circle := range circles {\n\t\tif overlap(circle, c) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n// Create a random circle within the\nfunc randomCircle(rect image.Rectangle) Circle {\n\tradius := randomRadius(rect.Max.X, rect.Max.Y) - 1\n\tx := randDim(width-radius, 0)\n\ty := randDim(height-radius, 0)\n\treturn Circle{\n\t\tCenter: image.Point{X: x, Y: y},\n\t\tRadius: radius,\n\t}\n}\nfunc randomRadius(width, height int) int {\n\tif width < height {\n\t\treturn rand.Intn(width / 2)\n\t} else {\n\t\treturn rand.Intn(height / 2)\n\t}\n}\nfunc randDim(max, min int) int {\n\treturn rand.Intn(max) + min\n}\nfunc distance(a, b image.Point) int {\n\treturn int(math.Sqrt(math.Pow(float64(b.X-a.X), 2) + math.Pow(float64(b.Y-a.Y), 2)))\n}\nfunc overlap(a, b Circle) bool {\n\treturn distance(a.Center, b.Center) < a.Radius+b.Radius\n}\n// Utility function to draw into a file object\nfunc draw(width, height int, circles map[Circle]bool, file *os.File) error {\n\timg := image.NewRGBA(image.Rect(0, 0, width, height))\n\t// Looping is probably very inefficient, but I'm not that familiar with the draw package\n\tfor circle := range circles {\n\t\tfor a := 0; a < 360; a++ {\n\t\t\tvar rads float64 = float64(a) * 0.017453\n\t\t\tx := float64(circle.Center.X) + float64(circle.Radius)*math.Cos(rads)\n\t\t\ty := float64(circle.Center.Y) + float64(circle.Radius)*math.Sin(rads)\n\t\t\timg.Set(int(x), int(y), color.RGBA{R: 255, G: 0, B: 0, A: 255})\n\t\t}\n\t}\n\tfor x := 0; x < width; x++ {\n\t\timg.Set(int(x), 0, color.RGBA{R: 0, G: 0, B: 255, A: 255})\n\t\timg.Set(int(x), height-1, color.RGBA{R: 0, G: 0, B: 255, A: 255})\n\t}\n\tfor y := 0; y < height; y++ {\n\t\timg.Set(width-1, y, color.RGBA{R: 0, G: 0, B: 255, A: 255})\n\t\timg.Set(0, y, color.RGBA{R: 0, G: 0, B: 255, A: 255})\n\t}\n\treturn png.Encode(file, img)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60263600/gorilla-mux-remove-or-replace-existing-routes",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/gorilla/mux\"\n\t\"net/http\"\n)\nvar router = mux.NewRouter()\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"bla\"))\n}\nfunc reloadHandler(w http.ResponseWriter, r *http.Request) {\n\trouter.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\tt, err := route.GetPathTemplate()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(t)\n\t\tif t == \"/\" {\n\t\t\troute.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {\n\t\t\t\twriter.Write([]byte(\"akjbsdkabdjkbaksdj\"))\n\t\t\t})\n\t\t}\n\t\treturn nil\n\t})\n}\nfunc main() {\n\trouter.HandleFunc(\"/\", handler)\n\trouter.HandleFunc(\"/reload\", reloadHandler)\n\thttp.ListenAndServe(\"localhost:8080\", router)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60200227/golang-gorm-reverse-hasmany-relation",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype Owner struct {\n\tgorm.Model\n\tProjects []Project\n}\ntype Project struct {\n\tgorm.Model\n\tOwnerID int\n\tOwner   Owner\n\tGallery []Gallery\n}\ntype Gallery struct {\n\tgorm.Model\n\tProjectID int\n\tProject   Project\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"many2many.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\terr = db.AutoMigrate(&Owner{}, &Project{}, &Gallery{})\n\tif err != nil {\n\t\treturn\n\t}\n\townerOne := Owner{}\n\tdb.Create(&ownerOne)\n\tprojectOne := Project{Owner: ownerOne}\n\tprojectTwo := Project{Owner: ownerOne}\n\tdb.Create(&projectOne)\n\tdb.Create(&projectTwo)\n\tgalleryOne := Gallery{Project: projectOne}\n\tgalleryTwo := Gallery{Project: projectOne}\n\tgalleryThree := Gallery{Project: projectTwo}\n\tgalleryFour := Gallery{Project: projectTwo}\n\tdb.Create(&galleryOne)\n\tdb.Create(&galleryTwo)\n\tdb.Create(&galleryThree)\n\tdb.Create(&galleryFour)\n\t// Find by project and preload owners\n\tfetchedProject := Project{}\n\tdb.Preload(\"Owner\").Find(&fetchedProject, projectOne.ID)\n\tfmt.Println(fetchedProject.Owner)\n\t// Find by a gallery and preload project and owner\n\tfetchedGallery := Gallery{}\n\tdb.Preload(\"Project.Owner\").Find(&fetchedGallery, galleryOne.ID)\n\tfmt.Printf(\"Gallery.id = %d --> Project.id = %d --> Owner.id = %d\\n\", fetchedGallery.ID,\n\t\tfetchedGallery.Project.ID, fetchedGallery.Project.Owner.ID)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59244393/how-to-handle-nullable-postgres-jsonb-data-and-parse-it-as-json",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"log\"\n\t_ \"github.com/lib/pq\"\n\t\"github.com/soroushj/sqlt\"\n)\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"dbname=dbname user=user password=password sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trow := db.QueryRow(`SELECT test_json FROM my_table WHERE id = $1`, 1)\n\ttestJSON := sqlt.NullRawMessage{}\n\terr = row.Scan(&testJSON)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif testJSON.Valid {\n\t\t// test_json is not null\n\t\t// Unmarshal testJSON.RawMessage\n\t} else {\n\t\t// test_json is null\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59160055/unable-to-pass-a-params-from-post-to-aws-lambda-from-amazon-api-gateway-for-gola",
    "body": "{\n        \"ToCountry\": \"US\",\n        \"ToState\": \"UT\",\n        \"SmsMessageSid\": \"SMed65aaxxxxxx5c7938df\",\n        \"NumMedia\": \"0\",\n        \"ToCity\": \"\",\n        \"FromZip\": \"\",\n        \"SmsSid\": \"SMed65aaxxxxxx938df\",\n        \"FromState\": \"\",\n        \"SmsStatus\": \"received\",\n        \"FromCity\": \"\",\n        \"Body\": \"Testing+again\",\n        \"FromCountry\": \"IN\",\n        \"To\": \"%2B1xxxxxx848\",\n        \"ToZip\": \"\",\n        \"NumSegments\": \"1\",\n        \"MessageSid\": \"SMed65aa5dxxxx7938df\",\n        \"AccountSid\": \"AC23xxxd98\",\n        \"From\": \"%2B9xxxxxx90\",\n        \"ApiVersion\": \"2010-04-01\"\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/59160055/unable-to-pass-a-params-from-post-to-aws-lambda-from-amazon-api-gateway-for-gola",
    "body": "// APIGatewayProxyRequest contains data coming from the API Gateway proxy\ntype APIGatewayProxyRequest struct {\n\tResource                        string                        `json:\"resource\"` // The resource path defined in API Gateway\n\tPath                            string                        `json:\"path\"`     // The url path for the caller\n\tHTTPMethod                      string                        `json:\"httpMethod\"`\n\tHeaders                         map[string]string             `json:\"headers\"`\n\tMultiValueHeaders               map[string][]string           `json:\"multiValueHeaders\"`\n\tQueryStringParameters           map[string]string             `json:\"queryStringParameters\"`\n\tMultiValueQueryStringParameters map[string][]string           `json:\"multiValueQueryStringParameters\"`\n\tPathParameters                  map[string]string             `json:\"pathParameters\"`\n\tStageVariables                  map[string]string             `json:\"stageVariables\"`\n\tRequestContext                  APIGatewayProxyRequestContext `json:\"requestContext\"`\n\tBody                            string                        `json:\"body\"`\n\tIsBase64Encoded                 bool                          `json:\"isBase64Encoded,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59147492/gin-error-panic-wildcard-route-conflicts-with-existing-children",
    "body": "// SetupRouter initialize routes and handlers\nfunc SetupRouter() *gin.Engine {\n    r := gin.Default()\n    r.GET(\"/\", controllers.Welcome)\n    r.GET(\"/resources\", controllers.GetResources)\n    r.GET(\"/resources/otherroute\", controllers.GetOResources)\n    resources := r.Group(\"/resources/:rid\")\n    {\n        resources.GET(\"\", controllers.GetResourcesByID)\n        resources.GET(\"otherroute\", controllers.GetOResources)\n        resources.GET(\"sub-resources\", controllers.GetSubResources)\n        subResources := resources.GET(\"sub-resources/:srid\")\n        {\n            subResources.GET(\"\", GetSubResourcesByID)\n            subResources.GET(\"/ssub-resources\", GetSSubResources)\n            subResources.GET(\"/ssub-resources/:ssrid\", GetSSubResourcesByID)\n        }\n    }\n    // .... etc.\n    return r\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56453730/how-to-handle-and-get-response-from-goroutines-in-golang",
    "body": "func GetPositionContext(ctx context.Context, uav pb.UAVControllerClient, uavID *pb.UAVID, projectID string) error {\n    log.Printf(\"getPosition start\")\n    stream, err := uav.GetPosition(ctx)\n    if err != nil {\n        return fmt.Errorf(\"ERROR getPosition: %v\", err.Error())\n    }\n    streamID, eventName := EventsSubscribe(projectID, uavID.Aircraft, \"get_position\")\n    errC := make(chan error)\n    // 受信ループ開始\n    go func() {\n        fmt.Print(\"start getPosition loop\")\n        for {\n            msg, err := stream.Recv() // msg UAVPosition\n            if err == io.EOF {\n                // read done.\n                fmt.Print(\"start getPosition loop closed\")\n                close(errC)\n                return\n            }\n            if err != nil {\n                errC <- fmt.Errorf(\"Failed to receive getPosition : %v\", err)\n                return\n            }\n            // log.Printf(\"Position point[%s](%f, %f, %f) H:%f\", uavID.Aircraft, msg.Latitude, msg.Longitude, msg.Altitude, msg.Heading)\n            wayPoint := models.WaypointItem{\n                Latitude:  msg.Latitude,\n                Longitude: msg.Longitude,\n                Altitude:  msg.Altitude,\n                Heading:   msg.Heading,\n            }\n            dronePosition := models.DronePosition{\n                Name:          uavID.Aircraft,\n                ItemParameter: wayPoint,\n            }\n            // publish to eventgo\n            publishNotif(dronePosition, streamID, eventName)\n\n            // Did you mean to return here? The for loop will only ever execute one time.\n            // If you didn't mean to return, then remove this close\n            close(errC)\n            return\n        }\n    }()\n    startMsg := pb.UAVControllerPositionRequest{\n        UavID:       uavID,\n        Instruction: true,\n        Interval:    2,\n    }\n    fmt.Print(\"send getPosition start\")\n    if err := stream.Send(&startMsg); err != nil {\n        return fmt.Errorf(\"Failed to send getPosition: %v\", err)\n    }\n    err = <- errC\n    stream.CloseSend()\n    fmt.Print(\"end of getPosition\")\n    return err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55305183/implementing-role-with-gin-jwt",
    "body": "func main() {\n    auth, err := jwt.New(jwt.Auth{\n        SecretKey: []byte(\"must change here\"),\n        // Authenticator authenticates a request and return jwt.MapClaims\n        // that contains a user information of the request.\n        Authenticator: func(c *gin.Context) (jwt.MapClaims, error) {\n            var loginForm LoginForm\n            if err := c.ShouldBind(&loginForm); err != nil {\n                return nil, jwt.ErrorAuthenticationFailed\n            }\n            u, ok := authenticate(req.Username, req.Password)\n            if ok {\n                return nil, jwt.ErrorAuthenticationFailed\n            }\n            return jwt.MapClaims{\n                \"username\": u.Username,\n                \"role\":     u.Role,\n            }, nil\n        },\n        // UserFetcher takes a jwt.MapClaims and return a user object.\n        UserFetcher: func(c *gin.Context, claims jwt.MapClaims) (interface{}, error) {\n            username, ok := claims[\"username\"].(string)\n            if !ok {\n                return nil, nil\n            }\n            return findByUsername(username)\n        },\n    })\n    // some lines\n    e.Use(jwt.ErrorHandler)\n    // issue authorization token\n    e.POST(\"/login\", auth.AuthenticateHandler)\n    // refresh token expiration\n    e.POST(\"/auth/refresh_token\", auth.RefreshHandler)\n    // role management\n    e.GET(\"/operator/hello\", Operator(auth), SayHello) // this is only for Operator\n    e.GET(\"/admin/hello\", Admin(auth), SayHello) // this is only for Admin\n}\nfunc Operator(m jwt.Auth) gin.HandlerFunc {\n\treturn m.VerifyPerm(func(claims jwt.MapClaims) bool {\n\t\treturn role(claims).IsOperator()\n\t})\n}\nfunc Admin(m jwt.Auth) gin.HandlerFunc {\n\treturn m.VerifyPerm(func(claims jwt.MapClaims) bool {\n\t\treturn role(claims).IsAdmin()\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/49961464/how-to-read-tcp-packets-on-a-tun-tap-interface",
    "body": "2020/03/07 15:52:23 tun interface: tun0\n2020/03/07 15:52:23 isTCP: false, header: ver=6 hdrlen=0 tos=0x0 totallen=0 id=0x8 flags=0x1 fragoff=0x1aff ttl=254 proto=128 cksum=0x0 src=0.0.0.0 dst=126.87.58.227\n2020/03/07 15:52:27 isTCP: false, header: ver=6 hdrlen=0 tos=0x0 totallen=0 id=0x8 flags=0x1 fragoff=0x1aff ttl=254 proto=128 cksum=0x0 src=0.0.0.0 dst=126.87.58.227\n2020/03/07 15:52:34 isTCP: false, header: ver=6 hdrlen=0 tos=0x0 totallen=0 id=0x8 flags=0x1 fragoff=0x1aff ttl=254 proto=128 cksum=0x0 src=0.0.0.0 dst=126.87.58.227\n2020/03/07 15:52:36 isTCP: true, header: ver=4 hdrlen=20 tos=0x0 totallen=60 id=0x9cec flags=0x2 fragoff=0x0 ttl=64 proto=6 cksum=0x89b7 src=10.2.0.10 dst=10.2.0.11\n2020/03/07 15:52:37 isTCP: true, header: ver=4 hdrlen=20 tos=0x0 totallen=60 id=0x9ced flags=0x2 fragoff=0x0 ttl=64 proto=6 cksum=0x89b6 src=10.2.0.10 dst=10.2.0.11\n2020/03/07 15:52:39 isTCP: true, header: ver=4 hdrlen=20 tos=0x0 totallen=60 id=0x9cee flags=0x2 fragoff=0x0 ttl=64 proto=6 cksum=0x89b5 src=10.2.0.10 dst=10.2.0.11\n2020/03/07 15:52:43 isTCP: true, header: ver=4 hdrlen=20 tos=0x0 totallen=60 id=0x9cef flags=0x2 fragoff=0x0 ttl=64 proto=6 cksum=0x89b4 src=10.2.0.10 dst=10.2.0.11"
  },
  {
    "url": "https://stackoverflow.com/questions/78983094/cloud-run-issues-with-drivers-not-installed-all-works-on-exactly-same-docker-co",
    "body": "FROM golang:1.23.1-bookworm\n# Install Node.js 18.x and npm\nRUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \\\n    && apt-get install -y nodejs \\\n    && apt-get clean\n# Create non-root user first\nRUN useradd -m appuser\n# Set up Playwright paths explicitly\nENV PLAYWRIGHT_DRIVER_PATH=/home/appuser/.cache/ms-playwright-go/1.48.2\nENV PLAYWRIGHT_BROWSERS_PATH=/home/appuser/.cache/ms-playwright\nENV PLAYWRIGHT_DOWNLOAD_HOST=https://playwright.azureedge.net\n# Add all dependencies for Playwright\nRUN apt-get update && apt-get install -y \\\n    libnss3 \\\n    libnspr4 \\\n    libatk1.0-0 \\\n    libatk-bridge2.0-0 \\\n    libcups2 \\\n    libdrm2 \\\n    libxkbcommon0 \\\n    libxcomposite1 \\\n    libxdamage1 \\\n    libxfixes3 \\\n    libxrandr2 \\\n    libgbm1 \\\n    libasound2 \\\n    libpango-1.0-0 \\\n    libcairo2 \\\n    fonts-liberation \\\n    libatspi2.0-0 \\\n    libxcursor1 \\\n    libgtk-3-0 \\\n    libpangocairo-1.0-0 \\\n    libcairo-gobject2 \\\n    libgdk-pixbuf-2.0-0 \\\n    libgstreamer1.0-0 \\\n    libxslt1.1 \\\n    libwoff1 \\\n    libvpx7 \\\n    libevent-2.1-7 \\\n    libopus0 \\\n    gstreamer1.0-plugins-base \\\n    libharfbuzz-icu0 \\\n    libenchant-2-2 \\\n    libsecret-1-0 \\\n    libhyphen0 \\\n    libmanette-0.2-0 \\\n    libwebpdemux2 \\\n    libgles2 \\\n    libx264-dev \\\n    gstreamer1.0-gl \\\n    libgstreamer-plugins-base1.0-0 \\\n    libgstreamer-plugins-bad1.0-0 \\\n    flite1-dev \\\n    flite \\\n    && rm -rf /var/lib/apt/lists/*\nWORKDIR /app\n# Copy go.mod and download dependencies\nCOPY go.mod ./\nRUN go mod download\n# Create necessary directories with correct ownership\nRUN mkdir -p /home/appuser/.cache/ms-playwright-go/1.48.2 && \\\n    mkdir -p /home/appuser/.cache/ms-playwright && \\\n    chown -R appuser:appuser /home/appuser/.cache\n# Install Playwright and browsers\nRUN go install github.com/playwright-community/playwright-go/cmd/playwright@v0.4802.0 && \\\n    playwright install --with-deps chromium && \\\n    playwright install && \\\n    chown -R appuser:appuser /home/appuser/.cache && \\\n    echo \"Playwright installation successful\"\n# Copy the rest of the files\nCOPY . .\n# Install Tailwind CSS and build the CSS\nRUN npm install\nRUN npx tailwindcss -i ./styles.css -o ./static/styles.css\n# Build the Go application\nRUN CGO_ENABLED=0 GOOS=linux go build -o /app/server ./cmd/server.go\n# Set final permissions\nRUN chown -R appuser:appuser /app\n# Switch to non-root user\nUSER appuser\nCMD [\"/app/server\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/77422213/how-to-hide-all-keys-when-using-slog-in-golang",
    "body": "package valuelog\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log/slog\"\n\t\"strings\"\n\t\"sync\"\n)\ntype Handler struct {\n\th   slog.Handler\n\tmu  *sync.Mutex\n\tout io.Writer\n}\nfunc NewHandler(o io.Writer, opts *slog.HandlerOptions) *Handler {\n\tif opts == nil {\n\t\topts = &slog.HandlerOptions{}\n\t}\n\treturn &Handler{\n\t\tout: o,\n\t\th: slog.NewTextHandler(o, &slog.HandlerOptions{\n\t\t\tLevel:       opts.Level,\n\t\t\tAddSource:   opts.AddSource,\n\t\t\tReplaceAttr: nil,\n\t\t}),\n\t\tmu: &sync.Mutex{},\n\t}\n}\nfunc (h *Handler) Enabled(ctx context.Context, level slog.Level) bool {\n\treturn h.h.Enabled(ctx, level)\n}\nfunc (h *Handler) WithAttrs(attrs []slog.Attr) slog.Handler {\n\treturn &Handler{h: h.h.WithAttrs(attrs), out: h.out, mu: h.mu}\n}\nfunc (h *Handler) WithGroup(name string) slog.Handler {\n\treturn &Handler{h: h.h.WithGroup(name), out: h.out, mu: h.mu}\n}\nfunc (h *Handler) Handle(ctx context.Context, r slog. Record) error {\n\n\tformattedTime := r.Time.Format(\"2006/01/02 15:04:05\")\n\t//add time and message to values\n\tstrs := []string{formattedTime, r.Message}\n\tif r.NumAttrs() != 0 {\n\t\tr.Attrs(func(a slog.Attr) bool {\n\t\t\tstrs = append(strs, a.Value.String())\n\t\t\treturn true\n\t\t})\n\t}\n\tresult := strings.Join(strs, \" \")\n\tb := []byte(result)\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\t_, err := h.out.Write(b)\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77373169/will-sarama-client-trigger-rebalance-if-this-client-does-not-fetch-messages-for",
    "body": "// The maximum amount of time the consumer expects a message takes to\n\t\t// process for the user. If writing to the Messages channel takes longer\n\t\t// than this, that partition will stop fetching more messages until it\n\t\t// can proceed again.\n\t\t// Note that, since the Messages channel is buffered, the actual grace time is\n\t\t// (MaxProcessingTime * ChannelBufferSize). Defaults to 100ms.\n\t\t// If a message is not written to the Messages channel between two ticks\n\t\t// of the expiryTicker then a timeout is detected.\n\t\t// Using a ticker instead of a timer to detect timeouts should typically\n\t\t// result in many fewer calls to Timer functions which may result in a\n\t\t// significant performance improvement if many messages are being sent\n\t\t// and timeouts are infrequent.\n\t\t// The disadvantage of using a ticker instead of a timer is that\n\t\t// timeouts will be less accurate. That is, the effective timeout could\n\t\t// be between `MaxProcessingTime` and `2 * MaxProcessingTime`. For\n\t\t// example, if `MaxProcessingTime` is 100ms then a delay of 180ms\n\t\t// between two messages being sent may not be recognized as a timeout."
  },
  {
    "url": "https://stackoverflow.com/questions/77240736/parser-table-golang",
    "body": "// Input table as a single string\ntableString := `State    Version Support eRSTP Enhancements Bridge Priority Hello Time Max Age Time Transmit Count Forward Delay Max Hops Cost Style    BPDU Guard Timeout VersionForSNMP\nDisabled RSTP            On                 0               2 s        20 s         32             15 s          20       STP (16 bit)  Don't shutdown     RSTP          `\n// Split the table into rows based on newline characters\nrows := strings.Split(tableString, \"\\n\")\n// If the header and the data rows are not the same, fail\nif len(rows[0]) != len(rows[1]) {\n\tfmt.Println(\"unaligned table\")\n\treturn\n\t// Other way to handle it may be to pad either the header or the data row\n}\nvar i = len(rows[0]) - 2\nvar indexes []int\nfor i >= 0 {\n\tif string(rows[0][i]) == \" \" && string(rows[0][i+1]) != \" \" &&\n\t\tstring(rows[1][i]) == \" \" && string(rows[1][i+1]) != \" \" {\n\t\tindexes = append(indexes, i)\n\t}\n\ti--\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76982562/docker-system-df-vs-system-df-docker-api-endpoint",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/docker/cli/cli/command/formatter\"\n\t\"github.com/docker/docker/api/types\"\n\t\"github.com/docker/docker/client\"\n\t\"github.com/docker/go-units\"\n)\nfunc main() {\n\tcli, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdiskUsage, err := cli.DiskUsage(context.Background(), types.DiskUsageOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar bsz int64\n\tfor _, bc := range diskUsage.BuildCache {\n\t\tif !bc.Shared {\n\t\t\tbsz += bc.Size\n\t\t}\n\t}\n\tfmt.Printf(\"Images: TOTAL (%d), %s\\n\", len(diskUsage.Images), units.HumanSize(float64(diskUsage.LayersSize)))\n\tfmt.Printf(\"Build Cache: TOTAL (%d), %s\\n\", len(diskUsage.BuildCache), units.HumanSize(float64(bsz)))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76865181/make-time-ticker-procedure-more-monotonic",
    "body": "func main() {\n\tdone := time.After(20*time.Second + 1*time.Millisecond) // run time limit\n\ttickTock := time.NewTicker(5 * time.Second)             // incremental print msg\n\tgo randomWork() // pegs CPU at about 100%\n\tchP := make(chan time.Duration)\n\tgo pulse(chP)\n\tpulses := make([]time.Duration, 0)\nloop:\n\tfor {\n\t\tselect {\n\t\tcase d := <-chP:\n\t\t\tpulses = append(pulses, d)\n\t\tcase <-tickTock.C:\n\t\t\tfmt.Println(\"...5s elapsed\")\n\t\tcase <-done:\n\t\t\tbreak loop\n\t\t}\n\t}\n\tprintStats(pulses)\n}\nconst (\n\tlower = 19_900 * time.Microsecond\n\tupper = 20_100 * time.Microsecond\n)\n// pulse does something every 20ms +/-.1ms\nfunc pulse(ch chan<- time.Duration) {\n\tvar (\n\t\tlast    = time.Now()\n\t\telapsed time.Duration\n\t)\n\tticker := time.NewTicker(500 * time.Microsecond)\n\tfor now := range ticker.C {\n\t\telapsed = now.Sub(last)\n\t\tif elapsed > lower {\n\t\t\t// Some procedure...\n\t\t\tch <- elapsed\n\t\t\tlast = now\n\t\t}\n\t}\n}\nfunc randomWork() {\n\tfor {\n\t\tx := 0\n\t\tfor i := 0; i < rand.Intn(1e7); i++ {\n\t\t\tx = i\n\t\t}\n\t\tx = x // silence \"unused x\" error\n\t}\n}\nfunc printStats(pulses []time.Duration) {\n\tsort.Slice(pulses, func(i, j int) bool { return pulses[i] < pulses[j] })\n\ttooShort := make([]time.Duration, 0)\n\ttooLong := make([]time.Duration, 0)\n\tfor _, d := range pulses {\n\t\tif d < lower {\n\t\t\ttooShort = append(tooShort, d)\n\t\t}\n\t\tif d > upper {\n\t\t\ttooLong = append(tooLong, d)\n\t\t}\n\t}\n\tfmt.Printf(\"%d pulses: %v...%v\\n\", len(pulses), pulses[0], pulses[len(pulses)-1])\n\tif len(tooShort) > 0 {\n\t\tfmt.Printf(\"%d too-short pulses:\\n\", len(tooShort))\n\t\tfor _, d := range tooShort {\n\t\t\tfmt.Printf(\"  %v\\n\", d)\n\t\t}\n\t}\n\tif len(tooLong) > 0 {\n\t\tfmt.Printf(\"%d too-long pulses:\\n\", len(tooLong))\n\t\tfor _, d := range tooLong {\n\t\t\tfmt.Printf(\"  %v\\n\", d)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76815297/writing-tests-in-go-by-receiving-interfaces-and-returning-structs",
    "body": "// Code generated by mockery v2.32.2. DO NOT EDIT.\npackage mocks\nimport (\n\tmock \"github.com/stretchr/testify/mock\"\n\ttest \"your_path_to_the_query_table_package/querytable\"\n)\n// QueryTableResult is an autogenerated mock type for the QueryTableResult type\ntype QueryTableResult struct {\n\tmock.Mock\n}\n// Err provides a mock function with given fields:\nfunc (_m *QueryTableResult) Err() error {\n\tret := _m.Called()\n\tvar r0 error\n\tif rf, ok := ret.Get(0).(func() error); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Error(0)\n\t}\n\treturn r0\n}\n// Next provides a mock function with given fields:\nfunc (_m *QueryTableResult) Next() bool {\n\tret := _m.Called()\n\tvar r0 bool\n\tif rf, ok := ret.Get(0).(func() bool); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(bool)\n\t}\n\treturn r0\n}\n// Record provides a mock function with given fields:\nfunc (_m *QueryTableResult) Record() test.FluxRecord {\n\tret := _m.Called()\n\tvar r0 test.FluxRecord\n\tif rf, ok := ret.Get(0).(func() test.FluxRecord); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(test.FluxRecord)\n\t\t}\n\t}\n\treturn r0\n}\n// NewQueryTableResult creates a new instance of QueryTableResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewQueryTableResult(t interface {\n\tmock.TestingT\n\tCleanup(func())\n}) *QueryTableResult {\n\tmock := &QueryTableResult{}\n\tmock.Mock.Test(t)\n\tt.Cleanup(func() { mock.AssertExpectations(t) })\n\treturn mock\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76815297/writing-tests-in-go-by-receiving-interfaces-and-returning-structs",
    "body": "// Code generated by mockery v2.32.2. DO NOT EDIT.\npackage mocks\nimport (\n\tmock \"github.com/stretchr/testify/mock\"\n\ttime \"time\"\n)\n// FluxRecord is an autogenerated mock type for the FluxRecord type\ntype FluxRecord struct {\n\tmock.Mock\n}\n// Time provides a mock function with given fields:\nfunc (_m *FluxRecord) Time() time.Time {\n\tret := _m.Called()\n\tvar r0 time.Time\n\tif rf, ok := ret.Get(0).(func() time.Time); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tr0 = ret.Get(0).(time.Time)\n\t}\n\treturn r0\n}\n// Value provides a mock function with given fields:\nfunc (_m *FluxRecord) Value() interface{} {\n\tret := _m.Called()\n\tvar r0 interface{}\n\tif rf, ok := ret.Get(0).(func() interface{}); ok {\n\t\tr0 = rf()\n\t} else {\n\t\tif ret.Get(0) != nil {\n\t\t\tr0 = ret.Get(0).(interface{})\n\t\t}\n\t}\n\treturn r0\n}\n// NewFluxRecord creates a new instance of FluxRecord. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.\n// The first argument is typically a *testing.T value.\nfunc NewFluxRecord(t interface {\n\tmock.TestingT\n\tCleanup(func())\n}) *FluxRecord {\n\tmock := &FluxRecord{}\n\tmock.Mock.Test(t)\n\tt.Cleanup(func() { mock.AssertExpectations(t) })\n\treturn mock\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76744325/how-to-update-documents-using-the-value-from-inner-array",
    "body": "db.collection.updateMany(\n  { results: { $elemMatch: { id: 'a1', somethingElse: 'aa' } } },\n  [\n    {\n      $set: {\n        total: {\n          $let: {\n            vars: {\n              items: {\n                $filter: {\n                  input: '$results',\n                  as: 'item',\n                  cond: {\n                    $and: [\n                      { $eq: ['$$item.id', 'a1'] },\n                      { $eq: ['$$item.somethingElse', 'aa'] },\n                    ],\n                  },\n                },\n              },\n            },\n            in: { $add: ['$total', { $sum: '$$items.value' }] },\n          },\n        },\n      },\n    },\n  ]\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/76744325/how-to-update-documents-using-the-value-from-inner-array",
    "body": "filter := bson.M{\n\t\"results\": bson.M{\n\t\t\"$elemMatch\": bson.M{\n\t\t\t\"id\":            \"a1\",\n\t\t\t\"somethingElse\": \"aa\",\n\t\t},\n\t},\n}\nvars := bson.M{\n\t\"items\": bson.M{\n\t\t\"$filter\": bson.M{\n\t\t\t\"input\": \"$results\",\n\t\t\t\"as\":    \"item\",\n\t\t\t\"cond\": bson.M{\n\t\t\t\t\"$and\": bson.A{\n\t\t\t\t\tbson.M{\"$eq\": bson.A{\"$$item.id\", \"a1\"}},\n\t\t\t\t\tbson.M{\"$eq\": bson.A{\"$$item.somethingElse\", \"aa\"}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}\nupdate := bson.A{\n\tbson.M{\n\t\t\"$set\": bson.M{\n\t\t\t\"total\": bson.M{\n\t\t\t\t\"$let\": bson.M{\n\t\t\t\t\t\"vars\": vars,\n\t\t\t\t\t\"in\": bson.M{\n\t\t\t\t\t\t\"$add\": bson.A{\"$total\", bson.M{\"$sum\": \"$$items.value\"}},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76633994/invalid-magic-number-when-decompressing-using-javascript-headers-not-added-when",
    "body": "module m\ngo 1.20\nrequire (\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/pierrec/lz4 v2.6.1+incompatible\n)\nrequire (\n\tgithub.com/bytedance/sonic v1.9.1 // indirect\n\tgithub.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311 // indirect\n\tgithub.com/frankban/quicktest v1.14.5 // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.2 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.14.0 // indirect\n\tgithub.com/goccy/go-json v0.10.2 // indirect\n\tgithub.com/google/go-cmp v0.5.9 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.4 // indirect\n\tgithub.com/leodido/go-urn v1.2.4 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.8 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgolang.org/x/arch v0.3.0 // indirect\n\tgolang.org/x/crypto v0.9.0 // indirect\n\tgolang.org/x/net v0.10.0 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n\tgolang.org/x/text v0.9.0 // indirect\n\tgoogle.golang.org/protobuf v1.30.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/76483338/update-values-causing-error-golang-mongodb",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Passenger struct {\n\tNumberOfSeats    int    `json:\"numberOfSeats\" bson:\"numberOfSeats\"`\n\tDoorToDoorOption bool   `bson:\"doorToDoorOption\" json:\"doorToDoorOption\"`\n\tLuggageSize      string `bson:\"luggageSize\" json:\"luggageSize\"`\n}\ntype Carpool struct {\n\tID             string       `json:\"id,omitempty\" bson:\"_id,omitempty\"`\n\tSeatsAvailable int          `json:\"seatsAvailable\" bson:\"seatsAvailable\"`\n\tPassengers     []*Passenger `bson:\"passengers\" json:\"passengers\"`\n\tCreatedAt      time.Time    `json:\"createdAt\" bson:\"createdAt\"`\n\tUpdatedAt      time.Time    `json:\"updatedAt\" bson:\"updatedAt\"`\n}\nfunc main() {\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(context.Background(), clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(context.Background())\n\tappDB := mongoClient.Database(\"appDB\")\n\tdemoCollection := appDB.Collection(\"demoCollection\")\n\t// clean up data - troubleshooting purposes\n\tdefer func() {\n\t\tdemoCollection.DeleteMany(context.Background(), bson.M{})\n\t}()\n\t// seed data\n\tcarPool := &Carpool{\n\t\tID:             \"1\",\n\t\tSeatsAvailable: 4,\n\t\tPassengers: []*Passenger{\n\t\t\t{NumberOfSeats: 1, DoorToDoorOption: false, LuggageSize: \"small\"},\n\t\t},\n\t\tCreatedAt: time.Now(),\n\t\tUpdatedAt: time.Now(),\n\t}\n\tinsertRes, err := demoCollection.InsertOne(context.Background(), carPool)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// fetch data\n\tfmt.Println(\"before update\")\n\tcursor, err := demoCollection.Find(context.Background(), bson.M{\"_id\": insertRes.InsertedID})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar carPools []bson.M\n\tif err = cursor.All(context.Background(), &carPools); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range carPools {\n\t\tfmt.Println(v)\n\t}\n\t// set data\n\tfilter := bson.M{\"_id\": insertRes.InsertedID}\n\tupdate := bson.D{\n\t\tbson.E{\n\t\t\tKey: \"$push\",\n\t\t\tValue: bson.D{\n\t\t\t\tbson.E{\n\t\t\t\t\tKey:   \"passengers\",\n\t\t\t\t\tValue: &Passenger{NumberOfSeats: 2, DoorToDoorOption: true, LuggageSize: \"medium\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tupdateOptions := options.FindOneAndUpdate().SetReturnDocument(1)\n\tdemoCollection.FindOneAndUpdate(context.Background(), filter, update, updateOptions)\n\t// aggregate update\n\tpipe := []bson.M{\n\t\t{\n\t\t\t\"$addFields\": bson.M{ // if the field already exists, it overwrites the value\n\t\t\t\t\"seatsAvailable\": bson.M{\n\t\t\t\t\t\"$subtract\": []string{\"$seatsAvailable\", \"$seatsAvailable\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tcursor, err = demoCollection.Aggregate(context.Background(), pipe)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err = cursor.All(context.Background(), &carPools); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"after update\")\n\tfor _, v := range carPools {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76411371/is-there-any-way-to-generate-avro-schema-file-using-go-struct",
    "body": "type SimpleRecord struct {\n\tA int64  `avro:\"a\"`\n\tB string `avro:\"b\"`\n}\nschema, err := avro.Parse(`{\n    \"type\": \"record\",\n    \"name\": \"simple\",\n    \"namespace\": \"org.hamba.avro\",\n    \"fields\" : [\n        {\"name\": \"a\", \"type\": \"long\"},\n        {\"name\": \"b\", \"type\": \"string\"}\n    ]\n}`)\nif err != nil {\n\tlog.Fatal(err)\n}\nin := SimpleRecord{A: 27, B: \"foo\"}\ndata, err := avro.Marshal(schema, in)\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(data)\n// Outputs: [54 6 102 111 111]\nout := SimpleRecord{}\nerr = avro.Unmarshal(schema, data, &out)\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Println(out)\n// Outputs: {27 foo}"
  },
  {
    "url": "https://stackoverflow.com/questions/76133556/implement-nix-find-utility-in-go",
    "body": "type Flags struct {\n\tPath string\n\tName string\n}\nfunc main() {\n\targs := os.Args\n\tif len(args) < 4 { // the program name is the first argument\n\t\tlog.Fatal(\"not enough arguments\")\n\t}\n\tvar (\n\t\tfs = flag.NewFlagSet(args[0], flag.ExitOnError)\n\t\tf  Flags\n\t)\n\tfs.StringVar(&f.Name, \"name\", \"\", \"file name\")\n\terr := fs.Parse(args[2:]) // parse flags without the program name and the 'path' argument\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tf.Path = args[1] // get 'path' argument\n\tfmt.Println(f)\n\n\t// search algorithm ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75671066/cors-issues-with-frontend-and-backend-running-on-the-same-vps",
    "body": "go headers.Add(\"Access-Control-Allow-Credentials\", \"true\")\n> headers.Add(\"Access-Control-Allow-Origin\", \"https:example.com\")\n> headers.Add(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\n> if req.Method != http.MethodOptions {\n>     next.ServeHTTP(rw, req)\n>     return\n> }\n> request headers.Add(\"Access-Control-Allow-Headers\", \"content-type, allow-credentials\")\n- The first statement has no chance of working as expected since `https:example.com` is not a valid [Web origin][origin]; you meant `https://example.com`.\n- Contrary to popular belief, you most likely don't need to list `OPTIONS` as an allowed method.\n- Another issue is that header `Access-Control-Allow-Methods` has no place in responses to non-preflight requests.\n- Also, not all `OPTIONS` requests are preflight requests.\nAll those difficulties should be enough to convince you that you're better off relying on a proven CORS middleware library, which can abstract some of this complexity away from you.\n### A solution using jub0bs/cors\nI recently released [jub0bs/cors][cors], a CORS middleware library that's designed to be easy to use and, importantly, _hard to misuse_. Here's an example:"
  },
  {
    "url": "https://stackoverflow.com/questions/75429525/gorm-select-fields-from-two-tables-while-joining",
    "body": "type Brand struct {\n    ID          int        `json:\"id\" gorm:\"primaryKey\"`\n    Name        string     `json:\"name\" gorm:\"index;not null;type:varchar(50);default:null\"`\n    ProductID   int        `json:\"productId\"`\n}\ntype Product struct {\n    ID          int         `json:\"id\" gorm:\"primaryKey\"`\n    Name        string      `json:\"name\" gorm:\"index;not null;type:varchar(50);default:null\"`\n    StoreID     *int        `json:\"storeId\"`\n    Store       *Store      `json:\"store\" gorm:\"foreignKey:StoreID;constraint:OnUpdate:RESTRICT,OnDelete:RESTRICT;\"`\n    Brands      []*Brand    `json:\"brands\" gorm:\"constraint:OnUpdate:CASCADE,OnDelete:RESTRICT;\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75413088/envoy-external-processing-filter-issues-with-content-length-header-when-process",
    "body": "resp := &extProcPb.ProcessingResponse{\n\t\tResponse: &extProcPb.ProcessingResponse_RequestBody{\n\t\t\tRequestBody: &extProcPb.BodyResponse{\n\t\t\t\tResponse: &extProcPb.CommonResponse{\n\t\t\t\t\tHeaderMutation: &extProcPb.HeaderMutation{\n\t\t\t\t\t\tSetHeaders: []*core.HeaderValueOption{\n                                        {\n                                            Header: &core.HeaderValue{\n                                                Key:   \"Content-Length\",\n                                                RawValue: []byte(strconv.Itoa(len(updatedBody))),\n                                        },\n                         },\n\t\t\t\t\t},\n\t\t\t\t\tBodyMutation: &extProcPb.BodyMutation{\n\t\t\t\t\t\tMutation: &extProcPb.BodyMutation_Body{\n\t\t\t\t\t\t\tBody: updatedBody,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/75000060/how-to-return-a-partial-struct-based-on-query-parameters-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/graphql-go/graphql\"\n)\nfunc main() {\n\t// Schema\n\tfields := graphql.Fields{\n\t\t\"id\": &graphql.Field{\n\t\t\tType: graphql.ID,\n\t\t\tResolve: func(p graphql.ResolveParams) (interface{}, error) {\n\t\t\t\treturn 111, nil\n\t\t\t},\n\t\t},\n\t\t\"priority\": &graphql.Field{\n\t\t\tType: graphql.String,\n\t\t\tResolve: func(p graphql.ResolveParams) (interface{}, error) {\n\t\t\t\treturn \"admin\", nil\n\t\t\t},\n\t\t},\n\t\t\"address\": &graphql.Field{\n\t\t\tType: graphql.NewObject(graphql.ObjectConfig{\n\t\t\t\tName: \"address\",\n\t\t\t\tFields: graphql.Fields{\n\t\t\t\t\t\"city\": &graphql.Field{\n\t\t\t\t\t\tType: graphql.String,\n\t\t\t\t\t},\n\t\t\t\t\t\"country\":  &graphql.Field{\n\t\t\t\t\t\tType: graphql.String,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}),\n\t\t\tResolve: func(p graphql.ResolveParams) (interface{}, error) {\n\t\t\t\treturn map[string]string{\n\t\t\t\t\t\"city\":\"New York\",\n\t\t\t\t\t\"country\": \"us\",\n\t\t\t\t}, nil\n\t\t\t},\n\t\t},\n\t}\n\trootQuery := graphql.ObjectConfig{Name: \"RootQuery\", Fields: fields}\n\tschemaConfig := graphql.SchemaConfig{Query: graphql.NewObject(rootQuery)}\n\tschema, err := graphql.NewSchema(schemaConfig)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create new schema, error: %v\", err)\n\t}\n\t// Query\n\tquery := `\n\t\t{\n\t\t\tid,\n\t\t\taddress {\n\t\t\t\tcity,country\n\t\t\t},\n\t\t\tpriority\n\t\t}\n\t`\n\tparams := graphql.Params{Schema: schema, RequestString: query}\n\tr := graphql.Do(params)\n\tif len(r.Errors) > 0 {\n\t\tlog.Fatalf(\"failed to execute graphql operation, errors: %+v\", r.Errors)\n\t}\n\trJSON, _ := json.Marshal(r)\n\tfmt.Printf(\"%s \\n\", rJSON)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74879385/identifying-two-integers-that-add-up-to-a-specific-target-in-linear-time",
    "body": "func FindTwoNumbers(arr []int, target int) {\n\ttable := make(map[int]int)\n\t// keep a map that maps each integer in the array to its number of occurrences\n\tfor i := 0; i < len(arr); i++ {\n\t\ttable[arr[i]]++\n\t}\n\t// for each unique key, figure out what value it needs to be paired with\n\t// and check to see if that key is also in the map\n\tfor key, _ := range table {\n\t\tvar needed int = 1\n\t\tvar match int = target - key\n\t\tif match == key {\n\t\t\tneeded = 2 // if target is \"6\", then \"3\" needs to appear at least twice in the list\n\t\t}\n\t\tif key > match {\n\t\t\tcontinue // avoid reporting duplicate pairs by skipping when key>match\n\t\t}\n\t\tif table[match] >= needed {\n\t\t\tfmt.Printf(\"Numbers: %v and %v\\n\", key, match)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74830779/scan-a-sql-query-sqlx-rows-into-a-nested-structure-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/jmoiron/sqlx\"\n\t_ \"github.com/lib/pq\"\n)\ntype A struct {\n\tId   string `db:\"a_id\"`\n\tName string `db:\"a_name\"`\n\tB\n\tC\n}\ntype B struct {\n\tId   string `db:\"b_id\"`\n\tAId  string `db:\"b_a_id\"`\n\tName string `db:\"b_name\"`\n}\ntype C struct {\n\tId   string `db:\"c_id\"`\n\tAId  string `db:\"c_a_id\"`\n\tName string `db:\"c_name\"`\n}\nfunc main() {\n\tdb, err := sqlx.Open(\"postgres\", \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\ta := []A{}\n\trows, err := db.Queryx(\"SELECT * from A INNER JOIN B ON a_id=b_a_id inner join C on c_a_id=a_id;\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\tvar record A\n\t\tif err := rows.StructScan(&record); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\ta = append(a, record)\n\t}\n\tif err := rows.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range a {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74347279/how-to-validate-allowed-fields-in-json-body-in-go-validation",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype Student struct {\n\tID   string `json:\"id\" validate:\"len=0\"`\n\tName string `json:\"name\" validate:\"required\"`\n}\nfunc main() {\n\tvalidator := validator.New()\n\tvar student Student\n\tstudentOk := `{\"id\": \"\", \"name\": \"John Doe\"}`\n\terr := json.Unmarshal([]byte(studentOk), &student)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = validator.Struct(student)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"fine\")\n\t}\n\tstudentIdNotProvided := `{\"name\": \"John Doe\"}`\n\terr = json.Unmarshal([]byte(studentIdNotProvided), &student)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = validator.Struct(student)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"fine\")\n\t}\n\tstudentKo := `{\"id\": \"123\", \"name\": \"John Doe\"}`\n\terr = json.Unmarshal([]byte(studentKo), &student)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = validator.Struct(student)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74347279/how-to-validate-allowed-fields-in-json-body-in-go-validation",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"time\"\n)\ntype Example struct {\n\tID          string     `json:\"id\"`\n\tName        string     `json:\"name\" validate:\"required\"`\n\tCount       int        `json:\"count\"`\n\tCreatedTime *time.Time `json:\"created_time\"`\n\tUpdatedTime *time.Time `json:\"updated_time,omitempty\"`\n\tDeletedTime *time.Time `json:\"deleted_time,omitempty\"`\n\tExpiresAt   *time.Time `json:\"expires_at,omitempty\"`\n}\ntype ExamplePost struct {\n\tName string `json:\"name\" validate:\"required\"`\n}\nfunc main() {\n\tjsonReq := `{\"ID\":\"123\",\"Name\":\"John Doe\",\"Count\":1,\"created_time\":\"2022-11-07 16:52:41.196032353 +0100\",\"updated_time\":\"2022-11-07 16:52:41.196032353 +0100\",\"deleted_time\":\"2022-11-07 16:52:41.196032353 +0100\",\"expires_at\":\"2022-11-07 16:52:41.196032353 +0100\"}`\n\tfmt.Println(\"first approach: with a tiny struct\")\n\tvar examplePost ExamplePost\n\terr := json.Unmarshal([]byte(jsonReq), &examplePost)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"name: %q\\n\", examplePost.Name)\n\tpostMap := make(map[string]interface{}, 0)\n\terr = json.Unmarshal([]byte(jsonReq), &postMap)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"second approach: with a map\")\n\tvar example Example\n\tfor k, v := range postMap {\n\t\tif k == \"Name\" {\n\t\t\tif name, ok := v.(string); ok {\n\t\t\t\texample.Name = name\n\t\t\t} else {\n\t\t\t\texample.Name = \"\"\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Printf(\"name: %q\\n\", example.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73039891/cant-reach-local-dynamodb-from-lambda-in-aws-sam",
    "body": "import (\n    \"github.com/aws/aws-sdk-go-v2/config\"\n    \"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n    \"github.com/aws/aws-lambda-go/lambda\"\n)\nfunc Handler(ctx context.Context, event *MyEvent) (*string, error) {\n\tvar LocalEndpoint = \"http://127.0.0.1:8000\"\n    cfg, err := config.LoadDefaultConfig(ctx)\n\tclient := dynamodb.NewFromConfig(cfg, func(o *dynamodb.Options) {\n\t\to.EndpointOptions.DisableHTTPS = true\n\t\to.BaseEndpoint = &LocalEndpoint\n\t})\n    //...do stuff\n}\n\nfunc main() {\n    lambda.Start(Handler)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72856947/mongodb-insertmany-incomplete-read-of-message-header-context-deadline-exceed",
    "body": "func connect() (*mongo.Database, error) {\n\tcaFile := \"my-rds-cert.pem\"\n\turi := \"mongodb://localhost:27017/?ssl=true&ssl_ca_certs=my-rds-cert.pem&retryWrites=false\"\n\tvar clientOptions *options.ClientOptions = options.Client().ApplyURI(uri)\n\ttlsConfig := new(tls.Config)\n\tcerts, err := ioutil.ReadFile(caFile)\n\ttlsConfig.RootCAs = x509.NewCertPool()\n\tok := tlsConfig.RootCAs.AppendCertsFromPEM(certs)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"failed parsing pem file: %w\", err)\n\t}\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed getting tls configuration: %v\", err)\n\t}\n\tclientOptions.SetTLSConfig(tlsConfig)\n\tclient, err := mongo.NewClient(clientOptions)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create client: %v\", err)\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\terr = client.Connect(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to cluster: %v\", err)\n\t}\n\tdb := client.Database(\"yourdbname\")\n\treturn db, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72560154/how-to-spin-off-a-test-container-for-arangodb-in-go-code",
    "body": "\tctx := context.Background()\n\tnetworkName := \"backend\"\n\tnewNetwork, err := testcontainers.GenericNetwork(ctx, testcontainers.GenericNetworkRequest{\n\t\tNetworkRequest: testcontainers.NetworkRequest{\n\t\t\tName:           networkName,\n\t\t\tCheckDuplicate: true,\n\t\t},\n\t})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, newNetwork.Remove(ctx))\n\t})\n\tarangodb, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n\t\tContainerRequest: testcontainers.ContainerRequest{\n\t\t\tImage: \"arangodb/arangodb:latest\",\n\t\t\tEnv: map[string]string{\n\t\t\t\t\"ARANGODB_USERNAME\":    \"myuser\",\n\t\t\t\t\"ARANGODB_PASSWORD\":    \"mypassword\",\n\t\t\t\t\"ARANGODB_DBNAME\":      \"graphdb\",\n\t\t\t\t\"ARANGO_ROOT_PASSWORD\": \"myrootpassword\",\n\t\t\t},\n\t\t\tNetworks: []string{networkName},\n\t\t\tResources: container.Resources{\n\t\t\t\tMemory: 256 * 1024 * 1024, // 512 MB\n\t\t\t},\n\t\t\tWaitingFor: wait.ForLog(\"is ready for business\").WithStartupTimeout(time.Minute * 1),\n\t\t},\n\t\tStarted: true,\n\t})\n\trequire.NoError(t, err)\n\tdefer arangodb.Terminate(ctx)"
  },
  {
    "url": "https://stackoverflow.com/questions/71686098/parsing-nested-elements-using-go-colly-scraper",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/gocolly/colly/v2\"\n)\nfunc main() {\n\tc := colly.NewCollector(colly.AllowedDomains(\n\t\t\"santabarbara.craigslist.org\",\n\t))\n\tc.OnRequest(func(r *colly.Request) {\n\t\tr.Headers.Set(\"User-Agent\", \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\")\n\t})\n\tc.OnResponse(func(r *colly.Response) {\n\t\tfmt.Println(\"Response Code:\", r.StatusCode)\n\t})\n\tc.OnHTML(\"img\", func(h *colly.HTMLElement) {\n\t\timgSrc := h.Attr(\"src\")\n\t\timgSrc = strings.Replace(imgSrc, \"50x50c\", \"1200x900\", 1)\n\t\timgSrc = strings.Replace(imgSrc, \"300x300\", \"1200x900\", 1)\n\t\timgSrc = strings.Replace(imgSrc, \"600x450\", \"1200x900\", 1)\n\t\tfmt.Println(imgSrc)\n\t})\n\tc.Visit(\"https://santabarbara.craigslist.org/apa/7570100710.html\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71277450/webrtc-ontrack-not-called-on-safari-with-go-based-peer",
    "body": "function getDummyTrack() {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 640;\n  canvas.height = 480;\n  const ctx = canvas.getContext(\"2d\");\n  // Fill the canvas with a solid color, e.g., black\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  // Create a stream from the canvas\n  const stream = canvas.captureStream(30); // 30 FPS\n  // Get the video track from the stream\n  const [videoTrack] = stream.getVideoTracks();\n  return videoTrack;\n}\npeerConnection = new RTCPeerConnection();\ncreateDataChannel(peerConnection);\npeerConnection.onicecandidate = handleIceCandidateEvent;\npeerConnection.ontrack = handleTrackEvent;\npeerConnection.addTrack(getDummyTrack());\nconst offer = await peerConnection.createOffer({\n  offerToReceiveVideo: true,\n});\nawait peerConnection.setLocalDescription(offer);\nsignalingChannel.send(JSON.stringify({ type: \"offer\", data: offer.sdp }));"
  },
  {
    "url": "https://stackoverflow.com/questions/71102571/custom-gin-logging-middleware-truncating-logs",
    "body": "func main() {\n    router := gin.Default()\n    router.GET(\"/\", func(c *gin.Context) {\n        time.Sleep(5 * time.Second)\n        c.String(http.StatusOK, \"Welcome Gin Server\")\n    })\n    srv := &http.Server{\n        Addr:    \":8080\",\n        Handler: router,\n    }\n    go func() {\n        // service connections\n        if err := srv.ListenAndServe(); err != nil {\n            log.Printf(\"listen: %s\\n\", err)\n        }\n    }()\n    // Wait for interrupt signal to gracefully shutdown the server with\n    // a timeout of 5 seconds.\n    quit := make(chan os.Signal)\n    signal.Notify(quit, os.Interrupt)\n    <-quit\n    log.Println(\"Shutdown Server ...\")\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n    if err := srv.Shutdown(ctx); err != nil {\n        log.Fatal(\"Server Shutdown:\", err)\n    }\n    log.Println(\"Server exiting\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71072901/go-how-to-use-sqlx-to-query-two-columns-and-map-the-data-to-key-value-pairs",
    "body": "package main\nimport (\n    \"fmt\"\n\n    \"github.com/google/uuid\"\n    _ \"github.com/mattn/go-sqlite3\"\n    \"github.com/jmoiron/sqlx\"\n)\nfunc main() {\n  var db *sqlx.DB\n\n  db, _ = sqlx.Open(\"sqlite3\", \":memory:\")\n\n  schema := `CREATE TABLE tmp (\n      id integer,\n      uuid text\n  );`\n\n  // execute a query on the server\n  db.MustExec(schema)\n\n  qry := `INSERT INTO tmp (id, uuid) VALUES (?, ?)`\n  db.MustExec(qry, 1, uuid.NewString())\n  db.MustExec(qry, 2, uuid.NewString())\n  db.MustExec(qry, 3, uuid.NewString())\n  rows, _ := db.Query(\"SELECT id, uuid FROM tmp\")\n  var tmp = make(map[string]int)\n  // iterate over each row\n  for rows.Next() {\n      var id int\n      var uuid string\n      _ = rows.Scan(&id, &uuid)\n      tmp[uuid] = id\n      // fmt.Println(id, uuid)\n      // rows.MapScan(&tmp)\n  }\n  fmt.Println(tmp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69647647/get-values-from-same-class-name-values-in-colly-web-scraping",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"github.com/gocolly/colly\"\n)\nfunc main() {\n\tc := colly.NewCollector()\n\tcountrybgs := []string{}\n\tcontinents := []string{}\n\tcountries := []string{}\n\tr := regexp.MustCompile(`background-image: url\\((.*)\\);`)\n\t/*\n\t\t<div clas=\"cc\">\n\t\t\t<div class=\"list\">\n\t\t\t\t<span class=\"countrybg\" style=\"background-image: url(image1url);\"></span>\n\t\t\t\t<span class=\"continet\">Asia</span>\n\t\t\t\t<span class=\"country\">india</span>\n\t\t\t</div>\n\t\t\t<div class=\"list\">\n\t\t\t\t<span class=\"countrybg\" style=\"background-image: url(image2url);\"></span>\n\t\t\t\t<span class=\"continet\">Africa</span>\n\t\t\t\t<span class=\"country\">Brazil</span>\n\t\t\t</div>\n\t\t</div>\n\t*/\n\tc.OnHTML(\"span\", func(e *colly.HTMLElement) {\n\t\tswitch class := e.Attr(\"class\"); class {\n\t\tcase \"countrybg\":\n\t\t\tcountrybgs = append(countrybgs, r.FindStringSubmatch(e.Attr(\"style\"))[1])\n\t\tcase \"continet\":\n\t\t\tcontinents = append(continents, e.Text)\n\t\tcase \"country\":\n\t\t\tcountries = append(countries, e.Text)\n\t\t}\n\t})\n\tc.Visit(\"http://localhost:8081\")\n\tfmt.Println(countrybgs)\n\tfmt.Println(continents)\n\tfmt.Println(countries)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69332285/how-to-store-geo-spatial-data-in-mongodb-with-go-driver-or-mgo-qmgo",
    "body": "type Point struct {\n\tType        string `json:\"type\"`\n\tCoordinates []float64  `json:\"coordinates\"`\n}\ntype LineStringAndMultipoint struct {\n\tType        string  `json:\"type\"`\n\tCoordinates [][]float64`json:\"coordinates\"`\n}\ntype Polygon struct {\n\tType        string    `json:\"type\"`\n\tCoordinates [][][]float64 `json:\"coordinates\"`\n}\n// Alternatively you could create a all-in-one struct using interface as Coordinates\ntype GeoJSON struct {\n\tType        string    `json:\"type\"`\n\tCoordinates interface {}`json:\"coordinates\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69202823/golang-actor-pattern",
    "body": "a.action <- func() {\n        gizmo, err := a.checkGizmoAvailable() // this is run synchronously\n        if err != nil {\n           otherErr <- err\n           return\n        }\n        // the remainder is run asynchronously\n        go func(){\n            s, err := gizmo.log.Oldest()\n            if err == ErrNoSegmentsAvailable {\n                close(notFound)\n                return\n            }\n            if err != nil {\n                otherError <- err\n                return\n            }\n            id := uuid.New()\n\n            // this will require synchronization :\n            a.pending[id] = pendingSegment{s, time.Now().Add(a.timeout), false}\n            nextID <- id\n        }()\n        // returning here, a.loop() can start the next function\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/66592386/go-worker-pool-while-limiting-number-of-goroutines-and-timeout-for-calculations",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/MicahParks/ctxerrgroup\"\n)\nfunc main() {\n\t// The number of worker goroutines to use.\n\tworkers := uint(2)\n\t// Create an error handler that logs all errors.\n\t//\n\t// The original work item didn't return an error, so this is not required.\n\tvar errorHandler ctxerrgroup.ErrorHandler\n\terrorHandler = func(_ ctxerrgroup.Group, err error) {\n\t\tlog.Printf(\"A job in the worker pool failed.\\nError: %s\", err.Error())\n\t}\n\t// Create the group of workers.\n\tgroup := ctxerrgroup.New(workers, errorHandler)\n\t// Create the question specific assets.\n\trules := []string{\n\t\t\"a\",\n\t\t\"b\",\n\t\t\"c\",\n\t\t\"d\",\n\t\t\"e\",\n\t\t\"f\",\n\t\t\"g\",\n\t}\n\tresults := make(chan bool)\n\t// Create a parent timeout.\n\ttimeout := time.Second\n\tparentTimeout, parentCancel := context.WithTimeout(context.Background(), timeout)\n\tdefer parentCancel()\n\t// Iterate through all the rules to use.\n\tfor _, rule := range rules {\n\t\t// Create a child context for this specific work item.\n\t\tctx, cancel := context.WithCancel(parentTimeout)\n\t\t// Create and add the work item.\n\t\tgroup.AddWorkItem(ctx, cancel, func(workCtx context.Context) (err error) {\n\t\t\t// Deliberately shadow the rule so the next iteration doesn't take over.\n\t\t\trule := rule\n\t\t\t// Do the work using the workCtx.\n\t\t\tresults <- match(workCtx, \"a\", rule)\n\t\t\treturn nil\n\t\t})\n\t}\n\t// Launch a goroutine that will close the results channel when everyone is finished.\n\tgo func() {\n\t\tgroup.Wait()\n\t\tclose(results)\n\t}()\n\t// Print the matches as the happen. This will not hang.\n\tfor result := range results {\n\t\tlog.Println(result)\n\t}\n\t// Wait for the group to finish.\n\t//\n\t// This is not required, but doesn't hurt as group.Wait is idempotent. It's here in case you remove the goroutine\n\t// waiting and closing the channel above.\n\tgroup.Wait()\n}\n// match is a function from the original question. It now accepts and properly uses the context argument.\nfunc match(ctx context.Context, key, id string) bool {\n\tpanic(\"implement me\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66592386/go-worker-pool-while-limiting-number-of-goroutines-and-timeout-for-calculations",
    "body": "worker := func (ctx context.Context, wg *sync.WaitGroup, input <- chan string, res chan <- bool){\n    defer wg.Done()\n    for id := range input{\n        if id == \"c\" || id == \"e\" {\n            time.Sleep(time.Second * 5)\n        }\n        select{\n        case: <- ctx.Done():\n        return\n        default:\n        }\n        // logic\n        res <- match()\n    }\n}\nrules := []string{\"a\", \"b\", \"c\", \"d\", \"e\"}\ninput := make(chan string, len(rules))\nres := make(chan bool, len(rules))\nN := 2 // Limit # of goroutines\nvar wg sync.WaitGroup\nctx, cancel := context.WithTimeout(context.Background, time.Second * 3)\ndefer cancel()\nfor i := 0; i < N; i++{\n    go worker(ctx, &wg, input, res)\n}\nfor _, r := range rules{\n    input <- r\n}\nclose(r)\nwg.Wait()\nclose(res)\nfor r := range res{\n    // do stuff\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65796466/can-i-use-json-to-build-a-template-and-integrate-it-to-my-app-to-make-the-slackb",
    "body": "// AnyBlock represents a generic structure for a Slack message block.\n// It is designed to be versatile enough to represent any type of block supported by Slack.\n// The fields within AnyBlock correspond to various properties that a Slack block can have,\n// making it a flexible structure to construct a wide range of message layouts.\ntype AnyBlock struct {\n\tAccessory any                    `json:\"accessory,omitempty\"` // Accessory element (like buttons or images) for blocks like section.\n\tElements  []any                  `json:\"elements,omitempty\"`  // Elements of the block, used for constructing complex block types like rich_text.\n\tEmoji     bool                   `json:\"emoji,omitempty\"`     // Flag to indicate if emojis should be interpreted in text objects.\n\tFields    []any                  `json:\"fields,omitempty\"`    // Fields are used in section blocks to display text in a columnar fashion.\n\tName      any                    `json:\"name,omitempty\"`      // Name of the element, used in elements like emoji.\n\tStyle     any                    `json:\"style,omitempty\"`     // Style properties for elements, like style of text or buttons.\n\tText      any                    `json:\"text,omitempty\"`      // Text object, can be a plain text or markdown text.\n\tType      slack.MessageBlockType `json:\"type\"`                // Type of the block, defines how the block should be rendered.\n}\n// BlockType returns the type of the block.\n// This method is necessary to satisfy the slack.Block interface,\n// allowing AnyBlock to be used interchangeably with other Slack block types.\nfunc (b *AnyBlock) BlockType() slack.MessageBlockType {\n\treturn b.Type\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65796466/can-i-use-json-to-build-a-template-and-integrate-it-to-my-app-to-make-the-slackb",
    "body": "var blocks []slack.Block\n\t// Header Block\n\theaderText := &AnyBlock{Type: \"plain_text\", Text: \"Header 🔔\", Emoji: true}\n\theaderBlock := &AnyBlock{Type: slack.MBTHeader, Text: headerText}\n\tblocks = append(blocks, headerBlock)\n\t// Rich Text Block\n\trichTextElements := make([]any, 0)\n\t// Adding a section with text\n\trichTextElements = append(richTextElements, &AnyBlock{\n\t\tType: \"rich_text_section\",\n\t\tElements: []any{\n\t\t\t&AnyBlock{Type: \"text\", Text: \"Basic bullet list with rich elements\"},\n\t\t},\n\t})\n\tlistItems := []any{}\n\t// Iterating over each channel and alert\n\tfor _, data := range someData {\n\t\tfor _, := range data {\n\t\t\tlistItems = append(listItems, &AnyBlock{\n\t\t\t\tType: \"rich_text_section\",\n\t\t\t\tElements: []any{\n\t\t\t\t\t&AnyBlock{Type: \"text\", Text: myText, Style: map[string]any{\"bold\": true}},\n\t\t\t\t\t&AnyBlock{Type: \"text\", Text: fmt.Sprintf(\": %d counter(s) (\", myCounter1)},\n\t\t\t\t\t&AnyBlock{Type: \"text\", Text: \"number\", Style: map[string]any{\"italic\": true}},\n\t\t\t\t\t&AnyBlock{Type: \"text\", Text: fmt.Sprintf(\": %d)\", myCounter2)},\n\t\t\t\t},\n\t\t\t},\n\t\t\t)\n\t\t}\n\t}\n\trichTextElements = append(richTextElements, &AnyBlock{\n\t\tType:     \"rich_text_list\",\n\t\tStyle:    \"bullet\",\n\t\tElements: listItems,\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/63621097/grpc-python-quickstart-helloworld-greeter-client-py-is-hanging-before-printing",
    "body": "D0831 13:09:27.577593604    6445 dns_resolver_ares.cc:184]   (c-ares resolver) resolver:0x55eaa9dbd8a0 AresDnsResolver::StartLocked() is called.\nD0831 13:09:27.577596674    6445 grpc_ares_wrapper.cc:645]   (c-ares resolver) request:0x55eaa9d99b80 c-ares grpc_dns_lookup_ares_locked_impl name=localhost:50051, default_port=https\nD0831 13:09:27.577653493    6445 grpc_ares_ev_driver.cc:158] (c-ares resolver) request:0x55eaa9d99b80 grpc_ares_ev_driver_create_locked\nD0831 13:09:27.577679913    6445 grpc_ares_wrapper.cc:200]   (c-ares resolver) request:0x55eaa9d99b80 create_hostbyname_request_locked host:localhost port:33731 is_balancer:0 qtype:AAAA\nD0831 13:09:27.577725082    6445 grpc_ares_wrapper.cc:200]   (c-ares resolver) request:0x55eaa9d99b80 create_hostbyname_request_locked host:localhost port:33731 is_balancer:0 qtype:A\nD0831 13:09:27.577736032    6445 grpc_ares_wrapper.cc:227]   (c-ares resolver) request:0x55eaa9d99b80 on_hostbyname_done_locked qtype=A host=localhost ARES_SUCCESS\nD0831 13:09:27.577740632    6445 grpc_ares_wrapper.cc:273]   (c-ares resolver) request:0x55eaa9d99b80 c-ares resolver gets a AF_INET result:\n  addr: 127.0.0.1\n  port: 50051\nD0831 13:09:27.577745522    6445 grpc_ares_ev_driver.cc:392] (c-ares resolver) request:0x55eaa9d99b80 new fd: c-ares fd: 10\nD0831 13:09:27.577748092    6445 grpc_ares_ev_driver.cc:98]  (c-ares resolver) request:0x55eaa9d99b80 Ref ev_driver 0x55eaa9cfd900\nD0831 13:09:27.577750552    6445 grpc_ares_ev_driver.cc:406] (c-ares resolver) request:0x55eaa9d99b80 notify read on: c-ares fd: 10\nD0831 13:09:27.577753342    6445 grpc_ares_ev_driver.cc:463] (c-ares resolver) request:0x55eaa9d99b80 ev_driver=0x55eaa9cfd900 grpc_ares_ev_driver_start_locked. timeout in 120000 ms\nD0831 13:09:27.577755682    6445 grpc_ares_ev_driver.cc:98]  (c-ares resolver) request:0x55eaa9d99b80 Ref ev_driver 0x55eaa9cfd900\nD0831 13:09:27.577763612    6445 grpc_ares_ev_driver.cc:227] (c-ares resolver) request:0x55eaa9d99b80 ev_driver=0x55eaa9cfd900. next ares process poll time in 1000 ms\nD0831 13:09:27.577765852    6445 grpc_ares_ev_driver.cc:98]  (c-ares resolver) request:0x55eaa9d99b80 Ref ev_driver 0x55eaa9cfd900\nD0831 13:09:27.577773282    6445 dns_resolver_ares.cc:448]   (c-ares resolver) resolver:0x55eaa9dbd8a0 Started resolving. pending_request_:0x55eaa9d99b80"
  },
  {
    "url": "https://stackoverflow.com/questions/63457214/how-to-access-request-in-stream-interceptor",
    "body": "type serverStreamWrapper struct {\n\tpeekedRequest proto.Message\n\twrappedStream grpc.ServerStream\n}\nfunc newServerStreamWrapper(stream grpc.ServerStream) *serverStreamWrapper {\n\treturn &serverStreamWrapper{nil, stream}\n}\nfunc (s *serverStreamWrapper) peekRequest(msg interface{}) error {\n\tprotoMsg := msg.(proto.Message)\n\tif protoMsg == nil {\n\t\tpanic(\"BUG: msg must not be nil\")\n\t}\n\tif s.peekedRequest != nil {\n\t\tpanic(\"BUG: Must only called peekRequest once\")\n\t}\n\terr := s.wrappedStream.RecvMsg(protoMsg)\n\tif err == nil {\n\t\ts.peekedRequest = protoMsg\n\t}\n\treturn err\n}\nfunc (s *serverStreamWrapper) RecvMsg(msg interface{}) error {\n\tif s.peekedRequest != nil {\n\t\tprotoMsg := msg.(proto.Message)\n\t\tproto.Reset(protoMsg)\n\t\tproto.Merge(protoMsg, s.peekedRequest)\n\t\ts.peekedRequest = nil\n\t\treturn nil\n\t}\n\treturn s.wrappedStream.RecvMsg(msg)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60492015/i-want-to-add-a-new-value-to-the-post-form-before-i-redirect-it-using-the-revers",
    "body": "func main() {\n\torigin, _ := url.Parse(\"http://localhost:9000/\")\n\tdirector := func(req *http.Request) {\n\t\treq.Header.Add(\"X-Forwarded-Host\", req.Host)\n\t\treq.Header.Add(\"X-Origin-Host\", origin.Host)\n\t\treq.URL.Scheme = \"http\"\n\t\treq.URL.Host = origin.Host\n\t}\n\tproxy := &httputil.ReverseProxy{Director: director}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tr.ParseForm()\n\t\tform := r.Form\n\t\tform.Add(\"hello\", \"world\")\n\t\tbody := form.Encode()\n\t\tr.Body = ioutil.NopCloser(strings.NewReader(body))\n\t\tr.ContentLength = int64(len(body))\n\t\tproxy.ServeHTTP(w, r)\n\t})\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60026307/custom-verifypeercertificate-in-the-crypto-tls-package",
    "body": "func ipSCert(host, port string) ([]*x509.Certificate, string, error) {\n    var ipcertchain []*x509.Certificate\n    customVerify := func(rawCerts [][]byte, verifiedChains [][]*x509.Certificate) error {\n        roots := x509.NewCertPool()\n        for _, rawCert := range rawCerts {\n            c, _ := x509.ParseCertificate(rawCert)\n            certItem, _ := x509.ParseCertificate(rawCert)\n            ipcertchain = append(ipcertchain, certItem)\n            roots.AddCert(c)\n        }\n        return nil\n\n    }\n    log.SetFlags(log.Lshortfile)\n    d := &net.Dialer{\n        Timeout: time.Duration(TimeoutSeconds) * time.Second,\n    }\n    cs, err := cipherSuite()\n    if err != nil {\n        return []*x509.Certificate{&x509.Certificate{}}, \"\", err\n    }\n    conf := &tls.Config{\n        InsecureSkipVerify:    true,\n        VerifyPeerCertificate: customVerify,\n        CipherSuites:          cs,\n        MaxVersion:            tlsVersion(),\n    }\n    conn, err := tls.DialWithDialer(d, \"tcp\", host+\":\"+port, conf)\n    if err != nil {\n        return nil, \"\", err\n    }\n    conn.Close()\n    return ipcertchain, host, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55335635/unmarshal-xml-tag-that-contains-mixed-contentse-g-cdata-other-tags",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/antchfx/xmlquery\"\n)\nfunc main() {\n\ts := `<?xml version=\"1.0\" encoding=\"UTF-8\"?><Element>\n<![CDATA[hello]]>\n<image>some_url_here</image>\n<![CDATA[world]]>\n</Element>\n`\n\tdoc, err := xmlquery.Parse(strings.NewReader(s))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\telem := xmlquery.FindOne(doc, \"//Element\")\n\tfor n := elem.FirstChild; n != nil; n = n.NextSibling {\n\t\tif n.Data == \"image\" {\n\t\t\tfmt.Printf(\"image: %s\\n\", n.InnerText())\n\t\t} else if n.Type == xmlquery.TextNode {\n\t\t\tif len(strings.TrimSpace(n.InnerText())) == 0 {\n\t\t\t\t// skip it because its' empty node\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"cdata: %s\\n\", n.InnerText())\n\t\t\t}\n\t\t}\n\t}\n\t// or using query expression\n\timage := xmlquery.FindOne(doc, \"//image\")\n\tfmt.Printf(\"image: %s\\n\", image.InnerText())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/42796310/cross-compile-using-go-build-cgo-enabled-warning-libudev-so-1-not-found",
    "body": "#  SPDX-License-Identifier: LGPL-2.1+\n#\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it\n#  under the terms of the GNU Lesser General Public License as published by\n#  the Free Software Foundation; either version 2.1 of the License, or\n#  (at your option) any later version.\nprefix=/usr\nexec_prefix=/usr\nlibdir=/lib/arm-linux-gnueabihf\nincludedir=/usr/include\nName: libudev\nDescription: Library to access udev device information\nVersion: 237\nLibs: -L${libdir} -ludev\nCflags: -I${includedir}"
  },
  {
    "url": "https://stackoverflow.com/questions/38326313/concurrent-safety-of-time-location",
    "body": "// FixedZone returns a Location that always uses\n// the given zone name and offset (seconds east of UTC).\nfunc FixedZone(name string, offset int) *Location {\n\t// Most calls to FixedZone have an unnamed zone with an offset by the hour.\n\t// Optimize for that case by returning the same *Location for a given hour.\n\tconst hoursBeforeUTC = 12\n\tconst hoursAfterUTC = 14\n\thour := offset / 60 / 60\n\tif name == \"\" && -hoursBeforeUTC <= hour && hour <= +hoursAfterUTC && hour*60*60 == offset {\n\t\tunnamedFixedZonesOnce.Do(func() {\n\t\t\tunnamedFixedZones = make([]*Location, hoursBeforeUTC+1+hoursAfterUTC)\n\t\t\tfor hr := -hoursBeforeUTC; hr <= +hoursAfterUTC; hr++ {\n\t\t\t\tunnamedFixedZones[hr+hoursBeforeUTC] = fixedZone(\"\", hr*60*60)\n\t\t\t}\n\t\t})\n\t\treturn unnamedFixedZones[hour+hoursBeforeUTC]\n\t}\n\treturn fixedZone(name, offset)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/33073434/gob-decoder-returning-eof-error",
    "body": "func SaveToDisk[T any](filepath string, data T) {\n\tf, err := os.Create(filepath)\n\tif err != nil {\n\t\tlog.Fatal(errors.Wrap(err, \"os.Create()\"))\n\t}\n\tdefer func() {\n\t\terr := f.Close()\n\t\tif err != nil {\n\t\t\tlog.Fatal(errors.Wrap(err, \"f.Close()\"))\n\t\t}\n\t}()\n\twriter := bufio.NewWriter(f)\n\tdataEncoder := gob.NewEncoder(writer)\n\terr = dataEncoder.Encode(data)\n\tif err != nil {\n\t\tlog.Fatal(errors.Wrap(err, \"dataEncoder.Encode()\"))\n\t}\n\terr = writer.Flush() // Flush the data to the file\n\tif err != nil {\n\t\tlog.Fatal(errors.Wrap(err, \"writer.Flush()\"))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67747534/go-writing-stat-cache-mkdir-user-read-only-file-system",
    "body": "ajayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/uudashr/gopkgs/v2/cmd/gopkgs\ngo: downloading github.com/uudashr/gopkgs v1.3.2\ngo: downloading github.com/uudashr/gopkgs/v2 v2.1.2\ngo: downloading github.com/uudashr/gopkgs v2.0.1+incompatible\ngo: downloading github.com/karrick/godirwalk v1.12.0\ngo: downloading github.com/pkg/errors v0.8.1\ngithub.com/pkg/errors\ngithub.com/karrick/godirwalk\ngithub.com/uudashr/gopkgs/v2\ngithub.com/uudashr/gopkgs/v2/cmd/gopkgs\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/ramya-rao-a/go-outline\ngo: downloading github.com/ramya-rao-a/go-outline v0.0.0-20200117021646-2a048b4510eb\ngolang.org/x/tools/go/buildutil\ngithub.com/ramya-rao-a/go-outline\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/cweill/gotests/gotests\ngo: downloading github.com/cweill/gotests v1.6.0\ngo: downloading golang.org/x/tools v0.0.0-20191109212701-97ad0ed33101\ngolang.org/x/tools/internal/semver\ngithub.com/cweill/gotests/internal/models\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/internal/fastwalk\ngolang.org/x/tools/internal/module\ngolang.org/x/tools/internal/span\ngolang.org/x/tools/go/internal/packagesdriver\ngolang.org/x/tools/go/internal/gcimporter\ngithub.com/cweill/gotests/internal/goparser\ngithub.com/cweill/gotests/internal/input\ngolang.org/x/tools/internal/gopathwalk\ngithub.com/cweill/gotests/internal/render/bindata\ngithub.com/cweill/gotests/templates\ngithub.com/cweill/gotests/internal/render\ngolang.org/x/tools/go/gcexportdata\ngolang.org/x/tools/go/packages\ngolang.org/x/tools/internal/imports\ngolang.org/x/tools/imports\ngithub.com/cweill/gotests/internal/output\ngithub.com/cweill/gotests\ngithub.com/cweill/gotests/gotests/process\ngithub.com/cweill/gotests/gotests\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/fatih/gomodifytags\ngo: downloading github.com/fatih/gomodifytags v1.13.0\ngo: downloading github.com/fatih/structtag v1.2.0\ngo: downloading github.com/fatih/camelcase v1.0.0\ngo: downloading golang.org/x/tools v0.0.0-20180824175216-6c1c5e93cdc1\ngithub.com/fatih/camelcase\ngithub.com/fatih/structtag\ngolang.org/x/tools/go/buildutil\ngithub.com/fatih/gomodifytags\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/josharian/impl\ngo: downloading github.com/josharian/impl v1.0.0\ngo: downloading golang.org/x/tools v0.0.0-20200522201501-cb1345f3a375\ngo: downloading golang.org/x/mod v0.2.0\ngo: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543\ngolang.org/x/mod/semver\ngolang.org/x/xerrors/internal\ngolang.org/x/tools/internal/event/label\ngolang.org/x/tools/internal/fastwalk\ngolang.org/x/xerrors\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/internal/event/keys\ngolang.org/x/tools/internal/gopathwalk\ngolang.org/x/mod/module\ngolang.org/x/tools/internal/event/core\ngolang.org/x/tools/internal/event\ngolang.org/x/tools/internal/gocommand\ngolang.org/x/tools/internal/imports\ngolang.org/x/tools/imports\ngithub.com/josharian/impl\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/haya14busa/goplay/cmd/goplay\ngo: downloading github.com/haya14busa/goplay v1.0.0\ngo: downloading github.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966\ngithub.com/skratchdot/open-golang/open\ngithub.com/haya14busa/goplay\ngithub.com/haya14busa/goplay/cmd/goplay\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v github.com/go-delve/delve/cmd/dlv\ngo: downloading github.com/go-delve/delve v1.6.1\ngo: downloading github.com/sirupsen/logrus v1.6.0\ngo: downloading github.com/spf13/cobra v0.0.0-20170417170307-b6cb39589372\ngo: downloading github.com/mattn/go-isatty v0.0.3\ngo: downloading gopkg.in/yaml.v2 v2.2.1\ngo: downloading github.com/google/go-dap v0.5.0\ngo: downloading golang.org/x/sys v0.0.0-20200625212154-ddb9806d33ae\ngo: downloading github.com/cosiner/argv v0.1.0\ngo: downloading github.com/mattn/go-colorable v0.0.0-20170327083344-ded68f7a9561\ngo: downloading github.com/peterh/liner v0.0.0-20170317030525-88609521dc4b\ngo: downloading github.com/hashicorp/golang-lru v0.5.4\ngo: downloading golang.org/x/arch v0.0.0-20190927153633-4e8777c89be4\ngo: downloading go.starlark.net v0.0.0-20200821142938-949cc6f4b097\ngo: downloading github.com/cpuguy83/go-md2man v1.0.10\ngo: downloading github.com/spf13/pflag v0.0.0-20170417173400-9e4c21054fa1\ngo: downloading github.com/inconshreveable/mousetrap v1.0.0\ngo: downloading github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: downloading github.com/russross/blackfriday v1.5.2\ngo: downloading github.com/russross/blackfriday v1.6.0\ngolang.org/x/sys/internal/unsafeheader\ngithub.com/hashicorp/golang-lru/simplelru\ngo.starlark.net/internal/spell\ngithub.com/mattn/go-isatty\ngolang.org/x/sys/unix\ngithub.com/cosiner/argv\ngithub.com/go-delve/delve/pkg/goversion\ngopkg.in/yaml.v2\ngithub.com/go-delve/delve/pkg/dwarf/util\ngithub.com/go-delve/delve/pkg/dwarf/regnum\ngithub.com/go-delve/delve/pkg/version\ngithub.com/go-delve/delve/pkg/astutil\ngithub.com/go-delve/delve/pkg/elfwriter\ngolang.org/x/arch/arm64/arm64asm\ngithub.com/go-delve/delve/pkg/terminal/colorize\ngolang.org/x/arch/x86/x86asm\ngithub.com/go-delve/delve/pkg/dwarf/op\ngithub.com/go-delve/delve/pkg/dwarf/line\ngithub.com/go-delve/delve/pkg/dwarf/frame\ngithub.com/peterh/liner\ngo.starlark.net/syntax\ngithub.com/google/go-dap\nnet/rpc\ngithub.com/spf13/pflag\ngithub.com/russross/blackfriday\ngithub.com/go-delve/delve/pkg/dwarf/godwarf\nnet/rpc/jsonrpc\ngithub.com/go-delve/delve/pkg/dwarf/loclist\ngithub.com/go-delve/delve/pkg/dwarf/reader\ngo.starlark.net/resolve\ngithub.com/cpuguy83/go-md2man/md2man\ngithub.com/spf13/cobra\ngo.starlark.net/internal/compile\ngithub.com/sirupsen/logrus\ngithub.com/spf13/cobra/doc\ngithub.com/go-delve/delve/pkg/config\ngo.starlark.net/starlark\ngithub.com/go-delve/delve/pkg/logflags\ngithub.com/go-delve/delve/pkg/gobuild\ngithub.com/go-delve/delve/pkg/proc\ngithub.com/go-delve/delve/pkg/proc/winutil\ngithub.com/go-delve/delve/pkg/proc/amd64util\ngithub.com/go-delve/delve/pkg/proc/native\ngithub.com/go-delve/delve/service/api\ngithub.com/go-delve/delve/pkg/proc/core/minidump\ngithub.com/go-delve/delve/pkg/proc/linutil\ngithub.com/go-delve/delve/pkg/locspec\ngithub.com/go-delve/delve/pkg/proc/core\ngithub.com/go-delve/delve/pkg/proc/gdbserial\ngithub.com/go-delve/delve/service/debugger\ngithub.com/go-delve/delve/service\ngithub.com/go-delve/delve/service/rpc1\ngithub.com/go-delve/delve/service/rpc2\ngithub.com/go-delve/delve/pkg/terminal/starbind\ngithub.com/go-delve/delve/service/rpccommon\ngithub.com/go-delve/delve/pkg/terminal\ngithub.com/go-delve/delve/service/dap\ngithub.com/go-delve/delve/cmd/dlv/cmds\ngithub.com/go-delve/delve/cmd/dlv\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v -d github.com/go-delve/delve/cmd/dlv@master\ngo: downloading github.com/go-delve/delve v1.6.2-0.20210528182153-b2afb7cd209e\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v honnef.co/go/tools/cmd/staticcheck\ngo: downloading honnef.co/go/tools v0.2.0\ngo: downloading golang.org/x/tools v0.1.0\ngo: downloading golang.org/x/sys v0.0.0-20210119212857-b64e53b001e4\ngo: downloading golang.org/x/mod v0.3.0\ngolang.org/x/mod/semver\nhonnef.co/go/tools/internal/sync\nhonnef.co/go/tools/sarif\nhonnef.co/go/tools/knowledge\nhonnef.co/go/tools/printf\ngolang.org/x/tools/internal/lsp/fuzzy\ngolang.org/x/sys/execabs\ngolang.org/x/tools/internal/event/label\nhonnef.co/go/tools/internal/robustio\nhonnef.co/go/tools/lintcmd/version\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/go/ast/inspector\ngolang.org/x/tools/go/buildutil\ngolang.org/x/tools/go/internal/gcimporter\ngolang.org/x/tools/internal/typesinternal\nhonnef.co/go/tools/internal/go/gcimporter\ngolang.org/x/tools/go/types/objectpath\ngolang.org/x/tools/go/internal/cgo\ngolang.org/x/tools/internal/event/keys\nhonnef.co/go/tools/internal/renameio\nhonnef.co/go/tools/pattern\nhonnef.co/go/tools/unused/typemap\nhonnef.co/go/tools/internal/cache\ngolang.org/x/tools/internal/event/core\ngolang.org/x/tools/internal/event\ngolang.org/x/tools/internal/gocommand\ngolang.org/x/tools/internal/analysisinternal\nhonnef.co/go/tools/go/ast/astutil\ngolang.org/x/tools/go/types/typeutil\ngolang.org/x/tools/go/loader\ngolang.org/x/tools/go/internal/packagesdriver\ngolang.org/x/tools/internal/packagesinternal\nhonnef.co/go/tools/go/types/typeutil\ngolang.org/x/tools/go/analysis\nhonnef.co/go/tools/go/ir\nhonnef.co/go/tools/analysis/lint\ngolang.org/x/tools/go/analysis/passes/inspect\nhonnef.co/go/tools/config\ngolang.org/x/tools/go/gcexportdata\ngolang.org/x/tools/go/packages\nhonnef.co/go/tools/analysis/edit\nhonnef.co/go/tools/go/loader\nhonnef.co/go/tools/internal/passes/buildir\nhonnef.co/go/tools/go/ir/irutil\nhonnef.co/go/tools/analysis/facts/nilness\nhonnef.co/go/tools/analysis/facts/typedness\nhonnef.co/go/tools/analysis/facts\nhonnef.co/go/tools/analysis/report\nhonnef.co/go/tools/analysis/code\nhonnef.co/go/tools/internal/sharedcheck\nhonnef.co/go/tools/unused\nhonnef.co/go/tools/stylecheck\nhonnef.co/go/tools/quickfix\nhonnef.co/go/tools/simple\nhonnef.co/go/tools/staticcheck\nhonnef.co/go/tools/lintcmd/runner\nhonnef.co/go/tools/lintcmd\nhonnef.co/go/tools/cmd/staticcheck\najayk@ajays-MacBook-Pro-2 code % /usr/local/go/bin/go get -v golang.org/x/tools/gopls\najayk@ajays-MacBook-Pro-2 code %"
  },
  {
    "url": "https://stackoverflow.com/questions/57350305/how-to-store-golang-big-int-into-mongodb",
    "body": "package common\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n)\ntype BigInt struct {\n\ti *big.Int\n}\nfunc NewBigInt(bigint *big.Int) *BigInt {\n\treturn &BigInt{i: bigint}\n}\nfunc (bi *BigInt) Int() *big.Int {\n\treturn bi.i\n}\nfunc (bi *BigInt) MarshalBSON() ([]byte, error) {\n\ttxt, err := bi.i.MarshalText()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ta, err := bson.Marshal(map[string]string{\"i\": string(txt)})\n\treturn a, err\n}\nfunc (bi *BigInt) UnmarshalBSON(data []byte) error {\n\tvar d bson.D\n\terr := bson.Unmarshal(data, &d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif v, ok := d.Map()[\"i\"]; ok {\n\t\tbi.i = big.NewInt(0)\n\t\treturn bi.i.UnmarshalText([]byte(v.(string)))\n\t}\n\treturn fmt.Errorf(\"key 'i' missing\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67069723/keep-retrying-a-function-in-golang",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n)\nfunc main() {\n\tvar complicatedFunctionPassing bool = false\n\tvar attempts int = 5\n\t// if complicatedFunctionPassing is true retry just makes one try\n    // if complicatedFunctionPassing is false retry makes ... attempts\n\terr := retry(attempts, time.Second, func() (err error) {\n\t\tif !complicatedFunctionPassing {\n\t\t\treturn errors.New(\"somthing went wrong in the important function\")\n\t\t}\n\t\tlog.Println(\"Complicated function passed\")\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"failed after %d attempts with error: %s\", attempts, err.Error())\n\t}\n}\nfunc retry(attempts int, sleep time.Duration, f func() error) (err error) {\n\tfor i := 0; i < attempts; i++ {\n\t\tfmt.Println(\"This is attempt number\", i+1)\n        // calling the important function\n\t\terr = f()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error occured after attempt number %d: %s\", i+1, err.Error())\n\t\t\tlog.Println(\"sleeping for: \", sleep.String())\n\t\t\ttime.Sleep(sleep)\n\t\t\tsleep *= 2\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59352845/how-to-implement-go-grpc-go-health-check",
    "body": "type HealthMeter interface {\n\tGetHealth() mysample.HealthCheckResponse_ServingStatus\n\tWatchHealth() <- chan mysample.HealthCheckResponse_ServingStatus\n}\n// implement service \"A\" and \"B\" as both interfaces (gRPC server AND HealthMeter)\ngrpcServer := grpc.NewServer()\nsrvA := servers.NewServiceA()\nsrvB := servers.NewServiceB()\nhealthSrv := servers.NewHealthCheckServer(map[string]servers.HealthMeter{\n\t\"serviceA\": srvA,\n\t\"serviceB\": srvB,\n})\nmysample.RegisterServiceAServer(grpcServer, srvA)\nmysample.RegisterServiceBServer(grpcServer, srvB)\nmysample.RegisterHealthServer(grpcServer, healthSrv)"
  },
  {
    "url": "https://stackoverflow.com/questions/59352845/how-to-implement-go-grpc-go-health-check",
    "body": "/*\n *\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n// Binary server is an example server.\npackage main\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/features/proto/echo\"\n\t\"google.golang.org/grpc/health\"\n\thealthgrpc \"google.golang.org/grpc/health/grpc_health_v1\"\n\thealthpb \"google.golang.org/grpc/health/grpc_health_v1\"\n)\nvar (\n\tport  = flag.Int(\"port\", 50051, \"the port to serve on\")\n\tsleep = flag.Duration(\"sleep\", time.Second*5, \"duration between changes in health\")\n\tsystem = \"\" // empty string represents the health of the system\n)\ntype echoServer struct {\n\tpb.UnimplementedEchoServer\n}\nfunc (e *echoServer) UnaryEcho(ctx context.Context, req *pb.EchoRequest) (*pb.EchoResponse, error) {\n\treturn &pb.EchoResponse{\n\t\tMessage: fmt.Sprintf(\"hello from localhost:%d\", *port),\n\t}, nil\n}\nvar _ pb.EchoServer = &echoServer{}\nfunc main() {\n\tflag.Parse()\n\tlis, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", *port))\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\thealthcheck := health.NewServer()\n\thealthgrpc.RegisterHealthServer(s, healthcheck)\n\tpb.RegisterEchoServer(s, &echoServer{})\n\tgo func() {\n\t\t// asynchronously inspect dependencies and toggle serving status as needed\n\t\tnext := healthpb.HealthCheckResponse_SERVING\n\t\tfor {\n\t\t\thealthcheck.SetServingStatus(system, next)\n\t\t\tif next == healthpb.HealthCheckResponse_SERVING {\n\t\t\t\tnext = healthpb.HealthCheckResponse_NOT_SERVING\n\t\t\t} else {\n\t\t\t\tnext = healthpb.HealthCheckResponse_SERVING\n\t\t\t}\n\t\t\ttime.Sleep(*sleep)\n\t\t}\n\t}()\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51686986/how-to-copy-file-to-container-with-kubernetes-client-go",
    "body": "package kubectl\nimport (\n\tcorev1client \"k8s.io/client-go/kubernetes/typed/core/v1\"\n\t\"k8s.io/client-go/rest\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n)\nfunc InitRestClient() (*rest.Config, error, *corev1client.CoreV1Client) {\n\t// Instantiate loader for kubeconfig file.\n\tkubeconfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(\n\t\tclientcmd.NewDefaultClientConfigLoadingRules(),\n\t\t&clientcmd.ConfigOverrides{},\n\t)\n\t// Get a rest.Config from the kubeconfig file.  This will be passed into all\n\t// the client objects we create.\n\trestconfig, err := kubeconfig.ClientConfig()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Create a Kubernetes core/v1 client.\n\tcoreclient, err := corev1client.NewForConfig(restconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn restconfig, err, coreclient\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51686986/how-to-copy-file-to-container-with-kubernetes-client-go",
    "body": "package kubectl\nimport (\n\t\"archive/tar\"\n\t\"fmt\"\n\t\"io\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\t\"k8s.io/client-go/tools/remotecommand\"\n\t_ \"k8s.io/kubectl/pkg/cmd/cp\"\n\tcmdutil \"k8s.io/kubectl/pkg/cmd/util\"\n\t\"log\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\t_ \"unsafe\"\n)\nfunc (i *pod) copyToPod(srcPath string, destPath string) error {\n\trestconfig, err, coreclient := InitRestClient()\n\treader, writer := io.Pipe()\n\tif destPath != \"/\" && strings.HasSuffix(string(destPath[len(destPath)-1]), \"/\") {\n\t\tdestPath = destPath[:len(destPath)-1]\n\t}\n\tif err := checkDestinationIsDir(i, destPath); err == nil {\n\t\tdestPath = destPath + \"/\" + path.Base(srcPath)\n\t}\n\tgo func() {\n\t\tdefer writer.Close()\n\t\terr := cpMakeTar(srcPath, destPath, writer)\n\t\tcmdutil.CheckErr(err)\n\t}()\n\tvar cmdArr []string\n\tcmdArr = []string{\"tar\", \"-xf\", \"-\"}\n\tdestDir := path.Dir(destPath)\n\tif len(destDir) > 0 {\n\t\tcmdArr = append(cmdArr, \"-C\", destDir)\n\t}\n\t//remote shell.\n\treq := coreclient.RESTClient().\n\t\tPost().\n\t\tNamespace(i.Namespace).\n\t\tResource(\"pods\").\n\t\tName(i.Name).\n\t\tSubResource(\"exec\").\n\t\tVersionedParams(&corev1.PodExecOptions{\n\t\t\tContainer: i.ContainerName,\n\t\t\tCommand:   cmdArr,\n\t\t\tStdin:     true,\n\t\t\tStdout:    true,\n\t\t\tStderr:    true,\n\t\t\tTTY:       false,\n\t\t}, scheme.ParameterCodec)\n\texec, err := remotecommand.NewSPDYExecutor(restconfig, \"POST\", req.URL())\n\tif err != nil {\n\t\tlog.Fatalf(\"error %s\\n\", err)\n\t\treturn err\n\t}\n\terr = exec.Stream(remotecommand.StreamOptions{\n\t\tStdin:  reader,\n\t\tStdout: os.Stdout,\n\t\tStderr: os.Stderr,\n\t\tTty:    false,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"error %s\\n\", err)\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc checkDestinationIsDir(i *pod, destPath string) error {\n\treturn i.Exec([]string{\"test\", \"-d\", destPath})\n}\n//go:linkname cpMakeTar k8s.io/kubectl/pkg/cmd/cp.makeTar\nfunc cpMakeTar(srcPath, destPath string, writer io.Writer) error\nfunc (i *pod) copyFromPod(srcPath string, destPath string) error {\n\trestconfig, err, coreclient := InitRestClient()\n\treader, outStream := io.Pipe()\n\t//todo some containers failed : tar: Refusing to write archive contents to terminal (missing -f option?) when execute `tar cf -` in container\n\tcmdArr := []string{\"tar\", \"cf\", \"-\", srcPath}\n\treq := coreclient.RESTClient().\n\t\tGet().\n\t\tNamespace(i.Namespace).\n\t\tResource(\"pods\").\n\t\tName(i.Name).\n\t\tSubResource(\"exec\").\n\t\tVersionedParams(&corev1.PodExecOptions{\n\t\t\tContainer: i.ContainerName,\n\t\t\tCommand:   cmdArr,\n\t\t\tStdin:     true,\n\t\t\tStdout:    true,\n\t\t\tStderr:    true,\n\t\t\tTTY:       false,\n\t\t}, scheme.ParameterCodec)\n\texec, err := remotecommand.NewSPDYExecutor(restconfig, \"POST\", req.URL())\n\tif err != nil {\n\t\tlog.Fatalf(\"error %s\\n\", err)\n\t\treturn err\n\t}\n\tgo func() {\n\t\tdefer outStream.Close()\n\t\terr = exec.Stream(remotecommand.StreamOptions{\n\t\t\tStdin:  os.Stdin,\n\t\t\tStdout: outStream,\n\t\t\tStderr: os.Stderr,\n\t\t\tTty:    false,\n\t\t})\n\t\tcmdutil.CheckErr(err)\n\t}()\n\tprefix := getPrefix(srcPath)\n\tprefix = path.Clean(prefix)\n\tprefix = cpStripPathShortcuts(prefix)\n\tdestPath = path.Join(destPath, path.Base(prefix))\n\terr = untarAll(reader, destPath, prefix)\n\treturn err\n}\nfunc untarAll(reader io.Reader, destDir, prefix string) error {\n\ttarReader := tar.NewReader(reader)\n\tfor {\n\t\theader, err := tarReader.Next()\n\t\tif err != nil {\n\t\t\tif err != io.EOF {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tif !strings.HasPrefix(header.Name, prefix) {\n\t\t\treturn fmt.Errorf(\"tar contents corrupted\")\n\t\t}\n\t\tmode := header.FileInfo().Mode()\n\t\tdestFileName := filepath.Join(destDir, header.Name[len(prefix):])\n\t\tbaseName := filepath.Dir(destFileName)\n\t\tif err := os.MkdirAll(baseName, 0755); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif header.FileInfo().IsDir() {\n\t\t\tif err := os.MkdirAll(destFileName, 0755); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tevaledPath, err := filepath.EvalSymlinks(baseName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif mode&os.ModeSymlink != 0 {\n\t\t\tlinkname := header.Linkname\n\t\t\tif !filepath.IsAbs(linkname) {\n\t\t\t\t_ = filepath.Join(evaledPath, linkname)\n\t\t\t}\n\t\t\tif err := os.Symlink(linkname, destFileName); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t} else {\n\t\t\toutFile, err := os.Create(destFileName)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tdefer outFile.Close()\n\t\t\tif _, err := io.Copy(outFile, tarReader); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := outFile.Close(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\nfunc getPrefix(file string) string {\n\treturn strings.TrimLeft(file, \"/\")\n}\n//go:linkname cpStripPathShortcuts k8s.io/kubectl/pkg/cmd/cp.stripPathShortcuts\nfunc cpStripPathShortcuts(p string) string"
  },
  {
    "url": "https://stackoverflow.com/questions/31910482/golang-unmarshal-json-list",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nvar body = `[\n{\n\"amount\":\"6.40000000\",\n\"date\":\"1439165701\",\n\"price\":\"350.26\",\n\"tid\":104159\n},\n{\n\"amount\":\"0.10025000\",\n\"date\":\"1439162764\",\n\"price\":\"351.03\",\n\"tid\":104150\n}\n]\n`\ntype TransactionResponse []Transaction\ntype Transaction struct {\n\tAmount string `json:\"amount\"`\n\tDate   string `json:\"date\"`\n\tPrice  string `json:\"price\"`\n\tTid    uint   `json:\"tid\"`\n}\nfunc main() {\n\tvar transactions TransactionResponse\n\terr := json.Unmarshal([]byte(body), &transactions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(transactions)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76287477/why-reading-and-writing-files-in-go-is-much-slower-than-in-perl",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n)\nfunc main() {\n\tin := bufio.NewScanner(os.Stdin)\n\tout := bufio.NewWriter(os.Stdout)\n\tfor in.Scan() {\n\t\ts := bytes.TrimSpace(in.Bytes())\n\t\tif _, err := out.Write(s); err != nil {\n\t\t\tfmt.Fprint(os.Stderr, \"failed to write file:\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\tif err := out.Flush(); err != nil {\n\t\tfmt.Fprint(os.Stderr, \"failed to write file:\", err)\n\t\tos.Exit(1)\n\t}\n\tif err := in.Err(); err != nil {\n\t\tfmt.Fprint(os.Stderr, \"reading failed:\", err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52878808/making-ioutil-readallresponse-body-throw-error-in-golang",
    "body": "import (\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n)\ntype mockReadCloser struct {\n\tmock.Mock\n}\nfunc (m *mockReadCloser) Read(p []byte) (n int, err error) {\n\targs := m.Called(p)\n\treturn args.Int(0), args.Error(1)\n}\nfunc (m *mockReadCloser) Close() error {\n\targs := m.Called()\n\treturn args.Error(0)\n}\nfunc TestTestingSomethingWithBodyError(t *testing.T) {\n\tmockReadCloser := mockReadCloser{}\n\t// if Read is called, it will return error\n\tmockReadCloser.On(\"Read\", mock.AnythingOfType(\"[]uint8\")).Return(0, fmt.Errorf(\"error reading\"))\n\t// if Close is called, it will return error\n\tmockReadCloser.On(\"Close\").Return(fmt.Errorf(\"error closing\"))\n\trequest := &http.Request{\n\t\t// pass the mock address\n\t\tBody: &mockReadCloser,\n\t}\n\texpected := \"what you expected\"\n\tresult := YourMethod(request)\n\tassert.Equal(t, expected, result)\n    mockReadCloser.AssertExpectations(t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71246253/handle-goroutine-termination-and-error-handling-via-error-group",
    "body": "for i := 0; i < 3; i++ {\n\t\tworker_num := i\n\t\tg.Go(func() error {\n\t\t\tfor file := range fileChan {\n\t\t\t\tif err := getBytesFromFile(file, dataChan); err != nil {\n\t\t\t\t\tfmt.Println(\"worker\", worker_num, \"failed to process\", file, \":\", err.Error())\n\t\t\t\t\treturn err\n\t\t\t\t} else if err := ctx.Err(); err != nil {\n\t\t\t\t\tfmt.Println(\"worker\", worker_num, \"context error in worker:\", err.Error())\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tfmt.Println(\"worker\", worker_num, \"processed all work on channel\")\n\t\t\treturn nil\n\t\t})\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/71246253/handle-goroutine-termination-and-error-handling-via-error-group",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"golang.org/x/sync/errgroup\"\n)\nfunc main() {\n\tvar myFiles = []string{\"file1\", \"file2\", \"file3\", \"file4\", \"file5\", \"file6\"}\n\tfileChan := make(chan string)\n\tdataChan := make(chan fileData)\n\tg, ctx := errgroup.WithContext(context.Background())\n\tfor i := 0; i < 3; i++ {\n\t\tworker_num := i\n\t\tg.Go(func() error {\n\t\t\tfor file := range fileChan {\n\t\t\t\tif err := getBytesFromFile(file, dataChan); err != nil {\n\t\t\t\t\tfmt.Println(\"worker\", worker_num, \"failed to process\", file, \":\", err.Error())\n\t\t\t\t\treturn err\n\t\t\t\t} else if err := ctx.Err(); err != nil {\n\t\t\t\t\tfmt.Println(\"worker\", worker_num, \"context error in worker:\", err.Error())\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tfmt.Println(\"worker\", worker_num, \"processed all work on channel\")\n\t\t\treturn nil\n\t\t})\n\t}\n\t// dispatch files\n\tg.Go(func() error {\n\t\tdefer close(fileChan)\n\t\tdone := ctx.Done()\n\t\tfor _, file := range myFiles {\n\t\t\tif err := ctx.Err(); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase fileChan <- file:\n\t\t\t\tcontinue\n\t\t\tcase <-done:\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn ctx.Err()\n\t})\n\tvar err error\n\tgo func() {\n\t\terr = g.Wait()\n\t\tclose(dataChan)\n\t}()\n\tvar myMap = make(map[string]string)\n\tfor data := range dataChan {\n\t\tmyMap[data.name] = data.bytes\n\t}\n\tif err != nil {\n\t\tfmt.Println(\"errgroup Error:\", err.Error())\n\t}\n\tenc := json.NewEncoder(os.Stdout)\n\tenc.SetIndent(\"\", \" \")\n\tif err := enc.Encode(myMap); err != nil {\n\t\tpanic(err)\n\t}\n}\ntype fileData struct {\n\tname,\n\tbytes string\n}\nfunc getBytesFromFile(file string, dataChan chan fileData) error {\n\tbytes, err := openFileAndGetBytes(file)\n\tif err == nil {\n\t\tdataChan <- fileData{name: file, bytes: bytes}\n\t}\n\treturn err\n}\nfunc openFileAndGetBytes(file string) (string, error) {\n\tif file == \"file2\" {\n\t\treturn \"\", fmt.Errorf(\"%s cannot be read\", file)\n\t}\n\treturn fmt.Sprintf(\"these are some bytes for file %s\", file), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65950011/what-is-the-best-practice-when-using-with-context-withtimeout-in-go",
    "body": "func makeHTTPRequest(ctx context.Context) (string, error) {\n\tch := make(chan string)\n\tgo func() {\n\t\ttime.Sleep(10 * time.Second)\n\t\tselect {\n\t\tcase ch <- \"abc\":\n\t\tdefault:\n            // When context deadline exceeded, there is no receiver\n            // This case will prevent goroutine blocking forever\n\t\t\treturn\n\t\t}\n\t}()\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn \"\", ctx.Err()\n\tcase result := <-ch:\n\t\treturn result, nil\n\t}\n}\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tfmt.Printf(\"[%v] Begin make request \\n\", time.Now())\n\tabc, err := makeHTTPRequest(ctx)\n\tif err != nil {\n\t\tfmt.Printf(\"[%v] Return error: %v \\n\", time.Now(), err)\n\t\treturn\n\t}\n\tfmt.Printf(\"[%v] %s\", time.Now(), abc)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70616183/is-img-at-or-rgba-pix-faster-better-for-retrieving-pixel-data-from-a-golang",
    "body": "func main() {\n\tresp, err := http.Get(\"IMAGE URL GOES HERE\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\timg, _, err := image.Decode(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar start time.Time\n\tvar duration time.Duration\n\tsamples := 10\n\tvar sum time.Duration\n\tfmt.Println(\"Samples: \", samples)\n\tsum = time.Duration(0)\n\tfor i := 0; i < samples; i++ {\n\t\tstart = time.Now()\n\t\tusingAt(img)\n\t\tduration = time.Since(start)\n\t\tsum += duration\n\t}\n\tfmt.Println(\"*** At avg: \", sum/time.Duration(samples))\n\tsum = time.Duration(0)\n\tfor i := 0; i < samples; i++ {\n\t\tstart = time.Now()\n\t\tusingPix(img)\n\t\tduration = time.Since(start)\n\t\tsum += duration\n\t}\n\tfmt.Println(\"*** Pix avg: \", sum/time.Duration(samples))\n}\nfunc usingAt(img image.Image) {\n\tbounds := img.Bounds()\n\twidth, height := bounds.Max.X, bounds.Max.Y\n\tfor y := 0; y < height; y++ {\n\t\tfor x := 0; x < width; x++ {\n\t\t\tr, g, b, _ := img.At(x, y).RGBA()\n\t\t\t_ = uint8(r >> 8)\n\t\t\t_ = uint8(g >> 8)\n\t\t\t_ = uint8(b >> 8)\n\t\t}\n\t}\n}\nfunc usingPix(img image.Image, targetColor colorful.Color) {\n\tbounds := img.Bounds()\n\twidth, height := bounds.Max.X, bounds.Max.Y\n\trgba := image.NewRGBA(bounds)\n\tdraw.Draw(rgba, bounds, img, bounds.Min, draw.Src)\n\tfor y := 0; y < height; y++ {\n\t\tfor x := 0; x < width; x++ {\n\t\t\tindex := (y*width + x) * 4\n\t\t\tpix := rgba.Pix[index : index+4]\n\t\t\t_ = pix[0]\n\t\t\t_ = pix[1]\n\t\t\t_ = pix[2]\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70094078/what-is-the-proper-way-using-composition-in-golang",
    "body": "package main\n//Lamp struct is here to suppress the *DB that was in the original example\ntype Lamp struct {}\ntype Room struct {\n\tLamps *[]Lamp\n}\nfunc NewRoom(l *[]Lamp) *Room {\n  return &Room{l}\n}\ntype House1 struct {\n\tRoom *Room\n}\nfunc NewHouse1(l *[]Lamp) *House1 {\n  r := NewRoom(l)\n  return &House1{r}\n}\ntype House2 struct {\n\tRoom *Room\n}\nfunc NewHouse2(l *[]Lamp) *House2 {\n  r := NewRoom(l)\n  return &House2{r}\n}\nfunc main(){\n  lamps := []Lamp{}\n  house1 := NewHouse1(&lamps)\n  house2 := NewHouse2(&lamps)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70094078/what-is-the-proper-way-using-composition-in-golang",
    "body": "package main\ntype LibraryCard struct {}\ntype Student struct {\n   LibCard *LibraryCard\n}\nfunc NewStudent(l *LibraryCard) *Student {\n  return &Student{l}\n}\ntype Classroom1 struct {\n\tStudent *Student\n}\nfunc NewClassroom1(s *Student) *Classroom1 {\n  return &Classroom1{s}\n}\ntype Classroom2 struct {\n\tStudent *Student\n}\nfunc NewClassroom2(s *Student) *Classroom2 {\n  return &Classroom2{s}\n}\nfunc main(){\n  lc := new(LibraryCard)\n  student := NewStudent(lc)\n  classroom1 := NewClassroom1(student)\n  classroom2 := NewClassroom2(student)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73215835/golang-prometheus-exporter-pull-metrics-on-demand",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\ntype Collector struct {\n    // Add one of the below lines for each collector you define in the newCollector() function\n\tsystemTime    *prometheus.Desc\n}\n// Declare your exporter metrics here. Referred to as \"collectors\"\nfunc newCollector() *Collector {\n\treturn &Collector{\n\t\tsystemTime: prometheus.NewDesc(\"my_system_time\",\n\t\t\t\"System timestamp in unix epoch format\",\n\t\t\tnil, nil,\n\t\t),\n        // Add more collectors (aka metric definitions) here\n\t}\n}\nfunc (collector *Collector) Describe(ch chan<- *prometheus.Desc) {\n\t// Add one of these lines for each of your collectors declared above\n\tch <- collector.systemTime\n}\n// This fuction runs when Prometheus scrapes the exporter. It will set a new value for the metric(s)\n// I have no idea how it works, but it does.\nfunc (collector *Collector) Collect(ch chan<- prometheus.Metric) {\n\tvar setSystemTime float64\n\t// Calculate the value of the metric\n\tsetSystemTime = float64(time.Now().Unix())\n\t// Here is where you set the \"new\" value for the metric\n    // This example is a Gauge, but it can be any Prom metric type\n\tch <- prometheus.MustNewConstMetric(collector.systemTime, prometheus.GaugeValue, setSystemTime)\n}\n// Main function, spawns the collector and the web server\nfunc main() {\n\tcollector := newCollector()\n\tprometheus.MustRegister(collector)\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Fatal(http.ListenAndServe(\":19100\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70509909/golang-follow-redirect-for-post-requests-with-body-data",
    "body": "func FollowRedirectForPost() {\n\tclient := &http.Client{\n\t\tCheckRedirect: redirectPostOn302,\n\t}\n\n    req, _ := http.NewRequest(http.MethodPost, \"example.com/test\", strings.NewReader(url.Values{\n        \"key\": {\"value\"},\n        \"key1\":{\"value1\"},\n    }.Encode()))\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    client.Do(req) // If server returns 302 Redirect so it means I need make the same request with the same body to\n    // a different location. Just imagine i replaced \"example.com/test\" to \"example.com/redirect_url\"\n}\nfunc redirectPostOn302(req *http.Request, via []*http.Request) error {\n\tif len(via) >= 10 {\n\t\treturn errors.New(\"stopped after 10 redirects\")\n\t}\n\tlastReq := via[len(via)-1]\n\tif req.Response.StatusCode == 302 && lastReq.Method == http.MethodPost {\n\t\treq.Method = http.MethodPost\n\t\t// Get the body of the original request, set here, since req.Body will be nil if a 302 was returned\n\t\tif via[0].GetBody != nil {\n\t\t\tvar err error\n\t\t\treq.Body, err = via[0].GetBody()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treq.ContentLength = via[0].ContentLength\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70442475/global-vars-in-golang",
    "body": "package config\nvar (\n    // You wouldn't call the variable \"Get*\", that exposes\n    // the implementation.\n    HTTPServerAddress = getHTTPServerAddress()\n    HTTPReadTimeout = getHTTPReadTimeout()\n    HTTPWriteTimeout = getHTTPWriteTimeout()\n)\nfunc getHTTPServerAddress() string {\n    return getConfigString(\"http.server_address\")\n}\nfunc getHTTPReadTimeout() time.Duration {\n    return getConfigDuration(\"http.read_timeout\")\n}\nfunc getHTTPWriteTimeout() time.Duration {\n    return getConfigDuration(\"http.write_timeout\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70442475/global-vars-in-golang",
    "body": "var (\n\tErrInvalid    = errInvalid()    // \"invalid argument\"\n\tErrPermission = errPermission() // \"permission denied\"\n\tErrExist      = errExist()      // \"file already exists\"\n\tErrNotExist   = errNotExist()   // \"file does not exist\"\n\tErrClosed     = errClosed()     // \"file already closed\"\n)\nfunc errInvalid() error    { return oserror.ErrInvalid }\nfunc errPermission() error { return oserror.ErrPermission }\nfunc errExist() error      { return oserror.ErrExist }\nfunc errNotExist() error   { return oserror.ErrNotExist }\nfunc errClosed() error     { return oserror.ErrClosed }"
  },
  {
    "url": "https://stackoverflow.com/questions/69491963/opa-rego-as-go-lib-how-to-apply-external-data",
    "body": "\tdata := `{\n        \"example\": {\n            \"users\": [\n                {\n                    \"name\": \"alice\",\n                    \"likes\": [\"dogs\", \"clouds\"]\n                },\n                {\n                    \"name\": \"bob\",\n                    \"likes\": [\"pizza\", \"cats\"]\n                }\n            ]\n        }\n    }`\n\tvar json map[string]interface{}\n\terr := util.UnmarshalJSON([]byte(data), &json)\n\tif err != nil {\n\t\t// Handle error.\n\t}\n\tstore := inmem.NewFromObject(json)\n\t// Create new query that returns the value\n\trego := rego.New(\n\t\trego.Query(\"data.example.users[0].likes\"),\n\t\trego.Store(store))"
  },
  {
    "url": "https://stackoverflow.com/questions/57955253/abstract-implementation-of-log-repo",
    "body": "... other imports ...\nimport kitlogrus \"github.com/go-kit/kit/log/logrus\"\nimport \"github.com/sirupsen/logrus\"\nfunc Init(format LogFormat, logLevel LogLevel) {\n\tvar l log.Logger\n\tswitch format {\n\tcase FormatJson:\n\t\tl = log.NewJSONLogger(os.Stdout)\n\tcase FormatLogfmt:\n\t\tl = log.NewLogfmtLogger(os.Stdout)\n\tcase FormatNop:\n\t\tl = log.NewNopLogger()\n    case FormatLogrus:\n        l = kitlogrus.NewLogrusLogger(logrus.New())\n    case FormatZap:\n\tdefault:\n\t\tpanic(fmt.Errorf(\"invalid log format: %v\", format))\n\t}\n    ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71643902/how-to-reload-go-fiber-in-the-terminal",
    "body": "# .air.conf\n# Config file for [Air](https://github.com/cosmtrek/air) in TOML format\n# Working directory\n# . or absolute path, please note that the directories following must be under root.\nroot = \".\"\ntmp_dir = \"tmp\"\n[build]\n# Just plain old shell command. You could use `make` as well.\ncmd = \"go build -o ./tmp/main .\"\n# Binary file yields from `cmd`.\nbin = \"tmp/main\"\n# Customize binary.\nfull_bin = \"APP_ENV=dev APP_USER=air ./tmp/main\"\n# Watch these filename extensions.\ninclude_ext = [\"go\", \"tpl\", \"tmpl\", \"html\"]\n# Ignore these filename extensions or directories.\nexclude_dir = [\"assets\", \"tmp\", \"vendor\", \"frontend/node_modules\"]\n# Watch these directories if you specified.\ninclude_dir = []\n# Exclude files.\nexclude_file = []\n# It's not necessary to trigger build each time file changes if it's too frequent.\ndelay = 1000 # ms\n# Stop to run old binary when build errors occur.\nstop_on_error = true\n# This log file places in your tmp_dir.\nlog = \"air_errors.log\"\n[log]\n# Show log time\ntime = false\n[color]\n# Customize each part's color. If no color found, use the raw app log.\nmain = \"magenta\"\nwatcher = \"cyan\"\nbuild = \"yellow\"\nrunner = \"green\"\n[misc]\n# Delete tmp directory on exit\nclean_on_exit = true"
  },
  {
    "url": "https://stackoverflow.com/questions/71458290/how-to-batch-dealing-with-files-using-goroutine",
    "body": "func main() {\n\tstack := []string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"}\n\twork := make(chan string)\n\tresults := make(chan string)\n\t// create worker 5 goroutines\n\twg := sync.WaitGroup{}\n\tfor i := 0; i < 5; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tfor s := range work {\n\t\t\t\tresults <- B(A(s))\n\t\t\t}\n\t\t}()\n\t}\n\t// send the work to the workers\n\t// this happens in a goroutine in order\n\t// to not block the main function, once\n\t// all 5 workers are busy\n\tgo func() {\n\t\tfor _, s := range stack {\n\t\t   // could read the file from disk\n\t\t   // here and pass a pointer to the file\n\t\t\twork <- s\n\t\t}\n\t\t// close the work channel after\n\t\t// all the work has been send\n\t\tclose(work)\n\t\t// wait for the workers to finish\n\t\t// then close the results channel\n\t\twg.Wait()\n\t\tclose(results)\n\t}()\n\t// collect the results\n\t// the iteration stops if the results\n\t// channel is closed and the last value\n\t// has been received\n\tfor result := range results {\n\t    // could write the file to disk\n\t\tfmt.Println(result)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68939352/check-if-all-goroutines-have-finished-without-using-wg-wait",
    "body": "func IsAPrimaryColour(ctx context.Context, value interface{}) (bool, error) {\n\tvar nsec int64 = time.Now().UnixNano()\n\terrFound := errors.New(\"result found\")\n\tg, ctx := errgroup.WithContext(ctx)\n\tg.Go(func() error {\n\t\tresult, err := IsRed(ctx, value)\n\t\tif result {\n\t\t\terr = errFound\n\t\t}\n\t\tfmt.Printf(\"IsRed done in %f nanoseconds \\n\", float64(time.Now().UnixNano()-nsec))\n\t\treturn err\n\t})\n\t…\n\terr := g.Wait()\n\tif err == errFound {\n\t\tfmt.Printf(\"some goroutine returned errFound\\n\")\n\t\treturn true, nil\n\t}\n\tif err != nil {\n\t\tfmt.Printf(\"some goroutine returned an error\\n\")\n\t\treturn false, err\n\t}\n\tfmt.Printf(\"all goroutines have finished and none of them returned true\\n\")\n\treturn false, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66067549/how-to-write-a-custom-error-reporter-in-go-target-of-antlr",
    "body": "type BetterBailErrorStrategy struct {\n\t*antlr.DefaultErrorStrategy\n}\nvar _ antlr.ErrorStrategy = &BetterBailErrorStrategy{}\nfunc NewBetterBailErrorStrategy() *BetterBailErrorStrategy {\n\tb := new(BetterBailErrorStrategy)\n\tb.DefaultErrorStrategy = antlr.NewDefaultErrorStrategy()\n\treturn b\n}\nfunc (b *BetterBailErrorStrategy) ReportError(recognizer antlr.Parser, e antlr.RecognitionException) {\n    // pass, do nothing\n}\nfunc (b *BetterBailErrorStrategy) Recover(recognizer antlr.Parser, e antlr.RecognitionException) {\n\t// pass, do nothing\n}\n// Make sure we don't attempt to recover from problems in subrules.//\nfunc (b *BetterBailErrorStrategy) Sync(recognizer antlr.Parser) {\n\t// pass, do nothing\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64468241/recursive-type-constraint-using-a-defined-type-rather-than-a-type-literal",
    "body": "type Apple int\nfunc (a Apple) Less(other Apple) bool {\n\treturn a < other\n}\ntype Orange int\nfunc (o Orange) Less(other Orange) bool {\n\treturn o < other\n}\nfunc main() {\n\tfmt.Println(IsLess(Apple(10), Apple(20)))   // true\n\tfmt.Println(IsLess(Orange(30), Orange(15))) // false\n\t// fmt.Println(IsLess(10, 30))\n\t// compilation error: int does not implement Lesser[T] (missing method Less)\n\t// fmt.Println(IsLess(Apple(20), Orange(30)))\n\t// compilation error: type Orange of Orange(30) does not match inferred type Apple for T\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64126780/go-run-loop-in-parallel-with-timeout",
    "body": "func main() {\n\t// Make buffered channels\n\tbuffer := len(testers)\n\tjobsPipe := make(chan Tap, buffer)               // Jobs will be of type `Tap`\n\tresultsPipe := make(chan testerResponse, buffer) // Results will be of type `testerResponse`\n\t// Create worker pool\n\t// Max workers default is 5\n\t// maxWorkers := 5\n\t// for i := 0; i < maxWorkers; i++ {\n\t// \tgo worker(jobsPipe, resultsPipe)\n\t// }\n    // the loop above is the same as doing:\n    go worker(jobsPipe, resultsPipe)\n    go worker(jobsPipe, resultsPipe)\n    go worker(jobsPipe, resultsPipe)\n    go worker(jobsPipe, resultsPipe)\n    go worker(jobsPipe, resultsPipe)\n    // ^^ this creates 5 workers..\n\tmakeJobs(jobsPipe, testers)\n\tgetResults(resultsPipe, testers)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64126780/go-run-loop-in-parallel-with-timeout",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\ntype HT interface {\n\tName() string\n\tCheck() (*testerResponse, error)\n}\ntype testerResponse struct {\n\terr  error\n\tname string\n\tres  http.Response\n\turl  string\n}\ntype Tap struct {\n\turl     string\n\tname    string\n\ttimeout time.Duration\n\tclient  *http.Client\n}\nfunc NewTap(name, url string, timeout time.Duration) *Tap {\n\treturn &Tap{\n\t\turl:    url,\n\t\tname:   name,\n\t\tclient: &http.Client{Timeout: timeout},\n\t}\n}\nfunc (p *Tap) Check() testerResponse {\n\tfmt.Printf(\"Fetching %s %s \\n\", p.name, p.url)\n\t// theres really no need for NewTap\n\tnt := NewTap(p.name, p.url, p.timeout)\n\tres, err := nt.client.Get(p.url)\n\tif err != nil {\n\t\treturn testerResponse{err: err}\n\t}\n\t// need to close body\n\tres.Body.Close()\n\treturn testerResponse{name: p.name, res: *res, url: p.url}\n}\nfunc (p *Tap) Name() string {\n\treturn p.name\n}\n// makeJobs fills up our jobs channel\nfunc makeJobs(jobs chan<- Tap, taps []Tap) {\n\tfor _, t := range taps {\n\t\tjobs <- t\n\t}\n}\n// getResults takes a job from our jobs channel, gets the result, and\n// places it on the results channel\nfunc getResults(tr <-chan testerResponse, taps []Tap) {\n\tfor range taps {\n\t\tr := <-tr\n\t\tstatus := fmt.Sprintf(\"'%s' to '%s' was fetched with status '%d'\\n\", r.name, r.url, r.res.StatusCode)\n\t\tif r.err != nil {\n\t\t\tstatus = fmt.Sprintf(r.err.Error())\n\t\t}\n\t\tfmt.Printf(status)\n\t}\n}\n// worker defines our worker func. as long as there is a job in the\n// \"queue\" we continue to pick up  the \"next\" job\nfunc worker(jobs <-chan Tap, results chan<- testerResponse) {\n\tfor n := range jobs {\n\t\tresults <- n.Check()\n\t}\n}\nvar (\n\ttesters = []Tap{\n\t\t{\n\t\t\tname:    \"1\",\n\t\t\turl:     \"http://google.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"2\",\n\t\t\turl:     \"http://www.yahoo.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"3\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"4\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"5\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"6\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"7\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"8\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"9\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"10\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"11\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"12\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t\t{\n\t\t\tname:    \"13\",\n\t\t\turl:     \"http://stackoverflow.com\",\n\t\t\ttimeout: time.Second * 20,\n\t\t},\n\t\t{\n\t\t\tname:    \"14\",\n\t\t\turl:     \"http://www.example.com\",\n\t\t\ttimeout: time.Second * 10,\n\t\t},\n\t}\n)\nfunc main() {\n\t// Make buffered channels\n\tbuffer := len(testers)\n\tjobsPipe := make(chan Tap, buffer)               // Jobs will be of type `Tap`\n\tresultsPipe := make(chan testerResponse, buffer) // Results will be of type `testerResponse`\n\t// Create worker pool\n\t// Max workers default is 5\n\t// maxWorkers := 5\n\t// for i := 0; i < maxWorkers; i++ {\n\t//  go worker(jobsPipe, resultsPipe)\n\t// }\n\t// the loop above is the same as doing:\n\tgo worker(jobsPipe, resultsPipe)\n\tgo worker(jobsPipe, resultsPipe)\n\tgo worker(jobsPipe, resultsPipe)\n\tgo worker(jobsPipe, resultsPipe)\n\tgo worker(jobsPipe, resultsPipe)\n\t// ^^ this creates 5 workers..\n\tmakeJobs(jobsPipe, testers)\n\tgetResults(resultsPipe, testers)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62925871/grpc-rate-limiting-an-api-on-a-per-rpc-basis",
    "body": "// import grpc_middleware \"github.com/grpc-ecosystem/go-grpc-middleware\"\n// import \"google.golang.org/grpc\"\n\tgrpcServer := grpc.NewServer(\n        // WithUnaryServerChain is a grpc.Server config option that accepts multiple unary interceptors.\n\t\tgrpc_middleware.WithUnaryServerChain(\n            // UnaryServerInterceptor provides a hook to intercept the execution of a unary RPC on the server. info\n            // contains all the information of this RPC the interceptor can operate on. And handler is the wrapper\n            // of the service method implementation. It is the responsibility of the interceptor to invoke handler\n            // to complete the RPC.\n\t\t\tgrpc.UnaryInterceptor(func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {\n\t\t\t\t// FullMethod is the full RPC method string, i.e., /package.service/method.\n\t\t\t\tswitch info.FullMethod {\n\t\t\t\tcase \"/mypackage.someservice/DoThings\":\n                    // ... rate limiting code\n                    // if all is good, then call the handler\n                    return handler(ctx, req)\n\t\t\t\t}\n\t\t\t}),\n\t\t\t// other `grpc.ServerOption` opts\n        ),\n\t)"
  },
  {
    "url": "https://stackoverflow.com/questions/59190078/how-to-set-a-default-value-when-unmarshal-a-json-to-struct",
    "body": "type StructTest struct {\n\tV     int64\n\tOther string // this field should be unmarshaled the regular way\n}\nfunc (st *StructTest) UnmarshalJSON(data []byte) error {\n\t// create alias to prevent endless loop\n\ttype Alias StructTest\n\ttmp := struct {\n\t\t*Alias\n\t\tV *int64\n\t}{\n\t\tAlias: (*Alias)(st),\n\t}\n\t// unmarshal into temporary struct\n\terr := json.Unmarshal(data, &tmp)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// check if V was supplied in JSON and set default value if it wasn't\n\tif tmp.V == nil {\n\t\tst.V = 1 // default\n\t} else {\n\t\tst.V = *tmp.V\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57838025/get-frame-from-video-bytes",
    "body": "func ExtractImage(fileBytes []byte){\n\t// command line args, path, and command\n\tcommand := \"ffmpeg\"\n\tframeExtractionTime := \"0:00:05.000\"\n\tvframes := \"1\"\n\tqv := \"2\"\n\toutput := \"/home/ubuntu/media/video-to-image/output-\" + time.Now().Format(time.Kitchen) + \".jpg\"\n\tcmd := exec.Command(command,\n\t\t\"-ss\", frameExtractionTime,\n\t\t\"-i\", \"-\",  // to read from stdin\n\t\t\"-vframes\", vframes,\n\t\t\"-q:v\", qv,\n\t\toutput)\n\tcmd.Stdin = bytes.NewBuffer(fileBytes)\n\t// run the command and don't wait for it to finish. waiting exec is run\n\t// ignore errors for examples-sake\n\t_ = cmd.Start()\n\t_ = cmd.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52587537/non-blocking-channel-in-go",
    "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\t\"time\"\n)\nfunc main() {\n\t// user score, no.of questions asked so far\n\tvar score, num int\n\tvar correct bool // temporary variable to decide if the answer is right\n\t// questions\n\tvar questions = make([]string, 13)\n\tt1 := time.Tick(time.Second * 7) // timer loop:\n\tfor {\n\t\tselect {\n\t\tcase <-t1:\n\t\t\tlog.Println(\"ran out of time\")\n\t\t\tbreak loop\n\t\tdefault:\n\t\t\t// have any questions further questions to ask\n\t\t\tif num < len(questions) {\n\t\t\t\t// simulate typing\n\t\t\t\ttime.Sleep(time.Millisecond * 777)\n\t\t\t\t// correct or wrong answer\n\t\t\t\tcorrect = (rand.Intn(777)%2 == 0)\n\t\t\t\tif correct {\n\t\t\t\t\tfmt.Println(\"you did it\")\n\t\t\t\t\tscore++ //increase score\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Println(\"try again\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// no questions, state and break\n\t\t\t\tlog.Println(\"all questions were finished\")\n\t\t\t\tbreak loop //break loop, all questions were finished\n\t\t\t}\n\t\t\tnum++\n\t\t}\n\t}\n\t//print final score\n\tfmt.Println(\"your score is:\", score)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78519208/golang-squirrel-query-builder-build-query-which-does-not-execute",
    "body": "psql := sq.StatementBuilder.PlaceholderFormat(sq.Dollar)\n// You use question marks for placeholders...\nsql, _, _ := psql.Select(\"*\").From(\"elephants\").Where(\"name IN (?,?)\", \"Dumbo\", \"Verna\").ToSql()\n/// ...squirrel replaces them using PlaceholderFormat.\nsql == \"SELECT * FROM elephants WHERE name IN ($1,$2)\"\n/// You can retrieve id ...\nquery := sq.Insert(\"nodes\").\n    Columns(\"uuid\", \"type\", \"data\").\n    Values(node.Uuid, node.Type, node.Data).\n    Suffix(\"RETURNING \\\"id\\\"\").\n    RunWith(m.db).\n    PlaceholderFormat(sq.Dollar)\nquery.QueryRow().Scan(&node.id)"
  },
  {
    "url": "https://stackoverflow.com/questions/78332420/gin-gonic-context-getting-cancelled-in-child-go-routines",
    "body": "func detachContext(c *gin.Context) *gin.Context {\n  // First call .Copy on the gin.Context. This doesn't behave quite as\n  // we'd originally expect, and references the c.Request rather than\n  // actually copying it. Hence, we'll need to follow up with a proper\n  // clone of the underlying Request.\n  copy := c.Copy()\n  // As we don't want to modify the existing http.Request,\n  // we want to use Clone, which handily allows us to specify\n  // a new context.Context.\n  // We use context.WithoutCancel to take a copy of the values of\n  // a context without inheriting it's cancellation propagation.\n  copy.Request = copy.Request.Clone(context.WithoutCancel(copy.Request.Context))\n  return copy\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77357071/what-is-the-proper-way-to-update-prometheus-counters-from-goroutine",
    "body": "package main\nimport (\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\nvar c = prometheus.NewCounterVec(prometheus.CounterOpts{\n\tName: \"example\",\n\tHelp: \"Example.\",\n}, []string{\"label\", \"type\"})\ntype Handler struct {\n}\ntype Event struct {\n\tLabel string\n\tType  string\n}\nfunc (h *Handler) OnEvent(e *Event) {\n\tc.WithLabelValues(e.Label, e.Type).Inc()\n}\nfunc main() {\n\tprometheus.MustRegister(c)\n\t(&Handler{}).OnEvent(&Event{\n\t\tLabel: \"a\",\n\t\tType:  \"1\",\n\t})\n\t(&Handler{}).OnEvent(&Event{\n\t\tLabel: \"b\",\n\t\tType:  \"2\",\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76437891/compile-golang-package-in-yocto",
    "body": "SUMMARY = \"MediaMTX / rtsp-simple-server is a ready-to-use and zero-dependency server and proxy that allows users to publish, read and proxy live video and audio streams.\"\nGO_IMPORT = \"github.com/bluenviron/mediamtx\"\nHOMEPAGE = \"https://${GO_IMPORT}\"\nLICENSE = \"MIT\"\nLIC_FILES_CHKSUM = \"file://src/${GO_IMPORT}/LICENSE;md5=77fd2623bd5398430be5ce60489c2e81\"\nSRC_URI = \"git://${GO_IMPORT};branch=main;protocol=https\"\nSRCREV = \"65f617aa7c326f491c4f4f4a4d52beea3bd6abc7\"\nGO_INSTALL = \"${GO_IMPORT}\"\ndo_compile[network] = \"1\"\n# build executable instead of shared object\nGO_LINKSHARED = \"\"\nGOBUILDFLAGS:remove = \"-buildmode=pie\"\ninherit go-mod\nFILES:${PN} += \"/usr/local/bin\""
  },
  {
    "url": "https://stackoverflow.com/questions/75739563/converting-struct-to-csv-string",
    "body": "func main() {\n\td := Data{\n\t\tid:   []string{\"id_1\", \"id_1\", \"id_1\", \"id_1\"},\n\t\tcol1: []float64{340.384926, 321.385028, 520.341473, 500.385473},\n\t\tcol2: []float64{123.285031, 4087.284675, -8958.284216, -7612.283668},\n\t}\n\td2dslice := TransformDataTo2DSlice(d)\n\t// fmt.Printf(\"%+v\", d2dslice)\n\t// [[id, col1, col2],\n\t// [id_1, 340.384926, 123.285031],\n\t// [id_1, 321.385028, 4087.284675],\n\t// [id_1, 520.341473, -8958.284216],\n\t// [id_1,500.385473,-7612.283668]]\n\tw := csv.NewWriter(os.Stdout)\n\tw.WriteAll(d2dslice)\n\tif err := w.Error(); err != nil {\n\t\tlog.Fatalln(\"error writing csv:\", err)\n\t}\n    // stdout:\n    // id,col1,col2\n    // id_1,340.384926,123.285031\n    // id_1,321.385028,4087.284675\n    // id_1,520.341473,-8958.284216\n    // id_1,500.385473,-7612.283668\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75162669/how-can-i-use-toml-fixtures-to-seed-my-database-in-a-development-environment-usi",
    "body": "package grifts\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"github.com/gobuffalo/grift/grift\"\n\t\"github.com/gobuffalo/suite/v4\"\n\t\"github.com/gobuffalo/suite/v4/fix\"\n)\nvar _ = grift.Namespace(\"db\", func() {\n\tgrift.Desc(\"seed\", \"Seeds a database\")\n\tgrift.Add(\"seed\", func(c *grift.Context) error {\n\t\t// The DB connection will connect to the environment set in `GO_ENV` (defaults to `test`)\n\t\t// Set this environment variable in your `.env` file to `development`\n\t\t// NOTE: it may be better to put seed fixtures in a different directory\n\t\t//       to seperate concerns\n\t\tmodel, err := suite.NewModelWithFixtures(os.DirFS(\"./fixtures\"))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsc, err := fix.Find(\"seed widgets\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, table := range sc.Tables {\n\t\t\tfor _, row := range table.Row {\n\t\t\t\tq := \"insert into \" + table.Name\n\t\t\t\tkeys := []string{}\n\t\t\t\tskeys := []string{}\n\t\t\t\tfor k := range row {\n\t\t\t\t\tkeys = append(keys, k)\n\t\t\t\t\tskeys = append(skeys, \":\"+k)\n\t\t\t\t}\n\t\t\t\tq = q + fmt.Sprintf(\" (%s) values (%s)\", strings.Join(keys, \",\"), strings.Join(skeys, \",\"))\n\t\t\t\tif _, err = model.DB.Store.NamedExec(q, row); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/74059769/error-no-kind-is-registered-for-the-type-v1-servicemonitor-in-scheme-pkg-r",
    "body": "// main.go\npackage main\nimport (\n\t\"os\"\n\tctrl \"sigs.k8s.io/controller-runtime\"\n\tmonitoring \"github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n)\nvar (\n\tscheme = runtime.NewScheme()\n)\nfunc init() {\n\tmonitoring.AddToScheme(scheme)\n}\nfunc main() {\n\tmgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{\n\t\tScheme: scheme,\n\t\t// ... other options here\n    })\n\t// Start Manager\n\tif err := mgr.Start(ctrl.SetupSignalHandler()); err != nil {\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72125656/gorm-select-certain-column-with-preload",
    "body": "type QuestionHeader struct {\n  QuestionHeaderId int                `gorm:\"primaryKey;column:question_id\" json:\"question_id\"`\n  LevelId          int                `gorm:\"column:level_id\" json:\"level_id\"`\n  SubjectId        int                `gorm:\"column:subject_id\" json:\"subject_id\"`\n  QuestionBody     []QuestionBody     `gorm:\"many2many:question_header_question_bodies;\"`\n  QuestionSolution []QuestionSolution `gorm:\"many2many:question_header_question_solutions;\"`\n  OtherColumn1A    string\n  OtherColumn2A    string\n}\ntype QuestionBody struct {\n  QuestionBodyId  int   `gorm:\"primaryKey;column:question_id\" json:\"question_id\"`\n  Value         string  `gorm:\"column:value\" json:\"value\"`\n  Type          string  `gorm:\"column:type\" json:\"type\"`\n  Status        uint8   `gorm:\"column:status;default:0\" json:\"status\"`\n  OtherColumn1B string\n  OtherColumn2B string\n}\ntype QuestionSolution struct {\n  QuestionSolutionId int    `gorm:\"primaryKey;column:question_id\" json:\"question_id\"`\n  Value              string `gorm:\"column:value\" json:\"value\"`\n  Type               string `gorm:\"column:type\" json:\"type\"`\n  Status             uint8  `gorm:\"column:status;default:0\" json:\"status\"`\n  OtherColumn1C      string\n  OtherColumn2c      string\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71292004/golang-kubernetes-go-client-cast-deployment-to-deploymentlist",
    "body": "func listK8sDeployments(the_clientset *kubernetes.Clientset, mirrorDeploy *string) *v1.DeploymentList {\n    if *mirrorDeploy != \"\" {\n        tmp_deployments, err := the_clientset.AppsV1().Deployments(apiv1.NamespaceDefault).Get(context.TODO(), *mirrorDeploy, metav1.GetOptions{})\n        if err != nil {\n            panic(err.Error())\n        }\n        // create a new list with your deployment and return it\n        deployments_list := v1.DeploymentList{Items: []v1.Deployment{*tmp_deployments}}\n        return &deployments_list\n    }\n    deployments_list, err := the_clientset.AppsV1().Deployments(apiv1.NamespaceDefault).List(context.TODO(), metav1.ListOptions{})\n    if err != nil {\n        panic(err.Error())\n    }\n    return deployments_list\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70696189/get-golang-to-accept-a-token-for-get-authorization",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\turl := \"https://www.mywebsite.com\"\n\tclient := http.Client{Timeout: 5 * time.Second}\n\trequest, err := http.NewRequest(http.MethodGet, url, nil)\n\trequest.Header.Set(\"Authorization\", os.ExpandEnv(\"$BEARER_TOKEN\"))\n\trequest.Header.Set(\"Content-Type\", \"application/json\") // => your content-type\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresponseData, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfmt.Println(string(responseData))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68719530/check-named-return-error-using-defer-function",
    "body": "package main\nimport \"fmt\"\nfunc intByValue(i int) {\n\tfmt.Printf(\"i = %d\\n\", i)\n\t//                     ^--- `i` is an integer value\n\t//                      --- whatever i was passed to the function, gets printed\n}\nfunc intByRef(i *int) {\n\tvar v int = *i // i is a pointer to an int, which gets dereferenced here\n\t//                the *address* where the actual value resides was passed\n\t//                while the address stays the same, its value can change before\n\t//                i is dereferenced, and its value stored in v.\n\tfmt.Printf(\"i = %d\\n\", v)\n}\nfunc main() {\n\tvar i int\n\tdefer intByValue(i) // passed the *value* of i, which is 0 right now\n\tdefer intByRef(&i)  // passed a *pointer* to i, which contains 0 right now\n\ti = 100 // before intByRef could \"dereference\" its argument, the value that it\n\t// contained has been updated\n\t// intByRef gets called, dereferences the value, finds 100, prints it.\n\t// intByValue gets called, finds 0, prints it\n\t// result should be:\n\t//     i = 100\n\t//     i = 0\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68482028/distinguish-between-panic-with-recovery-and-no-error-occuring",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n)\nvar ErrPanicRecovered = errors.New(\"recovered from panic\")\n// named return parameters\nfunc recoverableFoo() (i int, err error) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = fmt.Errorf(\"%w: %v\", ErrPanicRecovered, r)\n\t\t}\n\t}()\n\t// panic(\"problem!\") // or any call that may panic; uncomment to test\n\treturn 1, nil\n}\nfunc main() {\n\tx, err := foo()\n\tif err != nil {\n\t\tif errors.Is(err, ErrPanicRecovered) {\n\t\t\tlog.Fatal(\"panicked: \", err)\n\t\t}\n\t\tlog.Printf(\"some other error: %s\", err.Error())\n\t\treturn\n\t}\n\tfmt.Println(\"after foo x = \" + fmt.Sprint(x))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68025858/golang-build-all-downloaded-packages",
    "body": "github.com/fatih/color v1.7.0 h1:DkWD4oS2D8LGGgTQ6IvwJJXSL5Vp2ffcQg58nFV38Ys=\ngithub.com/fatih/color v1.7.0/go.mod h1:Zm6kSWBoL9eyXnKyktHP6abPY2pDugNf5KwzbycvMj4=\ngithub.com/mailru/easyjson v0.7.0 h1:aizVhC/NAAcKWb+5QsU1iNOZb4Yws5UO2I+aIprQITM=\ngithub.com/mailru/easyjson v0.7.0/go.mod h1:KAzv3t3aY1NaHWoQz1+4F1ccyAH66Jk7yos7ldAVICs=\ngithub.com/mattn/go-colorable v0.1.4 h1:snbPLB8fVfU9iwbbo30TPtbLRzwWu6aJS6Xh4eaaviA=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.11 h1:FxPOTFNqGkuDUGi3H/qkUbQO4ZiBa2brKq5r0l8TGeM=\ngithub.com/mattn/go-isatty v0.0.11/go.mod h1:PhnuNfih5lzO57/f3n+odYbM4JtupLOxQOAqxQCu2WE=\ngithub.com/phachon/go-logger v0.0.0-20191215032019-86e4227f71ea h1:IkOONr/u7Wy+j2R4r1eMV8PEuN4kmOhZZNaYxDOF+KQ=\ngithub.com/phachon/go-logger v0.0.0-20191215032019-86e4227f71ea/go.mod h1:WBIWFH/iYYvuApCvPU+/R6hfX6v0Ogu4apwf0UgzVF0=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037 h1:YyJpGZS1sBuBCzLAR1VEpK193GlqGZbnPFnPV/5Rsb4=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs="
  },
  {
    "url": "https://stackoverflow.com/questions/68025858/golang-build-all-downloaded-packages",
    "body": "$ export DOCKER_BUILDKIT=1\n$ docker build --progress=plain -t abc:1 . --no-cache\n...\n#14 [stage-0 6/6] RUN --mount=type=cache,mode=0755,target=/root/.cache/go-bu...\n#14 3.100 go: downloading github.com/phachon/go-logger v0.0.0-20191215032019-86e4227f71ea\n#14 3.330 go: downloading github.com/fatih/color v1.7.0\n#14 3.331 go: downloading github.com/mailru/easyjson v0.7.0\n#14 3.523 go: downloading github.com/mattn/go-colorable v0.1.4\n#14 3.561 go: downloading github.com/mattn/go-isatty v0.0.11\n#14 3.731 go: downloading golang.org/x/sys v0.0.0-20191026070338-33540a1f6037\n#14 5.058 github.com/mailru/easyjson/buffer\n#14 5.063 golang.org/x/sys/unix\n#14 5.070 github.com/mailru/easyjson/jlexer\n#14 5.077 github.com/mailru/easyjson/jwriter\n#14 5.087 github.com/phachon/go-logger/utils\n#14 5.174 github.com/mailru/easyjson\n#14 5.346 github.com/mattn/go-isatty\n#14 5.355 github.com/mattn/go-colorable\n#14 5.368 github.com/fatih/color\n#14 5.396 github.com/phachon/go-logger\n#14 5.451 command-line-arguments\n#14 DONE 7.4s\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/67867424/how-to-connect-with-mysql-using-a-unix-socket",
    "body": "import (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\ntype ConnectionSpecs struct {\n\tusername   string\n\tpassword   string\n\tsocketPath string\n\tdatabase   string\n}\nfunc GetConnStr() string {\n\tconnConfig := ConnectionSpecs{\n\t\tusername:   \"root\",\n\t\tpassword:   \"my-password\",\n\t\tsocketPath: \"/usr/local/bin/path/to/socket\",\n\t\tdatabase:   \"test\",\n\t}\n\tconnStr := connConfig.username + \":\" + connConfig.password +\n\t\t\"@unix(\" + connConfig.socketPath + \")\" +\n\t\t\"/\" + connConfig.database +\n\t\t\"?charset=utf8\"\n\treturn connStr\n}\n// Creates a database connection and returns the same\nfunc Connection() (*sql.DB, error) {\n\tvar connStr = GetConnStr()\n\tfmt.Println(connStr)\n\tconn, err := sql.Open(\"mysql\", GetConnStr())\n\treturn conn, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65992961/how-to-kill-running-queries-on-connection-close",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"github.com/jinzhu/gorm\"\n\t_ \"github.com/jinzhu/gorm/dialects/postgres\"\n)\nfunc main() {\n\tdb, err := gorm.Open(\"postgres\", \"host=localhost port=5432 user=gorm dbname=gorm password=mypassword sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\tctx := context.Background()\n\tctx, cancel := context.WithCancel(ctx)\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, os.Interrupt)\n\tdefer func() {\n\t\tsignal.Stop(c)\n\t\tcancel()\n\t}()\n\tgo func() {\n\t\tselect {\n\t\tcase <-c:\n\t\t\tcancel()\n\t\tcase <-ctx.Done():\n\t\t}\n\t}()\n\ttransaction, err := db.DB().BeginTx(ctx, nil)\n\t_, err = transaction.Exec(\"SELECT pg_sleep(100)\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64357313/postgres-table-batch-updates-using-golang-pgxpool-not-reflected-in-database",
    "body": "import (\n    ...\n    \"github.com/jackc/pgconn\"\n    \"github.com/jackc/pgx/v4\"\n    \"github.com/jackc/pgx/v4/pgxpool\"\n    log \"github.com/sirupsen/logrus\"\n)\nfunc SetNewSubscriptionValuesBatch(dsn string, records map[string]string) error {\n    ctx := context.Background()\n    var db *pgxpool.Pool\n    db, err := pgxpool.Connect(ctx, dsn)\n    defer db.Close()\n    if err != nil {\n        panic(err)\n    }\n\n    tx, err := db.Begin(ctx)\n    if err != nil {\n        panic(err)\n    }\n    b := &pgx.Batch{}\n    for id, subID := range records {\n    sqlStatement := `\nUPDATE event\nSET subscription_id_2 = $2\nWHERE id = $1;`\n        b.Queue(sqlStatement, id, subID)\n    }\n\n    batchResults := tx.SendBatch(ctx, b)\n\n    var qerr error\n\tvar rows pgx.Rows\n\tfor qerr == nil {\n\t\trows, qerr = batchResults.Query()\n\t\trows.Close()\n    }\n\n    return tx.Commit(ctx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63942162/how-do-i-specify-an-execution-delay-with-the-google-cloud-tasks-go-client-librar",
    "body": "var d time.Duration = 20 * time.Minute\n\n\t\tts := &timestamppb.Timestamp{\n\t\t\tSeconds: time.Now().Add(d).Unix(),\n\t\t},\n        req := &taskspb.CreateTaskRequest{\n                Parent: queuePath,\n                Task: &taskspb.Task{\n                        MessageType: &taskspb.Task_HttpRequest{\n                                HttpRequest: &taskspb.HttpRequest{\n                                        HttpMethod: taskspb.HttpMethod_POST,\n                                        Url:        url,\n                                },\n                        },\n                        ScheduleTime: ts,\n                },\n        }"
  },
  {
    "url": "https://stackoverflow.com/questions/62339757/golang-json-unmarshal-to-struct-byte",
    "body": "package main\nimport (\n        \"encoding/base64\"\n        \"encoding/json\"\n        \"fmt\"\n)\ntype TTT struct {\n        Info    []byte\n        Version int32\n}\nfunc main() {\n        b64Content := base64.StdEncoding.EncodeToString([]byte(\"0x97e302078c11ca8e7d75e2eedd1091eafec353864212085406d8d7dca0e3fa4a\"))\n        info := fmt.Sprintf(`{\"info\":\"%s\",\"version\":20}`, b64Content)\n        test := TTT{}\n        err := json.Unmarshal([]byte(info), &test)\n        if err != nil {\n                fmt.Println(\"Error in JSON unmarshalling from json marshalled object:\", err)\n                return\n        }\n        fmt.Printf(\"%s\", test.Info)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60613319/how-to-use-gorilla-mux-for-url-matching",
    "body": "// STEP 1: create a router\nrouter := mux.NewRouter()\n\n// STEP 2: register routes that are allowed\nrouter.NewRoute().Path(\"/users/{id}\").Methods(\"GET\")\nrouter.NewRoute().Path(\"/users\").Methods(\"GET\")\nrouter.NewRoute().Path(\"/teams\").Methods(\"GET\")\n\nrouteMatch := mux.RouteMatch{}\n\n// STEP 3: create a http.Request to use in Mux Route Matcher\nurl := url.URL { Path: \"/users/1\" }\nrequest := http.Request{ Method:\"GET\", URL: &url }\n\n// STEP 4: Mux's Router returns true/false\nx := router.Match(&request, &routeMatch)\nfmt.Println(x) // true\nurl = url.URL { Path: \"/other-endpoint\" }\nrequest = http.Request{ Method:\"GET\", URL: &url }\nx = router.Match(&request, &routeMatch)\nfmt.Println(x) // false"
  },
  {
    "url": "https://stackoverflow.com/questions/60560906/how-make-expanded-and-stretched-layout-box-with-fyne",
    "body": "package main\nimport (\n\t\"fyne.io/fyne\"\n\t\"fyne.io/fyne/app\"\n\t\"fyne.io/fyne/layout\"\n\t\"fyne.io/fyne/widget\"\n)\nfunc main() {\n\tf := app.New()\n\tw := f.NewWindow(\"\")\n\tlabel1 := widget.NewLabel(\"Label1\")\n\tb1 := widget.NewButton(\"Button1\", func() {})\n\tb2 := widget.NewButton(\"Button2\", func() {})\n\tlabel2 := widget.NewLabel(\"Label3\")\n\tw.SetContent(\n\t\tfyne.NewContainerWithLayout(\n\t\t\tlayout.NewVBoxLayout(),\n\t\t\tfyne.NewContainerWithLayout(layout.NewHBoxLayout(), layout.NewSpacer(), label1, layout.NewSpacer()),\n\t\t\tlayout.NewSpacer(),\n\t\t\tfyne.NewContainerWithLayout(layout.NewHBoxLayout(), layout.NewSpacer(), b1, b2, layout.NewSpacer()),\n\t\t\tlayout.NewSpacer(),\n\t\t\tfyne.NewContainerWithLayout(layout.NewHBoxLayout(), layout.NewSpacer(), label2, layout.NewSpacer()),\n\t\t),\n\t)\n\tw.Resize(fyne.Size{Height: 320, Width: 480})\n\tw.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60560906/how-make-expanded-and-stretched-layout-box-with-fyne",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"fyne.io/fyne\"\n\t\"fyne.io/fyne/app\"\n\t\"fyne.io/fyne/layout\"\n\t\"fyne.io/fyne/widget\"\n)\nfunc main() {\n\tf := app.New()\n\tw := f.NewWindow(\"\")\n\tlabel1 := widget.NewLabel(\"Label1\")\n\tb1 := widget.NewButton(\"Button1\", func() { fmt.Println(\"button1\") })\n\tb1.ExtendBaseWidget(b1)\n\tb2 := widget.NewButton(\"Button2\", func() { fmt.Println(\"button2\") })\n\tb2.ExtendBaseWidget(b2)\n\tlabel2 := widget.NewLabel(\"Label3\")\n\tlabox1 := fyne.NewContainerWithLayout(layout.NewGridLayoutWithRows(3),\n\t\tfyne.NewContainerWithLayout(\n\t\t\tlayout.NewCenterLayout(),\n\t\t\tlabel1,\n\t\t))\n\tlabox2 := fyne.NewContainerWithLayout(layout.NewCenterLayout(), label2)\n\tw.SetContent(\n\t\tfyne.NewContainerWithLayout(\n\t\t\tlayout.NewBorderLayout(\n\t\t\t\tlabox1,\n\t\t\t\tlabox2,\n\t\t\t\tnil,\n\t\t\t\tnil,\n\t\t\t),\n\t\t\tlabox1,\n\t\t\tlabox2,\n\t\t\tfyne.NewContainerWithLayout(\n\t\t\t\tlayout.NewAdaptiveGridLayout(2),\n\t\t\t\tb1,\n\t\t\t\tb2,\n\t\t\t),\n\t\t),\n\t)\n\tw.Resize(fyne.Size{Height: 320, Width: 480})\n\tw.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60540511/how-to-display-protoc-gen-go-gzipped-filedescriptorproto-as-plaintext",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"compress/gzip\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\tproto \"github.com/golang/protobuf/proto\"\n\tdpb \"github.com/golang/protobuf/protoc-gen-go/descriptor\"\n\t_ [here write path to your generated go source]\n    // include the line above if you want to use proto.FileDescriptor,\n    // leave if you just copy-paste the bytes below\n)\nfunc main() {\n    // here write the path that is used in the generated file\n    // in init(), as an argument to proto.RegisterFile\n    // (or just copypaste the bytes instead of using proto.FileDescriptor)\n\tbytes := proto.FileDescriptor(XXX)\n\tfd, err := decodeFileDesc(bytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tb, err := json.MarshalIndent(fd,\"\",\"  \")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(b))\n}\n// decompress does gzip decompression.\nfunc decompress(b []byte) ([]byte, error) {\n\tr, err := gzip.NewReader(bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"bad gzipped descriptor: %v\", err)\n\t}\n\tout, err := ioutil.ReadAll(r)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"bad gzipped descriptor: %v\", err)\n\t}\n\treturn out, nil\n}\nfunc decodeFileDesc(enc []byte) (*dpb.FileDescriptorProto, error) {\n\traw, err := decompress(enc)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decompress enc: %v\", err)\n\t}\n\tfd := new(dpb.FileDescriptorProto)\n\tif err := proto.Unmarshal(raw, fd); err != nil {\n\t\treturn nil, fmt.Errorf(\"bad descriptor: %v\", err)\n\t}\n\treturn fd, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59783521/how-to-parse-information-element-in-802-11-probe-request-frame-with-gopacket",
    "body": "func (pr *capturedRequest) decodeProbeRequestLayer(probeLayer *layers.Dot11MgmtProbeReq) {\n\tvar body []byte\n\tbody = probeLayer.LayerContents()\n\tfor i := uint64(0); i < uint64(len(body)); {\n\t\tid := layers.Dot11InformationElementID(body[i])\n\t\ti++\n\t\tswitch id {\n\t\tcase layers.Dot11InformationElementIDSSID:\n\t\t\telemLen := uint64(body[i])\n\t\t\ti++\n\t\t\tif elemLen > 0 {\n\t\t\t\tpr.SSID = string(body[i : i+elemLen])\n\t\t\t\ti += elemLen\n\t\t\t}\n\t\t\tbreak\n\t\tcase layers.Dot11InformationElementIDVendor:\n\t\t\tpr.VendorSpecific = body[i+1:]\n\t\t\treturn\n\t\tdefault:\n\t\t\telemLen := uint64(body[i])\n\t\t\ti += 1 + elemLen\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57051860/rbac-rules-with-kubebuilder",
    "body": "u.Object = map[string]interface{}{\n        \"metadata\": map[string]interface{}{\n            \"name\":      \"name\",\n            \"namespace\": \"namespace\"},\n        \"spec\": map[string]interface{}{\n            \"replicas\": 2,\n            \"selector\": map[string]interface{}{\n                \"matchLabels\": map[string]interface{}{\n                    \"foo\": \"bar\",\n                },\n            },\n            \"template\": map[string]interface{}{\n                \"labels\": map[string]interface{}{\n                    \"foo\": \"bar\",\n                },\n                \"spec\": map[string]interface{}{\n                    \"containers\": []map[string]interface{}{\n                        {\n                            \"name\":  \"nginx\",\n                            \"image\": \"nginx\",\n                        },\n                    },\n                },\n            },\n        },\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/56963226/how-many-bytes-are-in-a-golang-time-object",
    "body": "type Time struct {\n\t// wall and ext encode the wall time seconds, wall time nanoseconds,\n\t// and optional monotonic clock reading in nanoseconds.\n\t//\n\t// From high to low bit position, wall encodes a 1-bit flag (hasMonotonic),\n\t// a 33-bit seconds field, and a 30-bit wall time nanoseconds field.\n\t// The nanoseconds field is in the range [0, 999999999].\n\t// If the hasMonotonic bit is 0, then the 33-bit field must be zero\n\t// and the full signed 64-bit wall seconds since Jan 1 year 1 is stored in ext.\n\t// If the hasMonotonic bit is 1, then the 33-bit field holds a 33-bit\n\t// unsigned wall seconds since Jan 1 year 1885, and ext holds a\n\t// signed 64-bit monotonic clock reading, nanoseconds since process start.\n\twall uint64\n\text  int64\n\t// loc specifies the Location that should be used to\n\t// determine the minute, hour, month, day, and year\n\t// that correspond to this Time.\n\t// The nil location means UTC.\n\t// All UTC times are represented with loc==nil, never loc==&utcLoc.\n\tloc *Location\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55972588/access-imagedata-data-using-go-webassembly",
    "body": "const go = new window.Go();\n// use the same WASM memory for all Wasm instances\nconst memory = new WebAssembly.Memory({initial: 1024});\nPromise.all([\n    // The main Wasm module with my photo filter\n    WebAssembly.instantiateStreaming(fetch('some-go-wasm-module.wasm'), {\n        env: {memory},\n        ...go.importObject\n    }),\n    // the memory library written in C provides: abort, calloc, free, malloc, memcoy, memset, sbrk\n    // source: https://github.com/guybedford/wasm-stdlib-hack/blob/master/dist/memory.wasm\n    WebAssembly.instantiateStreaming(fetch(\"memory.wasm\"), {\n        env: {memory}\n    })\n])\n    .then(module => {\n        go.run(module[0].instance);\n        window.wasm.memHelper = {\n            memory,\n            ...module[1].instance.exports\n        };\n    });"
  },
  {
    "url": "https://stackoverflow.com/questions/55972588/access-imagedata-data-using-go-webassembly",
    "body": "const context = canvas.getContext(\"2d\");\nconst size = canvas.width * canvas.height * 4;\n// allocate memory for the image bitmap\nconst ptr = window.wasm.memHelper.malloc(size);\nconst imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n// create a new ImageData object from this memory\nconst dataGo = new Uint8ClampedArray(window.wasm.memHelper.memory.buffer, ptr, size);\nconst imageDataGo = new ImageData(dataGo, canvas.width, canvas.height);\n// copy the image from JS context to the Wasm context\nimageDataGo.data.set(imageData.data);\n// run my Go filter\nwindow.wasm.go.convolve_mem(ptr, canvas.width, canvas.height);\n// copy the image bitmap from Wasm context back to the canvas\ncontext.putImageData(imageDataGo, 0, 0);\n// free memory\nwindow.wasm.memHelper.free(ptr);"
  },
  {
    "url": "https://stackoverflow.com/questions/55972588/access-imagedata-data-using-go-webassembly",
    "body": "// somewhere in main():\n// The function wich is called from JS\nexports[\"convolve_mem\"] = js.FuncOf(func(this js.Value, args []js.Value) interface{} {\n\tptr := uintptr(args[0].Int())\n\twidth := args[1].Int()\n\theight := args[2].Int()\n\tsize := width * height * 4\n    // Create an byte array as big as possible and create a slice with the correct size. Because we can not define a array size with non-constant variable.\n\tdata := (*[1 << 30]byte)(unsafe.Pointer(ptr))[:size:size]\n\tmatrix := []float64{\n\t\t0.0, 0.2, 0.0,\n\t\t0.2, 0.2, 0.2,\n\t\t0.0, 0.2, 0.0,\n\t}\n\tbenchmarks.ConvolveMem(data, width, height, matrix, 1)\n\treturn nil\n})\n// the filter function:\nfunc ConvolveMem(data []byte, width int, height int, matrix []float64, factor float64) {\n\tside := int(math.Sqrt(float64(len(matrix))))\n\thalfSide := int(side / 2)\n\tnewData := make([]byte, width*height*4)\n\tfor y := 0; y < height; y++ {\n\t\tfor x := 0; x < width; x++ {\n\t\t\toutputIndex := (y*width + x) * 4\n\t\t\tr := 0.0\n\t\t\tg := 0.0\n\t\t\tb := 0.0\n\t\t\tfor cy := 0; cy < side; cy++ {\n\t\t\t\tfor cx := 0; cx < side; cx++ {\n\t\t\t\t\tscy := y + cy - halfSide\n\t\t\t\t\tscx := x + cx - halfSide\n\t\t\t\t\tif scy >= 0 && scy < height && scx >= 0 && scx < width {\n\t\t\t\t\t\tsourceIndex := (scy*width + scx) * 4\n\t\t\t\t\t\tmodify := matrix[cy*side+cx]\n\t\t\t\t\t\tr += float64(data[sourceIndex]) * modify\n\t\t\t\t\t\tg += float64(data[sourceIndex+1]) * modify\n\t\t\t\t\t\tb += float64(data[sourceIndex+2]) * modify\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewData[outputIndex] = byte(r * factor)\n\t\t\tnewData[outputIndex+1] = byte(g * factor)\n\t\t\tnewData[outputIndex+2] = byte(b * factor)\n\t\t\tnewData[outputIndex+3] = data[outputIndex+3]\n\t\t}\n\t}\n\tcopy(data, newData)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55382177/type-interface-does-not-support-indexing",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc main() {\n\turl := \"https://api.binance.com/api/v1/depth?symbol=RENBTC\"\n\ta, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tbuf, err := ioutil.ReadAll(a.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar data map[string]interface{}\n\terr = json.Unmarshal([]byte(buf), &data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tbid, ok := data[\"bids\"].([]interface{})\n\tif !ok {\n\t\tlog.Fatal(\"not ok\")\n\t}\n\ts, ok := bid[0].([]interface{})\n\tif !ok {\n\t\tlog.Fatal(\"not ok\")\n\t}\n\tfmt.Println(s)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54639988/sql-scan-error-on-column-index-19-name-l2name-unsupported-scan-storing-dri",
    "body": "sqlstatement := \"SELECT\" +\n    \" assets.ID, assets.Name, assets.LastCheckIn, assets.Status, assets.OffTimer,\" +\n    \" assets.SafetyTimer, assets.HazardTimer, assets.HazardTimerStartedTime, assets.LastSignedOn,\" +\n    \" assets.Latitude, assets.Longitude, assets.TemplateID, assets.ActiveDeviceType, assets.CurrentDeviceID,\" +\n    \" assets.OffTimerTemp, assets.OrganisationID,\" +\n    \" organisations.Name As OrganisationName,\" +\n    \" devices.Label As CurrentDeviceName,\" +\n    \" templates.Name As TemplateName, COALESCE(templates.L2Name, ''), COALESCE(templates.L2Contact, ''),\" +\n    \" COALESCE(templates.L3Name, ''), COALESCE(templates.L3Contact, ''),\" +\n    \" COALESCE(templates.L4Name, ''), COALESCE(templates.L4Contact, ''), templates.Note\" +\n    \" FROM assets\" +\n    \" LEFT JOIN organisations ON assets.OrganisationID = organisations.ID\" +\n    \" LEFT JOIN devices ON assets.CurrentDeviceID = devices.ID\" +\n    \" JOIN templates ON assets.TemplateID = templates.ID\" +\n    \" WHERE assets.Status != 'Not monitoring' AND assets.AssetStatus = 'Active' AND assets.Display != '0'\""
  },
  {
    "url": "https://stackoverflow.com/questions/79341391/deadlock-while-implementing-a-pipeline-concurrency-pattern",
    "body": "func ExecutePipeline2(jobs ...intJob) {\n    outs := make([]chan int, len(jobs)+1)\n    for i := 0; i < len(outs); i++ {\n        outs[i] = make(chan int)\n    }\n    var wg sync.WaitGroup\n    for i, job := range jobs {\n        wg.Add(1)\n        go func(i int, job intJob) {\n            defer wg.Done()\n            // Close the output channel when done\n            defer close(outs[i+1])\n            job(outs[i], outs[i+1])\n        }(i, job)\n    }\n    // Close the first channel after all input is written\n    close(outs[0])\n    wg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79050279/how-do-you-implement-aes-encryption-in-flutter",
    "body": "import 'dart:convert';\nimport 'dart:typed_data';\nimport 'package:convert/convert.dart';\nimport 'package:pointycastle/export.dart';\nString encrypt(String plaintext){\n  var key = utf8.encode(\"01234567890123456789012345678901\"); // for the test only\n  var iv = utf8.encode(\"abcdefghijklmnop\");                  // for the test only\n  var pt = utf8.encode(plaintext);\n  var keyParam = KeyParameter(key);\n  var params = ParametersWithIV(keyParam, iv);\n  // Zero pad plaintext\n  var aesBlockSize = 16;\n  var padLength = (aesBlockSize - (pt.length % aesBlockSize)) % aesBlockSize;\n  var ptPadded = Uint8List(pt.length + padLength)..setAll(0, pt);\n  // Encrypt\n  var cipher = BlockCipher(\"AES/CFB-128\");\n  cipher.init(true, params);\n  var ctPadded = Uint8List(ptPadded.length);\n  for (int offset = 0; offset < ptPadded.length;) {\n    int len = cipher.processBlock(ptPadded, offset, ctPadded, offset);\n    offset += len;\n  }\n  // Remove padding\n  var ct = ctPadded.sublist(0, pt.length);\n  return hex.encode(ct);\n}\nString decrypt(String ciphertext) {\n  var key = utf8.encode(\"01234567890123456789012345678901\"); // for the test only\n  var iv = utf8.encode(\"abcdefghijklmnop\");                  // for the test only\n  var ct = hex.decode(ciphertext);\n  var keyParam = KeyParameter(key);\n  var params = ParametersWithIV(keyParam, iv);\n  // Zero pad ciphertext\n  var aesBlockSize = 16;\n  var padLength = (aesBlockSize - (ct.length % aesBlockSize)) % aesBlockSize;\n  var ctPadded = Uint8List(ct.length + padLength)..setAll(0, ct);\n  // Decrypt\n  var cipher = BlockCipher(\"AES/CFB-128\");\n  cipher.init(false, params);\n  var ptPadded = Uint8List(ctPadded.length);\n  for (int offset = 0; offset < ctPadded.length;) {\n    int len = cipher.processBlock(ctPadded, offset, ptPadded, offset);\n    offset += len;\n  }\n  // Remove padding\n  var pt = ptPadded.sublist(0, ct.length);\n  return utf8.decode(pt);\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78572459/use-go-lang-handler-function-to-process-events-from-2-trigger-sources",
    "body": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\nfunc Handler(ctx context.Context, event *DynamoDBOrSQSEvent) error {\n\tswitch {\n\tcase event.IsDynamoDBEvent():\n\t\treturn DynamoDBHandler(ctx, &event.DynamoDBEvent)\n\tcase event.IsSQSEvent():\n\t\treturn SQSHandler(ctx, &event.SQSEvent)\n\tdefault:\n\t\treturn ErrUnexpectedEvent\n\t}\n}\nfunc DynamoDBHandler(ctx context.Context, event *events.DynamoDBEvent) error {\n\tfmt.Printf(\"DynamoDBEvent records: %+v\\n\", event.Records)\n\treturn nil\n}\nfunc SQSHandler(ctx context.Context, event *events.SQSEvent) error {\n\tfmt.Printf(\"SQSEvent records: %+v\\n\", event.Records)\n\treturn nil\n}\nvar ErrUnexpectedEvent = errors.New(\"unexpected event\")"
  },
  {
    "url": "https://stackoverflow.com/questions/78572459/use-go-lang-handler-function-to-process-events-from-2-trigger-sources",
    "body": "type DynamoDBOrSQSEvent struct {\n\tDynamoDBEvent events.DynamoDBEvent\n\tSQSEvent      events.SQSEvent\n}\nfunc (e *DynamoDBOrSQSEvent) UnmarshalJSON(data []byte) error {\n\tif err := json.Unmarshal(data, &e.DynamoDBEvent); err != nil {\n\t\treturn fmt.Errorf(\"can't unmarshal DynamoDB event: %w\", err)\n\t}\n\tif err := json.Unmarshal(data, &e.SQSEvent); err != nil {\n\t\treturn fmt.Errorf(\"can't unmarshal SQS event: %w\", err)\n\t}\n\treturn nil\n}\nfunc (e *DynamoDBOrSQSEvent) IsDynamoDBEvent() bool {\n\trecords := e.DynamoDBEvent.Records\n\treturn len(records) > 0 && records[0].EventID != \"\"\n}\nfunc (e *DynamoDBOrSQSEvent) IsSQSEvent() bool {\n\trecords := e.SQSEvent.Records\n\treturn len(records) > 0 && records[0].MessageId != \"\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78096223/docker-building-a-go-image-with-cgo-enabled-1-fails",
    "body": "FROM golang:1.22-bookworm\nENV CGO_ENABLED=1\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive \\\n    apt-get install --no-install-recommends --assume-yes \\\n      build-essential \\\n      libsqlite3-dev\nWORKDIR /src\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN go build -o ./server cmd/main.go\nFROM debian:bookworm\nRUN apt-get update \\\n && DEBIAN_FRONTEND=noninteractive \\\n    apt-get install --no-install-recommends --assume-yes \\\n      libsqlite3-0\nCOPY --from=0 /src/server /usr/bin/server\nCMD [\"server\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/77959256/possible-to-generate-random-float-over-closed-interval-0-0-1-0",
    "body": "func (r *Rand) Float64() float64 {\n\t// A clearer, simpler implementation would be:\n\t//\treturn float64(r.Int63n(1<<53)) / (1<<53)\n\t// However, Go 1 shipped with\n\t//\treturn float64(r.Int63()) / (1 << 63)\n\t// and we want to preserve that value stream.\n\t//\n\t// There is one bug in the value stream: r.Int63() may be so close\n\t// to 1<<63 that the division rounds up to 1.0, and we've guaranteed\n\t// that the result is always less than 1.0.\n\t//\n\t// We tried to fix this by mapping 1.0 back to 0.0, but since float64\n\t// values near 0 are much denser than near 1, mapping 1 to 0 caused\n\t// a theoretically significant overshoot in the probability of returning 0.\n\t// Instead of that, if we round up to 1, just try again.\n\t// Getting 1 only happens 1/2⁵³ of the time, so most clients\n\t// will not observe it anyway.\nagain:\n\tf := float64(r.Int63()) / (1 << 63)\n\tif f == 1 {\n\t\tgoto again // resample; this branch is taken O(never)\n\t}\n\treturn f\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77822302/golang-app-no-access-control-allow-origin-header-is-present-on-the-requested",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/rs/cors\"\n)\nfunc main() {\n\ts, err := NewServer()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts.Run(context.Background())\n}\ntype Server struct {\n\trouter *mux.Router\n}\nfunc NewServer() (*Server, error) {\n\trouter := mux.NewRouter()\n\tRegister(router)\n\tserver := Server{\n\t\trouter: router,\n\t}\n\treturn &server, nil\n}\nfunc (s *Server) Run(ctx context.Context) {\n\tcors := cors.New(cors.Options{\n\t\tAllowedMethods: []string{http.MethodGet, http.MethodPost},\n\t\tAllowedOrigins: []string{\"https://www.test-cors.org\"},\n\t\t// AllowedOrigins: []string{\"*\"},\n\t\tAllowedHeaders: []string{\"Content-Type\", \"Accept\"},\n\t})\n\tserver := http.Server{\n\t\tAddr:    fmt.Sprintf(\":%d\", 8080),\n\t\tHandler: cors.Handler(s.router),\n\t}\n\tfmt.Println(server.ListenAndServe())\n}\ntype handler struct{}\nfunc Register(r *mux.Router) {\n\thandler := handler{}\n\tr.HandleFunc(\"/\", handler.Index).Methods(http.MethodGet)\n\tr.HandleFunc(\"/weather/welcome\", handler.Test).Methods(http.MethodGet)\n}\n// Index - Provide a simple page with a link to the other page to simplify testing\nfunc (h *handler) Index(w http.ResponseWriter, _ *http.Request) {\n\tw.Write([]byte(`<a href=\"weather/welcome\" >Test Link</a>`))\n}\n// The real page\nfunc (h *handler) Test(w http.ResponseWriter, _ *http.Request) {\n\tfmt.Println(\"Test Called\")\n\tw.Write([]byte(\"all OK\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77557137/how-to-write-generic-crud-controller-for-all-entities-in-golang",
    "body": "func Get[T any]() fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tmodels := new([]T)\n        result := database.DB.Find(models)\n        if result.Error != nil {\n           return result.Error\n        }\n        c.SendStatus(http.StatusOK)\n        return c.JSON(models)\n    }\n}\nfunc Create[T any]() fiber.Handler {\n\treturn func(c *fiber.Ctx) error {\n\t\tmodel := new(T)\n        err := c.BodyParser(model)\n        if err != nil {\n            return err\n        }\n        result := database.DB.Create(model)\n        if result.Error != nil{\n            return result.Error\n        }\n        return c.SendStatus(http.StatusCreated)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76826169/example-to-validate-xml-against-xsd-in-go-language",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/terminalstatic/go-xsd-validate\"\n)\nfunc main() {\n    // Load the XSD file.\n    xsdHandler, err := xsdvalidate.NewXsdHandlerFromFile(\"my_schema.xsd\")\n    if err != nil {\n        panic(err)\n    }\n    // Load the XML document.\n    xmlData, err := ioutil.ReadFile(\"my_xml.xml\")\n    if err != nil {\n        panic(err)\n    }\n    // Validate the XML document against the XSD.\n    err = xsdHandler.Validate(xmlData)\n    if err != nil {\n        fmt.Println(err)\n    } else {\n        fmt.Println(\"XML document is valid\")\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76489587/using-pointers-interfaces-and-custom-types",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\ta := incrementInt(0)\n\tb := incrementor(&a)\n\tc := incrementFloat32(0.0)\n\td := incrementor(&c)\n\tincs := []incrementor{b, d}\n\tfor _, incx := range incs {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Println(incx.increment())\n\t\t}\n\t}\n}\ntype incrementor interface {\n\tincrement() any\n}\ntype incrementInt int\nfunc (inc *incrementInt) increment() any {\n\t*inc++\n\treturn int(*inc)\n}\ntype incrementFloat32 float32\nfunc (inc *incrementFloat32) increment() any {\n\t*inc += 0.1\n\treturn float32(*inc)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76444573/golang-validator-package-with-error-rename-field",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype SignInUserData struct {\n\tEmail    string `json:\"email\" validate:\"required\" name:\"Email Address\"`\n\tPassword string `json:\"password\" validate:\"required\" name:\"Secret\"`\n}\nfunc main() {\n\tvalidate := validator.New()\n\tvalidate.RegisterTagNameFunc(func(field reflect.StructField) string {\n\t\treturn field.Tag.Get(\"name\")\n\t})\n\tdata := &SignInUserData{}\n\terr := validate.Struct(data)\n\tif err != nil {\n\t\tvalidationErrors, ok := err.(validator.ValidationErrors)\n\t\tif ok {\n\t\t\tfor _, fieldError := range validationErrors {\n\t\t\t\tfmt.Println(fieldError.Field())\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76292323/golang-prometheus-is-there-a-way-to-measure-metrics-for-outbound-requests",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nvar (\n\trequestCounter = prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"client_request_count\",\n\t\t\tHelp: \"Total number of requests from client\",\n\t\t},\n\t\t[]string{\"client\", \"server\", \"method\", \"route\", \"status\"},\n\t)\n\tdurationHistorgram = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:    \"client_request_duration_secs\",\n\t\t\tHelp:    \"Duration of requests from Client\",\n\t\t\tBuckets: []float64{0.1, 0.5, 1, 2, 5},\n\t\t},\n\t\t[]string{\"client\", \"server\", \"method\", \"route\", \"status\"},\n\t)\n)\nfunc init() {\n\tprometheus.MustRegister(requestCounter)\n\tprometheus.MustRegister(durationHistorgram)\n}\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\t// the request start time\n\t\tstart := time.Now()\n\t\treq, err := http.NewRequest(\"GET\", \"http://localhost:8002\", nil)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, err.Error())\n\t\t}\n\t\tresp, err := http.DefaultClient.Do(req)\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, err.Error())\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tlabels := prometheus.Labels{\n\t\t\t\"client\": \"Server A\", // defines the client server\n\t\t\t\"server\": \"Server B\", // defines the outbound request server\n\t\t\t\"method\": \"GET\",// HTTP method\n\t\t\t\"route\":  \"/\", // Request route\n\t\t\t\"status\": resp.Status,// Response status\n\t\t}\n\t\tduration := time.Since(start).Seconds()\n\t\t// the duration\n\t\tdurationHistorgram.With(labels).Observe(duration)\n\t\t// request api count\n\t\trequestCounter.With(labels).Inc()\n\t\treturn c.String(http.StatusOK, \"[Client -> Server] Request send and received\")\n\t})\n\te.GET(\"/metrics\", echo.WrapHandler(promhttp.Handler()))\n\tif err := e.Start(\":8001\"); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74479105/client-go-how-to-watch-for-newly-created-pods-in-kubernetes",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/util/runtime\"\n\t\"k8s.io/client-go/informers\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/cache\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n\t\"k8s.io/klog/v2\"\n\t\"path/filepath\"\n\t\"time\"\n)\nfunc main() {\n\t// parse the .kubeconfig file\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\t// create config from the kubeconfig\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// create the clientset\n\tclientSet, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// stop signal for the informer\n\tstopper := make(chan struct{})\n\tdefer close(stopper)\n\n\t// create shared informers for resources in all known API group versions with a reSync period and namespace\n\tfactory := informers.NewSharedInformerFactoryWithOptions(clientSet, 10*time.Second, informers.WithNamespace(\"demo\"))\n\tpodInformer := factory.Core().V1().Pods().Informer()\n\tdefer runtime.HandleCrash()\n\t// start informer ->\n\tgo factory.Start(stopper)\n\t// start to sync and call list\n\tif !cache.WaitForCacheSync(stopper, podInformer.HasSynced) {\n\t\truntime.HandleError(fmt.Errorf(\"Timed out waiting for caches to sync\"))\n\t\treturn\n\t}\n\tpodInformer.AddEventHandler(cache.ResourceEventHandlerFuncs{\n\t\tAddFunc:    onAdd, // register add eventhandler\n\t\tUpdateFunc: onUpdate,\n\t\tDeleteFunc: onDelete,\n\t})\n\t// block the main go routine from exiting\n\t<-stopper\n}\nfunc onAdd(obj interface{}) {\n\tpod := obj.(*corev1.Pod)\n\tklog.Infof(\"POD CREATED: %s/%s\", pod.Namespace, pod.Name)\n}\nfunc onUpdate(oldObj interface{}, newObj interface{}) {\n\toldPod := oldObj.(*corev1.Pod)\n\tnewPod := newObj.(*corev1.Pod)\n\tklog.Infof(\n\t\t\"POD UPDATED. %s/%s %s\",\n\t\toldPod.Namespace, oldPod.Name, newPod.Status.Phase,\n\t)\n}\nfunc onDelete(obj interface{}) {\n\tpod := obj.(*corev1.Pod)\n\tklog.Infof(\"POD DELETED: %s/%s\", pod.Namespace, pod.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74168903/is-there-a-data-type-for-c-file-in-golang",
    "body": "package main\nimport (\n\t\"C\"\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n)\nvar (\n\tmin    = flag.Int(\"min\", 6, \"minimum length of UTF-8 strings printed, in runes\")\n\tmax    = flag.Int(\"max\", 256, \"maximum length of UTF-8 strings printed, in runes\")\n\tascii  = flag.Bool(\"ascii\", false, \"restrict strings to ASCII\")\n\toffset = flag.Bool(\"offset\", false, \"show file name and offset of start of each string\")\n)\nvar stdout *bufio.Writer\nfunc main() {\n}\n//export dodo\nfunc dodo(fd int) {\n\tfile := os.NewFile(uintptr(fd), \"file descriptor\")\n\tif file == nil {\n\t\treturn\n\t}\n\tdo(file)\n}\nfunc do(file *os.File) {\n\tin := bufio.NewReader(file)\n\tstr := make([]rune, 0, *max)\n\tfilePos := int64(0)\n\tprint := func() {\n\t\tif len(str) >= *min {\n\t\t\ts := string(str)\n\t\t\t// if *offset {\n\t\t\t// fmt.Printf(\"%s:#%d:\\t%s\\n\", name, filePos-int64(len(s)), s)\n\t\t\t// } else {\n\t\t\tfmt.Println(s)\n\t\t\t// }\n\t\t}\n\t\tstr = str[0:0]\n\t}\n\tfor {\n\t\tvar (\n\t\t\tr   rune\n\t\t\twid int\n\t\t\terr error\n\t\t)\n\t\t// One string per loop.\n\t\tfor ; ; filePos += int64(wid) {\n\t\t\tr, wid, err = in.ReadRune()\n\t\t\tif err != nil {\n\t\t\t\tif err != io.EOF {\n\t\t\t\t\tlog.Print(err)\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif !strconv.IsPrint(r) || *ascii && r >= 0xFF {\n\t\t\t\tprint()\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// It's printable. Keep it.\n\t\t\tif len(str) >= *max {\n\t\t\t\tprint()\n\t\t\t}\n\t\t\tstr = append(str, r)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72624318/how-to-implement-the-blockingcollection-takefromany-equivalent-for-channels",
    "body": "public static async Task<(T Item, int Index)> TakeFromAnyAsync<T>(\n    ChannelReader<T>[] channelReaders,\n    CancellationToken cancellationToken = default)\n{\n    if (channelReaders == null)\n    {\n        throw new ArgumentNullException(nameof(channelReaders));\n    }\n    if (channelReaders.Length == 0)\n    {\n        throw new ArgumentException(\"The list cannot be empty.\", nameof(channelReaders));\n    }\n    if (channelReaders.Length == 1)\n    {\n        return (await channelReaders[0].ReadAsync(cancellationToken), 0);\n    }\n    // First attempt to read an item synchronosuly\n    for (int i = 0; i < channelReaders.Length; ++i)\n    {\n        if (channelReaders[i].TryRead(out var item))\n        {\n            return (item, i);\n        }\n    }\n    using (var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken))\n    {\n        var waitToReadTasks = channelReaders\n                .Select(it => it.WaitToReadAsync(cts.Token).AsTask())\n                .ToArray();\n        var pendingTasks = new List<Task<bool>>(waitToReadTasks);\n        while (pendingTasks.Count > 1)\n        {\n            var t = await Task.WhenAny(pendingTasks);\n            if (t.IsCompletedSuccessfully && t.Result)\n            {\n                int index = Array.IndexOf(waitToReadTasks, t);\n                var reader = channelReaders[index];\n                // Attempt to read an item synchronosly\n                if (reader.TryRead(out var item))\n                {\n                    if (pendingTasks.Count > 1)\n                    {\n                        // Cancel pending \"wait to read\" on the remaining readers\n                        // then wait for the completion\n                        try\n                        {\n                            cts.Cancel();\n                            await Task.WhenAll((IEnumerable<Task>)pendingTasks);\n                        }\n                        catch { }\n                    }\n                    return (item, index);\n                }\n                // Due to the race condition item is no longer available\n                if (!reader.Completion.IsCompleted)\n                {\n                    // .. but the channel appears to be still open, so we retry\n                    var waitToReadTask = reader.WaitToReadAsync(cts.Token).AsTask();\n                    waitToReadTasks[index] = waitToReadTask;\n                    pendingTasks.Add(waitToReadTask);\n                }\n            }\n            // Remove all completed tasks that could not yield\n            pendingTasks.RemoveAll(tt => tt == t ||\n                tt.IsCompletedSuccessfully && !tt.Result ||\n                tt.IsFaulted || tt.IsCanceled);\n        }\n        int lastIndex = 0;\n        if (pendingTasks.Count > 0)\n        {\n            lastIndex = Array.IndexOf(waitToReadTasks, pendingTasks[0]);\n            await pendingTasks[0];\n        }\n        var lastItem = await channelReaders[lastIndex].ReadAsync(cancellationToken);\n        return (lastItem, lastIndex);\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71087902/how-can-i-read-and-decode-avro-messages-from-kafka-along-with-their-associated-k",
    "body": "input:\n  kafka:\n    addresses:\n      - localhost:9092\n    consumer_group: benthos_consumer_group\n    topics:\n      - benthos_input\npipeline:\n  processors:\n    # Decode the message\n    - schema_registry_decode:\n        url: http://localhost:8081\n    # Populate output content field\n    - bloblang: |\n        root.content = this\n    # Decode kafka_key metadata payload and populate output metadata field\n    - branch:\n        request_map: |\n          root = meta(\"kafka_key\")\n        processors:\n          - schema_registry_decode:\n              url: http://localhost:8081\n        result_map: |\n          root.metadata = meta()\n          root.metadata.kafka_key = this\noutput:\n  stdout: {}"
  },
  {
    "url": "https://stackoverflow.com/questions/70900067/parse-validate-jwt-token-from-azuread-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKS URL.\n\tjwksURL := \"https://login.microsoftonline.com/common/discovery/v2.0/keys\"\n\t// Create a context that, when cancelled, ends the JWKS background refresh goroutine.\n\tctx, cancel := context.WithCancel(context.Background())\n\t// Create the keyfunc options. Use an error handler that logs. Refresh the JWKS when a JWT signed by an unknown KID\n\t// is found or at the specified interval. Rate limit these refreshes. Timeout the initial JWKS refresh request after\n\t// 10 seconds. This timeout is also used to create the initial context.Context for keyfunc.Get.\n\toptions := keyfunc.Options{\n\t\tCtx: ctx,\n\t\tRefreshErrorHandler: func(err error) {\n\t\t\tlog.Printf(\"There was an error with the jwt.Keyfunc\\nError: %s\", err.Error())\n\t\t},\n\t\tRefreshInterval:   time.Hour,\n\t\tRefreshRateLimit:  time.Minute * 5,\n\t\tRefreshTimeout:    time.Second * 10,\n\t\tRefreshUnknownKID: true,\n\t}\n\t// Create the JWKS from the resource at the given URL.\n\tjwks, err := keyfunc.Get(jwksURL, options)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from resource at the given URL.\\nError: %s\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\t//\n\t// This wasn't signed by Azure AD.\n\tjwtB64 := \"eyJraWQiOiJlZThkNjI2ZCIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJXZWlkb25nIiwiYXVkIjoiVGFzaHVhbiIsImlzcyI6Imp3a3Mtc2VydmljZS5hcHBzcG90LmNvbSIsImlhdCI6MTYzMTM2OTk1NSwianRpIjoiNDY2M2E5MTAtZWU2MC00NzcwLTgxNjktY2I3NDdiMDljZjU0In0.LwD65d5h6U_2Xco81EClMa_1WIW4xXZl8o4b7WzY_7OgPD2tNlByxvGDzP7bKYA9Gj--1mi4Q4li4CAnKJkaHRYB17baC0H5P9lKMPuA6AnChTzLafY6yf-YadA7DmakCtIl7FNcFQQL2DXmh6gS9J6TluFoCIXj83MqETbDWpL28o3XAD_05UP8VLQzH2XzyqWKi97mOuvz-GsDp9mhBYQUgN3csNXt2v2l-bUPWe19SftNej0cxddyGu06tXUtaS6K0oe0TTbaqc3hmfEiu5G0J8U6ztTUMwXkBvaknE640NPgMQJqBaey0E4u0txYgyvMvvxfwtcOrDRYqYPBnA\"\n\t// Parse the JWT.\n\tvar token *jwt.Token\n\tif token, err = jwt.Parse(jwtB64, jwks.Keyfunc); err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError: %s\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n\t// End the background refresh goroutine when it's no longer needed.\n\tcancel()\n\t// This will be ineffectual because the line above this canceled the parent context.Context.\n\t// This method call is idempotent similar to context.CancelFunc.\n\tjwks.EndBackground()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70662364/install-bazel-for-golang-build-applications-in-vscode",
    "body": "{\n  \"go.goroot\": \"${workspaceFolder}/bazel-${workspaceFolderBasename}/external/go_sdk\",\n  \"go.toolsEnvVars\": {\n    \"GOPACKAGESDRIVER\": \"${workspaceFolder}/tools/gopackagesdriver.sh\"\n  },\n  \"go.enableCodeLens\": {\n    \"references\": false,\n    \"runtest\": false\n  },\n  \"gopls\": {\n    \"build.directoryFilters\": [\n      \"-bazel-bin\",\n      \"-bazel-out\",\n      \"-bazel-testlogs\",\n      \"-bazel-mypkg\",\n    ],\n    \"formatting.gofumpt\": true,\n    \"formatting.local\": \"github.com/my/mypkg\",\n    \"ui.completion.usePlaceholders\": true,\n    \"ui.semanticTokens\": true,\n    \"ui.codelenses\": {\n      \"gc_details\": false,\n      \"regenerate_cgo\": false,\n      \"generate\": false,\n      \"test\": false,\n      \"tidy\": false,\n      \"upgrade_dependency\": false,\n      \"vendor\": false\n    },\n  },\n  \"go.useLanguageServer\": true,\n  \"go.lintOnSave\": \"off\",\n  \"go.vetOnSave\": \"off\",\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70550975/go-how-to-combine-multiple-error-objects",
    "body": "package lib\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\ntype FoobarError struct {\n\tmsg      string\n\toriginal error\n}\nfunc (err *FoobarError) Error() string {\n\treturn fmt.Sprintf(\"%s: %s\", err.msg, err.original.Error())\n}\nfunc (err *FoobarError) Unwrap() error {\n\treturn err.original\n}\nfunc (err *FoobarError) Is(target error) bool {\n\t_, ok := target.(*FoobarError)\n\treturn ok\n}\nfunc SomeFunc() error {\n\t// strconv.ErrSyntax is used as a dummy error here for the error\n\t// that might be returned by strconv.Atoi or any other operation.\n\terr := strconv.ErrSyntax\n\treturn &FoobarError{\"foobar\", err}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70470194/how-to-compare-two-mongodb-primitive-type-decimal128-in-go",
    "body": "func CompareDecimal128(d1, d2 primitive.Decimal128) (int, error) {\n\tb1, exp1, err := d1.BigInt()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tb2, exp2, err := d2.BigInt()\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tsign := b1.Sign()\n\tif sign != b2.Sign() {\n\t\tif b1.Sign() > 0 {\n\t\t\treturn 1, nil\n\t\t} else {\n\t\t\treturn -1, nil\n\t\t}\n\t}\n\tif exp1 == exp2 {\n\t\treturn b1.Cmp(b2), nil\n\t}\n\tif sign < 0 {\n\t\tif exp1 < exp2 {\n\t\t\treturn 1, nil\n\t\t}\n\t\treturn -1, nil\n\t} else {\n\t\tif exp1 < exp2 {\n\t\t\treturn -1, nil\n\t\t}\n\t\treturn 1, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70066140/replace-logic-from-switch-with-generic-code",
    "body": "type helperData struct {\n    query       string\n    scanStruct  func() interface{}\n}\nvar helperMap = map[windowType]helperData{\n    progressbar: {\n        query:       \"SELECT * FROM progress_bars\",\n        scanStruct:  func() interface{} { return ProgressBar{} },\n    },\n    textbox: {\n        query:       \"SELECT * FROM textboxes\",\n        scanStruct:  func() interface{} { return TextBox{} },\n    },\n    calendar: {\n        query:       \"SELECT * FROM calendars\",\n        scanStruct:  func() interface{} { return Calendars{} },\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69692663/how-to-unit-test-a-net-conn-function-that-modifies-the-message-sent",
    "body": "func TestHandleMessage(t *testing.T) {\n\tserver, client := net.Pipe()\n\t// Set deadline so test can detect if HandleMessage does not return\n\tclient.SetDeadline(time.Now().Add(time.Second))\n\t// Configure a go routine to act as the server\n\tgo func() {\n\t\tHandleMessage(server)\n\t\tserver.Close()\n\t}()\n\t_, err := client.Write([]byte(\"test\\n\"))\n\tif err != nil {\n\t\tt.Fatalf(\"failed to write: %s\", err)\n\t}\n    // As the go routine closes the connection ReadAll is a simple way to get the response\n\tin, err := io.ReadAll(client)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to read: %s\", err)\n\t}\n\t// Using an Assert here will also work (if using a library that provides that functionality)\n\tif string(in) != \"test whatever\" {\n\t\tt.Fatalf(\"expected `test` got `%s`\", in)\n\t}\n\tclient.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69353996/how-can-i-add-a-10-second-timeout-with-tls-dial-there-is-no-tls-dialtimeout-t",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\tport := \"443\"\n\tconf := &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t}\n\ts := bufio.NewScanner(os.Stdin)\n\tfor s.Scan() {\n\t\thost := s.Text()\n\t\tctx, cancel := context.WithTimeout(context.Background(), 10 * time.Second)\n\t\td := tls.Dialer{\n\t\t\tConfig: conf,\n\t\t}\n\t\tconn, err := d.DialContext(ctx,\"tcp\", host+\":\"+port)\n\t\tcancel() // Ensure cancel is always called\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Host:\", host, \"Dial:\", err)\n\t\t\tcontinue\n\t\t}\n\t\t// warning: using defer in a loop may not have the expected result\n        // the connection will remain open until the function exists\n\t\tdefer conn.Close()\n\t\ttlsConn := conn.(*tls.Conn)\n\t\tcerts := tlsConn.ConnectionState().PeerCertificates\n\t\tfor _, cert := range certs {\n\t\t\tfmt.Println(\"Host:\", host, \"Issuer:\", cert.Issuer)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69251237/using-grpc-with-electron-14",
    "body": "productName: MyApp\nappId: com.electron.${name}\nremoteBuild: false\ncompression: normal\nnpmRebuild: true\nasar:\n  smartUnpack: true\ndirectories:\n  output: out\n  buildResources: build\nmac:\n  category: public.app-category.developer-tools\n  icon: ./icons/512x512.png\n  darkModeSupport: false\n  target:\n    - target: dmg\n    # - target: zip\n  fileAssociations:\n    - ext: svg\n      role: Viewer\n  # extraResources:\n  #   - from: \"bin/macos/myapp\"\n  #     to: \"bin/macos/myapp\"\n  #     filter:\n  #       - \"**/*\"\n  binaries: [\"bin/macos/myapp\"]\n  asarUnpack: [\"bin/macos/myapp\"]\n\n  hardenedRuntime: false\n  gatekeeperAssess: false\n  entitlements: \"build/macos/entitlements.mac.plist\"\n  entitlementsInherit: \"build/macos/entitlements.mac.plist\"\n  publish: null\n\ndmg:\n  sign: true"
  },
  {
    "url": "https://stackoverflow.com/questions/68794847/list-all-imported-types-given-an-import-path",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"go/ast\"\n\t\"go/token\"\n\t\"golang.org/x/tools/go/packages\"\n)\nfunc main() {\n\tloadConfig := new(packages.Config)\n\tloadConfig.Mode = packages.NeedSyntax\n\tloadConfig.Fset = token.NewFileSet()\n\tpkgs, err := packages.Load(loadConfig, \"encoding/json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, pkg := range pkgs {\n\t\tfor _, syn := range pkg.Syntax {\n\t\t\tfor _, dec := range syn.Decls {\n\t\t\t\tif gen, ok := dec.(*ast.GenDecl); ok && gen.Tok == token.TYPE {\n\t\t\t\t\tfor _, spec := range gen.Specs {\n\t\t\t\t\t\tif ts, ok := spec.(*ast.TypeSpec); ok {\n\t\t\t\t\t\t\tfmt.Println(ts.Name)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68124797/improving-performance-of-reading-with-bufio-newscanner",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"strings\"\n)\nfunc open(filename string) (*os.File, error) {\n\treturn os.Open(filename)\n}\nfunc main() {\n\tfd, err := open(\"test.sh\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer fd.Close()\n\toutputA, err := doFast(fd)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfd.Seek(0, 0)\n\toutputB, err := doSlow(fd)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(outputA)\n\tfmt.Println(outputB)\n}\nfunc doFast(fd *os.File) (string, error) {\n\tb, err := ioutil.ReadAll(fd)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tvar res strings.Builder\n\tres.Grow(len(b))\n\tbLines := bytes.Split(b, []byte(\"\\n\"))\n\tfor i := range bLines {\n\t\tswitch {\n\t\tcase len(bLines[i]) == 0 || bLines[i][0] == '#':\n\t\tcase bLines[i][len(bLines[i])-1] != ';':\n\t\t\tres.Write(bLines[i])\n\t\t\tres.WriteString(\"; \")\n\t\tdefault:\n\t\t\tres.Write(bLines[i])\n\t\t\tres.WriteByte(' ')\n\t\t}\n\t}\n\treturn res.String(), nil\n}\nfunc doSlow(fd *os.File) (string, error) {\n\tvar a strings.Builder\n\tscanner := bufio.NewScanner(fd)\n\tfor scanner.Scan() {\n\t\tlines := scanner.Text()\n\t\tswitch {\n\t\tcase lines == \"\" || lines[:1] == \"#\":\n\t\t\tcontinue\n\t\tcase lines[len(lines)-1:] != \";\":\n\t\t\ta.WriteString(lines + \"; \")\n\t\tdefault:\n\t\t\ta.WriteString(lines + \" \")\n\t\t}\n\t}\n\treturn a.String(), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67652118/how-to-get-same-cci-values-from-trading-view-in-golang",
    "body": "// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/\n// © bajaco\n//@version=4\nstudy(\"CCI Breakdown\", overlay=false, precision=16)\ncci_breakdown(src, p) =>\n    // The CCI (commodity channel index) is calculated as the\n    // 1. difference between the typical price of a commodity and its simple moving average,\n    // divided by the\n    // 2. mean absolute deviation of the typical price.\n    // 3. The index is scaled by an inverse factor of 0.015\n    // to provide more readable numbers\n    // 1. diff\n    ma = sma(src,p)\n    diff = src - ma\n\n    // 2. mad\n    s = 0.0\n    for i = 0 to p - 1\n        s := s + abs(src[i] - ma)\n    mad = s / p\n\n    // 3. Scaling\n    mcci = diff/mad / 0.015\n    mcci\n\nplot(cci(close, 100))\nplot(cci_breakdown(close,100))"
  },
  {
    "url": "https://stackoverflow.com/questions/67381447/tracing-golang-http-request",
    "body": "// You could place this in a separate helper package to improve encapsulation\ntype ctxKey struct{}\nfunc myRequestHandler(w http.ResponseWriter, r *http.Request) {\n    uniqueID := // generate a unique identifier\n    // create a context with the http.Request context as parent\n    ctx := context.WithValue(r.Context(), ctxKey{}, uniqueID)\n\n\tfoo(ctx, ...)\n    bar(ctx, ...)\n}\nfunc foo(ctx context.Context, ...) {\n    uniqueID := ctx.Value(ctxKey{})\n    // do something with the unique id\n    baz(ctx, ...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66875670/how-can-we-implement-bulk-upsert-in-sqlx-for-postgres",
    "body": "\tsliceOfStructs := []model.Gamer{\n\t\t{\n\t\tUserID:   \"123\",\n\t\tName: \"aarengee\",\n\t\tAddress: \"xd\",\n\t\tEligible: true,\n\t\t},\n\t\t{\n\t\t\tUserID:   \"1234\",\n\t\t\tName: \"aarengeeAgain\",\n\t\t\tAddress: \"xd\",\n\t\t\tEligible: false,\n\t\t},\n\t}\n\tupsertQuery := \"INSERT INTO gamer_details (user_id, name, address, eligible,updated_at) VALUES (:user_id,:name,:address,:eligible,now())\"\n\tonConflictStatement := \" ON CONFLICT (user_id, name) DO UPDATE SET address = excluded.address,eligible = excluded.eligible, updated_at = now() RETURNING *\"\n\tquery, queryArgs, _ := db.BindNamed(upsertQuery, sliceOfStructs)\n\tquery = db.Rebind(query)\n\tquery = query + onConflictStatement\n\trows, err := db.Queryx(query, queryArgs...)"
  },
  {
    "url": "https://stackoverflow.com/questions/66395631/unmarshalling-yaml-array-of-multiple-types",
    "body": "type tmpConfig struct {\n\t// Script []ScriptConfig `yaml:\"script\"`\n\tScript []yaml.Node `yaml:\"script\"`\n}\ntype tmpExecutable struct {\n\tExecutable string `yaml:\"executable\"`\n}\ntype ScriptConfig struct {\n\tExecutable string\n\tArgs       []string\n}\ntype Config struct {\n\tScript ScriptConfig `yaml:\"script\"`\n}\nfunc (c *Config) UnmarshalYAML(v *yaml.Node) error {\n\tvar tmp tmpConfig\n\tif err := v.Decode(&tmp); err != nil {\n\t\treturn err\n\t}\n\tl := len(tmp.Script)\n\tif l < 1 {\n\t\treturn nil\n\t}\n\tvar tmpexec tmpExecutable\n\tif err := tmp.Script[0].Decode(&tmpexec); err != nil {\n\t\treturn err\n\t}\n    //copy the executable property from the decoded temp struct\n\tc.Script.Executable = tmpexec.Executable\n\tc.Script.Args = make([]string, l-1)\n    //copy the args skipping first one\n\tfor i := 1; i < len(tmp.Script); i++ {\n\t\tc.Script.Args[i-1] = tmp.Script[i].Value\n\t}\n\tfmt.Println(c)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66121118/use-aws-go-sdk-with-profile",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/s3\"\n)\nfunc main() {\n\tregion := \"eu-central-1\"\n\tprofile := \"myprofile\"\n\tsess, err := session.NewSessionWithOptions(session.Options{\n\t\tConfig: aws.Config{Region: aws.String(region),\n\t\t\tCredentialsChainVerboseErrors: aws.Bool(true)},\n\t\tProfile: profile,\n\t})\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tsvc := s3.New(sess)\n\t_, err = svc.CreateBucket(&s3.CreateBucketInput{\n\t\tBucket: aws.String(\"myxplbukcet\"),\n\t})\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65972668/best-way-to-implement-timeout-for-specific-route-on-echo-go",
    "body": "func TimeoutMiddleware(timeout time.Duration, next func(w http.ResponseWriter, req *http.Request)) func(w http.ResponseWriter, req *http.Request) {\n\treturn func(w http.ResponseWriter, req *http.Request) {\n        // Wrap the existing context from the request\n\t\tctx, cancel := context.WithTimeout(req.Context(), timeout)\n        // Always do this to clean up contexts, otherwise they'll hang out\n        // and gather since they are blocked go rountines\n\t\tdefer cancel()\n        // Put the new context into the request\n\t\treq = req.WithContext(ctx)\n        // Pass the modified request forward\n\t\tnext(w, req)\n        // Handle any ctx timeout issues in the general middleware\n\t\tif err := ctx.Err(); err != nil {\n\t\t\tif errors.Is(err, context.DeadlineExceeded) {\n\t\t\t\tlog.Println(\"HTTP Request timed out\")\n\t\t\t\tw.Write([]byte(\"Timed out\"))\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64889763/why-is-there-a-performance-difference-when-i-pass-a-slice-argument-as-value-or-a",
    "body": "package main_test\nimport (\n\t\"math/rand\"\n\t\"testing\"\n)\nfunc AddToSliceByValue(mySlice []int) {\n\tfor idx := range mySlice {\n\t\tmySlice[idx]++\n\t}\n}\nfunc AddToSliceByPointer(mySlice *[]int) {\n\tfor idx := range *mySlice {\n\t\t(*mySlice)[idx]++\n\t}\n}\nfunc BenchmarkAddByValue(b *testing.B) {\n\tmySlice := rand.Perm(1000)\n\tfor n := 0; n < b.N; n++ {\n\t\tAddToSliceByValue(mySlice)\n\t}\n}\nfunc BenchmarkAddByPointer(b *testing.B) {\n\tmySlice := rand.Perm(1000)\n\tfor n := 0; n < b.N; n++ {\n\t\tAddToSliceByPointer(&mySlice)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64889763/why-is-there-a-performance-difference-when-i-pass-a-slice-argument-as-value-or-a",
    "body": "$ go test -bench=. -benchmem -count=4\ngoos: linux\ngoarch: amd64\npkg: test/bencslice\nBenchmarkAddByValue-4     \t 3010280\t       385 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByValue-4     \t 3118990\t       385 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByValue-4     \t 3117450\t       384 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByValue-4     \t 3109251\t       386 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByPointer-4   \t 2012487\t       610 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByPointer-4   \t 2009690\t       594 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByPointer-4   \t 2009222\t       594 ns/op\t       0 B/op\t       0 allocs/op\nBenchmarkAddByPointer-4   \t 1850820\t       596 ns/op\t       0 B/op\t       0 allocs/op\nPASS\nok  \ttest/bencslice\t13.476s\n$ go version\ngo version go1.15.2 linux/amd64"
  },
  {
    "url": "https://stackoverflow.com/questions/64481171/beforesave-does-not-populate-data",
    "body": "func (u *User) BeforeCreate(tx *gorm.DB) error {\n\treturn u.bcryptPassword(tx)\n}\nfunc (u *User) BeforeUpdate(tx *gorm.DB) error {\n\tif tx.Statement.Changed(\"Password\") {\n\t\treturn u.bcryptPassword(tx)\n\t}\n\treturn nil\n}\nfunc (u *User) bcryptPassword(tx *gorm.DB) error {\n\tvar newPass string\n\tswitch u := tx.Statement.Dest.(type) {\n\tcase map[string]interface{}:\n\t\tnewPass = u[\"password\"].(string)\n\tcase *User:\n\t\tnewPass = u.Password\n\tcase []*User:\n\t\tnewPass = u[tx.Statement.CurDestIndex].Password\n\t}\n\tb, err := bcrypt.GenerateFromPassword([]byte(newPass), 10)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttx.Statement.SetColumn(\"password\", b)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62976721/whats-the-way-to-implement-struct-field-validations-in-official-go-mongo-driver",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/asaskevich/govalidator\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n)\ntype Author struct {\n\tFirstName string `valid:\"stringlength(3|20)\" bson:\"given_name\" json:\"given_name\"`\n\tLastName  string `valid:\"stringlength(2|20)\" bson:\"surname\" json:\"surname\"`\n}\ntype Book struct {\n    // Here, if ID is set, it needs to be a valid ObjectID\n\tID     primitive.ObjectID `valid:\"oid,optional\" bson:\"_id,omitempty\" json:\"_id,omitempty\"`\n\tISBN   string             `valid:\"isbn13,optional\" bson:\"isbn,omitempty\" json:\"isbn,omitempty\"`\n\tTitle  string             `valid:\"stringlength(5|20)\" bson:\"title\" json:\"title\"`\n    // This instructs govalidator to validate the referenced struct, even when\n    // it is a pointer\n\tAuthor *Author            `valid:\"\" bson:\"author\" json:\"author\"`\n}\n// ObjectIDValidator validates whether the given type is a primitive.ObjectId\n// and whether its value is valid.\n// govalidator only validates a string as ObjectId, so we implement a little wrapper function...\nfunc ObjectIDValidator(inner, outer interface{}) bool {\n\toid := inner.(primitive.ObjectID)\n\tstr := oid.Hex()\n\treturn govalidator.IsMongoID(str)\n}\n// ...and add it to the validators you can use as a struct tag\nfunc init() {\n\tgovalidator.CustomTypeTagMap.Set(\"oid\", govalidator.CustomTypeValidator(ObjectIDValidator))\n}\nfunc TestValidity(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc         string\n\t\tbook         Book\n\t\texpectedFail bool\n\t}{\n\t\t{\n\t\t\tdesc: \"A book with an invalid ISBN\",\n\t\t\tbook: Book{\n\t\t\t\tID:     primitive.NewObjectID(),\n\t\t\t\tTitle:  \"foobar\",\n\t\t\t\tISBN:   \"abc\",\n\t\t\t\tAuthor: &Author{FirstName: \"Foo\", LastName: \"Bar\"},\n\t\t\t},\n\t\t\texpectedFail: true,\n\t\t},\n\t\t{\n\t\t\tdesc: \"A perfectly valid (and good!) book\",\n\t\t\tbook: Book{\n\t\t\t\tID:     primitive.NewObjectID(),\n\t\t\t\tTitle:  \"Neuromancer\",\n\t\t\t\tISBN:   \"978-0441569595\",\n\t\t\t\tAuthor: &Author{FirstName: \"William\", LastName: \"Gibson\"},\n\t\t\t},\n\t\t\texpectedFail: false,\n\t\t},\n\t\t{\n\t\t\tdesc: \"Still a good book, but with the title cut short\",\n\t\t\tbook: Book{\n\t\t\t\tID:     primitive.NewObjectID(),\n\t\t\t\tTitle:  \"Neur\",\n\t\t\t\tISBN:   \"978-0441569595\",\n\t\t\t\tAuthor: &Author{FirstName: \"William\", LastName: \"Gibson\"},\n\t\t\t},\n\t\t\texpectedFail: true,\n\t\t},\n\t\t{\n\t\t\tdesc: \"Still a good book, only the author's name was cut short\",\n\t\t\tbook: Book{\n\t\t\t\tID:     primitive.NewObjectID(),\n\t\t\t\tTitle:  \"Neuromancer\",\n\t\t\t\tISBN:   \"978-0441569595\",\n\t\t\t\tAuthor: &Author{FirstName: \"W\", LastName: \"Gibson\"},\n\t\t\t},\n\t\t\texpectedFail: true,\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\tok, err := govalidator.ValidateStruct(tC.book)\n\t\t\tswitch {\n\t\t\tcase !ok && !tC.expectedFail:\n\t\t\t\tt.Errorf(\"%#v unexpectedly did not validate as a Book: %s\", tC.book, err)\n\t\t\t\treturn\n\t\t\tcase ok && tC.expectedFail:\n\t\t\t\tt.Errorf(\"%#v unexpectedly validated as a Book!\", tC.book)\n\t\t\t\treturn\n\t\t\tcase (!ok && tC.expectedFail) || (ok && !tC.expectedFail):\n\t\t\t\tt.Logf(\"Just as planned\")\n\t\t\t}\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60046225/extract-avro-schema",
    "body": "package main\nimport (\n\t\"github.com/hamba/avro\"\n\t\"log\"\n\t\"os\"\n)\n// HeaderSchema is the Avro schema of a container file header.\nvar HeaderSchema = avro.MustParse(`{\n\t\"type\": \"record\",\n\t\"name\": \"org.apache.avro.file.Header\",\n\t\"fields\": [\n\t\t{\"name\": \"magic\", \"type\": {\"type\": \"fixed\", \"name\": \"Magic\", \"size\": 4}},\n\t\t{\"name\": \"meta\", \"type\": {\"type\": \"map\", \"values\": \"bytes\"}},\n\t\t{\"name\": \"sync\", \"type\": {\"type\": \"fixed\", \"name\": \"Sync\", \"size\": 16}}\n\t]\n}`)\nvar magicBytes = [4]byte{'O', 'b', 'j', 1}\nconst (\n\tschemaKey = \"avro.schema\"\n)\n// Header represents an Avro container file header.\ntype Header struct {\n\tMagic [4]byte           `avro:\"magic\"`\n\tMeta  map[string][]byte `avro:\"meta\"`\n\tSync  [16]byte          `avro:\"sync\"`\n}\nfunc main() {\n\tr, err := os.Open(\"path/my.avro\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer r.Close()\n\treader := avro.NewReader(r, 1024)\n\tvar h Header\n\treader.ReadVal(HeaderSchema, &h)\n\tif reader.Error != nil {\n\t\tlog.Println(\"decoder: unexpected error: %v\", reader.Error)\n\t}\n\tif h.Magic != magicBytes {\n\t\tlog.Println(\"decoder: invalid avro file\")\n\t}\n\tschema, err := avro.Parse(string(h.Meta[schemaKey]))\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tlog.Println(schema)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59605471/websocket-clients-is-node-js-really-faster-than-go-gorilla-and-gobwas",
    "body": "\tgo func() {\n\t\tfor {\n\t\t\tmsg, _, err := wsutil.ReadServerData(conn)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n            // dedicated goroutine for message processing, unblocking current one\n\t\t\tgo func() {\n\t\t\t\tvar t time.Time\n\t\t\t\tvar data messageReceived\n\t\t\t\tjson.Unmarshal(msg, &data)\n\t\t\t\tif len(data.Params.Timestamp) > 0 {\n\t\t\t\t\tt, err = time.Parse(\"2006-01-02T15:04:05.000Z\", data.Params.Timestamp)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t\t}\n\t\t\t\t\tfmt.Println(data.Params.Symbol, \";\", data.Params.Sequence, \";\", data.Params.Timestamp, \";\", time.Now().Sub(t).Seconds()*1000, \"; gobwas ;\", len(msg))\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t}()"
  },
  {
    "url": "https://stackoverflow.com/questions/59236611/github-actions-run-golint-on-wihdows",
    "body": "name: test\non:\n  push:\n    branches:\n    - \"**\"\njobs:\n  test:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      fail-fast: false\n      matrix:\n        os:\n        - ubuntu-latest\n        - macOS-latest\n        - windows-latest\n    steps:\n    - name: setup go\n      uses: actions/setup-go@v1\n      with:\n        go-version: 1.x\n    - name: setup env\n      run: |\n        echo \"::set-env name=GOPATH::$(go env GOPATH)\"\n        echo \"::add-path::$(go env GOPATH)/bin\"\n      shell: bash\n    - name: checkout\n      uses: actions/checkout@v1\n      with:\n        fetch-depth: 1\n        path: src/github.com/${{ github.repository }}\n    - name: golint\n      run: |\n        go env\n        go install golang.org/x/lint/golint\n        golint ./..."
  },
  {
    "url": "https://stackoverflow.com/questions/57948583/websocket-connection-fails-with-301-while-using-go-on-aws-application-load-balan",
    "body": "<script>\n    let socket = new WebSocket(\"wss://myexamplesite.com/websocket\")\n    console.log(\"Attempting Websocket Connection\")\n    socket.onopen = () => {\n        console.log(\"Successfully Connected\");\n        socket.send(\"Hi From the Client!\")\n    }\n    socket.onclose = (event) => {\n        console.log(\"Socket Closed Connection: \", event)\n    }\n    socket.onmessage = (msg) => {\n        console.log(msg);\n    }\n    socket.onerror = (error) => {\n        console.log(\"Socket Error: \", error)\n    }\n</script>"
  },
  {
    "url": "https://stackoverflow.com/questions/56678481/why-code-in-loop-not-executed-when-i-have-two-go-routines",
    "body": "go run -race main.go\n==================\nWARNING: DATA RACE\nRead at 0x0000005e9600 by main goroutine:\n  main.main()\n      /home/jack/Project/GoProject/src/gitlab.com/hooshyar/GoNetworkLab/StackOVerflow/race/main.go:17 +0x6c\nPrevious write at 0x0000005e9600 by goroutine 6:\n  main.main.func1()\n      /home/jack/Project/GoProject/src/gitlab.com/hooshyar/GoNetworkLab/StackOVerflow/race/main.go:13 +0x56\nGoroutine 6 (running) created at:\n  main.main()\n      /home/jack/Project/GoProject/src/gitlab.com/hooshyar/GoNetworkLab/StackOVerflow/race/main.go:11 +0x46\n==================\nresult=119657339\nFound 1 data race(s)\nexit status 66"
  },
  {
    "url": "https://stackoverflow.com/questions/55321573/cmd-run-hangs-forever-in-golang-on-macos-when-the-screen-is-locked-off",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os/exec\"\n\t\"time\"\n)\nfunc main() {\n\tfor {\n\t\ttime.Sleep(time.Second * 5)\n\n        // run your command with a timeout\n        ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\tcmd := exec.CommandContext(\n\t\t\tctx,\n\t\t\t\"/usr/bin/osascript\",\n\t\t\t\"-e\",\n\t\t\t`display dialog \"hello\" with title \"hello\"`,\n\t\t)\n\n        err := cmd.Run()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n        // don't forget to cancel your context to avoid context leak\n\t\tcancel()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55321573/cmd-run-hangs-forever-in-golang-on-macos-when-the-screen-is-locked-off",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"time\"\n)\nfunc main() {\n\tfor {\n\t\ttime.Sleep(time.Second * 5)\n\t\tctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\n\t\tcmd := exec.CommandContext(\n\t\t\tctx,\n\t\t\t\"python\",\n\t\t\t\"-c\",\n\t\t\t\"import sys,Quartz; d=Quartz.CGSessionCopyCurrentDictionary(); print d\",\n\t\t)\n\t\tvar err error\n\t\tvar b []byte\n\t\tif b, err = cmd.CombinedOutput(); err != nil {\n\t\t\tcancel()\n\t\t\tcontinue\n\t\t}\n\t\tcancel()\n\n        // if screen is not locked\n\t\tif !strings.Contains(string(b), \"CGSSessionScreenIsLocked = 1\") {\n\t\t\tcmd = exec.Command(\n\t\t\t\t\"/usr/bin/osascript\",\n\t\t\t\t\"-e\",\n\t\t\t\t\"display dialog \\\"Hello\\\"\",\n\t\t\t)\n\t\t\tcmd.Stdout = os.Stdout\n\t\t\tcmd.Stderr = os.Stderr\n\t\t\terr = cmd.Run()\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"err: \", err)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54735113/how-to-use-json-string-value-to-get-iota-value",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype UserType uint\nconst (\n\tUserTypeFree UserType = iota\n\tUserTypePremium\n)\nvar UserTypeToString = map[UserType]string{\n\tUserTypeFree:    \"Free\",\n\tUserTypePremium: \"Premium\",\n}\nvar UserTypeFromString = map[string]UserType{\n\t\"Free\":    UserTypeFree,\n\t\"Premium\": UserTypePremium,\n}\nfunc (ut UserType) String() string {\n\tif s, ok := UserTypeToString[ut]; ok {\n\t\treturn s\n\t}\n\treturn \"unknown\"\n}\nfunc (ut UserType) MarshalJSON() ([]byte, error) {\n\tif s, ok := UserTypeToString[ut]; ok {\n\t\treturn json.Marshal(s)\n\t}\n\treturn nil, fmt.Errorf(\"unknown user type %d\", ut)\n}\nfunc (ut *UserType) UnmarshalJSON(text []byte) error {\n\tvar s string\n\tif err := json.Unmarshal(text, &s); err != nil {\n\t\treturn err\n\t}\n\tvar v UserType\n\tvar ok bool\n\tif v, ok = UserTypeFromString[s]; !ok {\n\t\treturn fmt.Errorf(\"unknown user type %s\", s)\n\t}\n\t*ut = v\n\treturn nil\n}\nfunc main() {\n\tvar ut UserType\n\tjson.Unmarshal([]byte(`\"Free\"`), &ut)\n\tfmt.Printf(\"%#v %v \\n\", ut, ut)\n\n\tb, _ := json.Marshal(ut)\n\n\tfmt.Printf(\"%v\\n\", string(b))\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54606686/print-post-json-data",
    "body": "func Create(w http.ResponseWriter, r *http.Request) {\n\tvar p Page //Create an instance of our struct\n\n    //Read all the data in r.Body from a byte[], convert it to a string, and assign store it in 's'.\n    s, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\tpanic(err) // This would normally be a normal Error http response but I've put this here so it's easy for you to test.\n\t}\n    // use the built in Unmarshal function to put the string we got above into the empty page we created at the top.  Notice the &p.  The & is important, if you don't understand it go and do the 'Tour of Go' again.\n\terr = json.Unmarshal(s, &p)\n\tif err != nil {\n\t\tpanic(err) // This would normally be a normal Error http response but I've put this here so it's easy for you to test.\n\t}\n   // From here you have a proper Page object which is filled.  Do what you want with it.\n\trender.JSON(w, r, p) // This is me using a useful helper function from go-chi which 'Marshals' a struct to a json string and returns it to using the http.ResponseWriter.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/31976346/golang-regular-expression-getting-index-position-of-variable",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"unicode/utf8\"\n)\nfunc main() {\n\ttext := \"Here... are some initials E.R.B. and also an etc. in the middle.\\nPeriods that form part of an abbreviation but are taken to be end-of-sentence markers\\nor vice versa do not only introduce errors in the determination of sentence boundaries.\\nSegmentation errors propagate into further components which rely on accurate\\nsentence segmentation and subsequent analyses are most likely affected negatively.\\nWalker et al. (2001), for example, stress the importance of correct sentence boundary\\ndisambiguation for machine translation and Kiss and Strunk (2002b) show that errors\\nin sentence boundary detection lead to a higher error rate in part-of-speech tagging.\\nIn this paper, we present an approach to sentence boundary detection that builds\\non language-independent methods and determines sentence boundaries with high accuracy.\\nIt does not make use of additional annotations, part-of-speech tagging, or precompiled\\nlists to support sentence boundary detection but extracts all necessary data\\nfrom the corpus to be segmented. Also, it does not use orthographic information as primary\\nevidence and is thus suited to process single-case text. It focuses on robustness\\nand flexibility in that it can be applied with good results to a variety of languages without\\nany further adjustments. At the same time, the modular structure of the proposed\\nsystem makes it possible in principle to integrate language-specific methods and clues\\nto further improve its accuracy. The basic algorithm has been determined experimentally\\non the basis of an unannotated development corpus of English. We have applied\\nthe resulting system to further corpora of English text as well as to corpora from ten\\nother languages: Brazilian Portuguese, Dutch, Estonian, French, German, Italian, Norwegian,\\nSpanish, Swedish, and Turkish. Without further additions or amendments to\\nthe system produced through experimentation on the development corpus, the mean\\naccuracy of sentence boundary detection on newspaper corpora in eleven languages is\\n98.74 %.\"\n\tvar periodContextFmt string = `\\S*[\\.\\?!](?P<after_tok>(?:[?!)\";}\\]\\*:@\\'\\({\\[])|\\s+(?P<next_tok>\\S+))`\n\tsent := regexp.MustCompile(periodContextFmt)\n\tmatches := sent.FindAllStringSubmatchIndex(text, -1)\n\tfor _, match := range matches {\n\t\tfmt.Println(\"context: \", text[utf8.RuneCountInString(text[:match[0]]):utf8.RuneCountInString(text[:match[1]])])\n\t\tfmt.Println(\"next_tok: \", text[utf8.RuneCountInString(text[:match[4]]):utf8.RuneCountInString(text[:match[5]])])\n\t\tfmt.Println(\"start: \", utf8.RuneCountInString(text[:match[2]]))\n\t\tfmt.Println(\"end: \", utf8.RuneCountInString(text[:match[4]]))\n\t\tfmt.Println(\"------\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79304483/go-ssh-how-to-gracefully-close-the-connection-in-a-simple-server",
    "body": "go func(in <-chan *ssh.Request) {\n    for req := range in {\n        switch req.Type {\n        case \"exec\":\n            channel.Stderr().Write([]byte(\"Request received!\\n\"))\n            req.Reply(true, nil)\n            // Do some more work here\n            status := 0\n            channel.SendRequest(\"exit-status\", false, ssh.Marshal(struct{ Status uint32 }{uint32(status)}))\n            channel.Close() // ???\n        default:\n            req.Reply(false, nil)\n        }\n    }\n    wg.Done()\n}(requests)"
  },
  {
    "url": "https://stackoverflow.com/questions/79125791/replacing-a-string-in-a-byte-slice-with-a-new-string-of-different-length-without",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"slices\"\n\t\"unicode/utf16\"\n)\nfunc replaceString(data []byte, newString string, startPos int) ([]byte, error) {\n\tif startPos >= len(data) || startPos < 0 {\n\t\treturn nil, fmt.Errorf(\"start position out of bounds\")\n\t}\n\tzero := 0\n\tterminatorPos := -1\n\tfor i, b := range data[startPos:] {\n\t\t// Assumes UTF-16 i.e. 2 bytes per character. The terminator must\n\t\t// begin on an even-numbered byte.\n\t\tif b != 0 {\n\t\t\tzero = 0\n\t\t} else if zero > 0 || i%2 == 0 {\n\t\t\tzero += 1\n\t\t\tif zero == 3 {\n\t\t\t\tterminatorPos = i + 1 - zero\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif terminatorPos == -1 {\n\t\treturn nil, fmt.Errorf(\"termination sequence not found\")\n\t}\n\tucs2 := utf16.Encode([]rune(newString))\n\tbuf := &bytes.Buffer{}\n\tfor _, char := range ucs2 {\n\t\tbuf.WriteByte(byte(char & 0xff))\n\t\tbuf.WriteByte(byte((char >> 8) & 0xff))\n\t}\n\treturn slices.Replace(data, startPos, startPos+terminatorPos, buf.Bytes()...), nil\n}\nfunc main() {\n\t// [42 97 0 98 0 99 0 0 0 0 42]\n\tfmt.Println(replaceString([]byte{42, 0, 0, 1, 2, 3, 0, 0, 0, 0, 42}, \"abc\", 1))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78930992/c-aes-gcm-decryption-will-null-iv",
    "body": "using Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.Utilities.Encoders;\nusing System;\n...\nbyte[] key = Hex.Decode(\"DD24A01473D859BA6E27640C982BE5CA9CA41F0928CEBA4BA404DE4FAD5F7FD3\");\nbyte[] iv = Hex.Decode(\"00000000000000000000000000000001\");\nbyte[] ct = Hex.Decode(\"4A13C29326CF3CC34F9218BF1DAFE602AED65D2F81386769EE87086DAAF10884A18D8618DE185599DC23355E02DC55F635F3AB5CC14066FF67438628B2AE589C5BFB0946F51866CCDA7AA81FC2860CBAB84A8F9B057CAA77D0BC82896171527E6DDC22D16B72A7F904DE13D3C8452A6B75893D069D5D2561C4D5B604AA927EDC0A22198338E86263698FA42BB7D5C777718D9C66F8148C444F0DDA08590BA629D1CE34CFA7ECBAE8C592A3026084F7AFBF331EAFA411EC138BAF06B19E6962A531EFCD983059567DB683B8CBE5121B2ECB86165DB5D3C143AFAF6A3AB2E317B424C670481C625C8199421E143C70E195A56B8A30DB46FB1463DE5319409C2B4C0C9C9516F3394FE58DDBE7370DAE7EE21A9172AC9C7A48C8F27C42DBC9BED0CD092A9BA7E4C8B695A295C6DD03E30A69B152F5F43E06C2989F09CC98FA6F767EE93D66F63606416A940A4C5988B8688EEFFF331CD36E7AA7811B9B778B37C72A3EEC58A639F9F605B31226E08947\");\nIBufferedCipher cipher = CipherUtilities.GetCipher(\"AES/CTR/NoPadding\");\ncipher.Init(false, new ParametersWithIV(ParameterUtilities.CreateKeyParameter(\"AES\", key), iv));\nbyte[] decryptedBytes = cipher.DoFinal(ct);\nConsole.WriteLine(Hex.ToHexString(decryptedBytes)); // 3182016a30080c046d757372040030090c0473796e6302010030090c04746f6d62020100300a0c0470646d6e0c02646b30150c04737663650c0d57694669416e616c797469637330160c04616772700c0e77696669616e616c797469637364301c0c0473686131041471e6960f30245dff29bc9083c0dae34f755f09aa301e0c0463646174181632303233303431383036333631352e3837383332335a301e0c046d646174181632303233303431383036333631352e3837383332335a301e0c0a706572736973747265660410321cc548fc8f467b9d7e8bdcb94a9ae4302c0c04555549440c2431333042463330352d343634312d343542372d414432322d304536393731303337343541302e0c06765f44617461042442373333364442432d304343462d343631432d383345392d43423031313646334433383630310c04616363740c29636f6d2e6170706c652e776966692e616e616c79746963732e746f6b656e53746f72652e7769666964"
  },
  {
    "url": "https://stackoverflow.com/questions/78930992/c-aes-gcm-decryption-will-null-iv",
    "body": "using Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Modes;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Utilities;\nusing Org.BouncyCastle.Utilities.Encoders;\nusing System;\nusing System.Reflection;\n...\nbyte[] key = Hex.Decode(\"DD24A01473D859BA6E27640C982BE5CA9CA41F0928CEBA4BA404DE4FAD5F7FD3\");\nbyte[] ct = Hex.Decode(\"4A13C29326CF3CC34F9218BF1DAFE602AED65D2F81386769EE87086DAAF10884A18D8618DE185599DC23355E02DC55F635F3AB5CC14066FF67438628B2AE589C5BFB0946F51866CCDA7AA81FC2860CBAB84A8F9B057CAA77D0BC82896171527E6DDC22D16B72A7F904DE13D3C8452A6B75893D069D5D2561C4D5B604AA927EDC0A22198338E86263698FA42BB7D5C777718D9C66F8148C444F0DDA08590BA629D1CE34CFA7ECBAE8C592A3026084F7AFBF331EAFA411EC138BAF06B19E6962A531EFCD983059567DB683B8CBE5121B2ECB86165DB5D3C143AFAF6A3AB2E317B424C670481C625C8199421E143C70E195A56B8A30DB46FB1463DE5319409C2B4C0C9C9516F3394FE58DDBE7370DAE7EE21A9172AC9C7A48C8F27C42DBC9BED0CD092A9BA7E4C8B695A295C6DD03E30A69B152F5F43E06C2989F09CC98FA6F767EE93D66F63606416A940A4C5988B8688EEFFF331CD36E7AA7811B9B778B37C72A3EEC58A639F9F605B31226E08947\");\nbyte[] tag = Hex.Decode(\"89EA2B7232F5B053BB8EEB32534C52DC\");\nbyte[] ctTag = Arrays.Concatenate(ct, tag);\nAeadParameters parameters = new AeadParameters(new KeyParameter(key), 128, new byte[12], null);\nGcmBlockCipher cipher = new GcmBlockCipher(new AesEngine());\ncipher.Init(false, parameters);\n// Change J0 via reflection\ncipher.GetType().GetField(\"J0\", System.Reflection.BindingFlags.NonPublic | BindingFlags.Instance).SetValue(cipher, new byte[16]);\n// Reinitialize values depending on J0 (counter, counter32)\ncipher.Reset();\nbyte[] plaintext = new byte[cipher.GetOutputSize(ctTag.Length)];\nint len = cipher.ProcessBytes(ctTag, 0, ctTag.Length, plaintext, 0);\ncipher.DoFinal(plaintext, len);\nConsole.WriteLine(Hex.ToHexString(plaintext)); // 3182016a30080c046d757372040030090c0473796e6302010030090c04746f6d62020100300a0c0470646d6e0c02646b30150c04737663650c0d57694669416e616c797469637330160c04616772700c0e77696669616e616c797469637364301c0c0473686131041471e6960f30245dff29bc9083c0dae34f755f09aa301e0c0463646174181632303233303431383036333631352e3837383332335a301e0c046d646174181632303233303431383036333631352e3837383332335a301e0c0a706572736973747265660410321cc548fc8f467b9d7e8bdcb94a9ae4302c0c04555549440c2431333042463330352d343634312d343542372d414432322d304536393731303337343541302e0c06765f44617461042442373333364442432d304343462d343631432d383345392d43423031313646334433383630310c04616363740c29636f6d2e6170706c652e776966692e616e616c79746963732e746f6b656e53746f72652e7769666964"
  },
  {
    "url": "https://stackoverflow.com/questions/78481672/how-to-structure-sub-sub-commands-with-golang-cobra",
    "body": "package foo\nimport (\n\t\"github.com/dev-vinicius-andrade/go-cobra-example/cmd/foo/bar\"\n\t\"github.com/dev-vinicius-andrade/go-cobra-example/types\"\n\t\"github.com/spf13/cobra\"\n)\ntype commandDefinition struct {\n\tContext       *types.CliContext\n\tParentCommand *cobra.Command\n}\nvar context = types.CliContext{}\nfunc CreateCommand() *cobra.Command {\n\tc := commandDefinition{}\n\treturn c.CreateCommandDefinition()\n}\nfunc (c *commandDefinition) CreateCommandDefinition() *cobra.Command {\n\tcommand := cobra.Command{\n\t\tUse:              \"foo\",\n\t\tShort:            \"Foo is the main command of this tool\",\n\t\tLong:             `This is a long description of Foo is the main command of this tool`,\n\t\tAliases:          []string{},\n\t\tTraverseChildren: true, // This is important to always run the Run function of the parent command, good for global flags, context, etc\n\t}\n\tdefineFlags(&command)\n\tdefineSubCommands(&command)\n\tsetRunCommand(&command)\n\treturn &command\n}\nfunc defineSubCommands(cmd *cobra.Command) {\n\tbar.CreateCommand(&context, cmd)\n}\nfunc runCommand(cmd *cobra.Command, args []string) {\n\tif len(args) == 0 {\n\t\tcmd.Help()\n\t\treturn\n\t}\n}\nfunc setRunCommand(command *cobra.Command) {\n\tcommand.Run = runCommand\n}\nfunc defineFlags(command *cobra.Command) {\n\tcommand.PersistentFlags().StringVarP(&context.GlobalMessage, \"message\", \"m\", \"Default Global Message\", \"Global message to be used in all commands\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78481672/how-to-structure-sub-sub-commands-with-golang-cobra",
    "body": "package bar\nimport (\n\t\"fmt\"\n\t\"github.com/dev-vinicius-andrade/go-cobra-example/helpers\"\n\t\"github.com/dev-vinicius-andrade/go-cobra-example/types\"\n\t\"github.com/spf13/cobra\"\n)\ntype commandDefinition struct {\n\tContext       *types.CliContext\n\tParentCommand *cobra.Command\n}\nfunc CreateCommand(context *types.CliContext, parentCommand *cobra.Command) (*cobra.Command, error) {\n\tcommand := commandDefinition{\n\t\tContext:       context,\n\t\tParentCommand: parentCommand,\n\t}\n\treturn command.createCommandDefinition(context, parentCommand), nil\n}\nfunc (c *commandDefinition) createCommandDefinition(context *types.CliContext, parentCommand *cobra.Command) *cobra.Command {\n\tcommand := cobra.Command{\n\t\tUse:              \"bar\",\n\t\tShort:            \"Bar is subcommand of foo\",\n\t\tLong:             `This is a long description of Bar is a subcommand of foo`,\n\t\tAliases:          []string{},\n\t\tTraverseChildren: true,\n\t}\n\tdefineFlags(&command)\n\tdefineSubCommands(&command)\n\tsetRunCommand(context, &command)\n\thelpers.CobraHelper.AddCommandToParent(&command, parentCommand)\n\treturn &command\n}\nfunc defineSubCommands(cmd *cobra.Command) {\n\t//define your subcommands here\n}\nfunc runCommand(context *types.CliContext, cmd *cobra.Command, args []string) {\n\tfmt.Printf(\"%s\\n\", context.GlobalMessage)\n}\nfunc setRunCommand(context *types.CliContext, command *cobra.Command) {\n\tcommand.Run = func(cmd *cobra.Command, args []string) {\n\t\trunCommand(context, cmd, args)\n\t}\n}\nfunc defineFlags(command *cobra.Command) {\n\t//define your flags of your subcommand here\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78356067/access-from-multiple-goroutines-to-a-single-array",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc main() {\n\tconst num_workers = 3\n\tvar numbers = []int{1, 3, 5, 9, 12, 14, 15, 16, 17, 20, 22, 100, 101, 103, 99, 55, 1039, 938}\n\tinputs := make(chan int)\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < num_workers; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tfor input := range inputs {\n\t\t\t\tfmt.Printf(\"worker: %d, input: %d\\n\", i, input)\n\t\t\t}\n\t\t}()\n\t}\n    // main feeds the numbers into the channel.\n\tfor _, num := range numbers {\n\t\tinputs <- num\n\t}\n    // this allows `for input := range inputs` to exit\n    // once the channel is empty\n\tclose(inputs)\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78309936/verify-and-recover-signed-file-in-golang",
    "body": "import (\n\t\"bytes\"\n\t\"crypto/rsa\"\n\t\"math/big\"\n)\nfunc recover(ciphertext []byte, pubKey *rsa.PublicKey) []byte {\n\tdecryptedPadded := decryptTextbook(ciphertext, pubKey)\n\tif len(decryptedPadded) != pubKey.Size() {\n\t\treturn nil // wrong size\n\t}\n\tpadding, decrypted := separate(decryptedPadded)\n\tif !verifyPadding(padding) {\n\t\treturn nil // wrong padding\n\t}\n\treturn decrypted\n}\nfunc decryptTextbook(ciphertext []byte, pub *rsa.PublicKey) []byte {\n\tciphertextInt := new(big.Int)\n\tciphertextInt.SetBytes(ciphertext)\n\te := big.NewInt(int64(pub.E))\n\tdecryptedInt := new(big.Int)\n\tdecryptedInt.Exp(ciphertextInt, e, pub.N)\n\tdecrypted := make([]byte, pub.Size())\n\tdecryptedInt.FillBytes(decrypted)\n\treturn decrypted\n}\nfunc separate(decryptedPadded []byte) ([]byte, []byte) {\n\tseparatorIndex := bytes.Index(decryptedPadded[1:], []byte{0}) + 1\n\treturn decryptedPadded[:separatorIndex], decryptedPadded[separatorIndex+1:]\n}\nfunc verifyPadding(padding []byte) bool { // check if padding is 0001FF..FF\n\tif len(padding) < 2+8 || padding[0] != 0 || padding[1] != 1 {\n\t\treturn false\n\t} else {\n\t\tfor i := 2; i < len(padding); i++ {\n\t\t\tif padding[i] != 255 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78104322/clean-way-to-manage-database-transactions-in-golang",
    "body": "package session\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"gorm.io/gorm\"\n)\n// Session aims at facilitating business transactions while abstracting the underlying mechanism,\n// be it a database transaction or another transaction mechanism. This allows services to execute\n// multiple business use-cases and easily rollback changes in case of error, without creating a\n// dependency to the database layer.\n//\n// Sessions should be constituted of a root session created with a \"New\"-type constructor and allow\n// the creation of child sessions with `Begin()` and `Transaction()`. Nested transactions should be supported\n// as well.\ntype Session interface {\n\t// Begin returns a new session with the given context and a started transaction.\n\t// Using the returned session should have no side-effect on the parent session.\n\t// The underlying transaction mechanism is injected as a value into the new session's context.\n\tBegin(ctx context.Context) (Session, error)\n\t// Transaction executes a transaction. If the given function returns an error, the transaction\n\t// is rolled back. Otherwise it is automatically committed before `Transaction()` returns.\n\t// The underlying transaction mechanism is injected into the context as a value.\n\tTransaction(ctx context.Context, f func(context.Context) error) error\n\t// Rollback the changes in the transaction. This action is final.\n\tRollback() error\n\t// Commit the changes in the transaction. This action is final.\n\tCommit() error\n\t// Context returns the session's context. If it's the root session, `context.Background()` is returned.\n\t// If it's a child session started with `Begin()`, then the context will contain the associated\n\t// transaction mechanism as a value.\n\tContext() context.Context\n}\n// Gorm session implementation.\ntype Gorm struct {\n\tdb        *gorm.DB\n\tTxOptions *sql.TxOptions\n\tctx       context.Context\n}\n// GORM create a new root session for Gorm.\n// The transaction options are optional.\nfunc GORM(db *gorm.DB, opt *sql.TxOptions) Gorm {\n\treturn Gorm{\n\t\tdb:        db,\n\t\tTxOptions: opt,\n\t\tctx:       context.Background(),\n\t}\n}\n// Begin returns a new session with the given context and a started DB transaction.\n// The returned session has manual controls. Make sure a call to `Rollback()` or `Commit()`\n// is executed before the session is expired (eligible for garbage collection).\n// The Gorm DB associated with this session is injected as a value into the new session's context.\n// If a Gorm DB is found in the given context, it will be used instead of this Session's DB, allowing for\n// nested transactions.\nfunc (s Gorm) Begin(ctx context.Context) (Session, error) {\n\ttx := DB(ctx, s.db).WithContext(ctx).Begin(s.TxOptions)\n\tif tx.Error != nil {\n\t\treturn nil, tx.Error\n\t}\n\treturn Gorm{\n\t\tctx:       context.WithValue(ctx, dbKey{}, tx),\n\t\tTxOptions: s.TxOptions,\n\t\tdb:        tx,\n\t}, nil\n}\n// Rollback the changes in the transaction. This action is final.\nfunc (s Gorm) Rollback() error {\n\treturn s.db.Rollback().Error\n}\n// Commit the changes in the transaction. This action is final.\nfunc (s Gorm) Commit() error {\n\treturn s.db.Commit().Error\n}\n// Context returns the session's context. If it's the root session, `context.Background()`\n// is returned. If it's a child session started with `Begin()`, then the context will contain\n// the associated Gorm DB and can be used in combination with `session.DB()`.\nfunc (s Gorm) Context() context.Context {\n\treturn s.ctx\n}\n// dbKey the key used to store the database in the context.\ntype dbKey struct{}\n// Transaction executes a transaction. If the given function returns an error, the transaction\n// is rolled back. Otherwise it is automatically committed before `Transaction()` returns.\n//\n// The Gorm DB associated with this session is injected into the context as a value so `session.DB()`\n// can be used to retrieve it.\nfunc (s Gorm) Transaction(ctx context.Context, f func(context.Context) error) error {\n\ttx := DB(ctx, s.db).WithContext(ctx).Begin(s.TxOptions)\n\tif tx.Error != nil {\n\t\treturn tx.Error\n\t}\n\tc := context.WithValue(ctx, dbKey{}, tx)\n\terr := f(c)\n\tif err != nil {\n\t\ttx.Rollback()\n\t\treturn err\n\t}\n\treturn tx.Commit().Error\n}\n// DB returns the Gorm instance stored in the given context. Returns the given fallback\n// if no Gorm DB could be found in the context.\nfunc DB(ctx context.Context, fallback *gorm.DB) *gorm.DB {\n\tdb := ctx.Value(dbKey{})\n\tif db == nil {\n\t\treturn fallback\n\t}\n\treturn db.(*gorm.DB)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78104322/clean-way-to-manage-database-transactions-in-golang",
    "body": "package user\nimport (\n\t\"context\"\n\t\"example-module/database/model\"\n\t\"example-module/dto\"\n\t\"example-module/session\"\n\t\"example-module/typeutil\"\n)\ntype Repository interface {\n\tCreate(ctx context.Context, user *model.User) (*model.User, error)\n\tCreateHistory(ctx context.Context, history *model.History) (*model.History, error)\n}\ntype Service struct {\n\tsession    session.Session\n\trepository Repository\n}\nfunc NewService(session session.Session, repository Repository) *Service {\n\treturn &Service{\n\t\tsession:    session,\n\t\trepository: repository,\n\t}\n}\n// Register create a new user with an associated \"register\" history.\nfunc (s *Service) Register(ctx context.Context, user *dto.RegisterUser) (*dto.User, error) {\n\t// Model mapping from DTO to model (using the `copier` library)\n\tu := typeutil.Copy(&model.User{}, user)\n\terr := s.session.Transaction(ctx, func(ctx context.Context) error {\n\t\t// You can also call another service from here, not necessarily a repository.\n\t\tvar err error\n\t\tu, err = s.repository.Create(ctx, u)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\thistory := &model.History{\n\t\t\tUserID: u.ID,\n\t\t\tAction: \"register\",\n\t\t}\n\t\t_, err = s.repository.CreateHistory(ctx, history)\n\t\treturn err\n\t})\n\t// Convert back to a DTO user using json marshal/unmarshal\n\treturn typeutil.MustConvert[*dto.User](u), err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78104322/clean-way-to-manage-database-transactions-in-golang",
    "body": "package repository\nimport (\n\t\"context\"\n\t\"example-module/database/model\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n\t\"example-module/session\"\n)\ntype User struct {\n\tDB *gorm.DB\n}\nfunc NewUser(db *gorm.DB) *User {\n\treturn &User{\n\t\tDB: db,\n\t}\n}\nfunc (r *User) Create(ctx context.Context, user *model.User) (*model.User, error) {\n\tdb := session.DB(ctx, r.DB).Omit(clause.Associations).Create(&user)\n\treturn user, db.Error\n}\nfunc (r *User) CreateHistory(ctx context.Context, history *model.History) (*model.History, error) {\n\tdb := session.DB(ctx, r.DB).Omit(clause.Associations).Create(&history)\n\treturn history, db.Error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77386587/parse-yaml-as-map-of-struct-with-array-of-sub-struct",
    "body": "...\ntype sliceObject struct {\n    Slices []slice\n}\nfunc main() {\n    yml := `\ntree:\n  branch:\n    slices:\n      slice1:   // <<< A sliceObject instance\n        slices: // <<< A sliceObject.Slices property\n          - w: 1\n          - w: 2\n            h: 3\n      slice2:   // <<< A sliceObject instance\n        slices: // <<< A sliceObject.Slices property\n          - w: 11\n            h: 22\n`\n    pathStr := \"$.tree.branch.slices\"\n    path, err := yaml.PathString(pathStr)\n    if err != nil {\n        log.Panicf(\"failed to construct YAML path %s\", err)\n    }\n    var sl map[string]sliceObject\n    if err := path.Read(strings.NewReader(yml), &sl); err != nil {\n        log.Panicf(\"failed to read value for path %s error %+v\", pathStr, err)\n    }\n    fmt.Printf(\"object: %+v\", sl)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77386587/parse-yaml-as-map-of-struct-with-array-of-sub-struct",
    "body": "...\ntype sliceObject []slice\nfunc main() {\n\tyml := `\ntree:\n  branch:\n    slices:\n      slice1:  // A sliceObject with two slices below\n        - w: 1\n        - w: 2\n          h: 3\n      slice2:  // A sliceObject with one slice below\n        - w: 11\n          h: 22\n`\n\tpathStr := \"$.tree.branch.slices\"\n\tpath, err := yaml.PathString(pathStr)\n\tif err != nil {\n\t\tlog.Panicf(\"failed to construct YAML path %s\", err)\n\t}\n\tvar sl map[string]sliceObject\n\tif err := path.Read(strings.NewReader(yml), &sl); err != nil {\n\t\tlog.Panicf(\"failed to read YAML %s\", err)\n\t}\n\tfmt.Printf(\"object: %+v\", sl)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76886216/how-can-i-validate-an-array-of-strings-from-a-json-in-golang-with-validator-pack",
    "body": "type (\n\tdemoA struct {\n\t\tValues []string `validate:\"oneof=VALUE1 VALUE2 VALUE3\"`\n\t}\n\tdemoB struct {\n\t\tValues []string `validate:\"min=1\"`\n\t}\n\tdemoC struct {\n\t\tValues []string `validate:\"min=1,dive,oneof=VALUE1 VALUE2 VALUE3\"`\n\t}\n)\nvar validate = validator.New()\nfunc main() {\n\tsafeValidate(demoA{[]string{}})\n\tfmt.Println()\n\tdoValidate(demoB{[]string{}})\n\tdoValidate(demoB{[]string{\"foo\"}})\n\tfmt.Println()\n\tdoValidate(demoC{[]string{}})\n\tdoValidate(demoC{[]string{\"foo\"}})\n\tdoValidate(demoC{[]string{\"VALUE2\"}})\n\tfmt.Println()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76850938/how-to-get-current-namespace-of-an-out-cluster-go-kubernetes-client",
    "body": "func main() {\n\tvar kubeconfig *string\n\tvar namespace *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tnamespace = flag.String(\"namespace\", \"default\", \"namespace to execute commands against\")\n\tflag.Parse()\n\t// use the current context in kubeconfig\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// create the clientset\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfor {\n\t\tpods, err := clientset.CoreV1().Pods(\"\").List(context.TODO(), metav1.ListOptions{})\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t\tfmt.Printf(\"There are %d pods in the cluster\\n\", len(pods.Items))\n\t\t// Examples for error handling:\n\t\t// - Use helper functions like e.g. errors.IsNotFound()\n\t\t// - And/or cast to StatusError and use its properties like e.g. ErrStatus.Message\n\n\t\tpod := \"example-xxxxx\"\n\t\t_, err = clientset.CoreV1().Pods(*namespace).Get(context.TODO(), pod, metav1.GetOptions{})\n\t\tif errors.IsNotFound(err) {\n\t\t\tfmt.Printf(\"Pod %s in namespace %s not found\\n\", pod, *namespace)\n\t\t} else if statusError, isStatus := err.(*errors.StatusError); isStatus {\n\t\t\tfmt.Printf(\"Error getting pod %s in namespace %s: %v\\n\",\n\t\t\t\tpod, *namespace, statusError.ErrStatus.Message)\n\t\t} else if err != nil {\n\t\t\tpanic(err.Error())\n\t\t} else {\n\t\t\tfmt.Printf(\"Found pod %s in namespace %s\\n\", pod, *namespace)\n\t\t}\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76850938/how-to-get-current-namespace-of-an-out-cluster-go-kubernetes-client",
    "body": "func main() {\n\tvar kubeconfig *string\n\tvar namespace *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tnamespace = flag.String(\"namespace\", \"\", \"namespace to execute commands against\")\n\tflag.Parse()\n\t// use the current context in kubeconfig\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// create the clientset\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// write to file if namespace is given as flag\n\tif *namespace != \"\" {\n\t\tdat := []byte(*namespace)\n\t\terr := os.WriteFile(config.ServerName, dat, 0644)\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t}\n\t// read from file if namespace is not given as flag, otherwise use default\n\tif *namespace == \"\" {\n\t\t_, doesNotExist := os.Stat(config.ServerName)\n\t\tif doesNotExist == nil {\n\t\t\tdat, err := os.ReadFile(config.ServerName)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err.Error())\n\t\t\t}\n\t\t\t*namespace = string(dat)\n\t\t}\n\t\tif doesNotExist != nil {\n\t\t\t*namespace = \"default\"\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76644869/htmx-form-gin-unable-to-properly-read-request-body",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\nvar page = `<html>\n  <head>\n    <script\n      src=\"https://unpkg.com/htmx.org@1.9.2\"\n      integrity=\"sha384-L6OqL9pRWyyFU3+/bjdSri+iIphTN/bvYyM37tICVyOJkWZLpP2vGn6VUEXgzg6h\"\n      crossorigin=\"anonymous\"\n    ></script>\n\t<script src=\"https://unpkg.com/htmx.org/dist/ext/json-enc.js\" crossorigin=\"anonymous\"></script>\n  </head>\n  <body>\n    <form\n      hx-post=\"/addToDo\"\n      hx-ext=\"json-enc\"\n      hx-trigger=\"submit\"\n      hx-target=\"#todos\"\n      hx-swap=\"outerHTML\"\n    >\n      <input type=\"text\" placeholder=\"todo\" name=\"todo\" />\n      <input type=\"submit\" />\n    </form>\n    <ol id=\"todos\"></ol>\n  </body>\n</html>\n`\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\t_, err := c.Writer.WriteString(page)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t})\n\tr.POST(\"/addToDo\", func(c *gin.Context) {\n\t\tvar todo struct {\n\t\t\tTodo string `json:\"todo\"`\n\t\t}\n\t\tif err := c.ShouldBindJSON(&todo); err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\t// Do not do this in production code because it's not safe against code injection.\n\t\t// Use the html/template package to generate the HTML fragment instead.\n\t\tif _, err := fmt.Fprintf(c.Writer, `<ol id=\"todos\"><li>%s</li></ol>`, todo.Todo); err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t})\n\t_ = r.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76246997/how-to-create-two-lined-progress-bar-with-mpb",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"math/rand\"\n\t\"time\"\n\t\"github.com/vbauerster/mpb/v8\"\n\t\"github.com/vbauerster/mpb/v8/decor\"\n)\nfunc main() {\n\tp := mpb.New()\n\tvar piece, piece2 int64\n\tvar way, way2 int64\n\tfile := func(_ decor.Statistics) string {\n\t\treturn \"file.extension \"\n\t}\n\tfile2 := func(_ decor.Statistics) string {\n\t\treturn \"file2.extension \"\n\t}\n\tpart := func(s decor.Statistics) string {\n\t\ts.Current = piece\n\t\ts.Total = 5\n\t\treturn fmt.Sprintf(\" Part %d/%d\", s.Current, s.Total)\n\t}\n\tpart2 := func(s decor.Statistics) string {\n\t\ts.Current = piece2\n\t\ts.Total = 10\n\t\treturn fmt.Sprintf(\" Part %d/%d\", s.Current, s.Total)\n\t}\n\tpass := func(s decor.Statistics) string {\n\t\ts.Current = way\n\t\ts.Total = 2\n\t\treturn fmt.Sprintf(\" Pass %d/%d\", s.Current, s.Total)\n\t}\n\tpass2 := func(s decor.Statistics) string {\n\t\ts.Current = way2\n\t\ts.Total = 4\n\t\treturn fmt.Sprintf(\" Pass %d/%d\", s.Current, s.Total)\n\t}\n\tvar total = 100\n\tbar := p.New(int64(total),\n\t\tmpb.NopStyle(), // make main bar style nop, so there are just decorators\n\t\tmpb.BarExtender(extended(mpb.BarStyle().Build()), false), // extend wtih normal bar on the next line\n\t\tmpb.PrependDecorators(\n\t\t\tdecor.Any(file),\n\t\t\tdecor.Name(\"Percentage: \"),\n\t\t\tdecor.NewPercentage(\"%d\"),\n\t\t\tdecor.Any(part),\n\t\t\tdecor.Any(pass),\n\t\t),\n\t)\n\tbar2 := p.New(int64(total+100),\n\t\tmpb.NopStyle(),\n\t\tmpb.BarExtender(extended(mpb.BarStyle().Build()), false),\n\t\tmpb.PrependDecorators(\n\t\t\tdecor.Any(file2),\n\t\t\tdecor.Name(\"Percentage: \"),\n\t\t\tdecor.NewPercentage(\"%d\"),\n\t\t\tdecor.Any(part2),\n\t\t\tdecor.Any(pass2),\n\t\t),\n\t)\n\t// simulating some work\n\tmax := 100 * time.Millisecond\n\tfor i := 0; i < total+100; i++ {\n\t\tswitch {\n\t\tcase i == 20 || i == 40 || i == 60 ||\n\t\t\ti == 80 || i == 100 || i == 120 ||\n\t\t\ti == 140 || i == 160 || i == 180:\n\t\t\tpiece2++\n\t\t\tif i == 100 {\n\t\t\t\tway2++\n\t\t\t\tpiece = 5\n\t\t\t\tway = 2\n\t\t\t} else if i < 100 {\n\t\t\t\tpiece++\n\t\t\t}\n\t\tcase i == 50 || i == 150:\n\t\t\tif i < 100 {\n\t\t\t\tway++\n\t\t\t}\n\t\t\tway2++\n\t\t}\n\t\ttime.Sleep(time.Duration(rand.Intn(10)+1) * max / 10)\n\t\tif i < 100 {\n\t\t\tbar.Increment()\n\t\t}\n\t\tbar2.Increment()\n\t}\n\tway2 = 4\n\tpiece2 = 10\n\t// wait for our bar to complete and flush\n\tp.Wait()\n}\nfunc extended(base mpb.BarFiller) mpb.BarFiller {\n\treturn mpb.BarFillerFunc(func(w io.Writer, st decor.Statistics) error {\n\t\terr := base.Fill(w, st)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = io.WriteString(w, \"\\n\")\n\t\treturn err\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76166288/golang-multiple-commands-in-the-same-ssh-session",
    "body": "for _, cmd := range []string{\"ls -al\", `bc <<<\"3/2.0\"`} {\n\t\tsession, err := client.NewSession()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tvar stdout, stderr bytes.Buffer\n\t\t// Set up input and output streams\n\t\t//sshIn, _ := session.StdinPipe()\n\t\tsshOut, _ := session.StdoutPipe()\n\t\tsshErr, _ := session.StderrPipe()\n\t\tgo io.Copy(&stdout, sshOut)\n        go io.Copy(&stderr, sshErr)\n\t\t// Start the command\n\t\tif err := session.Start(cmd); err != nil {\n\t\t\tlog.Fatalf(\"Failed to start SSH session: %v\", err)\n\t\t}\n\t\tif err := session.Wait(); err != nil {\n\t\t\tlog.Fatal(fmt.Errorf(\"error waiting: %w\", err))\n\t\t}\n\t\tsession.Close()\n\t\tfmt.Printf(\"Command: \\t%s\\nStdout: \\t%s\\nStderr:%s\\n\", cmd, stdout.String(), stderr.String())\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76007977/custom-marshaler-for-json-that-can-be-string-or-a-mapstringstring-mapstring",
    "body": "type User struct {\n\tId       string `json:\"id\"`\n\tName     string `json:\"name\"`\n\tIsActive bool   `json:\"isActive\"`\n}\nfunc (u User) MarshalJSON() ([]byte, error) {\n\tif u == (User{Name: u.Name}) { // check if u contains only name\n\t\treturn json.Marshal(u.Name)\n\t}\n\ttype U User\n\treturn json.Marshal(U(u))\n}\nfunc (u *User) UnmarshalJSON(data []byte) error {\n\tswitch data[0] {\n\tcase '\"': // string?\n\t\treturn json.Unmarshal(data, &u.Name)\n\tcase '{': // object?\n\t\ttype U User\n\t\treturn json.Unmarshal(data, (*U)(u))\n\t}\n\treturn fmt.Errorf(\"unsupported JSON: %s\", string(data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75232599/gosseract-not-run",
    "body": "FROM golang:1.14.9\nRUN cat /etc/os-release\n# Output: Debian GNU/Linux 10 (buster)\nRUN apt-get -qy update\nRUN apt-get install -qy libleptonica-dev libtesseract-dev\nRUN apt-get install -qy libtool m4 automake cmake pkg-config\nRUN apt-get install -qy libicu-dev libpango1.0-dev libcairo-dev\nRUN cd /opt && git clone https://github.com/tesseract-ocr/tesseract\nWORKDIR /opt/tesseract\nRUN git reset --hard 4.1.1\nRUN ./autogen.sh &&\\\n    ./configure --enable-debug LDFLAGS=\"-L/usr/local/lib\" CFLAGS=\"-I/usr/local/include\"\nRUN make -j 8\nRUN make install && ldconfig\nRUN tesseract --version\nENV TESSDATA_PREFIX=/usr/local/share/tessdata\nENV TESSDATA_REPO=https://github.com/tesseract-ocr/tessdata_best\nWORKDIR ${TESSDATA_PREFIX}\nRUN wget -q ${TESSDATA_REPO}/raw/4.1.0/eng.traineddata"
  },
  {
    "url": "https://stackoverflow.com/questions/74274942/finding-parsing-and-validating-email-addresses",
    "body": "const (\n\t\tquantity   = 10000\n\t\tuserLength = 10\n\t\tdomain     = \"gmail.com\"\n\t)\n\tvar (\n\t\tletterRunes = []rune(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\t\temails      = make([]string, 0, quantity)\n\t\tseeded      = rand.New(rand.NewSource(time.Now().UnixMilli()))\n\t)\n\tfor i := 0; i < quantity; i++ {\n\t\tuser := make([]rune, userLength)\n\t\tfor i := range user {\n\t\t\tuser[i] = letterRunes[seeded.Intn(len(letterRunes))]\n\t\t}\n\t\temails = append(emails, fmt.Sprintf(\"%s@%s\", string(user), domain))\n\t}\n\tb.Run(\"strings.Split\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tb.ResetTimer()\n\t\tvar domain, tld string\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tfor _, email := range emails {\n\t\t\t\tdomain, tld = stringsSplit(email)\n\t\t\t}\n\t\t}\n\t\t_, _ = domain, tld\n\t})\n\tb.Run(\"strings.SplitN\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tb.ResetTimer()\n\t\tvar domain, tld string\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tfor _, email := range emails {\n\t\t\t\tdomain, tld = stringsSplitN(email)\n\t\t\t}\n\t\t}\n\t\t_, _ = domain, tld\n\t})\n\tb.Run(\"strings.Index+strings.Split\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tb.ResetTimer()\n\t\tvar domain, tld string\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tfor _, email := range emails {\n\t\t\t\tdomain, tld = stringsIndexAndStringsSplit(email)\n\t\t\t}\n\t\t}\n\t\t_, _ = domain, tld\n\t})\n\tb.Run(\"regexp.Split\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tb.ResetTimer()\n\t\tvar domain, tld string\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tfor _, email := range emails {\n\t\t\t\tdomain, tld = regexpSplit(email)\n\t\t\t}\n\t\t}\n\t\t_, _ = domain, tld\n\t})\n\tb.Run(\"strings.Cut\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tb.ResetTimer()\n\t\tvar domain, tld string\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tfor _, email := range emails {\n\t\t\t\tdomain, tld = stringsCut(email)\n\t\t\t}\n\t\t}\n\t\t_, _ = domain, tld\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/74274942/finding-parsing-and-validating-email-addresses",
    "body": "cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nBenchmark\nBenchmark/strings.Split\nBenchmark/strings.Split-12         \t        752\t   1563851 ns/op\t  640002 B/op\t   20000 allocs/op\nBenchmark/strings.SplitN\nBenchmark/strings.SplitN-12        \t        805\t   1463329 ns/op\t  640003 B/op\t   20000 allocs/op\nBenchmark/strings.Index+strings.Split\nBenchmark/strings.Index+strings.Split-12   1416\t    858783 ns/op\t  320000 B/op\t   10000 allocs/op\nBenchmark/regexp.Split\nBenchmark/regexp.Split-12                    85\t  14605240 ns/op\t11088513 B/op\t  160024 allocs/op\nBenchmark/strings.Cut\nBenchmark/strings.Cut-12                   6597\t    180579 ns/op\t       0 B/op\t       0 allocs/op\nPASS"
  },
  {
    "url": "https://stackoverflow.com/questions/73985794/for-range-loop-variable-passing-by-reference-to-go-routine-causes-memory-leak",
    "body": "func printAllocInfo(message string) {\n\tvar memStats runtime.MemStats\n\truntime.ReadMemStats(&memStats)\n\tfmt.Println(message,\n\t\t\"Heap Alloc:\", memStats.HeapAlloc,\n\t\t\"Heap objects:\", memStats.HeapObjects)\n}\nfunc main() {\n\ttMap = make(map[string]*TestStruct)\n\twg := &sync.WaitGroup{}\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(objectCount)\n\t\tprintAllocInfo(\"Before func2:\")\n\t\tfunc2(wg)\n\t\twg.Wait()\n\t\truntime.GC()\n\t\tprintAllocInfo(\"After func2: \")\n\t}\n\tprintln(\"----------------------------\")\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(objectCount)\n\t\tprintAllocInfo(\"Before func1:\")\n\t\tfunc1(wg)\n\t\twg.Wait()\n\t\truntime.GC()\n\t\tprintAllocInfo(\"After func1: \")\n\t}\n\tprintln(\"----------------------------\")\n\truntime.GC()\n\tprintAllocInfo(\"after GC: \")\n\tprintln(\"----------------------------\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73985794/for-range-loop-variable-passing-by-reference-to-go-routine-causes-memory-leak",
    "body": "Before func1: Heap Alloc: 260880 Heap objects: 1224\nAfter func1:  Heap Alloc: 1317904 Heap objects: 2749\nBefore func1: Heap Alloc: 1319288 Heap objects: 2757\nAfter func1:  Heap Alloc: 1576656 Heap objects: 3425\nBefore func1: Heap Alloc: 1578040 Heap objects: 3433\nAfter func1:  Heap Alloc: 1858408 Heap objects: 4197\nBefore func1: Heap Alloc: 1859792 Heap objects: 4205\nAfter func1:  Heap Alloc: 2210760 Heap objects: 4909\nBefore func1: Heap Alloc: 2212144 Heap objects: 4917\nAfter func1:  Heap Alloc: 2213200 Heap objects: 4799\nBefore func1: Heap Alloc: 2214584 Heap objects: 4807\nAfter func1:  Heap Alloc: 2247480 Heap objects: 5045\nBefore func1: Heap Alloc: 2248864 Heap objects: 5053\nAfter func1:  Heap Alloc: 2298840 Heap objects: 5158\nBefore func1: Heap Alloc: 2300224 Heap objects: 5166\nAfter func1:  Heap Alloc: 2297144 Heap objects: 5047\nBefore func1: Heap Alloc: 2298528 Heap objects: 5055\nAfter func1:  Heap Alloc: 2316712 Heap objects: 5154\nBefore func1: Heap Alloc: 2318096 Heap objects: 5162\nAfter func1:  Heap Alloc: 3083256 Heap objects: 7208\n----------------------------\nBefore func2: Heap Alloc: 3084640 Heap objects: 7216\nAfter func2:  Heap Alloc: 3075816 Heap objects: 7057\nBefore func2: Heap Alloc: 3077200 Heap objects: 7065\nAfter func2:  Heap Alloc: 3102896 Heap objects: 7270\nBefore func2: Heap Alloc: 3104280 Heap objects: 7278\nAfter func2:  Heap Alloc: 3127728 Heap objects: 7461\nBefore func2: Heap Alloc: 3129112 Heap objects: 7469\nAfter func2:  Heap Alloc: 3128352 Heap objects: 7401\nBefore func2: Heap Alloc: 3129736 Heap objects: 7409\nAfter func2:  Heap Alloc: 3121152 Heap objects: 7263\nBefore func2: Heap Alloc: 3122536 Heap objects: 7271\nAfter func2:  Heap Alloc: 3167872 Heap objects: 7703\nBefore func2: Heap Alloc: 3169256 Heap objects: 7711\nAfter func2:  Heap Alloc: 3163120 Heap objects: 7595\nBefore func2: Heap Alloc: 3164504 Heap objects: 7603\nAfter func2:  Heap Alloc: 3157376 Heap objects: 7470\nBefore func2: Heap Alloc: 3158760 Heap objects: 7478\nAfter func2:  Heap Alloc: 3160496 Heap objects: 7450\nBefore func2: Heap Alloc: 3161880 Heap objects: 7458\nAfter func2:  Heap Alloc: 3221024 Heap objects: 7754\n----------------------------\nafter GC:  Heap Alloc: 3222200 Heap objects: 7750\n----------------------------"
  },
  {
    "url": "https://stackoverflow.com/questions/73985794/for-range-loop-variable-passing-by-reference-to-go-routine-causes-memory-leak",
    "body": "Before func2: Heap Alloc: 261456 Heap objects: 1227\nAfter func2:  Heap Alloc: 1330584 Heap objects: 2529\nBefore func2: Heap Alloc: 1331968 Heap objects: 2537\nAfter func2:  Heap Alloc: 1739280 Heap objects: 3755\nBefore func2: Heap Alloc: 1740664 Heap objects: 3763\nAfter func2:  Heap Alloc: 2251824 Heap objects: 5017\nBefore func2: Heap Alloc: 2253208 Heap objects: 5025\nAfter func2:  Heap Alloc: 2244400 Heap objects: 4802\nBefore func2: Heap Alloc: 2245784 Heap objects: 4810\nAfter func2:  Heap Alloc: 2287816 Heap objects: 5135\nBefore func2: Heap Alloc: 2289200 Heap objects: 5143\nAfter func2:  Heap Alloc: 2726136 Heap objects: 6375\nBefore func2: Heap Alloc: 2727520 Heap objects: 6383\nAfter func2:  Heap Alloc: 2834520 Heap objects: 6276\nBefore func2: Heap Alloc: 2835904 Heap objects: 6284\nAfter func2:  Heap Alloc: 2855496 Heap objects: 6393\nBefore func2: Heap Alloc: 2856880 Heap objects: 6401\nAfter func2:  Heap Alloc: 2873064 Heap objects: 6478\nBefore func2: Heap Alloc: 2874448 Heap objects: 6486\nAfter func2:  Heap Alloc: 2923560 Heap objects: 6913\n----------------------------\nBefore func1: Heap Alloc: 2924944 Heap objects: 6921\nAfter func1:  Heap Alloc: 2933416 Heap objects: 6934\nBefore func1: Heap Alloc: 2934800 Heap objects: 6942\nAfter func1:  Heap Alloc: 2916520 Heap objects: 6676\nBefore func1: Heap Alloc: 2917904 Heap objects: 6684\nAfter func1:  Heap Alloc: 2941816 Heap objects: 6864\nBefore func1: Heap Alloc: 2943200 Heap objects: 6872\nAfter func1:  Heap Alloc: 2968184 Heap objects: 7078\nBefore func1: Heap Alloc: 2969568 Heap objects: 7086\nAfter func1:  Heap Alloc: 2955056 Heap objects: 6885\nBefore func1: Heap Alloc: 2956440 Heap objects: 6893\nAfter func1:  Heap Alloc: 2961056 Heap objects: 6893\nBefore func1: Heap Alloc: 2962440 Heap objects: 6901\nAfter func1:  Heap Alloc: 2967680 Heap objects: 6903\nBefore func1: Heap Alloc: 2969064 Heap objects: 6911\nAfter func1:  Heap Alloc: 3005856 Heap objects: 7266\nBefore func1: Heap Alloc: 3007240 Heap objects: 7274\nAfter func1:  Heap Alloc: 3033696 Heap objects: 7514\nBefore func1: Heap Alloc: 3035080 Heap objects: 7522\nAfter func1:  Heap Alloc: 3028432 Heap objects: 7423\n----------------------------\nafter GC:  Heap Alloc: 3029608 Heap objects: 7419\n----------------------------"
  },
  {
    "url": "https://stackoverflow.com/questions/73651555/how-to-map-a-typescript-array-of-multiple-values-to-go-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n)\nvar json_data = []byte(`{\n  \"data\": [\n    [\n      35241,\n      7753,\n      7750,\n      \"0xbb2b8038a1640196fbe3e38816f3e67cba72d940\",\n      \"spot\",\n      true\n    ],\n    [60259, 7746, null, \"#7746/USD\", \"internal\", true, [\"requote\", 145]]\n  ]\n}`)\nfunc main() {\n\tvar doc Document\n\tif err := json.Unmarshal(json_data, &doc); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, r := range doc.Data {\n\t\tfmt.Printf(\"%+v\\n\", r)\n\t\tif r.Optional != nil {\n\t\t\tfmt.Printf(\"  with optional: %+v\\n\", *r.Optional)\n\t\t}\n\t}\n}\ntype Document struct {\n\tData []Row `json:\"data\"`\n}\ntype Row struct {\n\tSomeInt    int\n\tSomeString string\n\t// Simplified\n\tOptional *MoreData\n}\ntype MoreData struct {\n\tSomeString string\n\tSomeInt    int\n}\nfunc (row *Row) UnmarshalJSON(data []byte) error {\n\tvar elements []json.RawMessage\n\tif err := json.Unmarshal(data, &elements); err != nil {\n\t\treturn err\n\t}\n\tif len(elements) < 6 {\n\t\treturn errors.New(\"too few elements\")\n\t}\n\tif err := json.Unmarshal(elements[0], &row.SomeInt); err != nil {\n\t\treturn err\n\t}\n\tif err := json.Unmarshal(elements[3], &row.SomeString); err != nil {\n\t\treturn err\n\t}\n\tif len(elements) == 7 {\n\t\tvar more MoreData\n\t\tif err := json.Unmarshal(elements[6], &more); err != nil {\n\t\t\treturn err\n\t\t}\n\t\trow.Optional = &more\n\t}\n\treturn nil\n}\nfunc (more *MoreData) UnmarshalJSON(data []byte) error {\n\tvar elements []json.RawMessage\n\tif err := json.Unmarshal(data, &elements); err != nil {\n\t\treturn err\n\t}\n\tif len(elements) < 2 {\n\t\treturn errors.New(\"too few elements\")\n\t}\n\tif err := json.Unmarshal(elements[0], &more.SomeString); err != nil {\n\t\treturn err\n\t}\n\tif err := json.Unmarshal(elements[1], &more.SomeInt); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73170034/how-to-reorder-a-csv-file-to-group-by-contents-of-a-particular-column",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"sort\"\n\t\"strings\"\n)\ntype Row struct {\n\tName, Category, Status string\n}\nfunc main() {\n\tin := `test,test-cat,skipped\ntest,test-cat,failed\ntest,test-cat,passed\ntest,test-cat,skipped\ntest,test-cat,passed\ntest,test-cat,failed\n`\n\tr := csv.NewReader(strings.NewReader(in))\n\trows := make([]Row, 0)\n\tfor {\n\t\trecord, err := r.Read()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\trow := Row{record[0], record[1], record[2]}\n\t\trows = append(rows, row)\n\t}\n\tsort.Slice(rows, func(i, j int) bool { return rows[i].Status < rows[j].Status })\n\tw := csv.NewWriter(os.Stdout)\n\tfor _, row := range rows {\n\t\tw.Write([]string{row.Name, row.Category, row.Status})\n\t}\n\tw.Flush()\n\tif err := w.Error(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73170034/how-to-reorder-a-csv-file-to-group-by-contents-of-a-particular-column",
    "body": "    // ...\n\trecordGroups := make(map[string][][]string)\n\tfor {\n\t\trecords, err := r.Read()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tgroupName := records[2]\n\t\trecordGroups[groupName] = append(recordGroups[groupName], records)\n\t}\n\tw := csv.NewWriter(os.Stdout)\n    // Control the order with this slice of group names\n\tgroupNames := []string{\"failed\", \"passed\", \"skipped\", \"Bogus group!\"}\n\tfor _, groupName := range groupNames {\n\t\trecordGroup, ok := recordGroups[groupName]\n\t\tif !ok {\n\t\t\tlog.Printf(\"did not find expected group %q\\n\", groupName)\n\t\t\tcontinue\n\t\t}\n\t\tfor _, record := range recordGroup {\n\t\t\tif err := w.Write(record); err != nil {\n\t\t\t\tlog.Fatalln(\"error writing record to csv:\", err)\n\t\t\t}\n\t\t}\n\t}\n    // ..."
  },
  {
    "url": "https://stackoverflow.com/questions/72884848/different-benchmark-results-for-functions-with-same-early-return-statement",
    "body": "(pprof) list BenchmarkRotateRight1\nTotal: 260ms\nROUTINE ======================== main_test.BenchmarkRotateRight1 in (edited)\n     260ms      260ms (flat, cum)   100% of Total\n         .          .     43:func BenchmarkRotateRight1(b *testing.B) {\n         .          .     44:\tnums := make([]int, 5_000)\n         .          .     45:\n         .          .     46:\tb.ResetTimer()\n         .          .     47:\tb.ReportAllocs()\n     260ms      260ms     48:\tfor i := 0; i < b.N; i++ {\n         .          .     49:\t\trotateRight1(nums, 0)\n         .          .     50:\t}\n         .          .     51:}"
  },
  {
    "url": "https://stackoverflow.com/questions/72884848/different-benchmark-results-for-functions-with-same-early-return-statement",
    "body": "(pprof) list BenchmarkRotateRight2\nTotal: 1.89s\nROUTINE ======================== main_test.BenchmarkRotateRight2 in (edited)\n     180ms      1.89s (flat, cum)   100% of Total\n         .          .     53:func BenchmarkRotateRight2(b *testing.B) {\n         .          .     54:\tnums := make([]int, 5_000)\n         .          .     55:\n         .          .     56:\tb.ResetTimer()\n         .          .     57:\tb.ReportAllocs()\n     130ms      130ms     58:\tfor i := 0; i < b.N; i++ {\n      50ms      1.76s     59:\t\trotateRight2(nums, 0)\n         .          .     60:\t}\n         .          .     61:}"
  },
  {
    "url": "https://stackoverflow.com/questions/72793344/recursively-generate-golang-cobra-help-text",
    "body": "var dumpAllHelp = \"dump-all-help\"\nvar recHelpCmd = &cobra.Command{\n\tUse:   dumpAllHelp,\n\tShort: \"dump all help texts\",\n\tLong:  \"dump all help texts\",\n\tRun: func(_ *cobra.Command, _ []string) {\n\t\tdumpHelp(rootCmd, true)\n\t},\n}\nfunc dumpHelp(c *cobra.Command, root bool) {\n\tif !root {\n\t\tfmt.Println(\"\")\n\t\tfmt.Println(\"========================================================\")\n\t\tfmt.Println(\"\")\n\t}\n\tc.Help()\n\tfor _, child := range c.Commands() {\n\t\tif child.Hidden || child.Name() == \"completion\" || child.Name() == \"help\" || child.Name() == dumpAllHelp {\n\t\t\tcontinue\n\t\t}\n\t\tdumpHelp(child, false)\n\t}\n}\nfunc init() {\n\trootCmd.AddCommand(recHelpCmd)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72741501/monitoring-an-existing-file-with-fsnotify",
    "body": "func main() {\n    watcher, err := fsnotify.NewWatcher()\n    if err != nil {\n            panic(err)\n    }\n    err = watcher.Add(\"file.txt\")\n    if err != nil {\n            panic(err)\n    }\n    for {\n            select {\n            case ev := <-watcher.Events:\n                    log.Println(\"event:\", ev)\n                    if ev.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\t\t\t\tcontents, err := ioutil.ReadFile(ev.Name)\n\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\t// handle error\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlog.Println(\"modified file:\", string(contents))\n                    }\n            case err := <-watcher.Errors:\n                    log.Println(\"error:\", err)\n            }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72391766/can-we-send-request-form-server-to-client-and-get-response-through-quic-http3",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math/big\"\n\t\"github.com/lucas-clemente/quic-go\"\n)\nconst addr = \"localhost:4242\"\nconst message = \"foobar\"\n// We start a server echoing data on the first stream the client opens,\n// then connect with a client, send the message, and wait for its receipt.\nfunc main() {\n\tgo func() {\n\t\terr := echoServer()\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}()\n\terr := clientMain()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n// Start a server that echos all data on the first stream opened by the client\nfunc echoServer() error {\n\tlistener, err := quic.ListenAddr(addr, generateTLSConfig(), nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tconn, err := listener.Accept(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tstream, err := conn.AcceptStream(context.Background())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Echo through the loggingWriter\n\t_, err = io.Copy(loggingWriter{stream}, stream)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\t//------------------------------\n\tfmt.Printf(\"Server: open stream\\n\")\n\tstream1, err := conn.OpenStream()\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Printf(\"2-Server: Sending '%s'\\n\", message)\n\tvar n int\n\tn, err = stream1.Write([]byte(message))\n\tfmt.Printf(\"Server: write %v %v\\n\", n, err)\n\tstream1.Close()\n\t//------------------------------\n\treturn err\n}\nfunc clientMain() error {\n\ttlsConf := &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t\tNextProtos:         []string{\"quic-echo-example\"},\n\t}\n\tconn, err := quic.DialAddr(addr, tlsConf, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tstream, err := conn.OpenStreamSync(context.Background())\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Printf(\"Client: Sending '%s'\\n\", message)\n\t_, err = stream.Write([]byte(message))\n\tif err != nil {\n\t\treturn err\n\t}\n\tbuf := make([]byte, len(message))\n\t_, err = io.ReadFull(stream, buf)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Printf(\"Client: Got '%s'\\n\", buf)\n\terr = stream.Close()\n\tif err != nil {\n\t\treturn err\n\t}\n\t//-------------------------------\n\tfor {\n\t\tfmt.Printf(\"Client: accept stream\\n\")\n\t\tstream1, err := conn.AcceptStream(context.Background())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"Client: got stream %v\\n\", err)\n\t\tbuf1 := make([]byte, len(message))\n\t\t_, err = io.ReadFull(stream1, buf1)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"2-Client: Got '%s'\\n\", buf1)\n\t\terr = stream1.Close()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbreak\n\t}\n\t//-------------------------------\n\treturn nil\n}\n// A wrapper for io.Writer that also logs the message.\ntype loggingWriter struct{ io.Writer }\nfunc (w loggingWriter) Write(b []byte) (int, error) {\n\tfmt.Printf(\"Server: Got '%s'\\n\", string(b))\n\treturn w.Writer.Write(b)\n}\n// Setup a bare-bones TLS config for the server\nfunc generateTLSConfig() *tls.Config {\n\tkey, err := rsa.GenerateKey(rand.Reader, 1024)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttemplate := x509.Certificate{SerialNumber: big.NewInt(1)}\n\tcertDER, err := x509.CreateCertificate(rand.Reader, &template, &template, &key.PublicKey, key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tkeyPEM := pem.EncodeToMemory(&pem.Block{Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(key)})\n\tcertPEM := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: certDER})\n\ttlsCert, err := tls.X509KeyPair(certPEM, keyPEM)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn &tls.Config{\n\t\tCertificates: []tls.Certificate{tlsCert},\n\t\tNextProtos:   []string{\"quic-echo-example\"},\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71971679/button-action-for-a-specific-list-item-in-fyne",
    "body": "func someListCreationMethod(data []string) *widget.List {\n    return widget.NewList(\n        func() int {\n            return len(data)\n        },\n        func() fyne.CanvasObject {\n            return container.NewPadded(\n                widget.NewLabel(\"Will be replaced\"),\n                widget.NewButton(\"Do Something\", nil),\n            )\n        },\n        func(id widget.ListItemID, item fyne.CanvasObject) {\n            item.(*fyne.Container).Objects[0].(*widget.Label).SetText(data[id])\n            // new part\n            item.(*fyne.Container).Objects[1].(*widget.Button).OnTapped = func() {\n                fmt.Println(\"I am button \" + data[id])\n            }\n        },\n    )\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71892636/how-to-set-up-web-server-to-perform-post-request-in-go",
    "body": "// basic web server to receive a request and\n// decode the body into a user struct\nfunc server() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost  {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\tuser := &Person{}\n\t\terr := json.NewDecoder(r.Body).Decode(user)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"got user:\", user)\n\t\tw.WriteHeader(http.StatusCreated)\n\t})\n\tif err := http.ListenAndServe(\":8080\", nil); err != http.ErrServerClosed {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71878585/is-there-a-way-in-golang-to-set-flags-when-trying-to-execute-go-test-v",
    "body": "=== RUN   TestFlagLog\n    testflag_test.go:11: Value = \"bar\"\n    testflag_test.go:12: Args = [\"some\" \"thing\"]\n--- PASS: TestFlagLog (0.00s)\nPASS\nok          testflag        0.002s\n=== RUN   TestFlagLog\n    testflag_test.go:11: Value = \"bar\"\n    testflag_test.go:12: Args = [\"some\" \"thing\"]\n--- PASS: TestFlagLog (0.00s)\nPASS\nok          testflag/a      0.001s\n=== RUN   TestFlagLog\n    testflag_test.go:11: Value = \"bar\"\n    testflag_test.go:12: Args = [\"some\" \"thing\"]\n--- PASS: TestFlagLog (0.00s)\nPASS\nok          testflag/b      0.002s"
  },
  {
    "url": "https://stackoverflow.com/questions/71716661/how-can-i-create-a-index-in-elasticsearch-with-go-elasticsearch-library",
    "body": "package main\nimport (\n\t\"log\"\n\t\"strings\"\n\t\"github.com/elastic/go-elasticsearch/v8\"\n)\nfunc main() {\n\tclient, err := elasticsearch.NewDefaultClient()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tindex := \"products\"\n\tmapping := `\n\t{\n\t  \"settings\": {\n\t    \"number_of_shards\": 1\n\t  },\n\t  \"mappings\": {\n\t    \"properties\": {\n\t      \"field1\": {\n\t        \"type\": \"text\"\n\t      }\n\t    }\n\t  }\n\t}`\n\tres, err := client.Indices.Create(\n\t\tindex,\n\t\tclient.Indices.Create.WithBody(strings.NewReader(mapping)),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71716661/how-can-i-create-a-index-in-elasticsearch-with-go-elasticsearch-library",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"os\"\n\telasticsearch \"github.com/elastic/go-elasticsearch/v8\"\n)\nvar (\n\tIndexNameEmptyStringError = errors.New(\"index name cannot be empty string\")\n\tIndexAlreadyExistsError   = errors.New(\"elasticsearch index already exists\")\n)\nfunc main() {\n\tindex := os.Getenv(\"ES_INDEX\")\n\tif index == \"\" {\n\t\tlog.Fatal(IndexNameEmptyStringError)\n\t}\n\telastic, err := elasticsearch.NewClient(elasticsearch.Config{\n\t\tAddresses: []string{\"http://localhost:9200\"},\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tresponse, err := elastic.Indices.Exists([]string{index})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif response.StatusCode != 404 {\n\t\tlog.Fatal(IndexAlreadyExistsError)\n\t}\n\tresponse, err = elastic.Indices.Create(index)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif response.IsError() {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71656403/how-to-ignore-mock-package-when-building-go-project",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\ntype sample_mock struct {\n\tName string\n}\nfunc (s *sample_mock) DoSomething() {\n\tfmt.Println(\"Do Something implementation\", s.Name)\n}\nfunc TestCallDoSomething(t *testing.T) {\n\ts := sample_mock{\n\t\tName: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n\t}\n\tCallDoSomething(&s)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71442568/how-to-implement-tripledes-desede-ecb-pkcs5padding-encryption-with-32-bytes-key",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/des\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n)\n//ECB PKCS5Padding\nfunc PKCS5Padding(ciphertext []byte, blockSize int) []byte {\n\tpadding := blockSize - len(ciphertext)%blockSize\n\tpadtext := bytes.Repeat([]byte{byte(padding)}, padding)\n\treturn append(ciphertext, padtext...)\n}\n//ECB PKCS5Unpadding\nfunc PKCS5Unpadding(origData []byte) []byte {\n\tlength := len(origData)\n\tunpadding := int(origData[length-1])\n\treturn origData[:(length - unpadding)]\n}\n//Des encryption\nfunc encrypt(origData, key []byte) ([]byte, error) {\n\tif len(origData) < 1 || len(key) < 1 {\n\t\treturn nil, errors.New(\"wrong data or key\")\n\t}\n\tblock, err := des.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbs := block.BlockSize()\n\tif len(origData)%bs != 0 {\n\t\treturn nil, errors.New(\"wrong padding\")\n\t}\n\tout := make([]byte, len(origData))\n\tdst := out\n\tfor len(origData) > 0 {\n\t\tblock.Encrypt(dst, origData[:bs])\n\t\torigData = origData[bs:]\n\t\tdst = dst[bs:]\n\t}\n\treturn out, nil\n}\n//Des Decrypt\nfunc decrypt(crypted, key []byte) ([]byte, error) {\n\tif len(crypted) < 1 || len(key) < 1 {\n\t\treturn nil, errors.New(\"wrong data or key\")\n\t}\n\tblock, err := des.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tout := make([]byte, len(crypted))\n\tdst := out\n\tbs := block.BlockSize()\n\tif len(crypted)%bs != 0 {\n\t\treturn nil, errors.New(\"wrong crypted size\")\n\t}\n\tfor len(crypted) > 0 {\n\t\tblock.Decrypt(dst, crypted[:bs])\n\t\tcrypted = crypted[bs:]\n\t\tdst = dst[bs:]\n\t}\n\treturn out, nil\n}\n//[golang ECB 3DES Encrypt]\nfunc TripleEcbDesEncrypt(origData, key []byte) ([]byte, error) {\n\ttkey := make([]byte, 24, 24)\n\tcopy(tkey, key)\n\tk1 := tkey[:8]\n\tk2 := tkey[8:16]\n\tk3 := tkey[16:]\n\tblock, err := des.NewCipher(k1)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbs := block.BlockSize()\n\torigData = PKCS5Padding(origData, bs)\n\tbuf1, err := encrypt(origData, k1)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf2, err := decrypt(buf1, k2)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := encrypt(buf2, k3)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn out, nil\n}\n//[golang ECB 3DES Decrypt]\nfunc TripleEcbDesDecrypt(crypted, key []byte) ([]byte, error) {\n\ttkey := make([]byte, 24, 24)\n\tcopy(tkey, key)\n\tk1 := tkey[:8]\n\tk2 := tkey[8:16]\n\tk3 := tkey[16:]\n\tbuf1, err := decrypt(crypted, k3)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf2, err := encrypt(buf1, k2)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tout, err := decrypt(buf2, k1)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tout = PKCS5Unpadding(out)\n\treturn out, nil\n}\nfunc main() {\n\tkey2 := []byte(\"5e8487e65e8487e65e8487e6\")\n\torigtext2 := []byte(\"hello world123563332\")\n\terytext2, err := TripleEcbDesEncrypt(origtext2, key2)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%v\\n\", origtext2)\n\tdestext2, err2 := TripleEcbDesDecrypt(erytext2, key2)\n\tif err2 != nil {\n\t\tlog.Fatal(err2)\n\t}\n\tfmt.Println(string(destext2))\n\tfmt.Println(len(origtext2), len(string(destext2)))\n\tfmt.Println(string(origtext2) == string(destext2))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71315079/skipping-rows-when-using-gota-readcsv",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/go-gota/gota/dataframe\"\n)\nfunc main() {\n\tf, err := os.Open(\"sample.csv\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer f.Close()\n\tcsv := csv.NewReader(f)\n\terr = SkipRows(csv, 3) // this will skip rows in csv FIRST METHOD\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\trecords, err := csv.ReadAll() // get all records\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// records = records[3:] // SECOND METHOD\n\tdf := dataframe.LoadRecords(records)\n\tfmt.Println(df.Records())\n\tfmt.Println(df.Names())\n}\nfunc SkipRows(csv *csv.Reader, skip int) (err error) {\n\tfor i := 0; i < skip; i++ {\n\t\t_, err = csv.Read()\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70694362/how-to-use-google-analytics-data-api-v1-with-golang",
    "body": "dimensionFilter := &data.Filter{\n\t\tFieldName: \"eventName\",\n\t\tOneFilter: &data.Filter_StringFilter_{\n\t\t\tStringFilter: &data.Filter_StringFilter{\n\t\t\t\tMatchType:     data.Filter_StringFilter_EXACT,\n\t\t\t\tValue:         \"banner click\",\n\t\t\t\tCaseSensitive: false,\n\t\t\t},\n\t\t},\n\t}\n\t// Make a request to the GA4 Data API\n\trequest := &data.RunReportRequest{\n\t\tProperty: \"properties/\" + propertyID,\n\t\tDimensions: []*data.Dimension{\n\t\t\t{Name: \"eventName\"},\n\t\t},\n\t\tMetrics: []*data.Metric{\n\t\t\t{Name: \"eventCount\"},\n\t\t\t{Name: \"totalUsers\"},\n\t\t},\n\t\tDateRanges: []*data.DateRange{\n\t\t\t{\n\t\t\t\tStartDate: \"2023-10-30\",\n\t\t\t\tEndDate: \"2023-11-26\",\n\t\t\t},\n\t\t},\n\t\tDimensionFilter: &data.FilterExpression{\n\t\t\tExpr: &data.FilterExpression_Filter{\n\t\t\t\tFilter: dimensionFilter,\n\t\t\t},\n\t\t},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/70694362/how-to-use-google-analytics-data-api-v1-with-golang",
    "body": "// Create two filter expressions for each event name\n\teventNameFilter1 := &data.Filter{\n\t\tFieldName: \"eventName\",\n\t\tOneFilter: &data.Filter_StringFilter_{\n\t\t\tStringFilter: &data.Filter_StringFilter{\n\t\t\t\tMatchType:     data.Filter_StringFilter_EXACT,\n\t\t\t\tValue:         \"banner_click\",\n\t\t\t\tCaseSensitive: false,\n\t\t\t},\n\t\t},\n\t}\n\teventNameFilter2 := &data.Filter{\n\t\tFieldName: \"eventName\",\n\t\tOneFilter: &data.Filter_StringFilter_{\n\t\t\tStringFilter: &data.Filter_StringFilter{\n\t\t\t\tMatchType:     data.Filter_StringFilter_EXACT,\n\t\t\t\tValue:         \"header_click\",\n\t\t\t\tCaseSensitive: false,\n\t\t\t},\n\t\t},\n\t}\n\t// Create an OR group to combine the two filter expressions\n\torGroup := &data.FilterExpression_OrGroup{\n\t\tOrGroup: &data.FilterExpressionList{\n\t\t\tExpressions: []*data.FilterExpression{\n\t\t\t\t{Expr: &data.FilterExpression_Filter{Filter: eventNameFilter1}},\n\t\t\t\t{Expr: &data.FilterExpression_Filter{Filter: eventNameFilter2}},\n\t\t\t},\n\t\t},\n\t}\n\t// Make a request to the GA4 Data API\n\trequest := &data.RunReportRequest{\n\t\tProperty: \"properties/\" + propertyID,\n\t\tDimensions: []*data.Dimension{\n\t\t\t{Name: \"eventName\"},\n\t\t},\n\t\tMetrics: []*data.Metric{\n\t\t\t{Name: \"eventCount\"},\n\t\t\t{Name: \"totalUsers\"},\n\t\t},\n\t\tDateRanges: []*data.DateRange{\n\t\t\t{\n\t\t\t\tStartDate: \"2023-10-30\",\n\t\t\t\tEndDate: \"2023-11-26\",\n\t\t\t},\n\t\t},\n\t\tDimensionFilter: &data.FilterExpression{\n\t\t\tExpr: orGroup,\n\t\t},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/70655602/send-custom-ethernet-packet-using-raw-socket",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n)\nfunc main() {\n\tifname := os.Args[1]\n\tiface, err := net.InterfaceByName(ifname)\n\tif err != nil {\n\t\tlog.Fatal(\"get link by name:\", err)\n\t}\n\tsrcMac := iface.HardwareAddr\n\tif len(srcMac) == 0 {\n\t\tsrcMac = []byte{0, 0, 0, 0, 0, 0}\n\t}\n\tdstMac := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05}\n\tfd, _ := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_RAW, int(htons(syscall.ETH_P_ALL)))\n\taddr := syscall.SockaddrLinklayer{\n\t\tIfindex: iface.Index,\n\t\tHalen:   6, // Ethernet address length is 6 bytes\n\t\tAddr: [8]uint8{\n\t\t\tdstMac[0],\n\t\t\tdstMac[1],\n\t\t\tdstMac[2],\n\t\t\tdstMac[3],\n\t\t\tdstMac[4],\n\t\t\tdstMac[5],\n\t\t},\n\t}\n\tethHeader := []byte{\n\t\tdstMac[0], dstMac[1], dstMac[2], dstMac[3], dstMac[4], dstMac[5],\n\t\tsrcMac[0], srcMac[1], srcMac[2], srcMac[3], srcMac[4], srcMac[5],\n\t\t0x12, 0x34, // your custom ethertype\n\t}\n\t// Your custom data\n\tp := append(ethHeader, []byte(\"Hello World\")...)\n\terr = syscall.Sendto(fd, p, 0, &addr)\n\tif err != nil {\n\t\tlog.Fatal(\"Sendto:\", err)\n\t}\n}\n// htons converts a short (uint16) from host-to-network byte order.\nfunc htons(i uint16) uint16 {\n\treturn (i<<8)&0xff00 | i>>8\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70580290/golang-opc-ua-client-implementation-with-certificate",
    "body": "endpoints, err := opcua.GetEndpoints(context.Background(), cfg.Endpoint)\nif err != nil {\n\treturn nil, fmt.Errorf(\"OPC GetEndpoints: %w\", err)\n}\npolicy := ua.SecurityPolicyURINone // Replace this with a constant of your security policy\nmode := ua.MessageSecurityModeNone // Replace this with a constant of your security mode\nep := opcua.SelectEndpoint(endpoints, policy, mode)\nc, err := generateCert() // This is where you generate the certificate\nif err != nil {\n\treturn nil, fmt.Errorf(\"generateCert: %w\", err)\n}\npk, ok := c.PrivateKey.(*rsa.PrivateKey) // This is where you set the private key\nif !ok {\n\treturn nil, fmt.Errorf(\"invalid private key\")\n}\ncert := c.Certificate[0]\nopts := []opcua.Option{\n\topcua.SecurityPolicy(policy),\n\topcua.SecurityMode(mode),\n\topcua.PrivateKey(pk),\n    opcua.Certificate(cert),  // Set the certificate for the OPC UA Client\n\topcua.AuthUsername(cfg.Username, cfg.Password), // Use this if you are using username and password\n\topcua.SecurityFromEndpoint(ep, ua.UserTokenTypeUserName),\n\topcua.SessionTimeout(30 * time.Minute),\n\topcua.AutoReconnect(true),\n\topcua.ReconnectInterval(time.Second * 10),\n\topcua.Lifetime(30 * time.Minute),\n\topcua.RequestTimeout(3 * time.Second),\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70580290/golang-opc-ua-client-implementation-with-certificate",
    "body": "func generateCert() (*tls.Certificate, error) {\n\tpriv, err := rsa.GenerateKey(rand.Reader, 2048)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to generate private key: %s\", err)\n\t}\n\tnotBefore := time.Now()\n\tnotAfter := notBefore.Add(365 * 24 * time.Hour) // 1 year\n\tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\n\tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to generate serial number: %s\", err)\n\t}\n\ttemplate := x509.Certificate{\n\t\tSerialNumber: serialNumber,\n\t\tSubject: pkix.Name{\n\t\t\tOrganization: []string{\"Test Client\"},\n\t\t},\n\t\tNotBefore: notBefore,\n\t\tNotAfter:  notAfter,\n\t\tKeyUsage:              x509.KeyUsageContentCommitment | x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageDataEncipherment | x509.KeyUsageCertSign,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},\n\t\tBasicConstraintsValid: true,\n\t}\n\thost := \"urn:testing:client\"\n\tif ip := net.ParseIP(host); ip != nil {\n\t\ttemplate.IPAddresses = append(template.IPAddresses, ip)\n\t} else {\n\t\ttemplate.DNSNames = append(template.DNSNames, host)\n\t}\n\tif uri, err := url.Parse(host); err == nil {\n\t\ttemplate.URIs = append(template.URIs, uri)\n\t}\n\tderBytes, err := x509.CreateCertificate(rand.Reader, &template, &template, publicKey(priv), priv)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create certificate: %s\", err)\n\t}\n\tcertBuf := bytes.NewBuffer(nil)\n\tif err := pem.Encode(certBuf, &pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes}); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode certificate: %s\", err)\n\t}\n\tkeyBuf := bytes.NewBuffer(nil)\n\tif err := pem.Encode(keyBuf, pemBlockForKey(priv)); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode key: %s\", err)\n\t}\n\tcert, err := tls.X509KeyPair(certBuf.Bytes(), keyBuf.Bytes())\n\treturn &cert, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70041893/how-to-diff-entire-struct-with-r3labs-diff",
    "body": "type DateDiffer struct {\n}\n// Whether this differ should be used to match a specific type\nfunc (d *DateDiffer) Match(a, b reflect.Value) bool {\n\treturn diff.AreType(a, b, reflect.TypeOf(Date{}))\n}\n// The actual diff function, where you also append to the changelog\n// using your custom format\nfunc (d *DateDiffer) Diff(cl *diff.Changelog, path []string, a, b reflect.Value) error {\n\tif a.Kind() == reflect.Invalid {\n\t\tcl.Add(diff.CREATE, path, nil, b.Interface())\n\t\treturn nil\n\t}\n\tif b.Kind() == reflect.Invalid {\n\t\tcl.Add(diff.DELETE, path, a.Interface(), nil)\n\t\treturn nil\n\t}\n\tvar d1, d2 Date\n\td1, _ = a.Interface().(Date)\n\td2, _ = b.Interface().(Date)\n\tif d1.Day != d2.Day || d1.Month != d2.Month || d1.Year != d2.Year {\n\t\tcl.Add(diff.UPDATE, path, fmt.Sprintf(\"%d-%d-%d\", d1.Year, d1.Month, d1.Day), fmt.Sprintf(\"%d-%d-%d\", d2.Year, d2.Month, d2.Day))\n\t}\n\treturn nil\n}\n// unsure what this is actually for, but you must implement it either way\nfunc (d *DateDiffer) InsertParentDiffer(dfunc func(path []string, a, b reflect.Value, p interface{}) error) {\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69796031/how-to-re-create-log-file-automatically-in-logrus-lumberjack-on-macos",
    "body": "import (\n\t\"fmt\"\n\t\"log\"\n\t\"path/filepath\"\n\t\"time\"\n\t\"github.com/fsnotify/fsnotify\"\n\t\"gopkg.in/natefinch/lumberjack.v2\"\n)\nfunc main() {\n\tlogPath := \"./xxx.log\"\n\tlogName := filepath.Base(logPath)\n\tlogger := &lumberjack.Logger{\n\t\t// Log path\n\t\tFilename: logPath,\n\t\t// Log size MB\n\t\tMaxSize: 10,\n\t\t// Backup count\n\t\tMaxBackups: 3,\n\t\t// expire days\n\t\t// MaxAge: 28,\n\t\t// gzip compress\n\t\tCompress: false,\n\t}\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\tgo func() {\n\t\tfor event := range watcher.Events {\n\t\t\tif event.Op&fsnotify.Remove == fsnotify.Remove &&\n\t\t\t\tevent.Name == logName {\n\t\t\t\tlog.Println(\"rotate log\", event.Name)\n\t\t\t\tlogger.Rotate()\n\t\t\t}\n\t\t}\n\t}()\n\terr = watcher.Add(filepath.Dir(logPath))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tlogger.Write([]byte(fmt.Sprintf(\"current time:%v\\n\", time.Now())))\n\t\ttime.Sleep(3 * time.Second)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68984685/go-rsa-decrypt-using-public-key-implementation-from-java",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\"encoding/pem\"\n\t\"crypto/x509\"\n\t\"crypto/rsa\"\n\t\"encoding/base64\"\n\t\"bytes\"\n\t\"io\"\n)\nfunc main() {\n\tpubKeyPem := `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZ67dtUTLxoXnNEzRBFB\nmwukEJGC+y69cGgpNbtElQj3m4Aft/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKH\nyVgFEGO4SA8RNnjhJt2D7z8RDMWX3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+I\nd0YDheCkVCoCEeUjQ8koXZhTwhYkGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DI\nhFKnOTnYXnpXiwRwtPyYoGTa64yWfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U\n1aHjDDGEnulTYJyEqCzNGwBpzEHUjqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RC\nsQIDAQAB\n-----END PUBLIC KEY-----`\n\t// Import public key\n\tpubKey := ImportSPKIPublicKeyPEM(pubKeyPem);\n\t// Base64 decode ciphertext\n\tciphertextBytes, _ := base64.StdEncoding.DecodeString(\"ajQbkszbZ97YZaPSRBab9vj0DDLm9tTrQwSZ+ucPj+cYSmw06KLCtRH3SPn3b2DqSd1revLXqxMtSzFmjRvZ5F8y3nzdP8NJaRplOigbPFhKZTv7xBVK5ATEmLukgtI7f+d3KdmGUG+cyTkfxIrMBvB3BIS5oTiMNmC9pqLaWcDVF9qpuxnwEMQJbeO9nTklpdv+F8BrchHmeUkKRrMJBoPbbcfq9Hi4bHiFyxPWhwB66d/AryCKsFRhaX6hSkTL+0NvuhVhv98wdo3juv2Il50XKOCbfc8kUG628TcSK6n31piLF9cntSVTB/L/pVfcAxEwx4hcUhLuqmk6EZIJvGo0G5LM22fe2GWj0kQWm/b49Awy5vbU60MEmfrnD4/nGEpsNOiiwrUR90j5929g6knda3ry16sTLUsxZo0b2eRfMt583T/DSWkaZTooGzxYSmU7+8QVSuQExJi7pILSO3/ndynZhlBvnMk5H8SKzAbwdwSEuaE4jDZgvaai2lnA1RfaqbsZ8BDECW3jvZ05JaXb/hfAa3IR5nlJCkazCQaD223H6vR4uGx4hcsT1ocAeunfwK8girBUYWl+oUpEy/tDb7oVYb/fMHaN47r9iJedFyjgm33PJFButvE3Eiup99aYixfXJ7UlUwfy/6VX3AMRMMeIXFIS7qppOhGSCbxqNBuSzNtn3thlo9JEFpv2+PQMMub21OtDBJn65w+P5xhKbDToosK1EfdI+fdvYOpJ3Wt68terEy1LMWaNG9nkXzLefN0/w0lpGmU6KBs8WEplO/vEFUrkBMSYu6SC0jt/53cp2YZQb5zJOR/EiswG8HcEhLmhOIw2YL2motpZwNUX2qm7GfAQxAlt472dOSWl2/4XwGtyEeZ5SQpGswkGg9ttx+r0eLhseIXLE9aHAHrp38CvIIqwVGFpfqFKRMv7Q2+6FWG/3zB2jeO6/YiXnRco4Jt9zyRQbrbxNxIrqffWmIsX1ye1JVMH8v+lV9wDETDHiFxSEu6qaToRkgm8\")\n\t// Split ciphertext into signature chunks a 2048/8 bytes and decrypt each chunk\n\treader := bytes.NewReader(ciphertextBytes)\n\tvar writer bytes.Buffer\n\tciphertextBytesChunk := make([]byte, 2048/8)\n    for {\n\t\tn, _ := io.ReadFull(reader, ciphertextBytesChunk)\n\t\tif (n == 0) {\n\t\t\tbreak\n\t\t}\n\t\tdecryptChunk(ciphertextBytesChunk, &writer, pubKey)\n\t}\n\t// Concatenate decrypted signature chunks\n\tdecryptedData := writer.String()\n\tfmt.Println(decryptedData)\n}\nfunc ImportSPKIPublicKeyPEM(spkiPEM string) (*rsa.PublicKey) {\n    body, _ := pem.Decode([]byte(spkiPEM ))\n\tpublicKey, _ := x509.ParsePKIXPublicKey(body.Bytes)\n\tif publicKey, ok := publicKey.(*rsa.PublicKey); ok {\n\t\treturn publicKey\n\t} else {\n\t\treturn nil\n\t}\n}\nfunc decryptChunk(ciphertextBytesChunk []byte , writer *bytes.Buffer, pubKey *rsa.PublicKey ){\n\t// Decrypt each signature chunk\n\tciphertextInt := new(big.Int)\n\tciphertextInt.SetBytes(ciphertextBytesChunk)\n\tdecryptedPaddedInt := decrypt(new(big.Int), pubKey, ciphertextInt)\n\t// Remove padding\n\tdecryptedPaddedBytes := make([]byte, pubKey.Size())\n\tdecryptedPaddedInt.FillBytes(decryptedPaddedBytes)\n\tstart := bytes.Index(decryptedPaddedBytes[1:], []byte{0}) + 1 // // 0001FF...FF00<data>: Find index after 2nd 0x00\n    decryptedBytes := decryptedPaddedBytes[start:]\n\t// Write decrypted signature chunk\n\twriter.Write(decryptedBytes)\n}\nfunc decrypt(c *big.Int, pub *rsa.PublicKey, m *big.Int) *big.Int {\n\t// Textbook RSA\n\te := big.NewInt(int64(pub.E))\n\tc.Exp(m, e, pub.N)\n\treturn c\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68984685/go-rsa-decrypt-using-public-key-implementation-from-java",
    "body": "String publicKey = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZ67dtUTLxoXnNEzRBFBmwukEJGC+y69cGgpNbtElQj3m4Aft/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKHyVgFEGO4SA8RNnjhJt2D7z8RDMWX3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+Id0YDheCkVCoCEeUjQ8koXZhTwhYkGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DIhFKnOTnYXnpXiwRwtPyYoGTa64yWfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U1aHjDDGEnulTYJyEqCzNGwBpzEHUjqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RCsQIDAQAB\";\nbyte[] ciphertext = Base64.getDecoder().decode(\"ajQbkszbZ97YZaPSRBab9vj0DDLm9tTrQwSZ+ucPj+cYSmw06KLCtRH3SPn3b2DqSd1revLXqxMtSzFmjRvZ5F8y3nzdP8NJaRplOigbPFhKZTv7xBVK5ATEmLukgtI7f+d3KdmGUG+cyTkfxIrMBvB3BIS5oTiMNmC9pqLaWcDVF9qpuxnwEMQJbeO9nTklpdv+F8BrchHmeUkKRrMJBoPbbcfq9Hi4bHiFyxPWhwB66d/AryCKsFRhaX6hSkTL+0NvuhVhv98wdo3juv2Il50XKOCbfc8kUG628TcSK6n31piLF9cntSVTB/L/pVfcAxEwx4hcUhLuqmk6EZIJvGo0G5LM22fe2GWj0kQWm/b49Awy5vbU60MEmfrnD4/nGEpsNOiiwrUR90j5929g6knda3ry16sTLUsxZo0b2eRfMt583T/DSWkaZTooGzxYSmU7+8QVSuQExJi7pILSO3/ndynZhlBvnMk5H8SKzAbwdwSEuaE4jDZgvaai2lnA1RfaqbsZ8BDECW3jvZ05JaXb/hfAa3IR5nlJCkazCQaD223H6vR4uGx4hcsT1ocAeunfwK8girBUYWl+oUpEy/tDb7oVYb/fMHaN47r9iJedFyjgm33PJFButvE3Eiup99aYixfXJ7UlUwfy/6VX3AMRMMeIXFIS7qppOhGSCbxqNBuSzNtn3thlo9JEFpv2+PQMMub21OtDBJn65w+P5xhKbDToosK1EfdI+fdvYOpJ3Wt68terEy1LMWaNG9nkXzLefN0/w0lpGmU6KBs8WEplO/vEFUrkBMSYu6SC0jt/53cp2YZQb5zJOR/EiswG8HcEhLmhOIw2YL2motpZwNUX2qm7GfAQxAlt472dOSWl2/4XwGtyEeZ5SQpGswkGg9ttx+r0eLhseIXLE9aHAHrp38CvIIqwVGFpfqFKRMv7Q2+6FWG/3zB2jeO6/YiXnRco4Jt9zyRQbrbxNxIrqffWmIsX1ye1JVMH8v+lV9wDETDHiFxSEu6qaToRkgm8\");\nbyte[] decrypted = decryptByPublicKey(ciphertext, publicKey);\nSystem.out.println(new String(decrypted, StandardCharsets.UTF_8));"
  },
  {
    "url": "https://stackoverflow.com/questions/68760921/retrieve-the-sqs-queue-url-dynamically-from-the-lambda-event-or-context",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go/aws/arn\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/sqs\"\n)\nvar client *sqs.SQS\nfunc main() {\n  client = sqs.New(session.Must(session.NewSessionWithOptions(session.Options{\n\t\tSharedConfigState: session.SharedConfigEnable,\n\t})))\n\tlambda.Start(Handle)\n}\nfunc Handle(ctx context.Context, event events.SQSEvent) {\n\tfor _, record := range event.Records {\n\t\t// Process message\n\t\tfmt.Printf(record.Body)\n\t\t// Rebuild Queue URL from ARN\n\t\tqueueArn, _ := arn.Parse(record.EventSourceARN)\n\t\tqueueUrl := fmt.Sprintf(\"https://sqs.%v.amazonaws.com/%v/%v\", queueArn.Region, queueArn.AccountID, queueArn.Resource)\n\t\t// Delete message from queue\n\t\tclient.DeleteMessage(&sqs.DeleteMessageInput{\n\t\t\tQueueUrl:      &queueUrl,\n\t\t\tReceiptHandle: &record.ReceiptHandle,\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68074036/stream-output-from-remote-kubernetes-command-with-golang-client",
    "body": "\tvar stdout, stdin bytes.Buffer\n\tvar streamErr error\n\tgo func() {\n\t\tstreamErr = exec.Stream(remotecommand.StreamOptions{\n\t\t\tStdin:  &stdin,\n\t\t\tStdout: &stdout,\n\t\t\tStderr: nil,\n\t\t\tTty:    true,\n\t\t})\n\t}()\n\ttime.Sleep(5*time.Second)\n\tlog.Info(\"doing raw string calls on both buffers\")\n\tlog.Info(stdin.String())\n\tlog.Info(stdout.String())\n\tlog.Info(\"starting scan of stdin\")\n\tscanner := bufio.NewScanner(&stdin)\n\tscanner.Split(bufio.ScanLines)\n\tfor scanner.Scan() {\n\t\tm := scanner.Text()\n\t\tfmt.Println(m)\n\t}\n\tlog.Info(\"starting scan of stdout\")\n\tscanner = bufio.NewScanner(&stdout)\n\tscanner.Split(bufio.ScanLines)\n\tfor scanner.Scan() {\n\t\tm := scanner.Text()\n\t\tfmt.Println(m)\n\t}\n\tlog.Info(\"finished scanning of stdout\")"
  },
  {
    "url": "https://stackoverflow.com/questions/68074036/stream-output-from-remote-kubernetes-command-with-golang-client",
    "body": "type LogStreamer struct{\n\tb bytes.Buffer\n}\nfunc (l *LogStreamer) String() string {\n\treturn l.b.String()\n}\nfunc (l *LogStreamer) Write(p []byte) (n int, err error) {\n\ta := strings.TrimSpace(string(p))\n\tl.b.WriteString(a)\n\tlog.Info(a)\n\treturn len(p), nil\n}\nfunc (k *KubernetesClient) RunCommand(ctx context.Context, args *RunCommandArgs) (string, int, error) {\n\treq := k.clientset.CoreV1().RESTClient().Post().Resource(\"pods\").Name(args.ContainerId).Namespace(k.namespace).SubResource(\"exec\").Param(\"container\", \"worker\")\n\tscheme := runtime.NewScheme()\n\tif err := v1.AddToScheme(scheme); err != nil {\n\t\treturn \"\", 0, fmt.Errorf(\"could not add to scheme: %w\", err)\n\t}\n\tparameterCodec := runtime.NewParameterCodec(scheme)\n\treq.VersionedParams(&v1.PodExecOptions{\n\t\tStdin:     true,\n\t\tStdout:    true,\n\t\tStderr:    false,\n\t\tTTY:       true,\n\t\tContainer: args.ContainerId,\n\t\tCommand:   []string{\"sh\", \"-c\", args.Command},\n\t}, parameterCodec)\n\texec, err := remotecommand.NewSPDYExecutor(k.config, \"POST\", req.URL())\n\tif err != nil {\n\t\treturn \"\", 0, fmt.Errorf(\"could not exec command: %w\", err)\n\t}\n\tvar streamErr error\n\tl := &LogStreamer{}\n\tstreamErr = exec.Stream(remotecommand.StreamOptions{\n\t\tStdin:  os.Stdin,\n\t\tStdout: l,\n\t\tStderr: nil,\n\t\tTty:    true,\n\t})\n\tif streamErr != nil {\n\t\tif strings.Contains(streamErr.Error(), \"command terminated with exit code\") {\n\t\t\treturn l.String(), 1, nil\n\t\t} else {\n\t\t\treturn \"\", 0, fmt.Errorf(\"could not stream results: %w\", streamErr)\n\t\t}\n\t}\n\treturn l.String(), 0, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67675102/getting-websocket-connection-to-ws-localhost7080-query-failed-on-connecting",
    "body": "srv := handler.New(graphql.NewSchema(client))\nsrv.AddTransport(transport.Options{})\nsrv.AddTransport(transport.GET{})\nsrv.AddTransport(transport.POST{})\nsrv.AddTransport(transport.MultipartForm{})\nsrv.SetQueryCache(lru.New(1000))\nsrv.Use(extension.Introspection{})\nsrv.Use(extension.AutomaticPersistedQuery{\n\tCache: lru.New(100),\n})\n// add ws transport configured by ourselves\nsrv.AddTransport(&transport.Websocket{\n\tUpgrader: websocket.Upgrader{\n\t\t//ReadBufferSize:  1024,\n\t\t//WriteBufferSize: 1024,\n\t\tCheckOrigin: func(r *http.Request) bool {\n\t\t\t// add checking origin logic to decide return true or false\n\t\t\treturn true\n\t\t},\n\t},\n\tKeepAlivePingInterval: 10 * time.Second,\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/67345132/handling-unicode-in-string-search",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\nfunc LastRuneIndex(s, substr string) (int, error) {\n\tbyteIndex := strings.LastIndex(s, substr)\n\tif byteIndex < 0 {\n\t\treturn byteIndex, nil\n\t}\n\treader := strings.NewReader(s)\n\tcount := 0\n\tfor byteIndex > 0 {\n\t\t_, bytes, err := reader.ReadRune()\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tbyteIndex = byteIndex - bytes\n\t\tcount += 1\n\t}\n\treturn count, nil\n}\nfunc main() {\n\ts := \"foo 日本 foo!\"\n\tcount, err := LastRuneIndex(s, \"foo\")\n\tfmt.Println(count, err)\n\t// outputs:\n\t// 7 <nil>\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67022212/running-a-go-script-wtih-cron-in-docker",
    "body": "# use a first-stage image to build the go code\n# we'll change it later\nFROM golang:1.10 AS build\n# for now we only need the go code\nCOPY src/backup.go backup.go\n# build a standalone executable\nRUN go build -o /backup backup.go\n# switch to a second-stage production image\nFROM couchbase\n# setup cronjob\nCOPY src/crontab.txt /crontab.txt\nRUN /usr/bin/crontab /crontab.txt\n# copy the executable from the first stage\n# into the production image\nCOPY --from=build /backup /backup\nCMD [\"/usr/sbin/cron\", \"-f\", \"-l\", \"8\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/66846665/how-to-use-go-release-binary-github-action",
    "body": "on:\n  push:\n    # Sequence of patterns matched against refs/tags\n    tags:\n      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10\nname: Latest Release\ndefaults:\n  run:\n    shell: bash\njobs:\n  lint:\n    name: Lint files\n    runs-on: 'ubuntu-latest'\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-go@v2\n        with:\n          go-version: '1.16.3'\n      - name: golangci-lint\n        uses: golangci/golangci-lint-action@v2.5.2\n        with:\n          version: latest\n  test:\n    name: Run tests\n    runs-on: 'ubuntu-latest'\n    needs: lint\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-go@v2\n        with:\n          go-version: '1.16.3'\n      - run: go test -v -cover\n  release:\n    name: Create Release\n    runs-on: 'ubuntu-latest'\n    needs: test\n    strategy:\n      matrix:\n        # List of GOOS and GOARCH pairs from `go tool dist list`\n        goosarch:\n          - 'aix/ppc64'\n          # etc\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-go@v2\n        with:\n          go-version: '1.16.3'\n      - name: Get OS and arch info\n        run: |\n          GOOSARCH=${{matrix.goosarch}}\n          GOOS=${GOOSARCH%/*}\n          GOARCH=${GOOSARCH#*/}\n          BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH\n          echo \"BINARY_NAME=$BINARY_NAME\" >> $GITHUB_ENV\n          echo \"GOOS=$GOOS\" >> $GITHUB_ENV\n          echo \"GOARCH=$GOARCH\" >> $GITHUB_ENV\n      - name: Build\n        run: |\n          go build -o \"$BINARY_NAME\" -v\n      - name: Release Notes\n        run:\n          git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> \".github/RELEASE-TEMPLATE.md\"\n      - name: Release with Notes\n        uses: softprops/action-gh-release@v1\n        with:\n          body_path: \".github/RELEASE-TEMPLATE.md\"\n          draft: true\n          files: ${{env.BINARY_NAME}}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"
  },
  {
    "url": "https://stackoverflow.com/questions/65351977/how-to-implement-authorization-using-keycloak",
    "body": "package main\nimport (\n\t\"log\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKS URL.\n\t//\n\t// This is a local Keycloak JWKS endpoint for the master realm.\n\tjwksURL := \"http://localhost:8080/auth/realms/master/protocol/openid-connect/certs\"\n\t// Create the keyfunc options. Use an error handler that logs. Refresh the JWKS when a JWT signed by an unknown KID\n\t// is found or at the specified interval. Rate limit these refreshes. Timeout the initial JWKS refresh request after\n\t// 10 seconds. This timeout is also used to create the initial context.Context for keyfunc.Get.\n\toptions := keyfunc.Options{\n\t\tRefreshErrorHandler: func(err error) {\n\t\t\tlog.Printf(\"There was an error with the jwt.Keyfunc\\nError: %s\", err.Error())\n\t\t},\n\t\tRefreshInterval:   time.Hour,\n\t\tRefreshRateLimit:  time.Minute * 5,\n\t\tRefreshTimeout:    time.Second * 10,\n\t\tRefreshUnknownKID: true,\n\t}\n\t// Create the JWKS from the resource at the given URL.\n\tjwks, err := keyfunc.Get(jwksURL, options)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from resource at the given URL.\\nError: %s\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\tjwtB64 := \"eyJhbGciOiJQUzM4NCIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJMeDFGbWF5UDJZQnR4YXFTMVNLSlJKR2lYUktudzJvdjVXbVlJTUctQkxFIn0.eyJleHAiOjE2MTU0MDY5ODIsImlhdCI6MTYxNTQwNjkyMiwianRpIjoiMGY2NGJjYTktYjU4OC00MWFhLWFkNDEtMmFmZDM2OGRmNTFkIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL21hc3RlciIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJhZDEyOGRmMS0xMTQwLTRlNGMtYjA5Ny1hY2RjZTcwNWJkOWIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0b2tlbmRlbG1lIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwiY2xpZW50SG9zdCI6IjE3Mi4yMC4wLjEiLCJjbGllbnRJZCI6InRva2VuZGVsbWUiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC10b2tlbmRlbG1lIiwiY2xpZW50QWRkcmVzcyI6IjE3Mi4yMC4wLjEifQ.Rxrq41AxbWKIQHWv-Tkb7rqwel3sKT_R_AGvn9mPIHqhw1m7nsQWcL9t2a_8MI2hCwgWtYdgTF1xxBNmb2IW3CZkML5nGfcRrFvNaBHd3UQEqbFKZgnIX29h5VoxekyiwFaGD-0RXL83jF7k39hytEzTatwoVjZ-frga0KFl-nLce3OwncRXVCGmxoFzUsyu9TQFS2Mm_p0AMX1y1MAX1JmLC3WFhH3BohhRqpzBtjSfs_f46nE1-HKjqZ1ERrAc2fmiVJjmG7sT702JRuuzrgUpHlMy2juBG4DkVcMlj4neJUmCD1vZyZBRggfaIxNkwUhHtmS2Cp9tOcwNu47tSg\"\n\t// Parse the JWT.\n\ttoken, err := jwt.Parse(jwtB64, jwks.Keyfunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError: %s\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n\t// End the background refresh goroutine when it's no longer needed.\n\tjwks.EndBackground()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65216829/fileserver-directory-for-dynamic-route",
    "body": "func main() {\n    mux = mux.NewRouter()\n    mux.HandleFunc(\"/apps/{id}/{app}\", s.serveApp).Methods(\"GET\")\n}\nfunc (s *Server) serveApp(w http.ResponseWriter, r *http.Request) {\n\tparams := mux.Vars(r)\n\tapp := params[\"app\"]\n\tid := params[\"id\"]\n\tentry, err := getFromDB(id)\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\trespondWithError(w, http.StatusInternalServerError, err.Error())\n\t\treturn\n\t}\n\tpath := filepath.Join(DefaultFolder, entry.Branch, entry.Commit, app)\n    // the part already handled by serveApp handler must be stripped.\n\tbaseURL := fmt.Sprintf(\"/apps/%s/%s/\", id, app)\n    pathHandler := http.FileServer(http.Dir(path))\n\thttp.StripPrefix(baseURL, pathHandler).ServeHTTP(w, r)\n\t// or in one line\n\t// http.FileServer(http.StripPrefix(baseURL, http.Dir(path)).ServeHTTP(w, r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64882033/high-memory-consumption-during-method-execution",
    "body": "# A handy function to make ignoring errors a bit less laborious.\nfunc IgnoreError(value interface{}, err error) interface{} {\n    return value\n}\n# Its more flexible to take an io.Reader.\n# It returns a channel of individual rows.\nfunc readCSV(input io.Reader) chan Row {\n    rows := make(chan Row)\n    go func() {\n        defer close(rows)\n        # Use encoding/csv.\n        # Let it reuse its backing array for each row.\n        # Ignore rows with the wrong number of columns.\n        reader := csv.NewReader(input)\n        reader.FieldsPerRecord = 7\n        reader.ReuseRecord = true\n        for {\n            parts, err := reader.Read()\n            if err == io.EOF {\n                break\n            }\n            if err != nil {\n                continue\n            }\n            # Send each row down the channel.\n            rows <- Row{\n                Column1: IgnoreError(strconv.Atoi(parts[0])).(int),\n                Column2: IgnoreError(strconv.ParseFloat(parts[1], 32)).(float64),\n                Column3: IgnoreError(strconv.ParseFloat(parts[2], 32)).(float64),\n                Column4: parts[3],\n                Column5: IgnoreError(strconv.ParseFloat(parts[4], 32)).(float64),\n                Column6: parts[5],\n                Column7: parts[6],\n            }\n        }\n    }();\n\n    return rows;\n}\nfunc main() {\n    file, err := os.Open(\"test.csv\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    rows := readCSV(file)\n    for row := range rows {\n        fmt.Println(row)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64632465/how-to-make-concurrent-get-requests-from-url-pool",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n)\nconst urls_text = `http://danf.us/\nhttps://farrellit.net/?3=2&#1\n`\nfunc crawler(urls <-chan *url.URL, done chan<- int) {\n\tvar processed int = 0\n\tdefer func() { done <- processed }()\n\tclient := http.Client{Timeout: 10 * time.Second}\n\tfor u := range urls {\n\t\tif req, err := http.NewRequest(\"GET\", u.String(), nil); err != nil {\n\t\t\tlog.Printf(\"Couldn't create new request for %s: %s\", u.String(), err.Error())\n\t\t} else {\n\t\t\treq.Header.Add(\"User-agent\", \"Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/74.0\") // changing user-agent\n\t\t\tif res, err := client.Do(req); err != nil {\n\t\t\t\tlog.Printf(\"Failed to get %s: %s\", u.String(), err.Error())\n\t\t\t} else {\n\t\t\t\tfilename := filepath.Base(u.EscapedPath())\n\t\t\t\tif filename == \"/\" || filename == \"\" {\n\t\t\t\t\tfilename = \"response\"\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"URL Filename is '%s'\", filename)\n\t\t\t\t}\n\t\t\t\tdestpath := filepath.Join(\n\t\t\t\t\tres.Status, u.Scheme, u.Hostname(), u.EscapedPath(),\n\t\t\t\t\tfmt.Sprintf(\"?%s\",u.RawQuery), fmt.Sprintf(\"#%s\",u.Fragment), filename,\n\t\t\t\t)\n\t\t\t\tif err := os.MkdirAll(filepath.Dir(destpath), 0755); err != nil {\n\t\t\t\t\tlog.Printf(\"Couldn't create directory %s: %s\", filepath.Dir(destpath), err.Error())\n\t\t\t\t} else if f, err := os.OpenFile(destpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644); err != nil {\n\t\t\t\t\tlog.Printf(\"Couldn't open destination file %s: %s\", destpath, err.Error())\n\t\t\t\t} else {\n\t\t\t\t\tif b, err := io.Copy(f, res.Body); err != nil {\n\t\t\t\t\t\tlog.Printf(\"Could not copy %s body to %s: %s\", u.String(), destpath, err.Error())\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.Printf(\"Copied %d bytes from body of %s to %s\", b, u.String(), destpath)\n\t\t\t\t\t\tprocessed++\n\t\t\t\t\t}\n\t\t\t\t\tf.Close()\n\t\t\t\t}\n\t\t\t\tres.Body.Close()\n\t\t\t}\n\t\t}\n\t}\n}\nconst workers = 3\nfunc main() {\n\turls := make(chan *url.URL)\n\tdone := make(chan int)\n\tvar submitted int = 0\n\tvar inputted int = 0\n\tvar successful int = 0\n\tfor i := 0; i < workers; i++ {\n\t\tgo crawler(urls, done)\n\t}\n\tsc := bufio.NewScanner(bytes.NewBufferString(urls_text))\n\tfor sc.Scan() {\n\t\tinputted++\n\t\tif u, err := url.Parse(sc.Text()); err != nil {\n\t\t\tlog.Printf(\"Could not parse %s as url: %w\", sc.Text(), err)\n\t\t} else {\n\t\t\tsubmitted++\n\t\t\turls <- u\n\t\t}\n\t}\n\tclose(urls)\n\tfor i := 0; i < workers; i++ {\n\t\tsuccessful += <-done\n\t}\n\tlog.Printf(\"%d urls input, %d could not be parsed. %d/%d valid URLs successful (%.0f%%)\",\n\t\tinputted, inputted-submitted,\n\t\tsuccessful, submitted,\n\t\tfloat64(successful)/float64(submitted)*100.0,\n\t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62659313/unable-to-parse-gps-information-via-serial-port",
    "body": "\tfor {\n\t\tn, err := serPort.Read(buff)\n\t\tfmt.Printf(\"%v\\n\", n)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t\tbreak\n\t\t}\n        // do not try to parse a single read byte\n        // instead parse the actual incoming string.\n\t\tif n > 1 {\n\t\t\trawSentence := string(buff[:n])\n\t\t\tfmt.Print(rawSentence)\n\t\t\ts, err := nmea.Parse(rawSentence)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tif s.DataType() == nmea.TypeRMC {\n\t\t\t\tm := s.(nmea.RMC)\n\t\t\t\tfmt.Printf(\"Raw sentence: %v\\n\", m)\n\t\t\t\tfmt.Printf(\"Time: %s\\n\", m.Time)\n\t\t\t\tfmt.Printf(\"Validity: %s\\n\", m.Validity)\n\t\t\t\tfmt.Printf(\"Latitude GPS: %s\\n\", nmea.FormatGPS(m.Latitude))\n\t\t\t\tfmt.Printf(\"Latitude DMS: %s\\n\", nmea.FormatDMS(m.Latitude))\n\t\t\t\tfmt.Printf(\"Longitude GPS: %s\\n\", nmea.FormatGPS(m.Longitude))\n\t\t\t\tfmt.Printf(\"Longitude DMS: %s\\n\", nmea.FormatDMS(m.Longitude))\n\t\t\t\tfmt.Printf(\"Speed: %f\\n\", m.Speed)\n\t\t\t\tfmt.Printf(\"Course: %f\\n\", m.Course)\n\t\t\t\tfmt.Printf(\"Date: %s\\n\", m.Date)\n\t\t\t\tfmt.Printf(\"Variation: %f\\n\", m.Variation)\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/62236441/getting-ssh-short-read-error-when-trying-to-parse-a-public-key-in-golang",
    "body": "package main\nimport (\n\t\"log\"\n\t\"golang.org/x/crypto/ssh\"\n)\nfunc parse(in []byte) error {\n\t// ParseAuthorizedKeys parses a public key from an authorized_keys file used in OpenSSH\n\tpk, _, _, _, err := ssh.ParseAuthorizedKey(in)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// pk.Marshal() Marshal returns the serialized key data in SSH wire format, with the name prefix\n\t// ssh.ParsePublicKey is used to unmarshal the returned data\n\tres, err := ssh.ParsePublicKey(pk.Marshal())\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Println(res)\n\treturn nil\n}\nfunc main() {\n\tkey := \"ssh-rsa AAAAB3NzaC1yc...DEdfU= pkaramol@MacBookPro\"\n\tif err := parse([]byte(key)); err != nil {\n\t\tlog.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62145532/trouble-mapping-json-to-golang-struct",
    "body": "type Message struct {\n\tPageData P\n\tValData  []V\n}\ntype P struct {\n\tPage int\n}\ntype V struct {\n\tIndicator struct {\n\t\tId    string\n\t\tValue string\n\t}\n\tCountry struct {\n\t\tValue string\n\t}\n\tValue   string\n\tDecimal string\n\tDate    string\n}\nfunc main() {\n\tvar rawdata []json.RawMessage\n\tjson.Unmarshal([]byte(jsonData), &rawdata)\n\tvar pageData P\n\tjson.Unmarshal(rawdata[0], &pageData)\n\tvar valData []V\n\tjson.Unmarshal(rawdata[1], &valData)\n\tres := Message{pageData, valData}\n\tfmt.Println(res)\n}\nvar jsonData = `[...]` //your json data"
  },
  {
    "url": "https://stackoverflow.com/questions/59812483/how-to-dynamically-build-query-filters",
    "body": "import (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n)\ntype User struct {\n\tId       int\n\tFullName string\n\tPhone    string\n\tMail     string\n}\nfunc main() {\n\tu := &User{Id: 10, FullName: \"John\", Mail: \"john@mail\"}\n\tu2 := struct {\n\t\tid   int\n\t\tname string\n\t}{10, \"john\"};\n   // inline struct\n\tq := getQuery(&u2, \"OR\")\n\tfmt.Println(q)\n   // typed struct\n\tq = getQuery(u, \"AND\")\n\tfmt.Println(q)\n}\nfunc getQuery(target interface{}, join string) string {\n\tvar filters []string\n\tval := reflect.ValueOf(target).Elem()\n\tfor i := 0; i < val.NumField(); i++ {\n\t\tvalue := val.Field(i)\n\t\ts :=fmt.Sprintf(\"%v\",value);\n\t\t// this little trick is to check if it is an empty value\n\t\t// so don't generate empty condition expressions\n\t\tif s == \"\" {\n\t\t\t continue\n\t\t}\n\t\tfieldType := val.Type().Field(i)\n\t\tfilters = append(filters, fmt.Sprintf(\" eq(%s, %v) \", fieldType.Name, value))\n\t}\n\treturn strings.Join(filters, join)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59586653/what-is-the-correct-way-of-enumerating-an-array",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype Data struct {\n\tValue int\n}\nvar modifyMe = []Data{\n\t{Value: 0},\n\t{Value: 1},\n\t{Value: 2},\n\t{Value: 3},\n\t{Value: 4},\n\t{Value: 5},\n\t{Value: 6},\n\t{Value: 7},\n\t{Value: 8},\n}\nfunc main() {\n\t// modify()\n\tnotModify()\n\tfmt.Println(modifyMe)\n}\nfunc modify() {\n\tfor i, _ := range modifyMe {\n\t\trefToModifyMeData := &modifyMe[i]\n\t\trefToModifyMeData.Value =  refToModifyMeData.Value + 100\n\t}\n}\nfunc notModify() {\n\tfor _, data := range modifyMe {\n\t\trefToModifyMeData := &data\n\t\trefToModifyMeData.Value =  refToModifyMeData.Value + 100\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59097754/how-to-use-implement-aspect-orientation-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tm := new(metrics)\n\tf := m.proxy(user)\n\tfor i := 0; i < 10; i++ {\n\t\tf()\n\t}\n\tm.show()\n}\nfunc user() error {\n\ttime.Sleep(100 * time.Millisecond)\n\treturn nil\n}\ntype metrics struct {\n\tnCalls, nErrs int\n\ttotal         time.Duration\n\t// d []time.Duration\n}\nfunc (p *metrics) proxy(user func() error) func() error {\n\treturn func() error {\n\t\tp.nCalls++\n\t\tt0 := time.Now()\n\t\terr := user()\n\t\tt := time.Since(t0)\n\t\t// p.d = append(p.d, t)\n\t\tp.total += t\n\t\tif err != nil {\n\t\t\tp.nErrs++\n\t\t}\n\t\treturn err\n\t}\n}\nfunc (p *metrics) show() {\n\tfmt.Println(\"total time:\", p.total)\n\tfmt.Println(\"total number of requests:\", p.nCalls)\n\tfmt.Println(\"number of errors:\", p.nErrs)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58849472/send-docker-context-as-tar-with-go-client-cant-find-dockerfile",
    "body": "package main\nimport (\n\t\"archive/tar\"\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/docker/docker/api/types\"\n\t\"github.com/docker/docker/client\"\n)\nfunc main() {\n\tvar buf bytes.Buffer\n\ttarWriter := tar.NewWriter(&buf)\n\tcontents := `FROM alpine:3.10.3\nCMD [\"echo\", \"this is from the archive\"]\n`\n\theader := &tar.Header{\n\t\tName:     \"Dockerfile\",\n\t\tMode:     0o777,\n\t\tSize:     int64(len(contents)),\n\t\tTypeflag: tar.TypeReg,\n\t}\n\terr := tarWriter.WriteHeader(header)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = tarWriter.Write([]byte(contents))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = tarWriter.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tc, err := client.NewClientWithOpts(client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(c.ClientVersion())\n\treader := bytes.NewReader(buf.Bytes()) // tar.NewReader(&buf)\n\tctx := context.Background()\n\tbuildOptions := types.ImageBuildOptions{\n\t\tContext:    reader,\n\t\tDockerfile: \"Dockerfile\",\n\t\tTags:       []string{\"alpine-echo:1.2.4\"},\n\t}\n\t_, err = c.ImageBuild(ctx, reader, buildOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57326215/how-to-bundle-an-sqlite-database-in-a-go-binary",
    "body": "//go:generate go run gen.go\npackage main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\nfunc main() {\n\t// Create temporary file for database.\n\ttmpDB, err := ioutil.TempFile(\"\", \"db*.sqlite3\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Remove this file after on exit.\n\tdefer func() {\n\t\terr := os.Remove(tmpDB.Name())\n\t\tif err != nil {\n\t\t\tlog.Print(err)\n\t\t}\n\t}()\n\t// Write database to file.\n\t_, err = tmpDB.Write(sqlDB)\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\terr = tmpDB.Close()\n\tif err != nil {\n\t\tlog.Print(err)\n\t}\n\t// Open DB.\n\tdb, err := sql.Open(\"sqlite3\", tmpDB.Name()+\"?mode=ro\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Make sure it's loaded correct.\n\trows, err := db.Query(\"select * from test\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor rows.Next() {\n\t\tvar c string\n\t\terr := rows.Scan(&c)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Println(c)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57326215/how-to-bundle-an-sqlite-database-in-a-go-binary",
    "body": "// +build generate\npackage main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\nfunc main() {\n\t// Read source database file.\n\td, err := ioutil.ReadFile(\"source.sqlite3\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfp, err := os.Create(\"db.go\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err = fmt.Fprintf(fp, \"// Code generated by gen.go; DO NOT EDIT.\\n\\n\"+\n\t\t\"package main\\n\\n\"+\n\t\t\"var sqlDB = %s\\n\", asbyte(d))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n// Write any data as byte array.\nfunc asbyte(s []byte) string {\n\tvar b strings.Builder\n\tfor i, c := range s {\n\t\tif i%19 == 0 {\n\t\t\tb.WriteString(\"\\n\\t\\t\")\n\t\t}\n\t\tb.WriteString(fmt.Sprintf(\"%#x, \", c))\n\t}\n\treturn \"[]byte{\" + b.String() + \"}\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56984312/remove-all-word-in-string-that-contain-a-word-from-slice",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\nvar auxilaryWords = []string{\"hbs\", \"habis\", \"dan\", \"kapan\", \"bagaimana\", \"kita\", \"kamu\", \"warga\", \"pada\", \"paling\", \"ga\", \"gak\", \"enggak\", \"tidak\", \"bukan\", \"usai\", \"juga\", \"yg\", \"yang\", \"kpd\", \"kepada\", \"nya\", \"adanya\", \"jd\", \"jadi\", \"sih\", \"lah\", \"kan\", \"photo\", \"from\", \"by\", \"ini\", \"saja\", \"utk\", \"untuk\", \"lebih\", \"ternyata\", \"apa\", \"sok\", \"tau\", \"bagi\", \"eksis\", \"keluar\", \"kk\", \"kakak\"}\nvar auxHash = map[string]bool{}\nfunc CountTopics(chatWords []string) map[string]int {\n\tresult := map[string]int{}\n\tfor _, word := range chatWords {\n\t\tif !auxHash[word] {\n\t\t\tresult[word] += 1\n\t\t}\n\t}\n\treturn result\n}\nfunc init() {\n\tfor _, word := range auxilaryWords {\n\t\tauxHash[word] = true\n\t}\n}\nfunc main() {\n\tarrWord := strings.Split(`hai kakak habis makan apa`, \" \")\n\tfmt.Println(CountTopics(arrWord))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56861677/synchronizing-a-test-server-during-tests",
    "body": "// waitForServer attempts to establish a TCP connection to localhost:<port>\n// in a given amount of time. It returns upon a successful connection;\n// ptherwise exits with an error.\nfunc waitForServer(port string) {\n\tbackoff := 50 * time.Millisecond\n\tfor i := 0; i < 10; i++ {\n\t\tconn, err := net.DialTimeout(\"tcp\", \":\"+port, 1*time.Second)\n\t\tif err != nil {\n\t\t\ttime.Sleep(backoff)\n\t\t\tcontinue\n\t\t}\n\t\terr = conn.Close()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\treturn\n\t}\n\tlog.Fatalf(\"Server on port %s not up after 10 attempts\", port)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55179625/how-to-test-headers-in-a-reverseproxy",
    "body": "type Handler struct {\n\tbackend *url.URL\n}\nfunc NewHandler() (*Handler, error) {\n\tbackend, err := url.Parse(\"http://test.com\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Handler{backend}, nil\n}\nfunc (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\treverseProxy := &httputil.ReverseProxy{\n\t\tDirector: func(r *http.Request) {\n\t\t\tr.URL.Host = h.backend.Host\n\t\t\tr.URL.Path = \"/\"\n\t\t\tr.URL.Scheme = h.backend.Scheme\n            r.Host = url.Host\n            r.Header.Set(\"X-Forwarded-Host\", r.Header.Get(\"Host\"))\n        },\n\t}\n\treverseProxy.ServeHTTP(w, r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55179625/how-to-test-headers-in-a-reverseproxy",
    "body": "// set-up a backend server\nbackendServer := httptest.NewServer(http.DefaultServeMux)\ndefer backendServer.Close()\nbackendURL, err := url.Parse(backendServer.URL)\nif err != nil {\n    t.Fatal(err)\n}\n// set-up the reverse proxy\nhandler := &Handler{backend: backendURL} // <-- here we inject our own endpoint!\nreverseProxy := httptest.NewServer(handler)\ndefer reverseProxy.Close()\nreverseProxyURL, err := url.Parse(reverseProxy.URL)\nif err != nil {\n\tt.Fatal(err)\n}\n// call the reverse proxy\nres, err := http.Get(reverseProxy.URL)\nif err != nil {\n\tt.Fatal(err)\n}\n// todo optional: assert properties of the response\n_ = res\n// check that the backend server received the correct header\n// this comes next..."
  },
  {
    "url": "https://stackoverflow.com/questions/55179625/how-to-test-headers-in-a-reverseproxy",
    "body": "package example\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\t\"sync\"\n\t\"testing\"\n)\ntype Handler struct {\n\tbackend *url.URL\n}\nfunc NewHandler() (*Handler, error) {\n\tbackend, err := url.Parse(\"http://test.com\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &Handler{backend}, nil\n}\nfunc (h *Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\treverseProxy := &httputil.ReverseProxy{\n\t\tDirector: func(r *http.Request) {\n\t\t\tr.URL.Host = h.backend.Host\n\t\t\tr.URL.Path = \"/\"\n\t\t\tr.URL.Scheme = h.backend.Scheme\n\t\t\tr.Header.Set(\"X-Forwarded-Host\", r.Host)\n\t\t\tr.Host = h.backend.Host\n\t\t},\n\t}\n\treverseProxy.ServeHTTP(w, r)\n}\nfunc TestHandler(t *testing.T) {\n\tvar (\n\t\tmu     sync.Mutex\n\t\theader string\n\t)\n\t// create a backend server that checks the incoming headers\n\tbackendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tmu.Lock()\n\t\tdefer mu.Unlock()\n\t\theader = r.Header.Get(\"X-Forwarded-Host\")\n\t\tw.WriteHeader(http.StatusOK)\n\t}))\n\tdefer backendServer.Close()\n\tbackendURL, err := url.Parse(backendServer.URL)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// create a server for your reverse proxy\n\thandler := &Handler{backend: backendURL}\n\treverseProxy := httptest.NewServer(handler)\n\tdefer reverseProxy.Close()\n\treverseProxyURL, err := url.Parse(reverseProxy.URL)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// make a request to the reverse proxy\n\tres, err := http.Get(reverseProxy.URL)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// todo optional: assert properties of the response\n\t_ = res\n\tmu.Lock()\n\tgot := header\n\tmu.Unlock()\n\t// check that the header has been set\n\twant := reverseProxyURL.Host\n\tif got != want {\n\t\tt.Errorf(\"GET %s gives header %s, got %s\", reverseProxy.URL, want, got)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54833794/go-sql-query-inconsistency",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"log\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\ntype Result struct {\n\tAfield string\n\tBfield interface{}\n}\nfunc main() {\n\tdb, err := sql.Open(\"mysql\", \"root:testing@/mysql\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\tif _, err = db.Exec(`CREATE TABLE IF NOT EXISTS mytable(A VARCHAR(50), B INT);`); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif _, err = db.Exec(`DELETE FROM mytable`); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif _, err = db.Exec(`INSERT INTO mytable(A, B) VALUES ('a', 3)`); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar (\n\t\tusingLiteral         Result\n\t\tusingParam           Result\n\t\tusingLiteralPrepared Result\n\t)\n\trow := db.QueryRow(`SELECT B FROM mytable WHERE A='a'`)\n\tif err := row.Scan(&usingLiteral.Bfield); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trow = db.QueryRow(`SELECT B FROM mytable WHERE A=?`, \"a\")\n\tif err := row.Scan(&usingParam.Bfield); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tstmt, err := db.Prepare(`SELECT B FROM mytable WHERE A='a'`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stmt.Close()\n\trow = stmt.QueryRow()\n\tif err := row.Scan(&usingLiteralPrepared.Bfield); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"Type when using literal:  %T\", usingLiteral.Bfield)         // []uint8\n\tlog.Printf(\"Type when using param:    %T\", usingParam.Bfield)           // int64\n\tlog.Printf(\"Type when using prepared: %T\", usingLiteralPrepared.Bfield) // int64\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52322279/cobra-markpersistentflagrequired-not-working-on-root",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n)\nfunc main() {\n\tvar strTmp string\n\trootCmd := &cobra.Command{\n\t\tUse: \"root\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tfmt.Println(strTmp)\n\t\t},\n\t}\n\tsubCmd := &cobra.Command{\n\t\tUse: \"sub\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tfmt.Println(strTmp)\n\t\t},\n\t}\n\trootCmd.PersistentFlags().StringVarP((&strTmp), \"test\", \"t\", \"\", \"test required\")\n\trootCmd.MarkPersistentFlagRequired(\"test\")\n\trootCmd.AddCommand(subCmd)\n\trootCmd.Execute()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/48153115/how-to-push-docker-image-into-aws-ecr-using-golang-sdk",
    "body": "result, err := cli.PutImage(context.TODO(), &ecr.PutImageInput{\n\t\tRepositoryName:         aws.String(\"ecr-repo-name\"),\n\t\tImageTag:               aws.String(\"docker-image-tag\"),\n\t\tImageManifest: aws.String(\"{\\n   \\\"schemaVersion\\\": 2,\\n   \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.list.v2+json\\\",\\n   \\\"manifests\\\": [\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:dca71257cd2e72840a21f0323234bb2e33fea6d949fa0f21c5102146f583486b\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"amd64\\\",\\n            \\\"os\\\": \\\"linux\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:9cd47e9327430990c932b19596f8760e7d1a0be0311bb31bab3170bec5f27358\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"arm\\\",\\n            \\\"os\\\": \\\"linux\\\",\\n            \\\"variant\\\": \\\"v5\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:842295d11871c16bbce4d30cabc9b0f1e0cc40e49975f538179529d7798f77d8\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"arm\\\",\\n            \\\"os\\\": \\\"linux\\\",\\n            \\\"variant\\\": \\\"v6\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:0dd359f0ea0f644cbc1aa467681654c6b4332015ae37af2916b0dfb73b83fd52\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"arm\\\",\\n            \\\"os\\\": \\\"linux\\\",\\n            \\\"variant\\\": \\\"v7\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:121373e88baca4c1ef533014de2759e002961de035607dd35d00886b052e37cf\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"arm64\\\",\\n            \\\"os\\\": \\\"linux\\\",\\n            \\\"variant\\\": \\\"v8\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:ccff0c7e8498c0bd8d4705e663084c25810fd064a184671a050e1a43b86fb091\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"386\\\",\\n            \\\"os\\\": \\\"linux\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 527,\\n         \\\"digest\\\": \\\"sha256:0dc4e9a14237cae2d8e96e9e310116091c5ed4934448d7cfd22b122778964f11\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"mips64le\\\",\\n            \\\"os\\\": \\\"linux\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 528,\\n         \\\"digest\\\": \\\"sha256:04ebe37e000dcd9b1386af0e2d9aad726cbd1581f82067bea5cd2532b1f06310\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"ppc64le\\\",\\n            \\\"os\\\": \\\"linux\\\"\\n         }\\n      },\\n      {\\n         \\\"mediaType\\\": \\\"application/vnd.docker.distribution.manifest.v2+json\\\",\\n         \\\"size\\\": 528,\\n         \\\"digest\\\": \\\"sha256:c10e75f6e5442f446b7c053ff2f360a4052f759c59be9a4c7d144f60207c6eda\\\",\\n         \\\"platform\\\": {\\n            \\\"architecture\\\": \\\"s390x\\\",\\n            \\\"os\\\": \\\"linux\\\"\\n         }\\n      }\\n   ]\\n}\\n\"),\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/48153115/how-to-push-docker-image-into-aws-ecr-using-golang-sdk",
    "body": "func PushImage(ctx context.Context, cli *client.Client, target string)  {\n\tauth := types.AuthConfig{\n\t\tUsername: \"AWS\",\n\t\tPassword: \"<output of aws ecr get-login-password>\",\n\t\tServerAddress: \"<aws_account_id.dkr.ecr.region.amazonaws.com>\".\n,\n\t}\n\tauthBytes, _ := json.Marshal(auth)\n\tauthBase64 := base64.URLEncoding.EncodeToString(authBytes)\n\tpush, err := cli.ImagePush(ctx, target, types.ImagePushOptions{All: true,\n\t\tRegistryAuth:authBase64})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttermFd, isTerm := term.GetFdInfo(os.Stderr)\n\terr = jsonmessage.DisplayJSONMessagesStream(push, os.Stderr, termFd, isTerm, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/37889726/how-to-store-a-point-in-postgres-sql-database-using-gorm",
    "body": "func (p *Point) Scan(src interface{}) (err error) {\n\tvar data []byte\n\tswitch src := src.(type) {\n\tcase []byte:\n\t\tdata = src\n\tcase string:\n\t\tdata = []byte(src)\n\tcase nil:\n\t\treturn nil\n\tdefault:\n\t\treturn errors.New(\"(*Point).Scan: unsupported data type\")\n\t}\n    if len(data) == 0 {\n        return nil\n    }\n\tdata = data[1 : len(data)-1] // drop the surrounding parentheses\n\tfor i := 0; i < len(data); i++ {\n\t\tif data[i] == ',' {\n\t\t\tif p.X, err = strconv.ParseFloat(string(data[:i]), 64); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif p.Y, err = strconv.ParseFloat(string(data[i+1:]), 64); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/26081673/how-to-set-http-trailers-in-go-server",
    "body": "// Before any call to WriteHeader or Write, declare\n\t\t// the trailers you will set during the HTTP\n\t\t// response. These three headers are actually sent in\n\t\t// the trailer.\n\t\tw.Header().Set(\"Trailer\", \"AtEnd1, AtEnd2\")\n\t\tw.Header().Add(\"Trailer\", \"AtEnd3\")\n\t\tw.Header().Set(\"Content-Type\", \"text/plain; charset=utf-8\") // normal header\n\t\tw.WriteHeader(http.StatusOK)\n\t\tw.Header().Set(\"AtEnd1\", \"value 1\")\n\t\tio.WriteString(w, \"This HTTP response has both headers before this text and trailers at the end.\\n\")\n\t\tw.Header().Set(\"AtEnd2\", \"value 2\")\n\t\tw.Header().Set(\"AtEnd3\", \"value 3\") // These will appear as trailers."
  },
  {
    "url": "https://stackoverflow.com/questions/79451311/how-to-increase-the-quality-of-image-extracted-from-a-pdf-using-unipdf",
    "body": "func renderPDFPageToImage(doc *model.PdfReader, pageNum int) (image.Image, error) {\n    page, err := doc.GetPage(pageNum)\n    if err != nil {\n        return nil, err\n    }\n    // Create device with high DPI (e.g., 300 DPI)\n    device := render.NewImageDevice(render.ImageDeviceOptions{\n        DPI:                     300,\n        BackgroundColor:         color.White,\n        EnableImageCompression:  false,\n        CompressedImageQuality:  100,\n        ImageQuality:            100,\n        Scale:                   2.0,         // Optional\n        ColorSpace:              \"DeviceRGB\", // Optional\n    })\n    if err := device.RenderPage(page); err != nil {\n        return nil, err\n    }\n    return device.Image(), nil\n}\nfunc extractPDFPagesAsImages(pdfPath string, outputDir string) error {\n    f, err := os.Open(pdfPath)\n    if err != nil {\n        return err\n    }\n    defer f.Close()\n    doc, err := model.NewPdfReader(f)\n    if err != nil {\n        return err\n    }\n    numPages, err := doc.GetNumPages()\n    if err != nil {\n        return err\n    }\n    for i := 0; i < numPages; i++ {\n        img, err := renderPDFPageToImage(doc, i+1)\n        if err != nil {\n            return err\n        }\n        outputFilePath := fmt.Sprintf(\"%s/page_%d.png\", outputDir, i+1)\n        outFile, err := os.Create(outputFilePath)\n        if err != nil {\n            return err\n        }\n        encoder := png.Encoder{\n            CompressionLevel: png.NoCompression,\n        }\n\n        err = encoder.Encode(outFile, img)\n        outFile.Close()\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79369215/go-write-os-exec-command-output-to-multiple-files-breaks-context-withtimeout",
    "body": "// Program timeout (timeout.go).\npackage main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os/exec\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\ttimeout := 5 * time.Second\n\tctx := context.Background()\n\tvar logFile1, logFile2 bytes.Buffer\n\tmultiWriter := io.MultiWriter(&logFile1, &logFile2)\n\tctx, cancel := context.WithTimeout(ctx, timeout)\n\tdefer cancel()\n\tcmd := exec.CommandContext(ctx, \"bash\", \"-c\", \"./drip.sh\")\n\tcmd.SysProcAttr = &syscall.SysProcAttr{Setpgid: true}\n\tcmd.Stdout = multiWriter\n\tcmd.Stderr = multiWriter\n\tcmd.Start()\n\terr := cmd.Wait()\n\tfmt.Printf(\"program exited: %v\\n\", err)\n\tfmt.Printf(\"log1: %q\\n\", logFile1.String())\n\tfmt.Printf(\"log2: %q\\n\", logFile2.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79175673/connection-lost-eof-connection-lost-before-subscribe-completed-when-connecti",
    "body": "import (\n\t\"bufio\"\n\t\"crypto/ecdsa\"\n\t\"crypto/rsa\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\t\"golang.org/x/net/proxy\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\tMQTT \"github.com/eclipse/paho.mqtt.golang\"\n)\ntype TlsCerts struct {\n\tIotPrivateKey     string\n\tIotCertificatePem string\n\tCaCertificatePem  string\n\tAlnpProtocols     []string\n}\ntype Config struct {\n\tClientId  string\n\tBrokerUrl string\n\tTlsCerts  TlsCerts\n}\ntype httpProxy struct {\n\thost     string\n\thaveAuth bool\n\tusername string\n\tpassword string\n\tforward  proxy.Dialer\n}\nfunc parseTlsConfig(tlsCerts TlsCerts) *tls.Config {\n\tif tlsCerts.IotPrivateKey == \"\" || tlsCerts.IotCertificatePem == \"\" {\n\t\treturn nil\n\t}\n\tcert := parseTlsCertificates(tlsCerts)\n\tcaCertPool := x509.NewCertPool()\n\tcaCertPool.AppendCertsFromPEM([]byte(AmazonRootCA1Cert))\n\treturn &tls.Config{\n\t\tRootCAs:            caCertPool,\n\t\tCertificates:       []tls.Certificate{cert},\n\t\tInsecureSkipVerify: false,\n\t\tNextProtos:         tlsCerts.AlnpProtocols,\n\t\tServerName:         \"iot.customdomain.io\",\n\t}\n}\nfunc parseTlsCertificates(\n\ttlsCerts TlsCerts,\n) tls.Certificate {\n\tblock, _ := pem.Decode([]byte(tlsCerts.IotPrivateKey))\n\tif block == nil {\n\t\tlog.Panic(\"Failed to parse private key\")\n\t}\n\tvar key interface{}\n\tvar err error\n\tkey, err = x509.ParsePKCS1PrivateKey(block.Bytes)\n\tif err != nil {\n\t\tkey, err = x509.ParsePKCS8PrivateKey(block.Bytes)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Failed to parse private key: %v\", err)\n\t\t}\n\t\tswitch k := key.(type) {\n\t\tcase *rsa.PrivateKey:\n\t\t\tkey = k\n\t\tcase *ecdsa.PrivateKey:\n\t\t\tkey = k\n\t\tdefault:\n\t\t\tlog.Panicf(\"Unsupported private key type: %T\", key)\n\t\t}\n\t}\n\tblock, _ = pem.Decode([]byte(tlsCerts.IotCertificatePem))\n\tif block == nil {\n\t\tlog.Panic(\"Failed to parse certificate\")\n\t}\n\tcert, err := x509.ParseCertificate(block.Bytes)\n\tif err != nil {\n\t\tlog.Panicf(\"Failed to parse certificate: %v\", err)\n\t}\n\treturn tls.Certificate{\n\t\tPrivateKey:  key,\n\t\tCertificate: [][]byte{cert.Raw},\n\t}\n}\nfunc (s httpProxy) String() string {\n\treturn fmt.Sprintf(\"HTTP proxy dialer for %s\", s.host)\n}\nfunc newHTTPProxy(uri *url.URL, forward proxy.Dialer) (proxy.Dialer, error) {\n\ts := new(httpProxy)\n\ts.host = uri.Host\n\ts.forward = forward\n\tif uri.User != nil {\n\t\ts.haveAuth = true\n\t\ts.username = uri.User.Username()\n\t\ts.password, _ = uri.User.Password()\n\t}\n\treturn s, nil\n}\nfunc (s *httpProxy) Dial(_, addr string) (net.Conn, error) {\n\treqURL := url.URL{\n\t\tScheme: \"https\",\n\t\tHost:   addr,\n\t}\n\treq, err := http.NewRequest(\"CONNECT\", reqURL.String(), nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq.Close = false\n\tif s.haveAuth {\n\t\treq.SetBasicAuth(s.username, s.password)\n\t}\n\treq.Header.Set(\"User-Agent\", \"paho.mqtt\")\n\t// Dial and create the client connection.\n\tc, err := s.forward.Dial(\"tcp\", s.host)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = req.Write(c)\n\tif err != nil {\n\t\t_ = c.Close()\n\t\treturn nil, err\n\t}\n\tresp, err := http.ReadResponse(bufio.NewReader(c), req)\n\tif err != nil {\n\t\t_ = c.Close()\n\t\treturn nil, err\n\t}\n\t_ = resp.Body.Close()\n\tif resp.StatusCode != http.StatusOK {\n\t\t_ = c.Close()\n\t\treturn nil, fmt.Errorf(\"proxied connection returned an error: %v\", resp.Status)\n\t}\n\tTlsCerts := TlsCerts{\n\t\tIotPrivateKey:     IotPrivateKey,\n\t\tIotCertificatePem: IotCertificatePem,\n\t\tAlnpProtocols:     []string{\"mqtt\", \"x-amzn-mqtt-ca\"},\n\t}\n\ttlsConfig := parseTlsConfig(TlsCerts)\n\ttlsConn := tls.Client(c, tlsConfig)\n\treturn tlsConn, nil\n}\nfunc init() {\n\t// Pre-register custom HTTP proxy dialers for use with proxy.FromEnvironment\n\tproxy.RegisterDialerType(\"http\", newHTTPProxy)\n\tproxy.RegisterDialerType(\"https\", newHTTPProxy)\n}\nfunc onMessageReceived(client MQTT.Client, message MQTT.Message) {\n\tfmt.Printf(\"Received message on topic: %s\\n\", message.Topic())\n\tfmt.Printf(\"Message: %s\\n\", message.Payload())\n}\nvar messagePubHandler MQTT.MessageHandler = func(client MQTT.Client, msg MQTT.Message) {\n\tfmt.Println(\"Received message on topic: \" + msg.Topic())\n\tProcessMessage(msg.Payload())\n}\nfunc ProcessMessage(payload []byte) {\n\tfmt.Println(string(payload))\n}\nfunc MainFunc() {\n\tMQTT.DEBUG = log.New(os.Stdout, \"\", 0)\n\tMQTT.ERROR = log.New(os.Stderr, \"\", 0)\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, os.Interrupt, syscall.SIGTERM)\n\tserver := \"https://iot.customdomain.io:443\"\n\ttopic := \"right/topic/now\"\n\tqos := 0\n\tclientid := \"my-client-id\"\n\tos.Setenv(\"ALL_PROXY\", fmt.Sprintf(\"http://localhost:%s\", \"3128\"))\n\tdefer os.Unsetenv(\"ALL_PROXY\")\n\tconnOpts := MQTT.NewClientOptions().AddBroker(server).\n\t\tSetClientID(clientid).\n\t\tSetCleanSession(true).\n\t\tSetProtocolVersion(4)\n\tconnOpts.OnConnect = func(c MQTT.Client) {\n\t\tif token := c.Subscribe(topic, byte(qos), onMessageReceived); token.Wait() && token.Error() != nil {\n\t\t\tfmt.Println(token.Error())\n\t\t}\n\t\ttext := `{\"message\": \"Hello MQTT\"}`\n\t\ttoken := c.Publish(topic, byte(qos), false, text)\n\t\ttoken.Wait()\n\t}\n\tdialer := proxy.FromEnvironment()\n\tconnOpts.SetCustomOpenConnectionFn(func(uri *url.URL, options MQTT.ClientOptions) (net.Conn, error) {\n\t\tfmt.Printf(\"Custom dialer invoked for %s\\n\", uri.Host) // Debug log for verification\n\t\taddress := uri.Host\n\t\treturn dialer.Dial(uri.Scheme, address)\n\t})\n\tclient := MQTT.NewClient(connOpts)\n\tif token := client.Connect(); token.Wait() && token.Error() != nil {\n\t\tpanic(token.Error())\n\t}\n\tfmt.Printf(\"Connected to %s\\n\", server)\n\ttime.Sleep(1 * time.Second)\n\tfmt.Println(\"Disconnecting\")\n\tclient.Disconnect(250)\n\tfmt.Println(\"Exiting\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78547843/go-how-to-test-a-siphash-2-4-function-with-known-vectors",
    "body": "package main\nimport (\n\t\"encoding/binary\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/dchest/siphash\"\n)\nfunc main() {\n\tkey, _ := hex.DecodeString(\"000102030405060708090a0b0c0d0e0f\")\n\tmessage, _ := hex.DecodeString(\"\")\n\thash := sipHashDigest(key, message)\n\tfmt.Println(toBytes(hash)) // 310e0edd47db6f72\n\tmessage, _ = hex.DecodeString(\"00\")\n\thash = sipHashDigest(key, message)\n\tfmt.Println(toBytes(hash)) // fd67dc93c539f874\n\tmessage, _ = hex.DecodeString(\"000102030405060708090a0b0c0d0e0f\")\n\thash = sipHashDigest(key, message)\n\tfmt.Println(toBytes(hash)) // db9bc2577fcc2a3f\n\tmessage, _ = hex.DecodeString(\"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e\")\n\thash = sipHashDigest(key, message)\n\tfmt.Println(toBytes(hash)) // 724506eb4c328a95\n}\nfunc splitKey(key []byte) (uint64, uint64) {\n\tkey0 := binary.LittleEndian.Uint64(key[:8])\n\tkey1 := binary.LittleEndian.Uint64(key[8:])\n\treturn key0, key1\n}\nfunc sipHashDigest(randomBytes []byte, message []byte) uint64 {\n\tkey0, key1 := splitKey(randomBytes)\n\treturn siphash.Hash(key0, key1, message)\n}\nfunc toBytes(data uint64) string {\n\tdataBytes := make([]byte, 8)\n\tbinary.LittleEndian.PutUint64(dataBytes, uint64(data))\n\treturn hex.EncodeToString(dataBytes)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78459068/a-persistent-kv-to-disk-with-a-go-mapstringstring",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"log\"\n\t\"crawshaw.dev/jsonfile\"\n\t\"github.com/google/uuid\"\n)\ntype Data struct {\n\tIdentifiers map[string]string `json:\"identifiers\"`\n}\nconst (\n\tdbPath     = \"resolver.json\"\n\tmissingKey = \"MISSING-KEY\"\n)\nfunc main() {\n\tdb, err := jsonfile.Load[Data](dbPath)\n\tif errors.Is(err, fs.ErrNotExist) {\n\t\tdb, err = jsonfile.New[Data](dbPath)\n\t}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = readWrite(db)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc readWrite(db *jsonfile.JSONFile[Data]) error {\n\tvar (\n\t\tv         string\n\t\tkeyExists bool\n\t)\n\tdb.Read(func(d *Data) {\n\t\tv, keyExists = d.Identifiers[missingKey]\n\t})\n\tif keyExists {\n\t\tfmt.Println(v)\n\t\treturn nil\n\t}\n\tv = uuid.NewString()\n\treturn db.Write(func(d *Data) error {\n\t\tif d.Identifiers == nil {\n\t\t\td.Identifiers = make(map[string]string)\n\t\t}\n\t\td.Identifiers[missingKey] = v\n\t\treturn nil\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78439582/interoperability-between-go-and-ruby-verify-an-rsa-signature",
    "body": "func (r request) EncodeAndSign(key *rsa.PrivateKey) (string, string) {\n\tdata, err := json.Marshal(&r)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    // Base 64 encode the data before signing.\n\tdata_b64 := base64.StdEncoding.Strict().EncodeToString(data)\n\thashed := sha256.Sum256([]byte(data_b64))\n\tsignature, err := rsa.SignPKCS1v15(nil, key, crypto.SHA256, hashed[:])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsignature_b64 := base64.StdEncoding.Strict().EncodeToString(signature)\n    // Return both the base 64 encoded json data and the base 64 encoded\n    // signature.\n\treturn data_b64, signature_b64\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78435544/golang-gin-when-to-use-handlecontext-and-when-redirect",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\tr := gin.Default()\n    // Switch the uncommented block in order to see the effect of HandleContext.\n\t/* r.GET(\"/test\", func(c *gin.Context) {\n\t\tc.Request.URL.Path = \"/test2\"\n\t\tr.HandleContext(c)\n\t})\n\tr.GET(\"/test2\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"hello\": \"world\"})\n\t}) */\n\tr.GET(\"/test\", func(c *gin.Context) {\n\t\tc.Redirect(http.StatusMovedPermanently, \"/test2\")\n\t})\n\tr.GET(\"/test2\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\"hello\": \"world\"})\n\t})\n\tr.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78201714/gorm-foreign-keys",
    "body": "type Model struct {\n    ID        uuid.UUID `gorm:\"type:uuid;primary_key;\"`\n    CreatedAt time.Time\n    UpdatedAt time.Time\n    DeletedAt *time.Time `sql:\"index\"`\n}\nfunc (model *Model) BeforeCreate(tx *gorm.DB) (err error) {\n    model.ID = uuid.New()\n    return\n}\ntype User struct {\n    Model\n    Name                string\n    Email               string `gorm:\"primaryKey\"`\n    Description         string\n    AccountCredentials  AccountCredentials  `gorm:\"foreignKey:Email;references:Email;constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"`\n    AccountVerification AccountVerification `gorm:\"foreignKey:Email;references:Email;constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"`\n}\ntype AccountCredentials struct {\n    Email    string `gorm:\"primaryKey\"`\n    Password string\n}\ntype AccountVerification struct {\n    Email               string `gorm:\"primaryKey\"`\n    VerificationCode    string\n    VerificationCodeTTL int64\n    IsVerified          bool\n    CreatedAt           time.Time `gorm:\"autoCreateTime:true\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78172699/rapid-memory-growth-caused-by-go-calling-objective-c",
    "body": "// Rename this to Create... rather than Capture... It now returns a\n// retained object, so needs to have the word Create in its name.\n// https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFMemoryMgmt/Concepts/Ownership.html#//apple_ref/doc/uid/20001148-103029\nCFDataRef CreateWindowImageData(CGWindowID windowNumber) {\n    // Create your pool\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    CGWindowID windowList[] = {windowNumber};\n    // ...\n    [nsImage release];\n    // [rep release];   <---- delete this; you don't own this object\n    // Hold onto your imageData\n    CFRetain(imageData);\n    // Drain the rest of the pool\n    [pool drain];\n    return imageData;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78108359/reading-json-data-and-show-it-on-web-page",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype Root struct {\n\tIndex []Index `json:\"index\"`\n}\ntype Index struct {\n\tLocations []string `json:\"locations\"`\n}\nfunc main() {\n\tvar root Root\n\tif err := json.Unmarshal([]byte(output), &root); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"entries: %d\\n\", len(root.Index))\n}\nconst output = `{\"index\":[{\"id\":1,\"locations\":[\"north_carolina-usa\",\"georgia-usa\",\"los_angeles-usa\",\"saitama-japan\",\"osaka-japan\",\"nagoya-japan\",\"penrose-new_zealand\",\"dunedin-new_zealand\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/1\"},{\"id\":2,\"locations\":[\"playa_del_carmen-mexico\",\"papeete-french_polynesia\",\"noumea-new_caledonia\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/2\"},{\"id\":3,\"locations\":[\"london-uk\",\"lausanne-switzerland\",\"lyon-france\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/3\"},{\"id\":4,\"locations\":[\"victoria-australia\",\"new_south_wales-australia\",\"queensland-australia\",\"auckland-new_zealand\",\"yogyakarta-indonesia\",\"bratislava-slovakia\",\"budapest-hungary\",\"minsk-belarus\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/4\"},{\"id\":5,\"locations\":[\"california-usa\",\"nevada-usa\",\"georgia-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/5\"},{\"id\":6,\"locations\":[\"california-usa\",\"sao_paulo-brazil\",\"san_isidro-argentina\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/6\"},{\"id\":7,\"locations\":[\"california-usa\",\"arizona-usa\",\"texas-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/7\"},{\"id\":8,\"locations\":[\"stockholm-sweden\",\"werchter-belgium\",\"lisbon-portugal\",\"bilbao-spain\",\"georgia-usa\",\"bogota-colombia\",\"sao_paulo-brazil\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/8\"},{\"id\":9,\"locations\":[\"new_york-usa\",\"dusseldorf-germany\",\"aarhus-denmark\",\"manchester-uk\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/9\"},{\"id\":10,\"locations\":[\"frankfurt-germany\",\"berlin-germany\",\"stockholm-sweden\",\"copenhagen-denmark\",\"werchter-belgium\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/10\"},{\"id\":11,\"locations\":[\"doha-qatar\",\"minnesota-usa\",\"illinois-usa\",\"california-usa\",\"mumbai-india\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/11\"},{\"id\":12,\"locations\":[\"abu_dhabi-united_arab_emirates\",\"new_york-usa\",\"pennsylvania-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/12\"},{\"id\":13,\"locations\":[\"westcliff_on_sea-uk\",\"merkers-germany\",\"illinois-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/13\"},{\"id\":14,\"locations\":[\"nevada-usa\",\"arizona-usa\",\"california-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/14\"},{\"id\":15,\"locations\":[\"london-uk\",\"new_york-usa\",\"maine-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/15\"},{\"id\":16,\"locations\":[\"berlin-germany\",\"copenhagen-denmark\",\"aarhus-denmark\",\"gothenburg-sweden\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/16\"},{\"id\":17,\"locations\":[\"florida-usa\",\"south_carolina-usa\",\"north_carolina-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/17\"},{\"id\":18,\"locations\":[\"pagney_derriere_barine-france\",\"hamburg-germany\",\"boulogne_billancourt-france\",\"nimes-france\",\"sion-switzerland\",\"ostrava-czechia\",\"klagenfurt-austria\",\"freyming_merlebach-france\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/18\"},{\"id\":19,\"locations\":[\"nevada-usa\",\"london-uk\",\"manchester-uk\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/19\"},{\"id\":20,\"locations\":[\"zaragoza-spain\",\"madrid-spain\",\"barcelona-spain\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/20\"},{\"id\":21,\"locations\":[\"rio_de_janeiro-brazil\",\"recife-brazil\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/21\"},{\"id\":22,\"locations\":[\"california-usa\",\"leipzig-germany\",\"salem-germany\",\"monchengladbach-germany\",\"cuxhaven-germany\",\"skanderborg-denmark\",\"amsterdam-netherlands\",\"burriana-spain\",\"oulu-finland\",\"budapest-hungary\",\"napoca-romania\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/22\"},{\"id\":23,\"locations\":[\"riyadh-saudi_arabia\",\"rio_de_janeiro-brazil\",\"canton-usa\",\"quebec-canada\",\"new_york-usa\",\"california-usa\",\"las_vegas-usa\",\"mexico_city-mexico\",\"monterrey-mexico\",\"del_mar-usa\",\"berlin-germany\",\"lisbon-portugal\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/23\"},{\"id\":24,\"locations\":[\"washington-usa\",\"west_melbourne-australia\",\"amsterdam-netherlands\",\"paris-france\",\"manchester-uk\",\"missouri-usa\",\"chicago-usa\",\"birmingham-uk\",\"copenhagen-denmark\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/24\"},{\"id\":25,\"locations\":[\"west_melbourne-australia\",\"sydney-australia\",\"madison-usa\",\"toronto-canada\",\"cleveland-usa\",\"new_york-usa\",\"boston-usa\",\"texas-usa\",\"utah-usa\",\"california-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/25\"},{\"id\":26,\"locations\":[\"manchester-uk\",\"glasgow-uk\",\"dublin-ireland\",\"cardiff-uk\",\"london-uk\",\"aberdeen-uk\",\"stockholm-sweden\",\"madrid-spain\",\"paris-france\",\"warsaw-poland\",\"berlin-germany\",\"milan-italy\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/26\"},{\"id\":27,\"locations\":[\"michigan-usa\",\"new_hampshire-usa\",\"new_york-usa\",\"warsaw-poland\",\"sochaux-france\",\"lyon-france\",\"eindhoven-netherlands\",\"oslo-norway\",\"amsterdam-netherlands\",\"colorado-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/27\"},{\"id\":28,\"locations\":[\"jakarta-indonesia\",\"huizhou-china\",\"texas-usa\",\"michigan-usa\",\"changzhou-china\",\"hong_kong-china\",\"colorado-usa\",\"sanya-china\",\"aalborg-denmark\",\"washington-usa\",\"new_york-usa\",\"toronto-canada\",\"seattle-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/28\"},{\"id\":29,\"locations\":[\"omaha-usa\",\"kansas_city-usa\",\"st_louis-usa\",\"indianapolis-usa\",\"rosemont-usa\",\"grand_rapids-usa\",\"toronto-usa\",\"montreal-usa\",\"newark-usa\",\"uniondale-usa\",\"philadelphia-usa\",\"hershey-usa\",\"pittsburgh-usa\",\"washington-usa\",\"columbia-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/29\"},{\"id\":30,\"locations\":[\"santiago-chile\",\"sao_paulo-brazil\",\"los_angeles-usa\",\"houston-usa\",\"atlanta-usa\",\"new_orleans-usa\",\"philadelphia-usa\",\"london-uk\",\"frauenfeld-switzerland\",\"turku-finland\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/30\"},{\"id\":31,\"locations\":[\"las_vegas-usa\",\"brooklyn-usa\",\"boston-usa\",\"washington-usa\",\"philadelphia-usa\",\"montreal-canada\",\"toronto-usa\",\"new_york-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/31\"},{\"id\":32,\"locations\":[\"frankfurt-germany\",\"berlin-germany\",\"stockholm-sweden\",\"copenhagen-denmark\",\"imola-italy\",\"vienna-austria\",\"london-uk\",\"krakow-poland\",\"budapest-hungary\",\"zurich-switzerland\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/32\"},{\"id\":33,\"locations\":[\"philadelphia-usa\",\"paris-france\",\"amityville-usa\",\"chicago-usa\",\"minneapolis-usa\",\"detroit-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/33\"},{\"id\":34,\"locations\":[\"oakland-usa\",\"charlotte-usa\",\"los_angeles-usa\",\"berlin-germany\",\"houston-usa\",\"chicago-usa\",\"inglewood-usa\",\"madrid-spain\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/34\"},{\"id\":35,\"locations\":[\"windsor-canada\",\"brooklyn-usa\",\"birmingham-uk\",\"cincinnati-usa\",\"anaheim-usa\",\"chicago-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/35\"},{\"id\":36,\"locations\":[\"manila-philippines\",\"mumbai-india\",\"auckland-new_zealand\",\"brisbane-australia\",\"melbourne-australia\",\"sydney-australia\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/36\"},{\"id\":37,\"locations\":[\"bogota-colombia\",\"rio_de_janeiro-brazil\",\"sao_paulo-brazil\",\"santiago-chile\",\"san_isidro-argentina\",\"lima-peru\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/37\"},{\"id\":38,\"locations\":[\"paris-france\",\"groningen-netherlands\",\"antwerp-belgium\",\"vienna-austria\",\"glasgow-uk\",\"london-uk\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/38\"},{\"id\":39,\"locations\":[\"mexico_city-mexico\",\"pico_rivera-usa\",\"chicago-usa\",\"boston-usa\",\"philadelphia-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/39\"},{\"id\":40,\"locations\":[\"london-uk\",\"berwyn-usa\",\"georgia-usa\",\"new_york-usa\",\"dallas-usa\",\"houston-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/40\"},{\"id\":41,\"locations\":[\"california-usa\",\"birmingham-uk\",\"brixton-uk\",\"london-uk\",\"rotselaar-belgium\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/41\"},{\"id\":42,\"locations\":[\"california-usa\",\"rio_de_janeiro-brazil\",\"los_angeles-usa\",\"alabama-usa\",\"massachusetts-usa\",\"athens-greece\",\"florence-italy\",\"landgraaf-netherlands\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/42\"},{\"id\":43,\"locations\":[\"sydney-australia\",\"melbourne-australia\",\"burswood-australia\",\"wellington-new_zealand\",\"abu_dhabi-united_arab_emirates\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/43\"},{\"id\":44,\"locations\":[\"madrid-spain\",\"seville-spain\",\"los_angeles-usa\",\"bangkok-thailand\",\"manila-philippines\",\"taipei-taiwan\",\"hong_kong-china\",\"seoul-south_korea\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/44\"},{\"id\":45,\"locations\":[\"munich-germany\",\"mannheim-germany\",\"san_francisco-usa\",\"santiago-chile\",\"buenos_aires-argentina\",\"porto_alegre-brazil\",\"sao_paulo-brazil\",\"belo_horizonte-brazil\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/45\"},{\"id\":46,\"locations\":[\"california-usa\",\"sao_paulo-brazil\",\"porto_alegre-brazil\",\"la_plata-argentina\",\"london-uk\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/46\"},{\"id\":47,\"locations\":[\"dubai-united_arab_emirates\",\"willemstad-netherlands_antilles\",\"florida-usa\",\"florida-usa\",\"mexico_city-mexico\",\"santiago-chile\",\"sao_paulo-brazil\",\"brasilia-brazil\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/47\"},{\"id\":48,\"locations\":[\"texas-usa\",\"oklahoma-usa\",\"california-usa\",\"illinois-usa\",\"scheessel-germany\",\"st_gallen-switzerland\",\"gdynia-poland\",\"arras-france\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/48\"},{\"id\":49,\"locations\":[\"washington-usa\",\"california-usa\",\"california-usa\",\"arizona-usa\",\"florida-usa\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/49\"},{\"id\":50,\"locations\":[\"mexico_city-mexico\",\"sao_paulo-brazil\",\"buenos_aires-argentina\",\"santiago-chile\",\"lima-peru\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/50\"},{\"id\":51,\"locations\":[\"bogota-colombia\",\"san_jose-costa_rica\",\"nevada-usa\",\"massachusetts-usa\",\"massachusetts-usa\",\"nickelsdorf-austria\",\"milan-italy\",\"lisbon-portugal\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/51\"},{\"id\":52,\"locations\":[\"oregon-usa\",\"vancouver-canada\",\"nevada-usa\",\"colorado-usa\",\"munich-germany\",\"prague-czechia\",\"milan-italy\"],\"dates\":\"https://groupietrackers.herokuapp.com/api/dates/52\"}]}`\n// output: entries: 52"
  },
  {
    "url": "https://stackoverflow.com/questions/77993581/go-http-1-22-subrouter",
    "body": "package httphelp\nfunc Subrouter(router *http.ServeMux, route string) *http.ServeMux {\n\tsr := http.NewServeMux()\n\troute = strings.TrimSuffix(route, \"/\")\n\trouter.Handle(route, removePrefix(sr, route))\n\trouter.Handle(route+\"/\", removePrefix(sr, route))\n\treturn sr\n}\nfunc removePrefix(h http.Handler, prefix string) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tpath := r.URL.Path\n\t\tr.URL.Path = \"/\" + strings.TrimPrefix(strings.TrimPrefix(path, prefix), \"/\")\n\t\th.ServeHTTP(w, r)\n\t\tr.URL.Path = path\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77975057/how-to-model-golang-rwlock-using-promela-modeling-language",
    "body": "ReaderA does acquire_read and proceeds\nWriterA does acquire_write and blocks\nReaderB does acquire_read and blocks /* since WriterA.acquire_write is pending */\nWriterB does acquire_write and blocks * since WriterB.release_write hasn't been esecuted called yet */\nReaderC does acquire_read and /* blocks since there are pending writers */\nReaderA does release_read\n/* Expected (not sure):\n   WriterA unblocks, what about your model?\n   WriterB is blocked,\n   ReaderB and ReaderC are blocked due to the ordering requirement:\n     WriterA.acquire_read was before ReaderB.acquire_read\n*/\nWriterA does release_write\n/* Expected (not sure):\n   ReaderB proceeds,\n   WriterB is blocked due to the ordering requirement:\n     ReaderB.acquire_read was called before WriterB.acquire_read\n   ReaderC is blocked due to pending writer\n*/\nReaderB does release_read\n/* Expected (not sure):\n   WriterB proceedes due to the ordering requirement:\n     it was blocked before ReaderC\n   ReaderC\n*/"
  },
  {
    "url": "https://stackoverflow.com/questions/77802294/benchmarking-ways-to-avoid-processing-duplicate-messages-in-a-go-concurrent-envi",
    "body": "type Message struct {\n\tData []byte\n}\nfunc (key Message) compare(other Message) int {\n\treturn bytes.Compare(key.Data, other.Data) // make the message comparable\n}\nfunc BenchmarkConcurrentMap(b *testing.B) {\n\tm := cmap.NewWithCustomShardingFunction[*Message, bool](\n\t\tfunc(key *Message) uint32 {\n\t\t\treturn adler32.Checksum(key.Data) // use adler32 for sharding only\n\t\t})\n\ttotalLoads := 0\n\tb.ResetTimer()\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tvar i int\n\t\tfor pb.Next() {\n\t\t\ti = mr.Int() % 10000000\n\t\t\tabsent := m.SetIfAbsent(keys[i], true) // store the message itself as key\n\t\t\tif !absent {\n\t\t\t\t// wouldnt process message\n\t\t\t\ttotalLoads++\n\t\t\t}\n\t\t}\n\t})\n\tb.ReportMetric(float64(totalLoads), \"loads\")\n}\nfunc generateRandomBytes(n int) (*Message, error) {\n\tm := &Message{make([]byte, n)}\n\t_, err := rand.Read(m.Data)\n\treturn m, err\n}\nfunc generateRandomKeys(n int) []*Message {\n\tvar KEY_SIZE = 1000\n\tkeys := make([]*Message, n)\n\tkeys[0], _ = generateRandomBytes(KEY_SIZE)\n\tb := make([]byte, 1)\n\tfor i := 1; i < n; i++ {\n\t\tkeys[i] = &Message{make([]byte, KEY_SIZE)}\n\t\tcopy(keys[i].Data, keys[i-1].Data)\n\t\trand.Read(b)\n\t\tkeys[i].Data[mr.Int()%KEY_SIZE] = b[0]\n\t}\n\treturn keys\n}\nvar keys = generateRandomKeys(10000000)"
  },
  {
    "url": "https://stackoverflow.com/questions/77667831/is-there-any-way-to-get-rid-of-cors-in-google-cloud-functions",
    "body": "package p\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/jub0bs/cors\"\n)\nvar Handler func(w http.ResponseWriter, r *http.Request)\nfunc init() {\n\tcorsMw, err := cors.NewMiddleware(cors.Config{\n\t\tOrigins:        []string{\"*\"},\n\t\tMethods:        []string{http.MethodPost},\n\t\tRequestHeaders: []string{\"Content-Type\"},\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tHandler = corsMw.Wrap(http.HandlerFunc(HelloWorld)).ServeHTTP\n}\nfunc HelloWorld(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprint(w, \"Hello World!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77667831/is-there-any-way-to-get-rid-of-cors-in-google-cloud-functions",
    "body": "package helloworld\nimport (\n  \"fmt\"\n  \"log\"\n  \"net/http\"\n  \"github.com/GoogleCloudPlatform/functions-framework-go/functions\"\n  \"github.com/jub0bs/cors\"\n)\nfunc init() {\n    corsMw, err := cors.NewMiddleware(cors.Config{\n\t\tOrigins:        []string{\"*\"},\n\t\tMethods:        []string{http.MethodPost},\n\t\tRequestHeaders: []string{\"Content-Type\"},\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n    handler := corsMw.Wrap(http.HandlerFunc(HelloWorld)).ServeHTTP\n    functions.HTTP(\"HelloHTTP\", handler)\n}\nfunc HelloWorld(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprint(w, \"Hello World!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77434444/how-to-query-aws-dynamodb-using-keyconditionexpression-with-the-v2-go-sdk",
    "body": "// TableBasics encapsulates the Amazon DynamoDB service actions used in the examples.\n// It contains a DynamoDB service client that is used to act on the specified table.\ntype TableBasics struct {\n\tDynamoDbClient *dynamodb.Client\n\tTableName      string\n}\n// Query gets all movies in the DynamoDB table that were released in the specified year.\n// The function uses the `expression` package to build the key condition expression\n// that is used in the query.\nfunc (basics TableBasics) Query(releaseYear int) ([]Movie, error) {\n\tvar err error\n\tvar response *dynamodb.QueryOutput\n\tvar movies []Movie\n\tkeyEx := expression.Key(\"year\").Equal(expression.Value(releaseYear))\n\texpr, err := expression.NewBuilder().WithKeyCondition(keyEx).Build()\n\tif err != nil {\n\t\tlog.Printf(\"Couldn't build expression for query. Here's why: %v\\n\", err)\n\t} else {\n\t\tresponse, err = basics.DynamoDbClient.Query(context.TODO(), &dynamodb.QueryInput{\n\t\t\tTableName:                 aws.String(basics.TableName),\n\t\t\tExpressionAttributeNames:  expr.Names(),\n\t\t\tExpressionAttributeValues: expr.Values(),\n\t\t\tKeyConditionExpression:    expr.KeyCondition(),\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Couldn't query for movies released in %v. Here's why: %v\\n\", releaseYear, err)\n\t\t} else {\n\t\t\terr = attributevalue.UnmarshalListOfMaps(response.Items, &movies)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Couldn't unmarshal query response. Here's why: %v\\n\", err)\n\t\t\t}\n\t\t}\n\t}\n\treturn movies, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77360958/controlling-exponential-spawning-of-go-routines",
    "body": "func main() {\n    serverRequest()\n}\ntype data struct {\n    a int\n    b bool\n}\nfunc serverRequest() {\n    jobs := make(chan data)\n    workersCount := 5\n    for i :=0; i < workersCount; i++ {\n        go asyncWorkWorker(jobs)\n    }\n    d := syncWork()\n    jobs <- d\n    // remember to block the call\n    // return api response\n}\nfunc syncWork() data {\n    return data {\n        10,\n        false,\n    }\n}\nfunc asyncWorkWorker(jobs <-chan data) {\n    for job := range jobs {\n        asyncWork(job)\n    }\n}\nfunc asyncWork(d data) {\n    // making network calls with data d\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77244260/go-redis-hset-struct-with-pointer-fields",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"github.com/redis/go-redis/v9\"\n)\ntype pointer struct {\n\tPtrInt *int\n\tPtrStr *string\n}\nfunc main() {\n\tctx := context.Background()\n\tcl := redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t\tPoolSize: 100,\n\t})\n\ti := 1\n\ts := \"s\"\n\tp := pointer{&i, &s}\n\tdata, err := json.Marshal(p)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar inInterface map[string]interface{}\n\terr = json.Unmarshal(data, &inInterface)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = cl.HSet(ctx, \"key\", inInterface).Err()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77153407/azure-monitor-exporter-with-golang",
    "body": "package main\nimport (\n    \"context\"\n    \"log\"\n    \"os\"\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/exporters/azuremonitorexporter\"\n)\nfunc main() {\n    // Retrieve your Azure Monitor Instrumentation Key from an environment variable.\n    instrumentationKey := os.Getenv(\"INSTRUMENTATION_KEY\")\n    if instrumentationKey == \"\" {\n        log.Fatal(\"Please set the INSTRUMENTATION_KEY environment variable.\")\n    }\n    // Create an Azure Monitor exporter with the specified Instrumentation Key.\n    exporter, err := azuremonitorexporter.NewExporter(azuremonitorexporter.WithInstrumentationKey(instrumentationKey))\n    if err != nil {\n        log.Fatalf(\"Failed to create Azure Monitor exporter: %v\", err)\n    }\n    // Set up the OpenTelemetry TracerProvider with the Azure Monitor exporter.\n    tp := otel.NewTracerProvider(\n        otel.WithBatcher(exporter),\n    )\n    // Set the TracerProvider as the global tracer provider.\n    otel.SetTracerProvider(tp)\n    // Your application logic here...\n    // Ensure that telemetry data is flushed before the program exits.\n    if err := tp.Shutdown(context.Background()); err != nil {\n        log.Fatalf(\"Error shutting down tracer provider: %v\", err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77102569/redis-getting-redis-nil-error-in-rdb-pipelined-despite-data-being-present",
    "body": "// Exec executes all previously queued commands using one\n// client-server roundtrip.\n//\n// Exec always returns list of commands and error of the first failed\n// command if any.\nfunc (c *Pipeline) Exec(ctx context.Context) ([]Cmder, error) {\n\tif len(c.cmds) == 0 {\n\t\treturn nil, nil\n\t}\n\tcmds := c.cmds\n\tc.cmds = nil\n\treturn cmds, c.exec(ctx, cmds)\n}\nfunc (c *Pipeline) Pipelined(ctx context.Context, fn func(Pipeliner) error) ([]Cmder, error) {\n\tif err := fn(c); err != nil {\n\t\treturn nil, err\n\t}\n\treturn c.Exec(ctx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76891908/criss-cross-address-deduplication",
    "body": "-- Create Address Table\nCREATE TABLE address (\n    Id SERIAL PRIMARY KEY,\n    Address TEXT NOT NULL,\n    Pincode TEXT NOT NULL,\n    City TEXT NOT NULL,\n    Province TEXT NOT NULL\n);\n-- Create Person Table\nCREATE TABLE persons (\n    Id SERIAL PRIMARY KEY,\n    Name TEXT NOT NULL,\n    Father_Name TEXT NOT NULL,\n    Email TEXT NOT NULL,\n    DOB DATE NOT NULL,\n    POA_Id TEXT NOT NULL,\n    POI_Id TEXT NOT NULL,\n    Pincode TEXT NOT NULL,\n    AddressId INTEGER REFERENCES address(Id)\n);\n-- Insert statements for data provided\nINSERT INTO address (Address, Pincode, City, Province)\nVALUES\n    ('mini market 850 vijay street', '110056', 'XYZ', 'ABC'),\n    ('45 street south coast near Bank', '285006', 'MNO', 'DEF'),\n    ('45 street south coast near Bank', '285006', 'MNO', 'DEF');\nINSERT INTO persons (Name, Father_Name, Email, DOB, POA_Id, POI_Id, Pincode, AddressId)\nVALUES\n    ('PN1', 'FN1', 'pn1.fn1@d1.com', '2000-01-01', 'poi_1', 'poa_2', '110056', 1),\n    ('PN1', 'FN1', 'pn1.fn1@d1.com', '2000-01-01', 'poi_1', 'poi_1', '285006', 2),\n    ('PN1', 'FN1', 'pn1.fn1@d1.com', '2000-01-01', 'poi_3', 'poa_3', '285006', 3);"
  },
  {
    "url": "https://stackoverflow.com/questions/76891908/criss-cross-address-deduplication",
    "body": "-- Import fuzzy matching to add some flexibility to matching addresses\n-- (https://www.postgresql.org/docs/9.1/fuzzystrmatch.html)\nCREATE EXTENSION fuzzystrmatch;\n-- Proposed query\nSELECT p1.*\nFROM persons p1\nJOIN address a1 ON p1.addressId = a1.Id\nWHERE (p1.poi_id = 'poi_1' OR p1.poa_id = 'poi_1')\nAND EXISTS (\n    SELECT 1\n    FROM persons p2\n    JOIN address a2 ON p2.addressId = a2.Id\n    AND p1.Id != p2.Id\n    AND levenshtein(p1.name, p2.name) <= 3\n    AND levenshtein(p1.father_name, p2.father_name) <= 3\n    AND levenshtein(a1.address, a2.address) <= 10\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/76875547/how-to-save-something-in-mongo-in-uuid-type-by-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"reflect\"\n\t\"github.com/google/uuid\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/bsoncodec\"\n\t\"go.mongodb.org/mongo-driver/bson/bsonrw\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Person struct {\n\tName string    `bson:\"name\"`\n\tSign uuid.UUID `bson:\"sign\"`\n}\nfunc main() {\n\ttUUID := reflect.TypeOf(uuid.Nil)\n\tbson.DefaultRegistry.RegisterTypeEncoder(tUUID, bsoncodec.ValueEncoderFunc(func(ec bsoncodec.EncodeContext, vw bsonrw.ValueWriter, val reflect.Value) error {\n\t\t// borrowed from https://github.com/mongodb/mongo-go-driver/blob/89c7e1d1d9a2954472fe852baf27ecca9dbf9bbf/bson/bsoncodec/default_value_encoders.go#L684-L691\n\t\tif !val.IsValid() || val.Type() != tUUID {\n\t\t\treturn bsoncodec.ValueEncoderError{Name: \"UUIDEncodeValue\", Types: []reflect.Type{tUUID}, Received: val}\n\t\t}\n\t\tuuid := val.Interface().(uuid.UUID)\n\t\treturn vw.WriteBinaryWithSubtype(uuid[:], bson.TypeBinaryUUID)\n\t}))\n\tbson.DefaultRegistry.RegisterTypeDecoder(tUUID, bsoncodec.ValueDecoderFunc(func(dc bsoncodec.DecodeContext, vr bsonrw.ValueReader, val reflect.Value) error {\n\t\t// borrowed from https://github.com/mongodb/mongo-go-driver/blob/89c7e1d1d9a2954472fe852baf27ecca9dbf9bbf/bson/bsoncodec/default_value_decoders.go#L694-L706\n\t\tif !val.CanSet() || val.Type() != tUUID {\n\t\t\treturn bsoncodec.ValueDecoderError{Name: \"UUIDDecodeValue\", Types: []reflect.Type{tUUID}, Received: val}\n\t\t}\n\t\tvar data []byte\n\t\tvar subtype byte\n\t\tvar err error\n\t\tswitch vrType := vr.Type(); vrType {\n\t\tcase bson.TypeBinary:\n\t\t\tdata, subtype, err = vr.ReadBinary()\n\t\tcase bson.TypeNull:\n\t\t\terr = vr.ReadNull()\n\t\tcase bson.TypeUndefined:\n\t\t\terr = vr.ReadUndefined()\n\t\tdefault:\n\t\t\terr = fmt.Errorf(\"cannot decode %v into a Binary\", vrType)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif subtype != bson.TypeBinaryUUID {\n\t\t\treturn fmt.Errorf(\"cannot decode subtype %v into a UUID\", subtype)\n\t\t}\n\t\tval.Set(reflect.ValueOf(uuid.UUID(data)))\n\t\treturn nil\n\t}))\n\tclient, err := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer client.Disconnect(context.Background())\n\tdb := client.Database(\"mydatabase\")\n\tcollection := db.Collection(\"people\")\n\tsignUUID := uuid.New()\n\tperson := Person{\n\t\tName: \"John\",\n\t\tSign: signUUID,\n\t}\n\tif _, err = collection.InsertOne(context.Background(), person); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar p Person\n\tif err := collection.FindOne(context.Background(),\n\t\tbson.M{\"sign\": signUUID},\n\t).Decode(&p); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"%+v\\n\", p)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76875547/how-to-save-something-in-mongo-in-uuid-type-by-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/google/uuid\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/bsontype\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/x/bsonx/bsoncore\"\n)\ntype myUUID struct {\n\tuuid.UUID\n}\nvar (\n\t_ bson.ValueMarshaler   = (*myUUID)(nil)\n\t_ bson.ValueUnmarshaler = (*myUUID)(nil)\n)\nfunc (u myUUID) MarshalBSONValue() (bsontype.Type, []byte, error) {\n\treturn bson.TypeBinary, bsoncore.AppendBinary(nil, bson.TypeBinaryUUID, []byte(u.UUID[:])), nil\n}\nfunc (u *myUUID) UnmarshalBSONValue(typ bsontype.Type, value []byte) error {\n\tif typ != bson.TypeBinary {\n\t\treturn fmt.Errorf(\"cannot unmarshal %v into a Binary\", typ)\n\t}\n\tsubtype, bin, rem, ok := bsoncore.ReadBinary(value)\n\tif subtype != bson.TypeBinaryUUID {\n\t\treturn fmt.Errorf(\"cannot unmarshal binary subtype %v into a UUID\", subtype)\n\t}\n\tif len(rem) > 0 {\n\t\treturn fmt.Errorf(\"value has extra data: %v\", rem)\n\t}\n\tif !ok {\n\t\treturn errors.New(\"value does not have enough bytes\")\n\t}\n\t*u = myUUID{UUID: uuid.UUID(bin)}\n\treturn nil\n}\ntype Person struct {\n\tName string `bson:\"name\"`\n\tSign myUUID `bson:\"sign\"`\n}\nfunc main() {\n\tclient, err := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer client.Disconnect(context.Background())\n\tdb := client.Database(\"mydatabase\")\n\tcollection := db.Collection(\"people\")\n\tsignUUID := myUUID{UUID: uuid.New()}\n\tperson := Person{\n\t\tName: \"John\",\n\t\tSign: signUUID,\n\t}\n\tif _, err = collection.InsertOne(context.Background(), person); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar p Person\n\tif err := collection.FindOne(context.Background(),\n\t\tbson.M{\"sign\": signUUID},\n\t).Decode(&p); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"%+v\\n\", p)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76741375/scanning-a-range-type-using-pgx",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/jackc/pgx\"\n\t\"github.com/jackc/pgx/pgtype\"\n)\nfunc main() {\n\tconn, err := pgx.Connect(pgx.ConnConfig{\n\t\tHost:     \"localhost\",\n\t\tPort:     5432,\n\t\tUser:     \"username\",\n\t\tPassword: \"password\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\tvar (\n\t\thealthRange pgtype.Int4range\n\t\tanotherVar  *int64\n\t)\n\trow := conn.QueryRow(`select '[18,86)'::int4range, 2`)\n\terr = row.Scan(&anotherVar, &healthRange)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%+v\", healthRange)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76509806/golang-postgresql-query-with-transactions-and-squirrel",
    "body": "tx, err := db.repo.GetDatabase().Begin()\nif err != nil {\n\treturn nil, err\n}\n// added defer rollback and commit\ndefer func() {\n\tif err != nil {\n\t\tfmt.Println(\"An error happened while executing the queries - \", err)\n\t\ttx.Rollback()\n\t\treturn\n\t}\n\terr = tx.Commit()\n}()\nresponse := make([]storage.URLStorage, 0, len(urls))\nsb := squirrel.StatementBuilder.\n\tInsert(\"dependencies\").\n\tColumns(\"correlation_id\", \"name\", \"age\").\n\tPlaceholderFormat(squirrel.Dollar).\n\tRunWith(tx)\nfor _, human := range humans {\n\tsb = sb.Values(\n\t\thuman.CorrelationID,\n\t\thuman.Name,\n\t\thuman.Age,\n\t)\n}\n// the error will be handled by the defer\n_, err = sb.Exec()\n// you can execute multiple queries with the transaction\nfor _, human := range someOtheSlice {\n\tsb = sb.Values(\n\t\thuman.CorrelationID,\n\t\thuman.Name,\n\t\thuman.Age,\n\t)\n}\n_, err = sb.Exec()\n// If any error happened this query executions, all will be roll backed with the defer"
  },
  {
    "url": "https://stackoverflow.com/questions/76509418/go-gi-pthread-mutex-unlock-takes-most-of-the-execution-time-when-using-c",
    "body": "± go1.20.5 tool pprof /tmp/profile3378726905/cpu.pprof\nFile: callback\nBuild ID: e295a7c26f8d6b18641985f09c9fa3872b3ae569\nType: cpu\nTime: Jun 20, 2023 at 12:41pm (+07)\nDuration: 3.08s, Total samples = 19.49s (632.73%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top\nShowing nodes accounting for 11520ms, 59.11% of 19490ms total\nDropped 120 nodes (cum <= 97.45ms)\nShowing top 10 nodes out of 88\n      flat  flat%   sum%        cum   cum%\n    2320ms 11.90% 11.90%     2320ms 11.90%  __GI___lll_lock_wake\n    2170ms 11.13% 23.04%     2170ms 11.13%  futex_wait (inline)\n    1750ms  8.98% 32.02%     1750ms  8.98%  runtime.procyield\n    1010ms  5.18% 37.20%     1240ms  6.36%  runtime.casgstatus\n     950ms  4.87% 42.07%     1060ms  5.44%  runtime.reentersyscall\n     870ms  4.46% 46.54%     3480ms 17.86%  lll_mutex_lock_optimized (inline)\n     740ms  3.80% 50.33%     1900ms  9.75%  runtime.mallocgc\n     610ms  3.13% 53.46%     4090ms 20.99%  ___pthread_mutex_lock\n     570ms  2.92% 56.39%      810ms  4.16%  runtime.exitsyscallfast\n     530ms  2.72% 59.11%     2220ms 11.39%  runtime.lock2"
  },
  {
    "url": "https://stackoverflow.com/questions/76473524/gorm-error-unsupported-data-type-incorrect-schema",
    "body": "package main\nimport (\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Worker struct {\n\tgorm.Model\n\tUsername string `gorm:\"uniqueIndex;not null\" json:\"username\"`\n\tPosters []Poster `gorm:\"many2many:workers_posters;joinForeignKey:postersId\"`\n}\ntype Poster struct {\n\tgorm.Model\n\tName  string `gorm:\"uniqueIndex;not null\" json:\"name\"`\n\tEmail string `gorm:\"uniqueIndex;not null\" json:\"email\"`\n\tPhone string `json:\"phone\"`\n\tWorkers []Worker `gorm:\"many2many:workers_posters;joinForeignKey:workersId\"`\n\tJobs    []Job\n}\ntype Job struct {\n\tgorm.Model\n\tTitle    string `gorm:\"uniqueIndex;not null\" json:\"title\"`\n\tPosterID uint   `json:\"posterID\"`\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Worker{}, &Poster{}, &Job{})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76402098/parsing-toml-without-a-known-structure",
    "body": "package main\nimport (\n\t\"os\"\n\t\"fmt\"\n\t\"github.com/BurntSushi/toml\"\n)\ntype tomlConfig struct {\n\tConf map[string]any\n}\n\nfunc check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\nfunc isType(a, b interface{}) bool {\n    return fmt.Sprintf(\"%T\", a) == fmt.Sprintf(\"%T\", b)\n}\nfunc PrintDict(k1 string, v1 interface{}) {\n    fmt.Printf(\"Key:%s\\n\",k1)\n    if isType(v1,  make(map[string]any)) {\n        data := v1.(map[string]interface{})\n        for k2, v2 := range data {\n          PrintDict(k2, v2)\n        }\n    } else {\n       fmt.Printf(\"Value:%s\\n\",v1)\n    }\n}\nfunc main() {\n\tvar Conf map[string]any\n        data, err := os.ReadFile(\"config.toml\")\n        if err != nil {\n                fmt.Printf(\"ERROR: reading (config.toml).\")\n                os.Exit(1)\n        }\n        err=toml.Unmarshal(data, &Conf)\n        for k, v := range Conf {\n                PrintDict(k, v)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76359675/gin-and-middleware",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc main() {\n\t// New returns a new blank Engine instance without any middleware attached.\n\trouter := gin.New()\n\tg1 := router.Group(\"/\")\n\t{\n\t\t// Add the logger middleware to group 1.\n\t\tg1.Use(gin.Logger())\n\t\tg1.GET(\"/\", gin.HandlerFunc(func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"FirstHandler\")\n\t\t}))\n\t}\n\tg2 := router.Group(\"/qwe\")\n\t{\n\t\tg2.GET(\"/\", gin.HandlerFunc(func(ctx *gin.Context) {\n\t\t\tfmt.Println(\"/SecondHandler\")\n\t\t}))\n\t}\n\trouter.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76341798/unit-testing-http-request-retry-with-httptest",
    "body": "type recordingTransport struct {\n\treq *Request\n}\nfunc (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error) {\n\tt.req = req\n\treturn nil, errors.New(\"dummy impl\")\n}\nfunc TestGetRequestFormat(t *testing.T) {\n\tsetParallel(t)\n\tdefer afterTest(t)\n\ttr := &recordingTransport{}\n\tclient := &Client{Transport: tr}\n\turl := \"http://dummy.faketld/\"\n\tclient.Get(url) // Note: doesn't hit network\n\tif tr.req.Method != \"GET\" {\n\t\tt.Errorf(\"expected method %q; got %q\", \"GET\", tr.req.Method)\n\t}\n\tif tr.req.URL.String() != url {\n\t\tt.Errorf(\"expected URL %q; got %q\", url, tr.req.URL.String())\n\t}\n\tif tr.req.Header == nil {\n\t\tt.Errorf(\"expected non-nil request Header\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76341210/retrieve-json-column-data-from-mysql-using-go",
    "body": "type DataStruct struct {\n    Data   DataList `db:\"data\"`\n    Field1 string   `db:\"field1\"`\n    Field2 string   `db:\"field2\"`\n}\ntype DataList []Data\nfunc (ls *DataList) Scan(src any) error {\n    var raw []byte\n    switch src := src.(data) {\n    case string:\n        raw = []byte(src)\n    case []byte:\n        raw = src\n    default:\n        return nil // or return an error, e.g. fmt.Errorf(\"type %T not supported by Scan\", src)\n    }\n    return json.Unmarshal(raw, ls)\n    // NOTE: keep in mind that the unmarshal may fail\n    // depending on how store.NullString is implemented\n    // and the corresponding JSON value.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76196547/websocket-returning-403-every-time",
    "body": "router := gin.Default()\nconfig2 := cors.DefaultConfig()\n\tconfig2.AllowOrigins = []string{\"http://localhost:3000\", \"https://rblxfortune.vercel.app\", \"https://bloxbet.click\", \"http://localhost:80\"}\n\tconfig2.AllowCredentials = true\n\trouter.Use(cors.New(config2))\n\tHandleRoutes(router)\n\tpublic := router.Group(\"/\")\n\troutes.PublicRoutes(public)\n\trouter.NoRoute(func(c *gin.Context) {\n\t\thttp.Redirect(c.Writer, c.Request, \"/login\", http.StatusMovedPermanently)\n\t})\n\tprivate := router.Group(\"/\")\n\tprivate.Use(helpers.AuthRequired)\n\troutes.PrivateRoutes(private)\n\n\terr := router.Run(config.Port)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76189309/go-writer-with-buffer-and-timeout",
    "body": "// for SO testing, by JS\npackage main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\ntype User struct {\n\tID   int\n\tName string\n}\ntype UserRepository interface {\n\tSave(context.Context, User) error\n\tFlush(context.Context) error\n\tSaveAll(context.Context) error\n}\ntype LoggingBufferedUserRepository struct {\n\tbuffer        []string\n\tbufferSize    int\n\tbufferTimeout time.Duration\n\tmutex         sync.Mutex\n\t// we don't need close here now\n}\n// add the item to the buffer and flushes the buffer if it reaches the configured size\nfunc (c *LoggingBufferedUserRepository) Save(ctx context.Context, user User) error {\n\t// implement save functionality\n\tfmt.Printf(\"Save called %v: %v\\n\", user.Name, user.ID)\n\treturn nil\n}\n// can - Flush function immediately flushes any buffered items\nfunc (c *LoggingBufferedUserRepository) Flush(ctx context.Context) error {\n\t// implement Flush functionality\n\tfmt.Printf(\"Flush called\\n\")\n\treturn nil\n}\n// waits for any pending items to be saved before returning, and flushes any remaining buffered items if there are any\nfunc (c *LoggingBufferedUserRepository) SaveAll(ctx context.Context) error {\n\t// implement SaveAll functionality\n\tfmt.Printf(\"SaveAll called\\n\")\n\treturn nil\n}\nfunc (c *LoggingBufferedUserRepository) flush(ctx context.Context) error {\n\tif len(c.buffer) == 0 {\n\t\treturn nil\n\t}\n\t// This is your actual batch 'save':\n\tfmt.Printf(\"flushing buffer, size=%d, cid=%s, buffer=$%v\\n\", len(c.buffer), ctx.Value(\"cid\"), c.buffer)\n\tc.buffer = []string{}\n\treturn nil\n}\nfunc main() {\n\trepo := &LoggingBufferedUserRepository{\n\t\tbufferSize:    5,\n\t\tbufferTimeout: 1 * time.Second,\n\t}\n\tusers := []User{\n\t\t{ID: 1, Name: \"Alice\"},\n\t\t{ID: 2, Name: \"Bob\"},\n\t\t{ID: 3, Name: \"Charlie\"},\n\t\t{ID: 4, Name: \"Dave\"},\n\t\t{ID: 5, Name: \"Eve\"},\n\t}\n\tfor _, user := range users {\n\t\tif err := repo.Save(context.Background(), user); err != nil {\n\t\t\tfmt.Printf(\"error saving user %v: %v\\n\", user, err)\n\t\t}\n\t}\n\tfmt.Printf(\"Waiting for flushing... (5 seconds)\\n\")\n\ttime.Sleep(5 * time.Second)\n\t// Save remaining items\n\tif err := repo.SaveAll(context.Background()); err != nil {\n\t\tfmt.Printf(\"error saving remaining items: %v\\n\", err)\n\t}\n\t// Flush remaining items\n\tif err := repo.Flush(context.Background()); err != nil {\n\t\tfmt.Printf(\"error flushing remaining items: %v\\n\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76186937/in-go-sync-map-why-this-part-of-implementation-is-inconsistent-or-do-i-misunders",
    "body": "func (e *entry) tryStore(i interface{}) bool {\n\tfor {\n\t\tp := atomic.LoadPointer(&e.p)\n\t\tif p == expunged {\n\t\t\treturn false\n\t\t}\n\t\tif atomic.CompareAndSwapPointer(&e.p, p, unsafe.Pointer(&i)) {\n\t\t\treturn true\n\t\t}\n\t}\n}\nfunc (e *entry) tryLoadOrStore(i interface{}) (actual interface{}, loaded, clean bool) {\n\tfor {\n\t\tp := atomic.LoadPointer(&e.p)\n\t\tif p == expunged {\n\t\t\treturn nil, false, false\n\t\t}\n\t\tif p != nil {\n\t\t\treturn *(*interface{})(p), true, true\n\t\t}\n\t\tif atomic.CompareAndSwapPointer(&e.p, nil, unsafe.Pointer(&i)) {\n\t\t\treturn i, false, true\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76186937/in-go-sync-map-why-this-part-of-implementation-is-inconsistent-or-do-i-misunders",
    "body": "func (e *entry) tryStore(i *interface{}) bool {\n\tp := atomic.LoadPointer(&e.p)\n\tif p == expunged {\n\t\treturn false\n\t}\n\tfor {\n\t\tif atomic.CompareAndSwapPointer(&e.p, p, unsafe.Pointer(i)) {\n\t\t\treturn true\n\t\t}\n\t\tp = atomic.LoadPointer(&e.p)\n\t\tif p == expunged {\n\t\t\treturn false\n\t\t}\n\t}\n}\nfunc (e *entry) tryLoadOrStore(i interface{}) (actual interface{}, loaded, ok bool) {\n\tp := atomic.LoadPointer(&e.p)\n\tif p == expunged {\n\t\treturn nil, false, false\n\t}\n\tif p != nil {\n\t\treturn *(*interface{})(p), true, true\n\t}\n\t// Copy the interface after the first load to make this method more amenable\n\t// to escape analysis: if we hit the \"load\" path or the entry is expunged, we\n\t// shouldn't bother heap-allocating.\n\tic := i\n\tfor {\n\t\tif atomic.CompareAndSwapPointer(&e.p, nil, unsafe.Pointer(&ic)) {\n\t\t\treturn i, false, true\n\t\t}\n\t\tp = atomic.LoadPointer(&e.p)\n\t\tif p == expunged {\n\t\t\treturn nil, false, false\n\t\t}\n\t\tif p != nil {\n\t\t\treturn *(*interface{})(p), true, true\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76081551/export-function-from-go-compiling-wasm",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"syscall/js\"\n)\nfunc FuncName(M int, durations []int) int {\n\tfmt.Println(\"[GO] Log file.go\", M, durations)\n\treturn 10\n}\nfunc main() {\n\tfmt.Println(\"Hello, WebAssembly!\")\n\t// Mount the function on the JavaScript global object.\n\tjs.Global().Set(\"FuncName\", js.FuncOf(func(this js.Value, args []js.Value) any {\n\t\tif len(args) != 2 {\n\t\t\tfmt.Println(\"invalid number of args\")\n\t\t\treturn nil\n\t\t}\n\t\tif args[0].Type() != js.TypeNumber {\n\t\t\tfmt.Println(\"the first argument should be a number\")\n\t\t\treturn nil\n\t\t}\n\t\targ := args[1]\n\t\tif arg.Type() != js.TypeObject {\n\t\t\tfmt.Println(\"the second argument should be an array\")\n\t\t\treturn nil\n\t\t}\n\t\tdurations := make([]int, arg.Length())\n\t\tfor i := 0; i < len(durations); i++ {\n\t\t\titem := arg.Index(i)\n\t\t\tif item.Type() != js.TypeNumber {\n\t\t\t\tfmt.Printf(\"the item at index %d should be a number\\n\", i)\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tdurations[i] = item.Int()\n\t\t}\n\t\t// Call the actual func.\n\t\treturn FuncName(args[0].Int(), durations)\n\t}))\n\t// Prevent the program from exiting.\n\t// Note: the exported func should be released if you don't need it any more,\n\t// and let the program exit after then. To simplify this demo, this is\n\t// omitted. See https://pkg.go.dev/syscall/js#Func.Release for more information.\n\tselect {}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76081551/export-function-from-go-compiling-wasm",
    "body": "<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <script src=\"wasm_exec.js\"></script>\n    <script>\n      const go = new Go();\n      WebAssembly.instantiateStreaming(\n        fetch('main.wasm'),\n        go.importObject\n      ).then((result) => {\n        go.run(result.instance);\n      });\n    </script>\n  </head>\n  <body>\n    <button id=\"btn\">Call FuncName</button>\n    <script>\n      document.getElementById('btn').addEventListener('click', () => {\n        console.log(FuncName(1, [1, 2, 3, 4, 5]));\n      });\n    </script>\n  </body>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/76050040/import-cycle-in-tensorflow-protobufs",
    "body": "version: v1\nmanaged:\n  enabled: true\n  go_package_prefix:\n    default: example.com/mymodule/internal\n  override:\n    GO_PACKAGE:\n      # move the generated xla_data.pb.go file into package xla/data to break the import cycle.\n      tensorflow/compiler/xla/xla_data.proto: 'example.com/mymodule/internal/tensorflow/compiler/xla/data'\nplugins:\n  - name: go\n    out: internal\n    opt:\n      - module=example.com/mymodule/internal\n  - name: go-grpc\n    out: internal\n    opt:\n      - module=example.com/mymodule/internal"
  },
  {
    "url": "https://stackoverflow.com/questions/75969749/synchronization-issue-in-this-golang-program",
    "body": "package main\nimport (\n\t\"sync\"\n)\n// Conn is abstraction of a connection to make Manager easy to test.\ntype Conn interface {\n\tClose() error\n}\n// Dialer is abstraction of a dialer to make Manager easy to test.\ntype Dialer interface {\n\tDial(addr string) (Conn, error)\n}\ntype Manager struct {\n\t// muCurrent protects the \"current\" member.\n\tmuCurrent sync.RWMutex\n\tcurrent   int // When current is -1, the manager is shuted down.\n\tendpoints []*endpoint\n\t// mu protects the whole Switch action.\n\tmu sync.Mutex\n}\nfunc NewManager(dialer Dialer, addresses ...string) *Manager {\n\tif len(addresses) < 2 {\n\t\tpanic(\"a manger should handle at least 2 addresses\")\n\t}\n\tendpoints := make([]*endpoint, len(addresses))\n\tfor i, addr := range addresses {\n\t\tendpoints[i] = &endpoint{\n\t\t\taddress: addr,\n\t\t\tdialer:  dialer,\n\t\t}\n\t}\n\treturn &Manager{\n\t\tendpoints: endpoints,\n\t}\n}\nfunc (m *Manager) AddProxy(from Conn) {\n\t// 1. AddProxy will wait when the write lock of m.muCurrent is taken.\n\t// Once the write lock is released, AddProxy will connect to the new endpoint.\n\t// Switch only holds the write lock for a short time, and Switch is called\n\t// not so frequently, so AddProxy won't wait too much.\n\t// 2. Switch will wait if there is any AddProxy holding the read lock of\n\t// m.muCurrent. That means Switch waits longer. The advantage is that when\n\t// e.clear is called in Switch, All AddProxy requests to the old endpoint\n\t// are done. So it's safe to call e.clear then.\n\tm.muCurrent.RLock()\n\tdefer m.muCurrent.RUnlock()\n\tcurrent := m.current\n\t// Do not accept any new connection when m has been shutdown.\n\tif current == -1 {\n\t\tfrom.Close()\n\t\treturn\n\t}\n\tm.endpoints[current].addProxy(from)\n}\nfunc (m *Manager) Switch() {\n\t// In a real world, Switch is called not so frequently.\n\t// So it's ok to add a lock here.\n\t// And it's necessary to make sure the old endpoint is cleared and ready\n\t// for use in the future.\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\t// Take the write lock of m.muCurrent.\n\t// It waits for all the AddProxy requests holding the read lock to finish.\n\tm.muCurrent.Lock()\n\told := m.current\n\t// Do nothing when m has been shutdown.\n\tif old == -1 {\n\t\tm.muCurrent.Unlock()\n\t\treturn\n\t}\n\tnext := old + 1\n\tif next >= len(m.endpoints) {\n\t\tnext = 0\n\t}\n\tm.current = next\n\tm.muCurrent.Unlock()\n\t// When it reaches here, all AddProxy requests to the old endpoint are done.\n\t// And it's safe to call e.clear now.\n\tm.endpoints[old].clear()\n}\nfunc (m *Manager) Shutdown() {\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tm.muCurrent.Lock()\n\tcurrent := m.current\n\tm.current = -1\n\tm.muCurrent.Unlock()\n\tm.endpoints[current].clear()\n}\ntype proxy struct {\n\tfrom, to Conn\n}\ntype endpoint struct {\n\taddress string\n\tdialer  Dialer\n\tmu      sync.Mutex\n\tproxies []*proxy\n}\nfunc (e *endpoint) clear() {\n\tfor _, p := range e.proxies {\n\t\tp.from.Close()\n\t\tp.to.Close()\n\t}\n\t// Assign a new slice to e.proxies, and the GC will collect the old one.\n\te.proxies = []*proxy{}\n}\nfunc (e *endpoint) addProxy(from Conn) {\n\ttoConn, err := e.dialer.Dial(e.address)\n\tif err != nil {\n\t\t// Close the from connection so that the client will reconnect?\n\t\tfrom.Close()\n\t\treturn\n\t}\n\te.mu.Lock()\n\tdefer e.mu.Unlock()\n\te.proxies = append(e.proxies, &proxy{from: from, to: toConn})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75969749/synchronization-issue-in-this-golang-program",
    "body": "package main\nimport (\n\t\"net\"\n\t\"time\"\n)\ntype realDialer struct{}\nfunc (d realDialer) Dial(addr string) (Conn, error) {\n\ttcpAddr, err := net.ResolveTCPAddr(\"tcp4\", addr)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn net.DialTCP(\"tcp\", nil, tcpAddr)\n}\nfunc main() {\n\tmanager := NewManager(realDialer{}, \"1.1.1.1\", \"8.8.8.8\")\n\ttcpAddr, _ := net.ResolveTCPAddr(\"tcp4\", \"0.0.0.0:5432\")\n\tln, _ := net.ListenTCP(\"tcp\", tcpAddr)\n\tgo func() {\n\t\tfor range time.Tick(30 * time.Second) {\n\t\t\tmanager.Switch()\n\t\t}\n\t}()\n\tfor {\n\t\tclientConn, err := ln.AcceptTCP()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgo manager.AddProxy(clientConn)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75969749/synchronization-issue-in-this-golang-program",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/google/uuid\"\n)\nfunc TestManager(t *testing.T) {\n\taddresses := []string{\"1.1.1.1\", \"8.8.8.8\"}\n\tdialer := newDialer(addresses...)\n\tmanager := NewManager(dialer, addresses...)\n\tch := make(chan int, 1)\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tfor range ch {\n\t\t\tmanager.Switch()\n\t\t}\n\t\twg.Done()\n\t}()\n\tcount := 1000\n\ttotal := count * 10\n\twg.Add(total)\n\tfromConn := &fakeFromConn{}\n\tfor i := 0; i < total; i++ {\n\t\tif i%count == count-1 {\n\t\t\tch <- 0\n\t\t}\n\t\tgo func() {\n\t\t\tmanager.AddProxy(fromConn)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\tclose(ch)\n\twg.Wait()\n\tmanager.Shutdown()\n\tfor _, s := range dialer.servers {\n\t\tleft := len(s.conns)\n\t\tif left != 0 {\n\t\t\tt.Errorf(\"server %s, unexpected connections left: %d\", s.addr, left)\n\t\t}\n\t}\n\tclosedCount := fromConn.closedCount.Load()\n\tif closedCount != int32(total) {\n\t\tt.Errorf(\"want closed count: %d, got: %d\", total, closedCount)\n\t}\n}\ntype fakeFromConn struct {\n\tclosedCount atomic.Int32\n}\nfunc (c *fakeFromConn) Close() error {\n\tc.closedCount.Add(1)\n\treturn nil\n}\ntype fakeToConn struct {\n\tid     uuid.UUID\n\tserver *fakeServer\n}\nfunc (c *fakeToConn) Close() error {\n\tif c.id == uuid.Nil {\n\t\treturn nil\n\t}\n\tc.server.removeConn(c.id)\n\treturn nil\n}\ntype fakeServer struct {\n\taddr  string\n\tmu    sync.Mutex\n\tconns map[uuid.UUID]bool\n}\nfunc (s *fakeServer) addConn() (uuid.UUID, error) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tid, err := uuid.NewRandom()\n\tif err == nil {\n\t\ts.conns[id] = true\n\t}\n\treturn id, err\n}\nfunc (s *fakeServer) removeConn(id uuid.UUID) {\n\ts.mu.Lock()\n\tdefer s.mu.Unlock()\n\tdelete(s.conns, id)\n}\ntype fakeDialer struct {\n\tservers map[string]*fakeServer\n}\nfunc newDialer(addresses ...string) *fakeDialer {\n\tservers := make(map[string]*fakeServer)\n\tfor _, addr := range addresses {\n\t\tservers[addr] = &fakeServer{\n\t\t\taddr:  addr,\n\t\t\tconns: make(map[uuid.UUID]bool),\n\t\t}\n\t}\n\treturn &fakeDialer{\n\t\tservers: servers,\n\t}\n}\nfunc (d *fakeDialer) Dial(addr string) (Conn, error) {\n\tn := rand.Intn(100)\n\tif n == 0 {\n\t\treturn nil, errors.New(\"fake network error\")\n\t}\n\t// Simulate network latency.\n\ttime.Sleep(time.Duration(n) * time.Millisecond)\n\ts := d.servers[addr]\n\tid, err := s.addConn()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconn := &fakeToConn{\n\t\tid:     id,\n\t\tserver: s,\n\t}\n\treturn conn, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75798309/writing-unit-tests-for-generics-function-in-golang",
    "body": "var testUnitGetMapKeys = []struct {\n    name string\n    got  any\n    want any\n}{\n    {\n        name: \"string keys\",\n        got:  getMapKeys(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}),\n        want: []string{\"foo\", \"bar\", \"baz\"},\n    },\n    {\n        name: \"int keys\",\n        got:  getMapKeys(map[int]string{1: \"foo\", 2: \"bar\", 3: \"baz\"}),\n        want: []int{1, 2, 3},\n    },\n    {\n        name: \"float64 keys\",\n        got:  getMapKeys(map[float64]bool{1.0: true, 2.5: false, 3.1415: true}),\n        want: []float64{1.0, 2.5, 3.1415},\n    },\n}\n// ...\nfunc (us *UnitUtilSuite) TestUnitGetMapKeys() {\n    for _, tt := range testUnitGetMapKeys {\n        us.T().Run(tt.name, func(t *testing.T) {\n            if !reflect.DeepEqual(tt.got, tt.want) {\n                t.Errorf(\"got=%v; want=%v\", tt.got, tt.want)\n            }\n        })\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75658429/need-to-update-psql-row-of-a-composite-type-in-golang-with-jack-pgx",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx/v5\"\n\t_ \"github.com/jackc/pgx/v5\"\n\t_ \"github.com/jackc/pgx/v5/stdlib\"\n\t\"log\"\n\t\"time\"\n)\ntype DayPriceModel struct {\n\tDate  time.Time `json:\"date\"`\n\tHigh  float32   `json:\"high\"`\n\tLow   float32   `json:\"low\"`\n\tOpen  float32   `json:\"open\"`\n\tClose float32   `json:\"close\"`\n}\ntype SecuritiesPriceHistoryModel struct {\n\tSymbol  string          `json:\"symbol\"`\n\tHistory []DayPriceModel `json:\"history\"`\n}\nfunc RegisterDataTypes(ctx context.Context, conn *pgx.Conn) error {\n\tdataTypeNames := []string{\n\t\t\"day_price_model\",\n\t\t\"day_price_model[]\",\n\t}\n\tfor _, typeName := range dataTypeNames {\n\t\tdataType, err := conn.LoadType(ctx, typeName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconn.TypeMap().RegisterType(dataType)\n\t}\n\treturn nil\n}\nfunc main() {\n\tdsn := \"host=localhost port=5432 user=postgres password=postgres dbname=equity\"\n\tconn, err := pgx.Connect(context.Background(), dsn)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer conn.Close(context.Background())\n\terr = RegisterDataTypes(context.Background(), conn)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\thistory := []DayPriceModel{\n\t\t{time.Now().AddDate(0, 0, -2), 4, 1, 2, 3},\n\t\t{time.Now().AddDate(0, 0, -1), 10, 5, 6, 7},\n\t}\n\tinsertStmt := `INSERT INTO securities_price_history VALUES ($1, $2)`\n\t_, err = conn.Exec(context.Background(), insertStmt, \"something\", history)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tsphm := &SecuritiesPriceHistoryModel{}\n\tselectStmt := `SELECT (symbol, history) FROM securities_price_history WHERE symbol=$1`\n\terr = conn.QueryRow(context.Background(), selectStmt, \"something\").Scan(sphm)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"after insert: %v\\n\", sphm)\n\tnewHistory := append(history, DayPriceModel{time.Now(), 6, 3, 4, 5})\n\tupdateStmt := `UPDATE securities_price_history SET history = $1 WHERE symbol = $2`\n\t_, err = conn.Exec(context.Background(), updateStmt, newHistory, \"something\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = conn.QueryRow(context.Background(), selectStmt, \"something\").Scan(sphm)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"after update: %v\\n\", sphm)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75524211/go-client-example-of-a-kafka-consumer-for-confluent-cloud-with-sasl-username-and",
    "body": "const (\n\tbootstrapServers          = \"<BOOTSTRAP_SERVERS>\"\n\tccloudAPIKey              = \"<CCLOUD_API_KEY>\"\n\tccloudAPISecret           = \"<CCLOUD_API_SECRET>\"\n\tschemaRegistryAPIEndpoint = \"<CCLOUD_SR_ENDPOINT>\"\n\tschemaRegistryAPIKey      = \"<CCLOUD_SR_API_KEY>\"\n\tschemaRegistryAPISecret   = \"<CCLOUD_SR_API_SECRET>\"\n)\nfunc main() {\n\ttopic := \"go-test-topic\"\n\tcreateTopic(topic)\n\t// Produce a new record to the topic...\n\tproducer, err := kafka.NewProducer(&kafka.ConfigMap{\n\t\t\"bootstrap.servers\": bootstrapServers,\n\t\t\"sasl.mechanisms\":   \"PLAIN\",\n\t\t\"security.protocol\": \"SASL_SSL\",\n\t\t\"sasl.username\":     ccloudAPIKey,\n\t\t\"sasl.password\":     ccloudAPISecret})\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"Failed to create producer: %s\", err))\n\t}\n\tclient, err := schemaregistry.NewClient(schemaregistry.NewConfigWithAuthentication(\n\t\tschemaRegistryAPIEndpoint,\n\t\tschemaRegistryAPIKey,\n\t\tschemaRegistryAPISecret))"
  },
  {
    "url": "https://stackoverflow.com/questions/75493423/pull-a-docker-image-to-local-registry-using-golang",
    "body": "func getClient() (*client.Client, error) {\n\treturn client.NewClientWithOpts(client.FromEnv)\n}\nfunc main() {\n\tImagePull()\n}\nfunc ImagePull() error {\n\tcli, err := getClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\tevents, err := cli.ImagePull(\n\t\tcontext.Background(),\n\t\t\"busybox:1.35\",\n\t\ttypes.ImagePullOptions{},\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer events.Close()\n\twg := sync.WaitGroup{}\n\twg.Add(1)\n\tgo func(wg *sync.WaitGroup) {\n\t\ttime.Sleep(1 * time.Second)\n\t\tlist, err := cli.ImageList(context.Background(), types.ImageListOptions{})\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfor _, ims := range list {\n\t\t\tfor _, tag := range ims.RepoTags {\n\t\t\t\tif strings.HasPrefix(tag, \"busybox:1.35\") {\n\t\t\t\t\twg.Done()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}(&wg)\n\twg.Wait()\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75373245/how-can-i-mock-database-calls-without-a-library",
    "body": "package repo\nimport \"database/sql\"\ntype Patient struct {\n\tID               int\n\tName             string\n\tSurname          string\n\tAge              int\n\tInsuranceCompany string\n}\ntype PostgresStore struct {\n\t// rely on the generic DB provided by the \"sql\" package\n\tdb *sql.DB\n}\nfunc (p *PostgresStore) GetPatient(id int) ([]Patient, error) {\n\trows, err := p.db.Query(\"SELECT id, name, age, insurance FROM patients\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\titems := []Patient{}\n\tfor rows.Next() {\n\t\tvar i Patient\n\t\tif err := rows.Scan(\n\t\t\t&i.ID,\n\t\t\t&i.Name,\n\t\t\t&i.Surname,\n\t\t\t&i.Age,\n\t\t\t&i.InsuranceCompany,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75373245/how-can-i-mock-database-calls-without-a-library",
    "body": "package repo\nimport (\n\t\"testing\"\n\t\"github.com/DATA-DOG/go-sqlmock\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestGetPatient(t *testing.T) {\n\t// 1. set up fake db and mock\n\tdb, mock, err := sqlmock.New()\n\tif err != nil {\n\t\tt.Fatalf(\"err not expected: %v\", err)\n\t}\n\t// 2. configure the mock. What we expect (query or command)? The outcome (error vs no error).\n\trows := sqlmock.NewRows([]string{\"id\", \"name\", \"surname\", \"age\", \"insurance\"}).AddRow(1, \"john\", \"doe\", 23, \"insurance-test\")\n\tmock.ExpectQuery(\"SELECT id, name, age, insurance FROM patients\").WillReturnRows(rows)\n\t// 3. instantiate the PostgresStore with the fake db\n\tsut := &PostgresStore{\n\t\tdb: db,\n\t}\n\t// 4. invoke the action we've to test\n\tgot, err := sut.GetPatient(1)\n\t// 5. assert the result\n\tassert.Nil(t, err)\n\tassert.Contains(t, got, Patient{1, \"john\", \"doe\", 23, \"insurance-test\"})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75329453/sending-value-into-channel-and-reading-output-when-ready",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\ntype Request struct {\n\tUrl            string\n\tDelayInSeconds time.Duration\n}\ntype Response struct {\n\tUrl        string\n\tStatusCode int\n}\nfunc main() {\n\trequests := []Request{\n\t\t{\"https://www.google.com\", 0},\n\t\t{\"https://stackoverflow.com\", 1},\n\t\t{\"https://www.wikipedia.com\", 4},\n\t}\n\trespChan := make(chan Response)\n\tdefer close(respChan)\n\tfor _, req := range requests {\n\t\tgo func(r Request) {\n\t\t\tfmt.Printf(\"%q - %v\\n\", r.Url, strings.Repeat(\"#\", 30))\n\t\t\t// simulate heavy work\n\t\t\ttime.Sleep(time.Second * r.DelayInSeconds)\n\t\t\tresp, _ := http.Get(r.Url)\n\t\t\tres := Response{r.Url, resp.StatusCode}\n\t\t\tfmt.Println(time.Now())\n\t\t\trespChan <- res\n\t\t}(req)\n\t}\n\twriteChan := make(chan struct{})\n\tdefer close(writeChan)\n\tfor i := 0; i < len(requests); i++ {\n\t\tselect {\n\t\tcase res := <-respChan:\n\t\t\tgo func(r Response) {\n\t\t\t\tf, err := os.Create(fmt.Sprintf(\"%v.txt\", strings.Replace(r.Url, \"https://\", \"\", 1)))\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tdefer f.Close()\n\t\t\t\tf.Write([]byte(fmt.Sprintf(\"%q OK with %d\\n\", r.Url, r.StatusCode)))\n\t\t\t\twriteChan <- struct{}{}\n\t\t\t}(res)\n\t\tcase <-time.After(time.Second * 2):\n\t\t\tfmt.Println(\"Timeout\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74972233/how-to-disable-http-2-in-golangs-standard-http-client-or-avoid-tons-of-interna",
    "body": "import (\n    \"net/http\"\n    \"time\"\n)\ntype forwardRoundTripper struct {\n\trt http.RoundTripper // e.g. an *http.Transport\n}\nfunc (my *forwardRoundTripper) RoundTrip(r *http.Request) (*http.Response, error) {\n    // set r = r.WithContext(ctx) for some `ctx` if you desire\n    // adjust URL, or this transport (as necessary, per-request)\n    // NOTE: A very common thing is to add HTTP headers here\n\treturn my.rt.RoundTrip(r)\n}\n// httpClient has an http.RoundTripper given for general Transport!\n// (don't forget to choose a reasonable CheckRedirect and Jar/etc.)\nvar httpClient = &http.Client{\n    Timeout:   time.Second * 10, // or whatever you prefer here\n    Transport: &forwardRoundTripper{rt: http.DefaultTransport},\n}\nfunc h2Disabled(rt *http.Transport) *http.Transport {\n\tlog.Println(\"--- only using HTTP/1.x ...\")\n\trt.ForceAttemptHTTP2 = false // not good enough\n\t// at least one of the following is ALSO required:\n\trt.TLSClientConfig.NextProtos = []string{\"http/1.1\"}\n\t// need to Clone() or replace the TLSClientConfig if a request already occurred\n\t// - Why? Because the first time the transport is used, it caches certain structures.\n\t// (if you do this replacement, don't forget to set a minimum TLS version)\n\trt.TLSHandshakeTimeout = longTimeout // not related to h2, but necessary for stability\n\trt.TLSNextProto = make(map[string]func(authority string, c *tls.Conn) http.RoundTripper)\n\t// ^ some sources seem to think this is necessary, but not in all cases\n\t// (it WILL be required if an \"h2\" key is already present in this map)\n\treturn rt\n}\nfunc init() {\n    h := httpClient\n\th2ok := ... // e.g. cmp.Or(os.Getenv(\"IS_H2_OK\"), \"yes\") == \"yes\"\n\tif t, ok := h.Transport.(*forwardRoundTripper); ok && !h2ok {\n        h2t, _ := t.rt.(*http.Transport) // ok\n\t\th.Transport = h2Disabled(h2t.Clone())\n        // recommended: log at warn (h2 disabled)\n\t}\n    // log at info about Client\n\t// tweak rate limits here\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74962479/how-to-build-catboost-c-evaluation-library-api",
    "body": "#include <stdio.h>\n#include <c_api.h>\nint main()\n{\n    float floatFeaturesRaw[3] = {0, 89, 1};\n    const float *floatFeatures = floatFeaturesRaw;\n    const char *catFeaturesRaw[4] = {\"Others\", \"443_HTTPS\", \"6\", \"24\"};\n    const char **catFeatures = catFeaturesRaw;\n    double resultRaw[4];\n    double *result = resultRaw;\n    ModelCalcerHandle *modelHandle = ModelCalcerCreate();\n    if (!LoadFullModelFromFile(modelHandle, \"catboost_model\"))\n    {\n        printf(\"LoadFullModelFromFile error message: %s\\n\", GetErrorString());\n    }\n    SetPredictionType(modelHandle, 3);\n    if (!CalcModelPredictionSingle(\n            modelHandle,\n            floatFeatures, 3,\n            catFeatures, 4,\n            result, 4))\n    {\n        printf(\"CalcModelPrediction error message: %s\\n\", GetErrorString());\n    }\n    printf(\"%f\\n\", result[0]);\n    printf(\"%f\\n\", result[1]);\n    printf(\"%f\\n\", result[2]);\n    printf(\"%f\\n\", result[3]);\n    ModelCalcerDelete(modelHandle);\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74639064/go-get-value-of-subject-unstructeredname-from-a-ssl-certificate",
    "body": "package main\nimport (\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"log\"\n)\nconst certRaw = `-----BEGIN CERTIFICATE-----\nMIIDcTCCAlmgAwIBAgIUNjbltje6I/S9PJN8KgIxyi2Iw58wDQYJKoZIhvcNAQEL\nBQAwSTEUMBIGA1UEAwwLZXhhbXBsZS5jb20xFjAUBgNVBAoMDUV4YW1wbGUsIElu\nYy4xGTAXBgNVBAsMEEV4YW1wbGUgRGl2aXNpb24wHhcNMjIxMTI5MTU1NDMxWhcN\nMzcxMTI2MTU1NDMxWjCBmzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3Ju\naWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xGjAYBgNVBAoMEVNvbWUgT3JnYW5p\nemF0aW9uMR4wHAYDVQQDDBVzb21lLm9yZ2FuaXphdGlvbi5jb20xIzAhBgkqhkiG\n9w0BCQIMFHNvbWUgYWRkaXRpb25hbCBpbmZvMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEAyqprugdiaERkAHbx06WobPekkZ8CFyiR6dv8D49eqHO1xmCp\naVotFJSj5cktUH64885LfTCghUdPcw+rIh0fB8tOleBUA9yIMUqbYFnRgLrz7U+g\nbkgyQO7w0PsB7tgUKI7esEEcvWSoygWyZKSiUZBSQOAuEcJxog7GMR6QiUtmiLaq\nDY0Wwlir7iakX0Qlq8iHFY6yNf2aghET6IC9tGbkifO6HWLEP4gBWwtIvCd94l6L\n6rNpGtYXHSmlaEL0jn/4QPADciXDrBnAhFfzBrqyO7SYNqJUiENXEvq+7ESIqibV\nRKvt9HpAj+O/Ij4z+Z6Xys8sE3RE4FSNSdXphQIDAQABMA0GCSqGSIb3DQEBCwUA\nA4IBAQCH6vxtrqUBFVgahnmjPSHci3JCaz/X9hL2QgXNTzAS3rLJBd6OrC+3ITli\nvzJlWryl1hzTxFEcj3EtVG1AckNOHX0RCFggNBSQSOz6oaaZlS6BAkChbRUqmHfG\niCDK8A1pV1cr/SPBe/UjSkbG548JpqCSWEUL1jNDsNzZmjuXy+FTM2PDYiSRbGxY\nY0SpkxAhuKltblzghh1KIMU7UutEUXDGMlCCYEY9/ibWTKa9J/WNjC0CQC13jLe8\nPqVLIeXIoVSkTsgbzwYxW2P+M6QbjRC83OORwm8GnEj1k2yX6JmnzLifidFiT/h6\nM2Y3gjYqfGexupmK9toEejZPj1RB\n-----END CERTIFICATE-----\n`\nfunc main() {\n\tblock, rest := pem.Decode([]byte(certRaw))\n\tif block == nil {\n\t\tlog.Fatalf(\"Decode CA PEM, %v\", rest)\n\t}\n\tcert, err := x509.ParseCertificate(block.Bytes)\n\tif err != nil {\n\t\tlog.Fatalf(\"parse certificate\")\n\t}\n\t// 1.2.840.113549.1.9.2\n\tvar oidUnstructuredName = []int{1, 2, 840, 113549, 1, 9, 2}\n\tvar unstructuredName string\n\tfor _, n := range cert.Subject.Names {\n\t\tif n.Type.Equal(oidUnstructuredName) {\n\t\t\tif v, ok := n.Value.(string); ok {\n\t\t\t\tunstructuredName = v\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(unstructuredName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74549098/how-to-mimic-a-union-type-in-gorm",
    "body": "package storage\nimport (\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n)\ntype DataSourceType string\nconst (\n\tPOSTGRES DataSourceType = \"POSTGRES\"\n\tMYSQL    DataSourceType = \"MYSQL\"\n)\ntype PostgresConnectionInfo struct {\n\tHost     string\n\tPort     int\n\tUsername string\n\tPassword string\n\tDBName   string\n}\ntype MySQLConnectionInfo struct {\n\tHost     string\n\tPort     int\n\tUsername string\n\tPassword string\n\tDBName   string\n}\ntype ConnectionInfo struct {\n\tPostgres *PostgresConnectionInfo `gorm:\"-\" json:\"postgres,omitempty\"`\n\tMysql    *MySQLConnectionInfo    `gorm:\"-\" json:\"mysql,omitempty\"`\n}\ntype DataSource struct {\n\tgorm.Model\n\tName           string\n\tType           DataSourceType `sql:\"type:ENUM('POSTGRES')\" gorm:\"column:data_source_type\"`\n\tConnectionInfo ConnectionInfo `gorm:\"type:json\" `\n}\nfunc (a *ConnectionInfo) Scan(src any) error {\n\tswitch src := src.(type) {\n\tcase nil:\n\t\treturn nil\n\tcase []byte:\n\t\tvar res ConnectionInfo\n\t\terr := json.Unmarshal(src, &res)\n\t\t*a = res\n\t\treturn err\n\tdefault:\n\t\treturn fmt.Errorf(\"scan: unable to scan type %T into struct\", src)\n\t}\n}\nfunc (a ConnectionInfo) Value() (driver.Value, error) {\n\tba, err := json.Marshal(a)\n\treturn ba, err\n}\nfunc GormTest2() {\n\tdb, err := gorm.Open(sqlite.Open(\"gorm.db\"), &gorm.Config{\n\t\tLogger: logger.Default.LogMode(logger.Info),\n\t})\n\tif err != nil {\n\t\tlog.Fatal(\"could not open database\")\n\t}\n\terr = db.AutoMigrate(&DataSource{})\n\tif err != nil {\n\t\tlog.Fatal(\"could not migrate database\")\n\t}\n\tcreateTestData1(db)\n\tfetchData1(db)\n}\nfunc createTestData1(db *gorm.DB) {\n\tds := []DataSource{\n\t\t{\n\t\t\tName: \"Postgres\",\n\t\t\tType: POSTGRES,\n\t\t\tConnectionInfo: ConnectionInfo{\n\t\t\t\tPostgres: &PostgresConnectionInfo{\n\t\t\t\t\tHost:     \"localhost\",\n\t\t\t\t\tPort:     333,\n\t\t\t\t\tUsername: \"sdlfj\",\n\t\t\t\t\tPassword: \"sdfs\",\n\t\t\t\t\tDBName:   \"sdfsd\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"Mysql\",\n\t\t\tType: MYSQL,\n\t\t\tConnectionInfo: ConnectionInfo{\n\t\t\t\tMysql: &MySQLConnectionInfo{\n\t\t\t\t\tHost:     \"localhost\",\n\t\t\t\t\tPort:     333,\n\t\t\t\t\tUsername: \"sdlfj\",\n\t\t\t\t\tPassword: \"sdfs\",\n\t\t\t\t\tDBName:   \"sdfsd\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\terr := db.Create(&ds).Error\n\tif err != nil {\n\t\tlog.Println(\"failed to create data\")\n\t}\n}\nfunc fetchData1(db *gorm.DB) {\n\tvar dsList []DataSource\n\tif err := db.Find(&dsList).Error; err != nil {\n\t\tlog.Println(\"failed to load data\")\n\t}\n\tlog.Println(dsList)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74543080/how-to-compose-snake-case-binding-tag-with-go-playground-validator",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype user struct {\n\tHobby string `json:\"name\" validate:\"required,snakecase\"`\n}\nfunc main() {\n\tv := validator.New()\n\t_ = v.RegisterValidation(\"snakecase\", validateSnakeCase)\n\tcorrect := user{\"playing_game\"}\n\tIncorrect := user{\"playingGame\"}\n\terr := v.Struct(correct)\n\tfmt.Println(err) // nil\n\terr = v.Struct(Incorrect)\n\tfmt.Println(err) // error\n}\nconst allows = \"abcdefghijklmnopqrstuvwxyz_\"\nfunc validateSnakeCase(fl validator.FieldLevel) bool {\n\tstr := fl.Field().String()\n\tfor i := range str {\n\t\tif !strings.Contains(allows, str[i:i+1]) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74505134/comparing-nested-slices-while-ignoring-order",
    "body": "func TestXxx(t *testing.T) {\n  // Slices\n  want := [][]string{{\"bat\"}, {\"nat\", \"tan\"}, {\"ate\", \"eat\", \"tea\"}}\n  got := [][]string{{\"eat\", \"tea\", \"ate\"}, {\"tan\", \"nat\"}, {\"bat\"}}\n  // Running tests\n  t.Run(\"test\", func(t *testing.T) {\n    // Sorting got inners\n    for _, inner := range got {\n      sort.Slice(inner, func(i, j int) bool {\n        return inner[i] < inner[j]\n      })\n    }\n    // Sorting want inners\n    for _, inner := range want {\n      sort.Slice(inner, func(i, j int) bool {\n        return inner[i] < inner[j]\n      })\n    }\n    // Match\n    assert.ElementsMatch(t, got, want)\n  })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74453506/golang-xml-unmarshal-byte-array-decoding-as-illegal-character",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"strings\"\n)\ntype Root struct {\n\tOtherInfo        string `xml:\"otherInfo\"`\n\tPlateCharBelieve string `xml:\"plateCharBelieve\"`\n}\nfunc main() {\n\tsb := strings.Builder{}\n\tsb.WriteString(`<root><otherInfo>otherInfo</otherInfo><plateCharBelieve>`)\n\tsb.Write([]byte{11, 22, 33, 44, 97, 98, 99})\n\tsb.WriteString(`</plateCharBelieve></root>`)\n\tfmt.Printf(\"%v\\n\", sb.String())\n\tvar root Root\n\terr := xml.Unmarshal([]byte(sb.String()), &root)\n\tif err != nil {\n\t\tfmt.Printf(\"%v\\n\", err)\n\t}\n\tfmt.Printf(\"%v\\n\", root)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74453506/golang-xml-unmarshal-byte-array-decoding-as-illegal-character",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n)\ntype Root struct {\n\tOtherInfo        string `xml:\"otherInfo\"`\n\tPlateCharBelieve string `xml:\"plateCharBelieve\"`\n}\nfunc main() {\n\tsb := strings.Builder{}\n\tsb.WriteString(`<root><otherInfo>otherInfo</otherInfo><plateCharBelieve>`)\n\tsb.Write([]byte{11, 22, 33, 44, 97, 98, 99})\n\tsb.WriteString(`</plateCharBelieve></root>`)\n\tfmt.Printf(\"%v\\n\", sb.String())\n\tr, _ := regexp.Compile(`<plateCharBelieve>.*?</plateCharBelieve>`)\n\t//if you want decode it use match\n\txmlstr := r.ReplaceAllString(sb.String(), \"\")\n\tvar root Root\n\terr := xml.Unmarshal([]byte(xmlstr), &root)\n\tif err != nil {\n\t\tfmt.Printf(\"%v\\n\", err)\n\t}\n\tfmt.Printf(\"%v\\n\", root)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74145169/maximize-the-number-of-customresources-that-a-customresourcedefinition-can-have",
    "body": "// in your Reconciler Setup function create an index\nfunc SetupWithManager(mgr ctrl.Manager) error {\n\tr := &CronJobReconciler{\n\t\tClient:   mgr.GetClient(),\n\t}\n\tmgr.GetFieldIndexer().IndexField(context.TODO(), &cronjobv1alpha1.CronJob{}, \"metadata.name\", NameIndexer)\n    return ctrl.NewControllerManagedBy(mgr).\n        For(&cronjobv1alpha1.CronJob{}).\n        Complete(r)\n}\nfunc NameIndexer(o client.Object) []string {\n\tm := o.(*cronjobv1alpha1.CronJob)\n\treturn []string{m.ObjectMeta.Name}\n}\nfunc (r *CronJobReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n    cronjobList := cronjobv1alpha1.CronJobList{}\n\terr = r.List(ctx, &cronjobList, client.MatchingFields{\"metadata.name\": \"test\"})\n\tif err != nil {\n\t\treturn ctrl.Result{}, err\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73897004/golang-concurrent-writes-to-multiple-files",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math/rand\"\n\t\"os\"\n\t\"sort\"\n\t\"sync\"\n\t\"time\"\n)\nvar wg sync.WaitGroup\nconst N = 30\nvar elapsed_g [N]time.Duration\nfunc SortAndLogElapsed(prefix string) {\n\tsort.Slice(elapsed_g[:], func(i, j int) bool { return elapsed_g[i].Nanoseconds() < int64(elapsed_g[j].Nanoseconds()) })\n\tfor _, elapsed := range elapsed_g {\n\t\tfmt.Println(prefix, elapsed)\n\t}\n}\nfunc GenerateFile(start time.Time, id int) error {\n\tdefer wg.Done()\n\telapsed := time.Since(start)\n\tbuf := make([]byte, 7500000)\n\trand.Read(buf) // generate random data\n\trandomFileName := fmt.Sprintf(\"/tmp/gotest-%v\", rand.Int())\n\terr := ioutil.WriteFile(randomFileName, buf, 0666)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(randomFileName)\n\telapsed = time.Since(start)\n\t// log.Printf(\"generate file %s done in %s\", randomFileName, elapsed)\n\telapsed_g[id] = elapsed\n\treturn nil\n}\nfunc RunWithCommonPrng() {\n\tstart := time.Now()\n\tfor i := 0; i < N; i++ {\n\t\twg.Add(1)\n\t\tgo GenerateFile(start, i)\n\t}\n\twg.Wait()\n\telapsed := time.Since(start)\n\tSortAndLogElapsed(\"common PRNG: \")\n\tlog.Printf(\"done in %s\", elapsed)\n}\nfunc GenerateFilePrivatePrng(id int, prng rand.Source, start time.Time) error {\n\tdefer wg.Done()\n\telapsed := time.Since(start)\n\tbuf := make([]byte, 7500000)\n\trand.New(prng).Read(buf) // generate random data\n\trandomFileName := fmt.Sprintf(\"/tmp/gotest-%v\", prng.Int63())\n\terr := ioutil.WriteFile(randomFileName, buf, 0666)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(randomFileName)\n\telapsed = time.Since(start)\n\telapsed_g[id] = elapsed\n\t// log.Printf(\"generate file %s with private source: done in %s\", randomFileName, elapsed)\n\treturn nil\n}\nfunc RunWithPrivatePrng() {\n\tstart := time.Now()\n\tfor i := 0; i < N; i++ {\n\t\twg.Add(1)\n\t\tgo GenerateFilePrivatePrng(i, rand.NewSource(int64(i)), start)\n\t}\n\twg.Wait()\n\telapsed := time.Since(start)\n\tSortAndLogElapsed(\"Private PRNG: \")\n\tlog.Printf(\"done in %s\", elapsed)\n}\nfunc GenerateFileWithGivenData(id int, buf []byte, start time.Time) error {\n\tdefer wg.Done()\n\trandomFileName := fmt.Sprintf(\"/tmp/gotest-%v\", rand.Int())\n\terr := ioutil.WriteFile(randomFileName, buf, 0666)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(randomFileName)\n\telapsed := time.Since(start)\n\telapsed_g[id] = elapsed\n\t// log.Printf(\"generate file %s with data: done in %s\", randomFileName, elapsed)\n\treturn nil\n}\nfunc RunWithCommonData() {\n\tbuf := make([]byte, 7500000)\n\trand.Read(buf) // generate random data\n\tstart := time.Now()\n\tfor i := 0; i < N; i++ {\n\t\twg.Add(1)\n\t\tgo GenerateFileWithGivenData(i, buf, start)\n\t}\n\twg.Wait()\n\telapsed := time.Since(start)\n\tSortAndLogElapsed(\"Common data: \")\n\tlog.Printf(\"done in %s\", elapsed)\n}\nfunc main() {\n    log.Printf(\"Used CPUs / Max CPUs: %d/%d\", runtime.GOMAXPROCS(0), runtime.NumCPU())\n\tRunWithCommonPrng()\n\tRunWithPrivatePrng()\n\tRunWithCommonData()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73897004/golang-concurrent-writes-to-multiple-files",
    "body": "2022/10/02 00:00:08 Used CPUs / Max CPUs: 8/8\ncommon PRNG:  9.943335ms\ncommon PRNG:  15.12122ms\ncommon PRNG:  20.856216ms\ncommon PRNG:  26.636462ms\ncommon PRNG:  32.041066ms\ncommon PRNG:  37.450744ms\ncommon PRNG:  43.286644ms\ncommon PRNG:  48.695199ms\ncommon PRNG:  54.518533ms\ncommon PRNG:  59.858065ms\ncommon PRNG:  65.620084ms\ncommon PRNG:  71.111171ms\ncommon PRNG:  76.388583ms\ncommon PRNG:  81.609326ms\ncommon PRNG:  87.465878ms\ncommon PRNG:  92.623557ms\ncommon PRNG:  98.35468ms\ncommon PRNG:  103.606529ms\ncommon PRNG:  109.28623ms\ncommon PRNG:  114.981873ms\ncommon PRNG:  120.26626ms\ncommon PRNG:  125.530811ms\ncommon PRNG:  131.222195ms\ncommon PRNG:  136.399946ms\ncommon PRNG:  142.305635ms\ncommon PRNG:  147.687525ms\ncommon PRNG:  153.002392ms\ncommon PRNG:  158.769948ms\ncommon PRNG:  164.241503ms\ncommon PRNG:  169.531355ms\n2022/10/02 00:00:08 done in 170.273377ms\nPrivate PRNG:  16.255543ms\nPrivate PRNG:  17.155624ms\nPrivate PRNG:  17.477437ms\nPrivate PRNG:  17.49527ms\nPrivate PRNG:  17.521759ms\nPrivate PRNG:  18.363554ms\nPrivate PRNG:  19.800906ms\nPrivate PRNG:  30.340522ms\nPrivate PRNG:  31.551496ms\nPrivate PRNG:  40.583626ms\nPrivate PRNG:  54.682705ms\nPrivate PRNG:  54.832006ms\nPrivate PRNG:  54.983126ms\nPrivate PRNG:  55.143073ms\nPrivate PRNG:  56.517272ms\nPrivate PRNG:  56.577967ms\nPrivate PRNG:  57.718ms\nPrivate PRNG:  58.770033ms\nPrivate PRNG:  59.246808ms\nPrivate PRNG:  59.608246ms\nPrivate PRNG:  59.789123ms\nPrivate PRNG:  60.028814ms\nPrivate PRNG:  68.533662ms\nPrivate PRNG:  69.606317ms\nPrivate PRNG:  69.837988ms\nPrivate PRNG:  71.488161ms\nPrivate PRNG:  71.770842ms\nPrivate PRNG:  72.036881ms\nPrivate PRNG:  72.23509ms\nPrivate PRNG:  73.037337ms\n2022/10/02 00:00:08 done in 73.694825ms\nCommon data:  5.220506ms\nCommon data:  5.220523ms\nCommon data:  5.220524ms\nCommon data:  5.220526ms\nCommon data:  5.221125ms\nCommon data:  5.221169ms\nCommon data:  5.222472ms\nCommon data:  6.977304ms\nCommon data:  13.601358ms\nCommon data:  13.614532ms\nCommon data:  13.859067ms\nCommon data:  14.75378ms\nCommon data:  16.00253ms\nCommon data:  16.111086ms\nCommon data:  16.263291ms\nCommon data:  16.42076ms\nCommon data:  17.024946ms\nCommon data:  17.313631ms\nCommon data:  17.749351ms\nCommon data:  18.18497ms\nCommon data:  18.83511ms\nCommon data:  21.789867ms\nCommon data:  22.308659ms\nCommon data:  22.308701ms\nCommon data:  22.546815ms\nCommon data:  23.298865ms\nCommon data:  23.482138ms\nCommon data:  23.610855ms\nCommon data:  23.667347ms\nCommon data:  24.500486ms\n2022/10/02 00:00:08 done in 25.205652ms"
  },
  {
    "url": "https://stackoverflow.com/questions/73897004/golang-concurrent-writes-to-multiple-files",
    "body": "package main\n/*\n#define _GNU_SOURCE\n#include <sched.h>\n*/\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math/rand\"\n\t\"os\"\n\t\"runtime\"\n\t\"sort\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\t\"github.com/pkg/profile\"\n)\nfunc GetCpu() int {\n\tvar ret C.int = C.sched_getcpu()\n\treturn int(ret)\n}\nfunc GetThreadId() int {\n\treturn syscall.Gettid()\n}\nvar wg sync.WaitGroup\nconst N = 30\nvar elapsed_g [N]time.Duration\nfunc SortAndLogElapsed(prefix string) {\n\tsort.Slice(elapsed_g[:], func(i, j int) bool { return elapsed_g[i].Nanoseconds() < int64(elapsed_g[j].Nanoseconds()) })\n\tfor _, elapsed := range elapsed_g {\n\t\tfmt.Println(prefix, elapsed)\n\t}\n}\nfunc GenerateFileWithGivenData(id int, buf []byte, start time.Time) error {\n\tdefer wg.Done()\n\trandomFileName := fmt.Sprintf(\"/tmp/gotest-%v\", rand.Int())\n\ttid := GetThreadId()\n\tcpu := GetCpu()\n\tbefore := time.Now()\n\tfmt.Printf(\"Before WriteFile:\\t----\\t%d\\t%d\\t%d\\t%s\\n\", id, tid, cpu, before.String())\n\terr := ioutil.WriteFile(randomFileName, buf, 0666)\n\tafter := time.Now()\n\ttid = GetThreadId()\n\tcpu = GetCpu()\n\tfmt.Printf(\"After WriteFile:\\t%d\\t%d\\t%d\\t%d\\t%s\\n\", after.Sub(before).Microseconds(), id, tid, cpu, after.String())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(randomFileName)\n\telapsed := time.Since(start)\n\telapsed_g[id] = elapsed\n\t// log.Printf(\"generate file %s with data: done in %s\", randomFileName, elapsed)\n\treturn nil\n}\nfunc RunWithCommonData() {\n\tbuf := make([]byte, 7500000)\n\trand.Read(buf) // generate random data\n\tfmt.Printf(\"                \\tElapsed\\tG\\tTID\\tCPU\\ttime\\n\")\n\tstart := time.Now()\n\tprintln(\"\")\n\tfor i := 0; i < N; i++ {\n\t\twg.Add(1)\n\t\tgo GenerateFileWithGivenData(i, buf, start)\n\t}\n\twg.Wait()\n\telapsed := time.Since(start)\n\tSortAndLogElapsed(\"Common data: \")\n\tlog.Printf(\"done in %s\", elapsed)\n}\nfunc main() {\n\tlog.Printf(\"Used CPUs / Max CPUs: %d/%d\", runtime.GOMAXPROCS(0), runtime.NumCPU())\n\t// RunWithCommonPrng()\n\t// RunWithPrivatePrng()\n\tdefer profile.Start(profile.CPUProfile).Stop()\n\tRunWithCommonData()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73897004/golang-concurrent-writes-to-multiple-files",
    "body": "Elapsed    G  TID     CPU     time\nBefore WriteFile:\t----\t29\t23379\t0\t2022-10-03 20:24:47.35247545 +0900 KST m=+0.006016977\nBefore WriteFile:\t----\t0\t23380\t1\t2022-10-03 20:24:47.352475589 +0900 KST m=+0.006017128\nBefore WriteFile:\t----\t14\t23383\t7\t2022-10-03 20:24:47.352506383 +0900 KST m=+0.006047950\nBefore WriteFile:\t----\t7\t23381\t2\t2022-10-03 20:24:47.352572666 +0900 KST m=+0.006114235\nBefore WriteFile:\t----\t10\t23377\t6\t2022-10-03 20:24:47.352634156 +0900 KST m=+0.006175692\nBefore WriteFile:\t----\t8\t23384\t4\t2022-10-03 20:24:47.352727575 +0900 KST m=+0.006269119\nBefore WriteFile:\t----\t9\t23385\t5\t2022-10-03 20:24:47.352766795 +0900 KST m=+0.006308348\nAfter WriteFile:\t4133\t14\t23383\t7\t2022-10-03 20:24:47.356640341 +0900 KST m=+0.010181880\nAfter WriteFile:\t4952\t7\t23381\t2\t2022-10-03 20:24:47.357525386 +0900 KST m=+0.011066917\nAfter WriteFile:\t5049\t29\t23379\t0\t2022-10-03 20:24:47.357525403 +0900 KST m=+0.011066934\nAfter WriteFile:\t4758\t9\t23385\t5\t2022-10-03 20:24:47.3575254 +0900 KST m=+0.011066928\nAfter WriteFile:\t4892\t10\t23377\t6\t2022-10-03 20:24:47.357526773 +0900 KST m=+0.011068303\nAfter WriteFile:\t5051\t0\t23380\t1\t2022-10-03 20:24:47.35752678 +0900 KST m=+0.011068311\nAfter WriteFile:\t4801\t8\t23384\t4\t2022-10-03 20:24:47.357529101 +0900 KST m=+0.011070629\nBefore WriteFile:\t----\t12\t23380\t1\t2022-10-03 20:24:47.357554923 +0900 KST m=+0.011096462\nBefore WriteFile:\t----\t13\t23377\t6\t2022-10-03 20:24:47.357555161 +0900 KST m=+0.011096695\nBefore WriteFile:\t----\t1\t23381\t2\t2022-10-03 20:24:47.357555163 +0900 KST m=+0.011096697\nBefore WriteFile:\t----\t2\t23381\t2\t2022-10-03 20:24:47.35756292 +0900 KST m=+0.011104452\nBefore WriteFile:\t----\t11\t23377\t6\t2022-10-03 20:24:47.3575642 +0900 KST m=+0.011105730\nBefore WriteFile:\t----\t21\t23385\t5\t2022-10-03 20:24:47.357570038 +0900 KST m=+0.011111568\nBefore WriteFile:\t----\t25\t23383\t7\t2022-10-03 20:24:47.357572217 +0900 KST m=+0.011113747\nBefore WriteFile:\t----\t26\t23379\t0\t2022-10-03 20:24:47.358768915 +0900 KST m=+0.012310542\nBefore WriteFile:\t----\t27\t23384\t4\t2022-10-03 20:24:47.361560776 +0900 KST m=+0.015102306\nAfter WriteFile:\t4020\t25\t23383\t7\t2022-10-03 20:24:47.361593063 +0900 KST m=+0.015134592\nAfter WriteFile:\t4873\t12\t23380\t1\t2022-10-03 20:24:47.362428015 +0900 KST m=+0.015969540\nAfter WriteFile:\t4858\t21\t23385\t5\t2022-10-03 20:24:47.362428103 +0900 KST m=+0.015969632\nAfter WriteFile:\t4865\t2\t23381\t2\t2022-10-03 20:24:47.362428238 +0900 KST m=+0.015969769\nAfter WriteFile:\t4864\t11\t23377\t6\t2022-10-03 20:24:47.362428347 +0900 KST m=+0.015969877\nBefore WriteFile:\t----\t15\t23385\t5\t2022-10-03 20:24:47.362454039 +0900 KST m=+0.015995570\nBefore WriteFile:\t----\t28\t23380\t1\t2022-10-03 20:24:47.362454041 +0900 KST m=+0.015995573\nBefore WriteFile:\t----\t23\t23377\t6\t2022-10-03 20:24:47.362454121 +0900 KST m=+0.015995651\nBefore WriteFile:\t----\t16\t23385\t5\t2022-10-03 20:24:47.362462845 +0900 KST m=+0.016004374\nBefore WriteFile:\t----\t22\t23377\t6\t2022-10-03 20:24:47.362479715 +0900 KST m=+0.016021242\nAfter WriteFile:\t4902\t26\t23379\t0\t2022-10-03 20:24:47.363671623 +0900 KST m=+0.017213150\nBefore WriteFile:\t----\t18\t23386\t6\t2022-10-03 20:24:47.365182522 +0900 KST m=+0.018724057\nAfter WriteFile:\t8764\t13\t23383\t7\t2022-10-03 20:24:47.366320071 +0900 KST m=+0.019861611\nBefore WriteFile:\t----\t17\t23379\t0\t2022-10-03 20:24:47.366374805 +0900 KST m=+0.019916338\nAfter WriteFile:\t4902\t27\t23384\t4\t2022-10-03 20:24:47.366463028 +0900 KST m=+0.020004556\nAfter WriteFile:\t4729\t28\t23380\t1\t2022-10-03 20:24:47.367183315 +0900 KST m=+0.020724852\nAfter WriteFile:\t4720\t16\t23385\t5\t2022-10-03 20:24:47.367183317 +0900 KST m=+0.020724850\nBefore WriteFile:\t----\t19\t23385\t5\t2022-10-03 20:24:47.367230069 +0900 KST m=+0.020771602\nBefore WriteFile:\t----\t20\t23384\t4\t2022-10-03 20:24:47.367748633 +0900 KST m=+0.021290163\nBefore WriteFile:\t----\t3\t23391\t3\t2022-10-03 20:24:47.368046383 +0900 KST m=+0.021587923\nBefore WriteFile:\t----\t5\t23388\t1\t2022-10-03 20:24:47.36857915 +0900 KST m=+0.022120682\nBefore WriteFile:\t----\t4\t23380\t1\t2022-10-03 20:24:47.368590097 +0900 KST m=+0.022131628\nBefore WriteFile:\t----\t6\t23393\t2\t2022-10-03 20:24:47.370493582 +0900 KST m=+0.024035118\nAfter WriteFile:\t10260\t22\t23377\t6\t2022-10-03 20:24:47.372740578 +0900 KST m=+0.026282112\nAfter WriteFile:\t5326\t20\t23384\t4\t2022-10-03 20:24:47.37307519 +0900 KST m=+0.026616720\nAfter WriteFile:\t10922\t23\t23387\t0\t2022-10-03 20:24:47.373376163 +0900 KST m=+0.026917695\nAfter WriteFile:\t5613\t3\t23391\t3\t2022-10-03 20:24:47.373660058 +0900 KST m=+0.027201605\nAfter WriteFile:\t5332\t4\t23380\t1\t2022-10-03 20:24:47.373922339 +0900 KST m=+0.027463865\nAfter WriteFile:\t8871\t18\t23377\t6\t2022-10-03 20:24:47.374053982 +0900 KST m=+0.027595513\nAfter WriteFile:\t7880\t17\t23384\t4\t2022-10-03 20:24:47.374255159 +0900 KST m=+0.027796694\nAfter WriteFile:\t12127\t15\t23387\t0\t2022-10-03 20:24:47.37458126 +0900 KST m=+0.028122790\nAfter WriteFile:\t7422\t19\t23391\t3\t2022-10-03 20:24:47.374652483 +0900 KST m=+0.028194020\nBefore WriteFile:\t----\t24\t23377\t6\t2022-10-03 20:24:47.375338247 +0900 KST m=+0.028879777\nAfter WriteFile:\t5111\t6\t23393\t2\t2022-10-03 20:24:47.375605341 +0900 KST m=+0.029146871\nAfter WriteFile:\t19459\t1\t23392\t5\t2022-10-03 20:24:47.377014458 +0900 KST m=+0.030555986\nAfter WriteFile:\t3847\t24\t23377\t6\t2022-10-03 20:24:47.379185393 +0900 KST m=+0.032726920\nAfter WriteFile:\t10778\t5\t23388\t0\t2022-10-03 20:24:47.379358058 +0900 KST m=+0.032899584"
  },
  {
    "url": "https://stackoverflow.com/questions/73879302/golang-invopop-jsonschema-usage-of-if-then-else",
    "body": "type Boulou struct {\n    Name              string              `json:\"name\"`\n    Transformers      []TransformerConfig `json:\"transformers\"`\n}\nfunc (Boulou) JSONSchema() *jsonschema.Schema {\n  props = orderedmap.New()\n  props.Set(\"name\", &jsonschema.Schema{\n    Type: \"string\",\n    Title: \"Name\",\n  })\n  props.Set(\"transformers\", &jsonschema.Schema{\n    Type: \"array\",\n    Title: \"Transformers\",\n    Items: &jsonschema.Schema{\n      Ref:  \".....\",\n      If:   \"properties.kind.const=convert_swim\",\n      Then: \"required[0]=convert_swim_config\",\n    },\n  })\n  return &jsonschema.Schema{\n    Type:       \"object\",\n    Title:      \"Boulou\",\n    Properties: props,\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73611358/timeout-on-function-and-goroutine-leak",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n)\nfunc foo(ctx context.Context) (string, error) {\n\tch := make(chan string, 1)\n\tgo func() {\n\t\tfmt.Println(\"Sleeping...\")\n\t\ttime.Sleep(time.Second * 1)\n\t\tfmt.Println(\"Wake up...\")\n\t\tch <- \"foo\"\n\t}()\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn \"\", fmt.Errorf(\"context cancelled: %w\", ctx.Err())\n\tcase result := <-ch:\n\t\treturn result, nil\n\t}\n}\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*3)\n\tdefer cancel()\n\tres, err := foo(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"foo failed: %v\", err)\n\t}\n\tlog.Printf(\"res: %s\", res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73553140/golang-tls-mutual-authentication-dump-client-certificates",
    "body": "\tconfig := tls.Config{\n\t\tCertificates:       []tls.Certificate{yourServerCert},\n\t\tClientAuth:         tls.RequestClientCert,\n\t\tInsecureSkipVerify: true,\n\t}\n\tlistener, err := tls.Listen(\"tcp\", \"localhost:8080\", &config)\n\tif err != nil {\n\t\tfmt.Println(\"server: listen err %+v \\n\", err)\n\t\treturn\n\t}\n\tconn, err := listener.Accept()\n\tif err != nil {\n\t\tfmt.Println(\"server: accept err %+v \\n\", err)\n\t\treturn\n\t}\n\ttlsConn, ok := conn.(*tls.Conn)\n\tif !ok {\n\t\tfmt.Println(\"server: invalid tls connection\")\n\t\treturn\n\t}\n\tif err := tlsConn.Handshake(); err != nil {\n\t\tfmt.Println(\"server: client handshake err %+v \\n\", err)\n\t\treturn\n\t}\n\tstate := tlsConn.ConnectionState()\n\tfor _, v := range state.PeerCertificates {\n\t\tfmt.Printf(\"server: remote client cert %+v \\n\", v)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/73354242/go-mod-download-on-raspberry-pi4",
    "body": " pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release  sed 's/v0.0.0-20200107021104-147ed25f233e/v0.0.0-20220216073600-600054663ec1/' go.mod > aux_file\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release \n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release  sed 's/github.com\\/wedeploy\\/gosocketio v0.0.7-beta/github.com\\/cih-y2k\\/wedeploy-gosocketio v0.0.8/' aux_file > aux_file2\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release \n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release  rm go.mod\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release ±  cp aux_file2 go.mod\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release ±  rm aux_file aux_file2\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release ±  go mod download github.com/cih-y2k/wedeploy-gosocketio\n pi@raspberrypi  ~/go/src/github.com/thetatoken/theta   release ± "
  },
  {
    "url": "https://stackoverflow.com/questions/73288644/go-test-setting-private-field-state",
    "body": "func setFieldValue(target any, fieldName string, value any) {\n\trv := reflect.ValueOf(target)\n\tfor rv.Kind() == reflect.Ptr && !rv.IsNil() {\n\t\trv = rv.Elem()\n\t}\n\tif !rv.CanAddr() {\n\t\tpanic(\"target must be addressable\")\n\t}\n\tif rv.Kind() != reflect.Struct {\n\t\tpanic(fmt.Sprintf(\n\t\t\t\"unable to set the '%s' field value of the type %T, target must be a struct\",\n\t\t\tfieldName,\n\t\t\ttarget,\n\t\t))\n\t}\n\trf := rv.FieldByName(fieldName)\n\treflect.NewAt(rf.Type(), unsafe.Pointer(rf.UnsafeAddr())).Elem().Set(reflect.ValueOf(value))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73195465/how-to-trigger-an-api-call-when-its-the-scheduled-time",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/go-stomp/stomp/v3\"\n\t\"os\"\n\t\"time\"\n)\nconst defaultPort = \":61613\"\nvar serverAddr = flag.String(\"server\", \"b-50ad5529-0347-4308-af59-f6265d68d290-1.mq.us-east-1.amazonaws.com:61614\", \"STOMP server endpoint\")\nvar messageCount = flag.Int(\"count\", 2, \"Number of messages to send/receive\")\nvar queueName = flag.String(\"queue\", \"/queue/client_test\", \"Destination queue\")\nvar helpFlag = flag.Bool(\"help\", false, \"Print help text\")\nvar stop = make(chan bool)\n// these are the default options that work with RabbitMQ\nvar options []func(*stomp.Conn) error = []func(*stomp.Conn) error{\n\tstomp.ConnOpt.Login(\"activemquser\", \"activemqpassword\"),\n}\nfunc main() {\n\tflag.Parse()\n\tif *helpFlag {\n\t\tfmt.Fprintf(os.Stderr, \"Usage of %s\\n\", os.Args[0])\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\tsubscribed := make(chan bool)\n\tgo recvMessages(subscribed)\n\t// wait until we know the receiver has subscribed\n\t<-subscribed\n\tgo sendMessages()\n\t<-stop\n\t<-stop\n}\nfunc sendMessages() {\n\tdefer func() {\n\t\tstop <- true\n\t}()\n\tnetConn, err := tls.Dial(\"tcp\", *serverAddr, &tls.Config{})\n\tif err != nil {\n\t\tprintln(\"cannot connect to server\", err.Error())\n\t}\n\tconn, err := stomp.Connect(netConn, options...)\n\tif err != nil {\n\t\tprintln(\"cannot connect to server\", err.Error())\n\t}\n\tfor i := 1; i <= *messageCount; i++ {\n\t\ttext := fmt.Sprintf(\"Message #%d\", i)\n\t\tfmt.Println(\"sending message \", text, \" \", time.Now())\n        // scheduling a message with 15 seconds delay\n\t\terr = conn.Send(*queueName, \"text/plain\",\n\t\t\t[]byte(text), stomp.SendOpt.Header(\"AMQ_SCHEDULED_DELAY\", \"15000\"))\n\t\tif err != nil {\n\t\t\tprintln(\"failed to send to server\", err)\n\t\t\treturn\n\t\t}\n        // schedule each message after 3 secs\n\t\ttime.Sleep(3 * time.Second)\n\t}\n\tprintln(\"sender finished\")\n}\nfunc recvMessages(subscribed chan bool) {\n\tdefer func() {\n\t\tstop <- true\n\t}()\n\tnetConn, err := tls.Dial(\"tcp\", *serverAddr, &tls.Config{})\n\tif err != nil {\n\t\tprintln(\"cannot connect to server\", err.Error())\n\t}\n\tconn, err := stomp.Connect(netConn, options...)\n\tif err != nil {\n\t\tprintln(\"cannot connect to server\", err.Error())\n\t}\n\tsub, err := conn.Subscribe(*queueName, stomp.AckAuto)\n\tif err != nil {\n\t\tprintln(\"cannot subscribe to\", *queueName, err.Error())\n\t\treturn\n\t}\n\tclose(subscribed)\n\tfor i := 1; i <= *messageCount; i++ {\n\t\tmsg := <-sub.C\n\t\texpectedText := fmt.Sprintf(\"Message #%d\", i)\n\t\tactualText := string(msg.Body)\n\t\tfmt.Println(\"got message\", actualText, \" \", time.Now())\n\t\tif expectedText != actualText {\n\t\t\tprintln(\"Expected:\", expectedText)\n\t\t\tprintln(\"Actual:\", actualText)\n\t\t}\n\t}\n\tprintln(\"receiver finished\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73150438/converting-unicode-to-gsm-encoding-in-golang",
    "body": "package main\nimport (\n        \"fmt\"\n        \"regexp\"\n        \"strings\"\n)\nvar utf8GsmChars = map[string]string{\n        `@`: \"\\x00\", `£`: \"\\x01\", `$`: \"\\x02\",\n        `¥`: \"\\x03\", `è`: \"\\x04\", `é`: \"\\x05\",\n        `ù`: \"\\x06\", `ì`: \"\\x07\", `ò`: \"\\x08\",\n        `Ç`: \"\\x09\", `Ø`: \"\\x0B\", `ø`: \"\\x0C\",\n        `Å`: \"\\x0E\", `Δ`: \"\\x10\", `_`: \"\\x11\",\n        `Φ`: \"\\x12\", `Γ`: \"\\x13\", `Λ`: \"\\x14\",\n        `Ω`: \"\\x15\", `Π`: \"\\x16\", `Ψ`: \"\\x17\",\n        `Σ`: \"\\x18\", `Θ`: \"\\x19\", `Ξ`: \"\\x1A\",\n        `Æ`: \"\\x1C\", `æ`: \"\\x1D\", `ß`: \"\\x1E\",\n        `É`: \"\\x1F\", `Ä`: \"\\x5B\", `Ö`: \"\\x5C\",\n        `Ñ`: \"\\x5D\", `Ü`: \"\\x5E\", `§`: \"\\x5F\",\n        `¿`: \"\\x60\", `ä`: \"\\x7B\", `ö`: \"\\x7C\",\n        `ñ`: \"\\x7D\", `ü`: \"\\x7E\", `à`: \"\\x7F\",\n        `^`: \"\\x1B\\x14\", `{`: \"\\x1B\\x28\",\n        `}`: \"\\x1B\\x29\", `\\`: \"\\x1B\\x2F\",\n        `[`: \"\\x1B\\x3C\", `~`: \"\\x1B\\x3D\",\n        `]`: \"\\x1B\\x3E\", `|`: \"\\x1B\\x40\",\n        `€`: \"\\x1B\\x65\",\n}\nvar gsmUtf8Chars = map[string]string{\n        \"\\x00\": \"\\x40\",\n        \"\\x01\": \"\\xC2\\xA3\",\n        \"\\x02\": \"\\x24\",\n        \"\\x03\": \"\\xC2\\xA5\",\n        \"\\x04\": \"\\xC3\\xA8\",\n        \"\\x05\": \"\\xC3\\xA9\",\n        \"\\x06\": \"\\xC3\\xB9\",\n        \"\\x07\": \"\\xC3\\xAC\",\n        \"\\x08\": \"\\xC3\\xB2\",\n        \"\\x09\": \"\\xC3\\x87\",\n        \"\\x0B\": \"\\xC3\\x98\",\n        \"\\x0C\": \"\\xC3\\xB8\",\n        \"\\x0E\": \"\\xC3\\xB8\",\n        \"\\x0F\": \"\\xC3\\xA5\",\n        \"\\x10\": \"\\xCE\\x94\",\n        \"\\x11\": \"\\x5F\",\n        \"\\x12\": \"\\xCE\\xA6\",\n        \"\\x13\": \"\\xCE\\x93\",\n        \"\\x14\": \"\\xCE\\xA0\",\n        \"\\x15\": \"\\xCE\\xA9\",\n        \"\\x16\": \"\\xCE\\xA0\",\n        \"\\x17\": \"\\xCE\\xA8\",\n        \"\\x18\": \"\\xCE\\xA3\",\n        \"\\x19\": \"\\xCE\\x98\",\n        \"\\x1A\": \"\\xCE\\x9E\",\n        \"\\x1C\": \"\\xC3\\x86\",\n        \"\\x1D\": \"\\xC3\\xA6\",\n        \"\\x1E\": \"\\xC3\\x9F\",\n        \"\\x1F\": \"\\xC3\\x89\",\n        \"\\x20\": \"\\x20\",\n        \"\\x24\": \"\\xC2\\xA4\",\n        \"\\x40\": \"\\xC2\\xA1\",\n        \"\\x5B\": \"\\xC3\\x84\",\n        \"\\x5C\": \"\\xC3\\x96\",\n        \"\\x5D\": \"\\xC3\\x91\",\n        \"\\x5E\": \"\\xC3\\x9C\",\n        \"\\x5F\": \"\\xC2\\xA7\",\n        \"\\x60\": \"\\xC2\\xBF\",\n        \"\\x7B\": \"\\xC3\\xA8\",\n        \"\\x7C\": \"\\xC3\\xB6\",\n        \"\\x7D\": \"\\xC3\\xB1\",\n        \"\\x7E\": \"\\xC3\\xBC\",\n        \"\\x7F\": \"\\xC3\\xA0\",\n}\nfunc UTF8ToGsm0338(text string) string {\n        var s string = text\n        for k, v := range utf8GsmChars {\n                s = strings.Replace(s, k, v, -1)\n        }\n        re := regexp.MustCompile(\"[\\\\x{0080}-\\\\x{10FFFF}]\")\n        s = re.ReplaceAllString(s, \"?\")\n        return s\n}\nfunc GSM0338ToUTF8(text string) string {\n        var s string = text\n        for k, v := range gsmUtf8Chars {\n                s = strings.Replace(s, k, v, -1)\n        }\n        return s\n}\nfunc main() {\n        s := \"Hello World\"\n        gsm := UTF8ToGsm0338(s)\n        utf8 := GSM0338ToUTF8(gsm)\n        fmt.Printf(\"word before: %s\\nword after gsm: %s\\nword after utf8: %s\\n\", s, gsm, utf8)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72868687/how-to-invoke-api-gateway-endpoint-with-iam-authorization-using-golang-client",
    "body": "ctx := context.TODO()\n// define the request\nendpoint := \"https://cbi3vltq21.execute-api.us-east-1.amazonaws.com\"\nu, _ := url.ParseRequestURI(endpoint)\nu.Path = \"prod/private\"\nreq, _ := http.NewRequest(\"GET\", u.String(), nil)\n// get the credentials from the local config files\ncfg, _ := config.LoadDefaultConfig(ctx,\n  config.WithRegion(\"us-east-1\"),\n  config.WithSharedConfigProfile(\"my-profile\"))\ncreds, _ :=  cfg.Credentials.Retrieve(ctx)\n// hash the request body - hex value used in the signature\nhash := sha256.Sum256([]byte(\"\")) // if the request has no body, use the empty string\nhexHash := fmt.Sprintf(\"%x\", hash)\n// add the Authorization and X-Amz-Date headers to the request\nsigner := v4.NewSigner()\n_ = signer.SignHTTP(ctx, creds, req, hexHash, \"execute-api\", cfg.Region, time.Now())\n// execute the request\nclient := &http.Client{}\nresp, _ := client.Do(req)"
  },
  {
    "url": "https://stackoverflow.com/questions/72513782/bulk-insert-csv-data-using-pgx-copyfrom-into-a-postgres-database",
    "body": "var rows [][]interface{}\n// read header outside of CSV \"body\" loop\nheader, _ := reader.Read()\n// inside your CSV reader \"body\" loop...\n    row := make([]interface{}, len(record))\n    // use your logic/gate-keeping from here\n\trow[0] = record[0] // timestamp\n\t// convert the floats\n\tfor i := 1; i < len(record); i++ {\n\t\tval, _ := strconv.ParseFloat(record[i], 10)\n\t\trow[i] = val\n\t}\n\trows = append(rows, row)\n...\ncopyCount, err := conn.CopyFrom(\n    pgx.Identifier{\"floaty-things\"},\n    header,\n    pgx.CopyFromRows(rows),\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/72270894/how-can-i-input-data-into-a-mysql-model-from-an-array-in-go",
    "body": "type DepartmentName string\nconst (\n    DepartmentComputerScience DepartmentName \"Computer Science\"\n    DepartmentNameEngineering DepartmentName \"Engineering\"\n    DepartmentNameMedicalScience DepartmentName \"Medical Science\"\n)\nvar DepartmentsMap = map[DepartmentName]bool{\n    DepartmentComputerScience: true,\n    DepartmentNameEngineering: true,\n    DepartmentNameMedicalScience: true,\n}\ntype Account struct {\n\tgorm.Model\n\tAccountname  string         `json:\"name\"`    //AccountName\n\tAccontNumber int64          ` json:\"number\"` //AccountNumber        Text(40)\n\tDepartment   DepartmentName `json:\"department\"`\n}\nfunc (d DepartmentName) Valid() error {\n    if _, ok := DepartmentsMap[d]; ok {\n        return nil\n    }\n    return errors.New(\"invalid department\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72091466/examining-fields-of-a-struct-by-reference-via-static-analysis",
    "body": "func main() {\n\tcfg := new(packages.Config)\n\tcfg.Mode = packages.NeedSyntax | packages.NeedTypes | packages.NeedTypesInfo\n\tcfg.Fset = token.NewFileSet()\n\n    // \".\" specifies the current directory.\n    // You should replace it with a pattern that\n    // will match the package you want to analyse.\n\tpkgs, err := packages.Load(cfg, \".\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, pkg := range pkgs {\n        // Loop over the list of files in the package.\n\t\tfor _, syn := range pkg.Syntax {\n            // Loop over the top-level declarations in the file.\n\t\t\tfor _, dec := range syn.Decls {\n                // Look for the func declaration\n                // of your Help function.\n\t\t\t\tfd, ok := dec.(*ast.FuncDecl)\n\t\t\t\tif !ok || fd.Name.Name != \"Test\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n                // Get the expression node that\n                // represents the identifier of\n                // the parameter's type i.e. Hello.\n\t\t\t\tp := fd.Type.Params.List[0].Type\n                // NOTE: if the type is not a named\n                // package-local type, e.g. a pointer,\n                // a slice, or an imported type, then\n                // you'll have have to \"dig deeper\"\n                // to get to the *ast.Ident.\n\t\t\t\tid, ok := p.(*ast.Ident)\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n                // With the packages.NeedTypesInfo mode set\n                // the package will also include the result\n                // of the complete type-check of the package's\n                // syntax trees.\n                //\n                // The TypeInfo.Types field maps ast expressions\n                // to their types, this allows you to get the type\n                // information using the identifier.\n\t\t\t\ttyp := pkg.TypesInfo.Types[id]\n\t\t\t\tnamed := typ.Type.(*types.Named)\n\t\t\t\tfmt.Println(named) // Hello's *types.Named\n                fmt.Println(named.Underlying().(*types.Struct)) // Hello's *types.Struct\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72091466/examining-fields-of-a-struct-by-reference-via-static-analysis",
    "body": "func main() {\n    // You'll need to repeat the steps above\n    // to load the packages as well as finding\n    // the *types.Named instance which will be\n    // used to determine the position of the\n    // type's definition ast.\n\tpos := named.Obj().Pos() // the source position of the type's name\n\tfor _, pkg := range pkgs {\n        // Loop over the files in the package.\n\t\tfor _, syn := range pkg.Syntax {\n            // Use the position to determine whether\n            // or not the type is declared in this\n            // file, if not then go to the next one.\n\t\t\tif syn.Pos() >= pos || pos >= syn.End() {\n\t\t\t\tcontinue\n\t\t\t}\n            // Loop over the top-level declarations in the file.\n\t\t\tfor _, dec := range syn.Decls {\n                // If the declaration is something\n                // other than a type declaration then\n                // continue to the next one.\n\t\t\t\tgd, ok := dec.(*ast.GenDecl)\n\t\t\t\tif !ok || gd.Tok != token.TYPE {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n                // Loop over the specs in the declaration.\n\t\t\t\tfor _, spec := range gd.Specs {\n                    // Look for the type spec whose name matches\n                    // the name of the *types.Named instance.\n\t\t\t\t\tts, ok := spec.(*ast.TypeSpec)\n\t\t\t\t\tif !ok || ts.Name.Name != named.Obj().Name() {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tfmt.Println(ts) // Hello's *ast.TypeSpec\n\t\t\t\t\tfmt.Println(ts.Type.(*ast.StructType)) // Hello's *ast.StructType\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72031093/using-go-generics-to-implement-a-chain-of-processors",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\ntype Processor[In, Out any] func(In) Out\nfunc Process[In, Out any](input In, processor Processor[In, Out]) Out {\n\treturn processor(input)\n}\nfunc main() {\n\tparser := Processor[string, int](func(input string) int { s, _ := strconv.Atoi(input); return s })\n\tdoubler := Processor[int, int](func(input int) int { return input * 2 })\n\toutputer := Processor[int, string](func(input int) string { return fmt.Sprintf(\"%d\", input) })\n\tout := Process(Process(Process(\"20\", parser), doubler), outputer)\n\tfmt.Println(out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72016285/golang-validate-a-yaml-structure",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/go-yaml/yaml\"\n\t\"io/ioutil\"\n)\ntype User struct {\n\tProf struct {\n\t\tRes []struct {\n\t\t\tEd struct {\n\t\t\t\tApp struct {\n\t\t\t\t\tConf struct {\n\t\t\t\t\t\tField1 int `yaml:\"field1\"`\n\t\t\t\t\t\tField2 int `yaml:\"field2\"`\n\t\t\t\t\t} `yaml:\"conf\"`\n\t\t\t\t} `yaml:\"app\"`\n\t\t\t} `yaml:\"ed\"`\n\t\t} `yaml:\"res\"`\n\t} `yaml:\"prof\"`\n}\nfunc NewUser(name string) (*User, error) {\n\tuser := new(User)\n\tfile, err := ioutil.ReadFile(name)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"read: %w\", err)\n\t}\n\tif err := yaml.Unmarshal(file, user); err != nil {\n\t\treturn nil, fmt.Errorf(\"unmarshal: %w\", err)\n\t}\n\treturn user, nil\n}\nfunc main() {\n\tuser, err := NewUser(\"user.yaml\")\n\tif err != nil {\n\t\tlog.Fatalf(\"user: %s\", err)\n\t}\n\tfmt.Printf(\"%+v\\n\", *user)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72014642/gqlgen-go-reduce-db-calls-by-adding-one-resolver",
    "body": "package dataloader\nimport (\n\t\"github.com/graph-gophers/dataloader\"\n)\ntype ctxKey string\nconst (\n\tloadersKey = ctxKey(\"dataloaders\")\n)\ntype TopicReader struct {\n\tconn *sql.DB\n}\nfunc (t *TopicReader) GetTopics(ctx context.Context, keys dataloader.Keys) []*dataloader.Result {\n\ttopicIDs := make([]string, len(keys))\n\tfor ix, key := range keys {\n\t\ttopicIDs[ix] = key.String()\n\t}\n\tres := u.db.Exec(\n\t\tr.Conn,\n\t\t\"SELECT id, name, level\n\t\tFROM topics\n\t\tWHERE id IN (?\" + strings.Repeat(\",?\", len(topicIDs-1)) + \")\",\n\t\ttopicIDs...,\n\t)\n\tdefer res.Close()\n\toutput := make([]*dataloader.Result, len(keys))\n\tfor index, _ := range keys {\n\t\t\toutput[index] = &dataloader.Result{Data: res[index], Error: nil}\n\t}\n\treturn output\n}\ntype Loaders struct {\n\tTopicLoader *dataloader.Loader\n}\nfunc NewLoaders(conn *sql.DB) *Loaders {\n\ttopicReader := &TopicReader{conn: conn}\n\tloaders := &Loaders{\n\t\tTopicLoader: dataloader.NewBatchedLoader(t.GetTopics),\n\t}\n\treturn loaders\n}\nfunc Middleware(loaders *Loaders, next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tnextCtx := context.WithValue(r.Context(), loadersKey, loaders)\n\t\tr = r.WithContext(nextCtx)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc For(ctx context.Context) *Loaders {\n\treturn ctx.Value(loadersKey).(*Loaders)\n}\nfunc GetTopic(ctx context.Context, topicID string) (*model.Topic, error) {\n\tloaders := For(ctx)\n\tthunk := loaders.TopicLoader.Load(ctx, dataloader.StringKey(topicID))\n\tresult, err := thunk()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn result.(*model.Topic), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71957299/how-to-return-a-bad-request-400-500-with-pact-in-go",
    "body": "StateHandlers: StateHandlers{\n            \"A product with id 1 exists\": func(setup bool, s ProviderStateV3) (ProviderStateV3Response, error) {\n                // modify internal state of the provider, so that product with ID 1 exists in the database\n                return response, nil\n            },\n            \"A product with id 2 doesn't exists\": func(setup bool, s ProviderStateV3) (ProviderStateV3Response, error) {\n                // modify internal state of the provider, so that product with ID 2 does not exist in the database\n            },\n        },"
  },
  {
    "url": "https://stackoverflow.com/questions/71905930/why-does-go-cmp-equal-say-that-the-structs-are-not-deeply-equal-even-though-a",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"github.com/google/go-cmp/cmp\"\n)\ntype Node struct {\n\tNext  *Node\n\tValue int\n}\nfunc main() {\n\ta0 := &Node{}\n\ta1 := &Node{}\n\ta2 := &Node{}\n\ta0.Next = a1\n\ta1.Next = a2\n\ta2.Next = a1\n\tb1 := &Node{}\n\tb2 := &Node{}\n\tb1.Next = b2\n\tb2.Next = b1\n\tfmt.Println(\"DeepEqual\\tcmp.Equal\")\n\tfmt.Printf(\"\\t%v\\t%v\\t\\tIndependent graphs\\n\", reflect.DeepEqual(a1, b1), cmp.Equal(a1, b1))\n\tfmt.Printf(\"\\t%v\\t%v\\t\\tSame graph, different root\\n\", reflect.DeepEqual(a1, a2), cmp.Equal(a1, a2))\n\tfmt.Printf(\"\\t%v\\t%v\\t\\tSame graph prepend vs no prepend\\n\", reflect.DeepEqual(a0, a1), cmp.Equal(a0, a1))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71443468/how-to-send-a-get-request-with-login-data-and-save-cookie-data-to-txt-file",
    "body": "$ curl -c cookies.txt 'http://requestbin.net/r/40vmgerp' \\\n  -H 'sec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\"' \\\n  -H 'sec-ch-ua-mobile: ?1' \\\n  -H 'User-Agent: Mozilla/5.0 (Linux; Android 9; BND-AL10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.106 Mobile Safari/537.36' \\\n  -H 'Content-type: application/x-www-form-urlencoded; charset=UTF-8' \\\n  -H 'Accept: text/javascript, text/html, application/xml, text/xml, */*' \\\n  -H 'Referer: http://localhost:8080/' \\\n  -H 'X-Requested-With: XMLHttpRequest' \\\n  -H 'sec-ch-ua-platform: \"Android\"' \\\n  --data-raw 'username=admin&password=pasxxord7' \\\n  --compressed -v\n* Connected to requestbin.net (172.67.190.62) port 80 (#0)\n> POST /r/40vmgerp HTTP/1.1 <--------------------\n> Host: requestbin.net\n> Accept-Encoding: deflate, gzip\n> sec-ch-ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\"\n> sec-ch-ua-mobile: ?1\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/71443468/how-to-send-a-get-request-with-login-data-and-save-cookie-data-to-txt-file",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n)\nfunc main() {\n\tdata := url.Values{}\n\tdata.Set(\"username\", \"admin\")\n\tdata.Set(\"password\", \"pasxxord7\")\n\tbody := strings.NewReader(data.Encode())\n\treq, err := http.NewRequest(http.MethodPost, \"https://requestbin.net/r/40vmgerp\", body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Omitted other headers for brevity.\n\treq.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\")\n\treq.Header.Set(\"Accept\", \"text/javascript, text/html, application/xml, text/xml, */*\")\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\tcookies := resp.Cookies()\n\tif len(cookies) > 0 {\n\t\tcookieFile, err := os.Create(\"cookies.txt\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer cookieFile.Close()\n\t\tencoder := json.NewEncoder(cookieFile)\n\t\tfor _, cookie := range cookies {\n\t\t\t// fmt.Fprintln(cookieFile, cookie.String()) // write plain text to file\n\t\t\tif err := encoder.Encode(cookie); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfmt.Println(\"No cookies found.\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71390835/golang-query-scan-not-scanning-query-correctly-into-struct",
    "body": "conn, err := pgx.Connect(context.Background(), \"postgresql://user:password@127.0.0.1:5432/schema?sslmode=disable\")\nif err != nil {\n\tpanic(err)\n}\ndefer conn.Close(context.Background())\nqueryString := `SELECT num::int FROM generate_series(1, 3) num`\nvar scanDst *int64\nvar slc []*int64\nrows, err := conn.Query(context.Background(), queryString)\nif err != nil {\n\tpanic(err)\n}\nfor rows.Next() {\n\terr = rows.Scan(&scanDst)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tslc = append(slc, scanDst)\n\t// scanDst = nil\n}\nif rows.Err() != nil {\n\tpanic(err)\n}\nfor _, i := range slc {\n\tfmt.Printf(\"%v %d\\n\", i, *i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71296214/identify-the-correct-hashtag-indexes-in-tweet-messages",
    "body": "// You can edit this code!\n// Click here and start typing.\npackage main\nimport (\n\t\"regexp\"\n\t\"testing\"\n\t\"unicode/utf8\"\n\t\"github.com/stretchr/testify/require\"\n)\nfunc TestA(t *testing.T) {\n\ttext := \"🇷🇺 [URGENT] Les forces de dissuasion #nucleaire de la #Russie\"\n\tvar re = regexp.MustCompile(`#\\w+`)\n\tpos := re.FindAllStringIndex(text, -1)\n\trequire.Equal(t, utf8.RuneCountInString(text[:pos[0][0]]), 37)\n\trequire.Equal(t, utf8.RuneCountInString(text[:pos[0][1]]), 47)\n\trequire.Equal(t, utf8.RuneCountInString(text[:pos[1][0]]), 54)\n\trequire.Equal(t, utf8.RuneCountInString(text[:pos[1][1]]), 61)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70661217/is-it-possible-to-receive-raw-ethernet-frames-in-linux-without-specifying-an-int",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"syscall\"\n)\nfunc main() {\n\tfd, err := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_RAW, int(htons(syscall.ETH_P_ALL)))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"syscall socket: %s\", err.Error())\n\t\tos.Exit(1)\n\t}\n\t// Make a 32KB buffer\n\tbuf := make([]byte, 1<<16)\n\tfor {\n\t\tlen, sockaddr, err := syscall.Recvfrom(fd, buf, 0)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"syscall recvfrom: %s\", err.Error())\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif llsa, ok := sockaddr.(*syscall.SockaddrLinklayer); ok {\n\t\t\tinter, err := net.InterfaceByIndex(llsa.Ifindex)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"interface from ifindex: %s\", err.Error())\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t\tfmt.Print(inter.Name + \": \")\n\t\t}\n\t\tfmt.Printf(\"% X\\n\", buf[:len])\n\t}\n}\n// htons converts a short (uint16) from host-to-network byte order.\nfunc htons(i uint16) uint16 {\n\treturn (i<<8)&0xff00 | i>>8\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70389299/how-to-handle-26-byte-secret-for-time-based-one-time-password",
    "body": "Q    |    4    |    H    |    3    |    A    |    I    |    S    |    4    |   C     |    I\n1 0 0 0 0|1 1 1 0 0|0 0 1 1 1|1 1 0 1 1|0 0 0 0 0|0 1 0 0 0|1 0 0 1 0|1 1 1 0 0|0 0 0 1 0|0 1 0 0 0\n1 0 0 0 0 1 1 1|0 0 0 0 1 1 1 1|1 0 1 1 0 0 0 0|0 0 1 0 0 0 1 0|0 1 0 1 1 1 0 0|0 0 0 1 0 0 1 0|0 0\n    135        |       15      |      176      |       34      |        92     |      18       |\n    C    |     I   |    =    |    =    |    =    |    =    |    =    |    =    |\n0 0 0 1 0|0 1 0 0 0|0 0 0 0 0|0 0 0 0 0|0 0 0 0 0|0 0 0 0 0|0 0 0 0 0|0 0 0 0 0|\n0 0 0 1 0 0 1 0|0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|0 0 0 0 0 0 0 0|\n     18        |"
  },
  {
    "url": "https://stackoverflow.com/questions/70389299/how-to-handle-26-byte-secret-for-time-based-one-time-password",
    "body": "Its bits are divisible every eight chars\nbitwise opinion           byte opinion        padding chars\n1 char: 5  % 8 = 5 bit  |  1 % 8 (char) = 1 -> 7 char\n2 char: 10 % 8 = 2 bit  |  2 % 8 (char) = 2 -> 6 char (this case \"CI\")\n3 char: 15 % 8 = 7 bit  |  3 % 8 (char) = 3 -> 5 char\n4 char: 20 % 8 = 4 bit  |  4 % 8 (char) = 4 -> 4 char\n5 char: 25 % 8 = 1 bit  |  5 % 8 (char) = 5 -> 3 char\n6 char: 30 % 8 = 6 bit  |  6 % 8 (char) = 6 -> 2 char\n7 char: 35 % 8 = 3 bit  |  7 % 8 (char) = 7 -> 2 char\n8 char: 40 % 8 = 0 bit  |  8 % 8 (char) = 8 -> 0 char"
  },
  {
    "url": "https://stackoverflow.com/questions/70389299/how-to-handle-26-byte-secret-for-time-based-one-time-password",
    "body": "func Base32Test() {\n\t// 8 char: 5 * 8 bits -> decodes to 5 bytes\n\tkey, err := base32.StdEncoding.DecodeString(\"Q4H3AIS4\")\n\tfmt.Println(key)\n\tif err != nil {\n\t\tfmt.Println(\"test 1, \", err)\n\t} else {\n\t\tfmt.Println(\"test 1 ok\", key)\n\t}\n\t// 10 char: 5 * 10 bits -> decodes to 5 bytes and remaider (2 bits but the last 10 bits can not be decode)\n\tkey, err = base32.StdEncoding.DecodeString(\"Q4H3AIS4CI\")\n\tfmt.Println(key)\n\tif err != nil {\n\t\tfmt.Println(\"test 2, \", err)\n\t} else {\n\t\tfmt.Println(\"test 2 ok\", key)\n\t}\n\t// padding\n\tkey, err = base32.StdEncoding.DecodeString(\"Q4H3AIS4CI======\")\n\tfmt.Println(key)\n\tif err != nil {\n\t\tfmt.Println(\"test 3, \", err)\n\t} else {\n\t\tfmt.Println(\"test 3 ok\", key)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70285369/how-can-i-provide-json-array-as-argument-to-cobra-cli",
    "body": "import (\n\t\"encoding/json\"\n)\ntype JSONFlag struct {\n\tTarget interface{}\n}\n// String is used both by fmt.Print and by Cobra in help text\nfunc (f *JSONFlag) String() string {\n\tb, err := json.Marshal(f.Target)\n\tif err != nil {\n\t\treturn \"failed to marshal object\"\n\t}\n\treturn string(b)\n}\n// Set must have pointer receiver so it doesn't change the value of a copy\nfunc (f *JSONFlag) Set(v string) error {\n\treturn json.Unmarshal([]byte(v), f.Target)\n}\n// Type is only used in help text\nfunc (f *JSONFlag) Type() string {\n\treturn \"json\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70285369/how-can-i-provide-json-array-as-argument-to-cobra-cli",
    "body": "import (\n\t\"fmt\"\n\t\"github.com/spf13/cobra\"\n)\ntype MyStruct struct {\n\tStringArray []string\n}\nfunc init() {\n\tvar flagMyStringArray []string\n\tvar myCmd = &cobra.Command{\n\t\tUse:   \"mycmd\",\n\t\tShort: \"A brief description of your command\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tmyStruct := MyStruct{StringArray: flagMyStringArray}\n\t\t\tfmt.Printf(\"myStruct.StringArray contains %d elements:\\n\", len(myStruct.StringArray))\n\t\t\tfor i, s := range myStruct.StringArray {\n\t\t\t\tfmt.Printf(\"idx=%d: %q\", i, s)\n\t\t\t}\n\t\t},\n\t}\n\trootCmd.AddCommand(myCmd)\n\tmyCmd.Flags().Var(&JSONFlag{&flagMyStringArray}, \"paramname\", `this is the description`)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70104869/best-practice-on-docker-golang-main-process-communicate-with-python-subprocess",
    "body": "package main\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n        url := \"http://flask_service:9600\"\n        ret, err := http.Get(url)\n        if err != nil {\n                panic(err)\n        }\n        defer ret.Body.Close()\n        body, err := ioutil.ReadAll(ret.Body)\n        if err != nil {\n                panic(err)\n        }\n        fmt.Fprintf(w, string(body))\n}\nfunc main() {\n        http.HandleFunc(\"/\", handler)\n        http.ListenAndServe(\":9500\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70092138/accept-dynamic-keys-in-proto-struct-when-unmarshalling-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"example.com/pb\"\n\t\"fmt\"\n)\nconst file = `{\n            \"services\": {\n                    \"service1\": {\n                        \"command\": \"command1\",\n                        \"root\": \"/\"\n                    },\n                    \"service2\": {\n                        \"command\": \"command2\",\n                        \"root\": \"/\"\n                    }\n            }\n    }\n`\nfunc main() {\n\ttest := &pb.Test{}\n\terr := json.Unmarshal([]byte(file), test)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(test)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69316696/how-can-you-stub-calls-to-github-for-testing",
    "body": "// A mock/stub client provider, set the client func in your test to mock the behavior\ntype MockClientProvider struct {\n  GetClientFunc func(string, string) (*github.Client, context.Context, error)\n}\n// This will establish for the compiler that MockClientProvider can be used as the interface you created\nfunc (provider *MockClientProvider) GetClient(token string, url string) (*github.Client, context.Context, error) {\n  return provider.GetClientFunc(token, url)\n}\n// Your unit test\nfunc TestYourFunctionThatNeedsAClient(t *testing.T) {\n  mockGetClientFunc := func(token string, url string) (*github.Client, context.Context, error) {\n    // do your setup here\n    return nil, nil, nil // return something better than this\n  }\n  mockClientProvider := &MockClientProvider{GetClientFunc: mockGetClientFunc}\n  // Run your test\n  err := YourFunctionThatNeedsAClient(mockClientProvider)\n  // Assert your result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69312437/pass-local-docker-image-in-docker-golang-sdk-imagepull-method",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/docker/docker/api/types\"\n    \"github.com/docker/docker/api/types/container\"\n    \"github.com/docker/docker/client\"\n\n)\nfunc main(){\n  cli, err := client.NewClientWithOpts(client.FromEnv,   client.WithAPIVersionNegotiation())\n  if err != nil {\n      panic(err)\n  }\n  imageName := \"localhost/example:latest\" // <- localhost prepended!\n  out, err := cli.ImagePull(ctx, imageName, types.ImagePullOptions{})\n  if err != nil {\n    panic(err)\n  }\n  fmt.Println(out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68931208/gorm-belongs-to-does-not-return-relations",
    "body": "type User3 struct {\n\tgorm.Model\n\tName      string\n}\ntype Message struct {\n\tgorm.Model\n\tUserID  uint `json:\"userId\"`\n\tUser    *User3\n\tContent string `json:\"content\"`\n}\ntype Receiver struct {\n\tgorm.Model\n\tUserID    uint `json:\"userId\"`\n\tUser      *User3\n\tFirstName string `json:\"firstName\"`\n\tLastName  string `json:\"lastName\"`\n\tEmail     string `json:\"email\"`\n\tAddress   string `json:\"address\"`\n\tPhone     string `json:\"phone\"`\n}\ntype Delivery struct {\n\tgorm.Model\n\tMessage      *Message   `json:\"message\"`\n\tMessageID    uint      `json:\"messageId\"`\n\tReceiver     *Receiver  `json:\"Receiver\"`\n\tReceiverID   uint      `json:\"receiverId\"`\n\tDeliveryDate time.Time `json:\"deliveryDate\"`\n\tSent         bool      `json:\"sent\"`\n}\nfunc main() {\n\tdb := config.CreateMysql()\n\tdb.AutoMigrate(Delivery{})\n\td := Delivery{Message: &Message{User: &User3{Name: \"a\"}, Content: \"hello b~\"}, Receiver: &Receiver{User: &User3{Name: \"b\"}}, DeliveryDate: time.Now(), Sent: false}\n\tdb.Create(&d)\n\td2 := Delivery{}\n\tdb.First(&d2)\n\tfmt.Printf(\"%v\\n\", d2)\n\td3 := Delivery{}\n\tdb.Preload(\"Message\").Preload(\"Receiver\").First(&d3)\n\tfmt.Printf(\"%v\\n\", d3)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68827543/multiple-concurrent-dynamic-locks-and-timeouts-if-failure-to-acquire-locks",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\ntype MutexMap struct {\n\tmut     sync.RWMutex        // handle concurrent access of chanMap\n\tchanMap map[int](chan bool) // dynamic mutexes map\n}\nfunc NewMutextMap() *MutexMap {\n\tvar mut sync.RWMutex\n\treturn &MutexMap{\n\t\tmut:     mut,\n\t\tchanMap: make(map[int](chan bool)),\n\t}\n}\n// Acquire a lock, with timeout\nfunc (mm *MutexMap) Lock(id int, timeout time.Duration) error {\n\t// get global lock to read from map and get a channel\n\tmm.mut.Lock()\n\tif _, ok := mm.chanMap[id]; !ok {\n\t\tmm.chanMap[id] = make(chan bool, 1)\n\t}\n\tch := mm.chanMap[id]\n\tmm.mut.Unlock()\n\t// try to write to buffered channel, with timeout\n\tselect {\n\tcase ch <- true:\n\t\treturn nil\n\tcase <-time.After(timeout):\n\t\treturn fmt.Errorf(\"working on %v just timed out\", id)\n\t}\n}\n// release lock\nfunc (mm *MutexMap) Release(id int) {\n\tmm.mut.Lock()\n\tch := mm.chanMap[id]\n\tmm.mut.Unlock()\n\t<-ch\n}\nfunc work(id int, mm *MutexMap) {\n\t// acquire lock with timeout\n\tif err := mm.Lock(id, 100*time.Millisecond); err != nil {\n\t\tfmt.Printf(\"ERROR: %s\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"working on task %v\\n\", id)\n\t// do some work...\n\ttime.Sleep(time.Second)\n\tfmt.Printf(\"done working on %v\\n\", id)\n\t// release lock\n\tmm.Release(id)\n}\nfunc main() {\n\tmm := NewMutextMap()\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < 50; i++ {\n\t\twg.Add(1)\n\t\tid := i % 10\n\t\tgo func(id int, mm *MutexMap, wg *sync.WaitGroup) {\n\t\t\twork(id, mm)\n\t\t\tdefer wg.Done()\n\t\t}(id, mm, &wg)\n\t}\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68705402/unit-testing-client-go-function-that-auths-and-returns-a-k8s-clientset",
    "body": "import (\n        \"context\"\n        \"testing\"\n        v1 \"k8s.io/api/core/v1\"\n        \"k8s.io/apimachinery/pkg/api/errors\"\n        metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n        \"k8s.io/client-go/kubernetes/fake\"\n)\nfunc TestHelloWorld(t *testing.T) {\n        clientset := fake.NewSimpleClientset(&v1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                        Name:        \"influxdb-v2\",\n                        Namespace:   \"default\",\n                        Annotations: map[string]string{},\n                },\n        }, &v1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                        Name:        \"chronograf\",\n                        Namespace:   \"default\",\n                        Annotations: map[string]string{},\n                },\n        })\n        _, err := clientset.CoreV1().Pods(v1.NamespaceDefault).Get(context.Background(), \"influxdb-v2\", metav1.GetOptions{})\n        if err != nil {\n                if errors.IsNotFound(err) {\n                        t.Error(err)\n                } else {\n                        t.Errorf(\"failed to get service from apiserver: %s\", err)\n                }\n        }\n        p := &v1.Pod{ObjectMeta: metav1.ObjectMeta{Name: \"helloooooo\"}}\n        _, err = clientset.CoreV1().Pods(v1.NamespaceDefault).Create(context.Background(), p, metav1.CreateOptions{})\n        if err != nil {\n            t.Fatalf(\"error injecting pod add: %v\", err)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68675179/google-cloud-golang-how-to-parse-project-zone-instance-from-instance-url",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"strings\"\n)\nfunc main() {\n\ts := \"https://www.googleapis.com/compute/v1/projects/my-project/zones/us-central1-b/instances/instance-group-z0hf\"\n\tu, err := url.Parse(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tparts := strings.Split(u.Path, \"/\")\n\tvar project string\n\tvar zone string\n\tvar inst string\n\tfor i := 0; i < len(parts); i++ {\n\t\tif parts[i] == \"projects\" && i+1 < len(parts) {\n\t\t\tproject = parts[i+1]\n\t\t\ti++\n\t\t} else if parts[i] == \"zones\" && i+1 < len(parts) {\n\t\t\tzone = parts[i+1]\n\t\t\ti++\n\t\t} else if parts[i] == \"instances\" && i+1 < len(parts) {\n\t\t\tinst = parts[i+1]\n\t\t\ti++\n\t\t}\n\t}\n\tfmt.Println(project, zone, inst)\n}\n//Ouptput:\n//my-project us-central1-b instance-group-z0hf"
  },
  {
    "url": "https://stackoverflow.com/questions/68280854/faster-bitwise-and-operation-on-byte-slices",
    "body": "#include \"textflag.h\"\n// func AND(x []byte, y []byte)\n// Requires: AVX\nTEXT ·AND(SB), NOSPLIT|NOPTR, $0-48\n\t// pointer of x\n\tMOVQ x_base+0(FP), AX\n\t// length of x\n\tMOVQ x_len+8(FP), CX\n\t// pointer of y\n\tMOVQ y_base+24(FP), DX\n\t// --------------------------------------------\n\t// end address of x, will not change: p + n\n\tMOVQ AX, BX\n\tADDQ CX, BX\n\t// end address for loop\n\t// n <= 8, jump to tail\n\tCMPQ CX, $0x00000008\n\tJLE  tail\n\t// n < 16, jump to loop8\n\tCMPQ CX, $0x00000010\n\tJL   loop8_start\n\t// n < 32, jump to loop16\n\tCMPQ CX, $0x00000020\n\tJL   loop16_start\n\t// --------------------------------------------\n\t// end address for loop32\n\tMOVQ BX, CX\n\tSUBQ $0x0000001f, CX\nloop32:\n\t// compute x & y, and save value to x\n\tVMOVDQU (AX), Y0\n\tVANDPS  (DX), Y0, Y0\n\tVMOVDQU Y0, (AX)\n\t// move pointer\n\tADDQ $0x00000020, AX\n\tADDQ $0x00000020, DX\n\tCMPQ AX, CX\n\tJL   loop32\n\t// n <= 8, jump to tail\n\tMOVQ BX, CX\n\tSUBQ AX, CX\n\tCMPQ CX, $0x00000008\n\tJLE  tail\n\t// n < 16, jump to loop8\n\tCMPQ CX, $0x00000010\n\tJL   loop8_start\n\t// --------------------------------------------\nloop16_start:\n\t// end address for loop16\n\tMOVQ BX, CX\n\tSUBQ $0x0000000f, CX\nloop16:\n\t// compute x & y, and save value to x\n\tVMOVDQU (AX), X0\n\tVANDPS  (DX), X0, X0\n\tVMOVDQU X0, (AX)\n\t// move pointer\n\tADDQ $0x00000010, AX\n\tADDQ $0x00000010, DX\n\tCMPQ AX, CX\n\tJL   loop16\n\t// n <= 8, jump to tail\n\tMOVQ BX, CX\n\tSUBQ AX, CX\n\tCMPQ CX, $0x00000008\n\tJLE  tail\n\t// --------------------------------------------\nloop8_start:\n\t// end address for loop8\n\tMOVQ BX, CX\n\tSUBQ $0x00000007, CX\nloop8:\n\t// compute x & y, and save value to x\n\tMOVQ (AX), BX\n\tANDQ (DX), BX\n\tMOVQ BX, (AX)\n\t// move pointer\n\tADDQ $0x00000008, AX\n\tADDQ $0x00000008, DX\n\tCMPQ AX, CX\n\tJL   loop8\n\t// --------------------------------------------\ntail:\n\t// left elements (<=8)\n\tMOVQ (AX), BX\n\tANDQ (DX), BX\n\tMOVQ BX, (AX)\n\tRET"
  },
  {
    "url": "https://stackoverflow.com/questions/68280854/faster-bitwise-and-operation-on-byte-slices",
    "body": "test                       data-size        time\n-------------------        ---------        -----------\nBenchmarkGrailbio          8.00_B           4.654 ns/op\nBenchmarkGoAsm             8.00_B           4.824 ns/op\nBenchmarkUnrollLoop        8.00_B           6.851 ns/op\nBenchmarkLoop              8.00_B           8.683 ns/op\nBenchmarkGrailbio          16.00_B          5.363 ns/op\nBenchmarkGoAsm             16.00_B          6.369 ns/op\nBenchmarkUnrollLoop        16.00_B          10.47 ns/op\nBenchmarkLoop              16.00_B          13.48 ns/op\nBenchmarkGoAsm             32.00_B          6.079 ns/op\nBenchmarkGrailbio          32.00_B          6.497 ns/op\nBenchmarkUnrollLoop        32.00_B          17.46 ns/op\nBenchmarkLoop              32.00_B          21.09 ns/op\nBenchmarkGoAsm             128.00_B         10.52 ns/op\nBenchmarkGrailbio          128.00_B         14.40 ns/op\nBenchmarkUnrollLoop        128.00_B         56.97 ns/op\nBenchmarkLoop              128.00_B         80.12 ns/op\nBenchmarkGoAsm             256.00_B         15.48 ns/op\nBenchmarkGrailbio          256.00_B         23.76 ns/op\nBenchmarkUnrollLoop        256.00_B         110.8 ns/op\nBenchmarkLoop              256.00_B         147.5 ns/op\nBenchmarkGoAsm             1.00_KB          47.16 ns/op\nBenchmarkGrailbio          1.00_KB          87.75 ns/op\nBenchmarkUnrollLoop        1.00_KB          443.1 ns/op\nBenchmarkLoop              1.00_KB          540.5 ns/op\nBenchmarkGoAsm             16.00_KB         751.6 ns/op\nBenchmarkGrailbio          16.00_KB         1342 ns/op\nBenchmarkUnrollLoop        16.00_KB         7007 ns/op\nBenchmarkLoop              16.00_KB         8623 ns/op"
  },
  {
    "url": "https://stackoverflow.com/questions/67952261/is-it-possible-to-have-a-structure-for-dynamic-keys-along-with-static-keys-for-j",
    "body": "type config struct {\n\tConfig1 config1 `json:\"config1\"`\n}\ntype _config config\nfunc (b *config) UnmarshalJSON(data []byte) error {\n\tvar v = struct {\n\t\tConfig1 map[string]interface{} `json:\"config1\"`\n\t}{}\n\tif err := json.Unmarshal(data, &v); err != nil {\n\t\treturn err\n\t}\n\tc := _config{}\n\terr := json.Unmarshal(data, &c)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tb.Config1.Parameters = c.Config1.Parameters\n\tb.Config1.Epoch = c.Config1.Epoch\n\tif b.Config1.Dynamic_keys == nil {\n\t\tb.Config1.Dynamic_keys = map[string]dynamic{}\n\t}\n\tfor key, config := range v.Config1 {\n\t\tif key == `Parameters` || key == `Epoch` {\n\t\t\tcontinue\n\t\t}\n\t\tdata, err := json.Marshal(config)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\td := dynamic{}\n\t\terr = json.Unmarshal(data, &d)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tb.Config1.Dynamic_keys[key] = d\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67912398/how-do-i-pass-a-command-status-to-postrun-in-cobra-cli",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/spf13/cobra\"\n)\nfunc main() {\n    var rootCmd = &cobra.Command{\n        Use:   \"root [sub]\",\n        Short: \"My root command\",\n        Run: func(cmd *cobra.Command, args []string) {\n            // Do your processing here\n            // Set the command annotations\n            cmd.Annotations = make(map[string]string)\n            cmd.Annotations[\"status\"] = \"status_goes_here\"\n            cmd.Annotations[\"error\"] = \"error_goes_here\"\n        },\n        PostRun: func(cmd *cobra.Command, args []string) {\n            // Retrieve the annotations\n            fmt.Println(cmd.Annotations[\"status\"])\n            fmt.Println(cmd.Annotations[\"error\"])\n        },\n    }\n    rootCmd.SetArgs([]string{\"sub\", \"arg1\", \"arg2\"})\n    rootCmd.Execute()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67912398/how-do-i-pass-a-command-status-to-postrun-in-cobra-cli",
    "body": "package main\nimport (\n    \"fmt\"\n    \"errors\"\n    \"github.com/spf13/cobra\"\n)\ntype wrapper struct {\n    err error\n}\n// RunE fails to proceed further in case of error resulting in not executing PostRun actions\nfunc (w *wrapper) Run(f func(cmd *cobra.Command, args []string) error) func(cmd *cobra.Command, args []string) {\n    return func(cmd *cobra.Command, args []string) {\n        err := f(cmd, args)\n        w.err = err\n    }\n}\nfunc (w *wrapper) PostRun(f func(cmd *cobra.Command, args []string, cmdErr error)) func(cmd *cobra.Command, args []string) {\n    return func(cmd *cobra.Command, args []string) {\n        f(cmd, args, w.err)\n    }\n}\nfunc main() {\n    cmdWrap := wrapper{}\n    var rootCmd = &cobra.Command{\n        Use:   \"root [sub]\",\n        Short: \"My root command\",\n        Run: cmdWrap.Run(func(cmd *cobra.Command, args []string) error {\n            return errors.New(\"i'm not in the book, you know\")\n        }),\n        PostRun: cmdWrap.PostRun(func(cmd *cobra.Command, args []string, cmdErr error) {\n            fmt.Printf(\"error was %v\\n\", cmdErr)\n        }),\n    }\n    rootCmd.SetArgs([]string{\"sub\", \"arg1\", \"arg2\"})\n    rootCmd.Execute()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67302954/with-golang-and-tls-how-to-convert-rawcerts-byte-passed-to-verifypeercerti",
    "body": "// crypto/tls/handshake/handshake_client.go\nfunc (c *Conn) verifyServerCertificate(certificates [][]byte) error {\n\tfor i, asn1Data := range certificates {\n\t\tcert, err := x509.ParseCertificate(asn1Data)\n\t\tif err != nil {\n\t\t\tc.sendAlert(alertBadCertificate)\n\t\t\treturn errors.New(\"tls: failed to parse certificate from server: \" + err.Error())\n\t\t}\n\t\tcerts[i] = cert\n\t}\n    // later on...\n\n\tif c.config.VerifyPeerCertificate != nil {\n\t\tif err := c.config.VerifyPeerCertificate(certificates, c.verifiedChains); err != nil {\n\t\t\tc.sendAlert(alertBadCertificate)\n\t\t\treturn err\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/66289413/start-go-http-server-do-something-then-shut-it-down-once-task-is-done",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\nfunc main() {\n\tserverDone := &sync.WaitGroup{}\n\tserverDone.Add(1)\n\tStart(serverDone)\n\tserverDone.Wait()\n\tfmt.Println(\"Done that.\")\n}\nvar ctxShutdown, cancel = context.WithCancel(context.Background())\nfunc Start(wg *sync.WaitGroup) {\n\tsrv := &http.Server{Addr: \":8080\"}\n\thttp.HandleFunc(\"/callback\", func(w http.ResponseWriter, r *http.Request) {\n\t\tselect {\n\t\tcase <-ctxShutdown.Done():\n\t\t\tfmt.Println(\"Sorry: Shuting down ...\")\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t\ttoken := r.URL.Query().Get(\"token\")\n\t\tif token != \"\" {\n\t\t\tfmt.Println(\"Found Token:\", token)\n\t\t\tfmt.Println(\"Shuting down ...\")\n\t\t\t// Shut down server here\n\t\t\tcancel() // to say sorry, above.\n\t\t\t// graceful-shutdown\n\t\t\terr := srv.Shutdown(context.Background())\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"server.Shutdown:\", err)\n\t\t\t}\n\t\t} else {\n\t\t\tfmt.Fprintln(w, \"Hi\") // Server HTML page to fetch token and return to server at /callback\n\t\t}\n\t})\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := srv.ListenAndServe(); err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"ListenAndServe(): %v\", err)\n\t\t}\n\t\tfmt.Println(\"Bye.\")\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65806158/how-to-pass-and-parse-nested-object-with-postman-multipart-form-data",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"regexp\"\n)\nvar rxNestedKey = regexp.MustCompile(`^(?P<key>[A-Za-z0-9_]+)\\[(?P<n_key>[A-Za-z0-9_]+)\\]$`)\nfunc Handler(w http.ResponseWriter, r *http.Request) {\n\terr := r.ParseMultipartForm(0)\n\tif err != nil {\n\t\treturn\n\t}\n\tmultipartForm := map[string]interface{}{}\n\tnestedBuf := map[string]map[string]interface{}{}\n\tfor key, value := range r.MultipartForm.Value {\n\t\t// check key has nested key\n\t\tif rxNestedKey.MatchString(key) {\n\t\t\t// parse nested key (nK) and key (k)\n\t\t\tk := rxNestedKey.FindStringSubmatch(key)[1]\n\t\t\tnK := rxNestedKey.FindStringSubmatch(key)[2]\n\t\t\tif nestedBuf[k] == nil {\n\t\t\t\tnestedBuf[k] = map[string]interface{}{}\n\t\t\t}\n\t\t\tnestedBuf[k][nK] = value\n\t\t} else {\n\t\t\tmultipartForm[key] = value\n\t\t}\n\t}\n\t// collect all nested data from buff\n\tfor k, v := range nestedBuf {\n\t\tmultipartForm[k] = v\n\t}\n\tfmt.Printf(\"%+v\\n\", multipartForm)\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", Handler)\n\tlog.Fatal(http.ListenAndServe(\"localhost:8080\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65666597/how-to-interrupt-sending-on-a-channel",
    "body": "func (w *Watcher) Watch() (<-chan Event, context.CancelFunc) {\n\tctx, cancel := context.WithCancel(context.Background())\n\n\t// with small buffer for channel to smooth sending/receiving\n\tch := make(chan Event, 5)\n\n\tgo w.fetch(ctx, cancel, ch)\n\treturn ch, cancel\n}\nfunc (w *Watcher) fetch(ctx context.Context, cancel context.CancelFunc, ch chan<- Event) {\n    // make sure the context is cancelled always if `fetch` stops to avoid goroutine leak.\n\tdefer cancel()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n    \t\t// now you can close it without problems\n\t\t\tclose(ch)\n\t\t\treturn\n\t\tcase ch <- fetchEvent():\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65304131/is-it-possible-to-load-a-go-dll-in-c-dll-on-windows",
    "body": "/* Code generated by cmd/cgo; DO NOT EDIT. */\n/* package gosum */\n#line 1 \"cgo-builtin-export-prolog\"\n#include <stddef.h> /* for ptrdiff_t below */\n#ifndef GO_CGO_EXPORT_PROLOGUE_H\n#define GO_CGO_EXPORT_PROLOGUE_H\n#ifndef GO_CGO_GOSTRING_TYPEDEF\ntypedef struct { const char* p; ptrdiff_t n; } _GoString_;\n#endif\n#endif\n/* Start of preamble from import \"C\" comments.  */\n#line 3 \"gosum.go\"\n#include <stdlib.h>\n#line 1 \"cgo-generated-wrapper\"\n/* End of preamble from import \"C\" comments.  */\n/* Start of boilerplate cgo prologue.  */\n#line 1 \"cgo-gcc-export-header-prolog\"\n#ifndef GO_CGO_PROLOGUE_H\n#define GO_CGO_PROLOGUE_H\ntypedef signed char GoInt8;\ntypedef unsigned char GoUint8;\ntypedef short GoInt16;\ntypedef unsigned short GoUint16;\ntypedef int GoInt32;\ntypedef unsigned int GoUint32;\ntypedef long long GoInt64;\ntypedef unsigned long long GoUint64;\ntypedef GoInt64 GoInt;\ntypedef GoUint64 GoUint;\ntypedef float GoFloat32;\ntypedef double GoFloat64;\n/*\n  static assertion to make sure the file is being used on architecture\n  at least with matching size of GoInt.\n*/\ntypedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*) == 64 / 8 ? 1 : -1];\n#ifndef GO_CGO_GOSTRING_TYPEDEF\ntypedef _GoString_ GoString;\n#endif\ntypedef void* GoMap;\ntypedef void* GoChan;\ntypedef struct { void* t; void* v; } GoInterface;\ntypedef struct { void* data; GoInt len; GoInt cap; } GoSlice;\n#endif\n/* End of boilerplate cgo prologue.  */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\textern GoInt32 Sum(GoInt32 a, GoInt32 b);\n#ifdef __cplusplus\n}\n#endif"
  },
  {
    "url": "https://stackoverflow.com/questions/65304131/is-it-possible-to-load-a-go-dll-in-c-dll-on-windows",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"syscall\"\n)\nfunc main() {\n\th, e := syscall.LoadLibrary(\"loader.dll\")   //Make sure this DLL follows Golang machine bit architecture (64-bit in my case)\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\tdefer syscall.FreeLibrary(h)\n\tproc, e := syscall.GetProcAddress(h, \"get_sum_by_another_dll\") //One of the functions in the DLL\n\tif e != nil {\n\t\tlog.Fatal(e)\n\t}\n\tvar a int32 = 2\n\tvar b int32 = 5\n\tret, _, err := syscall.Syscall(proc, 2, uintptr(a), uintptr(b), 0)  //Pay attention to the positioning of the parameter\n\tfmt.Println(ret)\n\tfmt.Println(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65230668/watch-all-changes-in-pod-status",
    "body": "// get ContainerStatuses. If there is no containerStatus, return the pod phase\nfunc getPodStatus(pod *core.Pod) string {\n\tcontainerStatuses := pod.Status.ContainerStatuses\n\tstatus := \"\"\n\tif len(containerStatuses) > 0 {\n\t\tfor i := range containerStatuses {\n\t\t\tif containerStatuses[i].State.Terminated != nil {\n\t\t\t\tstatus = containerStatuses[i].State.Terminated.Reason\n\t\t\t}\n\t\t\tif containerStatuses[i].State.Waiting != nil {\n\t\t\t\tstatus = containerStatuses[i].State.Waiting.Reason\n\t\t\t}\n\t\t\tif containerStatuses[i].State.Running != nil {\n\t\t\t\tif status == \"\" { // if none of the containers report an error\n\t\t\t\t\tstatus = \"Running\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif status == \"\" {\n\t\tstatus = string(pod.Status.Phase)\n\t}\n\treturn status\n}\n// PodWatch watch pod changes in all namespaces\nfunc PodWatch() error {\n\tpodsWatcher, err := restAPIClient.CoreV1().Pods(\"\").Watch(globalHTTPContext, metav1.ListOptions{Watch: true})\n\tif err != nil {\n\t\treturn err\n\t}\n\tpodsChan := podsWatcher.ResultChan()\n\tfor event := range podsChan {\n\t\tpod, err := event.Object.(*core.Pod)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tswitch event.Type {\n\t\tcase watch.Added:\n\t\t\tfmt.Println(getPodStatus(pod))\n\t\tcase watch.Modified:\n\t\t\tfmt.Println(getPodStatus(pod))\n\t\tcase watch.Deleted:\n\t\t\tfmt.Println(getPodStatus(pod))\n\t\tcase watch.Bookmark:\n\t\t\tfmt.Println(getPodStatus(pod))\n\t\tcase watch.Error:\n\t\t\tfmt.Println(getPodStatus(pod))\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "sys: 1599 MB alloc: 1525 MB idel:   73 MB released:   73 MB inuse: 1526 MB\nsys: 3135 MB alloc: 3051 MB idel:   83 MB released:   83 MB inuse: 3052 MB\nsys: 4671 MB alloc: 4577 MB idel:   93 MB released:   93 MB inuse: 4577 MB\nsys: 6207 MB alloc: 6103 MB idel:  103 MB released:  103 MB inuse: 6103 MB\nsys: 6207 MB alloc: 4577 MB idel: 1629 MB released:  103 MB inuse: 4577 MB\nsys: 6207 MB alloc: 6103 MB idel:  103 MB released:  103 MB inuse: 6103 MB\nsys: 6207 MB alloc: 4577 MB idel: 1629 MB released:  103 MB inuse: 4577 MB\nsys: 6207 MB alloc: 6103 MB idel:  103 MB released:  103 MB inuse: 6103 MB\nsys: 6207 MB alloc: 4577 MB idel: 1629 MB released:  103 MB inuse: 4577 MB\nsys: 6207 MB alloc: 6103 MB idel:  103 MB released:  103 MB inuse: 6103 MB"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "env: madvdontneed=1, sys: 1087 MB, alloc: 1024 MB, idel:   63 MB, released:   63 MB, inuse: 1024 MB\nenv: madvdontneed=1, sys: 2111 MB, alloc: 2048 MB, idel:   63 MB, released:   63 MB, inuse: 2048 MB\nenv: madvdontneed=1, sys: 3135 MB, alloc: 3072 MB, idel:   63 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n 0  0   1161   6369     25    595    0    0   702   452  276  567  6  3 91  1  0\n 3  0   1160   6300     28    632    0    0 43432     0 6288 14013 13  5 82  1  0\n 1  0   1160   6243     28    634    0    0   528     0 6342 13008 11  3 85  0  0\n 1  0   1160   6177     28    634    0    0    56    56  979 2090  4  1 95  0  0\n 2  0   1160   6110     28    634    0    0     0     0 1061 2664  5  2 94  0  0\n 0  0   1160   6044     28    634    0    0    12    36  994 2233  4  1 94  0  0\n 0  0   1160   3991     28    634    0    0    32   188 1074 1787  5  6 89  0  0\n 2  0   1160   2120     28    634    0    0     0   136 1016 1634  4  5 90  0  0\n 1  0   1160    973     28    633    0    0     0     4 1077 1660  4  5 92  0  0\n 2  0   1160    143     25    390    0    0  1780   356 1849 2341  4  9 87  0  0\n 0  9   1323    102      0    108    0  165 51964 169652 20277 21017  1 20 53 25  0\n 1  5   1510     99      0    129    2  189 54376 193996 57829 52152  1 16 56 27  0\n 1  5   1794     99      0    129    1  286 10068 293856 81160 59511  0 16 77  6  0\n 4  5   2047    101      0     98    5  257 21236 263292 69923 65485  0 23 54 23  0\n 1  2   1479   2867      0    217   43   23 233508 24380 24023 48536  4 27 47 22  0\n 2  0   1452   2824      0    232   27    0 43960     0 8168 21085  4  5 90  1  0\n 0  1   1443   2814      0    233    9    0 10956     0 3341 8468  5  2 93  0  0\n 3  0   1425   2796      0    231   18    0 19688     0 5780 15490  4  3 92  1  0\n 1  1   1420   2672     10    337    3    0 121628  1920 3292 7934  5  7 81  7  0\n 0  0   1394   2646     10    338   25    0 27360     0 7975 21555  3  5 92  0  0\n 0  1   1359   6856     10    339    1    0  2416     0 1035 2108  3  2 95  0  0\n 0  0   1353   6847     10    348    4    0 13660     0 1696 3471  4  1 95  0  0"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "env: madvdontneed=1, sys: 1087 MB, alloc: 1024 MB, idel:   63 MB, released:   63 MB, inuse: 1024 MB\nenv: madvdontneed=1, sys: 2111 MB, alloc: 2048 MB, idel:   63 MB, released:   63 MB, inuse: 2048 MB\nenv: madvdontneed=1, sys: 3135 MB, alloc: 3072 MB, idel:   63 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nsignal: killed"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "env: madvdontneed=1, sys: 1087 MB, alloc: 1024 MB, idel:   63 MB, released:   63 MB, inuse: 1024 MB\nenv: madvdontneed=1, sys: 2111 MB, alloc: 2048 MB, idel:   63 MB, released:   63 MB, inuse: 2048 MB\nenv: madvdontneed=1, sys: 3135 MB, alloc: 3072 MB, idel:   63 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   62 MB, inuse: 4096 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   62 MB, inuse: 3072 MB\nenv: madvdontneed=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   62 MB, inuse: 4096 MB"
  },
  {
    "url": "https://stackoverflow.com/questions/64963912/memory-is-not-even-getting-freed-back-to-os",
    "body": "gc 1 @0.008s 2%: 0.071+0.67+0.034 ms clock, 0.57+0.88/0.76/0.041+0.27 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 2 @0.014s 3%: 0.069+1.3+0.027 ms clock, 0.55+0.48/0.80/0.73+0.21 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 3 @0.029s 2%: 0.056+0.62+0.040 ms clock, 0.45+0.39/0.75/0.67+0.32 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 4 @0.045s 3%: 0.31+0.97+0.12 ms clock, 2.5+0.91/1.2/0.92+1.0 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 5 @0.060s 2%: 0.056+0.60+0.019 ms clock, 0.45+0.44/0.70/1.1+0.15 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 6 @0.071s 2%: 0.025+1.0+0.018 ms clock, 0.20+0.47/1.1/3.5+0.15 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 7 @0.084s 2%: 0.12+0.88+0.042 ms clock, 0.97+0.77/1.2/0.88+0.33 ms cpu, 4->4->1 MB, 5 MB goal, 8 P\ngc 8 @0.093s 2%: 0.039+0.83+0.028 ms clock, 0.31+0.38/0.66/1.2+0.22 ms cpu, 4->4->0 MB, 5 MB goal, 8 P\ngc 1 @0.007s 3%: 0.013+1.7+0.005 ms clock, 0.11+0.86/2.0/1.2+0.042 ms cpu, 4->5->4 MB, 5 MB goal, 8 P\ngc 1 @0.002s 5%: 0.024+2.0+0.042 ms clock, 0.19+0.25/1.5/1.3+0.34 ms cpu, 4->6->5 MB, 5 MB goal, 8 P\ngc 2 @0.017s 3%: 0.014+4.6+0.044 ms clock, 0.11+0.13/3.3/1.9+0.35 ms cpu, 9->10->7 MB, 10 MB goal, 8 P\ngc 3 @0.058s 2%: 0.030+6.7+0.036 ms clock, 0.24+0.12/5.3/1.8+0.29 ms cpu, 13->15->10 MB, 15 MB goal, 8 P\ngc 4 @0.100s 2%: 0.034+5.6+0.015 ms clock, 0.27+0/7.2/0.65+0.12 ms cpu, 18->18->12 MB, 21 MB goal, 8 P\ngc env: gctrace=1, sys: 1087 MB, alloc: 1024 MB, idel:   63 MB, released:   63 MB, inuse: 1024 MB\n1 @0.024s 0%: 0.028+0.41+0.016 ms clock, 0.22+0.11/0.14/0.093+0.13 ms cpu, 1024->1024->1024 MB, 1025 MB goal, 8 P\nenv: gctrace=1, sys: 2111 MB, alloc: 2048 MB, idel:   63 MB, released:   63 MB, inuse: 2048 MB\ngc 2 @1.049s 0%: 0.021+0.44+0.005 ms clock, 0.16+0.12/0.15/0.12+0.045 ms cpu, 2048->2048->2048 MB, 2049 MB goal, 8 P\nenv: gctrace=1, sys: 3135 MB, alloc: 3072 MB, idel:   63 MB, released:   63 MB, inuse: 3072 MB\nenv: gctrace=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\ngc 3 @3.096s 0%: 0.023+0.56+0.017 ms clock, 0.18+0.13/0.20/0.17+0.13 ms cpu, 4096->4096->2048 MB, 4097 MB goal, 8 P\nenv: gctrace=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: gctrace=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\ngc 4 @5.619s 0%: 0.023+0.31+0.018 ms clock, 0.18+0.18/0.18/0.22+0.15 ms cpu, 4096->4096->2048 MB, 4097 MB goal, 8 P\nenv: gctrace=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\nenv: gctrace=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB\ngc 5 @8.141s 0%: 0.025+0.26+0.004 ms clock, 0.20+0.16/0.15/0.15+0.033 ms cpu, 4096->4096->2048 MB, 4097 MB goal, 8 P\nenv: gctrace=1, sys: 4159 MB, alloc: 3072 MB, idel: 1087 MB, released:   63 MB, inuse: 3072 MB\ngc 6 @10.413s 0%: 0.028+0.51+0.013 ms clock, 0.22+0.23/0.28/0.29+0.11 ms cpu, 4096->4096->2048 MB, 4097 MB goal, 8 P\nenv: gctrace=1, sys: 4159 MB, alloc: 4096 MB, idel:   63 MB, released:   63 MB, inuse: 4096 MB"
  },
  {
    "url": "https://stackoverflow.com/questions/64897846/convert-a-json-public-private-key-pair-to-rsa-privatekey-and-rsa-publickey",
    "body": "package main\nimport(\n  \"log\"\n  \"github.com/lestrrat-go/jwx/jwk\"\n  \"github.com/lestrrat-go/jwx/jws\"\n  \"github.com/lestrrat-go/jwx/jwa\"\n)\nfunc main() {\n  // Here's an example of a JWK, containing a public and private RSA Keypair\n  var keysJWK = `{\n    \"keys\": [\n        {\n            \"p\": \"59pSssPVWNBMd1dFBhkSx0P6uo3b3WC2MOitj7UI-9VS9gKPbPsqtDJSPdbRjK7JWXarFt_h4aPf9NPFLieu1k22jp3ProCH87geazJ8tNtV_SpaUtWQFZ-dvgGrIM-3MLf_fG7Tq5sV5R0vA9wg_INkYJ2uX5EdmVyHhxvh0eM\",\n            \"kty\": \"RSA\",\n            \"q\": \"jeofLDkteXfWcpif3JmX3xv8S6jWX2Axrwe9tLkWzlgxYDWvXExxD0sc4XfbVbSrqTkAdW48DYL_wcziFLYHxOYv2stqWvElF9CqdKJJrQAc7Z_qKXpWckDYZBJAO9W2WGXTBfdJfw_KQPHHTbY90ngdxMXuiwYbfbFY4H_XDM0\",\n            \"d\": \"Qrx8U40tLhsy4tdnKuEmjlGF-VkB6F_DawLXwuZ2a5ZS7cwFUDRHNz9Jbl9MxvNcNMSMGaAN8lxTSDlpfT0jDqKF6lel88rUtCnN6h1FNdkD5TjkbWs-dfhftDFc1Sy8RdWPZ8LiTo0TbZaf3rPvdLw_S9FE-itnKV_1il572rT-1PvlyrPctnREQCKL5wArD4eYHwRjfVm-KvlIvo9rLj4NYzATBAAwh6PsEnSganEf1ErOvFH8qhrVqsy2kevLsFbCA0hIfoDNhL7hxlaMSJTJie3V2Ie0Kb7j_L2LsQXka3kshO1T6re-d-nGgaRp7b0buUtwS6aTax0H2cZuOQ\",\n            \"e\": \"AQAB\",\n            \"use\": \"sig\",\n            \"kid\": \"223\",\n            \"qi\": \"moGHNM3TFLeSQeM6V4izMcK6wwapSwo67r7DXk7vK_2FaSUQtijwQCHFx3nrhbQAVdwFt7pSYlmlFPlaAXixrBBNtNULnR7z6-WrRuWgqoL9LN8xARB42l94HmiOL0pp8ORyw2W338k3LHuzUy1NKZrL6a8zPIkva_Z5hFULhQE\",\n            \"dp\": \"TcUm3j3gL3VXYOSOC5iXeu2ria4R5PUOx-MUbNLd25NXy5taPsUVMvJ6MbIAAj-S3IZ4pyib3RMaCUaLqoq3E71nkfkPc8o7UB4fXffGaufztQLi30wxk39B6z0mCNCD8zyU30lRiQtxUbPzVEkfa3QrVFkv53CGzC2EbGaG3d8\",\n            \"alg\": \"RS256\",\n            \"dq\": \"L1emNJOShw4iXTJrSiV3E7f7T6YwdbraeECF2c9RO18Sgb0HFixuHyL4rILWid3u0lIww_wVTpCgD5_w3-Xl65q65iur_FCsBijXZHdrSqpZ_C-350RnqE_XoHKyOQPPg-fcIQZg32F-IHJIAbXFI_xsOeOp83kDHMhYFPSw4hU\",\n            \"n\": \"gIdJV4qWKyt3wkS66yBG5Ii9ew-eofuPU49TjlRIU5Iu5jX2mRMoHdcI7V78iKYSQHKYxz17cqzQyERxKnEiDgy_gwouStRgvPdm3H4rq__7p0t15SunsG2T1rEVf0sZEDnQ5qRkm7iqs6ZG1NqqIUtnOTd1Pd1MhbEqeENFtaPHvN37eZL82WmsQlJviFH4I9iZQVR_QT4GREQlRro8IjJTaloUyeDQTOQ-4ll1-4-g_ug2tZ-s9xleLzl5L9ZKSVJFhtMLn8WGaVldagarwa7kMLfuiVe8B5Lr7poQa4NCAR54ECPWoOHrABdPZKrkkxjVypTXUzL5cPzmzFC2xw\"\n        }\n    ]\n  }`\n  // Parse the JWK to a set of keys\n  setOfKeys, err := jwk.ParseString(keysJWK )\n  if err != nil {\n    log.Printf(\"failed to parse JWK: %s\", err)\n    return\n  }\n\n  // extract the private key from the set, index 0 because w only have one key\n  rsaPrivatekey, success := setOfKeys.Get(0)\n  if !success {\n\t\tlog.Printf(\"could not find key at given index\")\n\t\treturn\n  }\n\n  // sign a token with the private key\n  token, err := jws.Sign([]byte(`{\"userId\":1}`), jwa.RS256, rsaPrivatekey)\n  if err != nil {\n    log.Printf(\"failed to created JWS message: %s\", err)\n    return\n  }\n  // show the signed token\n  log.Printf(\"Token! -> %s\", token)\n  // get a public key from a private key\n  rsaPublicKey, err := jwk.PublicKeyOf(rsaPrivatekey)\n  if err != nil {\n\tlog.Printf(\"failed created public key from private key: %s\", err)\n\treturn\n  }\n  // verify the token that we created above with the public key\n  payload, err := jws.Verify(token, jwa.RS256, rsaPublicKey)\n  if err != nil {\n\tlog.Printf(\"failed to verify message: %s\", err)\n\treturn\n  }\n\n  // show the payload of the verified token\n  log.Printf(\"signature verified! Payload -> %s\", payload)\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64213717/set-up-database-for-integration-tests-with-testmain-across-multiple-packages",
    "body": "func main() {\n\tflag.Parse()\n\tlog.Println(\"Setup DB\")\n    // setupDB creates a new test database and runs the application migrations before the tests start.\n\tsetupDB()\n\tlog.Println(\"Running Tests\")\n    // calls go test to execute the tests.\n\trunTests()\n   // delete the test database.\n   teardownDB()\n}\nfunc runTests() {\n    // TODO this flags can be passed from the original command instead.\n\tcmd := exec.Command(\"go\", \"test\", \"-v\", \"--tags\", \"integrationdb\", \"-p\", \"1\", \"./...\")\n\tcmd.Env = os.Environ()\n\tcmd.Stdout = os.Stdout\n\tif err := cmd.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := cmd.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63162180/how-to-view-http-https-interactions-with-http-client",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptrace\"\n\t\"net/http/httputil\"\n\t\"net/textproto\"\n\t\"time\"\n)\nfunc main() {\n\turl := \"https://www.google.com\"\n\tclient := &http.Client{}\n\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\trequestDump, err := httputil.DumpRequestOut(req, false)\n\tif err != nil {\n\t\tfmt.Printf(\"%s: REQUEST ERR: %s\\n\", time.Now(), err)\n\t}\n\tfmt.Printf(\"%s: REQUEST: \\n%s\\n\", time.Now(), string(requestDump))\n\ttrace := &httptrace.ClientTrace{\n\t\t// GetConn is called before a connection is created or\n\t\t// retrieved from an idle pool. The hostPort is the\n\t\t// \"host:port\" of the target or proxy. GetConn is called even\n\t\t// if there's already an idle cached connection available.\n\t\tGetConn: func(hostPort string) {\n\t\t\tfmt.Printf(\"Get Conn: hostPort: %s\\n\", hostPort)\n\t\t},\n\t\t// GotConn is called after a successful connection is\n\t\t// obtained. There is no hook for failure to obtain a\n\t\t// connection; instead, use the error from\n\t\t// Transport.RoundTrip.\n\t\tGotConn: func(connInfo httptrace.GotConnInfo) {\n\t\t\tfmt.Printf(\"Got Conn: connInfo: %+v\\n\", connInfo)\n\t\t},\n\t\t// PutIdleConn is called when the connection is returned to\n\t\t// the idle pool. If err is nil, the connection was\n\t\t// successfully returned to the idle pool. If err is non-nil,\n\t\t// it describes why not. PutIdleConn is not called if\n\t\t// connection reuse is disabled via Transport.DisableKeepAlives.\n\t\t// PutIdleConn is called before the caller's Response.Body.Close\n\t\t// call returns.\n\t\t// For HTTP/2, this hook is not currently used.\n\t\tPutIdleConn: func(err error) {\n\t\t\tfmt.Printf(\"PutIdlConn: ERR: %s\\n\", err)\n\t\t},\n\t\t// GotFirstResponseByte is called when the first byte of the response\n\t\t// headers is available.\n\t\tGotFirstResponseByte: func() {\n\t\t\tfmt.Println(\"GotFirstResponseByte\")\n\t\t},\n\t\t// Got100Continue is called if the server replies with a \"100\n\t\t// Continue\" response.\n\t\tGot100Continue: func() {\n\t\t\tfmt.Println(\"Got100Continue\")\n\t\t},\n\t\t// Got1xxResponse is called for each 1xx informational response header\n\t\t// returned before the final non-1xx response. Got1xxResponse is called\n\t\t// for \"100 Continue\" responses, even if Got100Continue is also defined.\n\t\t// If it returns an error, the client request is aborted with that error value.\n\t\tGot1xxResponse: func(code int, header textproto.MIMEHeader) error {\n\t\t\tfmt.Printf(\"Got1xxResponse: code: %d header: %+v\\n\", code, header)\n\t\t\treturn nil\n\t\t},\n\t\t// DNSStart is called when a DNS lookup begins.\n\t\tDNSStart: func(dnsInfo httptrace.DNSStartInfo) {\n\t\t\tfmt.Printf(\"DNS Start: dnsInfo: %+v\\n\", dnsInfo)\n\t\t},\n\t\t// DNSDone is called when a DNS lookup ends.\n\t\tDNSDone: func(dnsInfo httptrace.DNSDoneInfo) {\n\t\t\tfmt.Printf(\"DNS Done: dnsInfo: %+v\\n\", dnsInfo)\n\t\t},\n\t\t// ConnectStart is called when a new connection's Dial begins.\n\t\t// If net.Dialer.DualStack (IPv6 \"Happy Eyeballs\") support is\n\t\t// enabled, this may be called multiple times.\n\t\tConnectStart: func(network, addr string) {\n\t\t\tfmt.Printf(\"Connect Start: Network Addr: %s %s\\n\", network, addr)\n\t\t},\n\t\t// ConnectDone is called when a new connection's Dial\n\t\t// completes. The provided err indicates whether the\n\t\t// connection completedly successfully.\n\t\t// If net.Dialer.DualStack (\"Happy Eyeballs\") support is\n\t\t// enabled, this may be called multiple times.\n\t\tConnectDone: func(network, addr string, err error) {\n\t\t\tfmt.Printf(\"Connect Done: Network Addr: %s %s ERR: %s\\n\", network, addr, err)\n\t\t},\n\t\t// TLSHandshakeStart is called when the TLS handshake is started. When\n\t\t// connecting to an HTTPS site via an HTTP proxy, the handshake happens\n\t\t// after the CONNECT request is processed by the proxy.\n\t\tTLSHandshakeStart: func() {\n\t\t\tfmt.Println(\"TLSHandshakeStart\")\n\t\t},\n\t\t// TLSHandshakeDone is called after the TLS handshake with either the\n\t\t// successful handshake's connection state, or a non-nil error on handshake\n\t\t// failure.\n\t\tTLSHandshakeDone: func(connState tls.ConnectionState, err error) {\n\t\t\tfmt.Printf(\"TLSHandshakeDone: connState: %+v ERR: %s\\n\", connState, err)\n\t\t},\n\t\t// WroteHeaderField is called after the Transport has written\n\t\t// each request header. At the time of this call the values\n\t\t// might be buffered and not yet written to the network.\n\t\tWroteHeaderField: func(key string, value []string) {\n\t\t\tfmt.Printf(\"WroteHeaderField: key: %s val: %s\\n\", key, value)\n\t\t},\n\t\t// WroteHeaders is called after the Transport has written\n\t\t// all request headers.\n\t\tWroteHeaders: func() {\n\t\t\tfmt.Println(\"WroteHeaders\")\n\t\t},\n\t\t// Wait100Continue is called if the Request specified\n\t\t// \"Expect: 100-continue\" and the Transport has written the\n\t\t// request headers but is waiting for \"100 Continue\" from the\n\t\t// server before writing the request body.\n\t\tWait100Continue: func() {\n\t\t\tfmt.Println(\"Wait100Continue\")\n\t\t},\n\t\t// WroteRequest is called with the result of writing the\n\t\t// request and any body. It may be called multiple times\n\t\t// in the case of retried requests.\n\t\tWroteRequest: func(info httptrace.WroteRequestInfo) {\n\t\t\tfmt.Printf(\"WroteRequest: %+v\\n\", info)\n\t\t},\n\t}\n\treq = req.WithContext(httptrace.WithClientTrace(req.Context(), trace))\n\tresp, err := client.Do(req)\n\tfmt.Printf(\"%s: RESPONSE OBJ: \\n%v\\n\", time.Now(), resp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63162180/how-to-view-http-https-interactions-with-http-client",
    "body": "2020-07-29 14:09:53.682167 -0700 PDT m=+0.000769969: REQUEST:\nGET / HTTP/1.1\nHost: www.google.com\nUser-Agent: Go-http-client/1.1\nAccept-Encoding: gzip\nGet Conn: hostPort: www.google.com:443\nDNS Start: dnsInfo: {Host:www.google.com}\nDNS Done: dnsInfo: {Addrs:[{IP:172.217.17.100 Zone:} {IP:2a00:1450:400e:806::2004 Zone:}] Err:<nil> Coalesced:false}\nConnect Start: Network Addr: tcp 172.217.17.100:443\nConnect Done: Network Addr: tcp 172.217.17.100:443 ERR: %!s(<nil>)\nTLSHandshakeStart\nTLSHandshakeDone: connState: {Version:772 HandshakeComplete:true DidResume:false CipherSuite:4865 NegotiatedProtocol:h2 NegotiatedProtocolIsMutual:true ServerName: PeerCertificates:[0xc0001d6000 0xc0001d6580] VerifiedChains:[[0xc0001d6000 0xc0001d6580 0xc000278b00]] SignedCertificateTimestamps:[] OCSPResponse:[] ekm:0x1226ae0 TLSUnique:[]} ERR: %!s(<nil>)\nGot Conn: connInfo: {Conn:0xc0001a2000 Reused:false WasIdle:false IdleTime:0s}\nWroteHeaderField: key: :authority val: [www.google.com]\nWroteHeaderField: key: :method val: [GET]\nWroteHeaderField: key: :path val: [/]\nWroteHeaderField: key: :scheme val: [https]\nWroteHeaderField: key: accept-encoding val: [gzip]\nWroteHeaderField: key: user-agent val: [Go-http-client/2.0]\nWroteHeaders\nWroteRequest: {Err:<nil>}\nGotFirstResponseByte\n2020-07-29 14:09:54.620195 -0700 PDT m=+0.938796345: RESPONSE OBJ:\n&{200 OK 200 HTTP/2.0 2 0 map[Alt-Svc:[h3-29=\":443\"; ma=2592000,h3-27=\":443\"; ma=2592000,h3-T050=\":443\"; ma=2592000,h3-Q050=\":443\"; ma=2592000,h3-Q046=\":443\"; ma=2592000,h3-Q043=\":443\"; ma=2592000,quic=\":443\"; ma=2592000; v=\"46,43\"] Cache-Control:[private, max-age=0] Content-Type:[text/html; charset=ISO-8859-1] Date:[Wed, 29 Jul 2020 21:09:54 GMT] Expires:[-1] P3p:[CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"] Server:[gws] Set-Cookie:[1P_JAR=2020-07-29-21; expires=Fri, 28-Aug-2020 21:09:54 GMT; path=/; domain=.google.com; Secure NID=204=qnJT-6IGam7-C1fTR8uIkbDPnfV7OwgOGn5-6tGCWLYmeaRMoSKgV1qSRfKGLghNgQVWY9N_o6hUWKm69I5KrdVqIEVVxRy6XSY6F4c1JyTJZZqEMxMlkpznu-PWOn9eAezKBONTxCZgsGZYboEeYZ5-qZBjUvd7BratNIPkTxU; expires=Thu, 28-Jan-2021 21:09:54 GMT; path=/; domain=.google.com; HttpOnly] X-Frame-Options:[SAMEORIGIN] X-Xss-Protection:[0]] 0xc00018c1e0 -1 [] false true map[] 0xc000112100 0xc00007c000}"
  },
  {
    "url": "https://stackoverflow.com/questions/62158372/golang-concurrent-r-w-to-database",
    "body": "package main\nimport \"sync\"\nfunc main() {\n\t// Some sort of job queue for your workers to process. This job queue should be closed by the process\n\t// that populates it with items. Once the job channel is closed, any for loops ranging over the channel\n\t// will read items until there are no more items, and then break.\n\tjobChan := make(chan JobInfo)\n\t// Populate the job queue here...\n\t// ...\n\tclose(jobChan)\n\t// We now have a full queue of jobs that can't accept new jobs because the channel is closed.\n\t// Number of concurrent workers.\n\tworkerCount := 10\n\t// Initialize the WaitGroup.\n\twg := sync.WaitGroup{}\n\twg.Add(workerCount)\n\t// Create the worker goroutines.\n\tfor i := 0; i < workerCount; i++ {\n\t\tgo func() {\n\t\t\t// When the jobChan is closed, and no more jobs are available on the queue, the for loop\n\t\t\t// will exit, causing wg.Done() to be called, and the anonymous function to exit.\n\t\t\tfor job := range jobChan {\n\t\t\t\t// Process job.\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\t// Wait for all workers to call wg.Done()\n\twg.Wait()\n\t// Whatever you want to do after all queue items have been processed goes here.\n\t// ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62113459/unreliable-results-when-scanning-multiple-ports-concurrently",
    "body": "package main\nimport (\n    \"fmt\"\n    \"net\"\n    \"sync\"\n    \"time\"\n)\nfunc main() {\n    // This will help you to keep track of the goroutines\n    var wg sync.WaitGroup\n    for i := 1; i <= 9000; i++ {\n        // Increment the counter for each goroutine you start.\n        wg.Add(1)\n        go func(j int) {\n            // Make sure the wait group counter is decremented when the goroutine exits\n            defer wg.Done()\n            address := fmt.Sprintf(\"127.0.0.1:%d\", j)\n            conn, err := net.DialTimeout(\"tcp\", address, 2 * time.Second)\n            if err != nil {\n               return\n            }\n            conn.Close()\n            fmt.Printf(\"%d open\\n\", j)\n        }(i)\n    }\n    // Wait for all goroutines to finish before exiting main\n    wg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62113459/unreliable-results-when-scanning-multiple-ports-concurrently",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"sync\"\n\t\"time\"\n)\nvar minPort = 1\nvar maxPort = 65535\nvar timeout = 2 * time.Second\nconst parallel = 50\nfunc main(){\n\tfmt.Println(\"portscan called\")\n    // Create a buffered channel with a size equal to the number of goroutines\n\tctrl := make(chan int, parallel)\n    // Keep track of the currently active goroutines\n    var wg sync.WaitGroup\n\tfor p := 1; p <= parallel; p++ {\n\t\twg.Add(1)\n        // Start a goroutine...\n\t\tgo func(p int) {\n\t\t\tlog.Printf(\"Starting goroutine %d\", p)\n\n            // ...listening to the control channel.\n            // For every value this goroutine reads from the\n            // channel...\n\t\t\tfor i := range ctrl {\n\t\t\t\taddress := fmt.Sprintf(\"127.0.0.1:%d\", i)\n                // ...try to conncet to the port.\n\t\t\t\tconn, err := net.DialTimeout(\"tcp\", address, timeout)\n\t\t\t\tif err == nil {\n\t\t\t\t\tconn.Close()\n\t\t\t\t\tlog.Printf(\"[%3d]: %5d open\", p, i)\n\t\t\t\t}\n                // TBD: ERROR HANDLING!!!\n\t\t\t}\n            // If the channel is closed, this goroutine is done.\n\t\t\twg.Done()\n\t\t\tlog.Printf(\"[%3d]: Exiting\", p)\n\t\t}(p)\n\t}\n    // Fill the control channel with values.\n    // If the channel is full, the write operation\n    // to the channel will block until one of the goroutines\n    // reads a value from it.\n\tfor i := minPort; i <= maxPort; i++ {\n\t\tctrl <- i\n\t}\n    // We have sent all values, so the channel can be closed.\n    // The goroutines will finish their current connection attempt,\n    // notice that the channel is closed and will in turn call wg.Done().\n\tclose(ctrl)\n    // When all goroutines have announced that they are done, we can exit.\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61741453/why-golang-yaml-head-comment-becomes-foot-comment-after-unmarshal",
    "body": "func main() {\n        key := &yaml.Node{\n                Kind:        yaml.ScalarNode,\n                Value:       \"name\",\n                HeadComment: \"The name of a person\",\n        }\n        value := &yaml.Node{\n                Kind:  yaml.ScalarNode,\n                Value: \"Lilly\",\n                Style: yaml.DoubleQuotedStyle,\n        }\n        mapping := &yaml.Node{\n                Kind:    yaml.MappingNode,\n                Content: []*yaml.Node{key, value},\n        }\n        dataInBytes, _ := yaml.Marshal(mapping)\n        fmt.Println(string(dataInBytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61285875/force-gitlab-to-retry-webhooks-on-failure-with-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"github.com/joncrlsn/dque\"\n)\nvar (\n\tbind        string\n\tqueueDir    string\n\tsegmentSize int\n)\n// You might want to add request headers and stuff\ntype webhookContent struct {\n\tFoo string\n\tBar int\n}\nfunc init() {\n\tflag.StringVar(&bind, \"bind\", \":8080\", \"The address to bind to\")\n\tflag.StringVar(&queueDir, \"path\", \"./queue\", \"path to store the queue in\")\n\tflag.IntVar(&segmentSize, \"size\", 50, \"number of entries for the queue\")\n}\n// The \"webserver\" component\nfunc runserver(q *dque.DQue) {\n\thttp.HandleFunc(\"/webhook\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// A new decoder for each call, as we want to have a new LimitReader\n\t\t// for each call. This is a simple, albeit a bit crude method to prevent\n\t\t// accidental or malicious overload of your server.\n\t\tdec := json.NewDecoder(io.LimitReader(r.Body, 4096))\n\t\tdefer r.Body.Close()\n\t\tc := &webhookContent{}\n\t\tif err := dec.Decode(c); err != nil {\n\t\t\tlog.Printf(\"reading body: %s\", err)\n\t\t\thttp.Error(w, \"internal error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\t// When the content is successfully decoded, we can persist it into\n\t\t// our queue.\n\t\tif err := q.Enqueue(c); err != nil {\n\t\t\tlog.Printf(\"enqueueing webhook data: %s\", err)\n            // PROPER ERROR HANDLING IS MISSING HERE\n\t\t}\n\t})\n\thttp.ListenAndServe(bind, nil)\n}\nfunc main() {\n\tflag.Parse()\n\tvar (\n\t\tq   *dque.DQue\n\t\terr error\n\t)\n\tif !dirExists(queueDir) {\n\t\tif err = os.MkdirAll(queueDir, 0750); err != nil {\n\t\t\tlog.Fatalf(\"creating queue dir: %s\", err)\n\t\t}\n\t}\n\tif !dirExists(filepath.Join(queueDir, \"webhooks\")) {\n\t\tq, err = dque.New(\"webhooks\", queueDir, segmentSize, func() interface{} { return &webhookContent{} })\n\t} else {\n\t\tq, err = dque.Open(\"webhooks\", queueDir, segmentSize, func() interface{} { return &webhookContent{} })\n\t}\n\tif err != nil {\n\t\tlog.Fatalf(\"setting up queue: %s\", err)\n\t}\n\tdefer q.Close()\n\tgo runserver(q)\n\tvar (\n\t\t// Placeholder during event loop\n\t\ti interface{}\n\t\t// Payload\n\t\tw *webhookContent\n\t\t// Did the type assertion succeed\n\t\tok bool\n\t)\n\tfor {\n\t\t// We peek only. The semantic of this is that\n\t\t// you can already access the next item in the queue\n\t\t// without removing it from the queue and \"mark\" it as read.\n\t\t// We use PeekBlock since we want to wait for an item in the\n\t\t// queue to be available.\n\t\tif i, err = q.PeekBlock(); err != nil {\n\t\t\t// If we can not peek, something is SERIOUSLY wrong.\n\t\t\tlog.Fatalf(\"reading from queue: %s\", err)\n\t\t}\n\t\tif w, ok = i.(*webhookContent); !ok {\n\t\t\t// If the type assertion fails, something is seriously wrong, too.\n\t\t\tlog.Fatalf(\"reading from queue: %s\", err)\n\t\t}\n\t\tif err = doSomethingUseful(w); err != nil {\n\t\t\tlog.Printf(\"Something went wrong: %s\", err)\n\t\t\tlog.Println(\"I strongly suggest entering an incremental backoff!\")\n\t\t\tcontinue\n\t\t}\n\t\t// We did something useful, so we can dequeue the item we just processed from the queue.\n\t\tq.Dequeue()\n\t}\n}\nfunc doSomethingUseful(w *webhookContent) error {\n\tlog.Printf(\"Instead of this log message, you can do something useful with: %#v\", w)\n\treturn nil\n}\nfunc dirExists(path string) bool {\n\tfileInfo, err := os.Stat(path)\n\tif err == nil {\n\t\treturn fileInfo.IsDir()\n\t}\n\treturn false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61251544/helm-template-looping-over-map",
    "body": "extraPolicies:\n- name: dashboard\n  policyType:\n    - Ingress\n  ingress:\n    - name: podSelector\n      settings:\n        all: {}\n    - name: ipBlock\n      settings:\n        cidr: \"172.17.0.0/16\"\n    - name: namespaceSelector\n      settings:\n        matchLabels:\n          project: test\n          namespace: mynamespace\n  ingressPorts:\n    - protocol: TCP\n      port: 6379\n    - protocol: TCP\n      port: 8080\n- name: dasboard-integ\n  policyType:\n    - Ingress\n  ingress:\n    - name: podSelector\n      settings:\n        all: {}\n    - name: ipBlock\n      settings:\n        cidr: \"172.17.0.0/16\"\n  ingressPorts:\n    - protocol: TCP\n      port: 3000\n    - protocol: TCP\n      port: 8000\n    - protocol: TCP\n      port: 443\n    - protocol: TCP\n      port: 80"
  },
  {
    "url": "https://stackoverflow.com/questions/61251544/helm-template-looping-over-map",
    "body": "{{- if .Values.extraPolicies -}}\n{{- $fullName := include \"network-policies.fullname\" . -}}\n{{- $namespace := .Values.deployNamespace }}\n{{- range .Values.extraPolicies }}\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: {{ .name }}\n  namespace: {{ $namespace }}\nspec:\n  policyTypes:\n  {{- range $i, $type := .policyType }}\n  - {{ $type }}\n  {{- end }}\n  {{- if .ingress }}\n  ingress:\n  - from:\n  {{- range $i, $ingress := .ingress }}\n    - {{ .name -}}: {{ if eq .name \"podSelector\" }}{}{{ end -}}\n      {{- if eq .name \"ipBlock\" }}\n      {{- range $k, $v := .settings }}\n      cidr: {{ $v -}}\n      {{ end -}}\n      {{ end -}}\n      {{- if eq .name \"namespaceSelector\" }}\n      {{- range $k, $v := .settings }}\n      matchLabels:\n        {{- range $k, $v := . }}\n        {{ $k }}: {{ $v }}\n        {{- end -}}\n      {{ end -}}\n      {{ end -}}\n    {{- end }}\n    ports:\n    {{ range $i, $port := .ingressPorts }}\n    {{- range $k, $v := . -}}\n    {{- if eq $k \"port\" -}}\n    - {{ $k }}: {{ $v }}\n    {{- end -}}\n    {{ if eq $k \"protocol\" }}\n      {{ $k }}: {{ $v }}\n    {{ end -}}\n    {{ end -}}\n    {{- end }}\n  {{- end }}\n  {{- if .egress }}\n  egress:\n    - to:\n      ports:\n  {{- end }}\n{{- end }}\n{{- end }}"
  },
  {
    "url": "https://stackoverflow.com/questions/61251544/helm-template-looping-over-map",
    "body": "# Source: network-policies/templates/extra-policies.yml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: dashur\n  namespace: default\nspec:\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector: {}\n    - ipBlock:\n      cidr: 172.17.0.0/16\n    - namespaceSelector:\n      matchLabels:\n        namespace: mynamespace\n        project: test\n    ports:\n    - port: 6379\n      protocol: TCP\n    - port: 8080\n      protocol: TCP\n---\n# Source: network-policies/templates/extra-policies.yml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: dashur-integ\n  namespace: default\nspec:\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector: {}\n    - ipBlock:\n      cidr: 172.17.0.0/16\n    ports:\n    - port: 3000\n      protocol: TCP\n    - port: 8000\n      protocol: TCP\n    - port: 443\n      protocol: TCP\n    - port: 80\n      protocol: TCP"
  },
  {
    "url": "https://stackoverflow.com/questions/60842867/how-to-load-a-proto-file-in-protoregistry",
    "body": "func registerProtoFile(src_dir string, filename string) error {\n\t// First, convert the .proto file to a file descriptor set\n\ttmp_file := filename + \"tmp.pb\"\n\tcmd := exec.Command(\"protoc\",\n\t\t\"--descriptor_set_out=\" + tmp_file,\n\t\t\"-I\"+src_dir\n\t\tpath.Join(src_dir, filename))\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\terr := cmd.Run()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer os.Remove(tmp_file)\n\t// Now load that temporary file as a file descriptor set protobuf\n\tprotoFile, err := ioutil.ReadFile(tmp_file)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpb_set := new(descriptorpb.FileDescriptorSet)\n\tif err := proto.Unmarshal(protoFile, pb_set); err != nil {\n\t\treturn err\n\t}\n    // We know protoc was invoked with a single .proto file\n\tpb := pb_set.GetFile()[0]\n    // Initialize the File descriptor object\n\tfd, err := protodesc.NewFile(pb, protoregistry.GlobalFiles)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// and finally register it.\n\treturn protoregistry.GlobalFiles.RegisterFile(fd)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60700271/add-routes-using-af-route-in-golang-on-mac",
    "body": "type rt_msg struct {\n    Hdr   rt_msghdr                   `json:\"hdr\"`\n    Addr1 syscall.RawSockaddrInet4    `json:\"addr1\"`\n    Addr2 syscall.RawSockaddrInet4    `json:\"addr2\"`\n}\ntype rt_msghdr struct {\n    Rtm_msglen  uint16 `json:\"rtm_msglen\"`    /* to skip over non-understood messages */\n    // ... and so on\n    Rtm_rmx     rt_metrics `json:\"rtm_rmx\"` /* metrics themselves */\n}\ntype rt_metrics struct {\n    Rmx_locks    uint64    `json:\"rmx_locks\"` /* Kernel must leave these values alone */\n    // ... and so on\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60344073/can-you-run-an-independent-instance-of-a-program-from-within-go",
    "body": "package main\nimport (\n        \"fmt\"\n        \"os\"\n        \"os/exec\"\n        \"syscall\"\n)\nfunc main() {\n        cmd, err := exec.LookPath(\"sleep\")\n        if err != nil {\n                panic(err)\n        }\n        attr := &os.ProcAttr{\n                Sys: &syscall.SysProcAttr{\n                        Setpgid: true,\n                },\n        }\n        process, err := os.StartProcess(cmd, []string{cmd, \"1m\"}, attr)\n        if err != nil {\n                panic(err)\n        }\n        fmt.Println(process.Pid)\n        process.Release()\n        for {\n        }\n        return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60016406/how-do-you-remove-a-static-middleware-on-a-post-request",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"sync/atomic\"\n\t\"github.com/gin-contrib/static\"\n\t\"github.com/gin-gonic/gin\"\n)\n// using atomic package instead of using mutexes looks better in this scope\nvar noIndex int32\nfunc indexMiddleware() gin.HandlerFunc {\n\thdl := static.Serve(\"/\", static.LocalFile(\"./pages/home\", true))\n\treturn func(c *gin.Context) {\n\t\tif atomic.LoadInt32(&noIndex) == 0 {\n\t\t\thdl(c)\n\t\t\t// if you have additional middlewares, let them run\n\t\t\tc.Next()\n\t\t\treturn\n\t\t}\n\t\tc.AbortWithStatus(http.StatusBadRequest)\n\t}\n}\nfunc main() {\n\tr := gin.Default()\n\tr.Use(indexMiddleware())\n\tr.POST(\"/example\", func(c *gin.Context) {\n\t\tatomic.CompareAndSwapInt32(&noIndex, 0, 1)\n\t\tc.String(http.StatusOK, \"OK\")\n\t})\n\tr.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59691001/failing-at-extending-fynes-widgets",
    "body": "package main\nimport (\n\t\"log\"\n\t\"fyne.io/fyne\"\n\t\"fyne.io/fyne/app\"\n\t\"fyne.io/fyne/widget\"\n)\ntype myButton struct {\n\twidget.Button\n}\nfunc (m *myButton) TappedSecondary(*fyne.PointEvent) {\n\tlog.Println(\"Right Click\")\n}\nfunc newMyButton(label string, tapped func()) *myButton {\n\tret := &myButton{}\n\tret.ExtendBaseWidget(ret)\n\tret.Text = label\n\tret.OnTapped = tapped\n\treturn ret\n}\nfunc main() {\n\ta := app.New()\n\tw := a.NewWindow(\"Hello\")\n\tw.SetContent(widget.NewVBox(\n\t\tnewMyButton(\"Right tap me\", func() {\n\t\t\tlog.Println(\"Normal callback\")\n\t\t}),\n\t))\n\tw.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59606324/remove-longest-common-prefix-from-a-list-of-paths",
    "body": "func removeLargestPrefix(in []string) []string {\n   // Store split paths in results\n   results:=make([][]string,0,len(in))\n   // Pick the first path as the longest prefix\n   results=append(results,strings.Split(in[0],\"/\"))\n   longest:=results[0]\n   // cmp shortents the known longest prefix\n   cmp:=func(a []string)  {\n       if len(a)<len(longest) {\n         longest=longest[:len(a)]\n       }\n       for i:=0;i<len(longest);i++ {\n          if a[i]!=longest[i] {\n             longest=longest[:i]\n             return\n          }\n       }\n   }\n   // process all paths\n   for i:=1;i<len(in);i++ {\n       r:=strings.Split(in[i],\"/\")\n       results=append(results,r)\n       cmp(r)\n   }\n   // here, len(longest) is the length of the longest prefix\n   out:=make([]string,0,len(results))\n   for _,r:=range results {\n      out=append(out,strings.Join(r[len(longest):],\"/\"))\n   }\n   return out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59598093/how-to-marshal-unmarshal-bson-array-with-polymorphic-struct-with-mongo-go-driver",
    "body": "func (l *INodeList) UnmarshalBSONValue(t bsontype.Type, data []byte) error {\n\tfmt.Println(\"INodeList.UnmarshalBSONValue\")\n\tvar raw bson.Raw // 1. First, try to decode data as bson.Raw\n\terr := bson.Unmarshal(data, &raw)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn err\n\t}\n\t// Slice the raw document to an array of valid raw values\n\trawNodes, err := raw.Values()\n\tif err != nil {\n\t\treturn err\n\t}\n\t// 2. Then, try to decode each bson.Raw as concrete Node according to `nodeclass`\n\tfor _, rawNode := range rawNodes {\n\t\t// Convert the raw node to a raw document in order to access its \"nodeclass\" field\n\t\td, ok := rawNode.DocumentOK()\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"raw node can't be converted to doc\")\n\t\t}\n\t\tclass := d.Lookup(\"nodeclass\").StringValue()\n        // Decode the node's raw doc to the corresponding struct\n\t\tvar node INode\n\t\tswitch class {\n\t\tcase \"SubNode1\":\n\t\t\tnode = &SubNode1{}\n\t\tcase \"SubNode2\":\n\t\t\tnode = &SubNode2{}\n\t\t//...\n\t\tdefault:\n\t\t\t// ...\n\t\t}\n\t\tbson.Unmarshal(d, node)\n\t\t*l = append(*l, node)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59463846/how-to-read-channel-without-waiting-setting-in-another-goroutine",
    "body": "var test = make(chan string)\nvar mapChan = make(map[int]chan string)\nvar count = 3\nfunc main() {\n\tgo initChan()\n\tgo deamon()\n\tfor i := 0; i < count; i++ {\n\t\tmapChan[i] = make(chan string)\n\t\tgo readChan(i)\n\t}\n\tvar input string\n\tfmt.Scanln(&input)\n}\nfunc deamon() {\n\tfor {\n\t\tmessage := <-test\n\t\tfor i := 0; i < count; i++ {\n\t\t\tmapChan[i] <- message\n\t\t}\n\t}\n}\nfunc initChan() {\n\tfor i := 0; i < 100; i++ {\n\t\ttest <- \"Iteration num: \" + strconv.Itoa(i)\n\t\ttime.Sleep(time.Second * 1)\n\t}\n}\nfunc readChan(i int) {\n\tfor {\n\t\tselect {\n\t\tcase message := <-mapChan[i]:\n\t\t\tlog.Println(message)\n\t\tdefault:\n\t\t\t// Do for not when written on channel\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58279707/using-multipartrequest-to-upload-file",
    "body": "func ImagesUploadDecoderFunc(mr *multipart.Reader, p **images.ImageUploadPayload) error {\n\tres := images.ImageUploadPayload{}\n\tfor {\n\t\tp, err := mr.NextPart()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\treturn err\n\t\t}\n\t\t_, params, err := mime.ParseMediaType(p.Header.Get(\"Content-Disposition\"))\n\t\tif err != nil {\n\t\t\t// can't process this entry, it probably isn't an image\n\t\t\tcontinue\n\t\t}\n\t\tdisposition, _, err := mime.ParseMediaType(p.Header.Get(\"Content-Type\"))\n        // the disposition can be, for example 'image/jpeg' or 'video/mp4'\n        // I want to support only image files!\n\t\tif err != nil || !strings.HasPrefix(disposition, \"image/\") {\n\t\t\t// can't process this entry, it probably isn't an image\n\t\t\tcontinue\n\t\t}\n\t\tif params[\"name\"] == \"file\" {\n\t\t\tbytes, err := ioutil.ReadAll(p)\n\t\t\tif err != nil {\n\t\t\t\t// can't process this entry, for some reason\n\t\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfilename := params[\"filename\"]\n\t\t\timageUpload := images.ImageUpload{\n\t\t\t\tType:  &disposition,\n\t\t\t\tBytes: bytes,\n\t\t\t\tName:  &filename,\n\t\t\t}\n\t\t\tres.Files = append(res.Files, &imageUpload)\n\t\t}\n\t}\n\t*p = &res\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57995716/how-to-create-a-certificate-chain",
    "body": "--- cert.go.orig        2019-09-18 17:35:29.408807334 +0200\n+++ cert.go     2019-09-18 17:35:45.028779955 +0200\n@@ -46,11 +46,11 @@\n        x, err := x509.CreateCertificate(rand.Reader, template, ca.Leaf, key.Public(), ca.PrivateKey)\n        if err != nil {\n                return nil, err\n        }\n        cert := new(tls.Certificate)\n-       cert.Certificate = append(cert.Certificate, x)\n+       cert.Certificate = append(cert.Certificate, x, ca.Leaf.Raw)\n        cert.PrivateKey = key\n        cert.Leaf, _ = x509.ParseCertificate(x)\n        return cert, nil\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/57714334/how-to-build-an-abstract-json-unmarshaller-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype UniversalDTO struct {\n\tSuccess bool        `json:\"success\"`\n\tData    interface{} `json:\"data\"`\n}\ntype ConcreteData struct {\n\tSource string `json:\"source\"`\n\tSite   string `json:\"site\"`\n}\nfunc main() {\n\tjsondata := []byte(`{\"sucess\":\"true\",\"data\":[{\"source\":\"foo\",\"site\":\"bar\"}]}`)\n\tdata := make([]ConcreteData, 0, 10)\n\tdtoToSend := UniversalDTO{Data: &data}\n\tdescribe(dtoToSend)\n\tdescribe(dtoToSend.Data)\n\tjson.Unmarshal(jsondata, &dtoToSend)\n\n\tdescribe(dtoToSend)\n\tdescribe(dtoToSend.Data)\n}\nfunc describe(i interface{}) {\n\tfmt.Printf(\"(%v, %T)\\n\", i, i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57620433/writing-a-application-that-can-use-2-databases",
    "body": "// ListHandler uses an interface instead of a concrete type to\n// retrieve the data from the databases.\n// Not only does this approach make it possible to provide different\n// implementations, but it makes unit testing way easier.\n//\n// \"Thou Shalt Write Tests\"\nfunc ListHandler(rdr Reader) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Pagination ommited for brevity\n        // Note that the handler is agnostic of the underlying implementation.\n\t\tu, err := rdr.ListAll()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"ListHandler: error retrieving user list: %s\", err)\n\t\t\t// Do not do this in production! It might give an attacker information\n\t\t\t// Use a static error message instead!\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tif err := json.NewEncoder(w).Encode(u); err != nil {\n\t\t\tlog.Printf(\"ListHandler: error encoding user list to JSON: %s\", err)\n\t\t\t// See above\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57014657/using-golang-s2-geometry-library-with-dynamodb",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"strconv\"\n\t\"github.com/golang/geo/s2\"\n)\nconst earthRadiusM = 6371000 // per https://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html\nconst hashLength = 8         // < 1km per https://github.com/rh389/dynamodb-geo.js/blob/master/test/integration/hashKeyLength.ts\nfunc main() {\n\tlowPrefix := uint64(0)\n\thighPrefix := uint64(0)\n\tctrLat := 52.225730 // Cambridge UK\n\tctrLng := 0.149593\n\tboundingSq := squareFromCenterAndRadius(ctrLat, ctrLng, 500)\n\tfmt.Printf(\"\\nBounding sq %+v\\n\", boundingSq)\n\tcoveringCells := getCoveringCells(boundingSq)\n\tfmt.Printf(\"Covering Cells (%d):\\n\", len(coveringCells))\n\tfor idx, cell := range coveringCells {\n\t\t// cell is the UUID of the center of this cell\n\t\tfullHash, hashPrefix := genCellIntPrefix(cell)\n\t\tif 0 == idx {\n\t\t\tlowPrefix = hashPrefix\n\t\t\thighPrefix = hashPrefix\n\t\t} else if hashPrefix < lowPrefix {\n\t\t\tlowPrefix = hashPrefix\n\t\t} else if hashPrefix > highPrefix {\n\t\t\thighPrefix = hashPrefix\n\t\t}\n\t\tfmt.Printf(\"\\tID:%19v uint64: %-19d prefix: %-10d Range: %-19d - %-19d\\n\", cell, fullHash, hashPrefix, uint64(cell.RangeMin()), uint64(cell.RangeMax()))\n\t}\n\tfmt.Printf(\"\\tPrefix Range from loop: %-10d - %-10d\\n\", lowPrefix, highPrefix)\n\t// TODO: Assuming covering cells are sorted.  Correct assumption?\n\t_, lowPrefix = genCellIntPrefix(coveringCells[0].RangeMin())\n\t_, highPrefix = genCellIntPrefix(coveringCells[len(coveringCells)-1].RangeMax())\n\tfmt.Printf(\"\\tPrefix Range direct:    %-10d - %-10d\\n\", lowPrefix, highPrefix)\n}\n// Get bounding box square from center point and radius\n// Boundnig box is not extremely accurate to the radiusMeters passed in\n// @see https://gis.stackexchange.com/questions/80809/calculating-bounding-box-coordinates-based-on-center-and-radius\nfunc squareFromCenterAndRadius(centerLatDegrees float64, centerLngDegrees float64, radiusMeters float32) s2.Rect {\n\tlatLng := s2.LatLngFromDegrees(centerLatDegrees, centerLngDegrees)\n\tdeltaLng := float64(360 * radiusMeters / earthRadiusM) //Search Radius, difference in lat\n\tdeltaLat := deltaLng * math.Cos(latLng.Lng.Radians())  //Search Radius, difference in lng\n\tlowerLeftLatDeg := centerLatDegrees - deltaLat\n\tlowerLeftLngDeg := centerLngDegrees - deltaLng\n\tlowerLeft := s2.LatLngFromDegrees(lowerLeftLatDeg, lowerLeftLngDeg) // AKA s2.Rect.Lo\n\tupperRightLatDeg := centerLatDegrees + deltaLat\n\tupperRightLngDeg := centerLngDegrees + deltaLng\n\tupperRight := s2.LatLngFromDegrees(upperRightLatDeg, upperRightLngDeg) // AKA s2.Rect.Hi\n\tboundingSquare := s2.RectFromLatLng(lowerLeft).AddPoint(upperRight)\n\treturn boundingSquare\n}\nfunc getCoveringCells(boundingRect s2.Rect) s2.CellUnion {\n\t// defaults per https://github.com/vekexasia/nodes2-ts/blob/1952d8c1f6cb4a862731ace2d5f74d472ec22e55/src/S2RegionCoverer.ts#L101\n\trc := &s2.RegionCoverer{\n\t\tMinLevel: 12, // 3km^2 per http://s2geometry.io/resources/s2cell_statistics\n\t\tMaxLevel: 20, // 46m^2 per http://s2geometry.io/resources/s2cell_statistics\n\t\tMaxCells: 8,\n\t\tLevelMod: 1,\n\t}\n\treturn rc.Covering(boundingRect)\n}\nfunc genCellIntPrefix(cell s2.CellID) (hash uint64, prefix uint64) {\n\thash = uint64(cell)\n\tgeohashString := strconv.FormatUint(hash, 10)\n\tdenominator := math.Pow10(len(geohashString) - hashLength)\n\tprefix = hash / uint64(denominator)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55945248/go-keep-get-scan-file-error-http-invalid-read-on-closed-body",
    "body": "resp.Header().Set(\"Content-Type\", \"text/plain\")\n    scanner := bufio.NewScanner(req.Body)\n    ctx := context.Background()\n    for scanner.Scan() {\n        itemID := scanner.Text()\n        go func(itemID string){\n           category := api.SearchAPI.FindCategory(itemID, lang, ctx)\n           _, _ = fmt.Fprintf(resp, \"%v,%v \\n\", itemID, category)\n           count++ //ENSURE YOU HAVE AN ATOMIC COUNTER INCREMENT, OR INCREMENT AFTER itemID IS READ\n        }(itemID)\n    }\n    if err := scanner.Err(); err != nil {\n        logger.Errorf(\"scan file error: %v\", err)\n        http.Error(resp, err.Error(), http.StatusBadRequest)\n        return\n    }\n   //.....\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55945248/go-keep-get-scan-file-error-http-invalid-read-on-closed-body",
    "body": "resp.Header().Set(\"Content-Type\", \"text/plain\")\n    scanner := bufio.NewScanner(req.Body)\n    ctx := context.Background()\n    itemIDs := make([]string, 0)\n    for scanner.Scan() {\n        itemID := scanner.Text()\n        itemIDs = append(itemIDs, itemID)\n    }\n    if err := scanner.Err(); err != nil {\n        logger.Errorf(\"scan file error: %v\", err)\n        http.Error(resp, err.Error(), http.StatusBadRequest)\n        return\n    }\n    for _, itemID := range itemIDs {\n        category := api.SearchAPI.FindCategory(itemID, lang, ctx)\n        _, _ = fmt.Fprintf(resp, \"%v,%v \\n\", itemID, category)\n        count++\n    }\n   //.....\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55576032/sending-file-to-google-drive-api-from-golang-code-yields-error-unsupported-cont",
    "body": "import (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"net/textproto\"\n)\nfunc main() {\n\taccessToken := \"YOUR-TOKEN\"\n\tclient := http.Client{}\n\tmediaData, _ := ioutil.ReadFile(\"test.png\")\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n    // JSON Metadata (part-1)\n\tjsonMetadata := textproto.MIMEHeader{}\n\tmetadata := `{\"name\": \"test.png\"}`\n\tjsonMetadata.Set(\"Content-Type\", \"application/json\")\n\tpart, _ := writer.CreatePart(jsonMetadata)\n\tpart.Write([]byte(metadata))\n    // Image bytes (part-2)\n\timageData := textproto.MIMEHeader{}\n\tpartAttach, _ := writer.CreatePart(imageData)\n\tio.Copy(partAttach, bytes.NewReader(mediaData))\n\twriter.Close()\n    // Request Content Type with boundary\n\tcontentType := fmt.Sprintf(\"multipart/related; boundary=%s\", writer.Boundary())\n    // HTTP Request with auth and content type headers\n\treq, _ := http.NewRequest(http.MethodPost, \"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart\", bytes.NewReader(body.Bytes()))\n\treq.Header.Add(\"Authorization\", \"Bearer \"+accessToken)\n\treq.Header.Add(\"Content-Type\", contentType)\n    // Send request\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to send request: %v\", err)\n\t}\n\tdefer resp.Body.Close()\n\tcontent, _ := ioutil.ReadAll(resp.Body)\n\tlog.Printf(\"http status: %d\", resp.StatusCode)\n\tlog.Printf(\"response: %s\", string(content))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55222830/get-and-modify-yaml-file-from-openshift-api-of-the-persisten-volume-in-golang",
    "body": "pv, err := clientset.CoreV1().PersistentVolumes().List(metav1.ListOptions{})\n    for _, persV := range pv.Items {\n        // Check status persistent volume\n        pvStatus, err := clientset.CoreV1().PersistentVolumes().Get(persV.Name, metav1.GetOptions{})\n        if err != nil {\n            panic(err.Error())\n        }\n\t\tpatch := []byte(`{\"spec\": {\"persistentVolumeReclaimPolicy\": \"Delete\"}}`)\n        _, err = clientset.CoreV1().PersistentVolumes().Patch(persV.Name, types.StrategicMergePatchType, patch)"
  },
  {
    "url": "https://stackoverflow.com/questions/54273638/running-go-server-behind-nginx-reverse-proxy-with-ssl",
    "body": "# ssl\nssl_certificate      /etc/nginx/cert/live/ybilly.com/fullchain.pem;\nssl_certificate_key  /etc/nginx/cert/live/ybilly.com/privkey.pem;\n# http to https\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server;\n  server_name ybilly.com www.ybilly.com *.ybilly.com;\n  return 301 https://$host$request_uri;\n}\n# api backend\nserver {\n  listen 443 ssl http2;\n  listen [::]:443 ssl http2;\n  server_name *.ybilly.com;\n  location / {\n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-Ip $remote_addr;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_pass_header Set-Cookie;\n    proxy_read_timeout                 900;\n    proxy_buffers 32 4k;\n    proxy_pass http://127.0.0.1:8080/;\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/51394852/reading-json-data-from-mysql-in-golang",
    "body": "type MyField struct {\n\tKey string `json:\"key\"`\n    Value string `json:\"value\"`\n}\ntype MyModel struct {\n    ID uint64\n    MyFieldName MyField `json:\"my_field_name\"`\n}\nfunc (m *MyField) Scan(src interface{}) error {\n    // The data stored in a JSON field is actually returned as []uint8\n\tval := src.([]uint8)\n\treturn json.Unmarshal(val, &m)\n}\nfunc main() {\n    db, err := sql.Open(\"mysql\", \"root:password@tcp(127.0.0.1)/dbname\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer db.Close()\n\tresults, err := db.Query(\"SELECT id, my_field_name FROM my_table\")\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfor results.Next() {\n\t\tvar row MyModel\n\t\terr := results.Scan(&row.ID, &row.MyFieldName)\n\t\tif err != nil {\n\t\t\tpanic(err.Error())\n\t\t}\n\t\tfmt.Println(row.MyFieldName.Key)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79501144/how-to-extract-parrots-anafi-ai-drone-protobuf-metadata-from-rtp-packet-using",
    "body": "func parse(data []byte) error {\n    n := 12 // skip fixed size header\n    log.Printf(\"Initial buffer: %x\", data)\n    version := data[n : n+2]\n    n += 2\n    log.Printf(\"Defined by profile: 0x%x\\n\", version) // 0x5062 here, so no pb\n    length := binary.BigEndian.Uint16(data[n : n+2])\n    n += 2\n    log.Printf(\"Length: %d\\n\", length)\n    packIndicator := binary.BigEndian.Uint16(data[n : n+2])\n    lastPack := (packIndicator >> 9) & 0x7f\n    curPack := (packIndicator >> 2) & 0x7f\n    padding := (packIndicator >> 0) & 0x03\n    n += 2\n    log.Printf(\"Packet: %d/%d\\n\", curPack, lastPack)\n    log.Printf(\"Padding: %d\\n\", padding)\n    offset := binary.BigEndian.Uint16(data[n : n+2])\n    n += 2\n    log.Printf(\"Offset: %d\\n\", offset)\n    rawData := data[n : int(n)+(4*int(length - 1)) - int(padding)]\n    log.Printf(\"RawData: %x\", rawData)\n    model := vmeta.TimedMetadata{}\n    if err := proto.Unmarshal(rawData, &model); err != nil {\n        return fmt.Errorf(\"failed to deserialize: %v\", err)\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79456180/how-to-get-the-latest-key-version-in-google-cloud-kms",
    "body": "        listCryptoKeyVersionsReq := &kmspb.ListCryptoKeyVersionsRequest{\n                Parent: cryptoKey,\n                OrderBy: \"name desc\",\n        }\n        it := client.ListCryptoKeyVersions(ctx, listCryptoKeyVersionsReq)\n        for {\n                resp, err := it.Next()\n                if err == iterator.Done {\n                        break\n                }\n                if err != nil {\n                        log.Fatalf(\"Failed to list key rings: %v\", err)\n                }\n                version, _ := strings.CutPrefix(resp.Name, cryptoKey)\n                fmt.Printf(\"key version: %s\\n\", version)\n        }"
  },
  {
    "url": "https://stackoverflow.com/questions/79439235/how-to-securely-wipe-xtscipher-internal-key-material-in-go",
    "body": "func unsafeClearXTSCipher(v *xts.Cipher) {\n\tr := reflect.ValueOf(*v)\n\tunsafeClearAESCipher(r.FieldByName(\"k1\").Elem().Elem())\n\tunsafeClearAESCipher(r.FieldByName(\"k2\").Elem().Elem())\n}\n// unsafeClearAESCipher clears an instance of an AES cipher. Currently supports\n// crypto/internal/fips140/aes.Block and crypto/internal/boring.aesCipher.\nfunc unsafeClearAESCipher(v reflect.Value) {\n\tkey := v.FieldByName(\"key\")\n\tif key.IsValid() {\n\t\t// \"key\" field exists only in boring crypto\n\t\tunsafeClearValue(key)\n\t}\n\tunsafeClearValue(v.FieldByName(\"enc\"))\n\tunsafeClearValue(v.FieldByName(\"dec\"))\n}\nfunc unsafeClearValue(v reflect.Value) {\n\tt := v.Type()\n\tfmt.Println(t.Kind(), t.Size())\n\tswitch t.Kind() {\n\tcase reflect.Array, reflect.Struct:\n\t\tarrType := reflect.ArrayOf(int(t.Size()), reflect.TypeOf(uint8(0)))\n\t\treflect.NewAt(arrType, v.Addr().UnsafePointer()).Elem().SetZero()\n\tcase reflect.Slice:\n\t\tarrType := reflect.ArrayOf(v.Len(), reflect.TypeOf(uint8(0)))\n\t\treflect.NewAt(arrType, v.Index(0).Addr().UnsafePointer()).Elem().SetZero()\n\tdefault:\n\t\tpanic(\"unsupported value type \" + t.String())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79394141/how-to-seamlessly-concatenate-multiple-opus-files-together-without-popping-sound",
    "body": "[hls @ 0x55eb4d226bc0] Opening 'output000.opus' for reading\nInput #0, hls, from 'playlist.m3u8':\n  Duration: 00:00:50.00, start: -0.006500, bitrate: 0 kb/s\n  Program 0\n    Metadata:\n      variant_bitrate : 0\n  Stream #0:0: Audio: opus, 48000 Hz, stereo, fltp\nOutput #0, opus, to 'output.opus':\n  Metadata:\n    encoder         : Lavf60.16.100\n  Stream #0:0: Audio: opus, 48000 Hz, stereo, fltp\nStream mapping:\n  Stream #0:0 -> #0:0 (copy)\nPress [q] to stop, [?] for help\n[hls @ 0x55eb4d226bc0] Opening 'output001.opus' for reading\n[aist#0:0/opus @ 0x55eb4d22ecc0] timestamp discontinuity (stream id=0): -40020000, new offset= 40020000\n[hls @ 0x55eb4d226bc0] Opening 'output002.opus' for reading\n[aist#0:0/opus @ 0x55eb4d22ecc0] timestamp discontinuity (stream id=0): -39980000, new offset= 80000000\n[hls @ 0x55eb4d226bc0] Opening 'output003.opus' for reading\n[aist#0:0/opus @ 0x55eb4d22ecc0] timestamp discontinuity (stream id=0): -39980000, new offset= 119980000\n[hls @ 0x55eb4d226bc0] Opening 'output004.opus' for reading\n[aist#0:0/opus @ 0x55eb4d22ecc0] timestamp discontinuity (stream id=0): -39980000, new offset= 159960000\n[out#0/opus @ 0x55eb4d22c700] video:0kB audio:2610kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.780910%\nsize=    2630kB time=00:02:42.14 bitrate= 132.9kbits/s speed=1.94e+03x\nfedora@/dev/pts/4:$"
  },
  {
    "url": "https://stackoverflow.com/questions/79276775/lauchdarkly-flag-value-specific-for-test-case",
    "body": "package main\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\tld \"github.com/launchdarkly/go-server-sdk/v7\"\n\t\"github.com/launchdarkly/go-server-sdk/v7/interfaces\"\n\t\"github.com/launchdarkly/go-server-sdk/v7/ldcomponents\"\n\t\"github.com/launchdarkly/go-server-sdk/v7/testhelpers/ldtestdata\"\n\tofld \"github.com/open-feature/go-sdk-contrib/providers/launchdarkly/pkg\"\n\t\"github.com/open-feature/go-sdk/openfeature\"\n)\nfunc NewTestFlaggingClient() (*ldtestdata.TestDataSource, error) {\n\ttd := ldtestdata.DataSource()\n\tldConfig := ld.Config{\n\t\tApplicationInfo: interfaces.ApplicationInfo{\n\t\t\tApplicationID: \"testing\",\n\t\t},\n\t\tDataSource: td,\n\t\tEvents:     ldcomponents.NoEvents(),\n\t}\n\tldClient, err := ld.MakeCustomClient(\"fake-sdk-key\", ldConfig, 5*time.Second)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := openfeature.SetProvider(ofld.NewProvider(ldClient)); err != nil {\n\t\treturn nil, err\n\t}\n\treturn td, err\n}\nfunc TestMyMethod(t *testing.T) {\n\ttd, _ := NewTestFlaggingClient()\n\ttd.Update(td.Flag(\"method-enabled\").\n\t\tVariationForUser(\"user1\", false).\n\t\tFallthroughVariation(true),\n\t)\n\tenabledCtx := openfeature.NewEvaluationContext(\"user2\", nil)\n\tdisabledCtx := openfeature.NewEvaluationContext(\"user1\", nil)\n\tctx := context.Background()\n\ttype args struct {\n\t\tctx context.Context\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\targs    args\n\t\twant    bool\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"enabled\",\n\t\t\targs: args{openfeature.WithTransactionContext(ctx, enabledCtx)},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"disabled\",\n\t\t\targs: args{openfeature.WithTransactionContext(ctx, disabledCtx)},\n\t\t\twant: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := MyMethod(tt.args.ctx)\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"MyMethod() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif got != tt.want {\n\t\t\t\tt.Errorf(\"MyMethod() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79185193/go-websocket-to-stream-public-mastodon-posts-gives-bad-handshake",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"github.com/gorilla/websocket\"\n)\nfunc streamPublicTimelineWebSocket(instanceURL string) {\n\t// Updated Mastodon Streaming WebSocket API URL for public posts\n\turl := fmt.Sprintf(\"wss://%s/api/v1/streaming/public\", instanceURL)\n\t// Create a WebSocket dialer to manage the connection\n\tdialer := websocket.DefaultDialer\n\ttoken := \"you token\"\n\t// Create a map for custom headers if necessary (e.g., User-Agent)\n\theaders := map[string][]string{\n\t\t\"User-Agent\":    {\"Mastodon Streamer Go\"},\n\t\t\"Authorization\": {\" Bearer \" + token},\n\t}\n\t// Establish a WebSocket connection with custom headers\n\tconn, _, err := dialer.Dial(url, headers)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to Mastodon streaming WebSocket: %v\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer conn.Close()\n\tlog.Printf(\"Successfully connected to stream at: %s\", url)\n\t// Continuously read and process incoming WebSocket messages\n\tfor {\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error reading WebSocket message: %v\", err)\n\t\t}\n\t\t// Print out the received message (which is a Mastodon post)\n\t\tlog.Printf(\"Received message: %s\", msg)\n\t}\n}\nfunc main() {\n\t// Replace with your Mastodon instance URL (e.g., \"streaming.mastodon.social\")\n\tinstanceURL := \"streaming.mastodon.social\" // Updated to the correct WebSocket URL\n\t// Start streaming the public timeline in real-time using WebSocket\n\tlog.Println(\"Starting streaming from Mastodon...\")\n\tstreamPublicTimelineWebSocket(instanceURL)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79143824/check-if-smtp-server-is-online",
    "body": "// Dial returns a new [Client] connected to an SMTP server at addr.\n// The addr must include a port, as in \"mail.example.com:smtp\".\nfunc Dial(addr string) (*Client, error) {\n\t// ...\n\treturn NewClient(conn, host)\n}\n// NewClient returns a new [Client] using an existing connection and host as a\n// server name to be used when authenticating.\nfunc NewClient(conn net.Conn, host string) (*Client, error) {\n\ttext := textproto.NewConn(conn)\n\t_, _, err := text.ReadResponse(220)\n\tif err != nil {\n\t\ttext.Close()\n\t\treturn nil, err\n\t}\n\t// ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79056341/cannot-get-xml-attribute-value-using-go",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\ntype Container struct {\n\tVersion string `xml:\"version,attr\"`\n\tXmlns string `xml:\"xmlns,attr\"`\n\tRootFiles RootFiles `xml:\"rootfiles\"`\n}\ntype RootFiles struct {\n\tRootFile RootFile `xml:\"rootfile\"`\n}\ntype RootFile struct {\n\tFullPath string `xml:\"full-path,attr\"`\n\tMediaType string `xml:\"media-type,attr\"`\n}\nfunc main() {\n\txmlData := `\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\">\n        <rootfiles>\n            <rootfile full-path=\"OEBPS/content.opf\" media-type=\"application/oebps-package+xml\"/>\n       </rootfiles>\n    </container>\n    `\n\tvar rootFile Container\n\terr := xml.Unmarshal([]byte(xmlData), &rootFile)\n\tif err != nil {\n\t\tfmt.Printf(\"Something went wrong: %v\", err)\n\t}\n\tfmt.Printf(\"RootFile->full-path %v\\nRootFile->media-type %v\\n\",\n\t\trootFile.RootFiles.RootFile.FullPath,\n\t\trootFile.RootFiles.RootFile.MediaType)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78594418/how-to-define-more-than-one-response-body-schema-in-openapi",
    "body": "openapi: '3.0.3'\ninfo:\n  title: API's\n  description: >-\n    REST API's for abc\n  contact:\n    name: ABC\n    email: ABC\n  version: \"1.0.0\"\nservers:\n  - url: \"http://localhost:8080\"\ntags:\n  - name: Employees\n    description: Get Employees info\npaths:\n  /Employees:\n    get:\n      description: Get Employees info as per additional condition\n      summary: Get EmployeeRoot Hdr.\n      tags:\n      - Employees\n      operationId: GetEmployeeRootHdr\n      security:\n        - basicAuth: []\n      parameters:\n      - name: EmpNbr  ## This query parameter can be removed if you go with the second endpoint defined below\n        in: query\n        description: Emp ID\n        required: true\n        schema:\n          type: string\n        examples:\n          Employee_ID:\n            value: '0123456789'\n      - name: DateofJoin  ## i would recommend making this query parameter, required: false\n        in: query\n        description: Input DateofJoin\n        required: true\n        schema:\n          type: string\n        examples:\n          DateofJoin:\n            value: '01012023'\n      - name: cond  ## if you go with the Employees Collection response for all requests, this query parameter is not necessary\n        in: query\n        description: additional check\n        required: true\n        schema:\n          type: string\n        examples:\n          Condition:\n            value: ''\n        allowEmptyValue: true\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                oneOf:\n                - $ref: '#/components/schemas/Employees' ## I would recommend not to use this schema.\n                - $ref: '#/components/schemas/Employeewithroot'\n        '400':\n          $ref: '#/components/responses/400'\n  '/Employees/{employee-id}':\n    get:\n      description: Get a single Employee's details.\n      summary: Get EmployeeRoot Hdr.\n      tags:\n      - Employees\n      operationId: GetEmployeeByID\n      security:\n        - basicAuth: []\n      parameters:\n      - name: employee-id\n        in: path\n        required: true\n        description: Employee Identifier\n        schema:\n          type: string\n        examples:\n          Employee_ID:\n            value: '0123456789'\n      - name: DateofJoin\n        in: query\n        description: Input DateofJoin\n        required: false\n        schema:\n          type: string\n        examples:\n          DateofJoin:\n            value: '01012023'\n      responses:\n        '200':\n          description: OK\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/Employeewithroot'\n        '400':\n          $ref: '#/components/responses/400'\n\ncomponents:\n  schemas:\n    Employeewithroot:\n      type: object\n      properties:\n        Employee:\n          type: array\n          items:\n            $ref: '#/components/schemas/Employees'\n          x-go-name: Employees\n    Employees:\n      type: object\n      properties:\n        EmpNbr:\n          $ref: '#/components/schemas/NullString'\n        DateofJoin:\n          $ref: '#/components/schemas/NullString'\n        DeptId:\n          $ref: '#/components/schemas/NullString'\n        DeptName:\n          $ref: '#/components/schemas/NullString'\n    NullString:\n      type: string\n      nullable: true\n      x-go-package: pkg/model\n    ProblemJson:\n      description: Problem Details for HTTP APIs - RFC9457\n      type: object\n      properties:\n        type:\n          type: string\n          format: uri-reference\n        status:\n          type: number\n        title:\n          type: string\n        detail:\n          type: string\n        instance:\n          type: string\n          format: uri-reference\n  responses:\n    '400':\n      description: Bad Request\n      content:\n        'application/problem+json':\n          schema:\n            $ref: \"#/components/schemas/ProblemJson\"\n        'application/json':\n          ## used if problem+json is not supported\n          schema: {}\n  securitySchemes:\n    basicAuth:\n      type: apiKey\n      name: Authorization\n      in: header"
  },
  {
    "url": "https://stackoverflow.com/questions/78577496/extend-grpc-gateway-generated-functions-with-custom-decode-logic-in-proto-messag",
    "body": "type Marshaler struct {\n\truntime.JSONPb\n}\nfunc (m *Marshaler) NewDecoder(r io.Reader) runtime.Decoder {\n\td := json.NewDecoder(r)\n\treturn Decoder{\n\t\tdecoder: &runtime.DecoderWrapper{\n\t\t\tDecoder:          d,\n\t\t\tUnmarshalOptions: m.UnmarshalOptions,\n\t\t},\n\t}\n}\ntype Decoder struct {\n\tdecoder *runtime.DecoderWrapper\n}\nfunc (d Decoder) Decode(v interface{}) error {\n\terr := d.decoder.Decode(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n    // Write your own custom logic here. In my case it's use TrimAll method\n\ttype Trimmable interface {\n\t\tTrimAll()\n\t}\n\tif v, ok := v.(Trimmable); ok {\n\t\tv.TrimAll()\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78452696/how-to-implement-data-loader-for-graphql-using-gqlgen-golang-and-mongodb",
    "body": "package category\nimport (\n\t\"context\"\n\ters \"errors\"\n\t\"graphql_search/models\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n)\nfunc (a *api) CategoryLoaderMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tconfig := CategoryLoaderConfig{\n\t\t\tWait:     2 * time.Millisecond,\n\t\t\tMaxBatch: 100,\n\t\t\tFetch: func(keys []string) ([]models.CategoryDB, []error) {\n\t\t\t\tlog.Println(\"Fetch Categories called for keys\", keys)\n\t\t\t\t// data we need to populate.\n\t\t\t\tcategories := make([]models.CategoryDB, len(keys))\n\t\t\t\terrors := make([]error, len(keys))\n\t\t\t\tkeysObjectIds := make([]primitive.ObjectID, len(keys))\n\t\t\t\tfor i, key := range keys {\n\t\t\t\t\tvar err error\n\t\t\t\t\tkeysObjectIds[i], err = primitive.ObjectIDFromHex(key)\n\t\t\t\t\terrors[i] = err\n\t\t\t\t}\n\t\t\t\t// do batch request here to mongodb\n\t\t\t\t// Prepare the filter to find documents by their IDs\n\t\t\t\tfilter := bson.M{\"_id\": bson.M{\"$in\": keysObjectIds}}\n\t\t\t\tcursor, err := a.Database.Collection(\"category\").Find(context.Background(), filter)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// Handle the error\n\t\t\t\t\tfor i := range errors {\n\t\t\t\t\t\terrors[i] = err\n\t\t\t\t\t}\n\t\t\t\t\treturn categories, errors\n\t\t\t\t}\n\t\t\t\tdefer cursor.Close(context.Background())\n\t\t\t\t// Iterate over the cursor and populate the categories slice\n\t\t\t\tvar categoriesGot []models.CategoryDB\n\t\t\t\terr = cursor.All(context.Background(), &categoriesGot)\n\t\t\t\tif err != nil {\n\t\t\t\t\t// Handle the error\n\t\t\t\t\tfor i := range errors {\n\t\t\t\t\t\terrors[i] = err\n\t\t\t\t\t}\n\t\t\t\t\treturn categories, errors\n\t\t\t\t}\n\t\t\t\tlog.Println(\"Categories got for given keys \", categoriesGot)\n\t\t\t\t// iterate categories got and return exact sequence of data we got in keys\n\t\t\t\tvar mp map[string]models.CategoryDB = make(map[string]models.CategoryDB)\n\t\t\t\tfor _, d := range categoriesGot {\n\t\t\t\t\tmp[d.ID.Hex()] = models.CategoryDB{\n\t\t\t\t\t\tID:   d.ID,\n\t\t\t\t\t\tName: d.Name,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// now iterate all keys and enter relevent information\n\t\t\t\tfor i, key := range keys {\n\t\t\t\t\tval, ok := mp[key]\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\terrors[i] = ers.New(\"An Error getting data from map.\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcategories[i] = val\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn categories, errors\n\t\t\t},\n\t\t}\n\t\tcategoryLoader := NewCategoryLoader(config)\n\t\t// add the categoryloader inside the context.\n\t\tctx := context.WithValue(r.Context(), a.CategoryLoaderKey, categoryLoader)\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\nfunc (a *api) GetCategoryLoader(ctx context.Context) *CategoryLoader {\n\treturn ctx.Value(a.CategoryLoaderKey).(*CategoryLoader)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78452696/how-to-implement-data-loader-for-graphql-using-gqlgen-golang-and-mongodb",
    "body": "func (a *api) Get(ctx context.Context, id string) (*models.Category, error) {\n\tloader := a.GetCategoryLoader(ctx)\n\tcb, err := loader.Load(id)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    // NOTE : COMMENTED CODE IS OLD CODE. THIS IS HOW I USED TO FETCH CATEGORY EACH TIME.\n    // I WASN'T USING BATCHED REQUEST TO DATABASE AND WAS CALLING REDUDUNT QUERIES.\n\t// ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t// defer cancel()\n\t// objectId, _ := primitive.ObjectIDFromHex(id)\n\t// result := a.Database.Collection(\"category\").FindOne(ctx, bson.M{\n\t// \t\"_id\": objectId,\n\t// })\n\t// var categoryDB models.CategoryDB\n\t// err = result.Decode(&categoryDB)\n\t// if err != nil {\n\t// \treturn nil, err\n\t// }\n\t// category := &models.Category{\n\t// \tID:   categoryDB.ID.Hex(),\n\t// \tName: categoryDB.Name,\n\t// }\n\tcategory := &models.Category{\n\t\tID:   cb.ID.Hex(),\n\t\tName: cb.Name,\n\t}\n\treturn category, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78328508/how-to-shutdown-go-server-that-running-in-docker-container-gracefully",
    "body": "ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGTERM)\nsrv := &http.Server{\n\tAddr:    port,\n\tHandler: mux,\n}\nvar wg sync.WaitGroup\nwg.Add(1)\ngo func() {\n\tdefer wg.Done()\n\tdefer stop() // if context did not get canceled, cancel it so we don't block below\n\terr := srv.ListenAndServe()\n\tlog.Printf(\"ListenAndServe() returned: %v\", err)\n}()\n<-ctx.Done()\nlog.Println(\"server will shutdown gracefully.\") // if ListenAndServe() already returned, this is a lie; consider rephrasing\nerr := srv.Shutdown(context.Background())\nwg.Wait() // ensure go-routine returns from log.Printf() before anything else happens\nreturn err"
  },
  {
    "url": "https://stackoverflow.com/questions/78297112/how-to-test-dynamic-metric-registration-in-custom-prometheus-exporter",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/collectors\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"github.com/prometheus/client_golang/prometheus/testutil\"\n)\nvar (\n\tendpoint = flag.String(\n\t\t\"endpoint\",\n\t\t\"0.0.0.0:8080\",\n\t\t\"The endpoint of the HTTP server\",\n\t)\n)\ntype TestCollector struct {\n\tsync.RWMutex\n\tvalues []string\n\tfoo    *prometheus.Desc\n}\nfunc NewTestCollector() *TestCollector {\n\treturn &TestCollector{\n\t\tfoo: prometheus.NewDesc(\n\t\t\t\"foo\",\n\t\t\t\"foo\",\n\t\t\t[]string{\n\t\t\t\t\"labels\",\n\t\t\t},\n\t\t\tnil,\n\t\t),\n\t}\n}\nfunc (c *TestCollector) Collect(ch chan<- prometheus.Metric) {\n\tc.RLock()\n\tdefer c.RUnlock()\n\tfor _, value := range c.values {\n\t\tch <- prometheus.MustNewConstMetric(\n\t\t\tc.foo,\n\t\t\tprometheus.CounterValue,\n\t\t\t1,\n\t\t\tvalue,\n\t\t)\n\t}\n}\nfunc (c *TestCollector) Describe(ch chan<- *prometheus.Desc) {\n\tch <- c.foo\n}\nfunc main() {\n\tflag.Parse()\n\tc := NewTestCollector()\n\tregistry := prometheus.NewRegistry()\n\tregistry.MustRegister(c)\n\tgo func() {\n\t\tfor i := range 20 {\n\t\t\tvalue := fmt.Sprintf(\"value-%02d\", i)\n\t\t\tslog.Info(\"Adding value\", \"value\", value)\n\t\t\tc.Lock()\n\t\t\tc.values = append(c.values, value)\n\t\t\tc.Unlock()\n\t\t\tslog.Info(\"testutil\",\n\t\t\t\t\"count\", testutil.CollectAndCount(c, \"foo\"))\n\t\t\ttime.Sleep(15 * time.Second)\n\t\t}\n\t}()\n\thttp.Handle(\n\t\t\"/metrics\",\n\t\tpromhttp.HandlerFor(\n\t\t\tregistry, promhttp.HandlerOpts{}))\n\tslog.Error(\"unable to listen\",\n\t\t\"err\", http.ListenAndServe(*endpoint, nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78297112/how-to-test-dynamic-metric-registration-in-custom-prometheus-exporter",
    "body": "2024/04/12 10:43:37 INFO Adding value value=value-00\n2024/04/12 10:43:37 INFO testutil count=1\n2024/04/12 10:43:52 INFO Adding value value=value-01\n2024/04/12 10:43:52 INFO testutil count=2\n2024/04/12 10:44:07 INFO Adding value value=value-02\n2024/04/12 10:44:07 INFO testutil count=3\n2024/04/12 10:44:22 INFO Adding value value=value-03\n2024/04/12 10:44:22 INFO testutil count=4\n2024/04/12 10:44:37 INFO Adding value value=value-04\n2024/04/12 10:44:37 INFO testutil count=5\n2024/04/12 10:44:52 INFO Adding value value=value-05"
  },
  {
    "url": "https://stackoverflow.com/questions/78229917/how-to-write-a-reusable-db-transaction-wrapper",
    "body": "// InTransaction is an adapter function to call InTransaction with an arbitrarily typed return pair.\nfunc InTransaction[T any](ds *Datastore, ctx context.Context, fn func(tx *sqlx.Tx) (T, error)) (T, error) {\n\t// this is the possibly empty typed value we want to return\n\tvar t T\n\t// this err is either the error produced by fn\n    // or the error produced by InTransaction itself, such as begin error, commit error, ...\n\terr := e.InTransaction(ctx, func(tx *sqlx.Tx) error {\n\t\tresult, err := fn(tx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// propagate the typed value from fn out of InTransaction\n\t\tt = result\n\t\treturn nil\n\t})\n\t// return t — possibly empty depending on what fn returned or whether it was called at all — and err\n\treturn t, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78153874/how-to-wait-for-in-process-operations-before-canceling-go-routine",
    "body": "// Your way, modified:\nfunc main() {\n\tfmt.Println(\"Main Start\")\n\tsigchan := make(chan os.Signal, 1)\n\tsignal.Notify(sigchan, syscall.SIGINT, syscall.SIGTERM)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tgo func() {\n\t\t<-sigchan\n\t\tfmt.Println(\"Received signal to shutdown\")\n\t\tcancel()\n\t}()\n\t// Block until it exists, cancel in the background\n\tconsumer := &Consumer{}\n\tconsumer.Start(ctx)\n}\n// Allowing signal.NotifyContext to deal with it\nfunc main() {\n    fmt.Println(\"Main Start\")\n    ctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n    defer cancel()\n    consumer := &Consumer{}\n    consumer.Start(ctx)\n    fmt.Println(\"Shutting down\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78131187/how-to-use-the-reply-parameter-in-the-grpc-unaryclientinterceptor",
    "body": "grpc.WithUnaryInterceptor(func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\t// some interceptor logic\n    // ...\n    // then you must call invoker\n\terr := invoker(ctx, method, req, reply, cc, opts...)\n\tif err != nil {\n\t\t// handle error\n\t}\n\t// finally you can inspect reply before returning\n    switch method {\n    case \"/foo.MyService/GetFoo\":\n        fooResp := reply.(*FooResponse)\n        // access fields to do whatever you want\n    // other switch cases as needed\n    }\n    return nil\n}),"
  },
  {
    "url": "https://stackoverflow.com/questions/77921278/how-do-i-convert-from-an-ecdsa-publickey-to-crypto-ecdh-ecdh-publickey",
    "body": "package main\nimport (\n\t\"crypto/ecdsa\"\n\t\"crypto/elliptic\"\n\t\"crypto/rand\"\n\t\"crypto/x509\"\n\t\"fmt\"\n\t\"log\"\n)\nfunc main() {\n\tk1PrivateDER, k2PublicDER := mustGenerateKeyPair()\n\tprivateKey, err := x509.ParsePKCS8PrivateKey(k1PrivateDER)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse private key: %v\", err)\n\t}\n\tecdsaPrivateKey, ok := privateKey.(*ecdsa.PrivateKey)\n\tif !ok {\n\t\tlog.Fatalf(\"Private key is not an ECDSA key.\")\n\t}\n\tecdhPrivateKey, err := ecdsaPrivateKey.ECDH()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to convert to ECDH key: %v\", err)\n\t}\n\tpublicKey, err := x509.ParsePKIXPublicKey(k2PublicDER)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse public key: %v\", err)\n\t}\n\tecdsaPublicKey, ok := publicKey.(*ecdsa.PublicKey)\n\tif !ok {\n\t\tlog.Fatalf(\"Public key is not an ECDSA key.\")\n\t}\n\tecdhPublicKey, err := ecdsaPublicKey.ECDH()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to convert to ECDH key: %v\", err)\n\t}\n\tsecret, err := ecdhPrivateKey.ECDH(ecdhPublicKey)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to compute ECDH shared secret: %v\", err)\n\t}\n\tfmt.Printf(\"secret = %x\\n\", secret)\n}\nfunc mustGenerateKeyPair() (k1PrivateDER, k2PublicDER []byte) {\n\tk1, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tk1PrivateDER, err = x509.MarshalPKCS8PrivateKey(k1)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tk2, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tk2PublicDER, err = x509.MarshalPKIXPublicKey(k2.Public())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn k1PrivateDER, k2PublicDER\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77824746/how-to-extract-the-zerolog-event-fields-in-the-hook",
    "body": "package zeroappinsights\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/microsoft/ApplicationInsights-Go/appinsights\"\n\t\"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts\"\n\t\"github.com/rs/zerolog\"\n\t\"github.com/rs/zerolog/log\"\n\t\"github.com/org/package/constants\"\n\t\"github.com/org/package/models\"\n)\nvar levelMap = map[zerolog.Level]contracts.SeverityLevel{\n\tzerolog.ErrorLevel: contracts.Error,\n\tzerolog.InfoLevel:  contracts.Information,\n\tzerolog.DebugLevel: contracts.Verbose,\n\tzerolog.FatalLevel: contracts.Critical,\n\tzerolog.WarnLevel:  contracts.Warning,\n}\nvar appInsightsProperties = []string{\n\tcontracts.OperationId,\n\tcontracts.OperationParentId,\n\tcontracts.UserId,\n\tcontracts.SessionId,\n}\n// ApplicationInsightsHook is a Zerolog hook that sends log entries to Application Insights\ntype ApplicationInsightsHook struct {\n\tclient appinsights.TelemetryClient\n}\n// NewApplicationInsightsHook creates a new ApplicationInsightsHook\nfunc NewApplicationInsightsHook(instrumentationKey string) *ApplicationInsightsHook {\n\tclient := appinsights.NewTelemetryClient(instrumentationKey)\n\treturn &ApplicationInsightsHook{client: client}\n}\n// Fire is called when a log event is fired.\nfunc (hook *ApplicationInsightsHook) Fire(e *zerolog.Event) error {\n\tseverity, ok := levelMap[e.Level()]\n\tif !ok {\n\t\tseverity = contracts.Verbose\n\t}\n\ttelemetry := appinsights.NewTraceTelemetry(e.Message().String(), severity)\n\t// Add custom properties\n\te.Fields(func(key string, value interface{}) {\n\t\ttelemetry.Properties[key] = fmt.Sprintf(\"%v\", value)\n\t})\n\t// Add predefined properties\n\tfor _, prop := range appInsightsProperties {\n\t\tif value, ok := e.Context[prop].(string); ok {\n\t\t\ttelemetry.Properties[prop] = value\n\t\t}\n\t}\n\thook.client.Track(telemetry)\n\treturn nil\n}\n// Levels returns the log levels to enable for this hook.\nfunc (hook *ApplicationInsightsHook) Levels() []zerolog.Level {\n\treturn []zerolog.Level{\n\t\tzerolog.PanicLevel,\n\t\tzerolog.FatalLevel,\n\t\tzerolog.ErrorLevel,\n\t\tzerolog.WarnLevel,\n\t\tzerolog.InfoLevel,\n\t\tzerolog.DebugLevel,\n\t}\n}\n// SetLogger sets the logger for the hook.\nfunc (hook *ApplicationInsightsHook) SetLogger(logger *zerolog.Logger) {\n\t*logger = logger.Hook(hook)\n}\n// Usage:\nfunc main() {\n\t// Initialize the Application Insights hook\n\taiHook := NewApplicationInsightsHook(\"your-instrumentation-key\")\n\t// Create a Zerolog logger and set the hook\n\tlogger := zerolog.New(os.Stdout).With().Timestamp().Logger()\n\taiHook.SetLogger(&logger)\n\t// Use the logger as usual\n\tlogger.Info().Str(\"customField\", \"customValue\").Msg(\"Log message\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77814196/golang-org-x-oauth2-oauth2-config-endpoint-tokenurl-mock-missing-access-token",
    "body": "func MockOAuth2Server() *http.Server {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/auth\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Always redirect to the callback URL with a fixed code\n\t\thttp.Redirect(w, r, r.URL.Query().Get(\"redirect_uri\")+\"?code=mockcode\"+\"&state=\"+r.URL.Query().Get(\"state\"), http.StatusFound)\n\t})\n\tmux.HandleFunc(\"/token\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Set the content type to JSON\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tidToken, err := generateMockIDToken()\n\t\tif err != nil {\n\t\t\tslog.Error(\"Error generating mock id token\", \"error\", err.Error())\n\t\t}\n\t\tw.Write([]byte(`{\"access_token\": \"mocktoken\", \"id_token\": \"` + idToken + `\", \"token_type\": \"bearer\"}`))\n\t})\n\tmux.HandleFunc(\"/introspect\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Always return that the token is active\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.Write([]byte(`{\"active\": true}`))\n\t})\n\treturn &http.Server{\n\t\tAddr:    \"localhost:9999\",\n\t\tHandler: mux,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77745306/how-do-i-overwrite-the-default-404-not-found-handler",
    "body": "package main\nimport (\n        \"log\"\n        \"net/http\"\n)\nfunc main() {\n        api := http.NewServeMux()\n        api.HandleFunc(\"/test\", func(w http.ResponseWriter, r *http.Request) {\n                w.WriteHeader(http.StatusOK)\n        })\n        // other routes go here\n        // catch all\n        api.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                w.WriteHeader(http.StatusNotFound)\n                w.Write([]byte(\"error message goes here\"))\n        })\n        err := http.ListenAndServe(\":8080\", api)\n        log.Fatal(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77706347/golang-xml-key-name-conflicts",
    "body": "master := ValueDict{\n    KeysValues: []KeyValue{\n        {\n            Key: \"Color\",\n            Value: ValueData{\n                Data: \"BAtzdHJlYW10eXBlZIHoA4QBQISEhAdOU0NvbG9yAISECE5TT2JqZWN0AIWEAWMChARmZmZmg7oehT2DZmYmP4NmZiY/AYY=\",\n            },\n        },\n        {\n            Key: \"Curve\",\n            Value: ValueDict{\n                KeysValues: []KeyValue{\n                    {\n                        Key: \"Interpolation\",\n                        Value: ValueInteger{\n                            Integer: 5,\n                        },\n                    },\n                    {\n                        Key: \"Points\",\n                        Value: ValueStringArray{\n                            Array: []string{\n                                \"{0, 0}\",\n                                \"{0.05, 0.053871}\",\n                                \"{0.1, 0.110555}\",\n                                \"{0.15, 0.166793}\",\n                                \"{0.2, 0.216919}\",\n                                \"{0.3, 0.327703}\",\n                                \"{0.4, 0.440897}\",\n                                \"{0.5, 0.539322}\",\n                                \"{0.6, 0.657477}\",\n                                \"{0.7, 0.763339}\",\n                                \"{0.75, 0.814082}\",\n                                \"{0.8, 0.861097}\",\n                                \"{0.85, 0.904147}\",\n                                \"{0.9, 0.944079}\",\n                                \"{0.95, 0.974036}\",\n                                \"{0.98, 0.990085}\",\n                                \"{1, 1}\",\n                            },\n                        },\n                    },\n                },\n            },\n        },\n        {\n            Key: \"Line Width\",\n            Value: ValueReal{\n                Real: 0.0040000001899898052,\n            },\n        },\n        {\n            Key: \"Points Diameter\",\n            Value: ValueReal{\n                Real: 0.014999999664723873,\n            },\n        },\n        {\n            Key: \"Precision\",\n            Value: ValueReal{\n                Real: 9.9999997473787516e-05,\n            },\n        },\n    },\n}\noutput, err := xml.MarshalIndent(master, \"  \", \"    \")\nif err != nil {\n    fmt.Printf(\"error: %v\\n\", err)\n}\nos.Stdout.Write(output)"
  },
  {
    "url": "https://stackoverflow.com/questions/77701565/unmarshal-xml-with-some-unknown-tags-in-golang",
    "body": "type xmlResponse struct {\n\tFields []byte `xml:\",innerxml\"`\n}\nfunc isXMLStringValid(str string) bool {\n\t// ref https://stackoverflow.com/a/62869933\n\tdecoder := xml.NewDecoder(strings.NewReader(str))\n\tfor {\n\t\terr := decoder.Decode(new(interface{}))\n\t\tif err != nil {\n\t\t\treturn err == io.EOF\n\t\t}\n\t}\n}\nfunc parseRawXMLString(xmlStr string) (*xmlResponse, error) {\n  if !isXMLStringValid(xmlStr) {\n\t\treturn nil, errors.New(fmt.Sprintf(\"xml: construct: input is not valid xml: %s\", xmlStr))\n\t}\n  var xmlResp = xmlResponse{}\n  err := xml.Unmarshal([]byte(xmlStr), &xmlResp)\n  if err != nil {\n\t\tlog.Printf(\"xml: unmarshal: %s\", err)\n\t\treturn nil, err\n  }\n  return &xmlResp, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77602439/how-can-i-check-go-mod-hash-from-sum-golang-org-with-python",
    "body": "import hashlib\nimport base64\ndef calculate_sha256_checksum(data):\n    sha256_hash = hashlib.sha256()\n    sha256_hash.update(data.encode('utf-8'))\n    return sha256_hash.digest()\n# Specify the file path\nfile_path = 'go.mod'\n# Read the file content\nwith open(file_path, 'r') as file:\n    file_content = file.read()\n# Calculate the SHA256 checksum of the file content\nchecksum1 = calculate_sha256_checksum(file_content)\n# Format the checksum followed by two spaces, filename, and a new line\nformatted_string = f'{checksum1.hex()}  {file_path}\\n'\n# Calculate the SHA256 checksum of the formatted string\nchecksum2 = calculate_sha256_checksum(formatted_string)\n# Convert the checksum to base64\nbase64_checksum = base64.b64encode(checksum2).decode('utf-8')\nprint(base64_checksum)"
  },
  {
    "url": "https://stackoverflow.com/questions/77388159/how-can-i-define-a-lua-function-with-gopher-lua-that-has-a-pre-defined-table-as",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/yuin/gopher-lua\"\n)\ntype Person struct {\n\tName       string\n\tGivenName  string\n\tStreet     string\n\tPostalCode string\n\tCity       string\n}\nfunc main() {\n\tp := &Person{\n\t\tName:       \"Mustermann\",\n\t\tGivenName:  \"Max\",\n\t\tStreet:     \"Sackgasse 19\",\n\t\tPostalCode: \"36304\",\n\t\tCity:       \"Alsfeld\",\n\t}\n\tL := lua.NewState()\n\tdefer L.Close()\n\tif err := L.DoFile(\"sample.lua\"); err != nil {\n\t\tpanic(err)\n\t}\n\tt := L.NewTable()\n\tt.RawSetString(\"name\", lua.LString(p.Name))\n\tt.RawSetString(\"given_name\", lua.LString(p.GivenName))\n\tt.RawSetString(\"street\", lua.LString(p.Street))\n\tt.RawSetString(\"postal_code\", lua.LString(p.PostalCode))\n\tt.RawSetString(\"city\", lua.LString(p.City))\n\tif err := L.CallByParam(lua.P{\n\t\tFn:      L.GetGlobal(\"call_me\"),\n\t\tNRet:    1,\n\t\tProtect: true,\n\t}, t); err != nil {\n\t\tpanic(err)\n\t}\n\tret := L.Get(-1) // returned value\n\tL.Pop(1)         // remove received value\n\tfmt.Println(\"The result of the Lua function is:\", ret)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77318372/edit-session-data-of-another-client-with-gin-contrib",
    "body": "type Store interface {\n\t// Get should return a cached session.\n\tGet(r *http.Request, name string) (*Session, error)\n\t// New should create and return a new session.\n\t//\n\t// Note that New should never return a nil session, even in the case of\n\t// an error if using the Registry infrastructure to cache the session.\n\tNew(r *http.Request, name string) (*Session, error)\n\t// Save should persist session to the underlying store implementation.\n\tSave(r *http.Request, w http.ResponseWriter, s *Session) error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77276609/converting-aws-redshiftdataapiservice-getstatementresultoutput-to-json-or-struct",
    "body": "// Extracts the column name from column metadata for a given column index\nfunc getColumnName(metadata []types.ColumnMetadata, index int) string {\n\tif index < len(metadata) {\n\t\t// We assume the metadata is in the same order as the columns in the record.\n\t\t// If the column name is not set or empty, we can fallback to a default naming convention.\n\t\tif metadata[index].Name != nil {\n\t\t\treturn *metadata[index].Name\n\t\t}\n\t\treturn fmt.Sprintf(\"column_%d\", index)\n\t}\n\t// Fallback if the index is out of range of the metadata slice.\n\treturn fmt.Sprintf(\"unknown_column_%d\", index)\n}\n// Converts query results to JSON bytes for easy unmarshaling to structs\nfunc queryResultsToJSON(query_results *redshiftdata.GetStatementResultOutput) ([]byte, error) {\n\t// Convert the records to a slice of maps for JSON conversion\n\tvar records []map[string]interface{}\n\tfor _, row := range query_results.Records {\n\t\trecord := make(map[string]interface{})\n\t\tfor idx, col := range row {\n\t\t\t// Use the column metadata to determine the name of the column\n\t\t\tcolumnName := getColumnName(query_results.ColumnMetadata, idx)\n\t\t\t// Check the type of the value and assign it to the record map\n\t\t\tvar value interface{}\n\t\t\tswitch v := col.(type) {\n\t\t\tcase *types.FieldMemberBlobValue:\n\t\t\t\tvalue = v.Value\n\t\t\tcase *types.FieldMemberBooleanValue:\n\t\t\t\tvalue = v.Value\n\t\t\tcase *types.FieldMemberDoubleValue:\n\t\t\t\tvalue = v.Value\n\t\t\tcase *types.FieldMemberIsNull:\n\t\t\t\tvalue = nil\n\t\t\tcase *types.FieldMemberLongValue:\n\t\t\t\tvalue = v.Value\n\t\t\tcase *types.FieldMemberStringValue:\n\t\t\t\tvalue = v.Value\n\t\t\t}\n\t\t\trecord[columnName] = value\n\t\t}\n\t\trecords = append(records, record)\n\t}\n\t// Marshal the records to JSON\n\tjsonBytes, err := json.Marshal(records)\n\tif err != nil {\n\t\tlog.Error(\"failed to marshal records to JSON, \" + err.Error())\n\t\treturn nil, err\n\t}\n\treturn jsonBytes, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77183694/go-split-a-string-of-key-value-pairs-separated-by-commas-with-potential-embedd",
    "body": "package kvparse\nimport (\n\t\"regexp\"\n\t\"testing\"\n\t\"reflect\"\n)\nvar kvPairRe = regexp.MustCompile(`(.*?)=([^=]*)(?:,|$)`)\nfunc ParseKV(kvStr string) map[string]string {\n\tres := map[string]string{}\n\tfor _, kv := range kvPairRe.FindAllStringSubmatch(kvStr, -1) {\n\t\tres[kv[1]] = kv[2]\n\t}\n\treturn res\n}\nfunc TestParseKV(t *testing.T) {\n\ttest := func(kvStr string, expectedMap map[string]string) {\n\t\tgotMap := ParseKV(kvStr)\n\t\tif !reflect.DeepEqual(expectedMap, gotMap) {\n\t\t\tt.Errorf(\"Abs(%s) = %v; want %v\", kvStr, gotMap, expectedMap)\n\t\t}\n\t}\n    test(\"keyword1=value1,keyword2=value2,keyword3=value3,value4,value5,keyword4=value6\",\n    \tmap[string]string{ \"keyword1\": \"value1\", \"keyword2\": \"value2\", \"keyword3\": \"value3,value4,value5\", \"keyword4\": \"value6\" })\n    test(\"keyword1=value1,keyword2=value2,keyword3=value3,value4,value5:value6,value7,value8,keyword4=value9\",\n    \tmap[string]string{ \"keyword1\": \"value1\", \"keyword2\": \"value2\", \"keyword3\": \"value3,value4,value5:value6,value7,value8\", \"keyword4\": \"value9\" })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76904485/how-to-set-a-timeout-for-a-bufio-scanner-that-scans-in-a-loop",
    "body": "// code that start the process...\nscanner := bufio.NewScanner(stdout)\ngo func() {\n    <-processFinishChan: // send to this channel to terminate the process\n    log.Println(\"Killing Process\")\n    err := cmdObject.Process.Kill()\n    if err != nil {\n        log.Printf(\"Error Killing: %v\", err)\n    }\n    cmdObject.Wait()\n} ()\nfor {\n    // default case, read the output of process and send to user.\n    if !scanner.Scan() && scanner.Err() == nil {\n        // reach EOF\n        return\n    }\n    m := scanner.Bytes()\n    WSOutChanHolder.mu.Lock()\n    for _, ch := range WSOutChanHolder.data {\n        ch <- m\n    }\n    WSOutChanHolder.mu.Unlock()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76871293/rc2-decryption-from-wincrypt-api-to-go",
    "body": "import (\n\t\"crypto/cipher\"\n\t\"crypto/md5\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"github.com/dgryski/go-rc2\"\n\t\"github.com/zenazn/pkcs7pad\"\n)\nfunc main() {\n\tciphertext, _ := hex.DecodeString(\"596914c6020c9dbfc193e9e588a380730add8e1a69a4994ec57362dd1ad1d37a00932a64a385af6d8c5234b0c36d50c4\")\n\tiv, _ := hex.DecodeString(\"0000000000000000\")\n\tkey := \"some test key\"\n\thash := md5.Sum([]byte(key))\n\tfinalKey := make([]byte, 16)\n\tcopy(finalKey[:], hash[:5])\n\tfmt.Println(hex.EncodeToString(finalKey)) // 9bf00ebbb40000000000000000000000\n\tplaintextPadded := make([]byte, len(ciphertext))\n\talg, _ := rc2.New(finalKey, 40)\n\tmode := cipher.NewCBCDecrypter(alg, iv)\n\tmode.CryptBlocks(plaintextPadded, ciphertext)\n\tplaintext, _ := pkcs7pad.Unpad(plaintextPadded)\n\tfmt.Println(hex.EncodeToString(plaintext)) // 54686520717569636b2062726f776e20666f78206a756d7073206f76657220746865206c617a7920646f67\n\tfmt.Println(string(plaintext))             // The quick brown fox jumps over the lazy dog\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76871293/rc2-decryption-from-wincrypt-api-to-go",
    "body": "...\nconst char* pwd = \"some test key\";\nCryptHashData(hHash, reinterpret_cast<const BYTE*>(pwd), strlen(pwd), 0);\n...\nunsigned char cipher[] = { 0x59, 0x69, 0x14, 0xc6, 0x02, 0x0c, 0x9d, 0xbf, 0xc1, 0x93, 0xe9, 0xe5, 0x88, 0xa3, 0x80, 0x73, 0x0a, 0xdd, 0x8e, 0x1a, 0x69, 0xa4, 0x99, 0x4e, 0xc5, 0x73, 0x62, 0xdd, 0x1a, 0xd1, 0xd3, 0x7a, 0x00, 0x93, 0x2a, 0x64, 0xa3, 0x85, 0xaf, 0x6d, 0x8c, 0x52, 0x34, 0xb0, 0xc3, 0x6d, 0x50, 0xc4 };\nDWORD len = sizeof(cipher);\nCryptDecrypt(hKey, 0, TRUE, 0, cipher, &len);\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/76847713/golang-html-template-how-do-i-create-a-nav-item-submenu-i-couldnt-find-h",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype MenuItem struct {\n\tgorm.Model\n\tTitle    string\n\tParentID int\n\tURL      string\n\tSubMenu  []MenuItem `gorm:\"-\"`\n}\nvar db *gorm.DB\nfunc main() {\n\tapp := fiber.New()\n\tvar err error\n\tdb, err = gorm.Open(sqlite.Open(\"menu.db\"), &gorm.Config{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdb.AutoMigrate(&MenuItem{})\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\tmenuItems := []MenuItem{}\n\t\tdb.Where(\"parent_id = ?\", 0).Find(&menuItems)\n\t\tfor i := range menuItems {\n\t\t\tsubMenuItems := []MenuItem{}\n\t\t\tdb.Where(\"parent_id = ?\", menuItems[i].ID).Find(&subMenuItems)\n\t\t\tmenuItems[i].SubMenu = subMenuItems\n\t\t}\n\t\treturn c.Render(\"index\", fiber.Map{\"MenuItems\": menuItems})\n\t})\n\tapp.Static(\"/static\", \"./static\")\n\tapp.Listen(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76794212/how-do-i-parse-in-go-the-returned-jwt-token-from-google-oauth-2-0",
    "body": "func writeGoogleFile(file string) string {\n  // https://developers.google.com/identity/gsi/web/guides/verify-google-id-token\n  // cache-control: public, max-age=18702, must-revalidate, no-transform\n  jsonString, code := network.GetTo(\"https://www.googleapis.com/oauth2/v3/certs\", \"\")\n  if code == 200 {\n    ioutil.WriteFile(file, []byte(jsonString), 0644)\n    return jsonString\n  }\n  return \"\"\n}\nfunc getGoogleCerts() string {\n  file := \"/certs/google_jwt_oauth.json\"\n  fileInfo, err := os.Stat(file)\n  if err != nil {\n    return writeGoogleFile(file)\n  }\n  lastModified := fileInfo.ModTime().Unix()\n  if time.Now().Unix()-lastModified > 86400 {\n    return writeGoogleFile(file)\n  }\n  b, _ := ioutil.ReadFile(file)\n  return string(b)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76740047/go-generics-return-slice-of-underlying-type-as-t",
    "body": "func inverseSeparator[T comparable](separator []T) ([]T, error) {\n    switch separator[0].(type) {\n    case int:\n        var result []T\n        for _, val := range separator {\n            // Perform bit flip\n            // Make sure T is a valid numeric type (int, uint, etc.) before flipping bits\n            if n, ok := val.(int); ok {\n                // Perform bit flipping for integers\n                flipped := ^n\n                result = append(result, T(flipped).(T))\n            } else {\n                // Return an error if the type is not supported for bit flipping\n                return nil, fmt.Errorf(\"unsupported type for bit flipping: %T\", val)\n            }\n        }\n        return result, nil\n    // Handle other cases for different types, if needed.\n    default:\n        return nil, fmt.Errorf(\"unsupported type for inverseSeparator: %T\", separator[0])\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76719177/in-gorm-how-can-i-use-preload-and-distinct-together",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n)\ntype Notification struct {\n\tID               uint64              `gorm:\"primaryKey;autoIncrement:true\" json:\"-\"`\n\tSerialNumber     string              `json:\"CraneSerialNumber,omitempty\"`\n\tTs               time.Time           `json:\"Ts,omitempty\"`\n\tNotificationKeys []*NotificationKeys `json:\"Notificationkeys,omitempty\"`\n}\ntype NotificationKeys struct {\n\tID             uint64 `gorm:\"primaryKey;autoIncrement:true\" json:\"-\"`\n\tKey            string `json:\"Key,omitempty\"`\n\tValue          string `json:\"Value,omitempty\"`\n\tNotificationId uint64\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Notification{}, &NotificationKeys{})\n\t// seed some dummy data\n\tdb.Create(&Notification{ID: 1, SerialNumber: \"001\", Ts: time.Date(2023, 7, 1, 10, 30, 0, 0, time.UTC)})\n\tdb.Create(&Notification{ID: 2, SerialNumber: \"001\", Ts: time.Date(2023, 7, 1, 10, 30, 0, 0, time.UTC)})\n\tdb.Create(&Notification{ID: 3, SerialNumber: \"003\", Ts: time.Date(2023, 7, 1, 10, 35, 0, 0, time.UTC)})\n\tdb.Create(&NotificationKeys{Key: \"a\", Value: \"1\", NotificationId: 1})\n\tdb.Create(&NotificationKeys{Key: \"b\", Value: \"1\", NotificationId: 2})\n\tdb.Create(&NotificationKeys{Key: \"c\", Value: \"1\", NotificationId: 3})\n\t// get logic\n\tvar notifications []Notification\n\terr = db.Debug().\n\t\tModel(&Notification{}).\n\t\tPreload(clause.Associations).\n\t\tWhere(\"id in (?)\", db.Debug().Model(&Notification{}).Group(\"serial_number,ts\").Select(\"min(id) as id\").Limit(2)). // subquery\n\t\tOrder(\"ts desc\").\n\t\tFind(&notifications).Error\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range notifications {\n\t\tfmt.Println(v)\n\t\tfor _, vv := range v.NotificationKeys {\n\t\t\tfmt.Println(*vv)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76682058/protobuf-fieldmask-unmarshalling-in-go",
    "body": "1\tfunc (d decoder) unmarshalFieldMask(m protoreflect.Message) error {\n 2\t\ttok, err := d.Read()\n 3\t\tif err != nil {\n 4\t\t\treturn err\n 5\t\t}\n 6\t\tif tok.Kind() != json.String {\n 7\t\t\treturn d.unexpectedTokenError(tok)\n 8\t\t}\n 9\t\tstr := strings.TrimSpace(tok.ParsedString())\n10\t\tif str == \"\" {\n11\t\t\treturn nil\n12\t\t}\n13\t\tpaths := strings.Split(str, \",\")\n14\n15\t\tfd := m.Descriptor().Fields().ByNumber(genid.FieldMask_Paths_field_number)\n16\t\tlist := m.Mutable(fd).List()\n17\n18\t\tfor _, s0 := range paths {\n19\t\t\ts := strs.JSONSnakeCase(s0)\n20\t\t\tif strings.Contains(s0, \"_\") || !protoreflect.FullName(s).IsValid() {\n21\t\t\t\treturn d.newError(tok.Pos(), \"%v contains invalid path: %q\", genid.FieldMask_Paths_field_fullname, s0)\n22\t\t\t}\n23\t\t\tlist.Append(protoreflect.ValueOfString(s))\n24\t\t}\n25\t\treturn nil\n26\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76674710/unmarshal-xml-with-variable-child-types-while-preserving-order-of-children",
    "body": "type Instruction struct {\n\tname string\n\tarray *Array\n\tfield *Field\n}\ntype Array struct {\n\tname, type_ string\n}\ntype Field struct {\n\tname, type_ string\n\toptional    bool\n}\nfunc (it *Instruction) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tit.name = start.Name.Local\n\tswitch it.name {\n\tcase \"array\":\n\t\tit.array = &Array{}\n\t\tfor _, attr := range start.Attr {\n\t\t\tvalue := attr.Value\n\t\t\tswitch attr.Name.Local {\n\t\t\tcase \"name\":\n\t\t\t\tit.array.name = value\n\t\t\tcase \"type\":\n\t\t\t\tit.array.type_ = value\n\t\t\t}\n\t\t}\n\tcase \"field\":\n\t\tit.field = &Field{}\n\t\tfor _, attr := range start.Attr {\n\t\t\tvalue := attr.Value\n\t\t\tswitch attr.Name.Local {\n\t\t\tcase \"name\":\n\t\t\t\tit.field.name = value\n\t\t\tcase \"type\":\n\t\t\t\tit.field.type_ = value\n\t\t\tcase \"optional\":\n\t\t\t\tvb, _ := strconv.ParseBool(value)\n\t\t\t\tit.field.optional = vb\n\t\t\t}\n\t\t}\n\t}\n\treturn d.Skip()\n}\nfunc (it Instruction) String() (s string) {\n\tswitch it.name {\n\tcase \"array\":\n\t\ts = fmt.Sprintf(\"{array: {name:%s type:%s}}\", it.array.name, it.array.type_)\n\tcase \"break\":\n\t\ts = \"{break: {}}\"\n\tcase \"field\":\n\t\ts = fmt.Sprintf(\"{field: {name:%s type:%s optional:%t}}\", it.field.name, it.field.type_, it.field.optional)\n\t}\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76674710/unmarshal-xml-with-variable-child-types-while-preserving-order-of-children",
    "body": "func (p *Packet) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tfor _, attr := range start.Attr {\n\t\tswitch attr.Name.Local {\n\t\tcase \"family\":\n\t\t\tp.Family = attr.Value\n\t\tcase \"action\":\n\t\t\tp.Action = attr.Value\n\t\t}\n\t}\n\tfor {\n\t\tt, err := d.Token()\n\t\tif atEOF(err) {\n\t\t\tbreak\n\t\t}\n\t\tif ee, ok := t.(xml.EndElement); ok {\n\t\t\tif ee.Name.Local == start.Name.Local {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tse, ok := t.(xml.StartElement)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tif se.Name.Local == \"comment\" {\n\t\t\tvar s string\n\t\t\tmust(d.DecodeElement(&s, &se))\n\t\t\tp.Comment = s\n\t\t\tcontinue\n\t\t}\n\t\tvar dst any\n\t\tswitch se.Name.Local {\n\t\tdefault:\n\t\t\tcontinue\n\t\tcase \"array\":\n\t\t\tdst = new(Array)\n\t\tcase \"break\":\n\t\t\tdst = new(Break)\n\t\tcase \"field\":\n\t\t\tdst = new(Field)\n\t\t}\n\t\tmust(d.DecodeElement(dst, &se))\n\t\tp.Instructions = append(p.Instructions, dst)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76661477/json-to-xml-in-go-lang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"fmt\"\n)\ntype Address struct {\n\tAddress1 string `json:\"Address1\"`\n\tAddress2 string `json:\"Address2\"`\n\tCity     string `json:\"city\"`\n\tState    string `json:\"state\"`\n\tZip5     string `json:\"zipcode\"`\n\tZip4     string `json:\"Zip4\"`\n}\ntype AddressValidateRequest struct {\n\tName string  `xml:\"AddressValidateRequest\"`\n\tUserID  string  `xml:\"USERID,attr\"`\n\tAddress Address `xml:\"Address\"`\n}\nfunc main() {\n\tjsonData := `{\n\t\t\"Address1\": \"777 Brockton Avenue\",\n  \t\t\"Address2\": \"string\",\n  \t\t\"city\": \"Abington\",\n  \t\t\"state\": \"MA\",\n  \t\t\"zipcode\": \"2351\"\n\t}`\n\tvar person Address\n\terr := json.Unmarshal([]byte(jsonData), &person)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq := AddressValidateRequest{\n\t\tUserID:  \"702DIGIT2741\",\n\t\tAddress: person,\n\t}\n\txmlData, err := xml.MarshalIndent(req, \"\", \" \")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%s%s \\n\", xml.Header, string(xmlData))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76587323/match-any-string-also-containing-escaped-characters-and-newlines-with-go",
    "body": "import \"bufio\"\nvar stringLiterals bufio.SplitFunc = func(data []byte, atEOF bool) (advance int, token []byte, err error) {\n\tscanning := false\n\tvar delim byte\n\tvar i int\n\tvar start, end int\n\tfor i < len(data) {\n\t\tb := data[i]\n\t\tswitch b {\n\t\tcase '\\\\': // skip escape sequences\n\t\t\ti += 2\n\t\t\tcontinue\n\t\tcase '\"':\n\t\t\tfallthrough\n\t\tcase '\\'':\n\t\t\tfallthrough\n\t\tcase '`':\n\t\t\tif scanning && delim == b {\n\t\t\t\tend = i + 1\n\t\t\t\ttoken = data[start:end]\n\t\t\t\tadvance = end\n\t\t\t\treturn\n\t\t\t} else if !scanning {\n\t\t\t\tscanning = true\n\t\t\t\tstart = i\n\t\t\t\tdelim = b\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\tif atEOF {\n\t\treturn len(data), nil, nil\n\t}\n\treturn start, nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76579937/subtraction-aggregate-mongo-document-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nfunc main() {\n\tjsonInput := []map[string]interface{}{\n\t\t{\n\t\t\t\"$match\": map[string]interface{}{\n\t\t\t\t\"test_value\": 10,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"$set\": map[string]interface{}{\n\t\t\t\t\"test_value\": map[string]interface{}{\n\t\t\t\t\t\"$subtract\": []interface{}{\"test_value\", 1},\n\t\t\t\t\t// `test_value` should be prefixed with $ like this:\n\t\t\t\t\t// \"$subtract\": []interface{}{\"$test_value\", 1},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\ttyp, buf, err := bson.MarshalValue(jsonInput)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(typ)\n\tvar bsonD bson.A\n\tif err := bson.UnmarshalValue(typ, buf, &bsonD); err != nil {\n\t\tpanic(err)\n\t}\n\tclient, err := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcollection := client.Database(\"demo\").Collection(\"values\")\n\tcur, err := collection.Aggregate(context.Background(), bsonD)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cur.Close(context.Background())\n\tfor cur.Next(context.Background()) {\n\t\tfmt.Printf(\"%+v\", cur.Current)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76561263/appending-a-childnode-using-goldmark-in-golang-is-causing-a-stack-over-flow",
    "body": "// for recording the added nodes\nadded := make(map[*ast.List]bool)\nast.Walk(doc, func(n ast.Node, entering bool) (ast.WalkStatus, error) {\n\tif entering {\n\t\tif n.Kind() == ast.KindList {\n\t\t\tif _, ok := added[n.(*ast.List)]; ok {\n\t\t\t\t// skip the added node\n\t\t\t\treturn ast.WalkSkipChildren, nil\n\t\t\t}\n\t\t}\n\t\tif n.Kind() == ast.KindListItem {\n\t\t\tsubList := ast.NewList(0)\n\t\t\tsubListItem := ast.NewListItem(0)\n\t\t\tsubList.AppendChild(subList, subListItem)\n\t\t\tleaf := ast.NewString([]byte(\"Hello\"))\n\t\t\tsubListItem.AppendChild(subListItem, leaf)\n\t\t\tn.AppendChild(n, subList)\n\t\t\t// record the added node\n\t\t\tadded[subList] = true\n\t\t}\n\t}\n\treturn ast.WalkContinue, nil\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/76548755/cors-failure-from-go-backend-to-frontend-on-docker-image",
    "body": "func EnableCORS(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Add(\"Vary\", \"Origin\")\n\t\tw.Header().Add(\"Vary\", \"Access-Control-Request-Method\")\n\t\tif r.Header.Get(\"Origin\") != \"\" {\n\t\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\t\tif isPreflight(r) {\n\t\t\t\tw.Header().Set(\"Access-Control-Allow-Methods\", \"OPTIONS, PUT, PATCH, DELETE\")\n\t\t\t\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Authorization, Content-Type\")\n\t\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tnext.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76496497/nested-node-with-golang-yaml-v3",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n\t\"io/ioutil\"\n\t\"os\"\n)\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\nfunc main() {\n\tf, err := os.Open(\"example.yaml\")\n\tcheck(err)\n\tdefer f.Close()\n\tinput, err := ioutil.ReadAll(f)\n\tcheck(err)\n\tvar document yaml.Node\n\terr = yaml.Unmarshal(input, &document)\n\tcheck(err)\n\t// a MappingNode\n\texampleNode := document.Content[0]\n\t// two string ScalarNodes\n\tvar locationSectionKeyNode, numberSectionKeyNode *yaml.Node\n\t// two MappingNodes\n\tvar locationSectionValNode, numberSectionValNode *yaml.Node\n\tfor i := 0; i < len(exampleNode.Content); i += 2 {\n\t\tnode := exampleNode.Content[i]\n\t\tif node.Kind == yaml.ScalarNode && node.Value == \"locationSection\" {\n\t\t\tlocationSectionKeyNode = exampleNode.Content[i]\n\t\t\tlocationSectionValNode = exampleNode.Content[i+1]\n\t\t}\n\t\tif node.Kind == yaml.ScalarNode && node.Value == \"numberSection\" {\n\t\t\tnumberSectionKeyNode = exampleNode.Content[i]\n\t\t\tnumberSectionValNode = exampleNode.Content[i+1]\n\t\t}\n\t}\n\t// Print locationSection Nodes\n\tlocationSectionKey, err := yaml.Marshal(locationSectionKeyNode)\n\tcheck(err)\n\tfmt.Println(string(locationSectionKey))\n\tlocationSectionVal, err := yaml.Marshal(locationSectionValNode)\n\tcheck(err)\n\tfmt.Println(string(locationSectionVal))\n\t// Print numberSection Nodes\n\tnumberSectionKey, err := yaml.Marshal(numberSectionKeyNode)\n\tcheck(err)\n\tfmt.Println(string(numberSectionKey))\n\tnumberSectionVal, err := yaml.Marshal(numberSectionValNode)\n\tcheck(err)\n\tfmt.Println(string(numberSectionVal))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76466880/dlv-debug-issue-to-go-application-running-in-docker-container",
    "body": "2023-06-14T00:58:37Z debug layer=rpc <- RPCServer.CreateBreakpoint(rpc2.CreateBreakpointIn{\"Breakpoint\":{\"id\":0,\"name\":\"\",\"addr\":0,\"addrs\":null,\"addrpid\":null,\"file\":\"/usr/src/app/minimal_repro/main.go\",\"line\":15,\"Cond\":\"\",\"HitCond\":\"\",\"HitCondPerG\":false,\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"WatchExpr\":\"\",\"WatchType\":0,\"hitCount\":null,\"totalHitCount\":0,\"disabled\":false},\"LocExpr\":\"\",\"SubstitutePathRules\":null,\"Suspended\":false})\n2023-06-14T00:58:37Z debug layer=rpc -> *rpc2.CreateBreakpointOut{\"Breakpoint\":{\"id\":0,\"name\":\"\",\"addr\":0,\"addrs\":null,\"addrpid\":null,\"file\":\"\",\"line\":0,\"Cond\":\"\",\"HitCond\":\"\",\"HitCondPerG\":false,\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":null,\"LoadLocals\":null,\"WatchExpr\":\"\",\"WatchType\":0,\"hitCount\":null,\"totalHitCount\":0,\"disabled\":false}} error: \"could not find file /usr/src/app/minimal_repro/main.go\""
  },
  {
    "url": "https://stackoverflow.com/questions/76459048/connection-from-golang-restapi-to-mongodb-failing",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Movie struct {\n\tName      string   `bson:\"name\"`\n\tYear      string   `bson:\"year\"`\n\tDirectors []string `bson:\"directors\"`\n\tWriters   []string `bson:\"writers\"`\n\tBoxOffice `bson:\"boxOffice\"`\n}\ntype BoxOffice struct {\n\tBudget uint64 `bson:\"budget\"`\n\tGross  uint64 `bson:\"gross\"`\n}\n// docker run -d -p 27017:27017 --name mymongo -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=root mongo:latest\nfunc main() {\n\t// 1. set connection up\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(context.Background(), clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(context.Background())\n\t// 2. set database and collection\n\tappDb := mongoClient.Database(\"appDB\")\n\tmoviesData := appDb.Collection(\"moviesData\")\n\t// 3. insert movie\n\tdarkNight := &Movie{\n\t\tName:      \"Dark Night\",\n\t\tYear:      \"2009\",\n\t\tDirectors: []string{\"Chirstopher Nolan\"},\n\t\tWriters:   []string{\"Max Muler\"},\n\t\tBoxOffice: BoxOffice{\n\t\t\tBudget: 150000,\n\t\t\tGross:  1750000000,\n\t\t},\n\t}\n\t// troubleshooting to clean up data\n\tdefer func() {\n\t\tmoviesData.DeleteMany(context.Background(), bson.M{})\n\t}()\n\tinsertRes, err := moviesData.InsertOne(context.Background(), darkNight)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"inserted result\", insertRes.InsertedID)\n\t// 4. fetch data\n\tcursor, err := moviesData.Find(context.Background(), bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar movieEntries []bson.M\n\tif err = cursor.All(context.Background(), &movieEntries); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range movieEntries {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76445364/converting-parquet-file-to-golang-struct-with-nested-elements",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/segmentio/parquet-go\"\n)\ntype Play struct {\n\tSID            string  `parquet:\"si\"`\n\tTimeStamp      int     `parquet:\"ts\"`\n\tSingleID       int     `parquet:\"sg\"`\n\tPID            int     `parquet:\"playid\"`\n\tStartTimeStamp string  `parquet:\"startts\"`\n\tPrice          []Price `parquet:\"price,list\"`\n}\ntype Price struct {\n\tCurrID int    `parquet:\"currId\"`\n\tLPTag  string `parquet:\"lptag\"`\n\tLPrice Money  `parquet:\"lpmoney\"`\n}\ntype Money struct {\n\tAdmCurrCode  string `parquet:\"admCC\"`\n\tAdmCurrValue string `parquet:\"admCV\"`\n}\nfunc main() {\n\trows, err := parquet.ReadFile[Play](\"s3.parquet\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, c := range rows {\n\t\tfmt.Printf(\"%+v\\n\", c)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76370962/why-am-i-only-getting-part-of-error-instead-of-all-errors-from-goroutines-i-laun",
    "body": "$ go test -race .\n==================\nWARNING: DATA RACE\nWrite at 0x00c0000a0610 by goroutine 10:\n  m.(*Cycle).WaitAllDone.func1()\n      /home/zeke/src/temp/76370962/main_test.go:40 +0xb6\nPrevious read at 0x00c0000a0610 by goroutine 7:\n  m.(*Cycle).WaitAllDone()\n      /home/zeke/src/temp/76370962/main_test.go:48 +0x14e\n  m.Test41()\n      /home/zeke/src/temp/76370962/main_test.go:63 +0xa4\n  testing.tRunner()\n      /snap/go/current/src/testing/testing.go:1576 +0x216\n  testing.(*T).Run.func1()\n      /snap/go/current/src/testing/testing.go:1629 +0x47"
  },
  {
    "url": "https://stackoverflow.com/questions/76310332/secrets-manager-update-secret-secret-string-additional-json-encoding",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/secretsmanager\"\n)\nfunc main() {\n\tsecretName := \"test1\"\n\tregion := \"ap-southeast-1\"\n\tconfig, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(region))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsvc := secretsmanager.NewFromConfig(config)\n\tinput := &secretsmanager.GetSecretValueInput{\n\t\tSecretId: aws.String(secretName),\n\t}\n\tresult, err := svc.GetSecretValue(context.TODO(), input)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar secret struct {\n\t\tPEM string `json:\"PEM\"`\n\t\tKEY string `json:\"KEY\"`\n\t}\n\t{\n\t}\n\tif err := json.Unmarshal([]byte(*result.SecretString), &secret); err != nil {\n\t\tpanic(err)\n\t}\n\tif _, err := tls.X509KeyPair([]byte(secret.PEM), []byte(secret.KEY)); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76197262/x-net-http2-what-happens-if-stream-id-exhausted-and-what-the-action-when-the-er",
    "body": "func (p *clientConnPool) getClientConn(req *http.Request, addr string, dialOnMiss bool) (*ClientConn, error) {\n\t// ...unrelated code truncated...\n\tfor {\n\t\tp.mu.Lock()\n\t\tfor _, cc := range p.conns[addr] {\n\t\t\tif cc.ReserveNewRequest() {\n\t\t\t\t// ...unrelated code truncated...\n\t\t\t\tp.mu.Unlock()\n\t\t\t\treturn cc, nil\n\t\t\t}\n\t\t}\n\t\t// ...unrelated code truncated...\n\t\tcall := p.getStartDialLocked(req.Context(), addr)\n\t\tp.mu.Unlock()\n\t\t<-call.done\n\t\tif shouldRetryDial(call, req) {\n\t\t\tcontinue\n\t\t}\n\t\tcc, err := call.res, call.err\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif cc.ReserveNewRequest() {\n\t\t\treturn cc, nil\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76197262/x-net-http2-what-happens-if-stream-id-exhausted-and-what-the-action-when-the-er",
    "body": "package main\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"time\"\n)\nfunc main() {\n\tts := httptest.NewUnstartedServer(nil)\n\tts.EnableHTTP2 = true\n\tts.StartTLS()\n\tdefer ts.Close()\n\tclient := ts.Client()\n\tif transport, ok := client.Transport.(*http.Transport); ok {\n\t\t// The transport created by httptest is different from the default\n\t\t// transport. Let's copy the configurations from the default transport.\n\t\t// See:\n\t\t// - https://github.com/golang/go/blob/f30cd520516037b2fdb367ddd8e0851019bf3440/src/net/http/httptest/server.go#L176-L181\n\t\t// - https://github.com/golang/go/blob/f30cd520516037b2fdb367ddd8e0851019bf3440/src/net/http/transport.go#L43-L54\n\t\ttransport.DialContext = (&net.Dialer{\n\t\t\tTimeout:   30 * time.Second,\n\t\t\tKeepAlive: 30 * time.Second,\n\t\t}).DialContext\n\t\t// It seems that the MaxIdleConns is ignored in HTTP2.\n\t\ttransport.MaxIdleConns = 100\n\t\t// Here it is. The IdleConnTimeout.\n\t\ttransport.IdleConnTimeout = 90 * time.Second\n\t\ttransport.TLSHandshakeTimeout = 10 * time.Second\n\t\ttransport.ExpectContinueTimeout = 1 * time.Second\n\t}\n\tfor i := 0; i < 5; i++ {\n\t\tlog.Printf(\"======= request: %d\\n\", i)\n\t\tresp, err := client.Get(ts.URL)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"client.Get: %v\", err)\n\t\t\tcontinue\n\t\t}\n\t\t_, _ = io.Copy(io.Discard, resp.Body)\n\t\tresp.Body.Close()\n\t}\n\tlog.Println(\"======= begin sleep for 100s\")\n\t// Wait for the IdleConnTimeout to take effect.\n\ttime.Sleep(100 * time.Second)\n\tlog.Println(\"======= end sleep for 100s\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76197262/x-net-http2-what-happens-if-stream-id-exhausted-and-what-the-action-when-the-er",
    "body": "2023/05/10 23:48:20 ======= request: 0\n2023/05/10 23:48:20 http2: Transport failed to get client conn for 127.0.0.1:46027: http2: no cached connection was available\n2023/05/10 23:48:20 http2: server connection from 127.0.0.1:48362 on 0xc00014a000\n<...truncated...>\n2023/05/10 23:48:20 http2: Transport received DATA flags=END_STREAM stream=2147483645 len=19 data=\"404 page not found\\n\"\n2023/05/10 23:48:20 ======= request: 1\n2023/05/10 23:48:20 http2: Transport failed to get client conn for 127.0.0.1:46027: http2: no cached connection was available\n2023/05/10 23:48:20 http2: Transport failed to get client conn for 127.0.0.1:46027: http2: no cached connection was available\n2023/05/10 23:48:20 http2: Transport creating client conn 0xc000004780 to 127.0.0.1:46027\n<...truncated...>\n2023/05/10 23:48:20 http2: Transport received DATA flags=END_STREAM stream=2147483645 len=19 data=\"404 page not found\\n\"\n2023/05/10 23:48:20 ======= request: 2\n2023/05/10 23:48:20 http2: Transport failed to get client conn for 127.0.0.1:46027: http2: no cached connection was available\n2023/05/10 23:48:20 http2: Transport failed to get client conn for 127.0.0.1:46027: http2: no cached connection was available\n2023/05/10 23:48:20 http2: Transport creating client conn 0xc00009e480 to 127.0.0.1:46027\n<...truncated...>\n2023/05/10 23:48:20 http2: Transport received DATA flags=END_STREAM stream=2147483645 len=19 data=\"404 page not found\\n\"\n2023/05/10 23:48:20 ======= begin sleep for 100s\n2023/05/10 23:49:50 http2: Transport closing idle conn 0xc00034a180 (forSingleUse=false, maxStream=2147483645)\n2023/05/10 23:49:50 http2: Transport closing idle conn 0xc000004600 (forSingleUse=false, maxStream=2147483645)\n<...truncated...>\n2023/05/10 23:50:00 ======= end sleep for 100s"
  },
  {
    "url": "https://stackoverflow.com/questions/76149992/multiple-arrow-csv-readers-on-same-file-returns-null",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"github.com/apache/arrow/go/v11/arrow\"\n\t\"github.com/apache/arrow/go/v11/arrow/csv\"\n)\nfunc main() {\n\t// Create a two-column csv file with this content (the second column has 1024 bytes):\n\t// 0,000000....\n\t// 1,111111....\n\t// 2,222222....\n\t// 3,333333....\n\ttemp := createTempFile()\n\tschema := arrow.NewSchema(\n\t\t[]arrow.Field{\n\t\t\t{Name: \"i64\", Type: arrow.PrimitiveTypes.Int64},\n\t\t\t{Name: \"str\", Type: arrow.BinaryTypes.String},\n\t\t},\n\t\tnil,\n\t)\n\tr := csv.NewReader(\n\t\ttemp, schema,\n\t\tcsv.WithComma(','),\n\t\tcsv.WithChunk(3),\n\t)\n\tdefer r.Release()\n\tr.Next()\n\t// To check what's left after the first chunk is read.\n\t// If the reader stop at the end of the chunk, the content left will be:\n\t// 3,333333....\n\t// But in fact, the content left is:\n\t// 33333333333\n\tbuf, err := io.ReadAll(temp)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%s\\n\", buf)\n}\nfunc createTempFile() *os.File {\n\ttemp, err := os.CreateTemp(\"\", \"test*.csv\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor i := 0; i < 4; i++ {\n\t\tfmt.Fprintf(temp, \"%d,\", i)\n\t\tif _, err := temp.Write(bytes.Repeat([]byte{byte('0' + i)}, 1024)); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif _, err := temp.Write([]byte(\"\\n\")); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\tif _, err := temp.Seek(0, io.SeekStart); err != nil {\n\t\tpanic(err)\n\t}\n\treturn temp\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76106459/how-to-compare-generic-number-type",
    "body": "func CheckPositive[T Positive](value T) string {\n\tswitch val := any(value).(type) {\n\tcase decimal.Decimal:\n\t\tif val.IsNegative() || val.IsZero() {\n\t\t\treturn \"non positive decimal\"\n\t\t}\n\tcase int, int8, int16, int32, int64:\n\t\tif reflect.ValueOf(val).Int() <= 0 {\n\t\t\treturn \"non positive signed\"\n\t\t}\n\tcase uint, uint8, uint16, uint32, uint64:\n\t\tif reflect.ValueOf(val).Uint() == 0 {\n\t\t\treturn \"non positive unsigned\"\n\t\t}\n\tcase float32, float64:\n\t\tf := reflect.ValueOf(val).Float()\n\t\tswitch {\n\t\tcase math.IsNaN(f):\n\t\t\treturn \"NaN float\"\n\t\tcase math.IsInf(f, -1):\n\t\t\treturn \"negative infinite\"\n\t\tcase math.IsInf(f, 1):\n\t\t\t// do nothing\n\t\tdefault:\n\t\t\t// not a NaN and not an Infinite\n\t\t\tif f <= 0.0 {\n\t\t\t\treturn \"negative float\"\n\t\t\t}\n\t\t}\n\tdefault:\n\t\tpanic(fmt.Sprintf(`%T is not supported type`, val))\n\t}\n\treturn \"positive\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76060523/converting-customized-xtea-algorithm-from-javascript-to-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tv := [2]int64{15, 16}\n\tkey := [4]int64{14, 15, 16, 17}\n\tsample(&v, &key)\n}\nfunc sample(v *[2]int64, key *[4]int64) {\n\tconst (\n\t\tnum_rounds       = 32\n\t\tdelta      int64 = 1640531527\n\t)\n\tfor i, sum := 0, int64(0); i < num_rounds; i++ {\n\t\ttemp := int32(v[1])\n\t\tv[0] += int64((((temp << 4) ^ (temp >> 5)) + temp) ^ int32(sum+key[int32(sum)&3]))\n\t\tsum -= delta\n\t\ttemp = int32(v[0])\n\t\tv[1] += int64((((temp << 4) ^ (temp >> 5)) + temp) ^ int32(sum+key[(int32(sum)>>11)&3]))\n\t}\n\tfmt.Println(*v)\n\t// Output: [6092213800 11162584543]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75987793/gorm-returns-scanner-error-on-custom-string-type",
    "body": "// implement scanner to decode the raw source\n// value as retrieved from the database\nfunc (s *DataCategorySlice) Scan(src any) error {\n    var data []byte\n    switch v := src.(type) {\n    case []byte:\n        data = v\n    case string:\n        data = []byte(v)\n    case nil:\n        return nil\n    default:\n        return fmt.Errorf(\"unsupported type: %T\", src)\n    }\n    if len(data) == 0 {\n        return nil\n    }\n    data = data[1:len(data)-1] // remove surrounding braces\n    for _, v := range bytes.Split(data, []byte{','}) {\n        *s = append(*s, DataCategory(v))\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75961879/change-name-of-many-to-many-join-table",
    "body": "package main\nimport (\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/schema\"\n)\ntype User struct {\n\tgorm.Model\n\tLanguages []*Language `gorm:\"many2many:UserLanguages;\"`\n}\ntype Language struct {\n\tgorm.Model\n\tName  string\n\tUsers []*User `gorm:\"many2many:UserLanguages;\"`\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"mydb.db\"), &gorm.Config{\n\t\tNamingStrategy: schema.NamingStrategy{\n\t\t\tNoLowerCase: true, // << HERE\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdb.AutoMigrate(&User{})\n\tdb.AutoMigrate(&Language{})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75961066/gopacket-decodelayers-on-an-ip-in-ip-packet",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"github.com/google/gopacket\"\n\t\"github.com/google/gopacket/layers\"\n\t\"github.com/google/gopacket/pcap\"\n)\n// 0-999 are reserved for the gopacket library. Numbers 1000-1999 should be\n// used for common application-specific types.\nvar LayerTypeIPv4Inner = gopacket.RegisterLayerType(1000, gopacket.LayerTypeMetadata{Name: \"IP_in_IP\", Decoder: nil})\n// IPv4Outer is like layers.IPv4 but it recognizes IP in IP and will choose\n// its next decoder accordingly.\ntype IPv4Outer struct {\n\tlayers.IPv4\n}\n// NextLayerType overrides (*layers.IPv4).NextLayerType to recognize IP in IP.\nfunc (i *IPv4Outer) NextLayerType() gopacket.LayerType {\n\tif i.Flags&layers.IPv4MoreFragments != 0 || i.FragOffset != 0 {\n\t\treturn gopacket.LayerTypeFragment\n\t}\n\t// This is an IP in IP packet.\n\t// See https://datatracker.ietf.org/doc/html/rfc2003#section-3.1\n\tif i.Protocol == 4 {\n\t\treturn LayerTypeIPv4Inner\n\t}\n\treturn i.Protocol.LayerType()\n}\n// IPv4Inner is like layers.IPv4 except that its type is LayerTypeIPv4Inner.\n// gopacket.DecodingLayerParser finds next decoder based on this type.\ntype IPv4Inner struct {\n\tlayers.IPv4\n}\n// CanDecode overrides (*layers.IPv4).CanDecode to choose a type other than\n// layers.LayerTypeIPv4.\nfunc (i *IPv4Inner) CanDecode() gopacket.LayerClass {\n\treturn LayerTypeIPv4Inner\n}\nfunc main() {\n\thandle, err := pcap.OpenOffline(\"./IP_in_IP.cap\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar (\n\t\teth     layers.Ethernet\n\t\tip4     IPv4Outer\n\t\tipip4   IPv4Inner\n\t\ttcp     layers.TCP\n\t\ticmpv4  layers.ICMPv4\n\t\tpayload gopacket.Payload\n\t)\n\tparser := gopacket.NewDecodingLayerParser(layers.LayerTypeEthernet, &eth, &ip4, &ipip4, &tcp, &icmpv4, &payload)\n\tdecodedLayers := make([]gopacket.LayerType, 0, 10)\n\tfor {\n\t\tdata, _, err := handle.ZeroCopyReadPacketData()\n\t\tif err == io.EOF {\n\t\t\tfmt.Println(\"done\")\n\t\t\treturn\n\t\t}\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\terr = parser.DecodeLayers(data, &decodedLayers)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfor _, typ := range decodedLayers {\n\t\t\tif typ == layers.LayerTypeIPv4 {\n\t\t\t\tfmt.Printf(\"Ipv4: %s => %s\\n\", ip4.SrcIP, ip4.DstIP)\n\t\t\t} else if typ == LayerTypeIPv4Inner {\n\t\t\t\tfmt.Printf(\"IP in IP: %s => %s\\n\", ipip4.SrcIP, ipip4.DstIP)\n\t\t\t}\n\t\t}\n\t\tfmt.Printf(\"%v\\n\\n\", decodedLayers)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75938194/how-to-use-dynamic-html-tags-in-golang-template",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"os\"\n)\nfunc main() {\n\tdata := []struct {\n\t\tTag     string\n\t\tContent string\n\t}{\n\t\t{\n\t\t\tTag:     \"h1\",\n\t\t\tContent: \"How to use dynamic <HTML> tags in golang template?\",\n\t\t},\n\t\t{\n\t\t\tContent: `.Settings.headlineTag \"h2\"`,\n\t\t},\n\t}\n\tconst tpl = `\n{{ range . }}\n  {{ tag .Tag \"h2\" .Content }}\n{{ end }}\n`\n\tt, err := template.New(\"webpage\").\n\t\tFuncs(template.FuncMap{\n\t\t\t\"tag\": func(tag, fallback, content string) template.HTML {\n\t\t\t\tname := tag\n\t\t\t\tif name == \"\" {\n\t\t\t\t\tname = fallback\n\t\t\t\t}\n\t\t\t\tv := fmt.Sprintf(\"<%s>%s</%s>\", name, template.HTMLEscapeString(content), name)\n\t\t\t\treturn template.HTML(v)\n\t\t\t},\n\t\t}).\n\t\tParse(tpl)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = t.Execute(os.Stdout, data)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75927824/dynamically-passing-sql-parameters-in-golang",
    "body": "func ExecQuery(db *sql.DB, m Message) (*sql.Rows, error) {\n\tqueryString := \"...\" // based on m.SQLTable get the correct SQL query string\n\targs := make([]any, len(m.InputParams))\n\tfor i, pp := range m.InputParams {\n\t\tname := pp.Key[1:] // drop the leading \"@\"\n\t\targs[i] = sql.Named(name, pp.Value)\n\t}\n\treturn db.Query(queryString, args...)\n}\n// ...\nvar km KafkaMessage // unmarshal the kafka message into km\nrows, err := ExecQuery(db, km.Message[0])\nif err != nil {\n    panic(err)\n}\ndefer rows.Close()\nfor rows.Next() {\n    // ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75887822/sort-the-inner-array-using-linq",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/ahmetb/go-linq/v3\"\n)\n// Inner struct\ntype product struct {\n\tname   string\n\tprice  int64\n\tshopId int64\n}\nfunc (x product) String() string { return fmt.Sprintf(\"<%s, [%d]> \", x.name, x.price) }\n// Outer struct\ntype oneGroup struct {\n\tshopId   int64\n\tproducts []*product\n}\n// Final Outer array\nvar groupOut []oneGroup\nfunc main() {\n\tproducts := make([]*product, 0, 20)\n\tproducts = append(products, &product{name: \"product66\", price: 6666, shopId: 100})\n\tproducts = append(products, &product{name: \"product11\", price: 1111, shopId: 100})\n\tproducts = append(products, &product{name: \"product44\", price: 4444, shopId: 100})\n\tproducts = append(products, &product{name: \"product22\", price: 2222, shopId: 200})\n\tproducts = append(products, &product{name: \"product77\", price: 9999, shopId: 200})\n\tproducts = append(products, &product{name: \"product00\", price: 0000, shopId: 200})\n\tproducts = append(products, &product{name: \"product33\", price: 3333, shopId: 300})\n\tproducts = append(products, &product{name: \"product88\", price: 8888, shopId: 300})\n\tproducts = append(products, &product{name: \"product55\", price: 5555, shopId: 300})\n\tproducts = append(products, &product{name: \"product99\", price: 7777, shopId: 400})\n\tvar query []linq.Group\n    // Sort products first by shopId and the price in descending order\n\tvar productsByShopIdAndPrice linq.OrderedQuery = linq.From(products).OrderByT(func(p interface{}) int64  {\n\t    return p.(*product).shopId\n\t}).ThenByDescending(func(p interface{}) interface{} {\n\t    return p.(*product).price\n\t})\n\t// Grouping and sorting outer layers in descending order according to the largest price in the group after grouping\n\tproductsByShopIdAndPrice.GroupByT(\n\t\tfunc(p *product) int64 { return p.shopId },\n\t\tfunc(p *product) *product { return p },\n\t).OrderByT(\n\t\tfunc(g linq.Group) int64 {\n\t\t\t//return g.Key.(int64)\n\t\t\treturn linq.From(g.Group).Select(\n\t\t\t\tfunc(x interface{}) interface{} { return x.(*product).price },\n\t\t\t).Max().(int64)\n\t\t},\n\t).ToSlice(&query)\n\tfmt.Printf(\"%v \\n\", query)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75879082/go-gin-pass-zap-logger",
    "body": "func CreateNewArtist(c *gin.Context) {\n\tdb := c.MustGet(\"db\").(*gorm.DB)\n\tservice := services.NewArtistService(db)\n\tutils.Logger.Info(\"Creating new artist\")\n\tbody := forms.AddArtistForm{}\n\tutils.Logger.Info(\"Request body\")\n\tutils.Logger.Info(body.Name)\n\t// getting request's body\n\tif err := c.BindJSON(&body); err != nil {\n\t\tresponses.RespondWithErrors(c, http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tartist, err := service.Save(body)\n\tif err != nil {\n\t\tresponses.RespondWithErrors(c, http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tresponses.RespondSuccess(c, artist)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75860989/header-based-versioning-on-golang",
    "body": "package main\nimport (\n \"net/http\"\n \"net/http/httputil\"\n \"regexp\"\n \"github.com/gin-gonic/gin\"\n)\nfunc main() {\n router := gin.Default()\n router.Use(VersionMiddleware())\n v1 := router.Group(\"/v1\")\n v1.GET(\"/user\", func(c *gin.Context) {\n  c.String(http.StatusOK, \"This is the v1 API\")\n })\n v2 := router.Group(\"/v2\")\n v2.GET(\"/user\", func(c *gin.Context) {\n  c.String(http.StatusOK, \"This is the v2 API\")\n })\n router.Run(\":8082\")\n}\nfunc VersionMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n\n  // You need to check c.Request.URL.Path whether\n  // already have a version or not, If it has a valid\n  // version, return.\n  regEx, _ := regexp.Compile(\"/v[0-9]+\")\n  ver := regEx.MatchString(c.Request.URL.Path)\n  if ver {\n   return\n  }\n  version := c.Request.Header.Get(\"Accept-version\")\n\n  // You need to validate  given version by the user here.\n  // If version is not a valid version, return error\n  // mentioning that given version is invalid.\n  director := func(req *http.Request) {\n    r := c.Request\n    req.URL.Scheme = \"http\"\n    req.URL.Host = r.Host\n    req.URL.Path =  \"/\"+ version + r.URL.Path\n    }\n  proxy := &httputil.ReverseProxy{Director: director}\n  proxy.ServeHTTP(c.Writer, c.Request)\n }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75860989/header-based-versioning-on-golang",
    "body": "package main\nimport (\n \"net/http\"\n \"github.com/gin-gonic/gin\"\n \"github.com/udayangaac/stackoverflow/golang/75860989/ginwrapper\"\n)\nfunc main() {\n  engine := gin.Default()\n router := ginwrapper.NewRouter(engine)\n defaultRouter := router.Default()\n defaultRouter.Get(\"/profile\",func(ctx *gin.Context) {\n })\n v1 := router.WithVersion(\"/v1\")\n v1.Get(\"/user\",func(ctx *gin.Context) {\n  ctx.String(http.StatusOK, \"This is the profile v1 API\")\n })\n v2 := router.WithVersion(\"/v2\")\n v2.Get(\"/user\",func(ctx *gin.Context) {\n  ctx.String(http.StatusOK, \"This is the profile v2 API\")\n })\n\n engine.Run(\":8082\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75860989/header-based-versioning-on-golang",
    "body": "package ginwrapper\nimport (\n \"fmt\"\n \"net/http\"\n \"github.com/gin-gonic/gin\"\n)\ntype Router struct {\n router *gin.Engine\n versionGroups map[string]*gin.RouterGroup\n}\ntype VersionedRouter struct {\n version string\n Router\n}\nfunc NewRouter(router *gin.Engine) *Router {\n return &Router{\n  router: router,\n  versionGroups: make(map[string]*gin.RouterGroup),\n }\n}\nfunc (a *Router) Default() VersionedRouter {\n return VersionedRouter{Router: *a }\n}\nfunc  (a *Router) WithVersion(version string) VersionedRouter {\n if _,ok := a.versionGroups[version]; ok {\n  panic(\"cannot initialize same version multiple times\")\n }\n a.versionGroups[version] = a.router.Group(version)\n return VersionedRouter{Router: *a,version:version }\n}\nfunc (vr VersionedRouter) Get(relativePath string, handlers ...gin.HandlerFunc)  {\n vr.handle(http.MethodGet,relativePath,handlers...)\n}\n// Note: You need to follow the same for other HTTP Methods.\n// As an example, we can write a method for Post HTTP Method as below,\n//\n//  func (vr VersionedRouter) Post(relativePath string, handlers ...gin.HandlerFunc)  {\n//   vr.handle(http.MethodPost,relativePath,handlers...)\n//  }\nfunc (vr VersionedRouter)handle(method,relativePath string, handlers ...gin.HandlerFunc)  {\n if !vr.isRouteExist(method,relativePath) {\n  vr.router.Handle(method,relativePath,func(ctx *gin.Context) {\n   version := ctx.Request.Header.Get(\"Accept-version\")\n   if len(version) == 0 {\n    ctx.String(http.StatusBadRequest,\"Accept-version header is empty\")\n   }\n   ctx.Request.URL.Path = fmt.Sprintf(\"/%s%s\", version, ctx.Request.URL.Path)\n   vr.router.HandleContext(ctx)\n  })\n }\n versionedRelativePath := vr.version + relativePath\n if !vr.isRouteExist(method,versionedRelativePath) {\n  vr.router.Handle(method,versionedRelativePath,handlers... )\n }\n}\nfunc (a VersionedRouter) isRouteExist(method,relativePath string) bool {\n for _,route := range a.router.Routes() {\n  if route.Method == method && relativePath == route.Path {\n   return true\n  }\n }\n return false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75806007/golang-unable-to-create-a-document-in-mongodb",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype LogEntry struct {\n\tName      string\n\tData      string\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second*20)\n\tdefer cancel()\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\tdemoDb := mongoClient.Database(\"demodb\")\n\tmyCollection := demoDb.Collection(\"myCollection\")\n\t// delete documents\n\tif _, err := myCollection.DeleteMany(ctx, bson.M{}); err != nil {\n\t\tpanic(err)\n\t}\n\t// insert data\n\tinsertRes, err := myCollection.InsertOne(ctx, LogEntry{\n\t\tName:      \"lorem ipsum\",\n\t\tData:      \"lorem ipsum\",\n\t\tCreatedAt: time.Now(),\n\t\tUpdatedAt: time.Now(),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(insertRes.InsertedID)\n\t// query data\n\tcursor, err := myCollection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar logEntries []bson.M\n\tif err = cursor.All(ctx, &logEntries); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range logEntries {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75759746/missinglistfield-when-assign-struct-literal-to-node",
    "body": "type Node struct {\n\tmetav1.TypeMeta `json:\",inline\"`\n\t// Standard object's metadata.\n\t// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\t// +optional\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`\n\t// Spec defines the behavior of a node.\n\t// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n\t// +optional\n\tSpec NodeSpec `json:\"spec,omitempty\" protobuf:\"bytes,2,opt,name=spec\"`\n\t// Most recently observed status of the node.\n\t// Populated by the system.\n\t// Read-only.\n\t// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n\t// +optional\n\tStatus NodeStatus `json:\"status,omitempty\" protobuf:\"bytes,3,opt,name=status\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75752209/paypal-sandbox-verify-webhook-always-return-failure",
    "body": "map[\n    Accept:*/* Content-Length:1142\n    Content-Type:application/json\n    Correlation-Id:f941618bd2165\n    Host:filepipe.dev\n    Paypal-Auth-Algo:SHA256withRSA\n    Paypal-Auth-Version:v2\n    Paypal-Cert-Url:https://api.sandbox.paypal.com/v1/notifications/certs/CERT-360caa42-fca2a594-5a29e601\n    Paypal-Transmission-Id:99d97fc0-c3ad-11ed-8ada-d722609ae478\n    Paypal-Transmission-Sig:PrZDo9fmpTshwt/JY6/HvJDceR5kCj3GhAxdiBSIdtsC7Y91+ww6hd8Qk5zpnJ3KN1itLYSxFnTQLOgtOYZtSzXsQaAeo7oSqxUAaV+jXtF3a63zR0zg9NRHfNjf4L7JuGJ0WDz2I4d4026GZ4yXjr3sNc3zN6dEwZBEQT0zc+bwZjariIC3WQv7uLCPKbvl6g49OhQC6xS5cJkB837D3svUIlT/9PEJ5mp1WCCijwOypUpCoP1lXGWHx1pVvtTPd4Q3ANSSASFJDs4ubJKgH5CPNiv+eT9GNs5JGXQv/1qlvCN+Ph2v/OKgz6yM5gbPS3XnldccXwnzeGcenPvl5w==\n    Paypal-Transmission-Time:2023-03-16T03:49:49Z\n    User-Agent:PayPal/AUHR-214.0-58031014\n    X-B3-Spanid:3d19edb457d98398\n    X-Forwarded-For:173.0.80.116\n    X-Forwarded-Host:filepipe.dev\n    X-Forwarded-Port:443\n    X-Forwarded-Proto:https\n    X-Forwarded-Scheme:https\n    X-Real-Ip:173.0.80.116\n    X-Request-Id:fd024917ba5320920ea36735f2460a47\n    X-Scheme:https\n]"
  },
  {
    "url": "https://stackoverflow.com/questions/75752209/paypal-sandbox-verify-webhook-always-return-failure",
    "body": "{\n    \"id\": \"WH-47139463N7609432M-6FD472938E900521U\",\n    \"event_version\": \"1.0\",\n    \"create_time\": \"2023-03-16T03:49:46.098Z\",\n    \"resource_type\": \"subscription\",\n    \"resource_version\": \"2.0\",\n    \"event_type\": \"BILLING.SUBSCRIPTION.CREATED\",\n    \"summary\": \"Subscription created\",\n    \"resource\": {\n        \"start_time\": \"2023-03-16T03:49:45Z\",\n        \"quantity\": \"1\",\n        \"create_time\": \"2023-03-16T03:49:45Z\",\n        \"custom_id\": \"3\",\n        \"links\": [\n            {\n                \"href\": \"https://www.sandbox.paypal.com/webapps/billing/subscriptions?ba_token=BA-7RE73133KF159744D\",\n                \"rel\": \"approve\",\n                \"method\": \"GET\"\n            },\n            {\n                \"href\": \"https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\",\n                \"rel\": \"edit\",\n                \"method\": \"PATCH\"\n            },\n            {\n                \"href\": \"https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\",\n                \"rel\": \"self\",\n                \"method\": \"GET\"\n            }\n        ],\n        \"id\": \"I-LMA62KG79TL5\",\n        \"plan_overridden\": false,\n        \"plan_id\": \"P-2M355934NH158234GMQIXO2Q\",\n        \"status\": \"APPROVAL_PENDING\"\n    },\n    \"links\": [\n        {\n            \"href\": \"https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U\",\n            \"rel\": \"self\",\n            \"method\": \"GET\"\n        },\n        {\n            \"href\": \"https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U/resend\",\n            \"rel\": \"resend\",\n            \"method\": \"POST\"\n        }\n    ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75752209/paypal-sandbox-verify-webhook-always-return-failure",
    "body": "map[\n    create_time:2023-03-16T03:49:46.098Z\n    event_type:BILLING.SUBSCRIPTION.CREATED\n    event_version:1.0\n    id:WH-47139463N7609432M-6FD472938E900521U\n    links:[\n        map[\n            href:https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U\n            method:GET\n            rel:self\n        ]\n        map[\n            href:https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U/resend\n            method:POST\n            rel:resend\n        ]\n    ]\n    resource:\n        map[\n            create_time:2023-03-16T03:49:45Z\n            custom_id:3\n            id:I-LMA62KG79TL5\n            links:[\n                map[\n                    href:https://www.sandbox.paypal.com/webapps/billing/subscriptions?ba_token=BA-7RE73133KF159744D\n                    method:GET\n                    rel:approve\n                ]\n                map[\n                    href:https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\n                    method:PATCH\n                    rel:edit\n                ]\n                map[\n                    href:https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\n                    method:GET\n                    rel:self\n                ]\n            ]\n            plan_id:P-2M355934NH158234GMQIXO2Q\n            plan_overridden:false\n            quantity:1\n            start_time:2023-03-16T03:49:45Z\n            status:APPROVAL_PENDING\n        ]\n    resource_type:subscription\n    resource_version:2.0\n    summary:Subscription created\n]"
  },
  {
    "url": "https://stackoverflow.com/questions/75752209/paypal-sandbox-verify-webhook-always-return-failure",
    "body": "{\n    \"auth_algo\": \"SHA256withRSA\",\n    \"cert_url\": \"https://api.sandbox.paypal.com/v1/notifications/certs/CERT-360caa42-fca2a594-5a29e601\",\n    \"transmission_id\": \"99d97fc0-c3ad-11ed-8ada-d722609ae478\",\n    \"transmission_sig\": \"PrZDo9fmpTshwt/JY6/HvJDceR5kCj3GhAxdiBSIdtsC7Y91+ww6hd8Qk5zpnJ3KN1itLYSxFnTQLOgtOYZtSzXsQaAeo7oSqxUAaV+jXtF3a63zR0zg9NRHfNjf4L7JuGJ0WDz2I4d4026GZ4yXjr3sNc3zN6dEwZBEQT0zc+bwZjariIC3WQv7uLCPKbvl6g49OhQC6xS5cJkB837D3svUIlT/9PEJ5mp1WCCijwOypUpCoP1lXGWHx1pVvtTPd4Q3ANSSASFJDs4ubJKgH5CPNiv+eT9GNs5JGXQv/1qlvCN+Ph2v/OKgz6yM5gbPS3XnldccXwnzeGcenPvl5w==\",\n    \"transmission_time\": \"2023-03-16T03:49:49Z\",\n    \"webhook_event\": {\n        \"create_time\": \"2023-03-16T03:49:46.098Z\",\n        \"event_type\": \"BILLING.SUBSCRIPTION.CREATED\",\n        \"event_version\": \"1.0\",\n        \"id\": \"WH-47139463N7609432M-6FD472938E900521U\",\n        \"links\": [\n            {\n                \"href\": \"https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U\",\n                \"method\": \"GET\",\n                \"rel\": \"self\"\n            },\n            {\n                \"href\": \"https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-47139463N7609432M-6FD472938E900521U/resend\",\n                \"method\": \"POST\",\n                \"rel\": \"resend\"\n            }\n        ],\n        \"resource\": {\n            \"create_time\": \"2023-03-16T03:49:45Z\",\n            \"custom_id\": \"3\",\n            \"id\": \"I-LMA62KG79TL5\",\n            \"links\": [\n                {\n                    \"href\": \"https://www.sandbox.paypal.com/webapps/billing/subscriptions?ba_token=BA-7RE73133KF159744D\",\n                    \"method\": \"GET\",\n                    \"rel\": \"approve\"\n                },\n                {\n                    \"href\": \"https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\",\n                    \"method\": \"PATCH\",\n                    \"rel\": \"edit\"\n                },\n                {\n                    \"href\": \"https://api.sandbox.paypal.com/v1/billing/subscriptions/I-LMA62KG79TL5\",\n                    \"method\": \"GET\",\n                    \"rel\": \"self\"\n                }\n            ],\n            \"plan_id\": \"P-2M355934NH158234GMQIXO2Q\",\n            \"plan_overridden\": false,\n            \"quantity\": \"1\",\n            \"start_time\": \"2023-03-16T03:49:45Z\",\n            \"status\": \"APPROVAL_PENDING\"\n        },\n        \"resource_type\": \"subscription\",\n        \"resource_version\": \"2.0\",\n        \"summary\": \"Subscription created\"\n    },\n    \"webhook_id\": \"9FU18601MK8788***\" (webhook id)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75525811/sampling-data-from-two-collections-with-multiple-array-matching-mongodb",
    "body": "db.chatsusers.aggregate([\n    {\n        $match: {\n            chat_id: {\n                $in: [\"ad0a3405-1a16-48f9-93e6-51b17a7283e2\", \"22e1e6f1-459a-4ed1-bc8f-c9947492972d\"],\n            },\n        }\n    },\n    {\n        $lookup: {\n            from: \"message\",\n            localField: \"chat_id\",\n            foreignField: \"chat_id\",\n            let: { chat_id: \"$chat_id\", max_read_date: \"$max_read_date\" },\n            pipeline: [\n                {\n                    $match: {\n                        $expr: {\n                            $and: [\n                                { $eq: [\"$chat_id\", \"$$chat_id\"] },\n                                { $ne: [\"$from_id\", \"63f5002735bb916dab3f2b1e\"] },\n                                { $gt: [\"$create_date\", \"$$max_read_date\"] },\n                            ]\n                        }\n                    },\n                }\n            ],\n            as: \"messages\"\n        }\n    },\n    {\n        $project: {\n            chat_id: 1,\n            message_count: { $size: \"$messages\" },\n        }\n    },\n    {\n        $group: {\n            _id: \"$chat_id\",\n            message_count: { $sum: \"$message_count\" },\n        },\n    },\n    {\n        $sort: { \"message_count\": -1 },\n    },\n    {\n        $project: {\n            _id: 0,\n            chat_id: \"$_id\",\n            message_count: 1,\n        },\n    },\n])"
  },
  {
    "url": "https://stackoverflow.com/questions/75478287/how-to-remove-cursor-position-ansi-escape-code-from-hijackedresponse-in-go",
    "body": "func (docker *Docker) holdHijackedConnection(resp types.HijackedResponse) error {\n\tcli, _ := command.NewDockerCli()\n\toutputStream := cli.Out()\n\terrorStream := cli.Err()\n\tinputStream := cli.In()\n\tinputStream.SetRawTerminal()\n\tdefer inputStream.RestoreTerminal()\n\treceiveStdout := make(chan error)\n\tif outputStream != nil || errorStream != nil {\n\t\tgo func() {\n\t\t\treceiveStdout <- docker.redirectResponseToOutputStream(outputStream, errorStream, resp.Reader)\n\t\t}()\n\t}\n\tstdinDone := make(chan struct{})\n\tgo func() {\n\t\tif inputStream != nil {\n\t\t\tio.Copy(resp.Conn, inputStream)\n\t\t}\n\t\tresp.CloseWrite()\n\t\tclose(stdinDone)\n\t}()\n\tselect {\n\tcase err := <-receiveStdout:\n\t\treturn err\n\tcase <-stdinDone:\n\t\tif outputStream != nil || errorStream != nil {\n\t\t\treturn <-receiveStdout\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75447075/how-to-transfer-interface-to-specified-type-by-using-generic",
    "body": "package main\nimport \"fmt\"\n// interface\ntype DataInterface interface {\n\tGet(string) string\n}\n// struct implementing the interface\ntype DataA struct {\n\td map[string]string\n}\nfunc (d DataA) Get(key string) string {\n\treturn d.d[key]\n}\ntype DataB struct {\n\td map[string]string\n}\nfunc (d DataB) Get(key string) string {\n\treturn d.d[key]\n}\ntype DataSlice []DataInterface\nfunc GetDataX[T any](d DataInterface) T {\n\treturn d.(T)\n}\nfunc main() {\n\ta := DataA{map[string]string{\"a\": \"1\"}}\n\tb := DataB{map[string]string{\"b\": \"2\"}}\n\tds := DataSlice{a, b}\n\tfor _, v := range ds {\n\t\tif value, ok := v.(DataA); ok {\n\t\t\tfmt.Printf(\"A\\t%q\\n\", GetDataX[DataA](value))\n\t\t\tcontinue\n\t\t}\n\t\tif value, ok := v.(DataB); ok {\n\t\t\tfmt.Printf(\"B\\t%q\\n\", GetDataX[DataB](value))\n\t\t\tcontinue\n\t\t}\n\t\t// add unknown type handling logic here\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75349134/how-to-return-nested-entities-after-creating-a-new-object",
    "body": "package main\nimport (\n\t\"context\"\n\t\"gogindemo/handlers\"\n\t\"github.com/gin-gonic/gin\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\nvar (\n\tdb  *gorm.DB\n\tctx *gin.Context\n)\nfunc init() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tvar err error\n\tdb, err = gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&handlers.Currency{})\n\tdb.AutoMigrate(&handlers.User{})\n\tdb.AutoMigrate(&handlers.Account{})\n}\nfunc AddDb() gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tctx.Request = ctx.Request.WithContext(context.WithValue(ctx.Request.Context(), \"DB\", db))\n\t\tctx.Next()\n\t}\n}\nfunc main() {\n\tdb.Create(&handlers.User{Id: 1, Name: \"john doe\"})\n\tdb.Create(&handlers.User{Id: 2, Name: \"mary hut\"})\n\tdb.Create(&handlers.Currency{Id: 1, Name: \"EUR\"})\n\tdb.Create(&handlers.Currency{Id: 2, Name: \"USD\"})\n\tr := gin.Default()\n\tr.POST(\"/account\", AddDb(), handlers.CreateAccount)\n\tr.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75349134/how-to-return-nested-entities-after-creating-a-new-object",
    "body": "package handlers\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/shopspring/decimal\"\n\t\"gorm.io/gorm\"\n)\ntype User struct {\n\tId   int\n\tName string\n}\ntype Currency struct {\n\tId   int\n\tName string\n}\ntype Account struct {\n\tId         int\n\tName       string          `gorm:\"size:64;not null\" json:\"name\"`\n\tBalance    decimal.Decimal `gorm:\"type:decimal(16, 2);default:0;not null;\" json:\"balance\"`\n\tUserID     int             `gorm:\"not null\" json:\"-\"`\n\tUser       User            `gorm:\"foreignKey:UserID\" json:\"user\"`\n\tCurrencyID int             `gorm:\"not null\" json:\"-\"`\n\tCurrency   Currency        `gorm:\"foreignKey:CurrencyID\" json:\"currency\"`\n}\ntype CreateAccountBody struct {\n\tName       string          `json:\"name\" binding:\"required\"`\n\tBalance    decimal.Decimal `json:\"balance\"`\n\tCurrencyID int             `json:\"currency_id\" binding:\"required\"`\n}\nfunc CreateAccount(c *gin.Context) {\n\tdb, ok := c.Request.Context().Value(\"DB\").(*gorm.DB)\n\tif !ok {\n\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"internal server error\"})\n\t\treturn\n\t}\n\tvar accountReq CreateAccountBody\n\tif err := c.BindJSON(&accountReq); err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": \"wrong request body payload\"})\n\t\treturn\n\t}\n\t// create Account & update the \"account\" variable\n\taccount := Account{Name: accountReq.Name, Balance: accountReq.Balance, CurrencyID: accountReq.CurrencyID, UserID: 1}\n\tdb.Create(&account).Preload(\"Currency\").Preload(\"User\").Find(&account, account.Id)\n\tc.IndentedJSON(http.StatusCreated, account)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75337128/unable-to-insert-update-data-with-custom-type-in-postgresql-using-golang",
    "body": "// named slice type\ntype DayPriceModelList []DayPriceModel\n// the syntax for array of composites literal looks like\n// this: '{\"(foo,123)\", \"(bar,987)\"}'. So the implementation\n// below must return the slice contents in that format.\nfunc (l DayPriceModelList) Value() (driver.Value, error) {\n\t// nil slice? produce NULL\n\tif l == nil {\n\t\treturn nil, nil\n\t}\n\t// empty slice? produce empty array\n\tif len(l) == 0 {\n\t\treturn []byte{'{', '}'}, nil\n\t}\n\tout := []byte{'{'}\n\tfor _, v := range l {\n\t\t// This assumes that the date field in the pg composite\n\t\t// type accepts the default time.Time format. If that is\n\t\t// not the case then you simply provide v.Date in such a\n\t\t// format which the composite's field understand, e.g.,\n\t\t// v.Date.Format(\"<layout that the pg composite understands>\")\n\t\tx := fmt.Sprintf(`\"(%s,%f,%f,%f,%f)\",`,\n\t\t\tv.Date,\n\t\t\tv.High,\n\t\t\tv.Low,\n\t\t\tv.Open,\n\t\t\tv.Close)\n\t\tout = append(out, x...)\n\t}\n\tout[len(out)-1] = '}' // replace last \",\" with \"}\"\n\treturn out, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75254651/how-to-get-update-aliases-with-go-elasticsearch",
    "body": "type UpdateAliasRequest struct {\n\tActions []map[string]*UpdateAliasAction `json:\"actions\"`\n}\n// UpdateAliasAction represents an action in the Elasticsearch Aliases API.\ntype UpdateAliasAction struct {\n\tIndex string `json:\"index\"`\n\tAlias string `json:\"alias\"`\n}\nupdateActions := make([]map[string]*UpdateAliasAction, 0)\nremoveAction := make(map[string]*UpdateAliasAction)\nremoveAction[\"remove\"] = &UpdateAliasAction{\n\tIndex: \"old-index-00\",\n\tAlias: \"my-alias-name\",\n}\nupdateActions = append(updateActions, removeAction)\naddAction := make(map[string]*UpdateAliasAction)\naddAction[\"add\"] = &UpdateAliasAction{\n\tIndex: \"new-index-00\",\n\tAlias: \"my-alias-name\",\n}\nupdateActions = append(updateActions, addAction)\njsonBody, err := json.Marshal(&UpdateAliasRequest{\n\t\tActions: updateActions,\n})\nif err != nil {\n\tlog.Fatal(err)\n}\n// make API request\nres, err := s.client.Indices.UpdateAliases(\n\tbytes.NewBuffer(jsonBody),\n\ts.client.Indices.UpdateAliases.WithContext(context.Background()),\n)\nif err != nil {\n\tlog.Fatal(err)\n}\n// ...parse response"
  },
  {
    "url": "https://stackoverflow.com/questions/75155333/gorm-delete-with-clauses-sqlmock-test",
    "body": "package gormdelete\nimport (\n\t\"context\"\n\t\"time\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n)\ntype Users struct {\n\tEmail string\n}\nfunc Delete(ctx context.Context, gormDB *gorm.DB) error {\n\texpirationDate := time.Now().UTC().Add(-(48 * time.Hour))\n\tvar deletedUsers Users\n\tres := gormDB.WithContext(ctx).Table(\"my_users\").Clauses(clause.Returning{Columns: []clause.Column{{Name: \"email\"}}}).Where(\"created_at < ?\", expirationDate).Delete(&deletedUsers)\n\tif res.Error != nil {\n\t\treturn res.Error\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75155333/gorm-delete-with-clauses-sqlmock-test",
    "body": "package gormdelete\nimport (\n\t\"context\"\n\t\"database/sql/driver\"\n\t\"testing\"\n\t\"time\"\n\t\"github.com/DATA-DOG/go-sqlmock\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\n// this is taken directly from the docs\n// https://github.com/DATA-DOG/go-sqlmock#matching-arguments-like-timetime\ntype AnyTime struct{}\n// Match satisfies sqlmock.Argument interface\nfunc (a AnyTime) Match(v driver.Value) bool {\n\t_, ok := v.(time.Time)\n\treturn ok\n}\nfunc TestDelete(t *testing.T) {\n\tdb, mock, err := sqlmock.New()\n\tif err != nil {\n\t\tt.Fatalf(\"an error was not expected: %v\", err)\n\t}\n\tconn, _ := db.Conn(context.Background())\n\tgormDb, err := gorm.Open(postgres.New(postgres.Config{\n\t\tConn: conn,\n\t}))\n\trow := sqlmock.NewRows([]string{\"email\"}).AddRow(\"test@example.com\")\n\tmock.ExpectBegin()\n\tmock.ExpectQuery(\"DELETE FROM \\\"my_users\\\" WHERE created_at < ?\").WithArgs(AnyTime{}).WillReturnRows(row)\n\tmock.ExpectCommit()\n\terr = Delete(context.Background(), gormDb)\n\tassert.Nil(t, err)\n\tif err = mock.ExpectationsWereMet(); err != nil {\n\t\tt.Errorf(\"not all expectations were met: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75054327/max-rate-limit-of-stackoverflow",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/gocolly/colly/v2\"\n)\nfunc finish() {\n\tfmt.Println(\"Finish\")\n}\nfunc main() {\n\tc := colly.NewCollector(\n\t\tcolly.AllowedDomains(\"stackoverflow.com\"),\n\t\tcolly.MaxDepth(1),\n\t\tcolly.Async(true),\n\t\t// colly.Debugger(&debug.LogDebugger{}),\n\t)\n\tc.Limit(&colly.LimitRule{DomainGlob: \"*stackoverflow.*\", Parallelism: 8, Delay: 1 * time.Second})\n\tc.OnRequest(func(r *colly.Request) {\n\t\tr.Headers.Set(\"User-Agent\", \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\")\n\t})\n\tc.OnError(func(_ *colly.Response, err error) {\n\t\tlog.Println(\"Something went wrong:\", err)\n\t})\n\tc.OnResponse(func(r *colly.Response) {\n\t\tfmt.Println(\"Visited\", r.Request.URL)\n\t})\n\tc.OnHTML(\"#questions\", func(e *colly.HTMLElement) {\n\t\te.ForEach(\".s-post-summary.js-post-summary\", func(i int, el *colly.HTMLElement) {\n\t\t\tlink := el.ChildAttr(\"a[href]\", \"href\")\n\t\t\te.Request.Visit(\"https://stackoverflow.com\" + link)\n\t\t})\n\t})\n\tfor i := 0; i <= 29; i++ {\n\t\tlink := \"https://stackoverflow.com/questions?tab=votes&page=\" + strconv.Itoa(i)\n\t\tc.Visit(link)\n\t}\n\tc.Wait()\n\tfinish()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74949682/web-scrapping-using-golang-colly-how-to-handle-xml-path-not-found",
    "body": "func (p *parser) parseNodeTest(n node, axeTyp string) (opnd node) {\n\tswitch p.r.typ {\n\tcase itemName:\n\t\tif p.r.canBeFunc && isNodeType(p.r) {\n\t\t\tvar prop string\n\t\t\tswitch p.r.name {\n\t\t\tcase \"comment\", \"text\", \"processing-instruction\", \"node\":\n\t\t\t\tprop = p.r.name\n\t\t\t}\n\t\t\tvar name string\n\t\t\tp.next()\n\t\t\tp.skipItem(itemLParens)\n\t\t\tif prop == \"processing-instruction\" && p.r.typ != itemRParens {\n\t\t\t\tcheckItem(p.r, itemString)\n\t\t\t\tname = p.r.strval\n\t\t\t\tp.next()\n\t\t\t}\n\t\t\tp.skipItem(itemRParens)\n\t\t\topnd = newAxisNode(axeTyp, name, \"\", prop, n)\n\t\t} else {\n\t\t\tprefix := p.r.prefix\n\t\t\tname := p.r.name\n\t\t\tp.next()\n\t\t\tif p.r.name == \"*\" {\n\t\t\t\tname = \"\"\n\t\t\t}\n\t\t\topnd = newAxisNode(axeTyp, name, prefix, \"\", n)\n\t\t}\n\tcase itemStar:\n\t\topnd = newAxisNode(axeTyp, \"\", \"\", \"\", n)\n\t\tp.next()\n\tdefault:\n\t\tpanic(\"expression must evaluate to a node-set\")\n\t}\n\treturn opnd\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74939200/how-to-print-out-2d-ascii-letters-horizontally",
    "body": "import (\n    \"fmt\"\n    \"os\"\n    \"strings\"\n)\ntype letter struct {\n\tLetter string\n\tAscii  int\n\tTable  []string\n}\nfunc mapFont(font string) ([]letter, error) {\n\treadFile, err := os.ReadFile(font)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not read the content in the file: %v\", err)\n\t}\n\tslice := strings.Split(string(readFile), \"\\n\")\n\tletters := make([]letter, 0)\n\tindex := 31\n\tfor _, row := range slice {\n\t\tif row == \"\" {\n\t\t\tindex++\n\t\t\tcontinue\n\t\t}\n\t\tgrid := make([]string, 0)\n\t\tfor _, char := range row {\n\t\t\tgrid = append(grid, string(char))\n\t\t}\n\t\tletters = append(letters, letter{\n\t\t\tLetter: string(index),\n\t\t\tAscii:  index,\n\t\t\tTable:  grid,\n\t\t})\n\t}\n\treturn letters, nil\n}\nfunc mapInput(input string, letters []letter) ([]letter, error) {\n\tlines := strings.Split(input, \"\\\\n\")\n\toutput := make([]letter, 0)\n\tfor _, line := range lines {\n\t\tcharacters := []rune(line)\n\t\tif line != \"\" {\n\t\t\tfor _, ch := range characters {\n\t\t\t\tif ch >= 32 && ch <= 126 {\n\t\t\t\t\tfor _, v := range letters {\n\t\t\t\t\t\tif rune(v.Ascii) == ch {\n\t\t\t\t\t\t\toutput = append(output, v)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn nil, fmt.Errorf(\"input includes non ascii character(s), please use ascii character(s)\")\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutput = append(output, letter{})\n\t\t}\n\t}\n\treturn output, nil\n}\nfunc printInput(str string, letter []letter) []string {\n\tvar pixelRows []string\n\tfor row := 0; row < 8; row++ {\n\t\tpixelRow := \"\"\n\t\tfor letterIndex := 0; letterIndex < len(str); letterIndex++ {\n\n\t\t\tcharacter, _ := mapInput(string(str[letterIndex]), letter)\n\t\t\tfor column := 0; column < len(character[row].Table); column++\n\t\t\t\tpixelRow = pixelRow + character[row].Table[column]\n\t\t\t}\n\t\t}\n\t\tpixelRows = append(pixelRows, pixelRow)\n\t}\n\treturn pixelRows\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74902091/vscode-debug-breakpoint-passed-over",
    "body": "[Trace - 09:55:31.99] client -> {\n  \"command\":\"setBreakpoints\",\n  \"arguments\":{\n     \"source\": {\"name\":\"main.go\",\"path\":\"/project/demo/main.go\"},\n     \"lines\":[10,14],\"breakpoints\":[{\"line\":10},{\"line\":14}],\n     \"sourceModified\":false},\n  \"type\":\"request\",\"seq\":3}\n...\n[Trace - 09:55:31.101] client  <- {\n  \"seq\":0,\n  \"type\":\"response\",\n  \"request_seq\":3,\n  \"success\":true,\n  \"command\":\"setBreakpoints\",\n  \"body\":{\n    \"breakpoints\":\n      [\n        {\"verified\":false,\n         \"message\":\"could not find statement at /project/demo/main.go:10, please use a line with a statement\",\n         \"source\":{}},\n        {\"id\":2,\"verified\":true,\n         \"source\": {\"name\":\"main.go\",\"path\":\"/project/demo/main.go\"},\"line\":14}]}}"
  },
  {
    "url": "https://stackoverflow.com/questions/74885601/what-could-be-a-unit-test-case-for-the-s3-sqs-event-when-unmarshalling-json-to-s",
    "body": "package unmarshaltest\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestUnmarshal(t *testing.T) {\n\tt.Run(\"Unmarshal_NotEmpty_Message\", func(t *testing.T) {\n\t\tvar sqsMsg events.SQSMessage\n\t\tsqsEventRaw := `{ \"messageId\": \"19dd0b57-b21e-4ac1-bd88-01bbb068cb78\", \"receiptHandle\": \"MessageReceiptHandle\", \"body\": \"My own event payload!\", \"attributes\": { \"ApproximateReceiveCount\": \"1\", \"SentTimestamp\": \"1523232000000\", \"SenderId\": \"123456789012\", \"ApproximateFirstReceiveTimestamp\": \"1523232000001\" }, \"messageAttributes\": {}, \"md5OfBody\": \"4d1d0024b51659ad8c3725f9ba7e2471\", \"eventSource\": \"aws:sqs\", \"eventSourceARN\": \"arn:aws:sqs:us-east-1:123456789012:MyQueue\", \"awsRegion\": \"us-east-1\" }`\n\t\tjson.Unmarshal([]byte(sqsEventRaw), &sqsMsg)\n\t\tres, err := Unmarshal(sqsMsg)\n\t\tassert.Equal(t, \"My own event payload!\", res)\n\t\tassert.Nil(t, err)\n\t})\n\tt.Run(\"Unmarshal_Empty_Message\", func(t *testing.T) {\n\t\tres, err := Unmarshal(events.SQSMessage{})\n\t\tassert.Equal(t, \"\", res)\n\t\tassert.NotNil(t, err)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74883746/golang-reflect-iterate-through-interface",
    "body": "func SomeFunction(data interface{}) ([]byte, error) {\n\tsomeFunctionInner(reflect.ValueOf(data))\n\treturn json.Marshal(data)\n}\nfunc someFunctionInner(v reflect.Value) {\n\tif v.Kind() == reflect.Pointer {\n\t\tv = v.Elem()\n\t}\n\tfor i := 0; i < v.NumField(); i++ {\n\t\tvField := v.Field(i)\n\t\tswitch vField.Kind() {\n\t\tcase reflect.Slice:\n\t\t\tif vField.IsNil() {\n\t\t\t\tvField.Set(reflect.MakeSlice(vField.Type(), 0, 0))\n\t\t\t} else {\n\t\t\t\tfor j := 0; j < vField.Len(); j++ {\n\t\t\t\t\tvFieldInner := vField.Index(j)\n\t\t\t\t\tif vFieldInner.Kind() != reflect.Struct &&\n\t\t\t\t\t\t(vFieldInner.Kind() != reflect.Pointer || vFieldInner.Elem().Kind() != reflect.Struct) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tsomeFunctionInner(vFieldInner.Index(j))\n\t\t\t\t}\n\t\t\t}\n\t\tcase reflect.Pointer, reflect.Struct:\n\t\t\tsomeFunctionInner(vField)\n\t\tdefault:\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74867271/ignore-a-line-containing-a-pattern-from-a-long-text-file-in-go",
    "body": "func filterFile(f, pattern string) (*bytes.Buffer, error) {\n\trfd, err := os.Open(f)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif err := rfd.Close(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\treader := bufio.NewReader(rfd)\n\treturn filter(reader, []byte(pattern), 1024*1024)\n}\n// chunkSize must be larger than the longest line\n// a reasonable size is probably >= 64K\nfunc filter(reader io.Reader, pattern []byte, chunkSize int) (*bytes.Buffer, error) {\n\tvar bs []byte\n\tbuffer := bytes.NewBuffer(bs)\n\tchunk := make([]byte, chunkSize)\n\tvar remaining []byte\n\tfor lastChunk := false; !lastChunk; {\n\t\tn, err := readChunk(reader, chunk, remaining, chunkSize)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tlastChunk = true\n\t\t\t} else {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t\tremaining = remaining[:0]\n\t\tif !lastChunk {\n\t\t\tfor i := n - 1; i > 0; i-- {\n\t\t\t\tif chunk[i] == '\\n' {\n\t\t\t\t\tremaining = append(remaining, chunk[i+1:n]...)\n\t\t\t\t\tn = i + 1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ts := 0\n\t\tfor s < n {\n\t\t\thit := bytes.Index(chunk[s:n], pattern)\n\t\t\tif hit < 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\thit += s\n\t\t\tstartOfLine := hit\n\t\t\tfor ; startOfLine > 0; startOfLine-- {\n\t\t\t\tif chunk[startOfLine] == '\\n' {\n\t\t\t\t\tstartOfLine++\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tendOfLine := hit + len(pattern)\n\t\t\tfor ; endOfLine < n; endOfLine++ {\n\t\t\t\tif chunk[endOfLine] == '\\n' {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tendOfLine++\n\t\t\t_, err = buffer.Write(chunk[s:startOfLine])\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\ts = endOfLine\n\t\t}\n\t\tif s < n {\n\t\t\t_, err = buffer.Write(chunk[s:n])\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t}\n\t}\n\treturn buffer, nil\n}\nfunc readChunk(reader io.Reader, chunk, remaining []byte, chunkSize int) (int, error) {\n\tcopy(chunk, remaining)\n\tr := len(remaining)\n\tfor r < chunkSize {\n\t\tn, err := reader.Read(chunk[r:])\n\t\tr += n\n\t\tif err != nil {\n\t\t\treturn r, err\n\t\t}\n\t}\n\treturn r, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74861701/emersion-go-imap-imap-fetchrfc822-invalid-memory-address-or-nil-pointer-deref",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/emersion/go-imap\"\n\t\"github.com/emersion/go-imap/client\"\n)\nfunc FetchEMail(server string, username string, password string) error {\n\t// Connect to Server\n\tlog.Println(\"Connecting to server...\")\n\tc, err := client.Dial(server)\n\tlog.Println(\"Connected to \" + server)\n\tdefer c.Logout()\n\t// check if connection successful\n\tif err != nil {\n\t\tlog.Println(\"In connection Error\")\n\t\treturn err\n\t}\n\t// Login\n\tlog.Println(\"Logging in...\")\n\terr = c.Login(username, password)\n\tlog.Println(\"Logged in as \" + username)\n\t// check if login successful\n\tif err != nil {\n\t\tlog.Println(\"In login Error\")\n\t\treturn err\n\t}\n\t// Select INBOX\n\tlog.Println(\"Selecting INBOX...\")\n\tmbox, err := c.Select(\"INBOX\", false)\n\tlog.Println(\"Selected INBOX\")\n\t// check if select successful\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Fetch all messages\n\tlog.Println(\"Fetching all messages...\")\n\tseqset := new(imap.SeqSet)\n\tseqset.AddRange(1, mbox.Messages)\n\titems := []imap.FetchItem{imap.FetchRFC822, imap.FetchEnvelope}\n\tmessages := make(chan *imap.Message, 10)\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tdone <- c.Fetch(seqset, items, messages)\n\t}()\n\tfor msg := range messages {\n\t\tfmt.Printf(\"suject: %v\\n\", msg.Envelope.Subject)\n\t}\n\t// check if fetch successful\n\tif err := <-done; err != nil {\n\t\tlog.Println(\"In fetch Error\")\n\t\treturn err\n\t}\n\tlog.Println(\"Run Successful - Terminating...\")\n\treturn nil\n}\nfunc main() {\n\terr := FetchEMail(\"xxxxxxx\", \"xxxxx\", \"xxxxx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74850202/split-the-text-and-get-an-array-of-strings-by-space-and-get-an-array-of-strings",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n)\nfunc main() {\n\tprettyPrint(split([]byte(\"1234567 123 12345 1234567\"), 5))\n}\nfunc prettyPrint(b [][]byte) {\n\tfor _, a := range b {\n\t\tfmt.Println(string(a))\n\t}\n}\nfunc split(b []byte, splitLength int) [][]byte {\n\tcurrent := new(bytes.Buffer)\n\tvar bSlice [][]byte\n\tcounter := 0\n\tshouldTerminate := false\n\tfor i, c := range b {\n\t\tif shouldTerminate == true && c == byte(32) {\n\t\t\tcounter = 0\n\t\t\tshouldTerminate = false\n\t\t\tbSlice = append(bSlice, current.Bytes())\n\t\t\tcurrent = new(bytes.Buffer)\n\t\t\tcontinue\n\t\t}\n\t\tcounter++\n\t\tcurrent.Write([]byte{c})\n\t\tif counter > splitLength {\n\t\t\tshouldTerminate = true\n\t\t}\n\t\tif i == len(b)-1 {\n\t\t\tbSlice = append(bSlice, current.Bytes())\n\t\t}\n\t}\n\treturn bSlice\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74815846/testing-gorm-with-go-sqlmock-issue-comparing-queries-with-mock-expectquery-and-r",
    "body": "// ... omitted for brevity\nfunc TestSuccessGetTransactionByID(t *testing.T) {\n\tdb, mock, err := sqlmock.New()\n\tassert.NoError(t, err)\n\tgdb, err := gorm.Open(mysql.New(mysql.Config{\n\t\tConn:                      db,\n\t\tSkipInitializeWithVersion: true,\n\t}), &gorm.Config{})\n\tassert.NoError(t, err)\n\trows := sqlmock.NewRows([]string{\"id\", \"buyer_id\", \"seller_id\", \"item_id\", \"message_id\", \"expired_date\", \"created_at\"}).AddRow(2, 2, 5, 2, 2, \"2022-09-010 01:01:00\", \"2022-09-08 01:01:00\")\n\tmock.ExpectQuery(regexp.QuoteMeta(\"SELECT * FROM `transaction` WHERE id = ?\")).WithArgs(2).WillReturnRows(rows)\n\trepo := DefaultClient(gdb)\n\tactualSectionList, _ := repo.GetTransactionByID(2)\n\tassert.Equal(t, successGetTransaction, actualSectionList, \"ambas listas deberian ser iguales\")\n\tassert.NoError(t, mock.ExpectationsWereMet())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74771556/how-to-filter-duplicate-system-messages-from-fsnotify",
    "body": "seenMap := make(map[string]bool)\ngo func() {\n\tfor {\n\t\tselect {\n\t\tcase event, ok := <-watcher.Events:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Println(\"event:\", event.Name, event.Op)\n\t\t\t_, seen := seenMap[event.Name]\n\t\t\tif !seen {\n\t\t\t\t// Writing in this way reduces some messages:\n\t\t\t\tif event.Op&fsnotify.Rename == fsnotify.Rename {\n\t\t\t\t\t// do ...\n\t\t\t\t} else if event.Op&fsnotify.Create == fsnotify.Create {\n\t\t\t\t\t// do ...\n\t\t\t\t} else if event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\t\t// do ...\n\t\t\t\t} else if event.Op&fsnotify.Remove == fsnotify.Remove {\n\t\t\t\t\t// do ...\n\t\t\t\t}\n\t\t\t\tseenMap[event.Name] = true\n\t\t\t}\n\t\tcase _, ok := <-watcher.Errors:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}()"
  },
  {
    "url": "https://stackoverflow.com/questions/74713578/recursively-parse-over-struct-from-dict-keys",
    "body": "func recurseKeys(keys []string, value string, v reflect.Value, s any, parent any) {\n\tif len(keys) == 1 {\n\t\t// We are at the end of the keys\n\t\t// Set the value\n\t\tvar val, err = TransformValue(s, keys[0], value)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tSetValue(s, keys[0], val)\n\t\treturn\n\t}\n\t// We are not at the end of the keys\n\t// We need to iterate over the struct\n\tfor i := 0; i < v.NumField(); i++ {\n\t\tif strings.EqualFold(v.Type().Field(i).Name, keys[0]) {\n\t\t\t// We found the field\n\t\t\t// Recurse with the next key\n\t\t\tif v.Field(i).IsZero() {\n\t\t\t\tvar newS reflect.Value\n\t\t\t\tif v.Field(i).Kind() == reflect.Ptr {\n\t\t\t\t\tnewS = reflect.New(v.Field(i).Type().Elem()).Elem()\n\t\t\t\t} else {\n\t\t\t\t\tnewS = reflect.New(v.Field(i).Type())\n\t\t\t\t}\n\t\t\t\t// Check if the field on the old struct is a pointer, if it is, we need to set the pointer\n\t\t\t\t// If it is not a pointer, we need to set the value\n\t\t\t\tif v.Field(i).Kind() == reflect.Ptr {\n\t\t\t\t\tv.Field(i).Set(newS.Addr())\n\t\t\t\t} else {\n\t\t\t\t\tv.Field(i).Set(newS.Elem())\n\t\t\t\t}\n\t\t\t}\n\t\t\tif v.Field(i).Kind() == reflect.Ptr {\n\t\t\t\trecurseKeys(keys[1:], value, v.Field(i), v.Field(i).Interface(), parent)\n\t\t\t} else {\n\t\t\t\trecurseKeys(keys[1:], value, v.Field(i), v.Field(i).Addr().Interface(), parent)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74645913/parse-nodejs-date-tostring-output-as-time-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\t// The date and time string you want to parse\n\tcreatedAtTimestamp := \"Mon Nov 21 2022 17:01:59 GMT+0530 (India Standard Time)\"\n\t// The format of the date and time string\n\tlayout := \"Mon Jan 02 2006 15:04:05 MST-0700 (India Standard Time)\"\n\t// Parse the date and time string\n\tparsedTime, err := time.Parse(layout, createdAtTimestamp)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t// Print the parsed time in RFC3339 format\n\tfmt.Println(parsedTime.Format(time.RFC3339))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74594670/how-to-validate-jwe-token-in-golang",
    "body": "package main\nimport (\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt\"\n\tjose_jwt \"gopkg.in/go-jose/go-jose.v2\"\n)\ntype CustomClaims struct {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n\tjwt.StandardClaims\n}\nfunc main() {\n\tprivateKey, err := rsa.GenerateKey(rand.Reader, 2048)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// generate token\n\ttoken, err := generateToken()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpublicKey := &privateKey.PublicKey\n\tencrypter, err := jose_jwt.NewEncrypter(jose_jwt.A256GCM, jose_jwt.Recipient{\n\t\tAlgorithm: jose_jwt.RSA_OAEP_256,\n\t\tKey:       publicKey,\n\t}, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tplainText := []byte(token)\n\tobject, err := encrypter.Encrypt(plainText)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tserialized := object.FullSerialize()\n\tobject, err = jose_jwt.ParseEncrypted(serialized)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdecrypted, err := object.Decrypt(privateKey)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(decrypted))\n\t// parse token\n\tclaims, err := ValidateToken(string(decrypted))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(len(claims))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74587204/specifying-gormunique-causing-preload-of-belongs-to-relation-a-problem",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n\t\"github.com/google/uuid\"\n\t_ \"github.com/lib/pq\"\n)\ntype Post struct {\n\tID     string `gorm:\"primaryKey\"`\n\tTitle  string `gorm:\"unique\"`\n\tUserID string\n\tUser   User\n}\ntype User struct {\n\tID   string `gorm:\"primaryKey\"`\n\tName string `gorm:\"unique\"`\n}\n// Code to create a Post with title & user input\nfunc CreatePost(db *gorm.DB, title string, u User) (Post, error) {\n\tid := uuid.NewString()\n\tb := Post{ID: id, Title: title, User: u}\n\tif err := db.Create(&b).Error; err != nil {\n\t\treturn Post{}, err\n\t}\n\treturn b, nil\n}\n// Code to get a Post, also preload its User field\nfunc GetOnePost(db *gorm.DB) (Post, error) {\n\tvar p Post\n\tif err := db.Model(&Post{}).Preload(\"User\").First(&p).Error; err != nil {\n\t\treturn Post{}, err\n\t}\n\treturn p, nil\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&User{})\n\tdb.AutoMigrate(&Post{})\n\tdefer db.Exec(\"DROP TABLE users\")\n\tdefer db.Exec(\"DROP TABLE posts\")\n\tuserId := uuid.NewString()\n\t_, err = CreatePost(db, \"Learn Go\", User{\n\t\tID:   userId,\n\t\tName: \"John Doe\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpost, err := GetOnePost(db)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// this leads to a Duplicate error SQLSTATE 23505 in DB\n\t// if err := db.Create(&User{\n\t// \tID:   uuid.NewString(),\n\t// \tName: \"John Doe\",\n\t// }).Error; err != nil {\n\t// \tpanic(err)\n\t// }\n\tfmt.Printf(\"post's details: %v\\n\", post)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74568315/when-writing-an-http-handler-do-we-have-to-listen-for-request-context-cancellat",
    "body": "func handleSomething(w http.ResponseWriter, r *http.Request) {\n\tctx := r.Context()\n\tfmt.Printf(\"%v - handleRequestCtx: start\\n\", time.Now())\n\tdone := make(chan error)\n\tgo func() {\n\t\tif err := doSomething(ctx); err != nil {\n\t\t\tfmt.Printf(\"%v - handleRequestCtx: error %v\\n\", time.Now(), err)\n\t\t\tdone <- err\n\t\t}\n\t\tdone <- nil\n\t}()\n\tselect {\n\tcase <-ctx.Done():\n\t\tfmt.Printf(\"%v - handleRequestCtx: cancelled\\n\", time.Now())\n\t\treturn\n\tcase err := <-done:\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"%v - handleRequestCtx: error: %v\\n\", time.Now(), err)\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"%v - handleRequestCtx: processed\\n\", time.Now())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74568315/when-writing-an-http-handler-do-we-have-to-listen-for-request-context-cancellat",
    "body": "func TestHandler(t *testing.T) {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/demo\", handleSomething)\n\tsrv := http.Server{\n\t\tAddr:    \":8000\",\n\t\tHandler: r,\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t}\n\t}()\n\tctx := context.Background()\n\tctx, cancel := context.WithTimeout(ctx, 1*time.Second) // request canceled\n\t// ctx, cancel := context.WithTimeout(ctx, 5*time.Second) // request processed\n\tdefer cancel()\n\treq, _ := http.NewRequestWithContext(ctx, http.MethodGet, \"http://localhost:8000/demo\", nil)\n\tclient := http.Client{}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t} else {\n\t\tfmt.Printf(\"res status code: %d\\n\", res.StatusCode)\n\t}\n\tsrv.Shutdown(ctx)\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74472827/undefined-error-in-go-client-when-listing-the-nodes",
    "body": "package main\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/util/homedir\"\n\t\"path/filepath\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n)\nfunc main() {\n\t// parse the .kubeconfig file\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// create the clientset\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tnodeList, err := clientset.CoreV1().Nodes().List(context.Background(), metav1.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, node := range nodeList.Items {\n\t\tfmt.Printf(\"%s\\n\", node.Name)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74459066/chromedp-how-to-retrieve-fcp-and-such-from-console",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"github.com/chromedp/chromedp\"\n)\ntype performancePaintTiming struct {\n\tEntryType string  `json:\"entryType\"`\n\tName      string  `json:\"name\"`\n\tDuration  int     `json:\"duration\"`\n\tStartTime float64 `json:\"startTime\"`\n}\nfunc main() {\n\tctx, cancel := chromedp.NewContext(context.Background(),\n\t\t// Enable the debug mode to see the CDP messages.\n\t\t// It's helpful to understand how CDP works.\n\t\t// But please don't enable it in Production Environment.\n\t\tchromedp.WithDebugf(log.Printf))\n\tdefer cancel()\n\t// I don't know why but it seems that Runtime.evaluate does not return\n\t// JSON object any more, so I have to stringified it into a string.\n\tjs := `\nconst paintTimings = performance.getEntriesByType('paint');\nconst fcp = paintTimings.find(({ name }) => name === \"first-contentful-paint\");\nJSON.stringify(fcp);`\n\tvar res string\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"https://www.bing.com/\"),\n\t\tchromedp.EvaluateAsDevTools(js, &res),\n\t); err != nil {\n\t\tpanic(err)\n\t}\n\tvar fcp performancePaintTiming\n\tif err := json.Unmarshal([]byte(res), &fcp); err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"%#v\", fcp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74383816/how-to-get-goroutine-id-with-ebpf",
    "body": "SEC(\"uprobe/runtime.newproc1\")\n    int uprobe_runtime_newproc1(struct pt_regs *ctx) {\n    \tu32 key     = 2;\n    \tu64 initval = 1, *valp;\n\n    \tvalp = bpf_map_lookup_elem(&uprobe_map, &key);\n    \tif (!valp) {\n    \t\tbpf_map_update_elem(&uprobe_map, &key, &initval, BPF_ANY);\n    \t\treturn 0;\n    \t}\n    \t__sync_fetch_and_add(valp, 1);\n\n        // retrieve output parameter\n        struct g gs;\n        bpf_probe_read(&gs, sizeof(gs), (void *)PT_REGS_PARM1(ctx));\n        bpf_printk(\"uprobe_runtime_newproc1 bpf_printk bpf_probe_read goroutine_struct.goid: %lld\", gs.goid);\n\n    \treturn 0;\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/74355068/gorm-query-with-two-or-more-models",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Book struct {\n\tgorm.Model\n\tTitle       string\n\tDescription string\n\tAuthorID    uint\n\tAuthor      Author\n}\ntype Author struct {\n\tgorm.Model\n\tFirstName string\n\tLastName  string\n\tBooks     []Book\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Book{})\n\tdb.AutoMigrate(&Author{})\n\tbook1 := &Book{Title: \"Go\", Description: \"Intro to Golang\", AuthorID: 1}\n\tbook2 := &Book{Title: \"GORM\", Description: \"Intro to GORM\", AuthorID: 1}\n\tauthor := &Author{FirstName: \"John\", LastName: \"Doe\", Books: []Book{*book1, *book2}}\n\tdb.Create(author)\n\tvar books []Book\n\tdb.Preload(\"Author\").Where(\"title=?\", \"Go\").Find(&books)\n\tfor _, v := range books {\n\t\tfmt.Println(\"book 1:\")\n\t\tfmt.Printf(\"title: %q\\n\\n\", v.Title)\n\t\tfmt.Printf(\"author details:\\n\")\n\t\tfmt.Printf(\"first name: %q\\n\", v.Author.FirstName)\n\t\tfmt.Printf(\"last name: %q\\n\", v.Author.LastName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74347375/go-cmp-how-to-define-custom-equality-for-a-map-with-a-struct-as-its-keys",
    "body": "type MapKeyInt map[MapKey]int\nfunc (m MapKeyInt) Equal(other MapKeyInt) bool {\n\tif len(m) != len(other) {\n\t\treturn false\n\t}\n\tkeys, keysOther := make([]MapKey, 0), make([]MapKey, 0)\n\tvalues, valuesOther := make([]int, 0), make([]int, 0)\n\tfor k, v := range m {\n\t\tkeys = append(keys, k)\n\t\tvalues = append(values, v)\n\t}\n\tfor k, v := range other {\n\t\tkeysOther = append(keysOther, k)\n\t\tvaluesOther = append(valuesOther, v)\n\t}\n\tfor i := 0; i < len(m); i++ {\n\t\tif (keys[i].dog.Name != keysOther[i].dog.Name) || (keys[i].cat.Name != keysOther[i].cat.Name) {\n\t\t\treturn false\n\t\t}\n\t\tif values[i] != valuesOther[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74273483/how-to-unmarshal-mapstringdynamodb-attributevalue",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"dynamodbmovie/utils\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n)\nvar cfg *aws.Config\nfunc main() {\n\tcfg, _ = utils.GetAwsConfig()\n\tdynaClient := dynamodb.NewFromConfig(*cfg)\n\t// create table\n\tdynaClient.CreateTable(context.TODO(), &dynamodb.CreateTableInput{\n\t\tTableName: aws.String(\"movies\"),\n\t\tAttributeDefinitions: []types.AttributeDefinition{\n\t\t\t{\n\t\t\t\tAttributeName: aws.String(\"user\"),\n\t\t\t\tAttributeType: types.ScalarAttributeTypeS,\n\t\t\t},\n\t\t},\n\t\tKeySchema: []types.KeySchemaElement{\n\t\t\t{\n\t\t\t\tAttributeName: aws.String(\"user\"),\n\t\t\t\tKeyType:       types.KeyTypeHash,\n\t\t\t},\n\t\t},\n\t\tBillingMode: types.BillingModePayPerRequest,\n\t})\n\tdefer func() {\n\t\tdynaClient.DeleteTable(context.TODO(), &dynamodb.DeleteTableInput{\n\t\t\tTableName: aws.String(\"movies\"),\n\t\t})\n\t}()\n\t// load table\n\tdynaClient.PutItem(context.TODO(), &dynamodb.PutItemInput{\n\t\tTableName: aws.String(\"movies\"),\n\t\tItem: map[string]types.AttributeValue{\n\t\t\t\"user\":        &types.AttributeValueMemberS{Value: \"user1\"},\n\t\t\t\"movies_list\": &types.AttributeValueMemberS{Value: `[{\"movie\":\"Joker\",\"year\":\"2019\"}, {\"movie\":\"Cruella\",\"year\":\"2021\"}]`},\n\t\t},\n\t})\n\t// read table\n\tvar filmString string\n\tres, _ := dynaClient.GetItem(context.TODO(), &dynamodb.GetItemInput{\n\t\tTableName: aws.String(\"movies\"),\n\t\tKey: map[string]types.AttributeValue{\n\t\t\t\"user\": &types.AttributeValueMemberS{Value: \"user1\"},\n\t\t},\n\t})\n\tattributevalue.Unmarshal(res.Item[\"movies_list\"], &filmString)\n\tmyDb := &Database{\n\t\tUser: \"user1\",\n\t}\n\tjson.Unmarshal([]byte(filmString), &myDb.List)\n\tfmt.Println(len(myDb.List))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74231036/golang-elastic-search-security-auto-configuration-http-ca-certificate-is-not-tr",
    "body": "\trootCAs, _ := x509.SystemCertPool()\n\tif rootCAs == nil {\n\t\trootCAs = x509.NewCertPool()\n\t}\n\t// Read the cert file\n\tcerts, err := os.ReadFile(\"localCertFile\")\n\t// add our cert to the system pool\n\trootCAs.AppendCertsFromPEM(certs)\n\tvar _elasticSearchConfiguration = elasticsearch.Config{\n\t\tAddresses: []string{\n\t\t\t\"https://localhost:9200\",\n\t\t},\n\t\tUsername: \"elastic\",\n\t\tPassword: \"123456\",\n\t\tTransport: &http.Transport{\n\t\t\tMaxIdleConnsPerHost:   10,\n\t\t\tResponseHeaderTimeout: time.Second,\n\t\t\tDialContext:           (&net.Dialer{Timeout: time.Second}).DialContext,\n\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\tRootCAs:    rootCAs,\n\t\t\t\tMinVersion: tls.VersionTLS12,\n\t\t\t},\n\t\t},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/74070169/go-mockgen-mocked-function-not-called",
    "body": "func TestConfigure(t *testing.T) {\n\tt.Run(\"ConfigureWithMock\", func(t *testing.T) {\n\t\tos.Args[1] = \"bob\"\n\t\tos.Args[2] = \"1234\"\n\t\tctrl := gomock.NewController(t)\n\t\tmockValidator := mocks.NewMockValidator(ctrl)\n\t\t//mockValidator.EXPECT().ValidateUser().AnyTimes() // zero more calls, so this will also pass.\n\t\tuserData := user.Data{UserID: \"testId\"}\n\t\tmockValidator.\n\t\t\tEXPECT().\n\t\t\tValidateUser(\"bob\", \"1234\").\n\t\t\tReturn(&userData, nil).\n\t\t\tTimes(1) //(gomock.Any(), gomock.Any()) //(&userData, nil)\n\t\tConfigure(mockValidator)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74070169/go-mockgen-mocked-function-not-called",
    "body": "type Validator interface {\n\tValidateUser(name, password string) (*user.Data, error)\n}\ntype ValidationRequest struct {\n\tCommand string\n\t// Name     string\n\t// Password string\n}\nfunc (vr ValidationRequest) ValidateUser(name, password string) (*user.Data, error) {\n\tif name == \"bob\" && password == \"1234\" {\n\t\treturn &user.Data{UserID: \"123\", UserName: \"bsmith\", FirstName: \"Bob\", LastName: \"Smith\"}, nil\n\t}\n\treturn nil, fmt.Errorf(\"invalid credentials\")\n}\nfunc NewValidator() Validator {\n\treturn &ValidationRequest{}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73922373/is-there-a-way-to-add-a-yaml-node-to-an-existing-yaml-document-in-golang",
    "body": "package main\nimport (\n\t\"os\"\n\t\"gopkg.in/yaml.v3\"\n)\nvar input = []byte(`root:\n  entry1: val1`)\nfunc main() {\n\tvar document yaml.Node\n\tif err := yaml.Unmarshal(input, &document); err != nil {\n\t\tpanic(err)\n\t}\n\tdata := document.Content[0]\n\tvar rootVal *yaml.Node\n\tfor i := 0; i < len(data.Content); i += 2 {\n\t\tnode := data.Content[i]\n\t\tif node.Kind == yaml.ScalarNode && node.Value == \"root\" {\n\t\t\trootVal = data.Content[i+1]\n\t\t\tbreak\n\t\t}\n\t}\n\tif rootVal == nil {\n\t\tpanic(\"root key missing\")\n\t}\n\tfound := false\n\tfor i := 0; i < len(rootVal.Content); i += 2 {\n\t\tnode := rootVal.Content[i]\n\t\tif node.Kind != yaml.ScalarNode {\n\t\t\tcontinue\n\t\t}\n\t\tswitch node.Value {\n\t\tcase \"entry1\":\n\t\t\trootVal.Content[i+1].SetString(\"valUpdated\")\n\t\tcase \"entry2\":\n\t\t\tfound = true\n\t\t}\n\t}\n\tif !found {\n\t\tvar key, value yaml.Node\n\t\tkey.SetString(\"entry2\")\n\t\tvalue.SetString(\"newkey added\")\n\t\trootVal.Content = append(rootVal.Content, &key, &value)\n\t}\n\tout, err := yaml.Marshal(data)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tos.Stdout.Write(out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73793257/mongodb-servers-running-via-docker-cant-see-each-other-temporary-failure-in-na",
    "body": "#!/bin/bash\ndocker container rm -f mongo1 mongo2 mongo3\ndocker run -d -p 27017:27017 --name mongo1 --network mongoCluster mongo:latest mongod --replSet myReplicaSet --bind_ip_all\ndocker run -d -p 27018:27017 --name mongo2 --network mongoCluster mongo:latest mongod --replSet myReplicaSet --bind_ip_all\ndocker run -d -p 27019:27017 --name mongo3 --network mongoCluster mongo:latest mongod --replSet myReplicaSet --bind_ip_all\ndocker exec -it mongo1 mongosh --eval \"rs.initiate({\n _id: \\\"myReplicaSet\\\",\n members: [\n   {_id: 0, host: \\\"mongo1\\\"},\n   {_id: 1, host: \\\"mongo2\\\"},\n   {_id: 2, host: \\\"mongo3\\\"}\n ]\n})\""
  },
  {
    "url": "https://stackoverflow.com/questions/73793257/mongodb-servers-running-via-docker-cant-see-each-other-temporary-failure-in-na",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readpref\"\n)\nconst uri = \"mongodb://mongo1:27017/task?replicaSet=myReplicaSet&retryWrites=true&w=majority\"\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tclient, err := mongo.Connect(ctx, options.Client().ApplyURI(uri))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer func() {\n\t\tif err = client.Disconnect(ctx); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\tif err := client.Ping(ctx, readpref.Primary()); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"Successfully connected and pinged\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73762677/panic-gob-type-elliptic-p256curve-has-no-exported-fields",
    "body": "type Wallet struct {\n\tPrivateKey ecdsa.PrivateKey\n\tPublicKey  []byte\n}\nfunc (w *Wallet) Save() {\n\tfilename := filepath.Join(constcoe.Wallets, string(w.Address())+\".wlt\")\n\tprivKeyBytes, err := x509.MarshalECPrivateKey(&w.PrivateKey)\n\tutils.Handle(err)\n\tprivKeyFile, err := os.Create(filename)\n\tutils.Handle(err)\n\terr = pem.Encode(privKeyFile, &pem.Block{\n\t\t// Type:  \"EC PRIVATE KEY\",\n\t\tBytes: privKeyBytes,\n\t})\n\tutils.Handle(err)\n\tprivKeyFile.Close()\n}\nfunc LoadWallet(address string) *Wallet {\n\tfilename := filepath.Join(constcoe.Wallets, address+\".wlt\")\n\tif !utils.FileExists(filename) {\n\t\tutils.Handle(errors.New(\"no wallet with such address\"))\n\t}\n\tprivKeyFile, err := os.ReadFile(filename)\n\tutils.Handle(err)\n\tpemBlock, _ := pem.Decode(privKeyFile)\n\tutils.Handle(err)\n\tprivKey, err := x509.ParseECPrivateKey(pemBlock.Bytes)\n\tutils.Handle(err)\n\tpublicKey := append(privKey.PublicKey.X.Bytes(), privKey.PublicKey.Y.Bytes()...)\n\treturn &Wallet{\n\t\tPrivateKey: *privKey,\n\t\tPublicKey:  publicKey,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73463435/how-i-can-decode-aes-256-cfb",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/sha256\"\n\t\"log\"\n\t\"os\"\n\n\t\"golang.org/x/crypto/pbkdf2\"\n)\nfunc main() {\n\tfiencpkg, err := os.ReadFile(\"encpkg\")\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\tsalt := fiencpkg[8:16]\n\tciphertext := fiencpkg[16:]\n\tfiencpass, err := os.ReadFile(\"encpass\")\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n\tkeyIv := pbkdf2.Key(fiencpass, salt, 10000, 48, sha256.New)\n\tkey := keyIv[0:32]\n\tiv := keyIv[32:48]\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tstream := cipher.NewCFBDecrypter(block, iv)\n\tstream.XORKeyStream(ciphertext, ciphertext)\n\tos.WriteFile(\"x_go.txz\", ciphertext, 0777)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73454661/mock-sql-query-golang",
    "body": "// root package\ntype TokenStorage interface {\n\tGetToken(ctx context.Context, oldToken string) (string, error)\n}\n// yourtestfile_test.go\ntype TokenStorageStub struct {}\nfunc (t *TokenStorageStub) GetToken(ctx context.Context, oldToken string) (string, error) {\n\tb := make([]byte, 16)\n\tn, err := rand.Read(b)\n\tif n != len(b) || err != nil {\n\t\treturn \"\", fmt.Errorf(\"could not successfully read from the system CSPRNG.\")\n\t}\n\treturn hex.EncodeToString(b), nil\n}\n// postgres || mysql || sqlite package\n// TokenStorage impelements root interface using postgres.\ntype TokenStorage struct {\n\tdb ExtendedDB\n}\nfunc NewTokenStorage(db ExtendedDB) (*TokenStorage, error) {\n\tif db == nil {\n\t\treturn nil, errors.New(\"provided db handle is nil\")\n\t}\n\treturn &TokenStorage{db: db}, nil\n}\nfunc (s *TokenStorage) GetToken(ctx context.Context, oldToken string) (string, error) {\n\tconst query = `SELECT ...`\n\tvar token string\n\tif err := s.db.QueryRowContext(ctx, query, oldToken).Scan(&token); err != nil {\n\t\tif errors.Is(err, sql.ErrNoRows) {\n\t\t\treturn nil, rootpkg.ErrTokenNotFound\n\t\t}\n\t\treturn nil, fmt.Errorf(\"postgres: problem while get token using old token: %w\", err)\n\t}\n\treturn token, nil\n}\n// Queryer is an interface used for selection queries.\ntype Queryer interface {\n\tQueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)\n\tQueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row\n}\n// Execer is an interface used for executing queries.\ntype Execer interface {\n\tExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)\n}\n// ExtendedDB is a union interface which can query, and exec, with Context.\ntype ExtendedDB interface {\n\tQueryer\n\tExecer\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73343208/golang-problem-with-creating-docker-image",
    "body": "Status: Downloaded newer image for golang:1.16-alpine\n ---> 7642119cd161\nStep 2/9 : WORKDIR /app\n ---> Running in f8ad2994262c\nRemoving intermediate container f8ad2994262c\n ---> 6e079707cc3e\nStep 3/9 : COPY go.mod .\n ---> c79a0cc04ff5\nStep 4/9 : COPY . .\n ---> 897027112e73\nStep 5/9 : RUN go build -o main ./cmd/api\n ---> Running in eb4579f1c339\nRemoving intermediate container eb4579f1c339\n ---> e41f6e5542a4\nStep 6/9 : WORKDIR /dist\n ---> Running in 92115865d1ec\nRemoving intermediate container 92115865d1ec\n ---> 8152a0ebe4bc\nStep 7/9 : RUN cp /app/main .\n ---> Running in 5c68cb195826\nRemoving intermediate container 5c68cb195826\n ---> 6f2e1fb8a611\nStep 8/9 : EXPOSE 3000\n ---> Running in fba77820c1ec\nRemoving intermediate container fba77820c1ec\n ---> 182a624d807a\nStep 9/9 : CMD [\"/dist/main\"]\n ---> Running in 164ba25694bd\nRemoving intermediate container 164ba25694bd\n ---> 7cf22cffc472\nSuccessfully built 7cf22cffc472\nSuccessfully tagged bla:latest"
  },
  {
    "url": "https://stackoverflow.com/questions/73341110/send-stdout-of-running-command-to-its-stdin-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os/exec\"\n)\nfunc main() {\n\tr, w := io.Pipe()\n\tsr := &readSpy{r: r}\n\twr := &writeSpy{w: w}\n\tcmd := exec.Command(\"./test-program\")\n\tcmd.Stdin = sr\n\tcmd.Stdout = wr\n\tcmd.Run()\n}\ntype readSpy struct {\n\tr io.Reader\n}\nfunc (s *readSpy) Read(d []byte) (int, error) {\n\tsize, err := s.r.Read(d)\n\tfmt.Println(\"readSpy read\", string(d[:size]))\n\treturn size, err\n}\ntype writeSpy struct {\n\tw io.Writer\n}\nfunc (s *writeSpy) Write(d []byte) (int, error) {\n\tsize, err := s.w.Write(d)\n\tfmt.Println(\"writeSpy wrote\", string(d[:size]))\n\treturn size, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73256220/how-to-unmarshal-objects-inside-array",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\nconst rawJSON = `[\n  {\n    \"name\": \"London\",\n    \"lat\": 51.5073219,\n    \"lon\": -0.1276474,\n    \"country\": \"GB\",\n    \"state\": \"England\"\n  }\n]`\ntype ResponseData struct {\n\tName    string  `json:\"name\"`\n\tLat     float32 `json:\"lat\"`\n\tLon     float32 `json:\"lon\"`\n\tCountry string  `json:\"country\"`\n\tState   string  `json:\"state\"`\n}\nfunc main() {\n\tvar data []ResponseData\n\terr := json.Unmarshal([]byte(rawJSON), &data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif len(data) == 1 { // Would also work for 2+ but then you are throwing data away...\n\t\tfmt.Println(\"test1\", data[0].Lat, data[0].Lon)\n\t}\n\tfor _, e := range data {\n\t\tfmt.Println(\"test2\", e.Lat, e.Lon)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73042358/cross-compilation-go-and-goc-symbol-not-found-error-message-on-arm",
    "body": "export STAGING_DIR=/home/ro/work/openwrt/staging_dir\nexport TOOLCHAIN_DIR=$STAGING_DIR/toolchain-arm_cortex-a7+neon-vfpv4_gcc-11.3.0_musl_eabi\nexport LDCFLAGS=$TOOLCHAIN_DIR/lib\nexport LD_LIBRARY_PATH=$TOOLCHAIN_DIR/lib\nexport LDFLAGS=\"-L${TOOLCHAIN_DIR}/lib\"\nexport CGO_LDFLAGS=\"-Xlinker -rpath=${TOOLCHAIN_DIR}/lib/libc.so -static\"\nexport CFLAGS=\"-I${TOOLCHAIN_DIR}/include\"\nexport CC=arm-openwrt-linux-gcc-11.3.0\nexport PATH=$TOOLCHAIN_DIR/bin:$PATH\nexport GOARCH=arm\nexport CROSS_COMPILE=arm-openwrt-linux-gcc\nexport CGO_ENABLED=1\nexport GOOS=linux\nexport GOARM=7"
  },
  {
    "url": "https://stackoverflow.com/questions/72709390/how-to-filter-dataframe-base-on-some-columns-value-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/go-gota/gota/series\"\n\t\"github.com/go-gota/gota/dataframe\"\n)\nfunc main() {\n\tcsvStr := `\nname,price,pay_time,refund_time\njob,19.0,20220622 12:23:23,20220622 13:23:23\nkim,0,20220623 12:23:23,20220623 13:23:23\n`\n\tdf := dataframe.ReadCSV(strings.NewReader(csvStr))\n\tdf = df.Filter(dataframe.F{Colname: \"price\", Comparator: series.GreaterEq, Comparando: 0})\n\tvar (\n\t\tfinalTimeList []string\n\t)\n\tfor i := 0; i < df.Nrow(); i++ {\n\t\tpayTime := df.Elem(i, 2).Val().(string)\n\t\tprice := df.Elem(i, 1).Val().(float64)\n\t\tif price == 0 {\n\t\t\tpayTime = df.Elem(i, 3).Val().(string)\n\t\t}\n\t\tfinalTimeList = append(finalTimeList, payTime)\n\t}\n\tdf = df.Mutate(series.New(finalTimeList, series.String, \"final_time\"))\n\tdf = df.Drop([]string{\"pay_time\", \"refund_time\"})\n\tfmt.Println(\"df -->\", df)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72673612/access-information-about-the-request-and-response-payloads-in-grpc-gos-stat-han",
    "body": "type recorderCtxKey struct{}\ntype recorder struct {\n\tsize   int64\n}\nfunc (sl *statsHandler) TagRPC(ctx context.Context, info *stats.RPCTagInfo) context.Context {\n\treturn context.WithValue(ctx, rpcStatCtxKey{}, &recorder{})\n}\nfunc (h *statsHandler) HandleRPC(ctx context.Context, rpcStats stats.RPCStats) {\n    switch stat := rpcStats.(type) {\n    case *stats.InPayload:\n        r, _ := ctx.Value(recorderContextKey{}).(*Recorder)\n        r.size += stat.WireLength\n    case *stats.End:\n        durationMs := stat.EndTime.Sub(stat.BeginTime).Seconds() * 1000.0\n        r, _ := ctx.Value(recorderContextKey{}).(*Recorder)\n        # use r.size #\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72408917/is-it-possible-to-match-a-string-with-two-equal-parts-and-a-separator",
    "body": "package main\nimport (\n  \"fmt\"\n  \"regexp\"\n)\nfunc regexMatch(str string) bool {\n  pattern1 := regexp.MustCompile(`^([^;]+);`)\n  pattern2 := regexp.MustCompile(`;([^;]+)$`)\n  match1 := pattern1.FindString(str)\n  match2 := pattern2.FindString(str)\n  return match1[:len(match1)-1] == match2[1:]\n}\nfunc main() {\n  fmt.Println(regexMatch(\"foo;foo\"))  // true\n  fmt.Println(regexMatch(\"foobar;foobar\"))  // true\n  fmt.Println(regexMatch(\"foo;foobar\"))  // false\n  fmt.Println(regexMatch(\"foo;bar\"))  // false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72316712/search-for-keys-of-a-document-in-mongodb-and-golang",
    "body": "/* 1 */\n{\n    \"_id\" : \"1b836f704c884d28\",\n    \"type\" : \"url\",\n    \"value\" : \"smtp.clarinda.bluehornet.com\",\n    \"source\" : {\n        \"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.txt\" : 1.0\n    },\n    \"lastUpdate\" : \"2022-05-18 13:30:44.425104695 +0000 UTC m=+624.684836025\"\n}\n/* 2 */\n{\n    \"_id\" : \"1b836f704c884d29\",\n    \"type\" : \"url\",\n    \"value\" : \"smtp.clarinda.bluehornet.org\",\n    \"source\" : {\n        \"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.csv\" : 1.0\n    },\n    \"lastUpdate\" : \"2022-05-18 13:30:44.425104695 +0000 UTC m=+624.684836025\"\n}\n/* 3 */\n{\n    \"_id\" : \"1b836f704c884d30\",\n    \"type\" : \"url\",\n    \"value\" : \"smtp.clarinda.bluehornet.org\",\n    \"source\" : {\n        \"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.csv\" : 1.0,\n        \"https://hostfiles.frogeye.fr/firstparty-trackers-hosts.html\" : 2.0\n    },\n    \"lastUpdate\" : \"2022-05-18 13:30:44.425104695 +0000 UTC m=+624.684836025\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71999241/prometheus-unit-test-of-gauge-value-in-golang",
    "body": "func TestCollect(t *testing.T) {\n// setup dummy test data\n\tfetchFromDB = func() (ok bool, voltage float64, temp float64, power float64, frequency float64, etoday float64) {\n\t\treturn true, 123.1, 99.0, 567.8, 55.5, 789.0\n\t}\n\tcollector := newCollector()\n\tch := make(chan prometheus.Metric)\n\tgo collector.Collect(ch)\n\texpected := strings.NewReader(\n\t\t`# HELP voltage voltage\n# TYPE voltage gauge\nvoltage 123.1\n# HELP EToday Total Power today Wh\n# TYPE EToday gauge\nEToday 789.0\n# HELP Frequency AC Frequency\n# TYPE Frequency gauge\nFrequency 55.5\n# HELP Power power\n# TYPE Power gauge\nPower 567.8\n# HELP Temperature temp\n# TYPE Temperature gauge\nTemperature 99.0\n`)\n\terr := testutil.CollectAndCompare(collector, expected, \"voltage\", \"EToday\", \"Frequency\", \"Temperature\", \"Power\")\n\tif err != nil {\n\t\tt.Errorf(\"%s\", err.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71885769/go-countbits-exercise-n-strings-slices-performing-a-lot-better-than-log2n-math",
    "body": "// main_test.go\npackage main\nimport (\n    \"math/bits\"\n    \"testing\"\n)\n// Simple benchmarks to get started.\n// You could also try benchmarking different numbers to understand\n// performance differences. There is some inherit bias in benchmarking\n// sequential numbers starting from 0. You could try a list of 256 preset\n// random numbers. There are many options..\nfunc BenchmarkCountBitsString(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        dummyInt32 = countBitsString(uint32(i))\n    }\n}\nfunc BenchmarkCountBitsSmart(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        dummyInt32 = countBitsSmart(uint32(i))\n    }\n}\nfunc BenchmarkOnesCount(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        dummyInt = bits.OnesCount32(uint32(i))\n    }\n}\n// Ensure some optimisations don't occur by assigning to a global.\nvar (\n    dummyInt   int\n    dummyInt32 int32\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/71885769/go-countbits-exercise-n-strings-slices-performing-a-lot-better-than-log2n-math",
    "body": "$ go test -bench CountBitsSmart -run XXX -benchtime 10000000x -cpuprofile cpu.prof\ngoos: linux\ngoarch: amd64\npkg: stack/bench\ncpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz\nBenchmarkCountBitsSmart-8   \t10000000\t       703.0 ns/op\nPASS\nok  \tstack/bench\t7.226s\n$ go tool pprof -top -cum bench.test cpu.prof\nFile: bench.test\nType: cpu\nTime: Apr 17, 2022 at 11:19pm (AEST)\nDuration: 7.22s, Total samples = 7.01s (97.10%)\nShowing nodes accounting for 7s, 99.86% of 7.01s total\nDropped 1 node (cum <= 0.04s)\n      flat  flat%   sum%        cum   cum%\n     0.01s  0.14%  0.14%      7.01s   100%  stack/bench.BenchmarkCountBitsSmart\n         0     0%  0.14%      7.01s   100%  testing.(*B).launch\n         0     0%  0.14%      7.01s   100%  testing.(*B).runN\n     0.43s  6.13%  6.28%         7s 99.86%  stack/bench.countBitsSmart\n     0.07s     1%  7.28%      3.88s 55.35%  math.Log2 (inline)\n     0.42s  5.99% 13.27%      3.81s 54.35%  math.log2\n     0.02s  0.29% 13.55%      3.07s 43.79%  math.Log (inline)\n     3.05s 43.51% 57.06%      3.05s 43.51%  math.archLog\n     0.15s  2.14% 59.20%      2.69s 38.37%  math.Pow (inline)\n     1.20s 17.12% 76.32%      2.54s 36.23%  math.pow\n     0.07s     1% 77.32%      0.57s  8.13%  math.Frexp (inline)\n[...]\n$ go tool pprof -list bench.countBitsSmart bench.test cpu.prof\nTotal: 7.01s\nROUTINE ======================== stack/bench.countBitsSmart in /home/.../stack/bench/main.go\n     430ms         7s (flat, cum) 99.86% of Total\n         .          .     54:\tif num%2 > 0 {\n         .          .     55:\t\tupBits += 1\n         .          .     56:\t\t// fmt.Printf(\"\\tUP bits = %d\\n\", upBits)\n         .          .     57:\t}\n         .          .     58:\n      40ms       40ms     59:\tfor ; num > 2 && highestPower > 1; upBits++ {\n     250ms      4.13s     60:\t\thighestPower = uint32(math.Log2(float64(num)))\n      90ms      2.78s     61:\t\tnum = num - uint32(math.Pow(2, float64(highestPower)))\n         .          .     62:\t\t// fmt.Printf(\"\\tlog2 = %d\\n\", highestPower)\n         .          .     63:\t\t// fmt.Printf(\"\\tnum %d rest %d\\n\", num, num%2)\n         .          .     64:\t\t// fmt.Printf(\"\\tUP bits = %d\\n\", upBits)\n         .          .     65:\t}\n         .          .     66:\n      50ms       50ms     67:\treturn upBits\n         .          .     68:}\n         .          .     69:\n         .          .     70:// Profiling with execution time and calling\n         .          .     71:func invoker(numInput []uint32, funcName string, countFunc func(num uint32) int32) {\n         .          .     72:\tfmt.Println(\"\\n=========================================================\")"
  },
  {
    "url": "https://stackoverflow.com/questions/71885769/go-countbits-exercise-n-strings-slices-performing-a-lot-better-than-log2n-math",
    "body": "$ go test -bench CountBitsString -run XXX -benchtime 10000000x -cpuprofile cpu.profgoos: linux\ngoarch: amd64\npkg: stack/bench\ncpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz\nBenchmarkCountBitsString-8   \t10000000\t        99.13 ns/op\nPASS\nok  \tstack/bench\t1.111s\n$ go tool pprof -top -cum bench.test cpu.prof\nFile: bench.test\nType: cpu\nTime: Apr 17, 2022 at 11:15pm (AEST)\nDuration: 1.10s, Total samples = 1.05s (95.18%)\nShowing nodes accounting for 1.05s, 100% of 1.05s total\n      flat  flat%   sum%        cum   cum%\n     0.02s  1.90%  1.90%      1.01s 96.19%  stack/bench.BenchmarkCountBitsString\n         0     0%  1.90%      1.01s 96.19%  testing.(*B).launch\n         0     0%  1.90%      1.01s 96.19%  testing.(*B).runN\n     0.01s  0.95%  2.86%      0.99s 94.29%  stack/bench.countBitsString\n     0.51s 48.57% 51.43%      0.51s 48.57%  stack/bench.recursiveCount\n         0     0% 51.43%      0.47s 44.76%  strconv.FormatInt\n     0.21s 20.00% 71.43%      0.47s 44.76%  strconv.formatBits\n     0.03s  2.86% 74.29%      0.26s 24.76%  runtime.slicebytetostring\n     0.14s 13.33% 87.62%      0.22s 20.95%  runtime.mallocgc\n     0.04s  3.81% 91.43%      0.04s  3.81%  runtime.nextFreeFast (inline)\n[...]\n$ go tool pprof -list bench.countBitsString bench.test cpu.prof\nTotal: 1.05s\nROUTINE ======================== stack/bench.countBitsString in /home/.../stack/bench/main.go\n      10ms      990ms (flat, cum) 94.29% of Total\n         .          .     14: * implement a function that counts the number of set of bits in binary representation\n         .          .     15: * Complete the 'countBits' function below.\n         .          .     16: * The function is expected to return an int32.\n         .          .     17: * The function accepts unit32 num as parameter.\n         .          .     18: */\n      10ms       10ms     19:func countBitsString(num uint32) int32 {\n         .          .     20:\n         .          .     21:\tnum_64 := int64(num)\n         .      470ms     22:\tnum_2 := strconv.FormatInt(num_64, 2)\n         .      510ms     23:\t_, counter := recursiveCount(num_2, 0)\n         .          .     24:\treturn counter\n         .          .     25:}\n         .          .     26:\n         .          .     27:func recursiveCount(s string, counter int32) (string, int32) {\n         .          .     28:\tif len(s) < 1 {"
  },
  {
    "url": "https://stackoverflow.com/questions/71873309/how-to-get-a-go-library-and-run-it-in-docker",
    "body": "$ docker build --pull --no-cache --tag golang .\nSending build context to Docker daemon  15.36kB\nStep 1/3 : FROM golang:1.16.6-buster\n1.16.6-buster: Pulling from library/golang\nDigest: sha256:f3923dc5a92a237db0f07a924a238a8a4a711e3b77a7b5bdb1b526e107dcb9d4\nStatus: Image is up to date for golang:1.16.6-buster\n ---> 028d102f774a\nStep 2/3 : RUN curl -s https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh    | sh -s v1.45.2\n ---> Running in 4700e3995fcc\ngolangci/golangci-lint info checking GitHub for tag 'v1.45.2'\ngolangci/golangci-lint info found version: 1.45.2 for v1.45.2/linux/amd64\ngolangci/golangci-lint info installed ./bin/golangci-lint\nRemoving intermediate container 4700e3995fcc\n ---> 03634ff2897c\nStep 3/3 : RUN bin/golangci-lint --version\n ---> Running in f1348b5de5e2\ngolangci-lint has version 1.45.2 built from 8bdc4d3f on 2022-03-24T11:51:26Z\nRemoving intermediate container f1348b5de5e2\n ---> dc810407dc0d\nSuccessfully built dc810407dc0d\nSuccessfully tagged golang:latest"
  },
  {
    "url": "https://stackoverflow.com/questions/71846710/go-routines-and-a-channel-to-receive-error-or-success",
    "body": "rand.Seed(time.Now().UnixNano())\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\nrchan := make(chan result, 5)\nwg := &sync.WaitGroup{}\nfor i := 0; i < 5; i++ {\n\twg.Add(1)\n\tgo func(ctx context.Context) {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tfmt.Println(\"context is done\")\n\t\t\t\treturn\n\t\t\tcase <-time.After(time.Second):\n\t\t\t\tn := rand.Intn(100)\n\t\t\t\tif n > 90 {\n\t\t\t\t\trchan <- result{err: fmt.Errorf(\"error %d\", n)}\n\t\t\t\t} else {\n\t\t\t\t\trchan <- result{val: n}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}(ctx)\n}\ngo func() {\n\twg.Wait()\n\tclose(rchan)\n}()\nfor res := range rchan {\n\tif res.err != nil {\n\t\tfmt.Println(res.err)\n\t\tcancel()\n        break\n\t} else {\n\t\tfmt.Println(res.val)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71837219/why-does-gorillamux-route-my-request-differently-in-firefox-vs-thunder-client",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"github.com/gorilla/mux\"\n)\nfunc main() {\n\tport := 8008\n\tr := mux.NewRouter()\n\tpath := \"/users\"\n\treadMethods := []string{http.MethodGet}\n\tupdateMethods := []string{http.MethodPut}\n\tallMethods := []string{http.MethodGet, http.MethodPut}\n\tr.HandleFunc(path, sendPreflightHeaders(readMethods, readHandler)).Methods(readMethods...)\n\tr.HandleFunc(path, sendPreflightHeaders(updateMethods, updateHandler)).Methods(updateMethods...)\n\tr.HandleFunc(path, sendPreflightHeaders(allMethods, optionsHandler)).Methods(http.MethodOptions)\n\thttp.ListenAndServe(fmt.Sprintf(\":%d\", port), r)\n}\nfunc optionsHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"options\")\n}\nfunc readHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"read\")\n}\nfunc updateHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"update\")\n}\nfunc sendPreflightHeaders(allowedMethods []string, next http.HandlerFunc) http.HandlerFunc {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"http://localhost:3000\")\n\t\tmethodIsValid := false\n\t\tfor _, method := range allowedMethods {\n\t\t\tif r.Method == method {\n\t\t\t\tmethodIsValid = true\n\t\t\t}\n\t\t}\n\t\tif !methodIsValid {\n\t\t\tallowedMethodsList := strings.Join(allowedMethods, \" or\")\n\t\t\tw.Header().Set(\"Access-Control-Allow-Methods\", allowedMethodsList)\n\t\t\treturn\n\t\t}\n\t\tw.Header().Set(\"Access-Control-Allow-Methods\", strings.Join(allowedMethods, \", \"))\n\t\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Authorization, Content-Type, Access-Control-Allow-Credentials, Access-Control-Allow-Origin\")\n\t\tif r.Method == http.MethodOptions {\n\t\t\treturn // is a preflight request\n\t\t}\n\t\tnext.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71685090/how-to-get-the-latest-change-time-of-statefulset-in-k8s",
    "body": "func DeploymentCheck(namespace string, clientset *kubernetes.Clientset) ([]string, []string, []int64, []int64) {\n\tvar deploymentNames []string\n\tvar lastAppliedConfigs []string\n\tvar generations []int64\n\tvar observedGenerations []int64\n\tdeployments, err := clientset.AppsV1().Deployments(namespace).List(context.TODO(), metav1.ListOptions{})\n\tif errors.IsNotFound(err) {\n\t\tlog.Print(\"No deployments in the namespace\", err)\n\t} else if err != nil {\n\t\tlog.Print(\"Failed to fetch deployments in the namespace\", err)\n\t}\n\tfor _, deployment := range deployments.Items {\n\t\tdeploymentNames = append(deploymentNames, deployment.Name)\n\t\tlastAppliedConfig := deployment.GetAnnotations()[\"kubectl.kubernetes.io/last-applied-configuration\"]\n\t\tlastAppliedConfigs = append(lastAppliedConfigs, lastAppliedConfig)\n\t\tgenerations = append(generations, deployment.Generation)\n\t\tobservedGenerations = append(observedGenerations, deployment.Status.ObservedGeneration)\n\t}\n\treturn deploymentNames, lastAppliedConfigs, generations, observedGenerations\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71570355/how-to-delete-association-many2many",
    "body": "type Client struct {\n    gorm.Model\n    Name        string      `gorm:\"unique;not null\" validate:\"required,min=1,max=30\"`\n    Kyc_status  string      `gorm:\"not null\" validate:\"required,min=1,max=30\"`\n    Kyc_remarks string      `gorm:\"default:null\" validate:\"omitempty,min=0,max=200\"`\n    Operators   []*Operator `gorm:\"many2many:client_operators;\"`\n    Op_ids      []string    `gorm:\"-:all\" validate:\"omitempty,dive,numeric\"` // placeholder field, wont be part of table\n}\ntype Operator struct {\n    gorm.Model\n    Title       string    `gorm:\"unique;not null\" validate:\"required,min=1,max=100\"`\n    Email       string    `gorm:\"not null\" validate:\"required,email\"`\n    Mobile      string    `gorm:\"not null\" validate:\"required,min=7,max=15,numeric\"`\n    Last_online time.Time `gorm:\"default:null\" validate:\"omitempty\"`\n    Last_ip     string    `gorm:\"default:null\" validate:\"omitempty,ip\"`\n    Clients     []*Client `gorm:\"many2many:client_operators;\"`\n    Cli_ids     []string  `gorm:\"-:all\" validate:\"omitempty,dive,numeric\"`\n}\n// find operators related to client\nvar client_query *Client\nDBconnection.Where(\"id = ?\", pk).Preload(\"Operators\").First(&client_query)\n// delete operators related to client\nDBconnection.Model(&Client{ID: pk}).Association(\"Operators\").Delete(&client_query.Operators)"
  },
  {
    "url": "https://stackoverflow.com/questions/71369336/verify-jwt-token-fails-in-golang",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/golang-jwt/jwt/v4\"\n)\nfunc main() {\n\tconst tokenString = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.drt_po6bHhDOF_FJEHTrK-KD8OGjseJZpHwHIgsnoTM\"\n\tvar keyfunc jwt.Keyfunc = func(token *jwt.Token) (interface{}, error) {\n\t\treturn []byte(\"mysecret\"), nil\n\t}\n\tparsed, err := jwt.Parse(tokenString, keyfunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse JWT.\\nError: %s\", err.Error())\n\t}\n\tif !parsed.Valid {\n\t\tlog.Fatalln(\"Token is not valid.\")\n\t}\n\tlog.Println(\"Token is valid.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71092180/javascript-functions-not-working-in-webview-window",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"github.com/webview/webview\"\n)\ntype DummyData struct {\n\tPageTitle string\n}\nfunc main() {\n\tgo start()\n\tw := webview.New(true)\n\tdefer w.Destroy()\n\tw.SetTitle(\"Test webview\")\n\tw.SetSize(800, 600, webview.HintNone)\n\tw.Navigate(\"http://localhost:8000\")\n\tw.Run()\n}\nfunc start() {\n\tconst page = `\n\t<!DOCTYPE html>\n\t<body>\n\t\t<h1>\n\t\t\t{{.PageTitle}}\n\t\t</h1>\n\t\t<button onclick=\"myFunction()\">Try it</button>\n\n\t\t<div id=\"d1\" hidden>\n\t\t\tpoor man's alert\n\t\t</div>\n\t\t<script>\n\t\t\tfunction myFunction() {\n\t\t\t\td1.hidden = !d1.hidden\n\t\t\t\t// alert(\"js working\");\n\t\t\t}\n\t\t</script>\n\t</body>\n\t</html>\n\t`\n\ttmpl, _ := template.New(\"lala\").Parse(page)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdata := DummyData{\n\t\t\tPageTitle: \"My webview page title\",\n\t\t}\n\t\ttmpl.Execute(w, data)\n\t})\n\thttp.ListenAndServe(\":8000\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70759640/how-best-to-retrieve-aws-ssm-parameters-from-the-aws-cdk",
    "body": "func NewCertLookupStack(scope constructs.Construct, id string, props *awscdk.StackProps) awscdk.Stack {\n\tstack := awscdk.NewStack(scope, &id, &props)\n\tcertArn := awsssm.StringParameter_ValueFromLookup(stack, jsii.String(\"/dummy/certarn\"))\n\tcertificate := awscertificatemanager.Certificate_FromCertificateArn(stack, jsii.String(\"Certificate\"), certArn)\n\tawscdk.NewCfnOutput(stack, jsii.String(\"ArnOutput\"), &awscdk.CfnOutputProps{\n\t\tValue: certificate.CertificateArn(), // demonstrate it works: the correct cert arn storeed as a stack output\n\t})\n\treturn stack\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70621572/decrypt-aes-with-secret-key-and-iv-from-node-to-golang-panic",
    "body": "import (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/walkert/go-evp\"\n)\nfunc main() {\n\t// Determine salt and actual ciphertext\n\tencryptedPwd := \"2db5c01b4825b6d4dd7a7b96f04f3bb5:53616c7465645f5f66cbd1d539b6e51d45efded11e2211fa5e02278855dc86145d4e4891b0e25df9df96fb97a10a9f444f4519f2da4c69c430c5cbf3e9803a1f\"\n\tsplit := strings.Split(encryptedPwd, \":\")\n\tsaltCiphertext, _ := hex.DecodeString(split[1])\n\tsalt := saltCiphertext[8:16]\n\tciphertext := saltCiphertext[16:]\n\t// Get key and IV\n\tkey, iv := evp.BytesToKeyAES256CBCMD5([]byte(salt), []byte(\"b676eac8cf70442385dfd4bcfaa61b52\"))\n\t// Decrypt\n\tblock, _ := aes.NewCipher(key)\n\tplaintext := make([]byte, len(ciphertext))\n\tstream := cipher.NewCTR(block, iv)\n\tstream.XORKeyStream(plaintext, ciphertext)\n\t// Unpad\n\tunpaddedPlaintext := PKCS7Unpad(plaintext)\n\tfmt.Println(\"Decrypted data: \", string(unpaddedPlaintext)) // Decrypted data:  The quick brown fox jumps over the lazy dog\n}\nfunc PKCS7Unpad(src []byte) []byte {\n\tlength := len(src)\n\tunpadding := int(src[length-1])\n\treturn src[:(length - unpadding)]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70463286/conditionally-run-consecutive-go-routines",
    "body": "package main\nimport (\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n)\ntype record struct {\n\tid int\n}\nfunc main() {\n\tconst WORKER_COUNT = 10\n\trecordschan := make(chan record)\n\tvar wg sync.WaitGroup\n\tfor k := 0; k < WORKER_COUNT; k++ {\n\t\twg.Add(1)\n\t\t// Create the worker which will be doing the updates\n\t\tgo func(workerID int) {\n\t\t\tdefer wg.Done() // Marking the worker as done\n\t\t\tfor record := range recordschan {\n\t\t\t\tupdateRecord(record)\n\t\t\t\tlog.Printf(\"req %d processed by worker %d\", record.id, workerID)\n\t\t\t}\n\t\t}(k)\n\t}\n\t// Feeding the records channel\n\tfor _, record := range fetchRecords() {\n\t\trecordschan <- record\n\t}\n\t// Closing our channel as we're not using it anymore\n\tclose(recordschan)\n\t// Waiting for all the go routines to finish\n\twg.Wait()\n\tlog.Println(\"we're done!\")\n}\nfunc fetchRecords() []record {\n\tresult := []record{}\n\tfor k := 0; k < 100; k++ {\n\t\tresult = append(result, record{k})\n\t}\n\treturn result\n}\nfunc updateRecord(req record) {\n\ttime.Sleep(200 * time.Millisecond)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70438619/how-to-trace-two-asynchronous-go-routines-with-open-telemetry",
    "body": "func startListening(ctx context.Context) {\n  // initialise kafka client\n  go kafkaConsumeMessages(ctx)\n  go waitForJob(ctx)\n}\nfunc kafkaConsumeMessages(ctx) {\n  for msg := range kafkaEvents {\n    // extract incoming tracing info from traceparent header. Example at https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/github.com/Shopify/sarama/otelsarama/example/consumer/consumer.go#L84\n    ctx := otel.GetTextMapPropagator().Extract(context.Background(), otelsarama.NewConsumerMessageCarrier(msg))\n    // create span\n    tr := otel.Tracer(\"consumer\")\n\t_, span := tr.Start(ctx, \"consume message\", trace.WithAttributes(\n\t\tsemconv.MessagingOperationProcess,\n\t))\n\tdefer span.End()\n\n    // get just the traceparent header\n    carrier := otelsarama.NewConsumerMessageCarrier(&msg)\n    traceparentHeader := carrier.Get(\"traceparent\")\n    // process message, create long job and attach the header\n    jobs.enqueue{TraceparentHeader: traceparentHeader}\n  }\nfunc waitForJobs(ctx) {\n  for result := range finishedJobs {\n    ctx = otel.GetTextMapPropagator().Extract(ctx, models.PseudoCarrier{S: result.TraceparentHeader})\n    ctx, span := tr.Start(ctx, \"process result\", trace.WithAttributes(\n\t\tattribute.String(\"jobName\", result.JobName),\n    ))\n    defer span.End()\n\n    // do more work\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70234885/pass-a-pointer-instead-of-return-new-variable-in-c-and-go",
    "body": "#include <stdio.h>\nstruct Person {\n    int age;\n    const char *name;\n    const char *address;\n    const char *occupation;\n};\nstruct Person getReturnedPerson() {\n    struct Person thePerson = {26, \"Chad\", \"123 Someplace St.\", \"Software Engineer\"};\n    return thePerson;\n}\nvoid changeExistingPerson(struct Person *thePerson) {\n    thePerson->age = 26;\n    thePerson->name = \"Chad\";\n    thePerson->address = \"123 Someplace St.\";\n    thePerson->occupation = \"Software Engineer\";\n}\nint main(void) {\n  struct Person someGuy = getReturnedPerson();\n\n  struct Person theSameDude;\n  changeExistingPerson(&theSameDude);\n\n\n  return 0;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70234885/pass-a-pointer-instead-of-return-new-variable-in-c-and-go",
    "body": ".LC0:\n        .string \"Chad\"\n.LC1:\n        .string \"123 Someplace St.\"\n.LC2:\n        .string \"Software Engineer\"\ngetReturnedPerson:\n        push    rbp\n        mov     rbp, rsp\n        mov     QWORD PTR [rbp-40], rdi\n        mov     DWORD PTR [rbp-32], 26\n        mov     QWORD PTR [rbp-24], OFFSET FLAT:.LC0\n        mov     QWORD PTR [rbp-16], OFFSET FLAT:.LC1\n        mov     QWORD PTR [rbp-8], OFFSET FLAT:.LC2\n        mov     rcx, QWORD PTR [rbp-40]\n        mov     rax, QWORD PTR [rbp-32]\n        mov     rdx, QWORD PTR [rbp-24]\n        mov     QWORD PTR [rcx], rax\n        mov     QWORD PTR [rcx+8], rdx\n        mov     rax, QWORD PTR [rbp-16]\n        mov     rdx, QWORD PTR [rbp-8]\n        mov     QWORD PTR [rcx+16], rax\n        mov     QWORD PTR [rcx+24], rdx\n        mov     rax, QWORD PTR [rbp-40]\n        pop     rbp\n        ret\nchangeExistingPerson:\n        push    rbp\n        mov     rbp, rsp\n        mov     QWORD PTR [rbp-8], rdi\n        mov     rax, QWORD PTR [rbp-8]\n        mov     DWORD PTR [rax], 26\n        mov     rax, QWORD PTR [rbp-8]\n        mov     QWORD PTR [rax+8], OFFSET FLAT:.LC0\n        mov     rax, QWORD PTR [rbp-8]\n        mov     QWORD PTR [rax+16], OFFSET FLAT:.LC1\n        mov     rax, QWORD PTR [rbp-8]\n        mov     QWORD PTR [rax+24], OFFSET FLAT:.LC2\n        nop\n        pop     rbp\n        ret\nmain:\n        push    rbp\n        mov     rbp, rsp\n        sub     rsp, 64\n        lea     rax, [rbp-32]\n        mov     rdi, rax\n        mov     eax, 0\n        call    getReturnedPerson\n        lea     rax, [rbp-64]\n        mov     rdi, rax\n        call    changeExistingPerson\n        mov     eax, 0\n        leave\n        ret"
  },
  {
    "url": "https://stackoverflow.com/questions/70234885/pass-a-pointer-instead-of-return-new-variable-in-c-and-go",
    "body": ".LC0:\n        .string \"Chad\"\n.LC1:\n        .string \"123 Someplace St.\"\n.LC2:\n        .string \"Software Engineer\"\ngetReturnedPerson:\n        mov     rax, rdi\n        mov     DWORD PTR [rdi], 26\n        mov     QWORD PTR [rdi+8], OFFSET FLAT:.LC0\n        mov     QWORD PTR [rdi+16], OFFSET FLAT:.LC1\n        mov     QWORD PTR [rdi+24], OFFSET FLAT:.LC2\n        ret\nchangeExistingPerson:\n        mov     DWORD PTR [rdi], 26\n        mov     QWORD PTR [rdi+8], OFFSET FLAT:.LC0\n        mov     QWORD PTR [rdi+16], OFFSET FLAT:.LC1\n        mov     QWORD PTR [rdi+24], OFFSET FLAT:.LC2\n        ret\nmain:\n        mov     eax, 0\n        ret"
  },
  {
    "url": "https://stackoverflow.com/questions/70038292/chromedp-with-golang-has-deadline-exceeded-if-element-doesnt-exist-is-there-a-w",
    "body": "func check(page string) {\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.UserAgent(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36\"),\n\t\tchromedp.Flag(\"enable-automation\", false),\n\t\tchromedp.Flag(\"headless\", false),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tpageCtx, cancel := chromedp.NewContext(ctx)\n\tdefer cancel()\n\t// pageCtx is used to open the page\n\tif err := chromedp.Run(pageCtx,\n\t\tchromedp.Navigate(page),\n\t); err != nil {\n\t\treturn\n\t}\n\t// ackCtx is created from pageCtx.\n\t// when ackCtx exceeds the deadline, pageCtx is not affected.\n\tackCtx, cancel := context.WithTimeout(pageCtx, 10*time.Second)\n\tdefer cancel()\n\terr := chromedp.Run(ackCtx,\n\t\tchromedp.WaitReady(\"body\", chromedp.ByQuery),\n\t\tchromedp.Click(`#ackBtn`, chromedp.ByID),\n\t)\n\tif err != nil {\n\t\tfmt.Println(\"Didn't find Ack\")\n\t\t//return\n\t}\n\t// create another context from pageCtx to make sure the action finished in\n\t// 30 seconds. If you don't need this behavior, you can use pageCtx directly.\n\tclickCtx, cancel := context.WithTimeout(pageCtx, 30*time.Second)\n\tdefer cancel()\n\terr2 := chromedp.Run(clickCtx,\n\t\tchromedp.Click(`#options > div:nth-child(1) > div.c-card__column2 > a.c-card__btn.btn-new.btn-color-blue.btn-size-xxlarge.btn-width-auto.btn-max-width`, chromedp.ByID),\n\t)\n\tif err2 != nil {\n\t\tfmt.Println(\"exited on error\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68627315/how-to-use-gso-for-sending-udp-packets",
    "body": "s, err := syscall.Socket(...)\nif err != nil {\n        // error handling\n}\nif err := syscall.SetsockoptInt(s, syscall.SOL_SOCKET, syscall.UDP_SEGMENT, gso_size); err != nil {\n        syscall.Close(s)\n        // error handling\n}\nif err := syscall.Bind(s, ...); err != nil {\n        syscall.Close(s)\n        // error handling\n}\nif err := syscall.Listen(s, ...); err != nil { // or syscall.Connect\n        syscall.Close(s)\n        // error handling\n}\nf := os.File(s, ...)\nln, err := net.FileLitsener(f) // or net.FileConn, net.FilePacketConn\n//ln can now be used by go-quic"
  },
  {
    "url": "https://stackoverflow.com/questions/67883506/ignore-external-links-in-go-web-crawler",
    "body": "type URL struct {\n    Scheme      string\n    Opaque      string    // encoded opaque data\n    User        *Userinfo // username and password information\n    Host        string    // host or host:port\n    Path        string    // path (relative paths may omit leading slash)\n    RawPath     string    // encoded path hint (see EscapedPath method); added in Go 1.5\n    ForceQuery  bool      // append a query ('?') even if RawQuery is empty; added in Go 1.7\n    RawQuery    string    // encoded query values, without '?'\n    Fragment    string    // fragment for references, without '#'\n    RawFragment string    // encoded fragment hint (see EscapedFragment method); added in Go 1.15\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67453575/recursive-function-involving-html-node-to-print-all-links-in-a-html-doc",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"golang.org/x/net/html\"\n)\nvar i int = 0\nfunc visit(links []string, n *html.Node) []string {\n\tif n == nil {\n\t\treturn links\n\t}\n\tif n.Type == html.ElementNode && n.Data == \"a\" {\n\t\tfor _, a := range n.Attr {\n\t\t\tif a.Key == \"href\" {\n\t\t\t\tlinks = append(links, a.Val)\n\t\t\t}\n\t\t}\n\t}\n\tif i == 0 {\n\t\ti++\n\t\treturn visit(links, n.FirstChild)\n\t}\n\treturn visit(links, n.NextSibling)\n}\nfunc main() {\n\ts := `<p>Links:</p><ul><li><a href=\"foo\">Foo</a><li><a href=\"/bar/baz\">BarBaz</a></ul>`\n\tdoc, err := html.Parse(strings.NewReader(s))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlinks := visit([]string{}, doc)\n\tfmt.Println(links)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67453575/recursive-function-involving-html-node-to-print-all-links-in-a-html-doc",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"golang.org/x/net/html\"\n)\nfunc visit(links []string, n *html.Node) []string {\n\tif n.Type == html.ElementNode && n.Data == \"a\" {\n\t\tfor _, a := range n.Attr {\n\t\t\tif a.Key == \"href\" {\n\t\t\t\tlinks = append(links, a.Val)\n\t\t\t}\n\t\t}\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tlinks = visit(links, c)\n\t}\n\treturn links\n}\nfunc main() {\n\ts := `<p>Links:</p><ul><li><a href=\"foo\">Foo</a><li><a href=\"/bar/baz\">BarBaz</a></ul>`\n\tdoc, err := html.Parse(strings.NewReader(s))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlinks := visit([]string{}, doc)\n\tfmt.Println(links)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67446770/how-to-extract-different-variables-from-a-regex-without-compiling-each-expressio",
    "body": "func NewObjectSizeFromString(input_str string) (*ObjectSize, error) {\n\tvar defaultReturn *ObjectSize = nil\n\tfull_search_pattern := `^([0-9]+)([KMGT]?B)$`\n\trg, err := regexp.Compile(full_search_pattern)\n\tif err != nil {\n\t\treturn defaultReturn, errors.New(\"Could not compile search expression\")\n\t}\n\tmatched := rg.FindStringSubmatch(input_str)\n\tif matched ==  nil {\n\t\treturn defaultReturn, errors.New(\"Not in valid format\")\n\t}\n\ti, err := strconv.ParseInt(matched[1], 10, 32)\n\treturn &ObjectSize{int(i), SizeUnit(matched[2])}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67421008/go-how-can-i-make-sure-there-arent-empty-fields-being-sent-in-this-code-via-g",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype Name struct {\n\tFirst string `validate:\"required\"`\n\tLast  string\n}\nfunc main() {\n\tvalidName := Name{First: \"John\"} // Last name is empty and is not required\n\tinvalidName := Name{Last: \"Doe\"} // first name is empty but is required\n\tvalidate := validator.New()\n\terr := validate.Struct(invalidName)\n\tif err != nil {\n\t\tfmt.Println(\"invalid name struct caused error\")\n\t}\n\terr = validate.Struct(validName)\n\tif err != nil {\n\t\tfmt.Println(\"valid name struct caused error\")\n\t}\n\tfmt.Println(\"GoodBye\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67291318/whats-the-most-idiomatic-way-of-testing-functions-with-http-requests-in-go",
    "body": "// Set up an interface for your http client, same as http.Client.\ntype httpClient interface {\n    Get(string) (*http.Response, error)\n}\n// Make a struct to hang the client and methods off of.\ntype umbrellaGiver struct {\n    client httpClient\n}\n// A cut down example method.\nfunc (giver umbrellaGiver) getExample() ([]byte, error) {\n    resp, err := giver.client.Get(\"https://example.com\")\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    return io.ReadAll(resp.Body)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67291318/whats-the-most-idiomatic-way-of-testing-functions-with-http-requests-in-go",
    "body": "// Our mocked client.\ntype mockedClient struct {\n    mock.Mock\n}\n// Define the basic mocked Get method to record its arguments and\n// return its mocked values.\nfunc (m mockedClient) Get(url string) (*http.Response, error) {\n    args := m.Called(url)\n    if args.Get(0) == nil {\n        return nil, args.Error(1)\n    } else {\n        return args.Get(0).(*http.Response), args.Error(1)\n    }\n}\nfunc main() {\n    // Make a mockedClient and set up an expectation.\n    client := new(mockedClient)\n    // Make an umbrellaGiver which uses the mocked client.\n    s := umbrellaGiver { client: client }\n    // Let's test what happens when the call fails.\n    client.On(\n        \"Get\", \"https://example.com\",\n    ).Return(\n        nil, errors.New(\"The system is down\"),\n    )\n    body, err := s.getExample()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%s\", body)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67172392/how-to-recover-the-struct-from-a-document-in-golang-package-bleve",
    "body": "\tquery := bleve.NewMatchQuery(value)\n\trequest := bleve.NewSearchRequest(query)\n\trequest.Fields = []string{\"_source\"}\n\tsearchResults, err := ps.index.Search(request)\n\tif err != nil {\n\t\treturn nil, errors.Errorf(\"failed to execute a search request: %v\", err)\n\t}\n\tvar searchPosts []*blog.Post\n\tfor _, result := range searchResults.Hits {\n\t\tvar post *blog.Post\n\t\tb := bytes.NewBuffer([]byte(fmt.Sprintf(\"%v\", result.Fields[\"_source\"])))\n\t\tdec := gob.NewDecoder(b)\n\t\tif err = dec.Decode(&post); err != nil {\n\t\t\treturn nil, errors.Errorf(\"failed to decode post: %v\", err)\n\t\t}\n\t\tsearchPosts = append(searchPosts, post)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/67150369/issue-during-running-server-written-in-go-under-the-local-docker-container-wind",
    "body": "#First stage\nFROM golang:1.16-buster as builder\nWORKDIR /app\nCOPY go.* ./\n# Download dependencies\nRUN go mod download\n# Copy local code to the container image.\nCOPY . .\n# Build the binary.\nRUN  go build -v -o BINERYNAME\n# Secound stage\nFROM debian:buster-slim\nRUN set -x && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    ca-certificates && \\\n    rm -rf /var/lib/apt/lists/*\n# Copy the binary  to  production image from the builder stage.\nCOPY --from=builder /app/BINERYNAME /app/BINERYNAME\n# Run app on container startup.\nCMD [\"/app/BINERYNAME\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/66890934/how-do-you-send-a-direct-message-in-mattermost-from-a-bot-using-the-go-driver",
    "body": "package main\nimport (\n\t\"github.com/mattermost/mattermost-server/v5/model\"\n)\nfunc main() {\n\tclient := model.NewAPIv4Client(\"https://server.name.here\")\n\tclient.SetToken(\"Bots-Token-Here\")\n\tbot, resp := client.GetUserByUsername(\"NameOf.BotSendingMessage\", \"\")\n\tif resp.Error != nil {\n\t\treturn\n\t}\n\tuser, resp := client.GetUserByUsername(\"UsernameOf.UserToMessage\", \"\")\n\tif resp.Error != nil {\n\t\treturn\n\t}\n\tchannel, resp := client.CreateDirectChannel(bot.Id, user.Id)\n\tif resp.Error != nil {\n\t\treturn\n\t}\n\tpost := &model.Post{}\n\tpost.ChannelId = channel.Id\n\tpost.Message = \"some message\"\n\tif _, resp := client.CreatePost(post); resp.Error != nil {\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66842324/aws-how-to-enable-cors-for-lambda-function",
    "body": "AuthBindApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      StageName: Prod\n      Cors:\n        AllowOrigin: \"'*'\"\n        AllowMethods: \"'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'\"\n        AllowHeaders: \"'X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Requested-With,X-Auth-Token,Referer,User-Agent,Origin,Content-Type,Authorization,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'\"\n      Auth:\n        DefaultAuthorizer: CognitoAuthorizer\n        Authorizers:\n          CognitoAuthorizer:\n            UserPoolArn: !GetAtt CognitoUserPool.Arn\n  AuthBindFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: functions/auth/bind\n      Handler: bind\n      Runtime: go1.x\n      Tracing: Active\n      Policies:\n        - DynamoDBCrudPolicy:\n            TableName: !Ref AuthInfoTable\n        - Version: \"2012-10-17\"\n          Statement:\n            - Effect: \"Allow\"\n              Action: \"cognito-identity:GetOpenIdTokenForDeveloperIdentity\"\n              Resource: \"*\"\n      Events:\n        ApiEvent:\n          Type: Api\n          Properties:\n            Path: /auth/bind\n            Method: POST\n            RestApiId: !Ref AuthBindApi\n            Auth:\n              Authorizer: CognitoAuthorizer"
  },
  {
    "url": "https://stackoverflow.com/questions/66736323/golang-rabbitmq-receiver-concurrent-map-http-server",
    "body": "package main\n// imports\nfunc main() {\n   ...\n   // instantiate the shared map object\n   sharedMap := &MyMap{ /* init fields as appropriate */ }\n   mqconsumer := &mqpkg.Consumer{\n       SharedMap: sharedMap // inject the map obj into the mq consumer\n       // ...\n   }\n   // start the mq consumer\n   // inject the map obj into the http handler\n   http.HandleFunc(\"/foo\", handlerWithMap(sharedMap))\n   log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\nfunc handlerWithMap(mymap *mymap.MyMap) http.HandlerFunc {\n   return func(w http.ResponseWriter, r *http.Request) {\n\t   // here the http handler is able to access the shared map object\n   }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66420171/grpc-client-not-consuming-server-side-stream",
    "body": "pub struct DropReceiver<T> {\n    rx: mpsc::UnboundedReceiver<T>,\n}\nimpl<T> Stream for DropReceiver<T> {\n    type Item = T;\n    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n        Pin::new(&mut self.rx).poll_recv(cx)\n    }\n}\n// The Drop trait detects the `CloseSend`\nimpl<T> Drop for DropReceiver<T> {\n    fn drop(&mut self) {\n        info!(\"Connection has been droped\");\n        self.rx.close(); // Shutdown the receiver\n    }\n}\n// Within the rpc\nlet (tx, rx) = mpsc::unbounded_channel();\nlet rx = DropReceiver { rx: rx };\ntokio::spawn(async move {/** work */});\nOk(Response::new(Box::pin(rx))) // return this"
  },
  {
    "url": "https://stackoverflow.com/questions/66022866/how-to-implement-new-media-types-in-swagger-backend",
    "body": "api.ApplicationZipProducer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {\n\t\tif w == nil {\n\t\t\treturn errors.New(\"ApplicationZipProducer requires a writer\") // early exit\n\t\t}\n\t\tif data == nil {\n\t\t\treturn errors.New(\"no data given to produce zip from\")\n\t\t}\n\t\tif zp, ok := data.(io.ReadCloser); ok {\n\t\t\tb, err := ioutil.ReadAll(zp)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"application zip producer: %v\", err)\n\t\t\t}\n\t\t\t_, err = w.Write(b)\n\t\t\treturn nil\n\t\t}\n\t\treturn fmt.Errorf(\"%v (%T) is not supported by the ApplicationZipProducer, %s\", data, data)\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/65957402/unable-to-select-an-option-from-the-dropdown-for-web-scraping-using-gocolly-coll",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/gocolly/colly/v2\"\n)\nfunc main() {\n\t// Instantiate default collector\n\tc := colly.NewCollector(colly.AllowedDomains(\n\t\t\"eds.ospi.k12.wa.us\",\n\t))\n\tc.OnRequest(func(r *colly.Request) {\n\t\tr.Headers.Set(\"User-Agent\", \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\")\n\t})\n\tc.OnResponse(func(r *colly.Response) {\n\t\tfmt.Println(\"Response Code:\", r.StatusCode)\n\t})\n\tc.OnHTML(\"#Content_ctl00_organizationDropDowns_lstDistrict\", func(e *colly.HTMLElement) {\n\t\tselectDiv := e.DOM\n\t\toptions := selectDiv.Children()\n\t\tfmt.Println(strings.Repeat(\"#\", 50))\n\t\tfor _, v := range options.Nodes {\n\t\t\tfmt.Println(v.FirstChild.Data)\n\t\t}\n\t})\n\tc.Visit(\"https://eds.ospi.k12.wa.us/BusDepreciation/default.aspx?pageName=busSearch\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65654611/parse-yaml-config-map-data-from-k8s",
    "body": "// Once you have the configMap, check whether cm1.yaml file exist or not?\nvar cmFile string\nif value, ok:= cm.Data[\"cm1.yaml\"]; ok {\n  cmFile = value\n}\n// while unmarshal-ing yaml files, use map[string]interface\n// otherwise error may occur.\n// Case:\n//| a:\n//|   b: value\n//|   c:\n//|     d: value2\ncmData := make(map[string]interface{})\nerr := yaml.Unmarshal([]byte(cmFile), cmData)\nif err != nil {\n  return errors.New(\"error occurred\")\n}\nvar apiVersion string\n// Check whether the \"rzr\" exist or not\nif value, ok := cmData[\"rzr\"]; ok {\n  // convert the value from interface to string\n  // using type assertion.\n  stringValue, valid := value.(string)\n  // if successfully converted to string\n  if valid {\n    apiVersion = strings.ReplaceAll(stringValue, \".\", \"-\")\n  } else {\n    return errors.New(\"failed to convert\")\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65153051/install-seccomp-filter-in-child",
    "body": "import bseccomp \"github.com/elastic/go-seccomp-bpf\"\nimport \"github.com/criyle/go-sandbox/pkg/forkexec\"\n// ...\npolicy := bseccomp.Policy{\n\tDefaultAction: bseccomp.ActionAllow,\n\tSyscalls: []bseccomp.SyscallGroup{\n\t\t{\n\t\t\tAction: bseccomp.ActionTrace,\n\t\t\tNames: []string{\n\t\t\t\t\"write\",\n\t\t\t},\n\t\t},\n\t},\n}\nprogram, err := policy.Assemble()\nmust(err)\nfilter, err := ExportBPF(program)\nmust(err)\nbin, err := os.Open(args[0])\nmust(err)\ncmd := forkexec.Runner{\n\tArgs:              args[0:],\n\tExecFile:          bin.Fd(),\n\tSeccomp:           filter.SockFprog(),\n\tStopBeforeSeccomp: true,\n\tPtrace:            true,\n}\npid, err := cmd.Start()\nmust(err)\nvar ws unix.WaitStatus\n_, err = unix.Wait4(pid, &ws, 0, nil)\nmust(err)"
  },
  {
    "url": "https://stackoverflow.com/questions/65153051/install-seccomp-filter-in-child",
    "body": "// ExportBPF convert libseccomp filter to kernel readable BPF content\nfunc ExportBPF(filter []bpf.Instruction) (seccomp.Filter, error) {\n\traw, err := bpf.Assemble(filter)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn sockFilter(raw), nil\n}\nfunc sockFilter(raw []bpf.RawInstruction) []syscall.SockFilter {\n\tfilter := make([]syscall.SockFilter, 0, len(raw))\n\tfor _, instruction := range raw {\n\t\tfilter = append(filter, syscall.SockFilter{\n\t\t\tCode: instruction.Op,\n\t\t\tJt:   instruction.Jt,\n\t\t\tJf:   instruction.Jf,\n\t\t\tK:    instruction.K,\n\t\t})\n\t}\n\treturn filter\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65118165/looping-issue-in-function",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"strings\"\n)\nconst (\n\tport = \"5555\"\n)\nvar arr []string\ntype Client struct {\n\tc        net.Conn\n\tdataType string\n\tmenuCurr string\n}\nfunc NewClient() *Client {\n\treturn &(Client{})\n}\nfunc waitForInput(didInput chan<- bool) {\n\t// Wait for a valid input here\n\tdidInput <- true\n}\nfunc main() {\n\tlog.Printf(\"Hello Server!\")\n\tservice := \":5555\"\n\ttcpAddr, error := net.ResolveTCPAddr(\"tcp\", service)\n\tif error != nil {\n\t\tlog.Printf(\"Error: Could not resolve address\")\n\t} else {\n\t\tnetListen, error := net.Listen(tcpAddr.Network(), tcpAddr.String())\n\t\tif error != nil {\n\t\t\tlog.Fatal(error)\n\t\t} else {\n\t\t\tdefer netListen.Close()\n\t\t\tfor {\n\t\t\t\tlog.Printf(\"Waiting for clients\")\n\t\t\t\tconn, error := netListen.Accept()\n\t\t\t\tif error != nil {\n\t\t\t\t\tlog.Print(\"Client error: \", error)\n\t\t\t\t} else {\n\t\t\t\t\tlog.Printf(\"Client connected %s -> %s \\n\", conn.RemoteAddr(), conn.LocalAddr())\n\t\t\t\t\tgo handler(conn)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nfunc removeClient(conn net.Conn) {\n\tlog.Printf(\"Client %s disconnected\", conn.RemoteAddr())\n\tconn.Close()\n}\nfunc handler(conn net.Conn) {\n\tdefer removeClient(conn)\n\terrorChan := make(chan error)\n\tdataChan := make(chan []byte)\n\t// Set defaults for incoming connections\n\tvar s *Client\n\ts = NewClient()\n\ts.c = conn\n\ts.dataType = \"key\"\n\ts.menuCurr = \"connect\" // first menu every user sees\n\tgo readWrapper(conn, dataChan, errorChan)\n\tr := bytes.NewBuffer(make([]byte, 0, 1024))\n\t// default menu\n\tfmt.Fprintf(conn, \"Select an option:\\r\\n\\n[L] Leave Message\\r\\n[!] Disconnect\\r\\n\\nCmd? \")\n\tfor {\n\t\tselect {\n\t\tcase data := <-dataChan:\n\t\t\t// notice how i removed the current menu state\n\t\t\t// \"key\" responds to single character input\n\t\t\tif s.dataType == \"key\" {\n\t\t\t\tt := strings.TrimSuffix(strings.TrimSuffix(string(data), \"\\r\\n\"), \"\\n\")\n\t\t\t\tswitch t {\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Println(\"client hit invalid key...\")\n\t\t\t\t\t// remove the continue since the menu prints at the bottom\n\t\t\t\t\t// continue\n\t\t\t\tcase \"L\", \"l\":\n\t\t\t\t\ts.dataType = \"text\"\n\t\t\t\t\ts.menuCurr = \"message\"\n\t\t\t\t\t// notice the message here and the break instead of the continue.\n\t\t\t\t\t// if we use continue instead it will wait until your user sends something\n\t\t\t\t\t// with a break instead it will fall through and start collecting the text\n\t\t\t\t\tfmt.Fprintf(conn, \"Type a mesage. Escape to quit. \\r\\n\\n\")\n\t\t\t\t\tbreak\n\t\t\t\tcase \"!\":\n\t\t\t\t\tfmt.Fprintf(conn, \" Bye!\")\n\t\t\t\t\tfmt.Println(\"client chose to exit...\")\n\t\t\t\t\t// tell current menu to exit\n\t\t\t\t\ts.menuCurr = \"exit\"\n\t\t\t\t}\n\t\t\t}\n\t\t\t// \"Text\" allows for free typing\n\t\t\tif s.dataType == \"text\" {\n\t\t\t\tfor {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase data := <-dataChan:\n\t\t\t\t\t\tfmt.Fprintf(conn, string(data))\n\t\t\t\t\t\tif bytes.Equal(data, []byte(\"\\r\\n\")) || bytes.Equal(data, []byte(\"\\r\")) {\n\t\t\t\t\t\t\tfmt.Fprintf(conn, \"you typed: %q\\r\\n\", r.String())\n\t\t\t\t\t\t\tr.Reset()\n\t\t\t\t\t\t\ts.dataType = \"key\"\n\t\t\t\t\t\t\ts.menuCurr = \"connect\"\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif bytes.Equal(data, []byte(\"\\033\")) || bytes.Equal(data, []byte(\"\\033\\r\\n\")) {\n\t\t\t\t\t\t\tfmt.Fprintf(conn, \"\\r\\nAborted!\\r\\n\")\n\t\t\t\t\t\t\tr.Reset()\n\t\t\t\t\t\t\ts.dataType = \"key\"\n\t\t\t\t\t\t\ts.menuCurr = \"connect\"\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.Write(data)\n\t\t\t\t\t}\n\t\t\t\t\tlog.Printf(\"Client %s sent: %q\", conn.RemoteAddr(), r.String())\n\t\t\t\t\tif s.menuCurr == \"connect\" {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif s.menuCurr == \"connect\" {\n\t\t\t\tfmt.Fprintf(conn, \"Select an option:\\r\\n\\n[L] Leave Message\\r\\n[!] Disconnect\\r\\n\\nCmd? \")\n\t\t\t}\n\t\t\t// fall through statement to close connection\n\t\t\tif s.menuCurr == \"exit\" {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// otherwise continue printing menu for invalid submissions\n\t\t\tcontinue\n\t\tcase err := <-errorChan:\n\t\t\tlog.Println(\"An error occured:\", err.Error())\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"closing\")\n\t\tbreak\n\t}\n\tconn.Close()\n}\nfunc readWrapper(conn net.Conn, dataChan chan []byte, errorChan chan error) {\n\tfor {\n\t\tbuf := make([]byte, 1024)\n\t\treqLen, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\terrorChan <- err\n\t\t\treturn\n\t\t}\n\t\tdataChan <- buf[:reqLen]\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64828835/golang-extract-value-from-yaml-file",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype Tasks struct {\n\titems []string\n}\n// descend implements recursive descent into YAML mapping and sequence structures\nfunc (t *Tasks) descend(node *yaml.Node) error {\n\tswitch node.Kind {\n\tcase yaml.SequenceNode:\n\t\tfor _, item := range(node.Content) {\n\t\t\tt.descend(item)\n\t\t}\n\tcase yaml.MappingNode:\n\t\tfor i := 0; i < len(node.Content); i += 2 {\n\t\t\tkey := node.Content[i]\n\t\t\tvalue := node.Content[i+1]\n\t\t\tif key.Kind != yaml.ScalarNode ||\n\t\t\t\tkey.Value != \"task\" {\n\t\t\t\tt.descend(value)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif value.Kind != yaml.ScalarNode {\n\t\t\t\treturn errors.New(\"encountered non-scalar task\")\n\t\t\t}\n\t\t\tt.items = append(t.items, value.Value)\n\t\t}\n\t}\n\treturn nil\n}\n// UnmarshalYAML is the unmarshaler that will be called by the YAML processor.\nfunc (t *Tasks) UnmarshalYAML(value *yaml.Node) error {\n\tt.items = nil\n\treturn t.descend(value)\n}\nfunc main() {\n\tvar t Tasks\n\t// I fixed some whitespace issues in your YAML input\n\tif err := yaml.Unmarshal([]byte(`jobs:\n- name: test\n  public: true\n  plan:\n  - try:\n      task: task1\n      file: test1.yaml\n    on_success:\n      in_parallel:\n        steps:\n        - task: task2\n          file: test2.yaml\n        - task: task3\n          file: task3.yaml`), &t); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, item := range(t.items) {\n\t\tfmt.Println(item)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64711515/how-to-insert-new-record-to-db-using-gorm-plugins-hooks",
    "body": "func ChangelogCreatePlugin(db *gorm.DB) {\n    // first make a check that the model insert transaction doesn't have any error\n    if db.Error != nil {\n        return\n    }\n\n    log := &Log{NewValue: \"the new value\", OldValue: \"the old value\", CreatedAt: \"current time\"}\n\n    // get a new db session for the new model to work\n    logDb := db.Session(&gorm.Session{})\n    // if an error ocurred while saving the log\n    // push it into original model db instance errors, so it will be rolledback eventually\n    logErr := logDb.Save(log)\n    if logErr != nil {\n        db.AddError(logErr)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62780682/how-to-read-volumesnapshot-object-or-any-k8s-object",
    "body": "func main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\tnamespace := \"default\"\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tclient, err := dynamic.NewForConfig(config)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvolumesnapshotRes := schema.GroupVersionResource{Group: \"snapshot.storage.k8s.io\", Version: \"v1beta1\", Resource: \"volumesnapshots\"}\n\t// List VolumeSnapshots\n\tprompt()\n\tfmt.Printf(\"Listing volume snapshots in namespace %q:\\n\", apiv1.NamespaceDefault)\n\tlist, err := client.Resource(volumesnapshotRes).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, d := range list.Items {\n    ...\n        // do whatever with the items (print, etc)\n    }\n    // Finish up\n    ..."
  },
  {
    "url": "https://stackoverflow.com/questions/61967369/unsubscribe-from-redis-doesnt-seem-to-work",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/go-redis/redis/v7\"\n\t\"log\"\n)\ntype user struct {\n\tname        string\n\trooms       []string\n\tstopRunning chan bool\n\trunning     bool\n\troomsPubsub map[string]*redis.PubSub\n}\nfunc (u *user) connect(rdb *redis.Client) error {\n\t// get all user rooms (from DB) and start subscribe\n\tr, err := rdb.SMembers(fmt.Sprintf(\"user:%s:rooms\", u.name)).Result()\n\tif err != nil {\n\t\treturn err\n\t}\n\tu.rooms = r\n\tif len(u.rooms) == 0 {\n\t\treturn nil\n\t}\n\tu.doSubscribe(\"\", rdb)\n\treturn nil\n}\nfunc (u *user) subscribe(room string, rdb *redis.Client) error {\n\t// check if already subscribed\n\tfor i := range u.rooms {\n\t\tif u.rooms[i] == room {\n\t\t\treturn nil\n\t\t}\n\t}\n\t// add room to user\n\tuserRooms := fmt.Sprintf(\"user:%s:rooms\", u.name)\n\tif err := rdb.SAdd(userRooms, room).Err(); err != nil {\n\t\treturn err\n\t}\n\t// get all user rooms (from DB) and start subscribe\n\tr, err := rdb.SMembers(userRooms).Result()\n\tif err != nil {\n\t\treturn err\n\t}\n\tu.rooms = r\n\tif u.running {\n\t\tu.stopRunning <- true\n\t}\n\tu.doSubscribe(room, rdb)\n\treturn nil\n}\nfunc (u *user) doSubscribe(room string, rdb *redis.Client) {\n\tpubSub := rdb.Subscribe(u.rooms...)\n\tif len(room) > 0 {\n\t\tu.roomsPubsub[room] = pubSub\n\t}\n\tgo func() {\n\t\tu.running = true\n\t\tfmt.Println(\"starting the listener for user:\", u.name, \"on rooms:\", u.rooms)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase msg, ok := <-pubSub.Channel():\n\t\t\t\tif !ok {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tfmt.Println(msg.Payload, msg.Channel)\n\t\t\tcase <-u.stopRunning:\n\t\t\t\tfmt.Println(\"Stop listening for user:\", u.name, \"on old rooms\")\n\t\t\t\tfor k, v := range u.roomsPubsub {\n\t\t\t\t\tif err := v.Unsubscribe(); err != nil {\n\t\t\t\t\t\tfmt.Println(\"unable to unsubscribe\", err)\n\t\t\t\t\t}\n\t\t\t\t\tdelete(u.roomsPubsub, k)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}()\n}\nfunc (u *user) unsubscribe(room string, rdb *redis.Client) error {\n\treturn nil\n}\nvar rdb *redis.Client\nfunc main() {\n\trdb = redis.NewClient(&redis.Options{Addr: \"localhost:6379\"})\n\tu := &user{\n\t\tname:        \"Wael\",\n\t\tstopRunning: make(chan bool),\n\t\troomsPubsub: make(map[string]*redis.PubSub),\n\t}\n\tif err := u.connect(rdb); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := u.subscribe(\"New\", rdb); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := u.subscribe(\"Old\", rdb); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := u.subscribe(\"OldPlusPlus\", rdb); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tselect {}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61666687/testing-cors-middleware-with-gin",
    "body": "func TestCors(t *testing.T) {\n\tr := // create your GIN router with middleware config here\n\torigin := // The allowed origin that you want to check\n\tserver := httptest.NewServer(r)\n\tdefer server.Close()\n\tclient := &http.Client{}\n\treq, _ := http.NewRequest(\n\t\t\"GET\",\n\t\t\"http://\"+server.Listener.Addr().String()+\"/api\",\n\t\tnil,\n\t)\n\treq.Header.Add(\"Origin\", origin)\n\tget, err := client.Do(req)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n    // You should get your origin (or a * depending on your config) if the\n    // passed origin is allowed.\n\to := get.Header.Get(\"Access-Control-Allow-Origin\")\n\tif o != origin {\n\t\tt.Errorf(\"Got '%s' ; expecting origin '%s'\", o, origin)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60342187/recommended-way-of-closing-redundant-sql-rows-object-after-go-routine",
    "body": "// queryResult holds the goroutine# and the result from that gorouting (need both so we can avoid cancelling the relevant context)\ntype queryResult struct {\n\tno   int\n\trows *sql.Rows\n}\n// multiQuery - Executes multiple queries and returns either the first to resutn a result or, if all fail, a multierror summarising the errors\n// Important: This should be used for READ ONLY queries only (it is possible that more than one will complete)\n// Note: The ctx passed in must be cancelled to avoid leaking a context (this routine cannot cancel the context used for the winning query)\nfunc multiQuery(ctx context.Context, xs []executor, query string, args ...interface{}) (*sql.Rows, error) {\n\tnoOfQueries := len(xs)\n\trc := make(chan queryResult) // Channel for results; unbuffered because we only want one, and only one, result\n\tec := make(chan error)       // errors get sent here - goroutines must send a result or 1 error\n\tdefer close(ec)              // Ensure the error consolidation go routine will complete\n\t// We need a way to cancel individual goroutines as we do not know which one will succeed\n\tcancelFns := make([]context.CancelFunc, noOfQueries)\n\t// All goroutines must terminate before we exit (otherwise the transaction maybe rolled back before they are cancelled leading to \"unexpected command tag SELECT\")\n\tvar wg sync.WaitGroup\n\twg.Add(noOfQueries)\n\tfor i, x := range xs {\n\t\tvar queryCtx context.Context\n\t\tqueryCtx, cancelFns[i] = context.WithCancel(ctx)\n\t\tgo func(ctx context.Context, queryNo int, x executor) {\n\t\t\tdefer wg.Done()\n\t\t\trows, err := x.QueryContext(ctx, query, args...)\n\t\t\tif err != nil {\n\t\t\t\tec <- err // Error collection go routine guaranteed to run until all query goroutines complete\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase rc <- queryResult{queryNo, rows}:\n\t\t\t\treturn\n\t\t\tcase <-ctx.Done(): // If another query has already transmitted its results these should be thrown away\n\t\t\t\trows.Close() // not strictly required because closed context should tidy up\n\t\t\t\treturn\n\t\t\t}\n\t\t}(queryCtx, i, x)\n\t}\n\t// Start go routine that will send a MultiError to a channel if all queries fail\n\tmec := make(chan MultiError)\n\tgo func() {\n\t\tvar me MultiError\n\t\terrCount := 0\n\t\tfor err := range ec {\n\t\t\tme.append(err)\n\t\t\terrCount += 1\n\t\t\tif errCount == noOfQueries {\n\t\t\t\tmec <- me\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\t// Wait for one query to succeed or all queries to fail\n\tselect {\n\tcase me := <-mec:\n\t\tfor _, cancelFn := range cancelFns { // not strictly required so long as ctx is eventually cancelled\n\t\t\tcancelFn()\n\t\t}\n\t\twg.Wait()\n\t\treturn nil, me.check()\n\tcase result := <-rc:\n\t\tfor i, cancelFn := range cancelFns { // not strictly required so long as ctx is eventually cancelled\n\t\t\tif i != result.no { // do not cancel the query that returned a result\n\t\t\t\tcancelFn()\n\t\t\t}\n\t\t}\n\t\twg.Wait()\n\t\treturn result.rows, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56827726/distributed-outbound-http-rate-limiter",
    "body": "-- replicate_commands allows us to use the TIME command. We depend on accurate\n-- (and reasonably consistent) timestamps. Multiple clients may have\n-- inacceptable clock drift.\nredis.replicate_commands()\nlocal rate = tonumber(ARGV[1]) -- how many drops leak away in one second\nlocal cap = tonumber(ARGV[2]) -- how many drops fit in the bucket\nlocal now, _ = unpack(redis.call('TIME'))\n-- A bucket is represented by a hash with two keys, n and t. n is the number of\n-- drops in the bucket at time t (seconds since epoch).\nlocal xs = redis.call('HMGET', KEYS[1], 'n', 't')\nlocal n = tonumber(xs[1])\nlocal t = tonumber(xs[2])\nif type(n) ~= \"number\" or type(t) ~= \"number\" then\n    -- The bucket doesn't exist yet (n and t are false), or someone messed with\n    -- our hash values. Either way, pretend the bucket is empty.\n    n, t = 0, now\nend\n-- remove drops that leaked since t\nn = n - (now-t)*rate\nif n < 0 then\n    n = 0\nend\n-- add one drop if it fits\nif n < cap then\n    n = n + 1\nelse\n    n = cap\nend\nredis.call('HMSET', KEYS[1], 'n', n, 't', now)\nredis.call('EXPIRE', KEYS[1], math.floor(n/rate) + 1)\nreturn n"
  },
  {
    "url": "https://stackoverflow.com/questions/56032492/get-output-string-after-access-a-link",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\nfunc main() {\n\t//make a request\n\tresponse, err := http.Get(\"https://mdtf.org\")\n\tif err != nil {\n\t  fmt.Println(\"error making request: \", err)\n\t  return\n\t}\n\n\t//make sure the response body gets closed\n\tdefer response.Body.Close()\n\n\t//read the bytes\n\tresponseBytes, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t  fmt.Println(\"error reading response bytes: \", err)\n\t  return\n\t}\n\n\t//turn the response bytes into a string\n\tresponseString := string(responseBytes)\n\n\t//print it or something\n\tfmt.Println(responseString)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55962490/different-behavior-of-go-exec-for-different-shell-commands",
    "body": "cmd := exec.Command(\"sh\", \"-c\", \"cypher-shell -u neo4j -p 121314 --format plain\")\nf, _ := pty.Start(cmd)\nstdoutScanner := bufio.NewScanner(f)\ncmd.Start()\n// Give it some time to start, then read and discard the startup banner.\ntime.Sleep(2 * time.Second)\nf.Read(make([]byte, 4096))\ngo func() {\n\tfor stdoutScanner.Scan() {\n\t\tprintln(stdoutScanner.Text())\n\t}\n}()\nio.WriteString(f, \"match (n) return count(n);\\n\")\ntime.Sleep(2 * time.Second)\nio.WriteString(f, \"match (n) return count(n) + 123;\\n\")\ntime.Sleep(2 * time.Second)"
  },
  {
    "url": "https://stackoverflow.com/questions/55724685/execute-powershell-command-in-running-container-via-docker-api",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/docker/docker/api/types\"\n\t\"github.com/docker/docker/client\"\n\t\"github.com/docker/docker/pkg/stdcopy\"\n\t\"strings\"\n)\nfunc readFromCommand() (string, error) {\n\tcli, err := client.NewEnvClient()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tctx := context.Background()\n\tconfig := types.ExecConfig{\n\t\tCmd:          strings.Split(\"powershell Get-PSDrive C | Select-Object Used,Free\", \" \"),\n\t\tAttachStdout: true,\n\t\tAttachStderr: true,\n\t}\n\tresponse, err := cli.ContainerExecCreate(ctx,\n\t\t// container id\n\t\t\"cf59d65ab1\", config)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texecID := response.ID\n\tresp, err := cli.ContainerExecAttach(ctx, execID, config)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Close()\n\tstdout := new(bytes.Buffer)\n\tstderr := new(bytes.Buffer)\n\t_, err = stdcopy.StdCopy(stdout, stderr, resp.Reader)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\ts := stdout.String()\n\tfmt.Println(s)\n\ti := stderr.String()\n\tfmt.Println(i)\n\treturn s, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52557291/cannot-install-revel-framework-form-go",
    "body": "Usage:\n      revel [OPTIONS] <command>\n\n    Application Options:\n      -v, --debug              If set the logger is set to verbose\n          --historic-run-mode  If set the runmode is passed a string not json\n      -X, --build-flags=       These flags will be used when building the application. May be specified multiple times, only applicable for Build, Run,\n                               Package, Test commands\n\n    Available commands:\n      build\n      clean\n      new\n      package\n      run\n      test\n      version"
  },
  {
    "url": "https://stackoverflow.com/questions/46096522/in-golang-how-to-support-multiple-sql-syntax-mysql-vs-postgres",
    "body": "// RebindMore takes a MySQL SQL string and convert it to Postgres if necessary.\n// The db.Rebind() handles converting '?' to '$1', but does not handle SQL statement\n// syntactic changes needed by Postgres.\n//\n// convert: \"UPDATE table_name SET a = ?, b = ?, c = ? WHERE d = ?\"\n// to:      \"UPDATE table_name SET (a, b, c) = ROW (?, ?, ?) WHERE d = ?\"\nfunc RebindMore(db *sqlx.DB, s string) string {\n\tif db.DriverName() != \"postgres\" {\n\t\treturn s\n\t}\n\tif !strings.HasPrefix(strings.ToLower(s), \"update\") {\n\t\treturn db.Rebind(s)\n\t}\n\t// Convert a MySQL update statement into a Postgres update statement.\n\tvar idx int\n\tidx = strings.Index(strings.ToLower(s), \"set\")\n\tif idx < 0 {\n\t\tlog.Fatal().Msg(\"no SET clause in RebindMore (\" + s + \")\")\n\t}\n\tprefix := s[:idx+3]\n\ts2 := s[idx+3:]\n\tidx = strings.Index(strings.ToLower(s2), \"where\")\n\tif idx < 0 {\n\t\tlog.Fatal().Msg(\"no WHERE clause in RebindMore (\" + s + \")\")\n\t}\n\tsuffix := s2[idx:]\n\ts3 := s2[:idx]\n\ts4 := strings.TrimSpace(s3)\n\tarr := strings.Split(s4, \",\")\n\tvar names = \"\"\n\tvar values = \"\"\n\tfor i := 0; i < len(arr); i++ {\n\t\tnameEqValue := arr[i]\n\t\ts5 := strings.ReplaceAll(nameEqValue, \" \", \"\")\n\t\tnvArr := strings.Split(s5, \"=\")\n\t\tif names != \"\" {\n\t\t\tnames += \",\"\n\t\t}\n\t\tnames += nvArr[0]\n\t\tif values != \"\" {\n\t\t\tvalues += \",\"\n\t\t}\n\t\tvalues += nvArr[1]\n\t}\n\ts6 := prefix + \" (\" + names + \") = ROW (\" + values + \") \" + suffix\n\treturn db.Rebind(s6)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/42554900/how-to-extract-own-symbol-table",
    "body": "var symTable *gosym.Table\nvar symTableLoadFailed bool\nfunc loadSymbolTableLinux() {\n\tif symTable != nil || symTableLoadFailed {\n\t\treturn\n\t}\n\t// Try to load from memory first\n\tconst elfStartAddress = uintptr(0x400000)\n\tconst maxSize = 0x10000000\n\tprocessMemory := (*[maxSize]byte)(unsafe.Pointer(elfStartAddress))[:maxSize:maxSize]\n\texe, err := elf.NewFile(bytes.NewReader(processMemory))\n\tif err != nil {\n\t\t// Failing that, load a copy from disk\n\t\texePath, err := os.Executable()\n\t\tif err != nil {\n\t\t\tsymTableLoadFailed = true\n\t\t\tlog.Printf(\"subvert: Error finding executable: %v\", err)\n\t\t\treturn\n\t\t}\n\t\texe, err = elf.Open(exePath)\n\t\tif err != nil {\n\t\t\tsymTableLoadFailed = true\n\t\t\tlog.Printf(\"subvert: Error opening %v: %v\", exePath, err)\n\t\t\treturn\n\t\t}\n\t}\n\tdefer exe.Close()\n\tlineTableData, err := exe.Section(\".gopclntab\").Data()\n\tif err != nil {\n\t\tsymTableLoadFailed = true\n\t\tlog.Printf(\"subvert: Error reading .gopclntab data: %v\", err)\n\t\treturn\n\t}\n\taddr := exe.Section(\".text\").Addr\n\tlineTable := gosym.NewLineTable(lineTableData, addr)\n\tsymTable, err = gosym.NewTable([]byte{}, lineTable)\n\tif err != nil {\n\t\tsymTableLoadFailed = true\n\t\tlog.Printf(\"subvert: Error creating symbol table: %v\", err)\n\t\tsymTable = nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79475259/go-cli-framework-with-context-aware-flags",
    "body": "var (\n    // flag position\n\tfPosition = 1\n)\ntype FlagWithPosition struct {\n\tPosition int\n\tVal      string\n}\ntype FlagsWithPosition []FlagWithPosition\nfunc (s *FlagsWithPosition) String() string {\n\treturn fmt.Sprintf(\"%v\", *s)\n}\nfunc (s *FlagsWithPosition) Set(value string) error {\n\tvalue = strings.TrimSpace(value)\n\tif value == \"\" {\n\t\treturn nil\n\t}\n\t*s = append(*s, FlagWithPosition{\n\t\tPosition: fPosition, //position in args\n\t\tVal:      value,\n\t})\n\tfPosition++ // increment position in args\n\treturn nil\n}\nfunc main() {\n\tvar (\n\t\tconfigs FlagsWithPosition\n\t\tsteps   FlagsWithPosition\n\t)\n    // Use FlagSet\n\tfs := flag.NewFlagSet(\"ExampleValue\", flag.ExitOnError)\n\tfs.Var(&configs, \"config\", \"configurations\")\n\tfs.Var(&steps, \"start\", \"steps\")\n    // prepare args\n\targs := strings.Split(\"--config=config1.yaml --start=step1 --start=step2 --config=config2.yamp --start=step1\", \" \")\n    // parse flags using FlagSet\n\t_ = fs.Parse(args)\n\tfmt.Println(configs)\n\tfmt.Println(steps)\n\tfmt.Println(getConfigsWithSteps(configs, steps)) // map[config1.yaml:[step1 step2] config2.yamp:[step1]]\n}\n// getConfigsWithSteps - EXAMPLE\nfunc getConfigsWithSteps(configs, steps FlagsWithPosition) map[string][]string {\n\tconfigsWithSteps := make(map[string][]string, len(configs))\n\tfor i, config := range configs {\n\t\tvar (\n\t\t\tnextPosition = -1\n\t\t)\n\t\tif len(configs) > i+1 {\n\t\t\tnextPosition = configs[i+1].Position\n\t\t}\n\t\tfor j, step := range steps {\n\t\t\tif nextPosition > -1 && step.Position >= nextPosition {\n\t\t\t\tsteps = steps[j:]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tconfigsWithSteps[config.Val] = append(configsWithSteps[config.Val], step.Val)\n\t\t}\n\t}\n\treturn configsWithSteps\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79345493/how-to-dynamically-unmarshal-yaml-into-structs-implementing-a-common-interface-i",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype Configs []Config\ntype Config struct {\n\tID          string        `yaml:\"id\"`\n\tDescription string        `yaml:\"description\"`\n\tStage       string        `yaml:\"stage,omitempty\"`\n\tConditions  ConditionList `yaml:\"conditions\"`\n}\ntype CommandRUN struct {\n\tCmd string `yaml:\"cmd\"`\n}\nfunc (c CommandRUN) Validate() bool { return true }\ntype CommandENV struct {\n\tKey string `yaml:\"key\"`\n}\nfunc (c CommandENV) Validate() bool { return true }\ntype CommandADD struct {\n\tSource string `yaml:\"source\"`\n}\nfunc (c CommandADD) Validate() bool { return true }\ntype CommandCOPY struct {\n\tFiles []string `yaml:\"files\"`\n}\nfunc (c CommandCOPY) Validate() bool { return true }\ntype Conditions struct {\n\tCommandRun  *CommandRUN   `yaml:\"command.RUN,omitempty\"`\n\tCommandAdd  *CommandADD   `yaml:\"command.ADD,omitempty\"`\n\tCommandCopy *CommandCOPY  `yaml:\"command.COPY,omitempty\"`\n\tCommandEnv  *CommandENV   `yaml:\"command.ENV,omitempty\"`\n\tOperatorOR  ConditionList `yaml:\"operator.OR,omitempty\"`\n\tOperatorAND ConditionList `yaml:\"operator.AND,omitempty\"`\n}\ntype ConditionList []Conditions\nfunc (c ConditionList) Validate() bool { return true }\nfunc (c ConditionList) convert() []Condition {\n\tresult := []Condition{}\n\tfor id := range c {\n\t\tif c[id].CommandAdd != nil {\n\t\t\tresult = append(result, c[id].CommandAdd)\n\t\t}\n\t\tif c[id].CommandCopy != nil {\n\t\t\tresult = append(result, c[id].CommandCopy)\n\t\t}\n\t\tif c[id].CommandEnv != nil {\n\t\t\tresult = append(result, c[id].CommandEnv)\n\t\t}\n\t\tif c[id].CommandRun != nil {\n\t\t\tresult = append(result, c[id].CommandRun)\n\t\t}\n\t\tif c[id].OperatorOR != nil {\n\t\t\tresult = append(result, c[id].OperatorOR)\n\t\t}\n\t\tif c[id].OperatorAND != nil {\n\t\t\tresult = append(result, c[id].OperatorAND)\n\t\t}\n\t}\n\treturn result\n}\nfunc (c Config) getRule() Rule {\n\treturn Rule{\n\t\tId:          c.ID,\n\t\tDescription: c.Description,\n\t\tConditions:  c.Conditions.convert(),\n\t}\n}\nfunc (c Configs) getRules() Rules {\n\trules := Rules{}\n\tfor id := range c {\n\t\trules = append(rules, c[id].getRule())\n\t}\n\treturn rules\n}\ntype Condition interface {\n\tValidate() bool\n}\ntype Rule struct {\n\tId          string      `yaml:\"id\"`\n\tDescription string      `yaml:\"description\"`\n\tConditions  []Condition `yaml:\"conditions\"`\n}\ntype Rules []Rule\nfunc (r Rules) Validate() bool {\n\tfor id := range r {\n\t\tfor cid := range r[id].Conditions {\n\t\t\tif !r[id].Conditions[cid].Validate() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nfunc main() {\n\tvar config Configs\n\tdata, err := os.ReadFile(\"config.yaml\")\n\tif err != nil {\n\t\tlog.Fatalln(\"read file\", err)\n\t}\n\terr = yaml.Unmarshal(data, &config)\n\tif err != nil {\n\t\tlog.Fatalln(\"unmarshal\", err)\n\t}\n\tdata, err = yaml.Marshal(config)\n\tif err != nil {\n\t\tlog.Fatalln(\"remarshal\", err)\n\t}\n\tlog.Printf(\"config:\\n%s\", string(data))\n\trules := config.getRules()\n\tlog.Printf(\"rule validation: %t\\n\", rules.Validate())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79345493/how-to-dynamically-unmarshal-yaml-into-structs-implementing-a-common-interface-i",
    "body": ">go run main\n2025/01/15 13:07:20 config:\n- id: MULTISTAGE01\n  description: Do not install or keep any compiled programs\n  stage: final\n  conditions:\n    - command.RUN:\n        cmd: .*(gcc|nodejs|clang).*\n- id: AVOID01\n  description: Do not use ADD command\n  conditions:\n    - command.ADD:\n        source: '*'\n- id: SECRET01\n  description: Do not expose secrets\n  conditions:\n    - operator.OR:\n        - command.COPY:\n            files:\n                - '*.env'\n        - command.ENV:\n            key: API.*KEY\n2025/01/15 13:07:20 rule validation: true"
  },
  {
    "url": "https://stackoverflow.com/questions/78658923/docker-permission-denied-when-trying-to-run-a-golang-binary",
    "body": "FROM golang:1.22.4-bullseye\nRUN apt-get update \\\n    && apt-get install -y ca-certificates curl gnupg \\\n    && mkdir -p /etc/apt/keyrings\nWORKDIR /app\nRUN go install go.uber.org/mock/mockgen@latest && \\\n    go install github.com/air-verse/air@latest\nRUN git config --global --add safe.directory /app\n# answer starts right in here\n#\n# add myself as user, change shell if you want\nRUN useradd -ms /bin/bash caner\n# give myself permission for the entire app folder, you may want to limit this.\n# leave it as it is if you dont want to hassle.\nRUN chown -R caner:caner /app\n# original answer does this step, but I dont recommend it, as your app just works fine without giving every user Read and Write permissions to the app folder.\n# RUN chmod 755 /app\n#\n# switch to me\nUSER caner\n# and magic time\nCMD [\"air\", \"-c\", \".air.toml\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/78640053/how-can-i-get-the-mq-golang-library-to-work-with-the-ibm-mq-container-image-on-a",
    "body": "###########################################################\n# This starts the BUILD phase\n###########################################################\nFROM golang:1.22 as builder\nRUN apt-get update \\\n    && apt-get upgrade \\\n    && apt-get install -y --no-install-recommends curl bash\nRUN mkdir -p /opt/mqm && chmod a+rx /opt/mqm\n# Location of the downloadable MQ client package \\\nENV MQARCH=X64\nENV RDURL=\"https://public.dhe.ibm.com/ibmdl/export/pub/software/websphere/messaging/mqdev/redist\" \\\n    RDTAR=\"IBM-MQC-Redist-Linux${MQARCH}.tar.gz\" \\\n    VRMF=9.3.5.0\n# Install the MQ client from the Redistributable package. This also contains the\n# header files we need to compile against. Setup the subset of the package\n# we are going to keep - the genmqpkg.sh script removes unneeded parts\nENV genmqpkg_incnls=1 \\\n    genmqpkg_incsdk=1 \\\n    genmqpkg_inctls=1\nRUN cd /opt/mqm \\\n && curl -LO \"$RDURL/$VRMF-$RDTAR\" \\\n && tar -zxf ./*.tar.gz \\\n && rm -f ./*.tar.gz \\\n && bin/genmqpkg.sh -b /opt/mqm\n# Build the messaging app\nENV APP_DIR /usr/src\nWORKDIR ${APP_DIR}\nCOPY ./msg-app ./msgapp\nWORKDIR ${APP_DIR}/msgapp\nENV CGO_CFLAGS \"-I/opt/mqm/inc/\"\nENV CGO_LDFLAGS_ALLOW \"-Wl,-rpath.*\"\nRUN rm msgapp || true\nRUN go build\n# ###########################################################\n# # This starts the RUNTIME phase\n# ###########################################################\nFROM golang:1.22\nENV MQ_ROOT /opt/mqm\nCOPY --from=builder ${MQ_ROOT} ${MQ_ROOT}\nENV APP_DIR /usr/src/msgapp\nWORKDIR ${APP_DIR}\n# Copy over just the application and the environment files\nCOPY --from=builder ${APP_DIR}/consumer ${APP_DIR}/msgapp\nCOPY --from=builder ${APP_DIR}/ccdt.json ${APP_DIR}/ccdt.json\nCMD [\"./msgapp\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/78595191/gorm-enum-type-for-postgres",
    "body": "package main\nimport (\n\t\"database/sql/driver\"\n\t\"fmt\"\n\t_ \"github.com/jinzhu/gorm/dialects/postgres\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype DbType string\nconst (\n\tPostgreSQL DbType = \"PostgreSQL\"\n\tOracle     DbType = \"Oracle\"\n\tIgnite     DbType = \"Ignite\"\n)\nfunc (st *DbType) Scan(value interface{}) error {\n\tb, ok := value.([]byte)\n\tif !ok {\n\t\t*st = DbType(b)\n\t}\n\treturn nil\n}\nfunc (st DbType) Value() (driver.Value, error) {\n\treturn string(st), nil\n}\nfunc (st DbType) TableName() string {\n\treturn \"schema_name.db_type\"\n}\ntype MonitoringDatabase struct {\n\tgorm.Model\n\tID     uint\n\tName   string\n\tDBType DbType `gorm:\"type:schema_name.db_type;default:'PostgreSQL'\"`\n}\nfunc main() {\n\tdsn := `postgresql://user:pass@db_server:5432/db_name?connect_timeout=10&application_name=TestEnum`\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\t// fmt.Println(err)\n\t\tpanic(err)\n\t}\n\tdb.Debug().Exec(`\n\tDO $$ BEGIN\n\t\tCREATE TYPE schema_name.db_type AS ENUM ('PostgreSQL','Oracle','Ignite');\n\tEXCEPTION\n\t\tWHEN duplicate_object THEN null;\n\tEND $$;`)\n\tmd := MonitoringDatabase{}\n\terr=db.AutoMigrate(&md)\n\tif err != nil {\n\t\t// fmt.Println(err)\n\t\tpanic(err)\n\t}\n\tmd1 := MonitoringDatabase{\n\t\tDBType: PostgreSQL,\n\t}\n\terr=db.Debug().Create(&md1)\n\tif err != nil {\n\t\t// fmt.Println(err)\n\t\tpanic(err)\n\t}\n\tfmt.Println(md1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78594327/how-to-store-all-go-templates-in-a-single-template-variable",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\nfunc main() {\n\tvar (\n\t\ttmpl *template.Template\n\t\terr  error\n\t)\n\t// Get a list of all files ending in .tmpl\n\tif tmpl, err = template.ParseFiles(\"base.tmpl\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Add all files ending in .tmpl in the templates directory\n\tif tmpl, err = tmpl.ParseGlob(\"templates/*.tmpl\"); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"%s\\n\", tmpl.DefinedTemplates())\n\tif err = tmpl.ExecuteTemplate(os.Stdout, \"base.tmpl\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78580147/go-sql-conn-always-gets-stuck-in-conn-close",
    "body": "func testADS(c *gin.Context) {\n\tconn, err := db.Conn(context.Background())\n\tif err != nil {\n\t\tlog.Panic(\"no connection\")\n\t}\n\ttx, err := conn.BeginTx(context.Background(), nil)\n\tif err != nil {\n\t\tlog.Panic(\"no transaction\")\n\t}\n\tstmt, err := tx.Prepare(\"SELECT some_code FROM testTable\")\n\tif err != nil {\n\t\tlog.Panic(\"no prepared statement\")\n\t}\n\trows, err := stmt.Query()\n\tif err != nil {\n\t\tlog.Panic(\"no rows\")\n\t}\n\tif !rows.Next() {\n\t\tlog.Panic(\"no next row\")\n\t}\n\tvar code string\n\terr = rows.Scan(&code)\n\tif err != nil {\n\t\tlog.Panic(\"no scan\")\n\t}\n\tlog.Printf(\"Code: %s\", code)\n\terr = tx.Commit()\n\tif err != nil {\n\t\tlog.Panic(\"no commit\")\n\t}\n\terr = rows.Close()\n\tif err != nil {\n\t\tlog.Panic(\"no rows close\")\n\t}\n\terr = stmt.Close()\n\tif err != nil {\n\t\tlog.Panic(\"no stmt close\")\n\t}\n\t// now that the statement is closed the connection can be closed finally\n\terr = conn.Close()\n\tif err != nil {\n\t\tlog.Panic(\"no conn close\")\n\t}\n    // log.Celebrate(\"Yay :)\")\n    c.Next()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77841103/chain-custom-grpc-client-interceptors-dialoptions",
    "body": "func main() {\n\tmyInt1 := func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\t\tprint(\"testInterceptor invoked\")\n\t\treturn invoker(ctx, method, req, reply, cc, opts...)\n\t}\n\tmyInt2 := func(ctx context.Context, method string, req, reply any, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\t\tprint(\"testInterceptor2 invoked\")\n\t\treturn invoker(ctx, method, req, reply, cc, opts...)\n\t}\n\topts := []grpc.DialOption{\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithChainUnaryInterceptor(\n\t\t\tmyInt1,\n\t\t\tmyInt2,\n\t\t),\n\t}\n\t_, err := grpc.DialContext(context.Background(), \"my-adress:443\", opts...)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77537028/error-sending-sms-with-golang-smpp-protocol-unknown-address",
    "body": "package main\nimport (\n    \"log\"\n    \"github.com/fiorix/go-smpp/smpp\"\n    \"github.com/fiorix/go-smpp/smpp/pdu/pdufield\"\n    \"github.com/fiorix/go-smpp/smpp/pdu/pdutext\"\n)\nfunc main() {\n    tx := &smpp.Transmitter{\n        Addr:   \"server:port\",\n        User:   \"userId\",\n        Passwd: \"password\",\n    }\n    // Create persistent connection, wait for the first status.\n    conn := <-tx.Bind()\n    if conn.Status() != smpp.Connected {\n        log.Fatal(conn.Error())\n    }\n    sm, err := tx.Submit(&smpp.ShortMessage{\n        Src:      \"MyCompany\",\n        Dst:      \"25*********\",\n        Text:     pdutext.Raw(\"Sample sms\"),\n        Register: pdufield.NoDeliveryReceipt,\n\t\t// **ADDED THESS 2 FIELDS**\n\t\tSourceAddrTON: 5,\n\t\tSourceAddrNPI: 0,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"Message ID:\", sm.RespID())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77377653/how-to-implement-retry-logic-for-making-rest-api-call-to-get-token-every-5-mins",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\tslog.SetDefault(slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{AddSource: true})))\n\tslog.Info(Name, \"Version\", Version)\n\tslog.Info(Name, \"GitCommit\", GitCommit)\n\tslog.Info(Name, \"runtime.Version\", runtime.Version())\n\tsignals := make(chan os.Signal, 1) // Setup graceful shutdown\n\t// Docker and Kubernetes use the SIGTERM signal to gracefully shut down a container.\n\tsignal.Notify(signals, os.Interrupt, syscall.SIGTERM)\n\tvar wg sync.WaitGroup\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\twithServer := len(os.Args) == 1\n\tif withServer {\n\t\twg.Add(1)\n\t\tgo serve(ctx, &wg)\n\t}\n\twg.Add(1)\n\tgo getPeriodically(ctx, &wg)\n\t// Wait for the termination signal\n\tslog.Info(\"Starting graceful shutdown\", \"Received termination signal\", <-signals)\n\tif withServer {\n\t\terr := server.Shutdown(ctx)\n\t\tif err != nil {\n\t\t\tslog.Error(\"server\", \"error\", err)\n\t\t}\n\t}\n\tcancel()\n\twg.Wait()\n\tslog.Info(\"App: graceful shutdown completed\")\n}\nvar interval = 1 * time.Second\nfunc getPeriodically(ctx context.Context, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tt := time.NewTicker(interval)\n\tdefer t.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-t.C:\n\t\t\tinterval = 5 * time.Minute\n\t\t\tt.Reset(interval)\n\t\t\tk, err := demo(ctx)\n\t\t\tif err != nil {\n\t\t\t\tslog.Error(\"get\", \"error\", err.Error())\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tslog.Info(\"get\", \"key\", k)\n\t\tcase <-ctx.Done():\n\t\t\tslog.Info(\"getPeriodically: graceful shutdown completed\")\n\t\t\treturn\n\t\t}\n\t}\n}\nfunc demo(ctx context.Context) (key string, err error) {\n\tget, err := http.NewRequestWithContext(ctx, http.MethodGet, address, nil)\n\tif err != nil {\n\t\treturn\n\t}\n\tres, err := client.Do(get)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\tvar KeyId *Response\n\terr = json.NewDecoder(res.Body).Decode(&KeyId)\n\tif err != nil {\n\t\treturn\n\t}\n\tkey = KeyId.Key\n\treturn\n}\ntype Response struct {\n\tKey string\n}\nfunc serve(ctx context.Context, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/Acct\", home)\n\tserver = &http.Server{\n\t\tAddr:         serverAddr,\n\t\tHandler:      mux,\n\t\tReadTimeout:  10 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t}\n\tslog.Info(\"Server\", \"Addr\", server.Addr)\n\terr := server.ListenAndServe()\n\tif err != nil && err != http.ErrServerClosed {\n\t\tslog.Error(\"Server\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n\tslog.Info(\"Server: graceful shutdown completed\")\n}\nfunc home(w http.ResponseWriter, r *http.Request) {\n\tslog.Info(\"home\", \"ClientIP\", clientIP(r))\n\tjson.NewEncoder(w).Encode(response{Status: 200, Key: \"Key1234\", Account: \"Account1234\"})\n}\ntype response struct {\n\tStatus  int\n\tKey     string\n\tAccount string\n}\nfunc clientIP(r *http.Request) string {\n\tip := r.Header.Get(\"X-Real-IP\")\n\tif ip == \"\" {\n\t\tip = r.Header.Get(\"X-Forwarded-For\")\n\t\tif ip == \"\" {\n\t\t\tip = r.RemoteAddr\n\t\t}\n\t}\n\treturn ip\n}\nvar (\n\taddress    = \"http://127.0.0.1:8080/Acct\"\n\tserverAddr = \":8080\"\n\tclient     = http.Client{\n\t\tTimeout: 10 * time.Second,\n\t}\n\tserver *http.Server\n\tVersion, Name, GitCommit string\n\t// CGO_ENABLED=0 go build -ldflags=\"-s -X main.Version=$(Version) -X main.Name=$(Name) -X main.GitCommit=$(GIT_COMMIT)\" -trimpath=true .\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/77319517/how-write-link-in-links",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/PuerkitoBio/goquery\"\n)\nfunc main() {\n\tvar links string = \"\"\n\tresp, err := http.Get(\"https://dev.bolshoi.ru/visit/buyingnew/\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdoc, err := goquery.NewDocumentFromReader(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdoc.Find(\"a:contains(\\\"График предварительной продажи билетов на декабрь 2023\\\")\").Each(func(i int, s *goquery.Selection) {\n\t\tlink, _ := s.Attr(\"href\")\n\t\tfmt.Println(link)\n\t\tlinks = link\n\t})\n\tfmt.Println(links)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77317466/how-make-long-term-pipe-connection-between-go-and-c-console-application",
    "body": "// You can edit this code!\n// Click here and start typing.\npackage main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os/exec\"\n)\nfunc main() {\n\tcmd := exec.Command(\"%path to app%\\\\ConsoleApp.exe\") // process that will be started\n\tstdout, err := cmd.StdoutPipe()                      // use std out pipe\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tscanner := bufio.NewScanner(stdout)\n\tstdin, err := cmd.StdinPipe() // use std in pipe\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := cmd.Start(); err != nil { // start\n\t\tpanic(err)\n\t}\n\tfor {\n\t\tvar w1 string\n\t\t_, err := fmt.Scanln(&w1) // read line from console\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif _, err := io.WriteString(stdin, w1); err != nil {\n\t\t\tpanic(err)\n\t\t} // pass it to console app\n\t\tif scanner.Scan() {\n\t\t\tread := scanner.Text()\n\t\t\tfmt.Println(read)\n\t\t} else {\n\t\t\tif err := scanner.Err(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77317466/how-make-long-term-pipe-connection-between-go-and-c-console-application",
    "body": "{Go}\npackage main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os/exec\"\n)\nfunc main() {\n\tcmd := exec.Command(\"%path to the exe%\")\n\tstdout, err := cmd.StdoutPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tstderr, err := cmd.StderrPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tscanner := bufio.NewScanner(stdout)\n\tstdin, err := cmd.StdinPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := cmd.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor {\n\t\tvar w1 string\n\t\t_, err := fmt.Scanln(&w1)\n\t\tw2 := []byte(w1) // important! You need convert string to byte array\n\t\tif err != nil {\n\t\t\tlog.Fatal()\n\t\t}\n\t\tif _, err := stdin.Write(w2); err != nil { // pass byte array\n\t\t\tlog.Fatal(stderr)\n\t\t\tpanic(err)\n\t\t}\n\t\tif scanner.Scan() {\n\t\t\tread := scanner.Text()\n\t\t\tfmt.Println(read)\n\t\t} else {\n\t\t\tif err := scanner.Err(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77317466/how-make-long-term-pipe-connection-between-go-and-c-console-application",
    "body": "{C#}\npublic static string ByteArrayToString(this byte[] byteArray, int size) {\n    // get decoder to decode input encoding\n    var decoder = Console.InputEncoding.GetDecoder();\n    // count char that will be restored\n    int charCount = decoder.GetCharCount(byteArray, 0, size);\n    // initialize char array\n    char[] charArray = new char[charCount];\n    // restore to char array\n    decoder.GetChars(byteArray, 0, size, charArray, 0);\n    // get and return string from our char array\n    return new string(charArray);\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77317466/how-make-long-term-pipe-connection-between-go-and-c-console-application",
    "body": "{C#}\ndouble sum = 0;\nbool flag = true;\nwhile(flag) {\n    string str;\n    using Stream stdin = Console.OpenStandardInput(); // for reading\n    byte[] buffer = new byte[2048];\n    int bytes = 0; // bytes count\n    while((bytes = stdin.Read(buffer, 0, buffer.Length)) > 0) { // read\n        str = buffer.ByteArrayToString(bytes); // restore string\n        flag = double.TryParse(str, out double addend);\n        sum += flag ? addend : 0;\n        Console.WriteLine(sum); //write\n        if(!flag)\n            break;\n    }\n}\nreturn 0;"
  },
  {
    "url": "https://stackoverflow.com/questions/77312313/running-sql-file-on-postgres-db-with-go-not-getting-all-results",
    "body": "func Connect() *sql.DB {\n    connectionString := \"postgres://user:password@localhost:5432/dbname?sslmode=disable\"\n    base, err := pq.NewConnector(connectionString)\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Notice listner stores any notices in a slice to be returned after query is run\n    connector := pq.ConnectorWithNoticeHandler(\n        base,\n        func(notice *pq.Error) {\n            myresults.notices = append(myresults.notices, notice.Message)\n        })\n    return sql.OpenDB(connector)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77312313/running-sql-file-on-postgres-db-with-go-not-getting-all-results",
    "body": "func RunQuery(db *sql.DB, query string) (Results, error) {\n\tvar myresults Results\n\tresponse, err := db.Query(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t//var allRows [][]string\n\tvar row []string\n\trow, err = response.Columns()\n\tif err != nil {\n\t\tfmt.Println(\"error getting column names\")\n\t\treturn myresults, err\n\t}\n\tmyresults.allRows = append(myresults.allRows, row)\n\traw := make([][]byte, len(row))       // byte slice is one column in the returned row. The slice of byte slice is to store multiple columns in one slice\n\tdest := make([]interface{}, len(row)) // slice of interface to insert unknown number of returned columns\n\t// We cannot scan directly into a slice of bytes and need to use an empty inteface to scan into\n\t// This assigns the address of the i th index to dest so when we scan into dest, raw slice is populated with the data we need to work on\n\tfor i := range dest {\n\t\tdest[i] = &raw[i] // Use pointers to byte slices for Scan\n\t}\n\tfor response.Next() {\n\t\t// scan row into the slice of interface which holds the addresses of raw variable\n\t\terr := response.Scan(dest...)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unable to scan row\")\n\t\t\tbreak\n\t\t}\n\t\trow := make([]string, len(myresults.allRows[0]))\n\t\tfor i, v := range raw { // loop through slice of byte slice\n\t\t\tif v == nil {\n\t\t\t\trow[i] = \"\" // nil object returned from db. cannot have nil string\n\t\t\t} else {\n\t\t\t\trow[i] = string(v)\n\t\t\t}\n\t\t}\n\t\tmyresults.allRows = append(myresults.allRows, row)\n\t}\n\treturn myresults, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77312313/running-sql-file-on-postgres-db-with-go-not-getting-all-results",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/lib/pq\"\n)\nfunc Connect(connectionString string, channel chan string) *sql.DB {\n\tbase, err := pq.NewConnector(connectionString)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Notice listner stores any notices in a slice to be returned after query is run\n\tconnector := pq.ConnectorWithNoticeHandler(\n\t\tbase,\n\t\tNotifyHandler,\n\t)\n\treturn sql.OpenDB(connector)\n}\ntype Results struct {\n\tallRows [][]string\n\tnotices []string\n}\nvar channel chan string\nfunc NotifyHandler(notice *pq.Error) {\n\tchannel <- notice.Message\n}\nfunc RunQuery(db *sql.DB, query string, myresults *Results) error {\n\tresponse, err := db.Query(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t//var allRows [][]string\n\tvar row []string\n\trow, err = response.Columns()\n\tif err != nil {\n\t\tfmt.Println(\"error getting column names\")\n\t\treturn err\n\t}\n\tmyresults.allRows = append(myresults.allRows, row)\n\traw := make([][]byte, len(row))       // byte slice is one column in the returned row. The slice of byte slice is to store multiple columns in one slice\n\tdest := make([]interface{}, len(row)) // slice of interface to insert unknown number of returned columns\n\t// We cannot scan directly into a slice of bytes and need to use an empty inteface to scan into\n\t// This assigns the address of the i th index to dest so when we scan into dest, raw slice is populated with the data we need to work on\n\tfor i := range dest {\n\t\tdest[i] = &raw[i] // Use pointers to byte slices for Scan\n\t}\n\tfor response.Next() {\n\t\t// scan row into the slice of interface which holds the addresses of raw variable\n\t\terr := response.Scan(dest...)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"unable to scan row\")\n\t\t\tbreak\n\t\t}\n\t\trow := make([]string, len(myresults.allRows[0]))\n\t\tfor i, v := range raw { // loop through slice of byte slice\n\t\t\tif v == nil {\n\t\t\t\trow[i] = \"\" // nil object returned from db. cannot have nil string\n\t\t\t} else {\n\t\t\t\trow[i] = string(v)\n\t\t\t}\n\t\t}\n\t\temptyColumns := 0\n\t\tfor _, field := range row {\n\t\t\tif len(field) == 0 {\n\t\t\t\temptyColumns++\n\t\t\t}\n\t\t}\n\t\tif emptyColumns == len(myresults.allRows[0]) {\n\t\t\tbreak\n\t\t}\n\t\tmyresults.allRows = append(myresults.allRows, row)\n\t}\n\treturn nil\n}\nfunc SendNotifs(db *sql.DB, notifs string) {\n\tresult, err := db.Exec(notifs)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"execute notify result:\", result)\n}\nfunc main() {\n\tsqlFileContents, err := os.ReadFile(\"test.sql\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tchannel = make(chan string)\n\tconnectionString := \"postgres://user:password@localhost:5432/dbname?sslmode=disable\"\n\tdb := Connect(connectionString, channel)\n\tstatements := strings.Split(string(sqlFileContents), \";\")\n\tvar myresults Results\n\terr = RunQuery(db, statements[0], &myresults)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"query 1:\", myresults)\n    // should run in background\n\tgo SendNotifs(db, strings.Join(statements[1:6], \";\")+\";\")\n// to break after receiving all of notifies\nNotifyWaitLoop:\n\tfor {\n\t\tselect {\n\t\tcase notify := <-channel:\n\t\t\tmyresults.notices = append(myresults.notices, notify)\n\t\tcase <-time.After(1 * time.Second):\n\t\t\tif len(myresults.notices) == len(myresults.allRows)-1 /*-1 is for columns which you have stored in query*/ {\n\t\t\t\tlog.Println(\"all notifs are received\")\n\t\t\t\tbreak NotifyWaitLoop\n\t\t\t}\n\t\t}\n\t}\n\tlog.Println(\"notify result:\", myresults)\n\terr = RunQuery(db, statements[7], &myresults)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"query 2:\", myresults)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77135706/how-to-send-traces-to-jaeger-via-grpc",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.24.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n// Initializes an OTLP exporter, and configures the corresponding trace and\n// metric providers.\nfunc initProvider() (func(context.Context) error, error) {\n\tctx := context.Background()\n\tres, err := resource.New(ctx,\n\t\tresource.WithAttributes(\n\t\t\t// the service name used to display traces in backends\n\t\t\tsemconv.ServiceName(\"test-service\"),\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create resource: %w\", err)\n\t}\n\t// If the OpenTelemetry Collector is running on a local cluster (minikube or\n\t// microk8s), it should be accessible through the NodePort service at the\n\t// `localhost:30080` endpoint. Otherwise, replace `localhost` with the\n\t// endpoint of your cluster. If you run the app inside k8s, then you can\n\t// probably connect directly to the service through dns.\n\tctx, cancel := context.WithTimeout(ctx, time.Second)\n\tdefer cancel()\n\tconn, err := grpc.DialContext(ctx, \"localhost:4317\",\n\t\t// Note the use of insecure transport here. TLS is recommended in production.\n\t\tgrpc.WithTransportCredentials(insecure.NewCredentials()),\n\t\tgrpc.WithBlock(),\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create gRPC connection to collector: %w\", err)\n\t}\n\t// Set up a trace exporter\n\ttraceExporter, err := otlptracegrpc.New(ctx, otlptracegrpc.WithGRPCConn(conn))\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create trace exporter: %w\", err)\n\t}\n\t// Register the trace exporter with a TracerProvider, using a batch\n\t// span processor to aggregate spans before export.\n\tbsp := sdktrace.NewBatchSpanProcessor(traceExporter)\n\ttracerProvider := sdktrace.NewTracerProvider(\n\t\tsdktrace.WithSampler(sdktrace.AlwaysSample()),\n\t\tsdktrace.WithResource(res),\n\t\tsdktrace.WithSpanProcessor(bsp),\n\t)\n\totel.SetTracerProvider(tracerProvider)\n\t// set global propagator to tracecontext (the default is no-op).\n\totel.SetTextMapPropagator(propagation.TraceContext{})\n\t// Shutdown will flush any remaining spans and shut down the exporter.\n\treturn tracerProvider.Shutdown, nil\n}\nfunc main() {\n\tlog.Printf(\"Waiting for connection...\")\n\tctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer cancel()\n\tshutdown, err := initProvider()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif err := shutdown(ctx); err != nil {\n\t\t\tlog.Fatal(\"failed to shutdown TracerProvider: %w\", err)\n\t\t}\n\t}()\n\ttracer := otel.Tracer(\"test-tracer\")\n\t// Attributes represent additional key-value descriptors that can be bound\n\t// to a metric observer or recorder.\n\tcommonAttrs := []attribute.KeyValue{\n\t\tattribute.String(\"attrA\", \"chocolate\"),\n\t\tattribute.String(\"attrB\", \"raspberry\"),\n\t\tattribute.String(\"attrC\", \"vanilla\"),\n\t}\n\t// work begins\n\tctx, span := tracer.Start(\n\t\tctx,\n\t\t\"CollectorExporter-Example\",\n\t\ttrace.WithAttributes(commonAttrs...))\n\tdefer span.End()\n\tfor i := 0; i < 10; i++ {\n\t\t_, iSpan := tracer.Start(ctx, fmt.Sprintf(\"Sample-%d\", i))\n\t\tlog.Printf(\"Doing really hard work (%d / 10)\\n\", i+1)\n\t\t<-time.After(time.Second)\n\t\tiSpan.End()\n\t}\n\tlog.Printf(\"Done!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77135706/how-to-send-traces-to-jaeger-via-grpc",
    "body": "$ go mod init tmp\n...\n$ go mod tidy\n...\n$ go run .\n2024/03/11 13:34:43 Waiting for connection...\n2024/03/11 13:34:43 Doing really hard work (1 / 10)\n2024/03/11 13:34:44 Doing really hard work (2 / 10)\n2024/03/11 13:34:45 Doing really hard work (3 / 10)\n2024/03/11 13:34:46 Doing really hard work (4 / 10)\n2024/03/11 13:34:47 Doing really hard work (5 / 10)\n2024/03/11 13:34:48 Doing really hard work (6 / 10)\n2024/03/11 13:34:49 Doing really hard work (7 / 10)\n2024/03/11 13:34:50 Doing really hard work (8 / 10)\n2024/03/11 13:34:51 Doing really hard work (9 / 10)\n2024/03/11 13:34:52 Doing really hard work (10 / 10)\n2024/03/11 13:34:53 Done!"
  },
  {
    "url": "https://stackoverflow.com/questions/77127659/hoping-to-use-the-reader-interface-in-order-to-make-my-binary-files-import-code",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"reflect\"\n)\n// decoder function receives a source byte slice and a destination pointer\n// it returns number of bytes that have been parsed and optionally an error\ntype Decoder func(src []byte, dest reflect.Value, structField reflect.StructField) (int, error)\ntype BinaryDecoder struct {\n\tCodecs map[reflect.Kind]Decoder\n}\nfunc (d *BinaryDecoder) Unpack(src []byte, dst interface{}) (int, error) {\n\treturn d.unpackRecursive(src, dst, reflect.StructField{})\n}\nfunc (d *BinaryDecoder) unpackRecursive(src []byte, dst interface{}, structField reflect.StructField) (int, error) {\n\tvar bytesRead int = 0\n\tvar err error\n\tdstValue := reflect.ValueOf(dst)\n\tdstType := dstValue.Type()\n\tif dstValue.Kind() == reflect.Ptr {\n\t\tdstValue = dstValue.Elem()\n\t\tdstType = dstType.Elem()\n\t}\n\tvalueType := dstValue.Kind()\n\tswitch valueType {\n\tcase reflect.Struct:\n\t\t// let's unpack the struct field by field.\n\t\tfor i := 0; i < dstValue.NumField(); i += 1 {\n\t\t\tstructField := dstValue.Field(i)\n\t\t\tfmt.Printf(\"%d'th field has a name of %s and is of type %v\\n\", i, structField.Type().Name(), structField.Kind())\n\t\t\tfmt.Printf(\"bin tag: %v\\n\", dstType.Field(i).Tag.Get(\"bin\"))\n\t\t\tif bytesRead, err = d.unpackRecursive(src, structField.Addr().Interface(), dstType.Field(i)); err != nil {\n\t\t\t\treturn -1, fmt.Errorf(\"unable to unpack struct: %v\", err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Read %d bytes from %s\\n\", bytesRead, structField.Type().Name())\n\t\t\tsrc = src[bytesRead:]\n\t\t}\n\tcase reflect.Array:\n\t\tdeclaredSize := dstType.Size()\n\t\tfmt.Printf(\"begin to unpack array; declaredSize=%d\\n\", declaredSize)\n\t\tfor i := 0; i < int(declaredSize); i += 1 {\n\t\t\tif bytesRead, err = d.unpackRecursive(src, dstValue.Index(i).Addr().Interface(), structField); err != nil {\n\t\t\t\treturn -1, fmt.Errorf(\"unable to unpack array at position %d: %v\", i, err)\n\t\t\t}\n\t\t\tsrc = src[bytesRead:]\n\t\t}\n\tdefault:\n\t\tdecoder, exists := d.Codecs[valueType]\n\t\tif !exists {\n\t\t\treturn -1, fmt.Errorf(\"unsupported value type: %v\", valueType)\n\t\t}\n\t\treturn decoder(src, dstValue, structField)\n\t}\n\treturn bytesRead, nil\n}\ntype NestedStruct struct {\n\tPasString string `bin:\"p\"`\n}\ntype BinaryStruct struct {\n\tIntField uint16\n\tNested   NestedStruct\n\tArray    [10]byte\n}\nfunc decodeUint8(src []byte, dest reflect.Value, structField reflect.StructField) (int, error) {\n\tdest.SetUint(uint64(src[0]))\n\treturn 1, nil\n}\nfunc decodeUint16(src []byte, dest reflect.Value, structField reflect.StructField) (int, error) {\n\tvar tmpVal uint16\n\tif err := binary.Read(bytes.NewReader(src), binary.LittleEndian, &tmpVal); err != nil {\n\t\treturn -1, fmt.Errorf(\"unable to decode uint16: %v\", err)\n\t}\n\tdest.SetUint(uint64(tmpVal))\n\treturn 2, nil\n}\nfunc decodeString(src []byte, dest reflect.Value, structField reflect.StructField) (int, error) {\n\tif structField.Tag.Get(\"bin\") != \"p\" {\n\t\treturn -1, fmt.Errorf(\"unsupported string type\")\n\t}\n\tdeclaredLength := int(src[0])\n\tdest.SetString(string(src[1 : declaredLength+1]))\n\treturn declaredLength + 1, nil\n}\nfunc main() {\n\tvar srcBytes = []byte{\n\t\t0x00, 0x01, // uint16\n\t\t0x04, 0x41, 0x41, 0x41, 0x41, // string\n\t\t0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, // array of 10 bytes\n\t}\n\tvar bin BinaryStruct\n\tvar numBytes int\n\tvar err error\n\tdecoder := &BinaryDecoder{\n\t\tCodecs: map[reflect.Kind]Decoder{\n\t\t\treflect.Uint8:  decodeUint8,\n\t\t\treflect.Uint16: decodeUint16,\n\t\t\treflect.String: decodeString,\n\t\t},\n\t}\n\tnumBytes, err = decoder.Unpack(srcBytes, &bin)\n\tif err != nil {\n\t\tfmt.Printf(\"Error unpacking structure: %v\\n\", err)\n\t}\n\tfmt.Printf(\"Read %d bytes; end structure: %+v\\n\", numBytes, bin)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77108515/join-is-not-working-as-expected-with-gorm",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype User struct {\n\tId        int     `json:\"id\" gorm:\"primaryKey\"`\n\tName      string  `json:\"name\"`\n\tPassword  string  `json:\"pass\"`\n\tImagePath string  `json:\"image\"`\n\tRoles     []Roles `json:\"roles\" gorm:\"foreignKey:user_id;references:id\"`\n}\nfunc (*User) TableName() string {\n\treturn \"users\"\n}\ntype Roles struct {\n\tId     int    `json:\"id\" gorm:\"primaryKey\"`\n\tUserId int    `json:\"user_id\"`\n\tRoles  string `json:\"roles\"`\n}\nfunc (*Roles) TableName() string {\n\treturn \"roles\"\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"test.db\"), &gorm.Config{\n\t\tDisableForeignKeyConstraintWhenMigrating: true,\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer os.Remove(\"test.db\")\n\tif err := db.AutoMigrate(&User{}, &Roles{}); err != nil {\n\t\tpanic(err)\n\t}\n\tdb.Create(&User{Id: 1, Name: \"bob\", Roles: []Roles{\n\t\t{Id: 1, Roles: \"a,b,c\"},\n\t\t{Id: 2, Roles: \"a,b,c\"},\n\t}})\n\tvar out []*User\n\tdb.Model(&User{}).Preload(\"Roles\").Where(\"id=1\").First(&out)\n\tb, _ := json.Marshal(&out)\n\tfmt.Println(string(b))\n    // output:\n    // [{\"id\":1,\"name\":\"bob\",\"pass\":\"\",\"image\":\"\",\"roles\":[{\"id\":1,\"user_id\":1,\"roles\":\"a,b,c\"},{\"id\":2,\"user_id\":1,\"roles\":\"a,b,c\"}]}]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76937326/how-can-i-improve-this-nesting-logic-to-make-it-work-properly-and-be-performant",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n// Comment from Database\ntype Comment struct {\n\tID       string `json:\"id\"`\n\tParentID string `json:\"pid\"`\n\tText     string `json:\"text\"`\n}\n// NestedComment output\ntype NestedComment struct {\n\tComment\n\tChildren []*NestedComment `json:\"children,omitempty\"`\n}\nfunc main() {\n\t// Some comment data from DB\n\tjsondata := `[{\"id\":\"f1c3a838-f4b4-4ebd-bb1b-d3e4c0dce27d\",\"pid\":\"6a162b3f-9341-46e9-95f7-dedc6cd06868\",\"text\":\"comment 1\"},{\"id\":\"131cf4bb-1971-43a2-992f-2cbb042a4184\",\"pid\":\"\",\"text\":\"comment 2\"},{\"id\":\"4c93a789-ecab-4173-954c-b039cd3a9e17\",\"pid\":\"131cf4bb-1971-43a2-992f-2cbb042a4184\",\"text\":\"comment 3\"},{\"id\":\"c7974b6d-67e1-47d0-84fa-c78d51682df2\",\"pid\":\"131cf4bb-1971-43a2-992f-2cbb042a4184\",\"text\":\"comment 4\"},{\"id\":\"386c4439-4596-47c1-99bf-cb479055fe5a\",\"pid\":\"\",\"text\":\"comment 5\"},{\"id\":\"5ef0816e-ea13-4a7e-8009-e67ee08ef906\",\"pid\":\"386c4439-4596-47c1-99bf-cb479055fe5a\",\"text\":\"comment 6\"},{\"id\":\"96b0a536-602b-4f3f-a352-020f22cdfb18\",\"pid\":\"\",\"text\":\"comment 7\"},{\"id\":\"d0f11e98-deea-4fd5-becb-8f406ebcae83\",\"pid\":\"96b0a536-602b-4f3f-a352-020f22cdfb18\",\"text\":\"comment 8\"},{\"id\":\"bad87461-3cbf-4ecb-a8c7-36876b57d652\",\"pid\":\"\",\"text\":\"comment 9\"},{\"id\":\"e3ee6f90-495f-4348-9c29-bd6e15ec3b39\",\"pid\":\"bad87461-3cbf-4ecb-a8c7-36876b57d652\",\"text\":\"comment 10\"},{\"id\":\"6a162b3f-9341-46e9-95f7-dedc6cd06868\",\"pid\":\"\",\"text\":\"comment 11\"},{\"id\":\"041c7c2d-0688-491e-b6cd-899eac95bd3d\",\"pid\":\"\",\"text\":\"comment 12\"},{\"id\":\"5acdf3ff-345b-47a5-bd66-a6687a1441b7\",\"pid\":\"041c7c2d-0688-491e-b6cd-899eac95bd3d\",\"text\":\"comment 13\"},{\"id\":\"aaee2ae5-7e3a-4435-a094-83bf6b77abfb\",\"pid\":\"\",\"text\":\"comment 14\"},{\"id\":\"6108b28c-a7af-4c5a-a38c-c22db0d34b31\",\"pid\":\"aaee2ae5-7e3a-4435-a094-83bf6b77abfb\",\"text\":\"comment 15\"},{\"id\":\"1736393e-95b0-4f5d-a149-50fe52c28350\",\"pid\":\"\",\"text\":\"comment 16\"},{\"id\":\"b646f202-17aa-4af9-b8dc-c1d8ff3529ac\",\"pid\":\"1736393e-95b0-4f5d-a149-50fe52c28350\",\"text\":\"comment 17\"},{\"id\":\"a8827b1d-fdbc-41c2-bdb5-38e8b308dedc\",\"pid\":\"b646f202-17aa-4af9-b8dc-c1d8ff3529ac\",\"text\":\"comment 18\"},{\"id\":\"76e49597-6039-4cb5-a595-556ccc2e3c12\",\"pid\":\"a8827b1d-fdbc-41c2-bdb5-38e8b308dedc\",\"text\":\"comment 19\"},{\"id\":\"07dc4b90-65d3-4f75-8351-457305988235\",\"pid\":\"76e49597-6039-4cb5-a595-556ccc2e3c12\",\"text\":\"comment 20\"},{\"id\":\"2d4e838b-82df-4ca0-bf9b-f1dfb99d6763\",\"pid\":\"07dc4b90-65d3-4f75-8351-457305988235\",\"text\":\"comment 21\"},{\"id\":\"617c1760-0dca-409c-af2a-c614f0530e07\",\"pid\":\"\",\"text\":\"comment 22\"},{\"id\":\"712c0b7e-a9e4-40fd-ab78-c39b483b1435\",\"pid\":\"617c1760-0dca-409c-af2a-c614f0530e07\",\"text\":\"comment 23\"},{\"id\":\"e325094c-886e-42c9-bd59-fdd7a189b384\",\"pid\":\"\",\"text\":\"comment 24\"},{\"id\":\"f3b8b0f9-edef-4ee6-9555-42e8595f854c\",\"pid\":\"e325094c-886e-42c9-bd59-fdd7a189b384\",\"text\":\"comment 25\"},{\"id\":\"6e09a231-a2ee-4aa1-a898-57695e6fe153\",\"pid\":\"\",\"text\":\"comment 26\"},{\"id\":\"63e629d6-c0f9-4b36-ad96-e0c47cf8bb4e\",\"pid\":\"6e09a231-a2ee-4aa1-a898-57695e6fe153\",\"text\":\"comment 27\"},{\"id\":\"d7b698f1-8757-46db-a6e6-5141a481b42b\",\"pid\":\"\",\"text\":\"comment 28\"},{\"id\":\"a7e3d522-553c-44f1-befa-047bd94f0e59\",\"pid\":\"\",\"text\":\"comment 29\"},{\"id\":\"fe78ce24-c2c8-4d00-b96d-8b8be9ce0f06\",\"pid\":\"\",\"text\":\"comment 30\"},{\"id\":\"fabdccb5-a024-4476-bd51-7d55fb685c42\",\"pid\":\"\",\"text\":\"comment 31\"},{\"id\":\"608d0693-6e43-46a0-9e54-107da6adb109\",\"pid\":\"fabdccb5-a024-4476-bd51-7d55fb685c42\",\"text\":\"comment 32\"}]`\n\tvar comments []Comment\n\terr := json.Unmarshal([]byte(jsondata), &comments)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tarranged := ArrangeComments(comments)\n\tarrangedjson, _ := json.MarshalIndent(arranged, \"\", \"  \")\n\tfmt.Println(string(arrangedjson))\n\tfmt.Println(\"comments\", len(comments), \"arranged\", recursiveCount(arranged))\n}\nfunc recursiveCount(arranged []*NestedComment) int {\n\tcount := len(arranged)\n\tfor _, item := range arranged {\n\t\tcount += recursiveCount(item.Children)\n\t}\n\treturn count\n}\n// Nesting function -------------------------------------------------------------------------\nfunc ArrangeComments(comments []Comment) []*NestedComment {\n\t// Map to hold references to NestedComment by their ID\n\tqueue := make(map[string]*NestedComment)\n\t// Result slice\n\tvar result []*NestedComment\n\t// First, create all NestedComments and store references in the map\n\tfor _, comment := range comments {\n\t\tnc := &NestedComment{Comment: comment}\n\t\tqueue[comment.ID] = nc\n\t}\n\t// Second, loop through the map and add children to their parents\n\tfor _, comment := range queue {\n\t\tif comment.ParentID != \"\" {\n\t\t\tparent := queue[comment.Comment.ParentID]\n\t\t\tif parent != nil {\n\t\t\t\tparent.Children = append(parent.Children, comment)\n\t\t\t}\n\t\t}\n\t}\n\t// Third, loop through the map and add all root comments to the result slice\n\tfor _, comment := range queue {\n\t\tif comment.ParentID == \"\" {\n\t\t\tresult = append(result, comment)\n\t\t}\n\t}\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76748168/how-to-instantiate-golang-generic-type-seeding-it-from-reflect-type",
    "body": "type Merger[T any] interface {\n\tMerge(override T) (T, error)\n}\nfunc asMerger(\n\tvalue reflect.Value,\n) (\n\tmergeFn func(override reflect.Value) (reflect.Value, error),\n\tisMerger bool,\n) {\n\tvType := value.Type()\n\tfor i := 0; i < vType.NumMethod(); i++ {\n\t\tmethod := vType.Method(i)\n\t\tif method.Name != \"Merge\" {\n\t\t\tcontinue\n\t\t}\n\t\tmethodType := method.Type\n\t\tif methodType.NumIn() != 2 {\n\t\t\treturn nil, false\n\t\t}\n\t\tif methodType.NumOut() != 2 {\n\t\t\treturn nil, false\n\t\t}\n\t\tif methodType.In(1) != vType {\n\t\t\treturn nil, false\n\t\t}\n\t\tif methodType.Out(0) != vType {\n\t\t\treturn nil, false\n\t\t}\n\t\tif methodType.Out(1) != reflect.TypeOf((*error)(nil)).Elem() {\n\t\t\treturn nil, false\n\t\t}\n\t\treturn func(override reflect.Value) (merged reflect.Value, err error) {\n\t\t\t// call method\n\t\t\tresults := method.Func.Call([]reflect.Value{value, override})\n\t\t\tif !results[1].IsZero() && !results[1].IsNil() {\n\t\t\t\terr = results[1].Interface().(error)\n\t\t\t}\n\t\t\treturn results[0], err\n\t\t}, true\n\t}\n\treturn nil, false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76669548/stopping-a-long-running-method-using-channels",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nfunc checkDone(done <-chan struct{}) bool {\n\tselect {\n\tcase <-done:\n\t\tfmt.Println(\"Worker cancelled\")\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\nfunc worker(cancelled <-chan struct{}, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor {\n\t\tif checkDone(cancelled) {\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"Working...\")\n\t\t// Before important works start, check for cancellation\n\t\tif checkDone(cancelled) {\n\t\t\treturn\n\t\t}\n\t\ttime.Sleep(5 * time.Second)\n\t\t// this is interruptible point in the middle, check for cancellation\n\t\tif checkDone(cancelled) {\n\t\t\t// because previous job is done,\n\t\t\t// but I receive the done signal, what should I do for this case?\n\t\t\t// write some code\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"ended\")\n\t}\n}\nfunc main() {\n\tcancelled := make(chan struct{})\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo worker(cancelled, &wg)\n\tgo func() {\n\t\ttime.Sleep(2 * time.Second)\n\t\tcancelled <- struct{}{}\n\t}()\n\twg.Wait()\n\tfmt.Println(\"Program completed\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76667407/ejabberd-connection-in-golang-with-tls-confg",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"github.com/mattn/go-xmpp\"\n)\nfunc main() {\n\toptions := xmpp.Options{\n\t\tHost:     \"your_ejabberd_host\",\n\t\tUser:     \"your_username\",\n\t\tPassword: \"your_password\",\n\t\tDebug:    true,\n\t\tNoTLS:    true,\n\t\tTLSConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t}\n\tconn, err := options.NewClient()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, err = conn.Send(xmpp.Chat{\n\t\tRemote: \"recipient_jid@example.com\",\n\t\tType:   \"chat\",\n\t\tText:   \"Hello, this is a test message!\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tconn.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76618854/additional-id-field-generated-when-posting-into-mongodb",
    "body": "package main\nimport (\n\t\"context\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Post struct {\n\tID      primitive.ObjectID `bson:\"_id\"`\n\tTitle   string             `validate:\"required,gte=2,lte=20\"`\n\tArticle string             `validate:\"required,gte=4,lte=40\"`\n}\nfunc main() {\n\tclient, err := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpostCollection := client.Database(\"demo\").Collection(\"posts\")\n\tpost := Post{\n\t\tID:      primitive.NewObjectID(),\n\t\tTitle:   \"test title\",\n\t\tArticle: \"test content\",\n\t}\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif _, err = postCollection.InsertOne(context.Background(), post); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76568831/render-table-in-html-template-where-table-data-are-keys-and-values-of-some-json",
    "body": "var result map[string]interface{}\nerr = json.NewDecoder(resp.Body).Decode(&result)\nif err != nil {\n\tpanic(err)\n}\ntableTemplate := `\n\t\t<table>\n\t\t<tr>\n\t\t\t<th>Column A</th>\n\t\t\t<th>Column B</th>\n\t\t</tr>\n\t\t{{range .Keys}}\n\t\t\t<tr>\n\t\t\t\t<td>{{.}}</td>\n\t\t\t\t<td>{{index $.Data .}}</td>\n\t\t\t</tr>\n\t\t{{end}}\n\t\t</table>\n`\ntmpl := template.New(\"table\")\ntmpl, err = tmpl.Parse(tableTemplate)\nif err != nil {\n\tfmt.Println(\"Error parsing template:\", err)\n\treturn\n}\ntemplateData := map[string]interface{}{\n\t\"Data\": result,\n\t\"Keys\": []string{\n\t\t\"File.Trimmed\", \"Feature\", \"Object.Notation\",\n\t},\n}\nerr = tmpl.Execute(w, templateData)\nif err != nil {\n\tfmt.Println(\"Error executing template:\", err)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76560602/accessing-validation-tag-parameters-of-other-fields-in-go-playground-validator",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/go-playground/validator/v10\"\n)\nfunc validateDateGreaterThan(fl validator.FieldLevel) bool {\n\tfallback := \"2006-01-02\"\n\tf := getFormat(fl.Parent().Type(), fl.StructFieldName(), fallback)\n\tdateMax, err := time.Parse(f, fl.Field().String())\n\tif err != nil {\n\t\treturn false\n\t}\n\tminField, kind, _, found := fl.GetStructFieldOK2()\n\tif !found {\n\t\tpanic(\"field not found\")\n\t}\n\tif kind != reflect.String {\n\t\tpanic(\"unsupported type\")\n\t}\n\tf = getFormat(fl.Parent().Type(), fl.Param(), fallback)\n\tdateMin, err := time.Parse(f, minField.String())\n\tif err != nil {\n\t\treturn false\n\t}\n\treturn dateMax.After(dateMin)\n}\nfunc getFormat(typ reflect.Type, fieldName, fallback string) string {\n\tdf, ok := typ.FieldByName(fieldName)\n\tif !ok {\n\t\treturn fallback\n\t}\n\ttag := df.Tag.Get(\"validate\")\n\tif tag == \"\" {\n\t\treturn fallback\n\t}\n\tdatetime := \"datetime=\"\n\tvalues := strings.Split(tag, \",\")\n\tfor _, v := range values {\n\t\tif strings.HasPrefix(v, datetime) {\n\t\t\treturn strings.TrimSpace(v[len(datetime):])\n\t\t}\n\t}\n\treturn fallback\n}\ntype GetLogRequest struct {\n\tCreatedAtMin string `query:\"created_at_min\" validate:\"omitempty,datetime=2006-01-02\"`\n\tCreatedAtMax string `query:\"created_at_max\" validate:\"omitempty,datetime=2006-01-02,date_greater_than=CreatedAtMin\"`\n}\nvar validate *validator.Validate\nfunc main() {\n\tvalidate = validator.New()\n\tif err := validate.RegisterValidation(\"date_greater_than\", validateDateGreaterThan); err != nil {\n\t\tpanic(err)\n\t}\n\trequest := GetLogRequest{\n\t\tCreatedAtMin: \"2023-06-07\",\n\t\tCreatedAtMax: \"2023-06-08\",\n\t}\n\tfmt.Printf(\"validate error: %+v\\n\", validate.Struct(request))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76557686/need-help-in-getting-an-element-from-mongodb-document-and-updating-its-value-usi",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar (\n\tclient      *mongo.Client\n\tstickerscol *mongo.Collection\n)\nfunc init() {\n\tlog.Println(\"Setting up database...\")\n\tvar err error\n\tclient, err = mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"Connected to database\")\n\tstickerscol = client.Database(\"stickersbot\").Collection(\"stickers\")\n}\nfunc ChangeDefaultPack(userid int64, stickername string, format string) error {\n\tfmt.Println(userid, stickername, format)\n\tfilter := bson.M{\n\t\t\"_id\": userid,\n\t\t\"stickers\": bson.M{\n\t\t\t\"$elemMatch\": bson.M{\n\t\t\t\t\"stickername\":     stickername,\n\t\t\t\t\"stickerpacktype\": format,\n\t\t\t},\n\t\t},\n\t}\n\tupdateOther := bson.M{\n\t\t\"$set\": bson.M{\n\t\t\t\"stickers.$[elem].isdefault\": false,\n\t\t},\n\t}\n\tarrayFilters := options.ArrayFilters{\n\t\tFilters: []interface{}{bson.M{\"elem.stickerpacktype\": format}},\n\t}\n\tupdateOptions := options.Update().SetArrayFilters(arrayFilters)\n\tresult, err := stickerscol.UpdateOne(context.Background(), filter, updateOther, updateOptions)\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Printf(\"update other: %+v\\n\", result)\n\tupdate := bson.M{\n\t\t\"$set\": bson.M{\n\t\t\t\"stickers.$.isdefault\": true,\n\t\t},\n\t}\n\tok, err := stickerscol.UpdateOne(context.Background(), filter, update, options.Update().SetUpsert(true))\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Printf(\"update default: %+v\\n\", ok)\n\tif ok.ModifiedCount == 0 {\n\t\tfmt.Println(\"no document matched\")\n\t\treturn fmt.Errorf(\"no document matched\")\n\t}\n\treturn err\n}\nfunc main() {\n\tif err := ChangeDefaultPack(1633375527, \"Ddvus_1633375527_by_ChadManBot\", \"static\"); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76557686/need-help-in-getting-an-element-from-mongodb-document-and-updating-its-value-usi",
    "body": "--- before.json\t2023-06-27 00:34:32.721978745 +0800\n+++ after.json\t2023-06-27 00:34:59.489836137 +0800\n@@ -4,7 +4,7 @@\n     {\n       \"stickerpacktype\": \"static\",\n       \"stickername\": \"gVtOy_1633375527_by_ChadManBot\",\n-      \"isdefault\": true\n+      \"isdefault\": false\n     },\n     {\n       \"stickerpacktype\": \"animated\",\n@@ -104,7 +104,7 @@\n     {\n       \"stickerpacktype\": \"static\",\n       \"stickername\": \"Ddvus_1633375527_by_ChadManBot\",\n-      \"isdefault\": false\n+      \"isdefault\": true\n     },\n     {\n       \"stickerpacktype\": \"static\","
  },
  {
    "url": "https://stackoverflow.com/questions/76486237/not-able-to-setup-testcontainers-docker",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\t\"github.com/testcontainers/testcontainers-go\"\n\t\"github.com/testcontainers/testcontainers-go/wait\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype mongoDbContainer struct {\n\ttestcontainers.Container\n}\nfunc startContainer(ctx context.Context) (*mongoDbContainer, error) {\n\treq := testcontainers.ContainerRequest{\n\t\tImage:        \"mongo\",\n\t\tExposedPorts: []string{\"27017/tcp\"},\n\t\tWaitingFor: wait.ForAll(\n\t\t\twait.ForLog(\"Waiting for connections\"),\n\t\t\twait.ForListeningPort(\"27017/tcp\"),\n\t\t),\n\t}\n\tcontainer, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n\t\tContainerRequest: req,\n\t\tStarted:          true,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &mongoDbContainer{Container: container}, nil\n}\nfunc TestMongoDB(t *testing.T) {\n\tctx := context.Background()\n\tcontainer, err := startContainer(ctx)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tt.Cleanup(func() {\n\t\tif err := container.Terminate(ctx); err != nil {\n\t\t\tt.Fatalf(\"failed to terminate container: %s\", err)\n\t\t}\n\t})\n\tendpoint, err := container.Endpoint(ctx, \"mongodb\")\n\tif err != nil {\n\t\tt.Error(fmt.Errorf(\"failed to get endpoint %w\", err))\n\t}\n\tmongoClient, err := mongo.NewClient(options.Client().ApplyURI(endpoint))\n\tif err != nil {\n\t\tt.Fatal(fmt.Errorf(\"error creating mongo client: %w\", err))\n\t}\n\terr = mongoClient.Connect(ctx)\n\tif err != nil {\n\t\tt.Fatal(fmt.Errorf(\"error connecting to mongo: %w\", err))\n\t}\n\terr = mongoClient.Ping(ctx, nil)\n\tif err != nil {\n\t\tt.Fatal(fmt.Errorf(\"error pinging mongo: %w\", err))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76486237/not-able-to-setup-testcontainers-docker",
    "body": "=== RUN   TestMongoDB\n2023/06/16 16:34:46 github.com/testcontainers/testcontainers-go - Connected to docker:\n  Server Version: 24.0.2\n  API Version: 1.42\n  Operating System: Ubuntu 22.04.2 LTS\n  Total Memory: 15865 MB\n2023/06/16 16:34:46 🐳 Creating container for image docker.io/testcontainers/ryuk:0.4.0\n2023/06/16 16:34:46 ✅ Container created: 0ad432f3de7c\n2023/06/16 16:34:46 🐳 Starting container: 0ad432f3de7c\n2023/06/16 16:34:46 🚧 Waiting for container id 0ad432f3de7c image: docker.io/testcontainers/ryuk:0.4.0\n2023/06/16 16:34:46 ✅ Container started: 0ad432f3de7c\n2023/06/16 16:34:46 🐳 Creating container for image mongo\n2023/06/16 16:34:46 ✅ Container created: 8a2117f38bd4\n2023/06/16 16:34:46 🐳 Starting container: 8a2117f38bd4\n2023/06/16 16:34:47 🚧 Waiting for container id 8a2117f38bd4 image: mongo\n2023/06/16 16:34:47 ✅ Container started: 8a2117f38bd4\n2023/06/16 16:34:47 🐳 Terminating container: 8a2117f38bd4\n2023/06/16 16:34:47 🚫 Container terminated: 8a2117f38bd4\n--- PASS: TestMongoDB (1.46s)\nPASS\nok      testcontainers  1.467s"
  },
  {
    "url": "https://stackoverflow.com/questions/76076182/how-do-i-tell-the-diffrence-between-an-empty-list-of-mx-records-and-a-dns-error",
    "body": "var resolver net.Resolver\nfor _, preferGo := range []bool{true, false} {\n\tfor _, strictErrors := range []bool{true, false} {\n\t\tresolver.PreferGo = preferGo\n\t\tresolver.StrictErrors = strictErrors\n\t\tfmt.Printf(\"PreferGo: %v\\tStrictErrors: %v\\t\", preferGo, strictErrors)\n\t\tresult, err := resolver.LookupMX(context.Background(), \"chat.google.com\")\n\t\tfmt.Printf(\"Result: %v\\tError: %v\\n\", result, err)\n\t\tdnsErr, isDNSErr := err.(*net.DNSError)\n\t\tfmt.Printf(\"IsDNSError: %v\", isDNSErr)\n\t\tif isDNSErr {\n\t\t\tfmt.Printf(\n\t\t\t\t\"\\tIsTimeout: %v\\tIsTemporary: %v\\tIsNotFound: %v\",\n\t\t\t\tdnsErr.IsTimeout,\n\t\t\t\tdnsErr.IsTemporary,\n\t\t\t\tdnsErr.IsNotFound,\n\t\t\t)\n\t\t}\n\t\tfmt.Println()\n\t\tfmt.Println()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76076182/how-do-i-tell-the-diffrence-between-an-empty-list-of-mx-records-and-a-dns-error",
    "body": "PreferGo: true\tStrictErrors: true\tResult: []\tError: lookup chat.google.com on 10.64.15.252:53: no such host\nIsDNSError: true\tIsTimeout: false\tIsTemporary: false\tIsNotFound: true\nPreferGo: true\tStrictErrors: false\tResult: []\tError: lookup chat.google.com on 10.64.15.252:53: no such host\nIsDNSError: true\tIsTimeout: false\tIsTemporary: false\tIsNotFound: true\nPreferGo: false\tStrictErrors: true\tResult: []\tError: lookup chat.google.com: dnsquery: No records found for given DNS query.\nIsDNSError: true\tIsTimeout: false\tIsTemporary: false\tIsNotFound: false\nPreferGo: false\tStrictErrors: false\tResult: []\tError: lookup chat.google.com: dnsquery: No records found for given DNS query.\nIsDNSError: true\tIsTimeout: false\tIsTemporary: false\tIsNotFound: false"
  },
  {
    "url": "https://stackoverflow.com/questions/76034629/database-sql-convertassignrows-memory-leak",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Message struct {\n\tgorm.Model\n\tDescription string\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Message{})\n\tdefer db.Exec(`DELETE FROM \"messages\"`)\n\tdb.Create(&Message{Description: \"first\"})\n\tdb.Create(&Message{Description: \"second\"})\n\tdb.Create(&Message{Description: \"third\"})\n\tvar messages []Message\n\t// get data with SQL raw\n\tif err := db.Model(&Message{}).Raw(`SELECT * FROM \"messages\" ORDER BY \"messages\".\"id\"`).Scan(&messages).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"printed with SQL Raw...\")\n\tfor _, v := range messages {\n\t\tfmt.Println(v.Description)\n\t}\n\tfmt.Println(strings.Repeat(\"#\", 100))\n\tvar messages2 []Message\n\t// get data with Find method\n\tif err := db.Model(&Message{}).Find(&messages2).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"printed with Find...\")\n\tfor _, v := range messages2 {\n\t\tfmt.Println(v.Description)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75874335/serverless-authorizer-request-does-not-provide-methodarn-or-any-information-abo",
    "body": "custom:\n  authorizer:\n    type: token\n    identitySource: method.request.header.Authorization\n    identityValidationExpression: Bearer (.*)\n    name: permission_verify\n    # if this is in a different service, you can replace the name property with 'arn' having the arn of the function\nfunctions:\n  permission_verify:\n    handler: bin/handlers/permission/verify\n  permission_read:\n    events:\n      -http: # i had httpApi before\n        method: get\n        path: /\n        authorizer: ${self:custom.authorizer}"
  },
  {
    "url": "https://stackoverflow.com/questions/75874335/serverless-authorizer-request-does-not-provide-methodarn-or-any-information-abo",
    "body": "`\nservice: your-service\nprovider:\n  name: aws\n  runtime: go1.x\n  httpApi:\n    payload: '2.0'\nfunctions:\n  permission_verify:\n    handler: bin/handlers/permission/verify\n  your_protected_function:\n    handler: bin/handlers/your_protected_function\n    events:\n      - httpApi:\n          method: any # or the specific HTTP method you want to allow\n          path: /your_path\n          authorizer:\n            name: custom\ncustom:\n  authorizers:\n    custom:\n      functionName: permission_verify\n      type: request\npackage:\n  patterns:\n    - \"!./**\"\n    - ./bin/**"
  },
  {
    "url": "https://stackoverflow.com/questions/75839295/how-to-parse-video-timestamps-in-go",
    "body": "func ParseTime(timeStr string) (time.Time, error) {\n\tt := time.Date(1, 0, 0, 0, 0, 0, 0, time.UTC)\n\tarr := strings.Split(timeStr, \":\")\n\tvar d [3]float64 // d[0]: hour, [1]: min, 0: sec\n\tfor i := 2; i >= 0; i-- {\n\t\tif len(arr) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tval, err := strconv.Atoi(arr[len(arr)-1])\n\t\tif err != nil {\n\t\t\treturn t, err\n\t\t}\n\t\td[i] = float64(val)\n\t\tarr = arr[:len(arr)-1] // update arr\n\t}\n\tvar hours, minutes, seconds float64\n\thours, minutes, seconds = d[0], d[1], d[2]\n\tif v := hours + minutes/60 + seconds/3600; v >= 24 {\n\t\treturn t, fmt.Errorf(\"[invalid hour] %s | %.4f\", timeStr, v)\n\t}\n\treturn t.Add(time.Duration(hours)*time.Hour + time.Duration(minutes)*time.Minute + time.Duration(seconds)*time.Second), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75809692/go-colly-does-not-perform-all-async-calls",
    "body": "package main\nimport (\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/gocolly/colly\"\n\t\"github.com/gocolly/colly/debug\"\n)\nfunc main() {\n\taggregator := []string{}\n\tc := colly.NewCollector(\n\t\tcolly.Async(true),\n\t\tcolly.Debugger(&debug.LogDebugger{}),\n\t)\n\tc.Limit(&colly.LimitRule{\n\t\tParallelism: 4,\n\t\tRandomDelay: 2 * time.Second,\n\t})\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\taggregator = append(aggregator, link)\n\t})\n\tc.Visit(\"https://en.wikipedia.org/\")\n\tc.Wait()\n\tif err := os.WriteFile(\"test.json\", []byte(strings.Join(aggregator, \"\\n\")), 0o644); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75801966/golang-gin-rest-api-post-and-get",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/lib/pq\"\n\t_ \"github.com/lib/pq\"\n)\ntype Job struct {\n\tID       int       `db:\"id\" json:\"id\"`\n\tTitle    string    `db:\"title\" json:\"title\"`\n\tBody     string    `db:\"body\" json:\"body\"`\n\tDate     time.Time `db:\"date\" json:\"date\"`\n\tTitles   [4]string `db:\"titles\" json:\"titles\"`\n\tContents [4]string `db:\"contents\" json:\"contents\"`\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := sql.Open(\"postgres\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr := gin.Default()\n\tr.POST(\"/job\", func(c *gin.Context) {\n\t\tvar job Job\n\t\tif err := c.ShouldBindJSON(&job); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\t// insert job into database\n\t\tquery := \"INSERT INTO jobs (title, body,  titles, contents ,date) VALUES ($1, $2, $3,  $4, $5) RETURNING id\"\n\t\tvar id int\n\t\terr := db.QueryRow(query, job.Title, job.Body, pq.Array(job.Titles), pq.Array(job.Contents), time.Now()).Scan(&id)\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to create job\"})\n\t\t\treturn\n\t\t}\n\t\tjob.ID = id\n\t\tc.JSON(http.StatusOK, job)\n\t})\n\tr.GET(\"/jobs\", func(c *gin.Context) {\n\t\t// retrieve all jobs from database\n\t\trows, err := db.Query(\"SELECT * FROM jobs\")\n\t\tif err != nil {\n\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to retrieve jobs\"})\n\t\t\treturn\n\t\t}\n\t\tdefer rows.Close()\n\t\t// iterate over rows and store in slice of Jobs\n\t\tjobs := []Job{}\n\t\tfor rows.Next() {\n\t\t\tvar job Job\n\t\t\terr := rows.Scan(&job.ID, &job.Title, &job.Body, &job.Date, pq.Array(job.Titles[:]), pq.Array(job.Contents[:]))\n\t\t\tif err != nil {\n\t\t\t\tc.JSON(http.StatusInternalServerError, gin.H{\"error\": \"failed to retrieve jobs\"})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tjobs = append(jobs, job)\n\t\t}\n\t\tc.JSON(http.StatusOK, jobs)\n\t})\n\tr.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75733249/how-to-keep-elements-sorted-when-unmarshalling-xml",
    "body": "func (s *S) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tc := Child{}\n\tfor {\n\t\t// Token returns the next XML token in the input stream.\n        // At the end of the input stream, Token returns nil, io.EOF.\n\t\tt, _ := d.Token()\n\t\tswitch tt := t.(type) {\n\t\tcase xml.StartElement:\n\t\t\tc.TagName = tt.Name.Local\n\t\t\tif c.TagName == \"a\" {\n\t\t\t\tc.Toto = tt.Attr[0].Value\n\t\t\t}\n\t\t\tif c.TagName == \"b\" {\n\t\t\t\tc.Data = tt.Attr[0].Value\n\t\t\t}\n\t\tcase xml.CharData:\n\t\t\tc.Value = string(tt)\n\t\tcase xml.EndElement:\n\t\t\tif tt.Name.Local == c.TagName {\n\t\t\t\ts.Fields = append(s.Fields, c)\n\t\t\t\tc = Child{}\n\t\t\t}\n\t\tcase nil:\n\t\t\treturn nil\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75562744/how-to-convert-a-base64-encoded-public-key-to-crypto-publickey-or-a-ecdsa-public",
    "body": "package main\nimport (\n\t\"crypto/dsa\"\n\t\"crypto/ecdsa\"\n\t\"crypto/ed25519\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\nfunc main() {\n\trsaPublicKey, err := readPublicKey(\"rsaPublicKey.pem\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = printPublicKey(rsaPublicKey)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tecdsaPublicKey, err := readPublicKey(\"ecdsaPublicKey.pem\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = printPublicKey(ecdsaPublicKey)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75562744/how-to-convert-a-base64-encoded-public-key-to-crypto-publickey-or-a-ecdsa-public",
    "body": "package main\nimport (\n\t\"crypto/x509/pkix\"\n\t\"encoding/asn1\"\n\t\"encoding/pem\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/decred/dcrd/dcrec/secp256k1\"\n\t\"log\"\n\t\"os\"\n)\ntype publicKeyInfo struct {\n\tRaw       asn1.RawContent\n\tAlgorithm pkix.AlgorithmIdentifier\n\tPublicKey asn1.BitString\n}\nfunc readSecp256k1PublicKey(filename string) (*secp256k1.PublicKey, error) {\n\tpublicKey, err := os.ReadFile(filename)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tblock, _ := pem.Decode(publicKey)\n\tif block == nil {\n\t\treturn nil, errors.New(\"decoding public key PEM failed\")\n\t}\n\tvar pki publicKeyInfo\n\tif _, err := asn1.Unmarshal(block.Bytes, &pki); err != nil {\n\t\treturn nil, err\n\t}\n\tpub, err := secp256k1.ParsePubKey(pki.PublicKey.Bytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn pub, nil\n}\nfunc main() {\n\tpub, err := readSecp256k1PublicKey(\"ecdsaSecp256k1PublicKey.pem\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"public key %T\", pub)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75542277/how-to-mock-kubernetes-custom-resources-for-writing-unit-tests-for-kubernetes-cl",
    "body": "objects := []runtime.Object{\n\t\t&yourapiv1. Image{\n\t\t\tTypeMeta:   metav1.TypeMeta{},\n\t\t\tObjectMeta: metav1.ObjectMeta{},\n\t\t\tSpec:       yourapiv1.ImageSpec{},\n\t\t\tStatus:     yourapiv1.ImageStatus{},\n\t\t},\n\t\t&yourapiv1. Image{\n\t\t\tTypeMeta:   metav1.TypeMeta{},\n\t\t\tObjectMeta: metav1.ObjectMeta{},\n\t\t\tSpec:       yourapiv1.ImageSpec{},\n\t\t\tStatus:     yourapiv1.ImageStatus{},\n\t\t},\n\t}\n\tsc := runtime.NewScheme()\n\tutilruntime.Must(yourapiv1.AddToScheme(sc))\n\t\t\tfakeClientBuilder := fake.NewClientBuilder().WithScheme(sc)\n\t\t\tfakeClient := fakeClientBuilder.WithRuntimeObjects(objects...).Build()"
  },
  {
    "url": "https://stackoverflow.com/questions/75431473/alternative-to-coll-countdocuments-function-on-mongodb-in-golang-aggregation",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar (\n\tdbInstance *mongo.Client\n\tctx        context.Context\n\tcancel     context.CancelFunc\n)\nfunc NoOfDocumentsInfo(client *mongo.Client, DB string, col string, filters bson.A) (int64, error) {\n\tcoll := client.Database(DB).Collection(col)\n\tmyFilters := bson.D{\n\t\tbson.E{\n\t\t\tKey:   \"$and\",\n\t\t\tValue: filters,\n\t\t},\n\t}\n\tcounts, err := coll.CountDocuments(ctx, myFilters)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn counts, nil\n}\nfunc main() {\n\tctx, cancel = context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\t// set MongoDB connection\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\t// query with filters\n\tnumDocs, err := NoOfDocumentsInfo(mongoClient, \"demodb\", \"myCollection\", bson.A{\n\t\tbson.D{bson.E{Key: \"Name\", Value: bson.D{bson.E{Key: \"$eq\", Value: \"John Doe\"}}}},\n\t\tbson.D{bson.E{Key: \"Song\", Value: bson.D{bson.E{Key: \"$eq\", Value: \"White Roses\"}}}},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"num docs:\", numDocs)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75393261/how-do-i-specify-three-different-types-of-response-in-the-go-application-using-u",
    "body": "type ResponsePhoneNoExist struct {\n\tResult      string `json:\"result,omitempty\" required:\"true\" enum:\"ok\" example:\"ok\"`\n\tInfo        string `json:\"info,omitempty\" required:\"true\" enum:\"exist\" example:\"exist\"`\n\tPhonenumber string `json:\"phonenumber,omitempty\" required:\"true\" minLength:\"11\" maxLength:\"11\" example:\"79146764408\"`\n}\ntype ResponsePhoneExist struct {\n\tResponsePhoneNoExist\n\tСount     int    `json:\"count,omitempty\" required:\"true\" minimum:\"0\" maximum:\"3\" example:\"1\"`\n\tActivated string `json:\"activated,omitempty\" required:\"true\" example:\"27.11.2022\"`\n}\ntype ResponsePhoneInArchive struct {\n\tResponsePhoneNoExist\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75364832/how-can-i-convert-updatemany-with-arrayfilters-options-mongodb-query-into-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar (\n\tctx    context.Context\n\tcancel context.CancelFunc\n)\ntype Message struct {\n\tID   string `json:\"id\" bson:\"id\"`\n\tName string `json:\"name\" bson:\"name\"`\n}\nfunc main() {\n\tctx, cancel = context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\t// set MongoDB connection\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\t// select collection\n\tcollection := mongoClient.Database(\"demodb\").Collection(\"myCollection\")\n\tdefer collection.Drop(ctx)\n\tfmt.Println(\"original documents\")\n\t// insert some random msg\n\tif _, err := collection.InsertMany(ctx, []interface{}{\n\t\tMessage{\"1\", \"John Doe\"},\n\t\tMessage{\"2\", \"Suzy Lee\"},\n\t\tMessage{\"3\", \"John Doe\"},\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\t// get records\n\tvar messagesTmp []bson.M\n\tcursorTmp, err := collection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := cursorTmp.All(ctx, &messagesTmp); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range messagesTmp {\n\t\tfmt.Println(v)\n\t}\n\tfmt.Println(strings.Repeat(\"#\", 100))\n\t// update\n\tvar updateRes *mongo.UpdateResult\n\tif updateRes, err = collection.UpdateMany(ctx,\n\t\tbson.M{\"name\": \"John Doe\"},\n\t\tbson.D{\n\t\t\tbson.E{\n\t\t\t\tKey: \"$set\",\n\t\t\t\tValue: bson.D{\n\t\t\t\t\tbson.E{\n\t\t\t\t\t\tKey:   \"name\",\n\t\t\t\t\t\tValue: \"John Doe - Edited\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"num docs updated:\", updateRes.ModifiedCount)\n\t// list all\n\tfmt.Println(strings.Repeat(\"#\", 100))\n\tfmt.Println(\"new documents\")\n\tvar messages []Message\n\tcursor, err := collection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := cursor.All(ctx, &messages); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range messages {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75363209/mongodb-golang-updateone-array",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar (\n\tctx    context.Context\n\tcancel context.CancelFunc\n)\ntype Message struct {\n\tID   string `json:\"id\" bson:\"id\"`\n\tName string `json:\"name\" bson:\"name\"`\n}\nfunc main() {\n\tctx, cancel = context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\t// set MongoDB connection\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\t// select collection\n\tcollection := mongoClient.Database(\"demodb\").Collection(\"myCollection\")\n\tdefer collection.Drop(ctx)\n\tfmt.Println(\"original documents\")\n\t// insert some random msg\n\tif _, err := collection.InsertMany(ctx, []interface{}{\n\t\tMessage{\"1\", \"John Doe\"},\n\t\tMessage{\"2\", \"Suzy Lee\"},\n\t}); err != nil {\n\t\tpanic(err)\n\t}\n\t// get records\n\tvar messagesTmp []bson.M\n\tcursorTmp, err := collection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := cursorTmp.All(ctx, &messagesTmp); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range messagesTmp {\n\t\tfmt.Println(v)\n\t}\n\tfmt.Println(strings.Repeat(\"#\", 100))\n\t// update\n\tvar updateRes *mongo.UpdateResult\n\tif updateRes, err = collection.UpdateOne(ctx,\n\t\tbson.M{\"name\": \"John Doe\"},\n\t\tbson.D{\n\t\t\tbson.E{\n\t\t\t\tKey: \"$set\",\n\t\t\t\tValue: bson.D{\n\t\t\t\t\tbson.E{\n\t\t\t\t\t\tKey:   \"name\",\n\t\t\t\t\t\tValue: \"John Doe - Edited\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"num docs updated:\", updateRes.ModifiedCount)\n\t// list all\n\tfmt.Println(strings.Repeat(\"#\", 100))\n\tfmt.Println(\"new documents\")\n\tvar messages []Message\n\tcursor, err := collection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := cursor.All(ctx, &messages); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range messages {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75339247/aws-price-list-api-in-golang",
    "body": "func CollectInstanceCost(region string, instanceType string) {\n\tvar pricingData aws_model.PricingDataInstance\n\tsess, err := awsutil.GetAwsSession()\n\tpricingClient := pricing.New(sess)\n\t// Retrieve the pricing information for the specified instance type\n\tpricingInput := &pricing.GetProductsInput{\n\t\tServiceCode: aws.String(\"AmazonEC2\"),\n\t\tFilters: []*pricing.Filter{\n\t\t\t{\n\t\t\t\tField: aws.String(\"instanceType\"),\n\t\t\t\tType:  aws.String(\"TERM_MATCH\"),\n\t\t\t\tValue: aws.String(instanceType),\n\t\t\t},\n\t\t\t{\n\t\t\t\tField: aws.String(\"operatingSystem\"),\n\t\t\t\tType:  aws.String(\"TERM_MATCH\"),\n\t\t\t\tValue: aws.String(\"Linux\"),\n\t\t\t},\n\t\t\t{\n\t\t\t\tField: aws.String(\"regionCode\"),\n\t\t\t\tType:  aws.String(\"TERM_MATCH\"),\n\t\t\t\tValue: aws.String(region),\n\t\t\t},\n\t\t},\n\t}\n\tpricingResult, err := pricingClient.GetProducts(pricingInput)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpricingJSON, err := json.Marshal(pricingResult)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = json.Unmarshal(pricingJSON, &pricingData)\n\tif err != nil {\n\t\tpanic(err)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/75339247/aws-price-list-api-in-golang",
    "body": "type PricingDataInstance struct {\n\tFormatVersion string              `json:\"FormatVersion\"`\n\tNextToken     string              `json:\"NextToken\"`\n\tPriceList     []PriceItemInstance `json:\"PriceList\"`\n}\ntype PriceItemInstance struct {\n\tProduct         ProductInfoInstance `json:\"product\"`\n\tPublicationDate string              `json:\"publicationDate\"`\n\tServiceCode     string              `json:\"serviceCode\"`\n\tTerms           TermsInstance       `json:\"terms\"`\n}\ntype ProductInfoInstance struct {\n\tAttributes    ProductAttributesInstance `json:\"attributes\"`\n\tProductFamily string                    `json:\"productFamily\"`\n}\ntype ProductAttributesInstance struct {\n\tInstanceFamily  string `json:\"instanceFamily\"`\n\tInstanceType    string `json:\"instanceType\"`\n\tMemory          string `json:\"memory\"`\n\tRegionCode      string `json:\"regionCode\"`\n\tServiceCode     string `json:\"servicecode\"`\n\tServiceName     string `json:\"servicename\"`\n\tTenancy         string `json:\"tenancy\"`\n\tUsageType       string `json:\"usagetype\"`\n\tVCPU            string `json:\"vcpu\"`\n\tOperatingSystem string `json:\"operatingSystem\"`\n\tClockSpeed      string `json:\"clockSpeed\"`\n}\ntype TermsInstance struct {\n\tOnDemand map[string]OnDemandTermInstance `json:\"OnDemand\"`\n}\ntype OnDemandTermInstance struct {\n\tEffectiveDate   string                            `json:\"effectiveDate\"`\n\tPriceDimensions map[string]PriceDimensionInstance `json:\"priceDimensions\"`\n}\ntype PriceDimensionInstance struct {\n\tPricePerUnit PricePerUnitInstance `json:\"pricePerUnit\"`\n\tUnit         string               `json:\"unit\"`\n\tDescription  string               `json:\"description\"`\n}\ntype PricePerUnitInstance struct {\n\tUSD string `json:\"USD\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75337980/golang-http-proxy-server-to-multiple-endpoints-based-on-some-conditions",
    "body": "func (h handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// [...]\n\tch := make(chan *http.Response)\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\ttimeout := time.Duration(time.Duration(*globalTimeout).Milliseconds())\n\tgo handleRequest(r, timeout, ch, &wg)\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(ch)\n\t}()\n\tvar resp *http.Response = <-ch\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t\tlog.Printf(\"%s %s %v, %s\", r.Method, r.URL.String(), r.Proto, resp.Status)\n\t    // [...]\n\t}\n}\nfunc handleRequest(request *http.Request, timeout time.Duration, ch chan *http.Response, wg *sync.WaitGroup) {\n\tdefer (*wg).Done()\n\ttransport := &http.Transport{\n\t\tDialContext:           (&net.Dialer{Timeout: timeout, KeepAlive: 10 * timeout}).DialContext,\n\t\tDisableKeepAlives:     *closeConnections,\n\t\tTLSHandshakeTimeout:   timeout,\n\t\tResponseHeaderTimeout: timeout,\n\t\tTLSClientConfig:       &tls.Config{InsecureSkipVerify: true},\n\t}\n\tresponse, err := transport.RoundTrip(request)\n\tif err != nil {\n\t\tlog.Println(\"Request failed:\", err)\n\t}\n\tch <- response\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75322049/concurrent-index-creation-fails-when-done-in-a-go-program",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Post struct {\n\tId    int\n\tTitle string `gorm:\"index:idx_concurrent,option:CONCURRENTLY\"`\n}\ntype GORM struct {\n\tdb *gorm.DB\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Post{})\n\tm := db.Migrator()\n\tif idxFound := m.HasIndex(&Post{}, \"idx_concurrent\"); !idxFound {\n\t\tfmt.Println(\"idx missing\")\n\t\treturn\n\t}\n\tfmt.Println(\"idx already present\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75196799/how-can-i-handle-dynamic-query-when-im-updating-and-some-fields-are-not-require",
    "body": "func (s *Store) UpdateOrganization(entity *Organization) (*Organization, error) {\n\torg := &Organization{}\n\tsetClauses := []string{}\n\tvar queryArgs []interface{}\n\tqueryArgs = append(queryArgs, entity.ID)\n\tif entity.Name != nil {\n\t\tsetClauses = append(setClauses, \"name = $2\")\n\t\tqueryArgs = append(queryArgs, entity.Name)\n\t}\n\tif entity.Website != nil {\n\t\tsetClauses = append(setClauses, \"website = $3\")\n\t\tqueryArgs = append(queryArgs, entity.Website)\n\t}\n\tif entity.ImageURL != nil {\n\t\tsetClauses = append(setClauses, \"image_url = $4\")\n\t\tqueryArgs = append(queryArgs, entity.ImageURL)\n\t}\n\tsetClause := strings.Join(setClauses, \",\")\n\tstmt := fmt.Sprintf(`\n\tUPDATE public.organizations\n\tSET %s\n\tWHERE id = $1\n\tRETURNING *;`, setClause)\n\trows, _ := s.db.Query(\n\t\tcontext.Background(),\n\t\tstmt,\n\t\tqueryArgs...,\n\t)\n\tif err := pgxscan.ScanOne(org, rows); err != nil {\n\t\treturn nil, newStoreError(err)\n\t}\n\treturn org, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75196799/how-can-i-handle-dynamic-query-when-im-updating-and-some-fields-are-not-require",
    "body": "func (s *Store) UpdateOrganization(entity *Organization) (*Organization, error) {\n    org := &Organization{}\n    stmt := `\n        UPDATE public.organizations\n        SET name = COALESCE($1, name),\n            website = COALESCE($2, website),\n            image_url = COALESCE($3, image_url)\n        WHERE id = $4\n        RETURNING *;`\n    rows, _ := s.db.Query(\n        context.Background(),\n        stmt,\n        entity.Name,\n        entity.Website,\n        entity.ImageURL,\n        entity.ID,\n    )\n    if err := pgxscan.ScanOne(org, rows); err != nil {\n        return nil, newStoreError(err)\n    }\n    return org, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75155612/submitting-an-sql-query-with-a-slice-parameter",
    "body": "func Delimit(s string, sep string, count uint) string {\n\treturn strings.Repeat(s+sep, int(count)-1) + s\n}\nfunc doQuery(enable bool, provider int, assets ...string) error {\n    query := fmt.Sprintf(\"UPDATE my_table SET download_enabled = ? \" +\n        \"WHERE provider_id = ? AND symbol IN (%s)\", Delimit(\"?\", \", \", uint(len(assets))))\n    params := []interface{}{enable, provider}\n    for _, asset := range assets {\n        params = append(params, asset)\n    }\n    if _, err := client.db.ExecContext(ctx, query, params...); err != nil {\n        return err\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75154142/regex-replaceall-but-add-same-amount-of-characters-if-replaces",
    "body": "func main() {\n\ttype Field struct {\n\t\tnum   int\n\t\tlabel string\n\t}\n\ttype Fields []Field\n\tfor _, fields := range []Fields{\n\t\t{\n\t\t\t{1, \"Foo1\"},\n\t\t\t{2, \"Foo2\"},\n\t\t\t{3, \"Foo3\"},\n\t\t},\n\t\t{\n\t\t\t{1, \"FooBar1\"},\n\t\t\t{2, \"FooBar2\"},\n\t\t\t{3, \"FooBar3\"},\n\t\t},\n\t} {\n\t\tvar template = `\n\t\t\t___________________________________________________________________\n\t\t\t| [ test1     ] | [ test2 ] | [         test3                   ] |\n\t\t\t| control 1     | control 2 | control 3                           |\n\t\t\t`\n\t\tfor _, field := range fields {\n\t\t\t// Dynamically build re\n\t\t\tlabel := fmt.Sprintf(\"test%d\", field.num)\n\t\t\tre := regexp.MustCompile(`(\\[\\s*` + label + `\\s*\\])`)\n\t\t\t// Find string that satisfies re\n\t\t\ttest := re.FindStringSubmatch(template)[0]\n\t\t\t// Pad to len of test\n\t\t\tlenTest := utf8.RuneCountInString(test)\n\t\t\tlenLabel := utf8.RuneCountInString(field.label)\n\t\t\tpadding := strings.Repeat(\" \", lenTest-lenLabel)\n\t\t\tfinal := field.label + padding\n\t\t\t// Insert final label into template\n\t\t\ttemplate = strings.Replace(template, test, final, -1)\n\t\t}\n\t\tfmt.Println(template)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75125709/mongodb-connection-request-stuck-on-core-dataprovider-connect-call",
    "body": "package main\nimport (\n\t\"context\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"go.mongodb.org/mongo-driver/mongo/readpref\"\n)\nvar (\n\tctx    context.Context\n\tcancel context.CancelFunc\n)\nfunc main() {\n\tctx, cancel = context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\t// set MongoDB connection\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\t// ping the MongoDB\n\terr = mongoClient.Ping(ctx, readpref.Primary())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75092797/multi-fields-search-query-for-elasticsearch-golang",
    "body": "GET postindex/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"minimum_should_match\": 1,\n      \"should\": [\n        {\n          \"bool\": {\n            \"must\": [\n              {\n                \"term\": {\n                  \"userid\": {\n                    \"value\": \"mcqmycxpyjrddkie9mr13txaqe\"\n                  }\n                }\n              },\n              {\n                \"term\": {\n                  \"channelid\": {\n                    \"value\": \"dnoihmrinins3qrm6bb9175ume\"\n                  }\n                }\n              },\n              {\n                \"range\": {\n                  \"createat\": {\n                    \"gt\": 1672909114890\n                  }\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"term\": {\n            \"teamid\": {\n              \"value\": \"qomrg11o8b8ijxoy8hrcnweoay\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75053949/golang-migrate-returns-no-change",
    "body": "CREATE TABLE IF NOT EXISTS users\n(\n    id serial not null unique,\n    name varchar(255) not null,\n    username varchar(255) not null,\n    password_hash varchar(255) not null\n);\nCREATE TABLE IF NOT EXISTS todo_lists\n(\n    id serial not null unique,\n    title varchar(255) not null,\n    description varchar(255)\n);\nCREATE TABLE IF NOT EXISTS users_lists\n(\n    id serial not null unique,\n    user_id int references users (id) on delete cascade not null,\n    list_id int references todo_lists (id) on delete cascade not null\n);\nCREATE TABLE IF NOT EXISTS todo_items\n(\n    id serial not null unique,\n    title varchar(255) not null,\n    description varchar(255),\n    done boolean not null default false\n);\nCREATE TABLE IF NOT EXISTS lists_items\n(\n    id serial not null unique,\n    item_id int references todo_items (id) on delete cascade not null,\n    list_id int references todo_lists (id) on delete cascade not null\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/75047607/is-there-a-function-that-returns-the-absolute-path-from-a-path-that-is-relative",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n)\nfunc main() {\n\tvar\tnew_abs_path string\n\tvar text_file = \"./foo/text.txt\"\n\tb, err := os.ReadFile(text_file)\n\tcheck(err)\n\tnew_file_path := string(b)\n\tif filepath.IsAbs(new_file_path) {\n\t\tnew_abs_path = new_file_path\n\t} else {\n\t\ttext_abs, err := filepath.Abs(text_file)\n\t\tcheck(err)\n\n\t\tnew_abs_path, err = filepath.Abs(path.Join(path.Dir(text_abs), new_file_path))\n\t\tcheck(err)\n\t}\n\tfmt.Println(new_abs_path)\n}\nfunc check(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74886992/unable-to-generate-an-x-509-certificate-with-a-custom-crypto-signer-implementati",
    "body": "type Signer struct {\n\tpriKey p11.PrivateKey\n\tpubKey *rsa.PublicKey\n}\nvar hashPrefixes = map[crypto.Hash][]byte{\n\tcrypto.SHA256: {0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20},\n\tcrypto.SHA384: {0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30},\n\tcrypto.SHA512: {0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40},\n}\nfunc (s Signer) Public() crypto.PublicKey {\n\treturn s.pubKey\n}\nfunc (s Signer) Sign(_ io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {\n\treturn s.priKey.Sign(*pkcs11.NewMechanism(pkcs11.CKM_RSA_PKCS, nil), append(hashPrefixes[opts.HashFunc()], digest...))\n}\nfunc NewSigner(key p11.PrivateKey) (*Signer, error) {\n\t// Retrieve modulus n from the private key\n\t// Reminder: n = p * q\n\tmodulus, err := p11.Object(key).Attribute(pkcs11.CKA_MODULUS)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar pubExp []byte\n\t// Retrieve public exponent (e: \"always\" 65537) from the private key\n\t// Reminder: φ(n) = (p - 1) * (q - 1), e such that 1 < e < φ(n) and e and φ(n) are co prime\n\tpubExp, err = p11.Object(key).Attribute(pkcs11.CKA_PUBLIC_EXPONENT)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Public key is (e, n)\n\tpubKey := &rsa.PublicKey{\n\t\tN: new(big.Int).SetBytes(modulus),\n\t\tE: int(new(big.Int).SetBytes(pubExp).Uint64()),\n\t}\n\treturn &Signer{priKey: key, pubKey: pubKey}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74886992/unable-to-generate-an-x-509-certificate-with-a-custom-crypto-signer-implementati",
    "body": "type Signer struct {\n\tpriKey p11.PrivateKey\n\tpubKey *rsa.PublicKey\n}\nvar sigAlg = map[crypto.Hash]uint{\n\tcrypto.SHA256: pkcs11.CKM_SHA256_RSA_PKCS_PSS,\n\tcrypto.SHA384: pkcs11.CKM_SHA384_RSA_PKCS_PSS,\n\tcrypto.SHA512: pkcs11.CKM_SHA512_RSA_PKCS_PSS,\n}\nvar mgf = map[crypto.Hash]uint{\n\tcrypto.SHA256: pkcs11.CKG_MGF1_SHA256,\n\tcrypto.SHA384: pkcs11.CKG_MGF1_SHA384,\n\tcrypto.SHA512: pkcs11.CKG_MGF1_SHA512,\n}\nfunc (s Signer) Public() crypto.PublicKey {\n\treturn s.pubKey\n}\nfunc (s Signer) Sign(_ io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {\n\treturn s.priKey.Sign(*pkcs11.NewMechanism(pkcs11.CKM_RSA_PKCS_PSS, pkcs11.NewPSSParams(sigAlg[opts.HashFunc()], mgf[opts.HashFunc()], uint(opts.HashFunc().Size()))), digest)\n}\nfunc NewSigner(key p11.PrivateKey) (*Signer, error) {\n\t// Retrieve modulus n from the private key\n\t// Reminder: n = p * q\n\tmodulus, err := p11.Object(key).Attribute(pkcs11.CKA_MODULUS)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar pubExp []byte\n\t// Retrieve public exponent (e: \"always\" 65537) from the private key\n\t// Reminder: φ(n) = (p - 1) * (q - 1), e such that 1 < e < φ(n) and e and φ(n) are co prime\n\tpubExp, err = p11.Object(key).Attribute(pkcs11.CKA_PUBLIC_EXPONENT)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Public key is (e, n)\n\tpubKey := &rsa.PublicKey{\n\t\tN: new(big.Int).SetBytes(modulus),\n\t\tE: int(new(big.Int).SetBytes(pubExp).Uint64()),\n\t}\n\treturn &Signer{priKey: key, pubKey: pubKey}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74746909/golang-openapi-generator-add-custom-header-to-request",
    "body": "type decoratedRequest struct {\n  SomeOperationRequest // it must be same type for which defined WriteToRequest method, probably it will be pointer to SomeOperationRequest type\n  // here you can add custom headers params if you want\n}\nfunc (r *decoratedRequest) WriteToRequest(req ClientRequest, reg strfmt.Registry) error\n if err := r.SomeOperationRequest.WriteToRequest(req, reg); err != nil {\n   return err\n }\n//here you manualy edit actual request to the server\n return req.SetHeaderParam(\"your-header\", \"your-value\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74670784/docker-compose-postgres-dial-error-dial-tcp-172-23-0-35432-connect-connectio",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\nvar GDB *gorm.DB\nfunc ConnectDB() {\n\tvar err error\n\tpgPort := os.Getenv(\"DATABASE_PORT\")\n\tpgHost := os.Getenv(\"DATABASE_HOST\")\n\tpgUser := os.Getenv(\"POSTGRES_USER\")\n\tpgPassword := os.Getenv(\"POSTGRES_PASSWORD\")\n\tpgName := os.Getenv(\"POSTGRES_DB\")\n\tconfigData := fmt.Sprintf(\"postgres://%v:%v@%v:%v/%v?sslmode=disable\",\n\t\tpgUser,\n\t\tpgPassword,\n\t\tpgHost,\n\t\tpgPort,\n\t\tpgName,\n\t)\n\tfor i := 0; i < 5; i++ {\n\t\tGDB, err = gorm.Open(postgres.Open(configData), &gorm.Config{})\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(1 * time.Second) // change back to 10s\n\t}\n\tif err != nil {\n\t\tlog.Println(\"Producer: Error Connecting to Database\")\n\t} else {\n\t\tlog.Println(\"Producer: Connection Opened to Database\")\n\t}\n}\nfunc main() {\n\tConnectDB()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74670784/docker-compose-postgres-dial-error-dial-tcp-172-23-0-35432-connect-connectio",
    "body": "version: \"3.9\"\nservices:\n  imgress-producer:\n    build: \".\"\n    ports:\n      - 8080:8080\n    environment:\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n      - DATABASE_HOST=${DATABASE_HOST}\n      - DATABASE_PORT=${DATABASE_PORT}\n    depends_on:\n      - imgress-db\n    networks:\n      - imgress-network\n  imgress-db:\n    image: postgres\n    container_name: imgress-db\n    environment:\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=${POSTGRES_DB}\n      - DATABASE_HOST=${DATABASE_HOST}\n    ports:\n      - 5432:5432\n    restart: always\n    networks:\n      - imgress-network\nnetworks:\n  imgress-network:\n    driver: bridge"
  },
  {
    "url": "https://stackoverflow.com/questions/74623677/adding-filters-to-aws-cost-sdk-in-go",
    "body": "result, err := svc.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{\n            Filter: &types.Expression{\n                CostCategories: &types.CostCategoryValues{\n                    Key: aws.String(\"SERVICE\"),\n                    Values: []string{\"s3\"}, // 's3' may not be the right value here, this is just an example\n                },\n            },\n            TimePeriod: &costexplorer.DateInterval{\n                Start: aws.String(startDate),\n                End:   aws.String(endDate),\n            },\n            Granularity: aws.String(granularity),\n            GroupBy: []*costexplorer.GroupDefinition{\n                &costexplorer.GroupDefinition{\n                    Type: aws.String(\"DIMENSION\"),\n                    Key:  aws.String(\"SERVICE\"),\n                },\n            },\n            Metrics: aws.StringSlice(metrics),\n        })"
  },
  {
    "url": "https://stackoverflow.com/questions/74513507/default-http-file-server-modifications-of-the-content",
    "body": "type InMemoryFS map[string]http.File\ntype InMemoryFile struct {\n\tat   int64\n\tName string\n\tdata []byte\n\tfs   InMemoryFS\n}\nfunc NewFile(name string, data []byte) *InMemoryFile {\n\treturn &InMemoryFile{at: 0,\n\t\tName: name,\n\t\tdata: data,\n\t\tfs:   make(InMemoryFS)}\n}\n// Implements the http.File interface\nfunc (f *InMemoryFile) Close() error {\n\treturn nil\n}\nfunc (f *InMemoryFile) Stat() (os.FileInfo, error) {\n\treturn &InMemoryFileInfo{f}, nil\n}\nfunc (f *InMemoryFile) Readdir(count int) ([]os.FileInfo, error) {\n\treturn nil, nil\n}\nfunc (f *InMemoryFile) Read(b []byte) (int, error) {\n\ti := 0\n\tfor f.at < int64(len(f.data)) && i < len(b) {\n\t\tb[i] = f.data[f.at]\n\t\ti++\n\t\tf.at++\n\t}\n\treturn i, nil\n}\nfunc (f *InMemoryFile) Seek(offset int64, whence int) (int64, error) {\n\tswitch whence {\n\tcase 0:\n\t\tf.at = offset\n\tcase 1:\n\t\tf.at += offset\n\tcase 2:\n\t\tf.at = int64(len(f.data)) + offset\n\t}\n\treturn f.at, nil\n}\ntype InMemoryFileInfo struct {\n\tfile *InMemoryFile\n}\n// Implements os.FileInfo\nfunc (s *InMemoryFileInfo) Name() string       { return s.file.Name }\nfunc (s *InMemoryFileInfo) Size() int64        { return int64(len(s.file.data)) }\nfunc (s *InMemoryFileInfo) Mode() os.FileMode  { return os.ModeTemporary }\nfunc (s *InMemoryFileInfo) ModTime() time.Time { return time.Time{} }\nfunc (s *InMemoryFileInfo) IsDir() bool        { return false }\nfunc (s *InMemoryFileInfo) Sys() interface{}   { return nil }"
  },
  {
    "url": "https://stackoverflow.com/questions/74513507/default-http-file-server-modifications-of-the-content",
    "body": "// CustomFsDecorator: is `http.FileSystem` decorator\ntype CustomFsDecorator struct {\n\thttp.FileSystem\n}\nfunc (fs CustomFsDecorator) Open(name string) (http.File, error) {\n\tfile, err := fs.FileSystem.Open(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tinfo, err := file.Stat()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif info.IsDir() {\n\t\treturn file, nil\n\t}\n\tb, err := io.ReadAll(file)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tbuf := new(bytes.Buffer)\n    // add header's lines\n\t_, err = buf.Write([]byte(\"<title>My files</title>\\n\"))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t_, err = buf.Write(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    // add footer's lines\n\t_, err = buf.Write([]byte(\"\\n<p>And that's all, folks!</p>\"))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn NewFile(info.Name(), buf.Bytes()), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74453134/xorm-how-to-convert-a-queryinterface-mapstringinterface-back-to-the-xorm-def",
    "body": "type MyStruct struct {\n\tID                   int64              `xorm:\"primaryKey\"`\n\tProductID            int64              `xorm:\"INDEX\" json:\"product_id\"`\n\tIndex                int64              `xorm:\"INDEX NOT NULL DEFAULT 0\"`\n\tCode                 string             `xorm:\"-\" json:\"code\"`\n}\nfunc (b *MyDBStruct) FromMap(src map[string]interface{}) error {\n\tjsonStr, _ := json.Marshal(src)\n\terr := json.Unmarshal(jsonStr, &b)\n\tif err == nil {\n\t\tfor key := range src {\n\t\t\tb.AfterSet(key, nil)\n\t\t}\n\t}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74284053/asserting-that-code-should-panic-with-logrus-error",
    "body": "type tHelper interface {\n\tHelper()\n}\n// didPanic returns true if the function passed to it panics. Otherwise, it returns false.\nfunc didPanic(f assert.PanicTestFunc) (didPanic bool, message interface{}, stack string) {\n\tdidPanic = true\n\tdefer func() {\n\t\tmessage = recover()\n\t\tif didPanic {\n\t\t\tstack = string(debug.Stack())\n\t\t}\n\t}()\n\t// call the target function\n\tf()\n\tdidPanic = false\n\treturn\n}\nfunc PanicsWithLogrusError(t assert.TestingT, errString string, f assert.PanicTestFunc, msgAndArgs ...interface{}) bool {\n\tif h, ok := t.(tHelper); ok {\n\t\th.Helper()\n\t}\n\tfuncDidPanic, panicValue, panickedStack := didPanic(f)\n\tif !funcDidPanic {\n\t\treturn assert.Fail(t, fmt.Sprintf(\"func %#v should panic\\n\\tPanic value:\\t%#v\", f, panicValue), msgAndArgs...)\n\t}\n\tpanicErr, ok := panicValue.(*logrus.Entry)\n\tif !ok || panicErr.Message != errString {\n\t\treturn assert.Fail(t, fmt.Sprintf(\"func %#v should panic with logrus error message:\\t%#v\\n\\tPanic value:\\t%#v\\n\\tPanic stack:\\t%s\", f, errString, panicErr.Message, panickedStack), msgAndArgs...)\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74046337/reading-first-byte-from-a-stream-in-golang",
    "body": "func ReadFromStdinIfAvailable(cmd *cobra.Command, args []string) ([]byte, error) {\n\tif len(args) == 0 {\n\t\tr := bufio.NewReader(RootCmd.InOrStdin())\n\t\tvar bytesResult []byte\n\t\tscanner := bufio.NewScanner(r)\n\t\t// buffered channel of dataStream\n\t\tdataStream := make(chan []byte, 1)\n\t\t// Run scanner.Bytes() function in it's own goroutine and pass back it's\n\t\t// response into dataStream channel.\n\t\tgo func() {\n\t\t\tfor scanner.Scan() {\n\t\t\t\tdataStream <- scanner.Bytes()\n\t\t\t}\n\t\t\tclose(dataStream)\n\t\t}()\n\t\t// Listen on dataStream channel AND a timeout channel - which ever happens first.\n\t\ttimedOut := false\n\t\tselect {\n\t\tcase res := <-dataStream:\n\t\t\tbytesResult = append(bytesResult, res...)\n\t\tcase <-time.After(time.Duration(10) * time.Millisecond): //nolint:gomnd // 10ms timeout\n\t\t\ttimedOut = true\n\t\t}\n\t\tif timedOut {\n\t\t\tcmd.Println(userstrings.NoFilenameProvidedErrorString)\n\t\t\treturn nil, errors.New(userstrings.NoFilenameProvidedErrorString)\n\t\t}\n\t\tfor scanner.Scan() {\n\t\t\tbytesResult = append(bytesResult, scanner.Bytes()...)\n\t\t}\n\t\treturn bytesResult, nil\n\t}\n\treturn nil, fmt.Errorf(\"should not be possible, args should be empty\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74017900/find-the-min-and-max-of-array-using-the-go-lang-concurrency",
    "body": "func Minmax_Method(input []int) {\n\tvar minC int = 0\n\tvar maxC int = 0\n\tmins := make(chan int) // channel for mins\n\tmaxs := make(chan int) // channel for maxs\n\tdefer close(mins)\n\tdefer close(maxs)\n\tgo CalculateMinMaxWithChannel(input[:len(input)/2], mins, maxs)\n\tgo CalculateMinMaxWithChannel(input[len(input)/2:], mins, maxs)\n\tgo func() {\n\t\tfor i := range mins {\n\t\t\tminC++\n\t\t\tfmt.Println(\"Minimums\", i)\n\t\t\tif minC == 2 && maxC == 2 {\n\t\t\t\tos.Exit(0)\n\t\t\t}\n\t\t}\n\t}()\n\tgo func() {\n\t\tfor j := range maxs {\n\t\t\tmaxC++\n\t\t\tfmt.Println(\"Maximums\", j)\n\t\t\tif minC == 2 && maxC == 2 {\n\t\t\t\tos.Exit(0)\n\t\t\t}\n\t\t}\n\t}()\n\tfor {\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74017900/find-the-min-and-max-of-array-using-the-go-lang-concurrency",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc main() {\n\tMinmax_Method([]int{20, 2112, 212, 12, 312, 231, 321312, 22, 31, 321, 4, 123, 2, 231213, 4, 23, 312, 312, 312321})\n}\nfunc CalculateMinMaxWithChannel(input []int, mins chan int, maxs chan int) {\n\tvar min = input[0]\n\tvar max = input[0]\n\tfor i := 0; i < len(input); i++ {\n\t\tif input[i] < min {\n\t\t\tmin = input[i]\n\t\t}\n\t\tif input[i] > max {\n\t\t\tmax = input[i]\n\t\t}\n\t}\n\tmins <- min\n\tmaxs <- max\n}\nfunc Minmax_Method(input []int) {\n\tmins := make(chan int) // channel for mins\n\tmaxs := make(chan int) // channel for maxs\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tgo func() {\n\t\tCalculateMinMaxWithChannel(input[:len(input)/2], mins, maxs)\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\tCalculateMinMaxWithChannel(input[len(input)/2:], mins, maxs)\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(mins)\n\t\tclose(maxs)\n\t}()\n\tvar minC = input[0]\n\tvar maxC = input[0]\n\tfor mins != nil && maxs != nil {\n\t\tselect {\n\t\tcase m, ok := <-mins:\n\t\t\tif !ok {\n\t\t\t\tmins = nil\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif m < minC {\n\t\t\t\tminC = m\n\t\t\t}\n\t\tcase m, ok := <-maxs:\n\t\t\tif !ok {\n\t\t\t\tmaxs = nil\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif m > maxC {\n\t\t\t\tmaxC = m\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"Maximum:\", maxC, \"Minimum:\", minC)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73942241/create-kms-key-policy-in-go",
    "body": "// Policy describes a policy document that can be used to configure permissions in IAM\ntype Policy struct {\n\tVersion    string       `json:\"Version\"`\n\tID         string       `json:\"Id\"`\n\tStatements []*Statement `json:\"Statement\"`\n}\n// Statement describes a set of permissions that define what resources and users should have access\n// to the resources described therein\ntype Statement struct {\n\tID            string     `json:\"Sid\"`\n\tEffect        Effect     `json:\"Effect\"`\n\tPrincipalArns Principals `json:\"Principal\"`\n\tActionArns    Actions    `json:\"Action\"`\n\tResourceArns  Resources  `json:\"Resource\"`\n}\n// Principals describes a list of principals associated with a policy statement\ntype Principals []string\n// MarhsalJSON converts a Principals collection to JSON\nfunc (p Principals) MarshalJSON() ([]byte, error) {\n\t// First, get the inner string from the list of principals\n\tvar inner string\n\tif len(p) > 1 {\n\t\tinner = marshal(p...)\n\t} else if len(p) == 1 {\n\t\tinner = strings.Quote(p[0], \"\\\"\")\n\t} else {\n\t\treturn nil, fmt.Errorf(\"Principal must contain at least one element\")\n\t}\n\t// Next, create the principal block and return it\n\treturn []byte(fmt.Sprintf(\"{\\\"AWS\\\": %s}\", inner)), nil\n}\n// Actions describes a list of actions that may or may not be taken by principals with regard to the\n// resources described in a policy statement\ntype Actions []Action\n// MarshalJSON converts an Actions collection to JSON\nfunc (a Actions) MarshalJSON() ([]byte, error) {\n\t// First, get the inner string from the list of actions\n\tvar inner string\n\tif len(a) > 1 {\n\t\tinner = marshal(a...)\n\t} else if len(a) == 1 {\n\t\tinner = strings.Quote(a[0], \"\\\"\")\n\t} else {\n\t\treturn nil, fmt.Errorf(\"Action must contain at least one element\")\n\t}\n\t// Next, create the action block and return it\n\treturn []byte(inner), nil\n}\n// Resources describes a list of resources effected by the policy statement\ntype Resources []string\n// MarshalJSON converts a Resources collection to JSON\nfunc (r Resources) MarshalJSON() ([]byte, error) {\n\t// First, get the inner string from the list of actions\n\tvar inner string\n\tif len(r) > 1 {\n\t\tinner = marshal(r...)\n\t} else if len(r) == 1 {\n\t\tinner = strings.Quote(r[0], \"\\\"\")\n\t} else {\n\t\treturn nil, fmt.Errorf(\"Resource must contain at least one element\")\n\t}\n\t// Next, create the action block and return it\n\treturn []byte(inner), nil\n}\n// Helper function that converts a list of items to a JSON-string\nfunc marshal[S ~string](items ...S) string {\n\treturn \"[\" + strings.ModifyAndJoin(func(item string) string { return strings.Quote(item, \"\\\"\") }, \",\", items...) + \"]\"\n}\n// Effect describes the effect a policy statement will have upon the resource and for the actions described\ntype Effect string\nvar (\n\t// Allow to grant access of the resource and actions to the principals described in the policy statement\n\tAllow = Effect(\"Allow\")\n\t// Deny to deny access of the resource and actions from the principals described in the policy statement\n\tDeny = Effect(\"Deny\")\n)\n// Action describes a valid operation that may be made against a particular AWS resource\ntype Action string\n// Describes the various action types available to AWS\nvar (\n\tCancelKeyDeletion                   = Action(\"kms:CancelKeyDeletion\")\n\tConnectCustomKeyStore               = Action(\"kms:ConnectCustomKeyStore\")\n\tCreateAlias                         = Action(\"kms:CreateAlias\")\n\tCreateCustomKeyStore                = Action(\"kms:CreateCustomKeyStore\")\n\tCreateGrant                         = Action(\"kms:CreateGrant\")\n\tCreateKey                           = Action(\"kms:CreateKey\")\n\tDecrypt                             = Action(\"kms:Decrypt\")\n\tDeleteAlias                         = Action(\"kms:DeleteAlias\")\n\tDeleteCustomKeyStore                = Action(\"kms:DeleteCustomKeyStore\")\n\tDeleteImportedKeyMaterial           = Action(\"kms:DeleteImportedKeyMaterial\")\n\tDescribeCustomKeyStores             = Action(\"kms:DescribeCustomKeyStores\")\n\tDescribeKey                         = Action(\"kms:DescribeKey\")\n\tDisableKey                          = Action(\"kms:DisableKey\")\n\tDisableKeyRotation                  = Action(\"kms:DisableKeyRotation\")\n\tDisconnectCustomKeyStore            = Action(\"kms:DisconnectCustomKeyStore\")\n\tEnableKey                           = Action(\"kms:EnableKey\")\n\tEnableKeyRotation                   = Action(\"kms:EnableKeyRotation\")\n\tEncrypt                             = Action(\"kms:Encrypt\")\n\tGenerateDataKey                     = Action(\"kms:GenerateDataKey\")\n\tGenerateDataKeyPair                 = Action(\"kms:GenerateDataKeyPair\")\n\tGenerateDataKeyPairWithoutPlaintext = Action(\"kms:GenerateDataKeyPairWithoutPlaintext\")\n\tGenerateDataKeyWithoutPlaintext     = Action(\"kms:GenerateDataKeyWithoutPlaintext\")\n\tGenerateMac                         = Action(\"kms:GenerateMac\")\n\tGenerateRandom                      = Action(\"kms:GenerateRandom\")\n\tGetKeyPolicy                        = Action(\"kms:GetKeyPolicy\")\n\tGetKeyRotationStatus                = Action(\"kms:GetKeyRotationStatus\")\n\tGetParametersForImport              = Action(\"kms:GetParametersForImport\")\n\tGetPublicKey                        = Action(\"kms:GetPublicKey\")\n\tImportKeyMaterial                   = Action(\"kms:ImportKeyMaterial\")\n\tListAliases                         = Action(\"kms:ListAliases\")\n\tListGrants                          = Action(\"kms:ListGrants\")\n\tListKeyPolicies                     = Action(\"kms:ListKeyPolicies\")\n\tListKeys                            = Action(\"kms:ListKeys\")\n\tListResourceTags                    = Action(\"kms:ListResourceTags\")\n\tListRetirableGrants                 = Action(\"kms:ListRetirableGrants\")\n\tPutKeyPolicy                        = Action(\"kms:PutKeyPolicy\")\n\tReEncryptFrom                       = Action(\"kms:ReEncryptFrom\")\n\tReEncryptTo                         = Action(\"kms:ReEncryptTo\")\n\tReplicateKey                        = Action(\"kms:ReplicateKey\")\n\tRetireGrant                         = Action(\"kms:RetireGrant\")\n\tRevokeGrant                         = Action(\"kms:RevokeGrant\")\n\tScheduleKeyDeletion                 = Action(\"kms:ScheduleKeyDeletion\")\n\tSign                                = Action(\"kms:Sign\")\n\tTagResource                         = Action(\"kms:TagResource\")\n\tUntagResource                       = Action(\"kms:UntagResource\")\n\tUpdateAlias                         = Action(\"kms:UpdateAlias\")\n\tUpdateCustomKeyStore                = Action(\"kms:UpdateCustomKeyStore\")\n\tUpdateKeyDescription                = Action(\"kms:UpdateKeyDescription\")\n\tUpdatePrimaryRegion                 = Action(\"kms:UpdatePrimaryRegion\")\n\tVerify                              = Action(\"kms:Verify\")\n\tVerifyMac                           = Action(\"kms:VerifyMac\")\n\tKmsAll                              = Action(\"kms:*\")\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/73942241/create-kms-key-policy-in-go",
    "body": "conn := kms.NewFromConfig(cfg)\npolicy := Policy {\n    Version: \"2012-10-17\",\n\tID:      \"test-key\",\n\tStatements: []*policy.Statement{\n\t    {\n\t\t\tID:            \"test-failure\",\n\t\t\tEffect:        policy.Allow,\n\t\t\tPrincipalArns: []string{\"arn:aws:kms:eu-west-2:111122223333:root\"},\n\t\t\tActionArns:    policy.Actions{policy.KmsAll},\n\t\t\tResourceArns:  []string{\"*\"},\n\t\t},\n\t},\n}\npData, err := json.Marshal(policy)\nif err != nil {\n   return err\n}\ninput := kms.CreateKeyInput{\n    KeySpec:     types.KeySpecEccNistP521,\n    KeyUsage:    types.KeyUsageTypeSignVerify,\n    MultiRegion: aws.Bool(true),\n    Policy:      aws.String(string(pData)),\n}\noutput, err := conn.CreateKey(ctx, &input)"
  },
  {
    "url": "https://stackoverflow.com/questions/73837339/how-to-unmarshal-an-array-of-array-in-go-lang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nfunc main() {\n\tvar specifications Specifications\n\tif err := json.Unmarshal([]byte(data), &specifications); err != nil {\n\t\tpanic(err)\n\t}\n\tdata, err := json.MarshalIndent(specifications, \"\", \" \")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(data))\n}\ntype Specifications struct {\n\tSpecifications [][]string `json:\"specifications\"`\n}\nvar data = `{\"specifications\": [\n\t[\"Display\", \"11 Inches 120 Hz Liquid Retina Display\"],\n\t[\"Capacity\", \"128GB, 256GB, 512GB, 1TB, 2TB\"],\n\t[\"Chip\", \"Apple M1 Chip\"],\n\t[\"Front Camera\", \"12 MP : TrueDepth Camera, ƒ/2.4, 122 Degree Field of View, Animoji and Memoji, Lens Correction\"],\n\t[\"Rear Camera\", \"12 MP : Wide Camera, ƒ/1.8, Five‑Element Lens, Autofocus with Focus Pixels | 10 MP : Ultra-Wide Camera, ƒ/2.4, 125 Degree Field of View, Five‑Element Lens, Lens Correction | 12MP Telephoto Camera: ƒ/2.8 Aperture\"],\n\t[\"Sound\", \"Quad Speakers | AAC‑LC, HE‑AAC, HE‑AAC v2, Protected AAC, MP3, Linear PCM, Apple Lossless, FLAC, Dolby Digital (AC‑3), Dolby Digital Plus (E‑AC‑3), Dolby Atmos and Audible (formats 2, 3, 4, Audible Enhanced Audio, AAX and AAX+)\"],\n\t[\"WiFi\", \"IEEE 802.11a/b/g/n/ac/ax | Dual Band (2.4 GHz and 5 GHz), HT80 with MIMO\"],\n\t[\"Bluetooth\", \"Bluetooth 5.0\"],\n\t[\"Battery Life\", \"Up to 10 Hours of Surfing the Web on Wi-Fi or Watching Video, Built-in 28.65 WHr Rechargeable Battery\"],\n\t[\"Connector\", \"USB Type-C | 20 Watts Fast Charging, Charging Via Power Adapter or USB-C to Computer System\"],\n\t[\"Dimensions\", \"7.02 x 0.23 x 9.74 Inches\"],\n\t[\"Weight\", \"466 g\"],\n\t[\"In the Box\", \"1 U Tablet | Power Adapter | USB Cable | Quick Start Guide | Warranty Card\"],\n\t[\"Warranty\", \"12 Months | International Travellers | Carry-In\"]\n]}`"
  },
  {
    "url": "https://stackoverflow.com/questions/73786696/can-i-test-queries-in-goroutine-with-sqlmock",
    "body": " go func(){\n        queryResponses <- r.db.Raw(\"SELECT COUNT(*) FROM deposits\").Find(&users)\n    }()\n-    go func(){\n        queryResponses <- r.db.Raw(\"SELECT COUNT(*) FROM services\").Find(&users)\n+    go func(){\n        queryResponses <- r.db.Raw(\"SELECT COUNT(*) FROM services\").Find(&services)\n    }()\n-    go func(){\n        queryResponses <- r.db.Raw(\"SELECT COUNT(*) FROM sells\").Find(&users)\n    }()\n+    go func(){\n        queryResponses <- r.db.Raw(\"SELECT COUNT(*) FROM sells\").Find(&sells)\n    }()"
  },
  {
    "url": "https://stackoverflow.com/questions/73721296/go-language-ecdsa-verify-the-valid-signature-to-invalid",
    "body": "1*G     GO buffer: 0x036b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296     C++ buffer: 0x026b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\n2*G     GO buffer: 0x037cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978     C++ buffer: 0x037cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978\n3*G     GO buffer: 0x025ecbe4d1a6330a44c8f7ef951d4bf165e6c6b721efada985fb41661bc6e7fd6c     C++ buffer: 0x035ecbe4d1a6330a44c8f7ef951d4bf165e6c6b721efada985fb41661bc6e7fd6c\n4*G     GO buffer: 0x02e2534a3532d08fbba02dde659ee62bd0031fe2db785596ef509302446b030852     C++ buffer: 0x02e2534a3532d08fbba02dde659ee62bd0031fe2db785596ef509302446b030852\n5*G     GO buffer: 0x0251590b7a515140d2d784c85608668fdfef8c82fd1f5be52421554a0dc3d033ed     C++ buffer: 0x0251590b7a515140d2d784c85608668fdfef8c82fd1f5be52421554a0dc3d033ed\n6*G     GO buffer: 0x02b01a172a76a4602c92d3242cb897dde3024c740debb215b4c6b0aae93c2291a9     C++ buffer: 0x03b01a172a76a4602c92d3242cb897dde3024c740debb215b4c6b0aae93c2291a9\n7*G     GO buffer: 0x028e533b6fa0bf7b4625bb30667c01fb607ef9f8b8a80fef5b300628703187b2a3     C++ buffer: 0x038e533b6fa0bf7b4625bb30667c01fb607ef9f8b8a80fef5b300628703187b2a3\n8*G     GO buffer: 0x0262d9779dbee9b0534042742d3ab54cadc1d238980fce97dbb4dd9dc1db6fb393     C++ buffer: 0x0362d9779dbee9b0534042742d3ab54cadc1d238980fce97dbb4dd9dc1db6fb393\n9*G     GO buffer: 0x02ea68d7b6fedf0b71878938d51d71f8729e0acb8c2c6df8b3d79e8a4b90949ee0     C++ buffer: 0x02ea68d7b6fedf0b71878938d51d71f8729e0acb8c2c6df8b3d79e8a4b90949ee0"
  },
  {
    "url": "https://stackoverflow.com/questions/73627615/how-to-make-conditional-aggregation-using-gorm",
    "body": "gopackage main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n)\ntype Res struct {\n\tConfirmed   int\n\tUnconfirmed int\n\tTotal       int\n}\nfunc main() {\n\tsql := \"select sum(if (status = 'confirmed', amount, 0)) as confirmed ,sum(if (status = 'unconfirmed', amount, 0)) as unconfirmed, sum(amount) as total from m_73627615 where id = 1\"\n\tdsn := fmt.Sprintf(\"%s:%s@(%s:3306)/%s?charset=utf8&parseTime=True\", \"\", \"\", \"\", \"\")\n\tdb, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar r Res\n\t_ = db.Raw(sql).Scan(&r).Error\n\tfmt.Println(r)\n\t// {150 60 210}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73364256/how-to-translate-this-sql-to-mongodb-golang",
    "body": "currentTime := time.Now()\nmatchStage := bson.D{\n\t\t{\"$match\", bson.D{\n\t\t\t{\"clientid\", clientID},\n\t\t}},\n\t}\n\tifNullDateFinished := bson.M{\"$ifNull\": []interface{}{\"$datefinished\", currentTime}}\n\tdateFinishedToSec := bson.M{\"$add\": []bson.M{\n\t\t{\"$second\": ifNullDateFinished},\n\t\t{\"$multiply\": []interface{}{bson.M{\"$minute\": ifNullDateFinished}, 60}},\n\t\t{\"$multiply\": []interface{}{bson.M{\"$hour\": ifNullDateFinished}, 3600}},\n\t}}\n\tdateAddedToSec := bson.M{\"$add\": []bson.M{\n\t\t{\"$second\": \"$dateadded\"},\n\t\t{\"$multiply\": []interface{}{bson.M{\"$minute\": \"$dateadded\"}, 60}},\n\t\t{\"$multiply\": []interface{}{bson.M{\"$hour\": \"$dateadded\"}, 3600}},\n\t}}\n\tgroupStage := bson.D{\n\t\t{\"$group\", bson.D{\n\t\t\t{\"_id\", \"$presenceid\"},\n\t\t\t{\"count\", bson.M{\"$sum\": bson.M{\"$subtract\": []interface{}{dateFinishedToSec, dateAddedToSec}}}},\n\t\t}},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/73294952/mongodb-aggregation-changes-not-being-persisted-in-go",
    "body": "pipeline := []bson.M{{\n  \"$lookup\": bson.M{\n\t\"from\": \"shipment_quotes\",\n\t\"let\": bson.M{\n      \"shipmentID\": \"$_id\"\n    },\n\t\"pipeline\": []bson.M{{\n      \"$match\": bson.M{\n        \"$expr\": bson.M{\n          \"$and\": []bson.M{{\n            \"$eq\": []string{\n              \"$shipment_id\", \"$$shipmentID\"\n            }}, {\n              \"$eq\": []string{\n                \"$status\", \"WON\"\n              }\n            }\n          }}\n        }\n      },\n    },\n    \"as\": \"quotes\",\n  }}, {\n    \"$match\": bson.M{\n      \"expiration_date\": bson.M{\n        \"$exists\": true\n      }\n    }\n  }, {\n    \"$match\": bson.M{\n      \"$expr\": bson.M{\n        \"$and\": []bson.M{{\n          \"$ne\": []string{\n            \"$status\", \"EXPIRED\"\n          }\n        }, {\n          \"$lt\": []interface{}{\n            \"$expiration_date\", time.Now()\n          }\n        }, {\n          \"$eq\": []interface{}{\n            bson.M{\n              \"$size\": \"$quotes\"\n            }, 0\n          }\n        }, {\n          \"expiration_date\": bson.M{\n            \"$type\": 9\n          }\n        },\n      }\n    }\n  }},\n  update,\n  {\n    \"$merge\": bson.M{\n      \"into\": \"shipments\",\n      \"on\": \"_id\"\n    }\n  },\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73030129/marshal-query-rows-to-nested-struct-with-array",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"sort\"\n)\ntype Product struct {\n\tID        int          `json:\"id\"`\n\tName      string       `json:\"name\"`\n\tDimension []Dimensions `json:\"dimensions\"`\n}\ntype Dimensions struct {\n\tLength int `json:\"length\"`\n\tWidth  int `json:\"width\"`\n\tHeight int `json:\"height\"`\n}\nvar stuff = `[\n{\"id\":1,\"name\":\"abc\",\"length\":1,\"width\":2,\"height\":3},\n{\"id\":1,\"name\":\"abc\",\"length\":4,\"width\":5,\"height\":6},\n{\"id\":2,\"name\":\"pqr\",\"length\":4,\"width\":5,\"height\":6},\n{\"id\":3,\"name\":\"xyz\",\"length\":1,\"width\":2,\"height\":3},\n{\"id\":3,\"name\":\"xyz\",\"length\":4,\"width\":5,\"height\":6},\n{\"id\":3,\"name\":\"xyz\",\"length\":7,\"width\":8,\"height\":9}\n]`\ntype PseudoProduct struct {\n\tID   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\nfunc (p *Product) UnmarshalJSON(j []byte) (err error) {\n\tvar d Dimensions\n\terr = json.Unmarshal(j, &d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tvar q PseudoProduct\n\terr = json.Unmarshal(j, &q)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.Name = q.Name\n\tp.ID = q.ID\n\tp.Dimension = append(p.Dimension, d)\n\treturn nil\n}\ntype ProdList []Product\nfunc (pl ProdList) Len() int {\n\treturn len(pl)\n}\nfunc (pl ProdList) Less(i, j int) bool {\n\tpi := pl[i]\n\tpj := pl[j]\n\treturn pi.ID < pj.ID || pi.Name < pj.Name\n}\nfunc (pl ProdList) Swap(i, j int) {\n\tpl[i], pl[j] = pl[j], pl[i]\n}\nfunc main() {\n\tvar products []Product\n\terr := json.Unmarshal([]byte(stuff), &products)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error unmarshalling: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tsort.Sort(ProdList(products))\n\tn := len(products)\n\tnewproducts := make([]Product, 0)\n\tfor i := 0; i < n; i++ {\n\t\tpi := products[i]\n\t\tfor j := i + 1; j < n; j++ {\n\t\t\tpj := products[j]\n\t\t\tif pj.ID != pi.ID || pj.Name != pi.Name {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpi.Dimension = append(pi.Dimension, pj.Dimension[0])\n\t\t\ti++\n\t\t}\n\t\tnewproducts = append(newproducts, pi)\n\t}\n\tfmt.Printf(\"%v\\n\", newproducts)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73012980/how-to-call-a-subpath-endpoint-in-go-without-call-main-path",
    "body": "func homePageHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Welcome to the HomePage!\")\n\tfmt.Println(\"Endpoint Hit: homePage\")\n}\nfunc pongHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Pong!\")\n\tfmt.Println(\"Endpoint Hit: pong\")\n}\nfunc main() {\n\tlog.Println(\"Loading Rest Service\")\n\trouter := mux.NewRouter()\n\trouter.Path(\"/\").Methods(http.MethodGet).HandlerFunc(homePageHandler)\n\trouter.Path(\"/ping\").Methods(http.MethodGet).HandlerFunc(pongHandler)\n\tlog.Fatal(http.ListenAndServe(\":8083\", router))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72733641/track-progress-of-long-running-tasks-correct-approach",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\ntype ProgressTracker struct {\n\tProgress  int\n\tError     error\n\tCompleted bool\n\tUrl       string\n}\n/**\nThis method sleeps for 1 second and sends progress (in %) in each iteration to Progress channel\nFor .net sites on 3rd iteration fail with error\nWhen everything is completed, send a message to Complete channel\n*/\nfunc work(url string, tracker chan ProgressTracker) {\n\tvar internalTracker = ProgressTracker{\n\t\tUrl: url,\n\t}\n\ttracker <- internalTracker\n\tfmt.Printf(\"processing url %s\\n\", url)\n\tfor i := 1; i <= 5; i++ {\n\t\tif url == \"google.com\" {\n\t\t\ttime.Sleep(time.Second * 3)\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t\tif i == 3 && strings.HasSuffix(url, \".net\") {\n\t\t\tinternalTracker.Error = errors.New(\"error for .net sites\")\n\t\t\tinternalTracker.Completed = true\n\t\t\ttracker <- internalTracker\n\t\t\treturn\n\t\t}\n\t\tprogress := 20 * i\n\t\tinternalTracker.Progress = progress\n\t\tinternalTracker.Completed = false\n\t\ttracker <- internalTracker\n\t}\n\tinternalTracker.Completed = true\n\ttracker <- internalTracker\n}\nfunc main() {\n\tvar urls = []string{\"google.com\", \"youtube.com\", \"someurl.net\"}\n\tvar tracker = make(chan ProgressTracker, len(urls))\n\tvar wg sync.WaitGroup\n\twg.Add(len(urls))\n\tfor _, url := range urls {\n\t\tgo func(workUrl string) {\n\t\t\tdefer wg.Done()\n\t\t\twork(workUrl, tracker)\n\t\t}(url)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(tracker)\n\t\tfmt.Printf(\"After wg wait\")\n\t}()\n\tvar completed = 0\n\tfor completed < len(urls) {\n\t\tselect {\n\t\tcase t := <-tracker:\n\t\t\tif t.Completed {\n\t\t\t\tfmt.Printf(\"Processing for %s is completed!\\n\", t.Url)\n\t\t\t\tcompleted = completed + 1\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Processing for %s is in progress: %d\\n\", t.Url, t.Progress)\n\t\t\t}\n\t\t\tif t.Error != nil {\n\t\t\t\tfmt.Printf(\"Url %s has errors %s\\n\", t.Url, t.Error)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72689835/how-to-handle-nan-values-when-writing-to-parquet-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"io/ioutil\"\n)\ntype Salary struct {\n\tBasic, HRA, TA float64 `json:\",omitempty\"`\n}\ntype Employee struct {\n\tFirstName, LastName, Email string `json:\",omitempty\"`\n\tAge                        int\n\tMonthlySalary              []Salary `json:\",omitempty\"`\n}\nfunc main() {\n\tdata := Employee{\n\t\tEmail: \"mark@gmail.com\",\n\t\tMonthlySalary: []Salary{\n\t\t\t{\n\t\t\t\tBasic: 15000.00,\n\t\t\t},\n\t\t},\n\t}\n\tfile, _ := json.MarshalIndent(data, \"\", \" \")\n\t_ = ioutil.WriteFile(\"test.json\", file, 0o644)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72501534/monitoring-go-application-net-http-metrics-using-prometheus",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\ntype Client struct {\n\tClient  *http.Client\n\tCounter *prometheus.CounterVec\n}\nfunc NewClient(counter *prometheus.CounterVec) *Client {\n\treturn &Client{\n\t\tClient:  &http.Client{},\n\t\tCounter: counter,\n\t}\n}\nfunc (c *Client) Do(rqst *http.Request) (*http.Response, error) {\n\tresp, err := c.Client.Do(rqst)\n\thost := rqst.URL.Host\n\tcode := strconv.Itoa(resp.StatusCode)\n\tc.Counter.With(prometheus.Labels{\n\t\t\"host\":          host,\n\t\t\"response_code\": code,\n\t}).Inc()\n\treturn resp, err\n}\nfunc main() {\n\tmetric := prometheus.NewCounterVec(\n\t\tprometheus.CounterOpts{\n\t\t\tName: \"foo\",\n\t\t\tHelp: \"Number of HTTP requests.\",\n\t\t},\n\t\t[]string{\n\t\t\t\"host\",\n\t\t\t\"response_code\",\n\t\t},\n\t)\n\tprometheus.MustRegister(metric)\n\tc := NewClient(metric)\n\tgo func() {\n\t\tfor {\n\t\t\tmethod := http.MethodPost\n\t\t\turl := \"https://httpbin.org/post\"\n\t\t\trqst, _ := http.NewRequest(method, url, nil)\n\t\t\t_, _ = c.Do(rqst)\n\t\t\ttime.Sleep(15 * time.Second)\n\t\t}\n\t}()\n\tlog.Println(\"Starting server\")\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71877334/how-do-i-remove-offset-from-output-of-a-binary-file-in-go",
    "body": "package main\nimport (\n    \"encoding/hex\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"strings\"\n)\nfunc main() {\n    buf, _ := io.ReadAll(os.Stdin)\n    dump := hex.Dump(buf)\n    fmt.Print(stripOffset(dump))\n}\nfunc stripOffset(dump string) string {\n    var b strings.Builder\n    for dump != \"\" {\n        var line string\n        line, dump = next(dump, \"\\n\")\n        _, afterOffset := next(line, \"  \")\n        b.WriteString(afterOffset)\n    }\n    return b.String()\n}\nfunc next(s string, end string) (string, string) {\n    if i := strings.Index(s, end); i >= 0 {\n        split := i + len(end)\n        return s[:split], s[split:]\n    }\n    return s, \"\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71825212/how-to-test-go-mock-repository-inside-loop-on-usecase",
    "body": "func TestService_SaveTodoSuccess(t *testing.T) {\n  // Mock Entity Todo\n  todo := Todo{\n    Title: \"this is title\",\n  }\n  // Mock Entity TodoDetail\n  todoDetail1 := TodoDetail{\n      ID: todo.ID,\n      Item: \"item 0\",\n    }\n  todoDetail2 := TodoDetail{\n      ID: todo.ID,\n      Item: \"item 1\",\n    }\n  todoDetail3 := TodoDetail{\n      ID: todo.ID,\n      Item: \"item 2\",\n    }\n  repository.Mock.On(\"CreateTodo\", &todo).Return(todo)\n// calls 3 times \"CreateTodoDetail\" Repository\n  repository.Mock.On(\"CreateTodoDetail\", &todoDetail1).Return(todoDetail1)\n  repository.Mock.On(\"CreateTodoDetail\", &todoDetail2).Return(todoDetail2)\n  repository.Mock.On(\"CreateTodoDetail\", &todoDetail3).Return(todoDetail3)\n  result, err := testService.SaveTodo(3)\n  assert.Nil(t, err)\n\tassert.NotNil(t, result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71819166/how-could-i-fix-ssh-tcpchan-deadline-not-supported-when-i-connect-to-a-redis-s",
    "body": "     sshConfig := &ssh.ClientConfig{\n\t\tUser:            \"root\",\n\t\tAuth:            []ssh.AuthMethod{ssh.Password(\"password\")},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t\tTimeout:         15 * time.Second,\n\t}\n\tclient, err := ssh.Dial(\"tcp\", \"remoteIP:22\", sshConfig)\n\tif err != nil {\n\t\tlog.Println(fmt.Errorf(\"%v\", err))\n\t}\n\tcli := redis.NewClient(&redis.Options{\n\t\tAddr: net.JoinHostPort(\"127.0.0.1\", \"6379\"),\n\t\tDialer: func(ctx context.Context, network, addr string) (net.Conn, error) {\n\t\t\treturn client.Dial(network, addr)\n\t\t},\n\t\tReadTimeout:  -1,\n\t\tWriteTimeout: -1,\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/71555243/go-verify-module-failed-how-does-go-sumsdb-work",
    "body": "$ curl https://sum.golang.org/lookup/github.com/shabbyrobe/xmlwriter@v0.0.0-20220218224045-defe0ad214f6\n9249991\ngithub.com/shabbyrobe/xmlwriter v0.0.0-20220218224045-defe0ad214f6 h1:ri617veNyNwEMXywzcLmU//YIVSFdJvdk39lNsFB/Ro=\ngithub.com/shabbyrobe/xmlwriter v0.0.0-20220218224045-defe0ad214f6/go.mod h1:tKYSeHyJGYz7eoZMlzrRDQSfdYPYt0UduMr8b97Mmaw=\ngo.sum database tree\n9690070\nOufFSNsOUYeDJ2VPyrxBAe7/d47lQYkE03JZL2ltaI8=\n— sum.golang.org Az3grkvrWUkW3Rvnl5QL72oZpiY5ifJhab3/evZCb0hmRkEtGRE/tCMyFDXftZWFi2SF71EuHAxJMTgLd1laHabOzAE="
  },
  {
    "url": "https://stackoverflow.com/questions/71449102/gocolly-scraping-only-certain-links",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/gocolly/colly/v2\"\n)\ntype Repo struct {\n\tLink string `json:\"link\"`\n\tName string `json:\"name\"`\n}\nfunc main() {\n\trepos := []Repo{}\n\tc := colly.NewCollector(colly.AllowedDomains(\n\t\t\"github.com\",\n\t))\n\tc.OnRequest(func(r *colly.Request) {\n\t\tr.Headers.Set(\"User-Agent\", \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\")\n\t})\n\tc.OnResponse(func(r *colly.Response) {\n\t\tfmt.Println(\"Response Code:\", r.StatusCode)\n\t})\n\t// to get the \"a\" tag\n\tc.OnHTML(\"article>ul>li\", func(h *colly.HTMLElement) {\n\t\tlistItem := h.DOM\n\t\tfor _, v := range listItem.Nodes {\n\t\t\tfor _, a := range v.FirstChild.Attr {\n\t\t\t\tif a.Key == \"href\" && strings.Contains(a.Val, \"github.com\") {\n\t\t\t\t\trepos = append(repos, Repo{Link: a.Val, Name: v.FirstChild.FirstChild.Data})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\tc.Visit(\"https://github.com/avelino/awesome-go/blob/main/README.md\")\n\tfor _, v := range repos {\n\t\tfmt.Printf(\"%v\\t%v\\n\", v.Name, v.Link)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71376450/in-go-templates-sprig-how-to-modify-a-captured-group-in-a-regular-expression-be",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"os\"\n\t\"github.com/Masterminds/sprig\"\n)\ntype Alert struct {\n\tURL string\n}\nfunc main() {\n\ttmpl, err := template.New(\"test\").Funcs(sprig.FuncMap()).Parse(`\n{{- $x := regexFind \"earliest=(.+?)&\" .URL | replace \"earliest=\" \"\" | replace \"&\" \"\" -}}\n{{ regexReplaceAll \"earliest=(.+?)&\" .URL (list \"earliest=\" ((now).UTC.Unix | toString) \"&\" | join \"\") }}\n{{ .URL }}`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = tmpl.Execute(os.Stdout, &Alert{URL: \"https://search.com?earliest=-15m&latest=now\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71308704/using-uber-fx-to-provide-an-interface",
    "body": "package http\nimport (\n\t\"time\"\n\t\"github.com/caarlos0/env/v6\"\n\t\"github.com/gofiber/fiber/v2\"\n)\ntype BaseConfig interface {\n\tGetPort() string\n\tGetTimeout() int\n}\ntype Config struct {\n\tPort    string `env:\"LISTEN_ADDR\" envDefault:\":3000\"`\n\tTimeout uint64 `env:\"TIMEOUT\" envDefault:\"10\"`\n}\nfunc NewConfig() (*Config, error) {\n\tcfg := Config{}\n\tif err := env.Parse(&cfg); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &cfg, nil\n}\nfunc (c *Config) GetPort() string {\n\treturn c.Port\n}\nfunc (c *Config) GetTimeout() int {\n\treturn int(c.Timeout)\n}\nfunc CreateServer(config *Config) *fiber.App {\n\tfiberConfig := fiber.Config{\n\t\tReadTimeout:  time.Second * time.Duration(config.GetTimeout()),\n\t\tWriteTimeout: time.Second * time.Duration(config.GetTimeout()),\n\t}\n\tapp := fiber.New(fiberConfig)\n\t// do setup and other stuff\n\treturn app\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71236578/opentelemetry-propagation-issue-with-azure-servicebus-queues-using-go",
    "body": "package grpcutil\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"github.com/grpc-ecosystem/go-grpc-middleware/util/metautils\"\n\t\"go.opencensus.io/trace\"\n\t\"go.opencensus.io/trace/propagation\"\n\t\"google.golang.org/grpc/metadata\"\n)\nconst TraceContextMDKey = \"trace_ctx\"\nfunc NewTraceableContext(ctx context.Context, span *trace.Span) context.Context {\n\treturn metadata.AppendToOutgoingContext(\n\t\tctx,\n\t\tTraceContextMDKey, base64.StdEncoding.EncodeToString(propagation.Binary(span.SpanContext())),\n\t)\n}\nfunc GetRemoteTraceContext(ctx context.Context) (trace.SpanContext, bool) {\n\tvar traceCtx []byte\n\textCtx := metautils.ExtractIncoming(ctx).Get(TraceContextMDKey)\n\tif len(extCtx) > 0 {\n\t\ttraceCtx, _ = base64.StdEncoding.DecodeString(extCtx)\n\t}\n\treturn propagation.FromBinary(traceCtx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71173642/how-to-use-bazel-platform-transitions-in-a-go-gazelle-project",
    "body": "def _impl(ctx):\n    providers = []\n    if DefaultInfo in ctx.attr.dep:\n        providers.append(ctx.attr.dep[DefaultInfo])\n    if FilesToRunProvider in ctx.attr.dep:\n        providers.append(ctx.attr.dep[FilesToRunProvider])\n    return providers\nhost_transitioning_rule = rule(\n    implementation = _impl,\n    attrs = {\n        \"_allowlist_function_transition\": attr.label(\n            default = \"@bazel_tools//tools/allowlists/function_transition_allowlist\",\n        ),\n        \"dep\": attr.label(cfg = host_transition),\n    },\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/71114861/how-to-preserve-path-params-after-handling-a-request-with-router-any-and-wildcar",
    "body": "func main() {\n    internalEngine := gin.New()\n\tinternalEngine.GET(\"/internal/dosomething1\", func(c *gin.Context) { c.JSON(200, \"ok\") })\n\tinternalEngine.GET(\"/internal/dosomething2/:id\", func(c *gin.Context) { c.JSON(200, c.Param(\"id\")) })\n\tmainEngine := gin.New()\n\tmainEngine.Any(\"/*uri\", func(c *gin.Context) {\n\t\tpath := c.Param(\"uri\")\n\t\tif strings.HasPrefix(path, \"/internal/\") {\n\t\t\turi := strings.Split(path, \"/\")\n\t\t\tswitch uri[2] {\n\t\t\tcase \"dosomething1\", \"dosomething2\":\n\t\t\t\tinternalEngine.HandleContext(c)\n\t\t\t}\n\t\t} else {\n\t\t\tdoExternal(c)\n\t\t}\n\t})\n    mainEngine.Run(\":8800\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70875730/golang-how-to-create-helper-mysql-to-generate-uuid-uuid-short-without-create",
    "body": "package database\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"time\"\n    _ \"github.com/go-sql-driver/mysql\"\n)\ntype conncetion struct {\n    sqlDB *sql.DB\n}\nvar globalConnection *conncetion\nfunc GetDB() *conncetion {\n    return globalConnection\n}\nfunc NewMysqlConnection(databaseConnection *sql.DB) *conncetion {\n    return &conncetion{databaseConnection}\n}\nfunc SetupMysqlDatabaseConnection() (db *sql.DB) {\n    var (\n        driver   = os.Getenv(\"DB_DRIVERNAME\")\n        username = os.Getenv(\"DB_USERNAME\")\n        password = os.Getenv(\"DB_PASSWORD\")\n        host     = os.Getenv(\"DB_HOST\")\n        port     = os.Getenv(\"DB_PORT\")\n        name     = os.Getenv(\"DB_NAME\")\n    )\n    connection := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?parseTime=true\", username, password, host, port, name)\n    db, err := sql.Open(driver, connection)\n    if err != nil {\n        log.Fatal(err)\n    }\n    db.SetMaxOpenConns(100)\n    db.SetMaxIdleConns(100)\n    db.SetConnMaxLifetime(100 * time.Millisecond)\n    return\n}\nfunc (c *conncetion) GenerateUUID() (uuid uint64, err error) {\n    uuid = 0\n    queryGetUUID := c.sqlDB.QueryRow(`SELECT UUID_SHORT()`)\n    err = queryGetUUID.Scan(\n        &uuid,\n    )\n    return\n}\nfunc GetUUID() (uuid uint64, err error) {\n    // mysql := SetupMysqlDatabaseConnection()\n    // db := NewMysqlConnection(mysql)\n    db = GetDB()\n    uuid, err = db.GenerateUUID()\n    return\n}\n// can be written on main.go / server.go\nfunc init() {\n    globalConnection = NewMysqlConnection(database.SetupMysqlDatabaseConnection())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70845815/elegant-way-to-eliminate-multiple-condition-checks-in-function",
    "body": "type Validator struct {\n\tA VA\n\tB VB\n}\ntype Validate func(v *Validator) error\nfunc WithVA(s string) Validate {\n\treturn func(v *Validator) error {\n\t\tif err := v.A.CheckA(s); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n}\nfunc WithVB(i int) Validate {\n\treturn func(v *Validator) error {\n\t\tif err := v.B.CheckB(i); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n}\nfunc DoValidate(vs string, vi int, vals ...func(v *Validator) error) error {\n\tv := &Validator{A: VA{A: vs}, B: VB{B: vi}}\n\tfor _, val := range vals {\n\t\tif err := val(v); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\nfunc FuncA(s string, i int) error {\n\terr := DoValidate(\"testa\", 3, WithVA(s), WithVB(i))\n\tif err != nil {\n\t\treturn err\n\t}\n\t// more logic ...\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69815593/simplifying-route-handler-to-handle-parameters-without-framework",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n)\ntype Tender struct {\n\ttenderReference string\n\tvenderCode      int\n}\n// Handles GET /api/tender/(rw|r)/([^/]+)/vendor/([0-9]+)\nfunc apiTenders(w http.ResponseWriter, r *http.Request) {\n\taction := getField(r, 0)\n\ttenderReference := getField(r, 1)\n\tvenderCode, _ := strconv.Atoi(getField(r, 2))\n\ttender := Tender{tenderReference, venderCode}\n\tswitch action {\n\tcase \"rw\":\n\t\ttender.readWrite(w, r) // Display tender and allow vendor to submit feedback\n\tcase \"r\":\n\t\ttender.readOnly(w, r) // Display readOnly copy of the tender\n\tdefault:\n\t\tfmt.Fprintf(w, \"Tendert ERROR\\n\")\n\t}\n}\nfunc (t Tender) readWrite(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Tender %s is ready for vendor %d to review and submit\\n\", t.tenderReference, t.venderCode)\n}\nfunc (t Tender) readOnly(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Tender %s already submitted by vender %d\\n\", t.tenderReference, t.venderCode)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69815593/simplifying-route-handler-to-handle-parameters-without-framework",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n)\ntype apiHandler struct{}\nfunc main() {\n\thttp.Handle(\"/api/\", apiHandler{})\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\t// The \"/\" pattern matches everything, so we need to check\n\t\t// that we're at the root here.\n\t\tif req.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, req)\n\t\t\treturn\n\t\t}\n\t\tfmt.Fprintf(w, \"Welcome to the home page!\")\n\t})\n\thttp.ListenAndServe(\":8000\", nil)\n}\nfunc (apiHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tvar allow []string\n\tfor _, route := range routes {\n\t\tmatches := route.regex.FindStringSubmatch(r.URL.Path)\n\t\tif len(matches) > 0 {\n\t\t\tif r.Method != route.method {\n\t\t\t\tallow = append(allow, route.method)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tctx := context.WithValue(r.Context(), ctxKey{}, matches[1:])\n\t\t\troute.handler(w, r.WithContext(ctx))\n\t\t\treturn\n\t\t}\n\t}\n\tif len(allow) > 0 {\n\t\tw.Header().Set(\"Allow\", strings.Join(allow, \", \"))\n\t\thttp.Error(w, \"405 method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\thandle404(w, r)\n\t//http.NotFound(w, r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69293139/how-to-solve-problems-mark-and-toys-question-on-hackerrank",
    "body": "package main\nimport (\n\t\"log\"\n\t\"sort\"\n)\nfunc maximumToys(prices []int32, k int32) int32 {\n\tsort.Slice(prices, func(a, b int) bool {\n\t\treturn prices[a] < prices[b]\n\t})\n\tsum := int32(0)\n\tfor i := 0; i < len(prices); i++ {\n\t\tsum += prices[i]\n\t\tif sum > k {\n\t\t\treturn int32(i)\n\t\t}\n\t}\n\treturn int32(len(prices))\n}\nfunc main() {\n\ttests := []struct {\n\t\tprices      []int32\n\t\tmoney, want int32\n\t}{\n\t\t{[]int32{1, 2, 3, 4}, 7, 3},\n\t\t{[]int32{1, 12, 5, 111, 200, 1000, 10}, 50, 4},\n\t}\n\tfor i, t := range tests {\n\t\tn := maximumToys(t.prices, t.money)\n\t\tlog.Print(\"test \", i, \" result: got=\", n, \" wanted=\", t.want, \" passed=\", n == t.want)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67686654/how-do-i-call-a-function-from-the-main-application-from-a-plugin",
    "body": "// A Symbol is a pointer to a variable or function.\n// For example, a plugin defined as\n//\n// var V int\n//\n// func F() { fmt.Printf(\"Hello, number %d\\n\", V) }\n//\n// may be loaded with the Open function and then the exported package\n// symbols V and F can be accessed\npackage main\nimport (\n\t\"fmt\"\n\t\"plugin\"\n)\nfunc main() {\n\tp, err := plugin.Open(\"plugin_name.so\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tv, err := p.Lookup(\"V\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tf, err := p.Lookup(\"F\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t*v.(*int) = 7\n\tf.(func())() // prints \"Hello, number 7\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67667527/httptest-in-go-no-body-returning-with-echo",
    "body": "//main_test.go\npackage main\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\nfunc TestHandler(t *testing.T) {\n\t//Here, we form a new HTTP request. This is the request that's going to be\n\t// passed to our handler.\n\t// The first argument is the method, the second argument is the route (which\n\t//we leave blank for now, and will get back to soon), and the third is the\n\t//request body, which we don't have in this case.\n\treq, err := http.NewRequest(\"GET\", \"\", nil)\n\t// In case there is an error in forming the request, we fail and stop the test\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\t// We use Go's httptest library to create an http recorder. This recorder\n\t// will act as the target of our http request\n\t// (you can think of it as a mini-browser, which will accept the result of\n\t// the http request that we make)\n\trecorder := httptest.NewRecorder()\n\t// Create an HTTP handler from our handler function. \"handler\" is the handler\n\t// function defined in our main.go file that we want to test\n\thf := http.HandlerFunc(handler)\n\t// Serve the HTTP request to our recorder. This is the line that actually\n\t// executes our the handler that we want to test\n\thf.ServeHTTP(recorder, req)\n\t// Check the status code is what we expect.\n\tif status := recorder.Code; status != http.StatusOK {\n\t\tt.Errorf(\"handler returned wrong status code: got %v want %v\",\n\t\t\tstatus, http.StatusOK)\n\t}\n\t// Check the response body is what we expect.\n\texpected := `Hello World!`\n\tactual := recorder.Body.String()\n\tif actual != expected {\n\t\tt.Errorf(\"handler returned unexpected body: got %v want %v\", actual, expected)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66736759/how-to-use-go-%d1%81mp-to-compare-such-structs",
    "body": "import \"reflect\"\nfunc EqualI(i1 I, i2 I) bool {\n    v1 := reflect.ValueOf(i1)\n    v2 := reflect.ValueOf(i2)\n    t1 := v1.Type()\n    // if i1, i2 are not of the same type\n    if t1 != v2.Type() {\n        return false\n    }\n    // If i1,i2 are S0 structs\n    if s00, ok := i1.(S0); ok {\n        return reflect.DeepEqual(s00, i2.(S0))\n    }\n    // If i1,i2 are not S0 structs\n    // then check for the SO field\n    fieldS00 := v1.Field(0).Interface().(S0)\n    fieldS01 := v2.Field(0).Interface().(S0)\n    if reflect.DeepEqual(fieldS00, fieldS01) {\n        return true\n    }\n    // in other case check the rest of fields\n    for i := 1; i < t1.NumField(); i++ {\n        if !reflect.DeepEqual(v1.Field(i).Interface(), v2.Field(i).Interface()) {\n            return false\n        }\n    }\n    return true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65751586/jwt-does-not-validate-signature-with-pkcs1v15-go-but-validates-with-jwt-io",
    "body": "{\n  \"keys\": [\n    {\n      \"kty\": \"RSA\",\n      \"kid\": \"236c88d1-5b51-4cd3-b73b-d6b4c1fbe177\",\n      \"use\": \"sig\",\n      \"n\": \"zVoCP5ZRqb_e5Vea_dvuNr0NAP_6K-x8Q5iV9ZaSjawp7mqmcDORTgUejrVvLUaeOO-xO4OLHRkqsb75R0VVIaB_hfTszCjo-CfQ5WUfH9tb3AVUP6bnx_l5VMWVrkYW1YVnaYqrJOD7axS9YXaVXgEixtHkwqNVLuCJ4Y6S1YxUCJZa4pCCOsPFd0tz4_mNLNUZRJUNuyK4v7AcsIlYqvl2J_G5cUCKFwSjaRBxPih-pd84dJIktU3xZeyZOMg_G5WiUujoyf20Fx5avLKV79F31dNBGUIVvu9woQb3mH00IULTJj1HhKjZkyJ16cvkiJ2G1jUk6r4v0cWc652uZw\",\n      \"e\": \"AQAB\"\n    },\n    {\n      \"kty\": \"RSA\",\n      \"kid\": \"ee2def52-afd1-410e-9aa8-086336234e93\",\n      \"n\": \"hL1hBsWFuD4oXZ6SELvibUcv9ap7QDBVZv5BZzGOyjsGmKXumi3UsfAHhhMPC3r9jt6tUsbsp4ahvuBS-9lKlOk45DtJW4aQRI2k24KAyniwFNweBy1gJny9jrDYHJ7Vot0hkIT86oMqM6gVnbLVqzrNuQGA-zpB6Crlpzr8z094j7h-KcHTaPJh_qTZq_IUE3xxC0oPfGFYUohWeEjYBx7yq3jkMVXEQ9POtcTY9ttNCg9f9MpeNO1la_YMRsiEzJDLEnAtskndTfw6AwadfN7VZXKHaajFkBulRwZkxo8JusHCQzNWctbfHTYpsvKZBMHTRAjbrTzEE8Ps0x_ToQ\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65751586/jwt-does-not-validate-signature-with-pkcs1v15-go-but-validates-with-jwt-io",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/MicahParks/keyfunc\"\n\t\"github.com/dgrijalva/jwt-go\"\n)\nconst (\n\t// The two combined JWK from the original post as a JWKS.\n\tjwksJSON = `{\"keys\":[{\"kty\":\"RSA\",\"kid\":\"236c88d1-5b51-4cd3-b73b-d6b4c1fbe177\",\"use\":\"sig\",\"n\":\"zVoCP5ZRqb_e5Vea_dvuNr0NAP_6K-x8Q5iV9ZaSjawp7mqmcDORTgUejrVvLUaeOO-xO4OLHRkqsb75R0VVIaB_hfTszCjo-CfQ5WUfH9tb3AVUP6bnx_l5VMWVrkYW1YVnaYqrJOD7axS9YXaVXgEixtHkwqNVLuCJ4Y6S1YxUCJZa4pCCOsPFd0tz4_mNLNUZRJUNuyK4v7AcsIlYqvl2J_G5cUCKFwSjaRBxPih-pd84dJIktU3xZeyZOMg_G5WiUujoyf20Fx5avLKV79F31dNBGUIVvu9woQb3mH00IULTJj1HhKjZkyJ16cvkiJ2G1jUk6r4v0cWc652uZw\",\"e\":\"AQAB\"},{\"kty\":\"RSA\",\"kid\":\"ee2def52-afd1-410e-9aa8-086336234e93\",\"n\":\"hL1hBsWFuD4oXZ6SELvibUcv9ap7QDBVZv5BZzGOyjsGmKXumi3UsfAHhhMPC3r9jt6tUsbsp4ahvuBS-9lKlOk45DtJW4aQRI2k24KAyniwFNweBy1gJny9jrDYHJ7Vot0hkIT86oMqM6gVnbLVqzrNuQGA-zpB6Crlpzr8z094j7h-KcHTaPJh_qTZq_IUE3xxC0oPfGFYUohWeEjYBx7yq3jkMVXEQ9POtcTY9ttNCg9f9MpeNO1la_YMRsiEzJDLEnAtskndTfw6AwadfN7VZXKHaajFkBulRwZkxo8JusHCQzNWctbfHTYpsvKZBMHTRAjbrTzEE8Ps0x_ToQ\",\"e\":\"AQAB\"}]}`\n)\nfunc main() {\n\t// Create the JWKS from hardcoded JSON.\n\t//\n\t// This can also be done via an HTTPS resource using the keyfunc.Get function.\n\tjwks, err := keyfunc.New([]byte(jwksJSON))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKS from JSON.\\nError: %s\", err.Error())\n\t}\n\t// The \"failing\" JWT from the original post.\n\tjwtB64 := \"eyJraWQiOiIyMzZjODhkMS01YjUxLTRjZDMtYjczYi1kNmI0YzFmYmUxNzciLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiIzZTRkNDA5My04M2U2LTRiZGYtODkwYi1kNDBhYjgyMTE0MzkiLCJhdWQiOiJvYnJicy5vcGVuYmFua2luZy1jb25zZW50Lm9wZW5iYW5raW5nLWNvbnNlbnQtc3RhbmRhbG9uZSIsImlzcyI6InJic2cub3BlbmJhbmtpbmcuc2l0LnBheW1lbnRzLWxpbWl0cy12MSIsImV4cCI6MTYxMDYzMjQxNSwiaWF0IjoxNjEwNjMyMTE1LCJuYmYiOjE2MTA2MzIxMTUsIm1zX3Byb3BhZ2F0ZWRfand0IjoiZXlKcmFXUWlPaUpsT0dRMk1HSXlZaTB5T1RFeUxUUmpNamd0T0RNeE55MWhOemszT1dZeFlUVmtOamdpTENKaGJHY2lPaUpTVXpJMU5pSjkuZXlKcWRHa2lPaUpsTkRaa1l6VXdPQzAxWXpKaUxUUXhaall0WW1ZMU1TMWtZVE0yTVRKak9UWTVOak1pTENKaGRXUWlPaUp5WW5ObkxtOXdaVzVpWVc1cmFXNW5Mbk5wZEM1d1lYbHRaVzUwY3kxc2FXMXBkSE10ZGpFaUxDSnBjM01pT2lKdlluSmljeTV2Y0dWdVltRnVhMmx1WnkxaGRYUm9laTV2Y0dWdVltRnVhMmx1WnkxaGRYUm9laTF6ZEdGdVpHRnNiMjVsSWl3aVpYaHdJam94TmpFd05qTXlNVFF6TENKcFlYUWlPakUyTVRBMk16SXhNVE1zSW01aVppSTZNVFl4TURZek1qRXhNeXdpYlhOZmNISnZjR0ZuWVhSbFpGOXFkM1FpT2lKbGVVcHlZVmRSYVU5cFNUVmpRMGx6U1cxR2MxcDVTVFpKYTFaVVRXcFZNa2x1TUM1bGVVcDZaRmRKYVU5cFNYZE5WRUUwVGxSbmQwMUVVVFZKYVhkcFl6STViV1JJWkdoamJWWm1XVEo0Y0ZwWE5UQllNalZvWWxkVmFVOXBTa1ZTVmsxblVqSldkVnBZU25CWmVVSXdXbGhPTUVsSFRuTmhWMVoxWkVOQ1QxWXdTV2xNUTBwcFlWYzBhVTlwU1hoUFJFVXpUbXByZWs1VVkzZEphWGRwWVZoT2VrbHFiMmxWUjJ4MVdqQkdhbGt5Vm5wak1FWXhaRWRvVldJeWRHeGlhVWx6U1c1T2RscHVVak5aV0Vwc1dETlNkbU14T1RGamJXdHBUMmxLYjJSSVVuZGplbTkyVERKU2JHUnRWbk5pTTBKc1kyazFkVmxZVWpOYVdFNHdURzFPZG1KVE9XdGtWekYwWlZZNU1GcFlTblJqZVRWdlpFY3dhVXhEU21waFZ6UnBUMmxKZUUxRVZUVk9SR00xVGxSbk5FbHBkMmxrUjJoNVdsZEdNRmd6U214Wk1qbDVXa1k1ZVZwWVRqRmlTRkZwVDJsS1IxbFhiSE5rV0Vwc1NXbDNhV050Vm5wa1Z6RnNXRE5XZVdKRFNUWkpiV2d3WkVoQ2VrOXBPSFpoVjBaMFRGZEdNV1JIYUhWTVdFNXdaRU14ZVZsdVRYVmlWMFoxV1Zka2JGcElVbXhqTTFGMVdUSTVkRXd5Um5wTU0yUlpVMFprUTB3elNteGpNMVowV2xNNWFHTjVPV2hrV0ZKdllqTktjR1Z0UmpCaFZ6bDFURzVDY0dKdFkybE1RMHAzWVZoT2QxZ3pRbXhqYlRGd1l6Tk9jR0l5TldaYWJYaG9XbmxKTm1KdVZuTmlRM2RwV1RKNGNGcFhOVEJZTW14clNXcHZhVTV1YUZGV1ZXZzBZbFpPZEZScWFITmFhM2Q1VW0xS05tUllaM3BqZVVselNXNVNkR1ZHT1hwa1dFSjNZMjFXZW1NeWJIWmliRGx0WWtkR2JrbHFjSFZrVjNoelRFTktlbUl5V2pCa01rWjVXbFk1ZDJJeWVIQlpNMnhtWkZoS2NFbHFiMmxoU0ZJd1kwaE5Oa3g1T1d0YVdGcHNZa2M1ZDFwWVNYVmliVVl3WkRKV2VtUkROV3BpTWpCMldraFdkR0pZYkdaalJ6bHpZVmRPTlV4dGFEQmlVMGx6U1c1V2VscFlTbVpaV0ZZd1lVYzFabUpYVmpCaFJ6bHJTV3B2YVdGWFJuUk1XRWt3WTBNeE0xcFhTV2xNUTBwNllqSmFNR1F5Um5sYVZqbHdXa05KTmtscVdqUlZSbFpKWlVjeFZHSlZORFJpUjFwTlRXdGFhV1Z1VmpSTk0wMXBURU5LZG1OSFZuVlpiVVoxWVRKc2RWb3hPWEJpYmxKc1ltNVNabUZYVVdsUGFVcHFUa1JyZVU1RVVUTmFha1UwV1cxRk1FOUVSbWxaYWtFd1RrUkpORmx0VFhwUFYwVXhXVlJSTUUxcFNYTkpibEo2VFd3NWFGa3lUblprVnpVd1dESnNhMGxxYjJsVWFUbENTV2wzYVdSWVRteGpiRGt3WlZoQ2JFbHFiMmxVYVRsQ1NXbDNhVmt6Vm5wa1Jqa3daVmhDYkVscWIybFZSVlpUVlRBNVQxRlZkMmxNUTBwb1pGaFNiMkpzT1hSYVdGSnZZakpSYVU5cFNsTk9Sa0ZwVEVOS2RtTkhWbmxaV0ZKd1ltMWtabGx1U21oaWJWRnBUMmxLVTFGc1RXbE1RMHAyWTIxa1ptSnRSblJhVTBrMlNXczFhR1JIYkhaaWJVWnpTVVprYkdNelVuUmhWelY2WkVkV2VVbEZTbWhpYlhOblZVZDRha2xwZDJsYVdHaDNTV3B2ZUU1cVJYZE9hazE1VGtSQk1reERTbkJaV0ZGcFQycEZNazFVUVRKTmVrbDRUVlJGYzBsdFJuQmpNMEptWTBkV2VXSlhiSHBqTW14MlltdzViV0pIUm01SmFuQjFaRmQ0YzB4RFNuWmliRGxwV2xkb2FHSkhXbVppTWxscFQybEtNRnBZVGpCU1IxWnpXbGRrYUdSSFZsTlJiRTFwVEVOS2FHUlhVV2xQYVVwMldXNUthV041TlhaalIxWjFXVzFHZFdFeWJIVmFlVEZvWkZoU2IyVnBOWFpqUjFaMVdXMUdkV0V5YkhWYWVURm9aRmhTYjJWcE1YcGtSMFoxV2tkR2MySXlOV3hKYVhkcFpFY3hORmd6VG14ak0wNW1ZVmRSYVU5dE5URmlSM2R6U1cxNGNHSnRkR3hhUmpscVlWYzBhVTlwU1hkSmFYZHBXVEpLZDJGWGJHWmpSMVo1WWxkc2VtTXliSFppYkRsdFlrZEdia2xxY0hWa1YzaHpURU5LZVZwWFpIQmpNMUo1V1ZoU2NHSXlOV1phUjBZd1dsTkpObUp1Vm5OaVEzZHBZekk1YldSSVpHaGpiVlptWWtjNWJtSXhPVEZqYld0cFQybEtiMlJJVW5kamVtOTJUREpTYkdSdFZuTmlNMEpzWTJrMWRWbFlVak5hV0U0d1RHMU9kbUpUT1d0a1Z6RjBaVlk1YzJJeVpIWk1ia0oxV25sSmMwbHRPWGxhTVRsd1drTkpOa2xxUVhkTlZGVTBUVVJCZDAxRVFuRmFibVEwVjBWR1FsVlRTWE5KYlU1MlkyNUtiR0pIUmpCaFZ6bDFXREpzYTBscWIybE9ha0UxVFdwUk1VOVVRWHBOZW1kNlRtcGplazE2VlRST2VrbDRUVlJSZDAxVVJYcE9SR013VGxSSk5FOURTWE5KYlU1MlltNU9iR0p1VW1aak0xSm9aRWhXZWtscWIybGxNWGRwVWtkV2FtSkhiSFZhVm5kcFQyeDNhVTFVV1RSTk1rbDVUbFJSTVZsWFJYaFphbWN3V21wQk5VMVhWbWhPVkZaclRrUk9iVnBIVW10T1JGcGpTV2w0WTBscldtaGhWM2d4WTIxV1kwbHFjR05KYW1kNVQxZEdhMXBFV210YVYxa3lXWHBqTTAxdFJtdE5iVkpxVFdwcmVFNTZSVFJOYWs1cFRVUkthRmhEU1hOWVEwcENZa2Q0ZG1ReGQybFBiSGRwV20xYWFrNXFSVEJQUjFaclRVUm5lbHBVU20xWmJWbDRUbFJaTUU1WFNUVk5NazVxV1ZSUmVFMHlTbU5KYmpCcFRFTktlbUl5V2pCa01rWjVXbFk1ZVdJeWVHeGplVWsyU1d4MFVWTldUbEZNUTBKQ1UxWk9VVmhUU1hOSmJsSjBaVVk1ZG1OdFpHWmhWMUZwVDIwMU1XSkhlRGt1YWpZeE0xWm9kMGcyYUV4Q2EzZEJOazVWVG1kMVFYRkZSWEZFTTBwYVpYWlhUMGd3YVV4aGJVcHpSRUkyVEVvdFMzY3ljbEZ4VDJ0VFkycHFZbXRUV1c4MVIxbG1hbGgxWTBoYWNuTlpORzR0YWpkZldtY2lMQ0p0YzE5dFpYTnpZV2RsWDJoaGMyZ2lPaUprT0RZNE9ERXpNMlJqTkRVMlpqZzNOemt3WWpJNVlqbGlaR0kwWWpCa1lqYzFZek5tT1RRMk5HSXhaREpsT1dJd1pXUXlZamxsWXpOa09UazBOVGxsSW4wLmNDNjFiVk1zcVNUWFBRd0ZHclU0cmhXVHNUbGI4YXktOG1lT3gtXzZUQ2d3SHFpbHBsZFhWLXFGYzQyNTZrWWxOU2JYcGxjZ0FqRjc0cEwtelg1a2tzZk9sdzFIUUNsLW16REZveE1VTGd1ZFcwZkJPYzNMekxJWFM3cG40LTZFLVlzdktPVmV2Ymg2NFRBUF9SNzRIX2pNQUVJeXVIc25IeXlfU09Hd1NmWnFwdTBwa0M4enF6ZjBMVjBRS21RS2hTUW9sZkI3U2J0dmNDc19LcG80S3hPdFhmbUVFMlRDMGZKTkJ2cnR4dVZGa0hTdV83REtCYUZmSmNEYmdhZGVkZ2xBOGVMWmNqRzNFY3hlcng4QVFGZVRZTzlOV0xKNU12dW9UWkd2ZjdzTVFSRGMtdGphUVdsODlRdG5pQzFxSXlZTUFGOU1TcG9IcWxmOXMweXJVdyIsIm1zX21lc3NhZ2VfaGFzaCI6IjE5ODg0M2FmOTQyOTcyOGQxZTMyMDdmOGRjNmYzZGE4ZjI1ZWFkY2M5ZDQxY2ZhZWNhNTY5YjllNjY4MWZmOTYifQ.jKehsnGG5j1dOYWlwuF0vKGNbENI1HD35A9g89lhmMrkPhfZ8_lYw4lIkZ16Bepj6HZ53xnTtRXGtmcOZZMr0smh3l5SQ20-CZ6M0yT0wIUZYxJcXmR9_iR7zHI2SvVCpH5CWdlRUNQx9z51Z1SIjc5xvau19omCuMIz7YLZ2Py2tppKz04A8s2xA6Aox-th1dhuKE8NmhTzMnp6UUKbHFyw3Sf7BXJHvQlx4wPB1Pn5l0IZLnD078UsxNmI4r42tECAOmwa0POzzPntlcJNutQZ2QfB68F3YWQZ6YjKF4zTEcZjmMnqVKRLdTyJezGpzXEnitMrnXH-awztlN0d1A\"\n\t// Parse the JWT.\n\tvar token *jwt.Token\n\tif token, err = jwt.Parse(jwtB64, jwks.KeyFunc); err != nil {\n\t\tlog.Printf(\"Failed to parse \\\"failing\\\" JWT from original post.\\nError: %s\", err.Error())\n\t\t// TODO Exit program.\n\t} else {\n\t\t// Confirm the token is valid.\n\t\tif !token.Valid {\n\t\t\tlog.Println(`The \"failing\" token from the original post is not valid.`)\n\t\t}\n\t}\n\t// The second token from the original post.\n\tjwtB64 = \"eyJraWQiOiJlZTJkZWY1Mi1hZmQxLTQxMGUtOWFhOC0wODYzMzYyMzRlOTMiLCJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJlYzlmZWI2Zi1jZDdmLTRlZTctOWY1OS04ZGUzMTNhZDU2YzAiLCJhdWQiOiJyYnNnLm9wZW5iYW5raW5nLnNpdC5vZmZlcnMtdjEiLCJpc3MiOiJyYnNnLm9wZW5iYW5raW5nLnNpdC5hY2NvdW50cy12MyIsImV4cCI6MTYxMDcxNjE2NiwiaWF0IjoxNjEwNzE1ODY2LCJuYmYiOjE2MTA3MTU4NjYsIm1zX3Byb3BhZ2F0ZWRfand0IjoiZXlKcmFXUWlPaUkwWkRVNE5ETTRZeTFpWW1WaUxUUXlaR0l0WW1FMlpDMDROekE0TWpkbVlqRTFPVE1pTENKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKU1V6STFOaUo5LmV5SnpkV0lpT2lJd01UQTROVGd3TURRNUlpd2ljMjltZEhkaGNtVmZZMnhwWlc1MFgyNWhiV1VpT2lKRVJWTWdSMlZ1WlhKcFl5QjBaWE4wSUdOc2FXVnVkQ0JPVjBJaUxDSnBjM01pT2lKeVluTXVZWEJwWjJWbExuTnBkQ0lzSW1Ga1pHbDBhVzl1WVd4ZlkyeGhhVzF6SWpwN0ltTnVaaUk2SW50Y0luZzFkQ05UTWpVMlhDSTZYQ0l4UWtWRVFqTkZOVUZEUWtZek5UTkNNRGcwTWpWRVEwTTNOak5ETVRJeFFqVkZNVU0wT1RFMlhDSjlJaXdpYkdsdWEyVmtYMk5wYmlJNklqQWlMQ0pqYjI1elpXNTBYM04wWVhSMWN5STZJazVjTDBFaUxDSmhZM0lpT2lKMWNtNDZiM0JsYm1KaGJtdHBibWM2Y0hOa01qcHpZMkVpTENKamIzSnlaV3hoZEdsdmJsOXBaQ0k2SWpVM05qazVNVEV3TURZM05UZzBOVE0yTlRBeU1URTFNREV4TXpBeE5UUTBNemNpTENKamRYTjBYM1I1Y0dVaU9pSlFSVkpUVDA1QlRDSXNJbUpwYmlJNklqRTRNVGMyT1RNMU56QWlMQ0p2Y0dWdVltRnVhMmx1WjE5cGJuUmxiblJmYVdRaU9pSXpORFkwWkRrMk16WTNZakUwT1RWaU9UTTJNelUwT1RFd09XTm1ZelE1TmlJc0ltOXdaWEpoZEdsdVoxOWljbUZ1WkNJNklsSkNVeUlzSW5WelpYSmZZWFYwYUc1ZmJXVjBhRzlrSWpvaWFXRnRMWEkwY0MxM1pXSWlMQ0p6YjJaMGQyRnlaVjl5YjJ4bGN5STZXeUpRU1ZOUUlpd2lRVWxUVUNKZExDSmphVzRpT2lJeE1EVTVORGM1TlRnNEluMHNJbU5zYVdWdWRGOXBaQ0k2SWpaNFVGVkllRzFUYlU0NGJHWk1Na1ppZW5WNE0zTWlMQ0p6YjJaMGQyRnlaVjlwWkNJNklqWjRVRlZJZUcxVGJVNDRiR1pNTWtaaWVuVjRNM01pTENKaGRXUWlPaUp5WW5ObkxtOXdaVzVpWVc1cmFXNW5Mbk5wZEM1aFkyTnZkVzUwY3kxMk15SXNJbTl5WjE5cFpDSTZJakF3TVRVNE1EQXdNREJxWm5kNFdFRkJVU0lzSW5OamIzQmxJam9pYjNCbGJtbGtJR0ZqWTI5MWJuUnpJaXdpYjNCbGNtRjBhVzVuWDJKeVlXNWtJam9pY21Keklpd2liM0puWDI1aGJXVWlPaUpPWVhScGIyNWhiQ0JYWlhOMGJXbHVjM1JsY2lCQ1lXNXJJRkJzWXlJc0ltVjRjQ0k2TVRZeE1EY3hOVGt5TlN3aWFXRjBJam94TmpFd056RTFPRFkxTENKcWRHa2lPaUkyWXpNMU5UTmxOUzFqWW1GaExUUXdNV1l0T1RaaU15MHpNREUxWlROaVlUYzRaRFVpZlEuRUh0Q2JhYUE1amN4OHNXZTNaU3dndVR0QkxQc3pxQ1ZBRmJrcm5rUmdRdVYtUVdyTHFFMTNidUVnY0Z5eFF3dlNxcFhZR2dyeTVKMXh0YlJYOFhxZzNmdzFOWXppMms4cWlUNm12WFJoUDVtSDJySVVVVE1FVUt2TW1maFlRWlRtdGNDcS1NYnZ5UzRkWURhR3NXbnZ0Y1U5cHYxYUxYT21ydFUwdmhrVlpaNUwyakJnRTdFOWZ2amZMZE5oUERacGpINGpjNHJaY1VhMmc3clVlMEJoNTY2WURhQ2txS2J6VjBuRDRWV0hLOERsX19jNU1FNVpLMkFJSnJTd3RBQkhtaElwWUV1N1JhUWlPd1ZBRFRNd0ZfcWRJeU1jdVM1dVhtZk1uTi0xcFFOREV2ZzN6MmhvNzJTNjVkS0x5Y0JfejA1b1lwMGUybWw1ZHBFaDZjNUdnIiwibXNfbWVzc2FnZV9oYXNoIjoiYTliMWIwZGNmOTkxYzUyOGFjYWFmNTI0OTMxMGEyYWVhOTM3MGM1NjFjZDdmMjliNDY4MzQzM2YwYjg0YWIzYyJ9.PTZjUdQ386cC5AloVW5UCXtmHqYZD7zo4JisAjZIQdGowxDR0HfnZ8TEDwb20c7HmYHXUmnP971vYNoI4gEifFWVmiEbiFxKgp1pR68LyqC-qclJApB8jLrMFfSxKiwgKIyLkLqBg6XTGonOVJZcLi3--UD7fiRxj-s-Oq1kH7s3lqyp3-C6oLDHiVZmHfFtOaZQFGFGUhmDCodkMNEGeGm28hyMNZXpB0kgA8FQehEhfMAUe1yHA2hgzONNn4eMAYnVMBb7Ax4pMxHQKbhPP15vU4AOWI4xo1VFZrWtydI9yvFggJu_S_pu5c6Z8PywKMGHZjhh-XaCouVG85Z_PQ\"\n\t// Parse the JWT.\n\tif token, err = jwt.Parse(jwtB64, jwks.KeyFunc); err != nil {\n\t\tlog.Printf(\"Failed to parse the second token from the original post.\\nError: %s\", err.Error())\n\t\t// TODO Exit program.\n\t} else {\n\t\t// Confirm the token is valid.\n\t\tif !token.Valid {\n\t\t\tlog.Println(\"The second token from the original post is not valid.\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65628094/parsing-errors-with-openapi-generator-invalid-type-for-type-set-it-to-string",
    "body": "components:\n  schemas:\n    Web3SigningCredential:\n      type: object\n      required:\n        - type\n      discriminator:\n        propertyName: type\n        mapping:\n          CACTUS_KEYCHAIN_REF: Web3SigningCredentialCactusKeychainRef\n          GETH_KEYCHAIN_PASSWORD: Web3SigningCredentialGethKeychainPassword\n          PRIVATE_KEY_HEX: Web3SigningCredentialPrivateKeyHex\n          NONE: Web3SigningCredentialNone\n      properties:\n        type:\n          $ref: '#/components/schemas/Web3SigningCredentialType'\n    Web3SigningCredentialGethKeychainPassword:\n      allOf:\n        - $ref: '#/components/schemas/Web3SigningCredential'\n        - type: object\n          required:\n            - ethAccount\n            - secret\n          properties:\n            ethAccount:\n              type: string\n              description: The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional terminology of authentication.\n              minLength: 64\n              maxLength: 64\n              nullable: false\n            secret:\n              type: string\n              description: A geth keychain unlock password.\n              minLength: 0\n              maxLength: 65535"
  },
  {
    "url": "https://stackoverflow.com/questions/64261033/how-to-replace-a-document-in-mongodb-with-go-driver",
    "body": "func UpdateFunction(echoCtx echo.Context) (error) {\n//Web Section\n\tdocumentID := echoCtx.Param(\"id\")   //Provided in URL\n\tvar newObject myStruct\n\terr := echoCtx.Bind(&newObject)  // Json with updated values sent by web client mapped to struct\n\tctx := echoCtx.Request().Context()\n//Database Section\n\tdatabase := db.Conn.Database(\"myDatabase\")\n\tcollection := database.Collection(\"myCollection\")\n\texistingHexID, err := primitive.ObjectIDFromHex(documentID)\n\tif err != nil {\n\t\tfmt.Println(\"ObjectIDFromHex ERROR\", err)\n\t} else {\n\t\tfmt.Println(\"ObjectIDFromHex:\", existingHexID)\n\t}\n\t// Replacing OLD document with new using _id\n\tfilter := bson.M{\"_id\": newDocumentID}\n\tresult, err := collection.ReplaceOne(ctx, filter, newObject)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\n\t\t\"insert: %d, updated: %d, deleted: %d /n\",\n\t\tresult.MatchedCount,\n\t\tresult.ModifiedCount,\n\t\tresult.UpsertedCount,\n\t)\n\treturn echoCtx.JSON(http.StatusOK, result.ModifiedCount)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63200374/favor-one-communication-chan-in-select",
    "body": "ctx, cancel := context.WithCancel(context.Background())\nch := make(chan int)\ncond := sync.NewCond(&sync.Mutex{}) // *** new\ngo func() {\n\tdefer close(ch)\n\tcond.L.Lock()                   // *** new\n\tdefer cond.L.Unlock()           // *** new\n\tfor i := 1; ; i++ {\n\t\tch <- i                     // *** moved\n\t\tcond.Wait()                 // *** new\n\t\tif ctx.Err() != nil {       // *** changed\n\t\t\treturn\n\t\t}\n\t}\n}()\nprint(<-ch)\ncond.Signal()                      // *** new\nprint(<-ch)\ncond.Signal()                      // *** new\nprint(<-ch)\ncancel()\ncond.Signal()                      // *** new\nprint(<-ch)\ncond.Signal()                      // *** new"
  },
  {
    "url": "https://stackoverflow.com/questions/61885554/constructor-in-shared-object-not-called-in-when-ld-preload-ing-a-go-executable",
    "body": "#include <pthread.h>\n#include <dlfcn.h>\nint pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)\n{\n    int (*pthread_create_original)(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg) = dlsym(RTLD_NEXT,\"pthread_create\");\n    static int already_called = 0;\n    if (!already_called)\n    {\n        already_called = 1;\n        // call here your constructors\n    }\n    return pthread_create_original(thread,attr,start_routine,arg);\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60029552/how-to-render-css-and-js-files-with-go-template",
    "body": "var (\n\tstaticDir    = getAbsDirPath() + \"/static/\"\n\ttemplatesDir = staticDir + \"/templates\"\n\ttemplates = template.Must(template.ParseFiles(\n\t\ttemplatesDir + \"/index.html\",\n\t))\n)\nfunc getAbsDirPath() string {\n\tpwd, err := os.Getwd()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n    // my dir name is 'website'\n\treturn pwd + \"/website\"\n}\nfunc indexHandler(w http.ResponseWriter, r *http.Request) {\n\terr := templates.ExecuteTemplate(w, \"index.html\", nil)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t}\n}\nfunc staticHandler(w http.ResponseWriter, r *http.Request) {\n\tpath := r.URL.Path\n\tif strings.HasSuffix(path, \"js\") {\n\t\tw.Header().Set(\"Content-Type\", \"text/javascript\")\n\t} else {\n\t\tw.Header().Set(\"Content-Type\", \"text/css\")\n\t}\n    // make sure you reference the correct absolute path\n\tdata, err := ioutil.ReadFile(staticDir + path[1:])\n\tif err != nil {\n\t\tfmt.Print(err)\n\t}\n\t_, err = w.Write(data)\n\tif err != nil {\n\t\tfmt.Print(err)\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", indexHandler)\n    // <link rel=\"stylesheet\" href=\"../css/index.css\">\n    // <script src=\"../scripts/index.js\" defer></script>\n\thttp.HandleFunc(\"/scripts/\", staticHandler)\n\thttp.HandleFunc(\"/css/\", staticHandler)\n\tlog.Fatal(http.ListenAndServe(\":80\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59582430/accepting-and-routing-http-requests-over-raw-tcp-socket",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n)\ntype httpHandler struct {\n}\nfunc (m *httpHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"HTTP request\")\n}\nfunc main() {\n\t// http\n\tgo func() {\n\t\thttp.ListenAndServe(\":8001\", &httpHandler{})\n\t}()\n\t// tcp\n\tl, err := net.Listen(\"tcp\", \"localhost:8002\")\n\tif err != nil {\n\t\tfmt.Println(\"Error listening:\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tdefer l.Close()\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting: \", err.Error())\n\t\t\tos.Exit(1)\n\t\t}\n\t\tgo handleRequest(conn)\n\t}\n}\n// Handles incoming requests.\nfunc handleRequest(conn net.Conn) {\n\t// read/write from connection\n\n\tfmt.Println(\"TCP connection\")\n\tconn.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59568031/why-wire-cant-generate-wire-gen-go",
    "body": "   ...\n//change type of argument of speaker from *Speaker to Speaker\n//don't  want to create a new conversion method\nfunc NewSimpleListener(speaker Speaker) *SimpleListener\n   ...\nfunc InitializeListener() Listener {\n\twire.Build(\n\t\tNewHelloSpeaker, //*HelloSpeaker, HelloSpeaker doesn't implement Speaker interfaces, conversion is needed in next step\n\t\twire.Bind(new(Speaker),new(*HelloSpeaker)), //this binding can provide Speaker, not *Speaker\n\t\tNewSimpleListener, //scenario as NewHelloSpeaker\n\t\t//provide Listener, an extra method is needed if *Listener is wanted.\n\t\twire.Bind(new(Listener), new(*SimpleListener)),\n\t)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59353840/installing-package-with-docker-compose",
    "body": "package main\nimport (\n\t\"fmt\"\n    // Note the version suffix \"/v2\" is gone\n    // This installs the v1.2.0 version, but apparently, this works, too\n\t\"github.com/gocolly/colly\"\n\t\"github.com/golang/example/stringutil\"\n)\nfunc main() {\n\tfmt.Println(stringutil.Reverse(\"!selpmaxe oG ,olleH\"))\n    // Limit the domains for the sake of the example\n\tc := colly.NewCollector(colly.AllowedDomains(\"go-colly.org\"))\n\t// Find and visit all links\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\te.Request.Visit(e.Attr(\"href\"))\n\t})\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL)\n\t})\n\tc.Visit(\"http://go-colly.org/\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59353840/installing-package-with-docker-compose",
    "body": "FROM golang:alpine as builder\nADD . /go/src/crawler\nWORKDIR /go/src/crawler\nRUN \\\n       apk add --no-cache tzdata && \\\n       adduser -D -g '' appuser\n# Statically compile our application\nRUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=\"-w -s\" -a -installsuffix cgo -o /crawler\nFROM scratch\n# Import the files required by the standard library from builder.\nCOPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt  /etc/ssl/certs/\n# Make sure the user can be identified by the docker daemon\nCOPY --from=builder /etc/passwd /etc/passwd\n# Copy our static executable\nCOPY --from=builder /crawler /bin/crawler\n# Use an unprivileged user.\nUSER appuser\n# Run the binary.\nCMD [\"/bin/crawler\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/59353840/installing-package-with-docker-compose",
    "body": "$ docker run --rm user3939059/crawler\nHello, Go examples!\nVisiting http://go-colly.org/\nVisiting http://go-colly.org/docs/\nVisiting http://go-colly.org/articles/\nVisiting http://go-colly.org/services/\nVisiting http://go-colly.org/datasets/\nVisiting http://go-colly.org/data/factbase_transcripts.tar.bz2\nVisiting http://go-colly.org/docs/examples/factbase/\nVisiting http://go-colly.org/docs/introduction/install/\nVisiting http://go-colly.org/docs/introduction/start/\nVisiting http://go-colly.org/docs/introduction/configuration/\nVisiting http://go-colly.org/docs/best_practices/debugging/\nVisiting http://go-colly.org/docs/best_practices/distributed/\nVisiting http://go-colly.org/docs/best_practices/storage/\nVisiting http://go-colly.org/docs/best_practices/multi_collector/\nVisiting http://go-colly.org/docs/best_practices/crawling/\nVisiting http://go-colly.org/docs/best_practices/extensions/\nVisiting http://go-colly.org/docs/examples/basic/\nVisiting http://go-colly.org/docs/examples/error_handling/\nVisiting http://go-colly.org/docs/examples/login/\nVisiting http://go-colly.org/docs/examples/max_depth/\nVisiting http://go-colly.org/docs/examples/multipart/\nVisiting http://go-colly.org/docs/examples/parallel/\nVisiting http://go-colly.org/docs/examples/proxy_switcher/\nVisiting http://go-colly.org/docs/examples/queue/\nVisiting http://go-colly.org/docs/examples/random_delay/\nVisiting http://go-colly.org/docs/examples/rate_limit/\nVisiting http://go-colly.org/docs/examples/redis_backend/\nVisiting http://go-colly.org/docs/examples/request_context/\nVisiting http://go-colly.org/docs/examples/scraper_server/\nVisiting http://go-colly.org/docs/examples/url_filter/\nVisiting http://go-colly.org/docs/examples/cryptocoinmarketcap/\nVisiting http://go-colly.org/docs/examples/coursera_courses/\nVisiting http://go-colly.org/docs/examples/google_groups/\nVisiting http://go-colly.org/docs/examples/hackernews_comments/\nVisiting http://go-colly.org/docs/examples/instagram/\nVisiting http://go-colly.org/docs/examples/openedx_courses/\nVisiting http://go-colly.org/docs/examples/reddit/\nVisiting http://go-colly.org/docs/examples/shopify_sitemap/\nVisiting http://go-colly.org/docs/examples/xkcd_store/\nVisiting http://go-colly.org/contact/\nVisiting http://go-colly.org/sitemap.xml\nVisiting http://go-colly.org/docs/examples/coursera_courses\nVisiting http://go-colly.org/docs/examples/redis_backend\nVisiting http://go-colly.org/docs/best_practices/storage\nVisiting http://go-colly.org/docs/examples/scraper_server\nVisiting http://go-colly.org/data/cryptocoin_market_cap.csv\nVisiting http://go-colly.org/data/coursera_courses.json\nVisiting http://go-colly.org/data/xkcd_store_items.csv\nVisiting http://go-colly.org/contact\nVisiting http://go-colly.org/articles/first_release/\nVisiting http://go-colly.org/articles/scraping_related_http_headers/\nVisiting http://go-colly.org/articles/nonprofit/\nVisiting http://go-colly.org/articles/how_to_scrape_instagram/\nVisiting http://go-colly.org/articles/scraping_tips/"
  },
  {
    "url": "https://stackoverflow.com/questions/58648121/unable-to-deserialize-struct-value-of-type-is-not-assignable-to-type",
    "body": "type unmarshalObject struct {\n   Type string `yaml:\"type\"`\n   // All possible fields of all possible implementations\n}\ntype unmarshalCollection struct {\n    Objects []unmarshalObject `yaml:\"objects,omitempty\"`\n}\nfunc (c *Collection) Deserialize(raw []byte) error {\n    var intermediate unmarshalCollection\n    yaml.Unmarshal(raw, &intermediate)\n    c.Objects=make([]Object,0)\n    for _,object:=range intermediate.Objects {\n        switch object.Type {\n          case \"rect\":\n             c.Objects=append(c.Objects,Rectangle{X1:object.X1,...})\n          case \"...\":\n           ...\n        }\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58272670/how-to-implement-sasl-external-for-openldap-client-over-ipc-on-golang",
    "body": "pkt := ber.Encode(ber.ClassApplication, ber.TypeConstructed, ApplicationBindRequest, nil, \"Bind Request\")\npkt.AppendChild(ber.NewInteger(ber.ClassUniversal, ber.TypePrimitive, ber.TagInteger, 3, \"Version\"))\npkt.AppendChild(ber.NewString(ber.ClassUniversal, ber.TypePrimitive, ber.TagOctetString, \"\", \"User Name\"))\nsaslAuth := ber.Encode(ber.ClassContext, ber.TypeConstructed, 3, \"\", \"authentication\")\nsaslAuth.AppendChild(ber.NewString(ber.ClassUniversal, ber.TypePrimitive, ber.TagOctetString, \"EXTERNAL\", \"SASL Mech\"))\nsaslAuth.AppendChild(ber.NewString(ber.ClassUniversal, ber.TypePrimitive, ber.TagOctetString, \"\", \"SASL Cred\"))\npkt.AppendChild(saslAuth)"
  },
  {
    "url": "https://stackoverflow.com/questions/57954234/get-tags-of-specific-branch",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/src-d/go-billy/memfs\"\n\t\"gopkg.in/src-d/go-git.v4\"\n\t\"gopkg.in/src-d/go-git.v4/plumbing\"\n\t\"gopkg.in/src-d/go-git.v4/plumbing/object\"\n\t\"gopkg.in/src-d/go-git.v4/storage/memory\"\n)\nfunc getBranchHashes(repo *git.Repository, branchName string) (hashes map[plumbing.Hash]bool, err error) {\n\t// get branch reference name\n\tbranch, err := repo.Branch(\"master\")\n\tif err != nil {\n\t\treturn\n\t}\n\t// get reference of the reference name\n\tref, err := repo.Reference(branch.Merge, true)\n\tif err != nil {\n\t\treturn\n\t}\n\t// retrieve logs from the branch reference commit\n\t// (default order is depth first)\n\tlogs, err := repo.Log(&git.LogOptions{\n\t\tFrom: ref.Hash(),\n\t})\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer logs.Close()\n\t// a channel to collect all hashes\n\tchHash := make(chan plumbing.Hash)\n\tchErr := make(chan error)\n\tgo func() {\n\t\terr = logs.ForEach(func(commit *object.Commit) (err error) {\n\t\t\tchHash <- commit.Hash\n\t\t\treturn\n\t\t})\n\t\tif err != nil {\n\t\t\tchErr <- err\n\t\t}\n\t\tclose(chErr)\n\t\tclose(chHash)\n\t}()\n\t// make all hashes into a map\n\thashes = make(map[plumbing.Hash]bool)\nhashLoop:\n\tfor {\n\t\tselect {\n\t\tcase err = <-chErr:\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tbreak hashLoop\n\t\tcase h := <-chHash:\n\t\t\thashes[h] = true\n\t\t}\n\t}\n\treturn\n}\ntype TagRef struct {\n\tHash plumbing.Hash\n\tName string\n}\nfunc main() {\n\t// Filesystem abstraction based on memory\n\tfs := memfs.New()\n\t// Git objects storer based on memory\n\tstorer := memory.NewStorage()\n\t// Clones the repository into the worktree (fs) and storer all the .git\n\t// content into the storer\n\trepo, err := git.Clone(storer, fs, &git.CloneOptions{\n\t\tURL: \"https://github.com/yookoala/gofast.git\",\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\thashes, err := getBranchHashes(repo, \"master\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// get all tags in the repo\n\ttags, err := repo.Tags()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttagRefs := make(chan TagRef)\n\tgo func() {\n\t\terr = tags.ForEach(func(ref *plumbing.Reference) (err error) {\n\t\t\tif annotedTag, err := repo.TagObject(ref.Hash()); err != plumbing.ErrObjectNotFound {\n\t\t\t\tif annotedTag.TargetType == plumbing.CommitObject {\n\t\t\t\t\ttagRefs <- TagRef{\n\t\t\t\t\t\tHash: annotedTag.Target,\n\t\t\t\t\t\tName: ref.Name().Short(),\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\ttagRefs <- TagRef{\n\t\t\t\tHash: ref.Hash(),\n\t\t\t\tName: ref.Name().Short(),\n\t\t\t}\n\t\t\treturn\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tclose(tagRefs)\n\t}()\n\tfor tagRef := range tagRefs {\n\t\tif _, ok := hashes[tagRef.Hash]; ok {\n\t\t\tlog.Printf(\"tag: %s, hash: %s\", tagRef.Name, tagRef.Hash)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56917083/filling-out-the-form-fields-in-docx-using-golang-library-unioffice",
    "body": "package main\nimport (\n\t\"github.com/unidoc/unioffice/document\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n)\nfunc main() {\n\t_, err := ioutil.ReadFile(\"filled-form.docx\")\n\tif err == nil {\n\t\terr = os.Remove(\"filled-form.docx\")\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\tdoc, err := document.Open(\"form.docx\")\n\tif err != nil {\n\t\tlog.Fatalf(\"error opening form: %s\", err)\n\t}\n\tfor _, f := range doc.FormFields() {\n\t\tif f.Type() == document.FormFieldType(1) {\n\t\t\tf.SetValue(\"test\")\n\t\t}\n\t}\n\tfor _, f := range doc.FormFields() {\n\t\tlog.Println(\"-------------------\")\n\t\tlog.Println(f.Name())\n\t\tlog.Println(f.Value())\n\t}\n\terr = doc.SaveToFile(\"filled-form.docx\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56140458/what-does-crypto-cipher-xorkeystream-do-to-the-src-byte",
    "body": "\t// XORKeyStream XORs each byte in the given slice with a byte from the\n\t// cipher's key stream. Dst and src must overlap entirely or not at all.\n\t//\n\t// If len(dst) < len(src), XORKeyStream should panic. It is acceptable\n\t// to pass a dst bigger than src, and in that case, XORKeyStream will\n\t// only update dst[:len(src)] and will not touch the rest of dst.\n\t//\n\t// Multiple calls to XORKeyStream behave as if the concatenation of\n\t// the src buffers was passed in a single run. That is, Stream\n\t// maintains state and does not reset at each XORKeyStream call.\n\tXORKeyStream(dst, src []byte)"
  },
  {
    "url": "https://stackoverflow.com/questions/55295947/a-serial-port-receives-the-data-problem-in-golang-on-macos-use-tarm-serial",
    "body": "func sendCommand(p *serial.Port, command string, waitForOk bool) string {\n\tlog.Println(\"--- SendCommand: \", command)\n\tvar status string = \"\"\n\tp.Flush()\n\t_, err := p.Write([]byte(command))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tbuf := make([]byte, 32)\n\tvar loop int = 1\n\tif waitForOk {\n\t\tloop = 10\n\t}\n\tfor i := 0; i < loop; i++ {\n\t\t// ignoring error as EOF raises error on Linux\n\t\tn, _ := p.Read(buf)\n\t\tif n > 0 {\n\t\t\tstatus = string(buf[:n])\n\t\t\tlog.Printf(\"SendCommand: rcvd %d bytes: %s\\n\", n, status)\n\t\t\tif strings.HasSuffix(status, \"OK\\r\\n\") || strings.HasSuffix(status, \"ERROR\\r\\n\") {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn status\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55094133/how-to-send-some-event-update-from-http-handler-to-a-websocket-handler",
    "body": "// ServeHTTP handles the HTTP request.\nfunc (t *templateHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tt.once.Do(func() {\n\t\tt.templ = template.Must(template.ParseFiles(filepath.Join(\"templates\", t.filename)))\n\t})\n\tfmt.Println(r.Host)\n\tt.templ.Execute(w, r)\n\t// Creating the URL scheme to use with websocket Dialer\n\t// to connnect to ws://localhost:8080/room\n\tu := url.URL{Scheme: \"ws\", Host: \"localhost:8080\", Path: \"/room\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\t// Initiate the websocket connection from the go code **as a client** to connect to the chat room\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tgo func() {\n\t\tfor i := 0; i < 10; i++ {\n\t\t\ttime.Sleep(time.Duration(rand.Intn(8e3)) * time.Millisecond)\n\t\t\t// Just printing the log of the same message in command line. Might better to ignore it.\n\t\t\t// log.Println(\"Sending automatic hello from root ServeHTTP handle to web page!\")\n\t\t\t// Write the Message as Text message to the web socket connection\n\t\t\t// which will show up in the chat box\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(\"Sending automatic hello from root ServeHTTP handle to web page!\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55094133/how-to-send-some-event-update-from-http-handler-to-a-websocket-handler",
    "body": "GoldenBook:mychat02 satinder$ ./chat\n2019/03/31 03:44:27 Starting web server on :8080\nlocalhost:8080\n2019/03/31 03:44:31 connecting to ws://localhost:8080/room\nNew client joined\nNew client joined\n2019/03/31 03:44:33 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:36 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:43 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:45 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:45 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\nMessage received: HELLO\n-- sent to client\n-- sent to client\n2019/03/31 03:44:48 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:48 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:49 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n2019/03/31 03:44:52 Sending automatic hello from root ServeHTTP handle to web page!\nMessage received: Sending automatic hello from root ServeHTTP handle to web page!\n-- sent to client\n-- sent to client\n^C"
  },
  {
    "url": "https://stackoverflow.com/questions/53901670/how-to-make-git2go-tree-walk-non-recursive-and-show-folders-and-begin-at-targe",
    "body": "func echoFilesCollectDirs(repo *git.Repository, tree *git.Tree, ch chan *git.Tree) {\n\ttree.Walk(func(td string, te *git.TreeEntry) int {\n\t\tfmt.Println(te.Name)\n\t\tif te.Type == git.ObjectTree {\n\t\t\tt, _ := repo.LookupTree(te.Id)\n\t\t\tgo func() { ch <- t }() // send tree into channel to process it later\n\t\t\treturn 1\n\t\t}\n\t\treturn 0\n\t})\n}\nfunc main() {\n\tgR, tree := getRepoAndTree() // returns (*git.Repository, *git.Tree)\n\tch := make(chan *git.Tree)\n\techoFilesCollectDirs(gR, tree, ch)\n\t// process next directory in a channel\n\t// t := <-ch\n\t// echoFilesCollectDirs(gR, t, ch)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46700322/golang-ssh-login-with-pubkey-failed",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/appleboy/easyssh-proxy\"\n)\nfunc main() {\n\t// Create MakeConfig instance with remote username, server address and path to private key.\n\tssh := &easyssh.MakeConfig{\n\t\tUser:   \"appleboy\",\n\t\tServer: \"example.com\",\n\t\t// Optional key or Password without either we try to contact your agent SOCKET\n\t\t//Password: \"password\",\n\t\t// Paste your source content of private key\n\t\t// Key: `-----BEGIN RSA PRIVATE KEY-----\n\t\t// MIIEpAIBAAKCAQEA4e2D/qPN08pzTac+a8ZmlP1ziJOXk45CynMPtva0rtK/RB26\n\t\t// 7XC9wlRna4b3Ln8ew3q1ZcBjXwD4ppbTlmwAfQIaZTGJUgQbdsO9YA==\n\t\t// -----END RSA PRIVATE KEY-----\n\t\t// `,\n\t\tKeyPath: \"/Users/username/.ssh/id_rsa\",\n\t\tPort:    \"22\",\n\t\tTimeout: 60 * time.Second,\n\t}\n\t// Call Run method with command you want to run on remote server.\n\tstdout, stderr, done, err := ssh.Run(\"ls -al\", 60*time.Second)\n\t// Handle errors\n\tif err != nil {\n\t\tpanic(\"Can't run remote command: \" + err.Error())\n\t} else {\n\t\tfmt.Println(\"don is :\", done, \"stdout is :\", stdout, \";   stderr is :\", stderr)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/43900028/issue-connecting-to-remote-aerospike-server-via-go-code-running-locally",
    "body": "package main\nimport (\n\t\"log\"\n\t\"time\"\n\tas \"github.com/aerospike/aerospike-client-go\"\n\tasl \"github.com/aerospike/aerospike-client-go/logger\"\n)\nfunc main() {\n\treadPocDatafromAeroSpike()\n}\nfunc readPocDatafromAeroSpike() {\n\tlog.Println(\"Connecting to aero spike\")\n\tasl.Logger.SetLevel(asl.DEBUG)\n\tcp := as.NewClientPolicy()\n\tcp.Timeout = time.Duration(10 * time.Second)\n\tclient, e := as.NewClientWithPolicy(cp, \"publicIPOfInstance\", 3000)\n\tif e != nil {\n\t\tlog.Fatal(\"Exception connecting aero spike cluster \", e.Error())\n\t}\n\tlog.Println(\"Connected to Aero Spike now \", client.IsConnected())\n\tlog.Println(\"done\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/43900028/issue-connecting-to-remote-aerospike-server-via-go-code-running-locally",
    "body": " 09:53:58 Connecting to aero spike\n 09:53:58 No connections available; seeding...\n 09:53:58 Seeding the cluster. Seeds count: 1\n 09:53:58 Node Validator has 1 nodes and they are: [\"publicip\":3000]\n 09:53:59 Host `\"publicip\":3000` seems to be a load balancer. It is going to be replace by `privateip:3000`\n 09:54:04 Connection to address `\"privateip\":3000` failed to establish with error: dial tcp \"privateip\":3000: i/o timeout\n 09:54:08 Failed to connect to hosts:\n 09:54:08 Failed to connect to host(s): [\"publicip\":3000]; error: Connecting to the cluster timed out.\n 09:54:08 Exception connecting aero spike cluster Connecting to the cluster timed out."
  },
  {
    "url": "https://stackoverflow.com/questions/29879036/go-websocket-server-use-of-closed-network-connection",
    "body": "func (s Server) serveWebSocket(w http.ResponseWriter, req *http.Request) {\n\trwc, buf, err := w.(http.Hijacker).Hijack()\n\tif err != nil {\n\t\tpanic(\"Hijack failed: \" + err.Error())\n\t}\n\t// The server should abort the WebSocket connection if it finds\n\t// the client did not send a handshake that matches with protocol\n\t// specification.\n\tdefer rwc.Close() // <- here! It's executed when the s.Handler(conn) exites\n\tconn, err := newServerConn(rwc, buf, req, &s.Config, s.Handshake)\n\tif err != nil {\n\t\treturn\n\t}\n\tif conn == nil {\n\t\tpanic(\"unexpected nil conn\")\n\t}\n\ts.Handler(conn)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79456264/how-to-make-a-field-in-a-generic-struct-optional-in-json-unmarshal",
    "body": "func TestName(t *testing.T) {\n\tresp := HttpResp[*any]{}\n\terr := json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\",\"data\": \"ok\"}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp)\n\tfmt.Println(resp.Data != nil)\n\tfmt.Println(*resp.Data)\n\tfmt.Println((*resp.Data).(string))\n\tfmt.Println(`----`)\n\tresp = HttpResp[*any]{}\n\terr = json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\",\"data\": 1}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp)\n\tfmt.Println(resp.Data != nil)\n\tfmt.Println(*resp.Data)\n\tfmt.Println((*resp.Data).(float64))\n\tfmt.Println(`----`)\n\tresp = HttpResp[*any]{}\n\terr = json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\"}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp)\n\tfmt.Println(resp.Data == nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79456264/how-to-make-a-field-in-a-generic-struct-optional-in-json-unmarshal",
    "body": "type StringFloatStruct struct {\n\tVal any\n}\nfunc (b *StringFloatStruct) UnmarshalJSON(data []byte) error {\n\tswitch sdata := strings.TrimSpace(string(data)); {\n\tcase sdata == \"null\":\n\t\treturn nil\n\tdefault: // for example\n\t\tfdata, err := strconv.ParseFloat(sdata, 64)\n\t\tif err == nil {\n\t\t\tb.Val = fdata\n\t\t\treturn nil\n\t\t}\n\t\tb.Val = strings.Trim(sdata, \"\\\"\")\n\t\treturn nil\n\t}\n}\nfunc (b *StringFloatStruct) IsNil() bool {\n\treturn b.Val == nil\n}\nfunc (b *StringFloatStruct) ValString() (string, bool) {\n\tv, ok := b.Val.(string)\n\treturn v, ok\n}\nfunc (b *StringFloatStruct) ValFloat64() (float64, bool) {\n\tv, ok := b.Val.(float64)\n\treturn v, ok\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79456264/how-to-make-a-field-in-a-generic-struct-optional-in-json-unmarshal",
    "body": "func TestV2(t *testing.T) {\n\tresp := HttpResp[StringFloatStruct]{}\n\terr := json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\",\"data\": \"ok\"}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp)\n\tfmt.Println(resp.Data.IsNil())\n\tfmt.Println(resp.Data.ValString())\n\tfmt.Println(resp.Data.ValFloat64())\n\tfmt.Println(`----`)\n\tresp = HttpResp[StringFloatStruct]{}\n\terr = json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\",\"data\": 1}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp.Data.IsNil())\n\tfmt.Println(resp.Data.ValString())\n\tfmt.Println(resp.Data.ValFloat64())\n\tfmt.Println(`----`)\n\tresp = HttpResp[StringFloatStruct]{}\n\terr = json.Unmarshal([]byte(`{\"code\":200,\"msg\":\"ok\"}`), &resp)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tfmt.Println(resp.Data.IsNil())\n\tfmt.Println(resp.Data.ValString())\n\tfmt.Println(resp.Data.ValFloat64())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79434438/i-need-to-run-commands-with-elevated-privileges-on-my-backend",
    "body": "const { exec, spawn } = require('child_process');\nconst os = require('os');\n/**\n * Manages application elevation and admin privileges across different platforms\n */\nclass AdminPrivilegesManager {\n    /**\n     * Checks and ensures the application runs with admin privileges\n     * @returns {Promise<void>}\n     */\n    static async ensureAdminPrivileges() {\n        const isAdmin =  this.checkPrivilegesAndRelaunch();\n        console.log('isAdmin',isAdmin);\n    }\n    static async checkPrivilegesAndRelaunch() {\n        if (os.platform() === 'win32') {\n            await exec('net session', (err) => {\n                if (err) {\n                    console.log(\"Not running as Administrator. Relaunching...\");\n                    this.relaunchAsAdmin();\n                } else {\n                    console.log(\"Running as Administrator.\");\n                }\n            });\n        } else {\n            if (process.getuid && process.getuid() !== 0) {\n                console.log(\"Not running as root. Relaunching...\");\n                this.relaunchAsAdmin();\n            } else {\n                console.log(\"Running as root.\");\n            }\n        }\n        return true;\n    }\n    static relaunchAsAdmin() {\n        const platform = os.platform();\n        const appPath = process.argv[0]; // Path to Electron executable\n        const scriptPath = process.argv[1]; // Path to main.js (or entry point)\n        const workingDir = process.cwd(); // Ensure correct working directory\n        const args = process.argv.slice(2).join(' '); // Preserve additional arguments\n        if (platform === 'win32') {\n            const command = `powershell -Command \"Start-Process '${appPath}' -ArgumentList '${scriptPath} ${args}' -WorkingDirectory '${workingDir}' -Verb RunAs\"`;\n            exec(command, (err) => {\n                if (err) {\n                    console.error(\"Failed to elevate to administrator:\", err);\n                } else {\n                    console.log(\"Restarting with administrator privileges...\");\n                    process.exit(0);\n                }\n            });\n        } else {\n            const elevatedProcess = spawn('sudo', [appPath, scriptPath, ...process.argv.slice(2)], {\n                stdio: 'inherit',\n                detached: true,\n                cwd: workingDir, // Set correct working directory\n            });\n            elevatedProcess.on('error', (err) => {\n                console.error(\"Failed to elevate to root:\", err);\n            });\n            elevatedProcess.on('spawn', () => {\n                console.log(\"Restarting with root privileges...\");\n                process.exit(0);\n            });\n        }\n    }\n}\nmodule.exports = AdminPrivilegesManager;"
  },
  {
    "url": "https://stackoverflow.com/questions/79231263/go-idiomatic-way-to-verify-that-a-directory-is-not-a-git-submodule",
    "body": "path=$PWD bash <<\\EOD\nIFS=$'\\n'\nnope() { echo \"$@\"; exit; }\nif ! toplevel=`git -C $path rev-parse --show-toplevel 2>&-`\nthen nope \"$path is not in any repo work tree I can find\"; fi\nif ! up=`git -C $toplevel/.. rev-parse --show-toplevel 2>&-`\nthen nope \"$path does not appear to be in a work tree used as a submodule\"; fi\nif ! index=`git -C $up rev-parse :${toplevel#$up/}`\nthen nope \"$path is in a nested work tree but its containing checkout is not using it\"; fi\nif [[ $(git -C $up ls-files -s ${toplevel#$up/}) != 160000* ]]\nthen nope $path is not listed as a checked-out submodule in $up; fi\necho $up is tracking ${toplevel#$up/} as a submodule.\nEOD"
  },
  {
    "url": "https://stackoverflow.com/questions/78855855/how-do-i-programmatically-validate-a-go-structure-that-has-kubebuilder-validatio",
    "body": "package controllers\nimport (\n    \"testing\"\n    \"github.com/stretchr/testify/assert\"\n    metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\nfunc TestToySpecValidation(t *testing.T) {\n    // Test for Name field exceeding MaxLength\n    toy := &ToySpec{\n        Name: \"ThisNameIsTooLongToPassValidation\",\n    }\n    err := toy.Validate()\n    assert.Error(t, err, \"Expected validation error for Name exceeding MaxLength\")\n    // Test for Name field below MinLength\n    toy.Name = \"\"\n    err = toy.Validate()\n    assert.Error(t, err, \"Expected validation error for Name below MinLength\")\n    // Test case for valid Name field\n    toy.Name = \"ValidName\"\n    err = toy.Validate()\n    assert.NoError(t, err, \"Expected no validation error for valid Name\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78625433/why-does-gos-escape-analysis-move-a-variable-to-the-heap-even-when-inlining-is",
    "body": "000000000045d120 <main.main>:\n  45d120:       c3                      retq\n  45d121:       cc                      int3\n  45d122:       cc                      int3\n  45d123:       cc                      int3\n  45d124:       cc                      int3\n  45d125:       cc                      int3\n  45d126:       cc                      int3\n  45d127:       cc                      int3\n  45d128:       cc                      int3\n  45d129:       cc                      int3\n  45d12a:       cc                      int3\n  45d12b:       cc                      int3\n  45d12c:       cc                      int3\n  45d12d:       cc                      int3\n  45d12e:       cc                      int3\n  45d12f:       cc                      int3"
  },
  {
    "url": "https://stackoverflow.com/questions/78625433/why-does-gos-escape-analysis-move-a-variable-to-the-heap-even-when-inlining-is",
    "body": "000000000045d120 <main.main>:\n  45d120:       49 3b 66 10             cmp    0x10(%r14),%rsp\n  45d124:       76 0b                   jbe    45d131 <main.main+0x11>\n  45d126:       55                      push   %rbp\n  45d127:       48 89 e5                mov    %rsp,%rbp\n  45d12a:       e8 11 00 00 00          callq  45d140 <main.f>\n  45d12f:       5d                      pop    %rbp\n  45d130:       c3                      retq\n  45d131:       e8 ca cd ff ff          callq  459f00 <runtime.morestack_noctxt.abi0>\n  45d136:       eb e8                   jmp    45d120 <main.main>\n  45d138:       cc                      int3\n  45d139:       cc                      int3\n  45d13a:       cc                      int3\n  45d13b:       cc                      int3\n  45d13c:       cc                      int3\n  45d13d:       cc                      int3\n  45d13e:       cc                      int3\n  45d13f:       cc                      int3\n000000000045d140 <main.f>:\n  45d140:       49 3b 66 10             cmp    0x10(%r14),%rsp\n  45d144:       76 21                   jbe    45d167 <main.f+0x27>\n  45d146:       55                      push   %rbp\n  45d147:       48 89 e5                mov    %rsp,%rbp\n  45d14a:       48 83 ec 10             sub    $0x10,%rsp\n  45d14e:       48 8d 05 2b 5d 00 00    lea    0x5d2b(%rip),%rax        # 462e80 <type:*+0x4e80>\n  45d155:       e8 06 ee fa ff          callq  40bf60 <runtime.newobject>\n  45d15a:       48 c7 00 04 00 00 00    movq   $0x4,(%rax)\n  45d161:       48 83 c4 10             add    $0x10,%rsp\n  45d165:       5d                      pop    %rbp\n  45d166:       c3                      retq\n  45d167:       e8 94 cd ff ff          callq  459f00 <runtime.morestack_noctxt.abi0>\n  45d16c:       eb d2                   jmp    45d140 <main.f>"
  },
  {
    "url": "https://stackoverflow.com/questions/78625433/why-does-gos-escape-analysis-move-a-variable-to-the-heap-even-when-inlining-is",
    "body": "./main.go:7:6: can inline f with cost 15 as: func() *int { y := 2; res := y * 2; return &res }\n./main.go:3:6: can inline main with cost 19 as: func() { _ = f() }\n./main.go:4:10: inlining call to f\n./main.go:4:10: Before inlining:\n.   CALLFUNC PTR-*int tc(1) # main.go:4:10\n.   CALLFUNC-Fun\n.   .   NAME-main.f Class:PFUNC Offset:0 Used FUNC-func() *int tc(1) # main.go:7:6\n./main.go:4:10: After inlining\n.   INLCALL-init\n.   .   AS2 Def tc(1) # main.go:4:10\n.   .   INLMARK # +main.go:4:10\n.   INLCALL PTR-*int tc(1) # main.go:4:10\n.   INLCALL-Body\n.   .   AS-init\n.   .   .   DCL # main.go:4:10 main.go:8:5\n.   .   .   .   NAME-main.y Class:PAUTO Offset:0 InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:8:5\n.   .   AS Def tc(1) # main.go:4:10 main.go:8:7\n.   .   .   NAME-main.y Class:PAUTO Offset:0 InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:8:5\n.   .   .   LITERAL-2 int tc(1) # main.go:4:10 main.go:8:10\n.   .   AS-init\n.   .   .   DCL # main.go:4:10 main.go:9:5\n.   .   .   .   NAME-main.res Class:PAUTO Offset:0 Addrtaken InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:9:5\n.   .   AS Def tc(1) # main.go:4:10 main.go:9:9\n.   .   .   NAME-main.res Class:PAUTO Offset:0 Addrtaken InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:9:5\n.   .   .   MUL int tc(1) # main.go:4:10 main.go:9:14\n.   .   .   .   NAME-main.y Class:PAUTO Offset:0 InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:8:5\n.   .   .   .   LITERAL-2 int tc(1) # main.go:4:10 main.go:9:16\n.   .   BLOCK tc(1) # main.go:4:10\n.   .   BLOCK-List\n.   .   .   DCL tc(1) # main.go:4:10\n.   .   .   .   NAME-main.~r0 Class:PAUTO Offset:0 InlFormal OnStack PTR-*int tc(1) # main.go:4:10 main.go:7:10\n.   .   .   AS2 tc(1) # main.go:4:10\n.   .   .   AS2-Lhs\n.   .   .   .   NAME-main.~r0 Class:PAUTO Offset:0 InlFormal OnStack PTR-*int tc(1) # main.go:4:10 main.go:7:10\n.   .   .   AS2-Rhs\n.   .   .   .   ADDR PTR-*int tc(1) # main.go:4:10 main.go:10:12\n.   .   .   .   .   NAME-main.res Class:PAUTO Offset:0 Addrtaken InlLocal OnStack Used int tc(1) # main.go:4:10 main.go:9:5\n.   .   .   GOTO main..i0 tc(1) # main.go:4:10\n.   .   LABEL main..i0 # main.go:4:10\n.   INLCALL-ReturnVars\n.   .   NAME-main.~r0 Class:PAUTO Offset:0 InlFormal OnStack PTR-*int tc(1) # main.go:4:10 main.go:7:10\n./main.go:4:7:[1] main stmt: _ = ~r0\n./main.go:4:10:[1] main stmt:  :=\n./main.go:4:10:[1] main stmt: <node inlmark>\n./main.go:4:10:[1] main stmt: y := 2\n./main.go:4:10:[1] main stmt: var y int\n./main.go:4:10:[1] main stmt: res := y * 2\n./main.go:4:10:[1] main stmt: var res int\n./main.go:4:10:[1] main stmt: var ~r0 *int; ~r0 = &res; goto .i0\n./main.go:4:10:[1] main stmt: var ~r0 *int\n./main.go:4:10:[1] main stmt: ~r0 = &res\n./main.go:4:10:[1] main stmt: goto .i0\n./main.go:4:10:[1] main stmt: .i0:\n./main.go:4:10:.i0:  non-looping label\n./main.go:8:7:[1] f stmt: y := 2\n./main.go:8:5:[1] f stmt: var y int\n./main.go:9:9:[1] f stmt: res := y * 2\n./main.go:9:5:[1] f stmt: var res int\n./main.go:10:5:[1] f stmt: return &res\n./main.go:9:5: res escapes to heap:\n./main.go:9:5:   flow: ~r0 = &res:\n./main.go:9:5:     from &res (address-of) at ./main.go:10:12\n./main.go:9:5:     from return &res (return) at ./main.go:10:5\n./main.go:9:5: moved to heap: res"
  },
  {
    "url": "https://stackoverflow.com/questions/66657266/how-to-actively-logoff-a-user-with-go-guardian-jwt-strategy",
    "body": "import (\n    \"fmt\"\n    \"net/http\"\n    \"strings\"\n    \"github.com/shaj13/go-guardian/auth\"\n\t\"github.com/shaj13/go-guardian/auth/strategies/bearer\"\n)\nfunc RevokeToken(w http.ResponseWriter, r *http.Request) {\n\treqToken := r.Header.Get(\"Authorization\")\n\tsplitToken := strings.Split(reqToken, \"Bearer \")\n\treqToken = splitToken[1]\n\ttokenStrategy := authenticator.Strategy(bearer.CachedStrategyKey)\n\tauth.Revoke(tokenStrategy, reqToken, r)\n\tbody := fmt.Sprintf(\"revoked token: %s \\n\", reqToken)\n\tw.Write([]byte(body))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/42867659/build-go-with-gccgo-fork-exec-no-such-file-or-directory",
    "body": "$ which gccgo\n/usr/bin/gccgo\ngo build --compiler gccgo -x\nWORK=/tmp/go-build848309745\nmkdir -p $WORK/_/home/sam/sandbox/go/src/hello/_obj/\nmkdir -p $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/\ncd /home/sam/sandbox/go/src/hello\n/usr/bin/gccgo -I $WORK -c -g -m64 -fgo-relative-import-path=_/home/sam/sandbox/go/src/hello -o $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o ./helloworld.go\nar rc $WORK/_/home/sam/sandbox/go/src/libhello.a $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o\ncd .\n/usr/bin/gccgo -o $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/a.out $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o -Wl,-( -m64 -Wl,--whole-archive -Wl,--no-whole-archive -Wl,-)\ncp $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/a.out hello"
  },
  {
    "url": "https://stackoverflow.com/questions/42867659/build-go-with-gccgo-fork-exec-no-such-file-or-directory",
    "body": "$ go build -compiler gccgo -x --gccgoflags \"-static\"\nWORK=/tmp/go-build815863722\nmkdir -p $WORK/_/home/sam/sandbox/go/src/hello/_obj/\nmkdir -p $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/\ncd /home/sam/sandbox/go/src/hello\n/usr/bin/gccgo -I $WORK -c -g -m64 -fgo-relative-import-path=_/home/sam/sandbox/go/src/hello -o $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o -static ./helloworld.go\nar rc $WORK/_/home/sam/sandbox/go/src/libhello.a $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o\ncd .\n/usr/bin/gccgo -o $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/a.out $WORK/_/home/sam/sandbox/go/src/hello/_obj/_go_.o -Wl,-( -m64 -Wl,--whole-archive -Wl,--no-whole-archive -Wl,-) -static\ncp $WORK/_/home/sam/sandbox/go/src/hello/_obj/exe/a.out hello"
  },
  {
    "url": "https://stackoverflow.com/questions/73064915/logging-to-syslog-file-with-zerolog-golang",
    "body": "package main\nimport (\n\t\"log/syslog\"\n\t\"github.com/RackSec/srslog\"\n\t\"github.com/rs/zerolog\"\n)\nfunc main() {\n\t// remote syslog over unencrypted tcp\n\tvar zsyslog zerolog.SyslogWriter\n\tzsyslog, err := syslog.Dial(\"tcp\", \"192.168.0.44:514\", syslog.LOG_KERN|syslog.LOG_EMERG|syslog.LOG_ERR|syslog.LOG_INFO|syslog.LOG_CRIT|syslog.LOG_WARNING|syslog.LOG_NOTICE|syslog.LOG_DEBUG, \"stackOverflow\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tzsyslog.Debug(\"Debug message 1\")\n\tzog := zerolog.New(zsyslog).With().Caller().Logger()\n\tzog.Debug().Msg(\"Debug message 2\")\n\t//local syslog of unix sockets\n\tzsyslog2, err := syslog.New(syslog.LOG_KERN|syslog.LOG_EMERG|syslog.LOG_ERR|syslog.LOG_INFO|syslog.LOG_CRIT|syslog.LOG_WARNING|syslog.LOG_NOTICE|syslog.LOG_DEBUG, \"stackOverflow\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tzsyslog2.Debug(\"Debug message 3\")\n\tzog2 := zerolog.New(zsyslog2).With().Caller().Logger()\n\tzog2.Debug().Msg(\"Debug message 4\")\n\t// remote syslog over tcp+tls (encrypted)\n\tuseTLS := false\n\tif useTLS {\n\t\tcertPath := \"/path/to/cert.pem\"\n\t\tzsyslog3, err := srslog.DialWithTLSCertPath(\"tcp+tls\", \"192.168.0.44:514\", srslog.LOG_KERN|srslog.LOG_EMERG|srslog.LOG_ERR|srslog.LOG_INFO|srslog.LOG_CRIT|srslog.LOG_WARNING|srslog.LOG_NOTICE|srslog.LOG_DEBUG, \"stackOverflow\", certPath)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tzsyslog3.Debug(\"Debug message 5\")\n\t\tzog3 := zerolog.New(zsyslog3).With().Caller().Logger()\n\t\tzog3.Debug().Msg(\"Debug message 6\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71732895/http-file-download-progress-bar-in-go",
    "body": "func download(destinationPath, downloadUrl string) error {\n    tempDestinationPath := destinationPath + \".tmp\"\n    req, _ := http.NewRequest(\"GET\", downloadUrl, nil)\n    resp, _ := http.DefaultClient.Do(req)\n    defer resp.Body.Close()\n    f, _ := os.OpenFile(tempDestinationPath, os.O_CREATE|os.O_WRONLY, 0644)\n\n    bar := progressbar.DefaultBytes(\n       resp.ContentLength,\n       \"downloading\",\n    )\n    io.Copy(io.MultiWriter(f, bar), resp.Body)\n    os.Rename(tempDestinationPath, destinationPath)\n    return nil"
  },
  {
    "url": "https://stackoverflow.com/questions/40443881/how-to-write-log-into-log-files-in-golang",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"os\"\n)\nconst (\n\tlogNone     = iota\n\tlogInfo\n\tlogWarning\n\tlogError\n\tlogVerbose\n\tlogDebug\n)\ntype myFileLogger struct {\n\tlogger       *log.Logger\n\tlogFile      *os.File\n\tlogLevel     int\n}\nfunc newFileLogger() *myFileLogger {\n\treturn &myFileLogger{\n\t\tlogger:   nil,\n\t\tlogFile:  nil,\n\t\tlogLevel: logNone,\n\t}\n}\nfunc (myLogger *myFileLogger) startLog(level int, file string) error {\n\tf, err := os.OpenFile(file, os.O_WRONLY|os.O_CREATE|os.O_APPEND, os.ModePerm)\n\tif err != nil {\n\t\treturn err\n\t}\n\tmyLogger.logger = log.New(f, \"\", 0)\n\tmyLogger.logLevel = level\n\tmyLogger.logFile = f\n\treturn nil\n}\nfunc (myLogger *myFileLogger) stopLog() error {\n\tif myLogger.logFile != nil {\n\t\treturn myLogger.logFile.Close()\n\t}\n\treturn nil\n}\n// You can add a log of auxiliary functions here to make the log more easier\nfunc (myLogger *myFileLogger) log(level int, msg string) error {\n\tif myLogger.logger == nil {\n\t\treturn errors.New(\"myFileLogger is not initialized correctly\")\n\t}\n\tif level >= myLogger.logLevel {\n\t\tmyLogger.logger.Print(msg) // maybe you want to include the loglevel here, modify it as you want\n\t}\n\treturn nil\n}\nfunc main() {\n\tlogger := newFileLogger()\n\tif err := logger.startLog(logError, \"myLogFile.log\"); err != nil {\n\t\tpanic(err.Error())\n\t}\n\tdefer func() {\n\t\tlogger.stopLog()\n\t}()\n\tlogger.log(logInfo, \"Info level log msg\\n\") // this will be ignored\n\tlogger.log(logError, \"Error: error message\\n\") // this should included in the log file\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55347167/gin-contrib-cors-returns-404",
    "body": "engine := gin.New()\nengine.Use(func(c *gin.Context) {\n    c.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\tc.Writer.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\")\n\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS, GET, PUT, DELETE\")\n    if c.Request.Method == \"OPTIONS\" {\n        c.AbortWithStatus(204)\n        return\n    }\n\tc.Next()\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/61924854/golang-read-json-from-s3-into-struct-in-memory",
    "body": "requestInput := &s3.GetObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(key),\n\t}\n\tresult, err := s3Client.GetObject(requestInput)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tdefer result.Body.Close()\n\tbody1, err := ioutil.ReadAll(result.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tbodyString1 := fmt.Sprintf(\"%s\", body1)\n\tvar s3data StockInfo\n\tdecoder := json.NewDecoder(strings.NewReader(bodyString1))\n\terr = decoder.Decode(&s3data)\n\tif err != nil {\n\t\tfmt.Println(\"twas an error\")\n\t}\n\tfmt.Println(s3data)"
  },
  {
    "url": "https://stackoverflow.com/questions/68142086/goroutine-leak-in-example-of-book-the-go-programming-language",
    "body": "func mirroredQuery() string {\n\tresponses := make(chan string, 2)\n\tgo func() {\n\t\tresponses <- request(\"asia.gopl.io\")\n\t\tlog.Printf(\"Finished goroutine asia.gopl.io\\n\")\n\t}()\n\tgo func() {\n\t\tresponses <- request(\"europe.gopl.io\")\n\t\tlog.Printf(\"Finished goroutine europe.gopl.io\\n\")\n\t}()\n\tgo func() {\n\t\tresponses <- request(\"americas.gopl.io\")\n\t\tlog.Printf(\"Finished goroutine americas.gopl.io\\n\")\n\t}()\n\treturn <-responses // return the quickest response\n}\nfunc request(hostname string) (response string) {\n\tduration := time.Duration(rand.Int63n(5000)) * time.Millisecond\n\ttime.Sleep(duration)\n\treturn hostname\n}\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tresult := mirroredQuery()\n\tlog.Printf(\"Fastest result for %s\\n\", result)\n\ttime.Sleep(6*time.Second)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68142086/goroutine-leak-in-example-of-book-the-go-programming-language",
    "body": "func mirroredQuery() string {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tresponses := make(chan string)\n\tf := func(hostname string) {\n\t\tresponse, err := request(ctx, hostname)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Finished %s with error %s\\n\", hostname, err)\n\t\t\treturn\n\t\t}\n\t\tresponses <- response\n\t\tlog.Printf(\"Finished %s\\n\", hostname)\n\t}\n\tgo f(\"asia.gopl.io\")\n\tgo f(\"europe.gopl.io\")\n\tgo f(\"americas.gopl.io\")\n\treturn <-responses // return the quickest response\n}\nfunc request(ctx context.Context, hostname string) (string, error) {\n\tduration := time.Duration(rand.Int63n(5000)) * time.Millisecond\n\tafter := time.After(duration)\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn \"\", ctx.Err()\n\tcase <-after:\n\t\treturn \"response for \"+hostname, nil\n\t}\n}\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tresult := mirroredQuery()\n\tlog.Printf(\"Fastest result for %s\\n\", result)\n\ttime.Sleep(6 * time.Second)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/42988417/crud-operations-on-redshift-databases-using-golang",
    "body": "import (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/lib/pq\"\n)\nfunc MakeRedshfitConnection(username, password, host, port, dbName string) (*sql.DB, error) {\n\turl := fmt.Sprintf(\"sslmode=require user=%v password=%v host=%v port=%v dbname=%v\",\n\t\tusername,\n\t\tpassword,\n\t\thost,\n\t\tport,\n\t\tdbName)\n\tvar err error\n\tvar db *sql.DB\n\tif db, err = sql.Open(\"postgres\", url); err != nil {\n\t\treturn nil, fmt.Errorf(\"redshift conn error : (%v)\", err)\n\t}\n\tif err = db.Ping(); err != nil {\n\t\treturn nil, fmt.Errorf(\"redshift ping error : (%v)\", err)\n\t}\n\treturn db, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68484861/lambda-multipart-file-upload-in-go",
    "body": "import (\n    \"context\"\n    \"encoding/json\"\n    \"io\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/grokify/go-awslambda\"\n)\ntype customStruct struct {\n\tContent       string\n\tFileName      string\n\tFileExtension string\n}\nfunc handleRequest(ctx context.Context, req events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\tres := events.APIGatewayProxyResponse{}\n\tr, err := awslambda.NewReaderMultipart(req)\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tpart, err := r.NextPart()\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tcontent, err := io.ReadAll(part)\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tcustom := customStruct{\n\t\tContent:       string(content),\n\t\tFileName:      part.FileName(),\n\t\tFileExtension: filepath.Ext(part.FileName())}\n\tcustomBytes, err := json.Marshal(custom)\n\tif err != nil {\n\t\treturn res, err\n\t}\n\tres = events.APIGatewayProxyResponse{\n\t\tStatusCode: 200,\n\t\tHeaders: map[string]string{\n\t\t\t\"Content-Type\": \"application/json\"},\n\t\tBody: string(customBytes)}\n\treturn res, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/53866821/properly-batch-items-from-input-channel",
    "body": "func printItems(items []int) {\n\tfmt.Println(items)\n\treturn\n}\nfunc main() {\n\n\titems := []int {1,2,3,4,5,6,7,8}\n\tch := make(chan int, 5)\n\tgo func(ch <-chan int) {\n\t\ttimer := time.NewTimer(1 * time.Second)\n\t\ttemp := make([]int, 0, 5)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase i := <- ch:\n\t\t\t\ttimer.Reset(1 * time.Second)\n\t\t\t\ttemp = append(temp, i)\n\t\t\t\tif len(temp) == 5 {\n\t\t\t\t\tprintItems(temp)\n\t\t\t\t\ttemp = []int {}\n\t\t\t\t}\n\t\t\tcase <- timer.C:\n\t\t\t\tprintItems(temp)\n\t\t\t\ttemp = []int {}\n\t\t\t}\n\t\t}\n\t}(ch)\n\n\tfor k, i := range items {\n\t\tfmt.Println(\"Send \", i)\n\t\tch <- i\n\t\tif k == 7 {\n\t\t\ttime.Sleep(5 * time.Second)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69241548/get-the-size-of-a-folder-in-amazon-s3-using-go-sdk-2",
    "body": "package main\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nvar (\n\tbucketName      string\n\tobjectPrefix    string\n\tobjectDelimiter string\n\tmaxKeys         int\n)\nfunc init() {\n\tflag.StringVar(&bucketName, \"bucket\", \"\", \"The `name` of the S3 bucket to list objects from.\")\n\tflag.StringVar(&objectPrefix, \"prefix\", \"\", \"The optional `object prefix` of the S3 Object keys to list.\")\n\tflag.StringVar(&objectDelimiter, \"delimiter\", \"\",\n\t\t\"The optional `object key delimiter` used by S3 List objects to group object keys.\")\n\tflag.IntVar(&maxKeys, \"max-keys\", 0,\n\t\t\"The maximum number of `keys per page` to retrieve at once.\")\n}\n// Lists all objects in a bucket using pagination\nfunc main() {\n\tflag.Parse()\n\tif len(bucketName) == 0 {\n\t\tflag.PrintDefaults()\n\t\tlog.Fatalf(\"invalid parameters, bucket name required\")\n\t}\n\t// Load the SDK's configuration from environment and shared config, and\n\t// create the client with this.\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to load SDK configuration, %v\", err)\n\t}\n\tclient := s3.NewFromConfig(cfg)\n\t// Set the parameters based on the CLI flag inputs.\n\tparams := &s3.ListObjectsV2Input{\n\t\tBucket: &bucketName,\n\t}\n\tif len(objectPrefix) != 0 {\n\t\tparams.Prefix = &objectPrefix\n\t}\n\tif len(objectDelimiter) != 0 {\n\t\tparams.Delimiter = &objectDelimiter\n\t}\n\t// Create the Paginator for the ListObjectsV2 operation.\n\tp := s3.NewListObjectsV2Paginator(client, params, func(o *s3.ListObjectsV2PaginatorOptions) {\n\t\tif v := int32(maxKeys); v != 0 {\n\t\t\to.Limit = v\n\t\t}\n\t})\n\t// Iterate through the S3 object pages, printing each object returned.\n\tvar i int\n    var total int64\n\tlog.Println(\"Objects:\")\n\tfor p.HasMorePages() {\n\t\ti++\n\t\t// Next Page takes a new context for each page retrieval. This is where\n\t\t// you could add timeouts or deadlines.\n\t\tpage, err := p.NextPage(context.TODO())\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to get page %v, %v\", i, err)\n\t\t}\n\t\t// Log the objects found\n\t\tfor _, obj := range page.Contents {\n\t\t\t// fmt.Println(\"Object:\", *obj.Key)\n\t\t\ttotal += obj.Size\n\t\t}\n\t}\n    fmt.Println(\"total\", total)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58437690/golang-iterate-a-nested-map-and-change-keys-to-title-case",
    "body": "func main() {\n    a := make(map[string]interface{})\n    a[\"start\"] = map[string]interface{}{\n        \"hello\": 2,\n        \"world\": 3,\n        \"here\": map[string]interface{}{\n            \"baam\": 123,\n            \"boom\": \"dsd\",\n        },\n    }\n    a=printMap(a)\n    fmt.Println(a)\n}\nfunc printMap(a map[string]interface{}) map[string]interface{} {\n    newMap:=map[string]interface{}{}\n    for k, v := range a {\n        switch v.(type) {\n        case map[string]interface{}:\n            newMap[k]=printMap(v.(map[string]interface{}))\n        default:\n            title := strings.Title(k)\n            newMap[title] = a[k]\n        }\n    }\n    return newMap\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54659979/how-to-pass-vars-to-chi-router-in-golang",
    "body": "func main() {\n......\n  r := chi.NewRouter()\n  // keep db connection alive.\n  db, err := sql.Open(\"mysql\", dBSource)\n  ur := NewUserResource(store, db)\n  r.Mount(\"/users\", ur.Routes())\n}\ntype usersResource struct{\n  store *mysqlstore.MySQLStore\n// and more...\n  db *YourDB\n}\n// new function to pass global var\nfunc newUserResource(store *mysqlstore.MySQLStore, db *YourDB) *usersResource{\n  return &usersResource {\n    store: store,\n    db: db,\n  }\n}\nfunc (rs *usersResource) List(w http.ResponseWriter, r *http.Request) {\n    // don't use global var\n    session, err := ur.store.Get(r, \"session-data\")\n    ur.db.GetWhatever()\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54353860/publish-message-to-sns-with-aws-go-sdk",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"github.com/aws/aws-sdk-go-v2/aws/external\"\n\t\"github.com/aws/aws-sdk-go-v2/service/sns\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"log\"\n)\ntype Message struct {\n\tDefault string `json:\"default\"`\n}\ntype Person struct {\n\tName string `json:\"name\"`\n}\nfunc main() {\n\tcfg, _ := external.LoadDefaultAWSConfig()\n\tsnsClient := sns.New(cfg)\n\tperson := Person{\n\t\tName: \"Felix Kjellberg\",\n\t}\n\tpersonStr, _ := json.Marshal(person)\n\tmessage := Message{\n\t\tDefault: string(personStr),\n\t}\n\tmessageBytes, _ := json.Marshal(message)\n\tmessageStr := string(messageBytes)\n\treq := snsClient.PublishRequest(&sns.PublishInput{\n\t\tTopicArn: aws.String(\"arn:aws:sns:us-east-1:*****:ok\"),\n\t\tMessage: aws.String(messageStr),\n\t\tMessageStructure: aws.String(\"json\"),\n\t})\n\tres, err := req.Send()\n\tif err != nil {log.Fatal(err)\n\t}\n\tlog.Print(res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77121237/golang-file-class-internals",
    "body": "// file is the real representation of *File.\n// The extra level of indirection ensures that no clients of os\n// can overwrite this data, which could cause the finalizer\n// to close the wrong file descriptor.\ntype file struct {\n\tpfd         poll.FD\n\tname        string\n\tdirinfo     *dirInfo // nil unless directory being read\n\tnonblock    bool     // whether we set nonblocking mode\n\tstdoutOrErr bool     // whether this is stdout or stderr\n\tappendMode  bool     // whether file is opened for appending\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76100854/convert-excel-file-data-to-json-string-without-any-struct-definition-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/xuri/excelize/v2\"\n)\nfunc main() {\n\tf, err := excelize.OpenFile(\"test.xlsx\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer func() {\n\t\tif err := f.Close(); err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n\t// could have multiple sheets\n\tsheets := f.GetSheetList()\n\tfor _, sheetName := range sheets {\n\t\td, err := f.GetRows(sheetName)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"error reading sheet\", sheetName, \":\", err)\n\t\t\treturn\n\t\t}\n\t\tsaveAsJSON(d, sheetName+\".json\")\n\t\tsaveAsJSONWithHeaders(d, sheetName+\"_with_headers.json\")\n\t}\n}\nfunc saveAsJSONWithHeaders(rows [][]string, filename string) error {\n\tdata := make([]map[string]string, len(rows)-1)\n\theaders := rows[0]\n    // excluding header row\n\tfor i, row := range rows[1:] {\n\t\tdata[i] = make(map[string]string)\n\t\tfor j, cellValue := range row {\n\t\t\tdata[i][headers[j]] = cellValue\n\t\t}\n\t}\n\treturn saveAsJSON(data, filename)\n}\nfunc saveAsJSON(data interface{}, filename string) error {\n\tfile, err := os.Create(filename)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\tencoder := json.NewEncoder(file)\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70568953/preventing-race-condition-using-the-sync-atomic-package-in-go",
    "body": "goroutine 1                                 goroutine 2\n                                            1. if c.isFinished() {\n                                                   return fmt.Errorf(\"counter is finished\")\n                                               }\n2. if !c.isFinished() {\n3.     atomic.StoreUint32(&c.finished, 1)\n4.     atomic.StoreUint64(&c.counter, 0)\n   }\n                                            5. atomic.AddUint64(&c.counter, 1)\n                                            6. return nil"
  },
  {
    "url": "https://stackoverflow.com/questions/70568953/preventing-race-condition-using-the-sync-atomic-package-in-go",
    "body": "type Counter struct {\n\tcounter  uint64\n\tfinished uint32\n\tm        sync.Mutex\n}\n// Inc increments the counter by one\nfunc (c *Counter) Inc() error {\n\tc.m.Lock()\n\tdefer c.m.Unlock()\n\tif c.finished != 0 {\n\t\treturn fmt.Errorf(\"counter is finished\")\n\t}\n\tc.counter++\n\treturn nil\n}\n// Dec decrements the counter by one, but prevents the counter from going to zero\nfunc (c *Counter) Dec() {\n\tc.m.Lock()\n\tdefer c.m.Unlock()\n\t// prevent overflow\n\tif c.counter > 0 {\n\t\tc.counter--\n\t}\n}\n// Cancel sets the finished flag, and sets counter to zero\nfunc (c *Counter) Cancel() {\n\tc.m.Lock()\n\tdefer c.m.Unlock()\n\tif c.finished == 0 {\n\t\tc.finished = 1\n\t\tc.counter = 0\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69557474/what-is-the-equivalence-of-type-name-handling-with-encoding-json-in-go",
    "body": "type MyInterfaceSlice []MyInterface\nfunc (s *MyInterfaceSlice) UnmarshalJSON(data []byte) error {\n\tarray := []json.RawMessage{}\n\tif err := json.Unmarshal(data, &array); err != nil {\n\t\treturn err\n\t}\n\t*s = make(MyInterfaceSlice, len(array))\n\tfor i := range array {\n\t\tbase := BaseStruct{}\n\t\tdata := []byte(array[i])\n\t\tif err := json.Unmarshal(data, &base); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar elem MyInterface\n\t\tswitch base.Discriminator {\n\t\tcase \"Foo\":\n\t\t\telem = new(Foo)\n\t\tcase \"Bar\":\n\t\t\telem = new(Bar)\n\t\t}\n\t\tif elem == nil {\n\t\t\tpanic(\"whoops\")\n\t\t}\n\t\tif err := json.Unmarshal(data, elem); err != nil {\n\t\t\treturn err\n\t\t}\n\t\t(*s)[i] = elem\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68663587/unique-constraint-violation-on-a-row-causes-entire-pq-copyin-postgresql-import-t",
    "body": "_, err = txn.Exec(`\nCREATE TEMP TABLE users_temp\nON COMMIT DROP\nAS SELECT * FROM users\nWITH NO DATA`)\nif err != nil {\n\tpanic(err)\n}\nstmt, err := txn.Prepare(pq.CopyIn(\"users_temp\", \"name\", \"email\"))\nif err != nil {\n\tpanic(err)\n}\nfor _, u := range users {\n\tif _, err := stmt.Exec(u.Name, u.Email); err != nil {\n\t\tpanic(err)\n\t}\n}\nif _, err := stmt.Exec(); err != nil {\n\tpanic(err)\n}\nif err := stmt.Close(); err != nil {\n\tpanic(err)\n}\n_, err = txn.Exec(`\nINSERT INTO users (name, email)\nSELECT name, email FROM users_temp\nON CONFLICT DO NOTHING`)\nif err != nil {\n\tpanic(err)\n}\nif err := txn.Commit(); err != nil {\n\tpanic(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68366585/parse-json-having-sibling-dynamic-keys-alongside-with-static-in-go",
    "body": "type FileInfo struct {\n\tUrl    string `json:\"url\"`\n\tSize   int64  `json:\"size\"`\n\tSha256 string `json:\"sha256\"`\n}\ntype UpdateInfo struct {\n\tVersion string `json:\"version\"`\n\tItems   map[string]FileInfo\n}\nfunc (i *UpdateInfo) UnmarshalJSON(d []byte) error {\n\ttmp := map[string]json.RawMessage{}\n\terr := json.Unmarshal(d, &tmp)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = json.Unmarshal(tmp[\"version\"], &i.Version)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdelete(tmp, \"version\")\n\ti.Items = map[string]FileInfo{}\n\tfor k, v := range tmp {\n\t\tvar item FileInfo\n\t\terr := json.Unmarshal(v, &item)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ti.Items[k] = item\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68135572/converting-between-similar-enums-from-different-services",
    "body": "type Select int32\ntype Choose string\nconst SelectCat Select = 0\nconst ChooseCat Choose = \"cat\"\nvar selectAToChooseOne = map[SelectA]ChooseOne{\n  SelectACat: ChooseOneCat,\n}\nfunc SelectToChoose(selected Select) (Choose, bool) {\n\tchosen, ok := selectToChoose[selected]\n\treturn chosen, ok\n}\nfunc ChooseToSelect(chosen Choose) (Select, bool) {\n\tfor s, c := range selectToChoose {\n\t\tif c == chosen {\n\t\t\treturn s, true\n\t\t}\n\t}\n\treturn Select(-1), false\n}\nfunc main() {\n  chosen, ok := SelectToChoose(SelectCat)\n  _ = ok // do something with ok\n  fmt.Println(chosen == ChooseCat)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64975153/golang-bigquery-docs-specify-done-operator-but-it-generates-a-compile-error",
    "body": "package main\nimport (\n\t\"cloud.google.com/go/bigquery\"\n\t\"context\"\n\t\"fmt\"\n\t\"google.golang.org/api/iterator\"\n)\nfunc main() {\n\tctx := context.Background()\n\tclient, err := bigquery.NewClient(ctx, \"project-id\")\n\tif err != nil {\n\t\t// TODO: Handle error.\n\t}\n\tq := client.Query(\"select name, num from t1\")\n\tit, err := q.Read(ctx)\n\tif err != nil {\n\t\t// TODO: Handle error.\n\t}\n\tfor {\n\t\tvar row []bigquery.Value\n\t\terr := it.Next(&row)\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\t// TODO: Handle error.\n\t\t}\n\t\tfmt.Println(row)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64186688/golang-how-to-read-data-inside-nested-json-object",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\ntype myData struct {\n\tResponse struct {\n\t\tNumFound      int  `json:\"numFound\"`\n\t\tStart         int  `json:\"start\"`\n\t\tNumFoundExact bool `json:\"numFoundExact\"`\n\t\tDocs          []struct {\n\t\t\tID       string   `json:\"id\"`\n\t\t\tURL      string   `json:\"url\"`\n\t\t\tBand     string   `json:\"band\"`\n\t\t\tFmRadios []string `json:\"fmRadios\"`\n\t\t} `json:\"docs\"`\n\t} `json:\"response\"`\n\tHighlighting struct {\n\t\tB3Ade68B3G6F86Eda3 struct {\n\t\t} `json:\"b3ade68b3g6f86eda3\"`\n\t} `json:\"highlighting\"`\n}\nfunc main() {\n\tresp, _ := http.Get(\"https://api.vagalume.com.br/search.art?q=Aerosmith&limit=5\")\n\tresponseData, _ := ioutil.ReadAll(resp.Body)\n\td := myData{}\n\terr := json.Unmarshal(responseData, &d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(d.Response.Docs)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64186688/golang-how-to-read-data-inside-nested-json-object",
    "body": "[{b3ade68b3g6f86eda3 /aerosmith/ Aerosmith [14634980201914128847|acustico 1464201608479108132|rock 1464720376206867533|rock-ballads 14647977281792658143|rock-classico 1470155219129532|romantico 1475867272151401|rock-das-raizes-ao-progressivo 1479752883943544|heavy-metal 1506975770142563|pop-rock 1508779923321353|para-viajar 1514919045178434|hits-anos-90 1521216096352408|hard-rock 1522179349368851|monday 1522261529679510|depre 1528233925925603|dia-dos-namorados 1534365009290224|favoritas-do-vagalume]}]"
  },
  {
    "url": "https://stackoverflow.com/questions/64186688/golang-how-to-read-data-inside-nested-json-object",
    "body": "[\n      {\n        \"id\":\"b3ade68b3g6f86eda3\",\n        \"url\":\"/aerosmith/\",\n        \"band\":\"Aerosmith\",\n        \"fmRadios\":[\"14634980201914128847|acustico\",\n          \"1464201608479108132|rock\",\n          \"1464720376206867533|rock-ballads\",\n          \"14647977281792658143|rock-classico\",\n          \"1470155219129532|romantico\",\n          \"1475867272151401|rock-das-raizes-ao-progressivo\",\n          \"1479752883943544|heavy-metal\",\n          \"1506975770142563|pop-rock\",\n          \"1508779923321353|para-viajar\",\n          \"1514919045178434|hits-anos-90\",\n          \"1521216096352408|hard-rock\",\n          \"1522179349368851|monday\",\n          \"1522261529679510|depre\",\n          \"1528233925925603|dia-dos-namorados\",\n          \"1534365009290224|favoritas-do-vagalume\"]}]"
  },
  {
    "url": "https://stackoverflow.com/questions/64177953/query-a-many-to-many-relation-using-gorm",
    "body": "var query = db.Table(\"movies\") //or you could use db.Model(&Movie{})\nquery = query.Select(\"movies.*\")\n// begin querying relations\nif( len(categories)>0 ){\n    query = query.Joins(\"LEFT JOIN movie_categories on movie_categories.movie_id = movies.id\");\n}\nif( len(categories)>0 ){\n    query = query.Where(\"movie_categories.category_id IN (?)\",categories);\n}\n//end querying relations\n//you could repeat this for each relation\n//With the Gorm query builder object store in query you can make other modifications before executing the query\nresult := query.Scan(&movies)\nerr := result.Error"
  },
  {
    "url": "https://stackoverflow.com/questions/63493026/is-there-a-difference-in-behaviour-between-slice-literal-and-make-slice",
    "body": "*** main.go#12   >    a := []int{}\n0x4e56a9\t488d0538bb1100\t\t\tlea rax, ptr [runtime.zerobase]\n0x4e56b0\t4889442470\t\t\tmov qword ptr [rsp+0x70], rax\n0x4e56b5\t8400\t\t\t\ttest byte ptr [rax], al\n0x4e56b7\teb00\t\t\t\tjmp 0x4e56b9\n0x4e56b9\t4889842418010000\t\tmov qword ptr [rsp+0x118], rax\n0x4e56c1\t0f57c0\t\t\t\txorps xmm0, xmm0\n0x4e56c4\t0f11842420010000\t\tmovups xmmword ptr [rsp+0x120], xmm0\n*** main.go#13   >    pa := &a\n0x4e56cc\t488d842418010000\t\tlea rax, ptr [rsp+0x118]\n0x4e56d4\t4889442460\t\t\tmov qword ptr [rsp+0x60], rax\n*** main.go#16   >    b := make([]int, 0)\n0x4e56d9\t488d0520020100\t\t\tlea rax, ptr [__image_base__+1005824]\n0x4e56e0\t48890424\t\t\tmov qword ptr [rsp], rax\n0x4e56e4\t0f57c0\t\t\t\txorps xmm0, xmm0\n0x4e56e7\t0f11442408\t\t\tmovups xmmword ptr [rsp+0x8], xmm0\n0x4e56ec\te8bf49f6ff\t\t\tcall $runtime.makeslice\n0x4e56f1\t488b442418\t\t\tmov rax, qword ptr [rsp+0x18]\n0x4e56f6\t4889842400010000\t\tmov qword ptr [rsp+0x100], rax\n0x4e56fe\t0f57c0\t\t\t\txorps xmm0, xmm0\n0x4e5701\t0f11842408010000\t\tmovups xmmword ptr [rsp+0x108], xmm0\n*** main.go#17   >    pb := &b\n0x4e5709\t488d842400010000\t\tlea rax, ptr [rsp+0x100]\n0x4e5711\t4889442458\t\t\tmov qword ptr [rsp+0x58], rax"
  },
  {
    "url": "https://stackoverflow.com/questions/58427586/how-to-return-first-http-response-to-answer",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n)\nfunc main() {\n\turls := []string{\"\", \"\", \"\"}\n\tres := fetch(urls)\n\tfmt.Println(res)\n}\nfunc fetch(urls []string) *http.Response {\n\tvar wg sync.WaitGroup\n\tch := make(chan *http.Response, len(urls))\n\tfor _, url := range urls {\n\t\twg.Add(1)\n\t\turl := url\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\treq, err := http.NewRequest(http.MethodGet, url, nil)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif resp != nil {\n\t\t\t\tch <- resp // no need to test the context, ch has rooms for this push to happen anyways.\n\t\t\t}\n\t\t}()\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(ch)\n\t}()\n\treturn <-ch\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58427586/how-to-return-first-http-response-to-answer",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n)\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tcancel()\n\turls := []string{\"\", \"\", \"\"}\n\tres := fetch(ctx, urls)\n\tfmt.Println(res)\n}\nfunc fetch(ctx context.Context, urls []string) *http.Response {\n\tvar wg sync.WaitGroup\n\tch := make(chan *http.Response, len(urls))\n\tfor _, url := range urls {\n\t\tif ctx.Err() != nil {\n\t\t\tbreak // break asap.\n\t\t}\n\t\twg.Add(1)\n\t\turl := url\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif resp != nil {\n\t\t\t\tch <- resp // no need to test the context, ch has rooms for this push to happen anyways.\n\t\t\t}\n\t\t}()\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(ch)\n\t}()\n\treturn <-ch\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57366169/is-there-a-simpler-way-to-decode-this-json-in-go",
    "body": "type JiraCustomField struct {\n\tSelf         string `json:\"self\"`\n\tName         string `json:\"name\"`\n\tKey          string `json:\"key\"`\n\tEmailAddress string `json:\"emailAddress\"`\n\tDisplayName  string `json:\"displayName\"`\n\tActive       bool   `json:\"active\"`\n\tTimeZone     string `json:\"timeZone\"`\n}\ntype JiraPayload struct {\n\tExpand string                     `json:\"expand\"`\n\tID     string                     `json:\"id\"`\n\tKey    string                     `json:\"key\"`\n\tFields map[string]JiraCustomField `json:\"fields\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56708954/unable-to-unmarshal-aws-sqs-message-in-go",
    "body": "// Message encapsulates all the information to publish in a message\ntype Message struct {\n\tBody              json.RawMessage            `json:\"body\"`\n\tHeaders           map[string]json.RawMessage `json:\"headers\"`\n\tEnvironment       string                     `json:\"env\"`\n\tPublishTime       int64                      `json:\"publishTime\"`\n\tMessageAttributes []Attributes               `json:\"messageAttributes\"`\n}\nfor _, msg := range resp.Messages {\n  var result Message\n  if err := json.Unmarshal([]byte(*msg.Body), &result); err != nil {\n    onError(err)\n    continue\n  }\n  metadata := &Metadata{\n\tReceiptHandle: *msg.ReceiptHandle,\n\tMD5OfBody:     *msg.MD5OfBody,\n\tSQSMessageID:  *msg.MessageId,\n\tReceiveCount:  *msg.Attributes[sqs.MessageSystemAttributeNameApproximateReceiveCount],\n  }\n  onMessage(result, *metadata)\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55199956/golang-http-uploading-file-to-s3-using-tusd-only-uploading-metadata",
    "body": "// S3 acces configuration\n s3Config := &aws.Config{\n     Region:      aws.String(os.Getenv(\"AWS_REGION\")),\n     Credentials: credentials.NewStaticCredentials(os.Getenv(\"AWS_ACCESS_KEY_ID\"), os.Getenv(\"AWS_SECRET_ACCESS_KEY\"), \"\"),\n     DisableSSL:       aws.Bool(true),\n     S3ForcePathStyle: aws.Bool(true),\n }\n// Setting up the s3 storage\n s3Store := s3store.New(os.Getenv(\"AWS_BUCKET_NAME\"), s3.New(session.Must(session.NewSession()), s3Config))\n// Creates a new and empty store composer\n composer := handler.NewStoreComposer()\n// UseIn sets this store as the core data store in the passed composer and adds all possible extension to it.\n s3Store.UseIn(composer)\n// Setting up handler\n handler, err := handler.NewHandler(handler.Config{\n     BasePath:                \"/files/\",\n     StoreComposer:           composer,\n })\n if err != nil {\n     panic(fmt.Errorf(\"Unable to create handler: %s\", err))\n }\n// Listen and serve\n http.Handle(\"/files/\", http.StripPrefix(\"/files/\", handler))\n err = http.ListenAndServe(\":8080\", nil)\n if err != nil {\n     panic(fmt.Errorf(\"Unable to listen: %s\", err))\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/78135453/how-to-check-for-http-timout-error-in-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n)\nfunc main() {\n\t// Start a http server to test the timeout\n\tsrv := setupServer()\n\tdefer srv.Shutdown(context.Background())\n\t// Examle 1: Using a context with a timeout for a request\n\t// =======================================================\n\t// create a default http client\n\tclient := &http.Client{}\n\tctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n\t// Release resources when done\n\tdefer cancel()\n\t// Create a new request with our context\n\treq, _ := http.NewRequestWithContext(ctx, \"GET\", \"http://localhost:8080/hellotimeout\", nil)\n\t// Start a timer\n\tstart := time.Now()\n\t// Make the request\n\t_, err := client.Do(req)\n\t// Check if the request was anything other than a timeout\n\t// Note that we could check for the timeout error here.\n\t// However, we will use a select statement to demonstrate how to handle the timeout.\n\tif urlErr, isURLErr := err.(*url.Error); isURLErr && !urlErr.Timeout() {\n\t\tlog.Printf(\"Something went wrong: %s\", urlErr)\n\t\treturn\n\t}\n\tselect {\n\t// If the request times out, the context will be done.\n\t// If the request is completed here, the context will not be done and the default case will be executed.\n\tcase <-ctx.Done():\n\t\tlog.Printf(\"Request timed out after %s\", time.Since(start))\n\tdefault:\n\t\tlog.Printf(\"Request completed after %s\", time.Since(start))\n\t\tlog.Println(\"Processing response...\")\n\t}\n\t// Examle 2: The same, but this time the request does not timeout\n\t// ==============================================================\n\t// Create a new request with our context\n\tctx2, cancel2 := context.WithTimeout(context.Background(), 3*time.Second)\n\tdefer cancel2()\n\treq, _ = http.NewRequestWithContext(ctx2, \"GET\", \"http://localhost:8080/hello\", nil)\n\t// Start a timer\n\tstart = time.Now()\n\t// Make the request\n\tresp, err := client.Do(req)\n\t// Check if the request was anything other than a timeout\n\tif urlErr, isURLErr := err.(*url.Error); isURLErr && !urlErr.Timeout() {\n\t\tlog.Printf(\"Something went wrong: %s\", urlErr)\n\t\treturn\n\t}\n\tselect {\n\tcase <-ctx2.Done():\n\t\tlog.Printf(\"Request timed out after %s\", time.Since(start))\n\t\treturn\n\tdefault:\n\t\tlog.Printf(\"Request completed after %s\", time.Since(start))\n\t}\n\tlog.Println(\"Processing response...\")\n\tio.Copy(log.Writer(), resp.Body)\n}\nfunc setupServer() *http.Server {\n\t// Setup a server so we can test the timeout\n\tsrv := &http.Server{Addr: \":8080\"}\n\thttp.Handle(\"/hellotimeout\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Simulate a long running request\n\t\ttime.Sleep(5 * time.Second)\n\t\tw.Write([]byte(\"Hello, World!\"))\n\t}))\n\thttp.Handle(\"/hello\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Respond immediately\n\t\tw.Write([]byte(\"Hello, World!\"))\n\t}))\n\t// Start the server in \"background\"\n\tgo srv.ListenAndServe()\n\treturn srv\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74408954/go-colly-returning-empty-slice",
    "body": "package scraper\nimport (\n        \"fmt\"\n        \"strings\"\n        \"github.com/gocolly/colly\"\n        \"github.com/gocolly/colly/extensions\"\n)\ntype Product struct {\n        name      string\n        fullPrice string\n        url       string\n}\nfunc Scraper(site string) []Product {\n        products := []Product{}\n        c := colly.NewCollector()\n        replacer := strings.NewReplacer(\"R$\", \"\", \",\", \".\")\n        c.OnHTML(\"div#column-main-content\", func(e *colly.HTMLElement) {\n                fullPrice := e.ChildText(\"span.m7nrfa-0.eJCbzj.sc-ifAKCX.ANnoQ\")\n                product := Product{\n                        name:      e.ChildText(\"h2\"),\n                        fullPrice: replacer.Replace(fullPrice),\n                        url:       e.ChildAttr(\"a.sc-1fcmfeb-2.iezWpY\", \"href\"),\n                }\n                fmt.Println(product)\n                products = append(products, product)\n        })\n        c.OnRequest(func(r *colly.Request) {\n                fmt.Println(\"Visiting\", r.URL)\n        })\n        c.OnError(func(r *colly.Response, err error) {\n                fmt.Println(\"Request URL:\", r.Request.URL, \"failed with response:\", r.Request, \"\\nError:\", err)\n        })\n        c.OnScraped(func(r *colly.Response) {\n                fmt.Println(products)\n        })\n        // Uses a random User-Agent in each request\n        extensions.RandomUserAgent(c)\n        c.Visit(site)\n        return products\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72042782/golang-unmarshal-json-response-then-convert-the-field-name-into-snake-case",
    "body": "type Person struct {\n\tFirstName string      `json:\"FirstName\"`\n\tLastName  string      `json:\"LastName\"`\n\tChildren  []ChildData `json:\"Children\"`\n}\nfunc (p Person) MarshalJSON() ([]byte, error) {\n\ttype T struct {\n\t\tFirstName string      `json:\"first_name\"`\n\t\tLastName  string      `json:\"last_name\"`\n\t\tChildren  []ChildData `json:\"children\"`\n\t}\n\treturn json.Marshal(T(p))\n}\ntype ChildData struct {\n\tChildName string `json:\"ChildName\"`\n\tAge       int    `json:\"Age\"`\n\tFavColor  string `json:\"FavColor\"`\n}\nfunc (d ChildData) MarshalJSON() ([]byte, error) {\n\ttype T struct {\n\t\tChildName string `json:\"child_name\"`\n\t\tAge       int    `json:\"age\"`\n\t\tFavColor  string `json:\"fav_color\"`\n\t}\n\treturn json.Marshal(T(d))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71977188/goroutines-have-high-idle-wake-up-calls",
    "body": "func (socket *Socket) PubListen(ctx context.Context, wg *sync.WaitGroup, subManager *ConnStatus, testing bool) {\n\tdefer wg.Done()\n\tdefer socket.Close()\n\tsocket.OnTextMessage = func(message string, socket Socket) {\n\t\tlog.Println(message)\n\t\tpubJsonDecoder(message, testing)\n\t\t//tradesParser(message);\n\t}\n\t<-ctx.Done()\n\tlog.Println(\"closing public socket\")\n}\nfunc (socket *Socket) PrivListen(ctx context.Context, wg *sync.WaitGroup, subManager *ConnStatus, testing bool) {\n\tdefer wg.Done()\n\tdefer socket.Close()\n\tsocket.OnTextMessage = func(message string, socket Socket) {\n\t\tlog.Println(message)\n\t}\n\t<-ctx.Done()\n\tlog.Println(\"closing private socket\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71311230/golang-field-type-validation",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"github.com/danielgtaylor/huma/schema\"\n\t\"github.com/xeipuuv/gojsonschema\"\n)\ntype InputData struct {\n\tSomeNumber int    `json:\"someNumber\"`\n\tSomeText   string `json:\"someText\"`\n}\nfunc main() {\n\t// Generate a JSON Schema from the struct type.\n\ts, err := schema.Generate(reflect.TypeOf(InputData{}))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Get the input from the user\n\tinput := []byte(`{\"someNumber\": \"NaN\", \"someText\": 42}`)\n\t// Load the schema and validate the user's input as bytes which\n\t// means we don't have to handle invalid types by first unmarshaling.\n\tloader := gojsonschema.NewGoLoader(s)\n\tdoc := gojsonschema.NewBytesLoader(input)\n\tvalidator, err := gojsonschema.NewSchema(loader)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresult, err := validator.Validate(doc)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Display the results!\n\tif !result.Valid() {\n\t\tfor _, desc := range result.Errors() {\n\t\t\tfmt.Printf(\"%s (%s)\\n\", desc, desc.Value())\n\t\t}\n\t\treturn\n\t}\n\tfmt.Println(\"Input was valid!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70718821/go-rsa-load-public-key",
    "body": "import (\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/sha256\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n)\n...\n// X.509 SPKI key, PEM encoded\nvar spkiPem = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZ67dtUTLxoXnNEzRBFB\nmwukEJGC+y69cGgpNbtElQj3m4Aft/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKH\nyVgFEGO4SA8RNnjhJt2D7z8RDMWX3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+I\nd0YDheCkVCoCEeUjQ8koXZhTwhYkGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DI\nhFKnOTnYXnpXiwRwtPyYoGTa64yWfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U\n1aHjDDGEnulTYJyEqCzNGwBpzEHUjqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RC\nsQIDAQAB\n-----END PUBLIC KEY-----`\n/*\n//Works also:\nvar spkiPem = `-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZ67dtUTLxoXnNEzRBFBmwukEJGC+y69cGgpNbtElQj3m4Aft/7cu9qYbTNguTSnCDt7uovZNb21u1vpZwKHyVgFEGO4SA8RNnjhJt2D7z8RDMWX3saody7jo9TKlrPABLZGo2o8vadW8Dly/v+Id0YDheCkVCoCEeUjQ8koXZhTwhYkGPu+vkdiqX5cUaiVTu1uzt591aO5Vw/hV4DIhFKnOTnYXnpXiwRwtPyYoGTa64yWfi2t0bv99qz0BgDjQjD0civCe8LRXGGhyB1U1aHjDDGEnulTYJyEqCzNGwBpzEHUjqIOXElFjt55AFGpCHAuyuoXoP3gQvoSj6RCsQIDAQAB\n-----END PUBLIC KEY-----`\n*/\n// Load X.509/SPKI key\nspkiBlock, _ := pem.Decode([]byte(spkiPem))\nvar spkiKey *rsa.PublicKey\npubInterface, _ := x509.ParsePKIXPublicKey(spkiBlock.Bytes)\nspkiKey = pubInterface.(*rsa.PublicKey)\n// Encryption using OAEP\nplaintext := []byte(\"The quick brown fox jumps over the lazy dog\")\noaepLabel := []byte(\"\")\noaepDigests := sha256.New()\nciphertext, _ := rsa.EncryptOAEP(oaepDigests, rand.Reader, spkiKey, plaintext, oaepLabel)\nfmt.Println(ciphertext)"
  },
  {
    "url": "https://stackoverflow.com/questions/70715508/how-to-convert-a-map-to-html-table-in-go",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"os\"\n)\nconst tplStr = `<table>\n    <thead>\n        <tr>\n            <th>Teacher</th>\n            <th>Student</th>\n            <th>Blue Pens</th>\n            <th>Red Pens</th>\n        </tr>\n    </thead>\n    <tbody>\n\t    {{range $teacher, $rows := . }}\n\t        {{ $first := true }}\n            {{ range $student, $colors := . }}\n            <tr>\n                <td>{{ if $first }}{{ $first = false }}{{ $teacher }}{{ end }}</td>\n                <td>{{ $student }}</td>\n                <td>{{ $colors.Blue }}</td>\n                <td>{{ $colors.Red }}</td>\n            </tr>\n            {{ end }}\n        {{ end }}\n    </tbody>\n</table>`\ntype color struct {\n\tBlue int\n\tRed  int\n}\nfunc fetchData() map[string]map[string]color {\n\treturn map[string]map[string]color{\n\t\t\"joe\": {\n\t\t\t\"alex\": {\n\t\t\t\tBlue: 3,\n\t\t\t\tRed:  6,\n\t\t\t},\n\t\t\t\"may\": {\n\t\t\t\tBlue: 2,\n\t\t\t\tRed:  6,\n\t\t\t},\n\t\t},\n\t\t\"jena\": {\n\t\t\t\"fred\": color{\n\t\t\t\tBlue: 1,\n\t\t\t\tRed:  2,\n\t\t\t},\n\t\t},\n\t}\n}\nfunc main() {\n\ttpl, err := template.New(\"table\").Parse(tplStr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = tpl.Execute(os.Stdout, fetchData())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68707706/import-data-into-postgresql-and-export-to-csv",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/jackc/pgx\"\n)\nfunc main() {\n\tpgxConConfig := pgx.ConnConfig{\n\t\tPort:     5432,\n\t\tHost:     \"remote_host\",\n\t\tDatabase: \"db_name\",\n\t\tUser:     \"my_user\",\n\t\tPassword: \"my_password\",\n\t}\n\tconn, err := pgx.Connect(pgxConConfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close()\n\ttables := []string{\"table1\", \"table2\", \"table3\",}\n\timport_dir := \"/dir_to_import_from\"\n\texport_dir := \"/dir_to_export_to\"\n\n\tfor _, t := range tables {\n\t\tf, err := os.OpenFile(fmt.Sprintf(\"%s/table_%s.csv\", import_dir, t), os.O_RDONLY, 0777)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tf.Close()\n\t\terr = importer(conn, f, t)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(\"  Done with import and doing export\")\n\t\tef, err := os.OpenFile(fmt.Sprintf(\"%s/table_%s.csv\", export_dir, t), os.O_CREATE|os.O_WRONLY, 0777)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"error opening file:\", err)\n\t\t\treturn\n\t\t}\n\t\tef.Close()\n\t\terr = exporter(conn, ef, t)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n}\nfunc importer(conn *pgx.Conn, f *os.File, table string) error {\n\tres, err := conn.CopyFromReader(f, fmt.Sprintf(\"COPY %s FROM STDIN DELIMITER '|' CSV HEADER\", table))\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(\"==> import rows affected:\", res.RowsAffected())\n\treturn nil\n}\nfunc exporter(conn *pgx.Conn, f *os.File, table string) error {\n\tres, err := conn.CopyToWriter(f, fmt.Sprintf(\"COPY %s TO STDOUT DELIMITER '|' CSV HEADER\", table))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error exporting file: %+v\", err)\n\t}\n\tfmt.Println(\"==> export rows affected:\", res.RowsAffected())\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68705450/upload-large-file-error-virtualalloc-of-x-bytes-failed-with-errno-1455-fatal-e",
    "body": "reader, err := r.MultipartReader()\nif err != nil {\n    http.Error(w, err.Error(), http.StatusInternalServerError)\n    return\n}\nfor {\n    part, err := reader.NextPart()\n    if err == io.EOF {\n        break\n    }\n    fmt.Println(part.FileName()) // prints file name\n    fmt.Println(part.FormName()) // prints form key, in yor case it's \"file\"\n\n    saveLocation := \"C:\\\\Users\\\\Pc\\\\go\\\\src\\\\github.com\\\\test\\\\uptest\"\n    dst, err := os.Create(saveLocation)\n    if dst != nil {\n        defer dst.Close()\n    }\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    if _, err := io.Copy(dst, part); err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67163442/how-to-compile-and-link-go-code-into-c-with-cmake",
    "body": "cmake_minimum_required(VERSION 3.0)\nproject(test_go)\nset(TARGET shim_go)\nset(SRCS module.go)\nset(LIB module.so)\nadd_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${LIB}\n  DEPENDS ${SRCS}\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  COMMAND env GOPATH=${GOPATH} go build -buildmode=c-archive\n  -o \"${CMAKE_CURRENT_BINARY_DIR}/${LIB}\"\n  ${CMAKE_GO_FLAGS} ./...\n  COMMENT \"Building Go library\")\nadd_custom_target(${TARGET} DEPENDS ${LIB} ${HEADER})\nadd_library(goshim STATIC IMPORTED GLOBAL)\nadd_dependencies(goshim ${TARGET})\nset_target_properties(goshim\n  PROPERTIES\n  IMPORTED_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/${LIB}\n  INTERFACE_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})"
  },
  {
    "url": "https://stackoverflow.com/questions/67163442/how-to-compile-and-link-go-code-into-c-with-cmake",
    "body": "package main\nimport \"C\"\nimport (\n    \"sort\"\n    \"fmt\"\n)\n//export Add\nfunc Add(a, b int) int {\n    return a + b\n}\n//export Sub\nfunc Sub(a, b int) int {\n    return a - b\n}\n//export Print\nfunc Print(str string) {\n    fmt.Printf(\"Go prints: %s\\n\", str)\n}\nfunc strFxn(input string) string {\n    return \"Hello \" + input + \" World\"\n}\n//export StrFxn\nfunc StrFxn(cinput *C.char) *C.char {\n    // C data needs to be manually managed in memory.\n    // But we will do it from C++.\n    input := C.GoString(cinput)\n    return C.CString(strFxn(input))\n}\n//export Sort\nfunc Sort(vals []int) {\n    sort.Ints(vals)\n}\nfunc main() {\n    // We need the main function to make possible\n    // CGO compiler to compile the package as C shared library\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67163442/how-to-compile-and-link-go-code-into-c-with-cmake",
    "body": "# cmake .\n-- The C compiler identification is AppleClang 12.0.0.12000032\n-- The CXX compiler identification is AppleClang 12.0.0.12000032\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc - skipped\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ - skipped\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /tmp/demo\n#  make\n[ 33%] Building Go library\n[ 33%] Built target shim_go\n[ 66%] Building CXX object CMakeFiles/test.dir/test.cpp.o\n[100%] Linking CXX executable test\n[100%] Built target test\n# ./test\n3\nGo prints: Hello World\nHello Go-Module World"
  },
  {
    "url": "https://stackoverflow.com/questions/62555285/unmarshal-json-field-into-struct-field-of-type-regexp-regexp",
    "body": "// GithubMetadataFactory allows to provide a custom generated metadata\ntype GithubMetadataFactory func(repo github.Repository) Metadata\n// GithubProjectMatcher matches a repository with a project\ntype GithubProjectMatcher struct {\n\tRules map[string]GithubProjectMatcherRule `json:\"rules,omitempty\"`\n}\n// GithubProjectMatcherRule rule that matches a repository to a project\ntype GithubProjectMatcherRule struct {\n\tURL *Regexp `json:\"url,omitempty\"`\n}\n// Regexp adds unmarshalling from json for regexp.Regexp\ntype Regexp struct {\n\t*regexp.Regexp\n}\n// UnmarshalText unmarshals json into a regexp.Regexp\nfunc (r *Regexp) UnmarshalText(b []byte) error {\n\tregex, err := regexp.Compile(string(b))\n\tif err != nil {\n\t\treturn err\n\t}\n\tr.Regexp = regex\n\treturn nil\n}\n// MarshalText marshals regexp.Regexp as string\nfunc (r *Regexp) MarshalText() ([]byte, error) {\n\tif r.Regexp != nil {\n\t\treturn []byte(r.Regexp.String()), nil\n\t}\n\treturn nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61201928/how-to-get-total-ram-from-golang-code-on-mac",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"github.com/shirou/gopsutil/mem\"\n)\nfunc errHandler(err error) {\n\tif err != nil {\n\t\tlog.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n}\nfunc main() {\n\truntimeOS := runtime.GOOS\n\truntimeARCH := runtime.GOARCH\n\tfmt.Println(\"OS: \", runtimeOS)\n\tfmt.Println(\"Architecture: \", runtimeARCH)\n\tvmStat, err := mem.VirtualMemory()\n\terrHandler(err)\n\tfmt.Println(\"Total memory: \", strconv.FormatUint(vmStat.Total/(1024*1024), 10)+\" MB\")\n\tfmt.Println(\"Free memory: \", strconv.FormatUint(vmStat.Free/(1024*1024), 10)+\" MB\")\n\t// Cached and swap memory are ignored. Should be considered to get the understanding of the used %\n\tfmt.Println(\"Percentage used memory: \", strconv.FormatFloat(vmStat.UsedPercent, 'f', 2, 64)+\"%\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59808853/reflect-runtime-error-call-of-reflect-flag-mustbeassignable-on-zero-value",
    "body": "package main\nimport (\n    \"fmt\"\n    \"reflect\"\n)\ntype T struct {\n    A int    `json:\"aaa\" test:\"AA\"`\n    B string `json:\"bbb\" test:\"BB\"`\n}\ntype newT struct {\n    AA int\n    BB string\nTestaaa string\n}\nfunc main() {\n    t := T{\n        A: 123,\n        B: \"hello\",\n    }\n    tt := reflect.TypeOf(t)\n    tv := reflect.ValueOf(t)\n    newT := &newT{}\n    newTValue := reflect.ValueOf(newT)\n    for i := 0; i < tt.NumField(); i++ {\n        field := tt.Field(i)\n        newTTag := field.Tag.Get(\"test\")\n        tValue := tv.Field(i)\n\t    newTfield := newTValue.Elem().FieldByName(newTTag)\n\t    if newTfield.CanSet() {\n        \t newTfield.Set(tValue)\n\t    }\n    }\n    fmt.Println(newT)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58775651/which-is-the-go-way-putuint32-or-use-operator-directly",
    "body": "BenchmarkFn1-8          580469606                1.94 ns/op\nBenchmarkFn2-8          568699358                2.06 ns/op\nBenchmarkFn3-8          604883466                1.86 ns/op\nBenchmarkFn4-8          824232160                1.33 ns/op\nBenchmarkFn5-8          626357875                1.82 ns/op\nBenchmarkFn6-8          622969119                1.82 ns/op\nBenchmarkFn7-8          469203398                2.35 ns/op\nBenchmarkFn8-8          637403140                1.80 ns/op\nBenchmarkFn9-8          647179550                1.80 ns/op"
  },
  {
    "url": "https://stackoverflow.com/questions/58775651/which-is-the-go-way-putuint32-or-use-operator-directly",
    "body": "package main\nimport (\n\t\"encoding/binary\"\n\t\"unsafe\"\n)\n// 1.94 ns/op\nfunc fn1(v uint32) [4]byte {\n\tary := [4]byte{}\n\tbinary.LittleEndian.PutUint32(ary[:], v)\n\treturn ary\n}\n// 2.06 ns/op\nfunc fn2(v uint32) []byte {\n\tb := make([]byte, 4)\n\tbinary.LittleEndian.PutUint32(b, v)\n\treturn b\n}\n// 1.86 ns/op\nfunc fn3(v uint32) [4]byte {\n\ta := [4]byte{\n\t\tbyte(v),\n\t\tbyte(v >> 8),\n\t\tbyte(v >> 16),\n\t\tbyte(v >> 24),\n\t}\n\treturn a\n}\n// 1.33 ns/op\nfunc fn4(v uint32) *[4]byte {\n\ta := (*[4]byte)(unsafe.Pointer(&v))\n\treturn a\n}\n// 1.82 ns/op\nfunc fn5(v uint32) [4]byte {\n\ta := *(*[4]byte)(unsafe.Pointer(&v))\n\treturn a\n}\n// 1.82 ns/op\nfunc fn6(v uint32) []byte {\n\tb := make([]byte, 4)\n\tcopy(b, (*[4]byte)(unsafe.Pointer(&v))[:])\n\treturn b\n}\n// 2.35 ns/op\nfunc fn7(v uint32) [4]byte {\n\tb := [4]byte{}\n\tcopy(b[:], (*[4]byte)(unsafe.Pointer(&v))[:])\n\treturn b\n}\n// 1.80 ns/op\nfunc fn8(v uint32) *[4]byte {\n\tb := [4]byte{}\n\tcopy(b[:], (*[4]byte)(unsafe.Pointer(&v))[:])\n\treturn &b\n}\n//1.80 ns/op\nfunc fn9(v uint32) []byte {\n\tb := [4]byte{}\n\tcopy(b[:], (*[4]byte)(unsafe.Pointer(&v))[:])\n\treturn b[:]\n}\nfunc main() {}"
  },
  {
    "url": "https://stackoverflow.com/questions/58775651/which-is-the-go-way-putuint32-or-use-operator-directly",
    "body": "package main\nimport \"testing\"\nvar result int\nfunc BenchmarkFn1(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn1(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn2(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn2(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn3(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn3(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn4(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn4(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn5(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn5(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn6(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn6(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn7(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn7(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn8(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn8(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}\nfunc BenchmarkFn9(b *testing.B) {\n\tsum := 0\n\tfor i := 0; i < b.N; i++ {\n\t\tr := fn9(uint32(i))\n\t\tsum += int(r[0]) + int(r[1]) + int(r[2]) + int(r[3])\n\t}\n\tresult = sum\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57201540/access-gos-array-of-arrays-from-c",
    "body": "package main\n/*\n\t#include <stdio.h>\n\t#include <stdlib.h>\n\tvoid writeKeyValuePairs(char *v[][2], size_t len) {\n\t\tint i;\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tprintf(\"i=%i, k=%s, v=%s\\n\", i, v[i][0], v[i][1]);\n\t\t}\n\t\treturn;\n\t}\n*/\nimport \"C\"\nimport \"unsafe\"\nfunc main() {\n\ttags := map[string]string{\n\t\t\"foo\": \"42\",\n\t\t\"bar\": \"12\",\n\t}\n\tvar argv = make([][2]*C.char, len(tags))\n\ti := 0\n\tfor key, val := range tags {\n\t\tvar kv [2]*C.char\n\t\tkv[0], kv[1] = C.CString(key), C.CString(val)\n\t\targv[i] = kv\n\t\ti++\n\t}\n\tdefer func(items [][2]*C.char) {\n\t\tfor i := range items {\n\t\t\tk, v := items[i][0], items[i][1]\n\t\t\tC.free(unsafe.Pointer(k))\n\t\t\tC.free(unsafe.Pointer(v))\n\t\t}\n\t}(argv)\n\tC.writeKeyValuePairs(&argv[0], C.size_t(len(tags)))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56615308/go-binary-not-found-when-using-dockerfile",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"github.com/kelindar/tcp\"\n)\nfunc main() {\n\tclosingChan := make(chan bool)\n\tonAccept := func(c net.Conn) {\n\t\t// Do something here.\n\t}\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", 4242))\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to net.Listen: %v\", err)\n\t}\n\tserver := &tcp.Server{\n\t\tClosing:  closingChan,\n\t\tOnAccept: onAccept,\n\t}\n\tlog.Println(\"Server ready...\")\n\tif err := server.Serve(l); err != nil {\n\t\tlog.Fatalf(\"Server crashed: %v\", err)\n\t}\n\tlog.Println(\"Server stopped\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56133485/uploading-multiple-files-in-parallel-to-amazon-s3-with-goroutines-channels",
    "body": "func uploadDirToS3(dir string, svc *s3.S3) {\n\tfileList := []string{}\n\tfilepath.Walk(dir, func(path string, f os.FileInfo, err error) error {\n\t\tfileList = append(fileList, path)\n\t\treturn nil\n\t})\n\tvar wg sync.WaitGroup\n\twg.Add(len(fileList))\n\tfor _, pathOfFile := range fileList[1:] {\n\t\t//maybe spin off a goroutine here??\n\t\tgo putInS3(pathOfFile, svc, &wg)\n\t}\n\twg.Wait()\n}\nfunc putInS3(pathOfFile string, svc *s3.S3, wg *sync.WaitGroup) {\n\tdefer func() {\n\t\twg.Done()\n\t}()\n\tfile, _ := os.Open(pathOfFile)\n\tdefer file.Close()\n\tfileInfo, _ := file.Stat()\n\tsize := fileInfo.Size()\n\tbuffer := make([]byte, size)\n\tfile.Read(buffer)\n\tfileBytes := bytes.NewReader(buffer)\n\tfileType := http.DetectContentType(buffer)\n\tpath := file.Name()\n\tparams := &s3.PutObjectInput{\n\t\tBucket:        aws.String(\"bucket-name\"),\n\t\tKey:           aws.String(path),\n\t\tBody:          fileBytes,\n\t\tContentLength: aws.Int64(size),\n\t\tContentType:   aws.String(fileType),\n\t}\n\tresp, _ := svc.PutObject(params)\n\tfmt.Printf(\"response %s\", awsutil.StringValue(resp))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/52768922/how-to-check-if-kubernetes-job-is-successful-or-failure-using-client-go-library",
    "body": "func getJobStatus(jobName string) error {\n    // k8sClient := initialize k8s client\n    job, err := k8sClient.BatchV1().Jobs(h.namespace).Get(jobName, metav1.GetOptions{})\n    if err != nil {\n        return err\n    }\n    if job.Status.Active == 0 && job.Status.Succeeded == 0 && job.Status.Failed == 0 {\n\t    return fmt.Errorf(\"%s hasn't started yet\", job.Name)\n\t}\n\tif job.Status.Active > 0 {\n\t\treturn fmt.Errorf(\"%s is still running\", job.Name)\n\t}\n    if job.Status.Succeeded > 0 {\n\t\treturn nil // Job ran successfully\n\t}\n    return fmt.Errorf(\"%s has failed with error\", job.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/28014078/is-there-a-better-way-to-marshal-sql-rows",
    "body": "\tpackage main\n\timport (\n\t\t\"database/sql\"\n\t\t\"fmt\"\n\t\t\"github.com/elgs/gosqljson\"\n\t\t_ \"github.com/go-sql-driver/mysql\"\n\t)\n\tfunc main() {\n\t\tds := \"username:password@tcp(host:3306)/db\"\n\t\tdb, err := sql.Open(\"mysql\", ds)\n\t\tdefer db.Close()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"sql.Open:\", err)\n\t\t}\n\t\ttheCase := \"lower\" // \"lower\" default, \"upper\", camel\n\t\ta, _ := gosqljson.QueryDbToArrayJson(db, theCase, \"SELECT ID,NAME FROM t LIMIT ?,?\", 0, 3)\n\t\tfmt.Println(a)\n\t\t// [[\"id\",\"name\"],[\"0\",\"Alicia\"],[\"1\",\"Brian\"],[\"2\",\"Chloe\"]]\n\t\tm, _ := gosqljson.QueryDbToMapJson(db, theCase, \"SELECT ID,NAME FROM t LIMIT ?,?\", 0, 3)\n\t\tfmt.Println(m)\n\t\t// [{\"id\":\"0\",\"name\":\"Alicia\"},{\"id\":\"1\",\"name\":\"Brian\"},{\"id\":\"2\",\"name\":\"Chloe\"}]\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/79480150/unable-to-mock-unexported-properties-in-struct-in-golang",
    "body": "package org\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\t\"github.com/onsi/ginkgo/v2/dsl/core\" // nolint\n\t\"github.com/onsi/gomega\"             // nolint\n\t\"github.com/onsi/gomega/ghttp\"\n\tsdk \"github.com/openshift-online/ocm-sdk-go\"\n\t\"github.com/openshift-online/ocm-sdk-go/logging\"\n\t. \"github.com/openshift-online/ocm-sdk-go/testing\" // nolint\n)\nvar OkResp = Resp{\"OK\"}\ntype Resp struct {\n\tResult string `json:\"result\"`\n}\n// Test cases\nfunc TestSendRequest(t *testing.T) {\n\tvar apiServer *ghttp.Server\n\tvar connection *sdk.Connection\n\tvar logger logging.Logger\n\tvar okRespBytes []byte\n\tcore.BeforeEach(func() {\n\t\tvar err error\n\t\tokRespBytes, err = json.Marshal(OkResp)\n\t\tgomega.Expect(err).ToNot(gomega.HaveOccurred())\n\t\t// Create the API server:\n\t\tapiServer = MakeTCPServer()\n\t\t// Create the connection:\n\t\tconnection, err = sdk.NewConnectionBuilder().\n\t\t\tLogger(logger).\n\t\t\tURL(apiServer.URL()).\n\t\t\tRetryLimit(0).\n\t\t\tBuild()\n\t\tgomega.Expect(err).ToNot(gomega.HaveOccurred())\n\t})\n\tcore.Describe(\"Get\", func() {\n\t\tcore.It(\"Sends path\", func() {\n\t\t\t// Configure the server:\n\t\t\tapiServer.AppendHandlers(\n\t\t\t\tghttp.CombineHandlers(\n\t\t\t\t\tghttp.VerifyRequest(http.MethodGet, \"/mypath\"),\n\t\t\t\t\tRespondWithJSON(http.StatusOK, string(okRespBytes)),\n\t\t\t\t),\n\t\t\t)\n\t\t\t// Build the request:\n\t\t\trequest := connection.Get().\n\t\t\t\tPath(\"/mypath\")\n\t\t\t// Send the request:\n\t\t\tresp, err := sendRequest(request)\n\t\t\tgomega.Expect(err).ToNot(gomega.HaveOccurred())\n\t\t\tgomega.Expect(resp).Should(gomega.MatchJSON(OkResp))\n\t\t})\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78111789/format-xml-with-golang",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"errors\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\nfunc main() {\n    openedFile, _ := os.Open(\"originalFile.xml\")\n    xmlDecoder := xml.NewDecoder(openedFile)\n    createdFile, _ := os.Create(\"result.xml\")\n    xmlEncoder := xml.NewEncoder(createdFile)\n    xmlEncoder.Indent(\"\", \"  \")\n    for {\n        tokenXml, err := xmlDecoder.RawToken()\n        if errors.Is(err, io.EOF) {\n            break\n        }\n        if err != nil {\n            log.Println(err)\n            break\n        }\n\t\tswitch tokenXml.(type) {\n        case xml.ProcInst:\n            continue\n        }\n\n        xmlEncoder.EncodeToken(tokenXml)\n    }\n    if err := xmlEncoder.Flush(); err != nil {\n        log.Fatal(err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78076992/how-can-i-recursively-update-all-strings-in-a-go-struct",
    "body": "func updateStringValues(structValue *reflect.Value, callback func(s string) string) error {\n\tfor i := 0; i < structValue.NumField(); i++ {\n\t\tfield := structValue.Field(i)\n\t\tswitch field.Kind() {\n\t\tcase reflect.Ptr:\n\t\t\tif field.IsNil() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\telem := field.Elem()\n\t\t\tif err := updateStringValues(&elem, callback); err != nil {\n\t\t\t\treturn fmt.Errorf(\"field error: %s\", err.Error())\n\t\t\t}\n\t\tcase reflect.Struct:\n\t\t\tif err := updateStringValues(&field, callback); err != nil {\n\t\t\t\treturn fmt.Errorf(\"field error: %s\", err.Error())\n\t\t\t}\n\t\tcase reflect.String:\n\t\t\tif field.CanSet() {\n\t\t\t\tfield.SetString(callback(field.String()))\n\t\t\t}\n\t\tcase reflect.Slice, reflect.Array:\n\t\t\tif err := updateStringValuesList(&field, callback); err != nil {\n\t\t\t\treturn fmt.Errorf(\"field error: %s\", err.Error())\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77442338/why-are-these-tuples-not-generated-correctly",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tu := append([]int{1, 2}, 3)\n\t// The length is 3 but the capacity is 4.\n\tfmt.Printf(\"u %v\\n  len: %d\\n  cap: %d\\n\", u, len(u), cap(u))\n\t// Since u has enough capacity for the new element \"4\",\n\t// v1 will share the same underlying array.\n\tv1 := append(u, 4)\n\tfmt.Println(\"v1:\", v1)\n\t// As what happened to v1, v2 will share the same underlying array too.\n\t// But the last element \"4\" in the underlying array is changed to \"5\".\n\tv2 := append(u, 5)\n\tfmt.Println(\"v2:\", v2)\n\t// Since v1 uses the same underlying array, it sees the change in the last step.\n\tfmt.Println(\"v1:\", v1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77257211/http-wrote-more-than-the-declared-content-length-error-in-go",
    "body": "// Job represents a unit of work to be processed by a worker.\ntype Job struct {\n\tr    *http.Request       // HTTP request to be processed\n\tw    http.ResponseWriter // Response writer to send the result\n\tdone chan struct{}       // Closed when write competed\n}\n...\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\t// Create a job with the request and response.\n\tjob := &Job{r, w, make(chan struct{})}\n\t// Push the job onto the queue.\n\tq.Push(job)\n\tlog.Println(\"Received request and added job to queue\")\n\t<-job.done // Wait until job has been processed\n}\n...\n// worker processes jobs from the queue.\nfunc worker() {\n\tfor {\n\t\tjob, ok := q.Pop()\n\t\tif ok {\n\t\t\tlog.Println(\"Worker processing job\")\n\t\t\tdoWork(job)\n\t\t\tclose(job.done) // Notify requester that we are done\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76548421/golang-insert-nested-structure-model-into-postgres",
    "body": "type OrderEntry struct {\n    Order_uid          string `json:\"order_uid\"`\n    Track_number       string `json:\"track_number\"`\n    Entry              string `json:\"entry\"`\n    Delivery           Delivery `json:\"delivery\"`\n    Payment            Payment `json:\"payment\"`\n    Items              []Item `json:\"items\"`\n    Locale             string `json:\"locale\"`\n    Internal_signature string `json:\"internal_signature\"`\n    Customer_id        string `json:\"customer_id\"`\n    Delivery_service   string `json:\"delivery_service\"`\n    Shardkey           string `json:\"shard_key\"`\n    Sm_id              int64 `json:\"sm_id\"`\n    Date_created       string `json:\"date_created\"`\n    Oof_shard          string `json:\"oof_shard\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76437217/golang-post-400-bad-request",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"github.com/go-chi/chi\"\n\t\"github.com/go-chi/chi/middleware\"\n\t\"github.com/justinas/nosurf\"\n)\nvar formTemplate = `\n\t<html>\n\t<body>\n\t\t<form method=\"post\" action=\"/submit\">\n\t\t\t<!--  comment this and see error -->\n\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"{{ .CSRFToken }}\"/>\n\t\t\t<h1 class=\"h3 mb-3 fw-normal\">Please sign in</h1>\n\t\t\t<div class=\"form-floating\">\n\t\t\t\t<input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"name@example.com\">\n\t\t\t\t<label for=\"email\">Email address</label>\n\t\t\t</div>\n\t\t\t<div class=\"form-floating\">\n\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"Password\">\n\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t</div>\n\t\t\t<div class=\"checkbox mb-3\">\n\t\t\t\t<label>\n\t\t\t\t\t<input type=\"checkbox\" value=\"remember-me\"> Remember me\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<button class=\"w-100 btn btn-lg btn-primary\" type=\"submit\">Sign in</button>\n\t\t</form>\n\t</body>\n\t</html>\n`\nvar tmpl = template.Must(template.New(\"t1\").Parse(formTemplate))\n// FailureFunction\n// Overriding the default nosurf failure Handler\nfunc FailureFunction() http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Printf(\"Request Failed. Reason: %v\", nosurf.Reason(r))\n\t\thttp.Error(w, http.StatusText(nosurf.FailureCode), nosurf.FailureCode)\n\t})\n}\n// NoSurf\n// Setting up the handler with overrriding default nosurf failure Handler\nfunc NoSurf(handler http.Handler) http.Handler {\n\tobj := nosurf.New(handler)\n\tobj.SetFailureHandler(FailureFunction()) // Override default failure Handler\n\treturn obj\n}\nfunc main() {\n\tr := chi.NewRouter()\n\t// Add middleware\n\tr.Use(middleware.Logger)\n\tr.Use(middleware.Recoverer)\n\tr.Use(NoSurf)\n\tr.Get(\"/\", HomeHandler)\n\tr.Post(\"/submit\", SubmitHandler)\n\thttp.ListenAndServe(\":8080\", r)\n}\nfunc HomeHandler(w http.ResponseWriter, r *http.Request) {\n\ttoken := nosurf.Token(r) // generating the token\n\tdata := map[string]interface{}{\n\t\t\"CSRFToken\": token, // comment this and see the error\n\t}\n\terr := tmpl.Execute(w, data)\n\tif err != nil {\n\t\thttp.Error(w, \"unable to execute the template\", http.StatusInternalServerError)\n\t\treturn\n\t}\n}\nfunc SubmitHandler(w http.ResponseWriter, r *http.Request) {\n\terr := r.ParseForm()\n\tif err != nil {\n\t\thttp.Error(w, \"Bad Request\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif !nosurf.VerifyToken(nosurf.Token(r), r.PostForm.Get(\"csrf_token\")) {\n\t\thttp.Error(w, \"Invalid CSRF Token\", http.StatusForbidden)\n\t\treturn\n\t}\n\tw.Write([]byte(\"success\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75940008/two-folders-in-the-file-system-as-one-virtual-folder-in-the-path-of-the-site-add",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"io/fs\"\n\t\"net/http\"\n)\nfunc main() {\n\thttp.Handle(\"/public/\", http.StripPrefix(\"/public/\", http.FileServer(mergedDir{\n\t\tDir1: \"./files1\",\n\t\tDir2: \"./files2\",\n\t})))\n\thttp.ListenAndServe(\":8080\", nil)\n}\ntype mergedDir struct {\n\tDir1 http.Dir // Dir1 will be tried first so it has higher priority.\n\tDir2 http.Dir\n}\nfunc (d mergedDir) Open(name string) (http.File, error) {\n\tf, err := d.Dir1.Open(name)\n\tif err != nil {\n\t\tif errors.Is(err, fs.ErrNotExist) {\n\t\t\treturn d.Dir2.Open(name)\n\t\t}\n\t}\n\treturn f, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75874509/go-chromedp-ignores-any-external-or-internal-css-during-printing-to-pdf-and-uses",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\t\"github.com/chromedp/cdproto/page\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Simulate a network latency.\n\t\ttime.Sleep(2 * time.Second)\n\t\tw.Header().Set(\"Content-Type\", \"text/css\")\n\t\tfmt.Fprint(w, `h1 {font-size: 100pt; color: red;}`)\n\t}))\n\tdefer ts.Close()\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\t// construct your html\n\thtml := `<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"%s/style.css\">\n    </head>\n    <body>\n        <h1> Hello World! </h1>\n    </body>\n</html>\n`\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"about:blank\"),\n\t\t// setup the listener to listen for the page.EventLoadEventFired\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tlctx, cancel := context.WithCancel(ctx)\n\t\t\tchromedp.ListenTarget(lctx, func(ev interface{}) {\n\t\t\t\tif _, ok := ev.(*page.EventLoadEventFired); ok {\n\t\t\t\t\twg.Done()\n\t\t\t\t\t// remove the event listener\n\t\t\t\t\tcancel()\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn nil\n\t\t}),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tframeTree, err := page.GetFrameTree().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn page.SetDocumentContent(frameTree.Frame.ID, fmt.Sprintf(html, ts.URL)).Do(ctx)\n\t\t}),\n\t\t// wait for page.EventLoadEventFired\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\twg.Wait()\n\t\t\treturn nil\n\t\t}),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tbuf, _, err := page.PrintToPDF().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn os.WriteFile(\"sample.pdf\", buf, 0644)\n\t\t}),\n\t); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"done!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75871205/reading-two-channels-with-unknown-number-of-items",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\nfunc Consume(in, out chan int, err chan error) {\n\tdefer close(out)\n\tdefer close(err)\n\tfor i := range in {\n\t\tif i%2 == 0 {\n\t\t\tout <- i\n\t\t} else {\n\t\t\terr <- errors.New(\"we don't like odd numbers\")\n\t\t}\n\t}\n}\nfunc main() {\n\tin := make(chan int)\n\tout := make(chan int)\n\terr := make(chan error)\n\tgo func(in chan int) {\n\t\tdefer close(in)\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Println(\"  input\", i)\n\t\t\tin <- i\n\t\t}\n\t}(in)\n\tgo Consume(in, out, err)\n\tfor {\n\t\tselect {\n\t\tcase i, ok := <-out:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Printf(\"Processed Data %d\\n\", i)\n\t\tcase er, ok := <-err:\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif er != nil {\n\t\t\t\tfmt.Println(er)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74485370/how-to-collect-k8s-pods-logs-in-parallel-using-golang-only-for-a-duration-of-tim",
    "body": "const (\n\t// set namespace and label\n\tnamespace = \"dev\"\n\tlabel     = \"app=my-app\"\n)\nfunc main() {\n\t// parse the .kubeconfig file\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\t// use the current context in kubeconfig\n\tctx := context.TODO()\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tlog.Println(err, \"Failed to build config from flags\")\n\t\treturn\n\t}\n\terr = collectApplicationLogs(ctx, config, \"/usr/mylogs.txt\")\n\tif err != nil {\n\t\tlog.Println(err, \"Failed to collect logs\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74485370/how-to-collect-k8s-pods-logs-in-parallel-using-golang-only-for-a-duration-of-tim",
    "body": "func collectApplicationLogs(ctx context.Context, config *rest.Config, filename string) error {\n\t// create the clientset\n\tclientSet, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tlog.Println(\"Failed to create clientset from the given config\")\n\t\treturn err\n\t}\n\t// get the pods as ListItems\n\tpods, err := clientSet.CoreV1().Pods(namespace).List(ctx, metav1.ListOptions{\n\t\tLabelSelector: label,\n\t})\n\tif err != nil {\n\t\tlog.Println(err, \"Failed to get pods\")\n\t\treturn err\n\t}\n\t// If the file doesn't exist, create it or append to the file\n\tfile, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\t// get the pod lists first\n\t// then get the podLogs from each of the pods\n\t// write to files concurrently\n\t// use channel for blocking reasons\n\tch := make(chan bool)\n\tpodItems := pods.Items\n\tfor i := 0; i < len(podItems); i++ {\n\t\tpodLogs, err := clientSet.CoreV1().Pods(namespace).GetLogs(podItems[i].Name, &v1.PodLogOptions{\n\t\t\tFollow: true,\n\t\t}).Stream(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbuffer := bufio.NewReader(podLogs)\n\t\tgo writeLogs(buffer, file, ch)\n\t}\n\t<-ch\n\treturn nil\n}\nfunc writeLogs(buffer *bufio.Reader, file *os.File, ch chan bool) {\n\tdefer func() {\n\t\tch <- true\n\t}()\n\tfor {\n\t\tstr, readErr := buffer.ReadString('\\n')\n\t\tif readErr == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\t_, err := file.Write([]byte(str))\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74349201/how-to-assign-to-struct-fields-from-an-array-of-values-in-order",
    "body": "func populate(dst any, src any) {\n\tv := reflect.ValueOf(dst)\n\tif v.Type().Kind() != reflect.Pointer {\n\t\tpanic(\"dst must be a pointer\")\n\t}\n\tv = v.Elem()\n    if v.Type().Kind() != reflect.Struct {\n        panic(\"dst must be a pointer to struct\")\n    }\n\tw := reflect.ValueOf(src)\n\tif w.Type().Kind() != reflect.Slice {\n\t\tpanic(\"src must be a slice\")\n\t}\n\tfor i := 0; i < v.NumField(); i++ {\n        // in case you need to support source slices of arbitrary types\n \t\tvalue := w.Index(i)\n\t\tif value.Type().Kind() == reflect.Interface {\n\t\t\tvalue = value.Elem()\n\t\t}\n\t\tv.Field(i).Set(value)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73826449/in-go-how-do-we-apply-concurrency-calls-while-preserving-the-order-of-the-list",
    "body": "func main() {\n\tConcurrency()\n\ttime.Sleep(2000)\n}\nfunc response(greeter string, channel chan *string) {\n\treply := fmt.Sprintf(\"hello %s\", greeter)\n\tchannel <- &reply\n}\nfunc Concurrency() {\n\tevents := []string{\"ALICE\", \"BOB\"}\n\tchannels := make([]chan *string, 0)\n\t// start concurrently\n\tfor _, event := range events {\n\t\tchannel := make(chan *string)\n\t\tgo response(event, channel)\n\t\tchannels = append(channels, channel)\n\t}\n\t// collect response\n\tresponse := make([]string, len(channels))\n\tfor i := 0; i < len(channels); i++ {\n\t\tresponse[i] = *<-channels[i]\n\t}\n   // print response\n\tlog.Printf(\"channel response %v\", response)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73609123/scan-a-postgresql-field-of-array-type-into-a-slice-of-go-structs",
    "body": "type PostList []Post\nfunc (ls *PostList) Scan(src any) error {\n    var data []byte\n    switch v := src.(type) {\n    case string:\n        data = []byte(v)\n    case []byte:\n        data = v\n    }\n\t// The data var holds the multi-dimensional array value,\n    // something like: {{\"1\",\"foo\"}, {\"2\",\"bar\"}, ...}\n    // The above example is easy to parse but too simplistic,\n    // the array is likely to be more complex and therefore\n    // harder to parse, but not at all impossible if that's\n    // what you want.\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73561564/how-to-checkout-a-specific-single-file-to-inspect-it-using-go-git",
    "body": "func getFileFromRef(repository *git.Repository, ref *plumbing.Hash, filename string) (bool, []byte, error) {\n\t// Get the commit object corresponding to ref\n\tcommit, err := repository.CommitObject(*ref)\n\tif err != nil {\n\t\treturn false, nil, err\n\t}\n\t// Get the tree object from the commit\n\ttree, err := repository.TreeObject(commit.TreeHash)\n\tif err != nil {\n\t\treturn false, nil, err\n\t}\n\t// Iterate through tree entries\n\tfor _, entry := range tree.Entries {\n\t\t// If we find the target file...\n\t\tif entry.Name == filename {\n\t\t\t// Get the blob object from the repository\n\t\t\tblob, err := repository.BlobObject(entry.Hash)\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil, err\n\t\t\t}\n\t\t\t// Ask for a Reader\n\t\t\treader, err := blob.Reader()\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil, err\n\t\t\t}\n\t\t\t// Allocate a slice for the data...\n\t\t\tdata := make([]byte, blob.Size)\n\t\t\t// ...and read it in.\n\t\t\tn, err := reader.Read(data)\n\t\t\tif err != nil {\n\t\t\t\treturn false, nil, err\n\t\t\t}\n\t\t\t// Double check that we read as many bytes as\n\t\t\t// we expected\n\t\t\tif int64(n) != blob.Size {\n\t\t\t\treturn true, nil, fmt.Errorf(\"wrong size\")\n\t\t\t}\n\t\t\treturn true, data, nil\n\t\t}\n\t}\n\treturn false, nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73561564/how-to-checkout-a-specific-single-file-to-inspect-it-using-go-git",
    "body": "err = tagsIterator.ForEach(func(tag *plumbing.Reference) error {\n\t\t// Get the commit to which the tag refers. We need this to\n\t\t// resolve annotated tags.\n\t\tref, err := repository.ResolveRevision(plumbing.Revision(tag.Hash().String()))\n\t\tif err != nil {\n\t\t\thandleError(err)\n\t\t}\n\t\tfound, content, err := getFileFromRef(repository, ref, \"package.json\")\n\t\tif found && err == nil {\n\t\t\tfmt.Printf(\"found \\\"package.json\\\" in tag %s\\n\", tag.Name().Short())\n\t\t\tfmt.Println(string(content))\n\t\t}\n\t\treturn nil\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/73485235/how-to-extract-table-data-from-pdf",
    "body": "# part of the pdf content extracted, comments (#) added by me.\nBT\n/F4 14.666667 Tf\n1 0 0 -1 0 .47981739 Tm\n0 -13.2773438 Td <0027> Tj  # D\n10.5842743 0 Td <0024> Tj   # A\n8.6870575 0 Td <0037> Tj    # T\n8.9526215 0 Td <0028> Tj    # E\nET\nQ\nQ\nq\n147.75 87.296265 149.25 23.148926 re\nW* n\nq\n.75 0 0 .75 152.25 92.546265 cm\n/G3 gs\nBT\n/F4 14.666667 Tf\n1 0 0 -1 0 .47981739 Tm\n0 -13.2773438 Td <0027> Tj    # D\n10.5842743 0 Td <0028> Tj     # E\n9.7756042 0 Td <0036> Tj      # S\n9.7756042 0 Td <0026> Tj      # C\n10.5842743 0 Td <0035> Tj     # R\n10.5842743 0 Td <002C> Tj     # I\n4.0719757 0 Td <0033> Tj      # P\n9.7756042 0 Td <0037> Tj      # T\n8.9526215 0 Td <002C> Tj      # I\n4.0719757 0 Td <0032> Tj      # O\n11.4001007 0 Td <0031> Tj     # N\nET\n# some part skipped......\nBT\n/F4 14.666667 Tf\n1 0 0 -1 0 .47981739 Tm\n0 -13.2773438 Td <0037> Tj    # T\n8.9526215 0 Td <0035> Tj      # R\n10.5842743 0 Td <0036> Tj     # S\n9.7756042 0 Td <0029> Tj      # F\nET\nQ\nq\n.75 0 0 .75 152.25 152.993042 cm\n/G3 gs\nBT\n/F4 14.666667 Tf\n1 0 0 -1 0 .47981739 Tm\n0 -13.2773438 Td <0028> Tj    # E\n9.7756042 0 Td <0010> Tj      # -\n4.8806458 0 Td <0025> Tj      # B\n9.7756042 0 Td <0024> Tj      # A\n9.7756042 0 Td <0031> Tj      # N\n10.5842743 0 Td <002E> Tj     # K\n9.7756042 0 Td <002C> Tj      # I\n4.0719757 0 Td <0031> Tj      # N\n10.5842743 0 Td <002A> Tj     # G\nET\nQ\nq\n.75 0 0 .75 152.25 165.641968 cm\n/G3 gs\nBT\n/F4 14.666667 Tf\n1 0 0 -1 0 .47981739 Tm\n0 -13.2773438 Td <0027> Tj    # D\n10.5842743 0 Td <0025> Tj     # B\nET"
  },
  {
    "url": "https://stackoverflow.com/questions/73485235/how-to-extract-table-data-from-pdf",
    "body": "func readPdf(path string) {\n\tr, err := pdf.Open(path)\n\tpanic(err)\n\t// extract all rectangles\n\tvar fieldRects []FieldRect\n\tp := r.Page(1)\n\tc := p.Content()\n\t// font := p.Font(p.Fonts()[0])\n\t// fmt.Printf(\"font.Widths(): %v\\n\", font.Widths())\n\tfor _, r := range c.Rect {\n\t\tfieldRects = append(fieldRects, FieldRect{\n\t\t\trect:  r,\n\t\t\ttexts: nil,\n\t\t})\n\t}\n\t// put text(glyph) into their corresponding rectangles\n\tfor _, t := range c.Text {\n\t\tfor i := range fieldRects {\n\t\t\tfr := &fieldRects[i]\n\t\t\tif fr.rect.Min.X < t.X && fr.rect.Min.Y < t.Y &&\n\t\t\t\tfr.rect.Max.X > t.X && fr.rect.Max.Y > t.Y {\n\t\t\t\tfr.texts = append(fr.texts, t)\n\t\t\t}\n\t\t}\n\t}\n\t// these values can also be derived from font size to gain\n\t// even more robustness\n\tconst NEWLINE_TOLERATION = 2\n\t// unfortunately the pdf you sent does not have proper font\n\t// width information, so this is the best we can get without\n\t// inferring width information from the glyph shape itself.\n\tconst SPACE_TOLERATION = 11\n\t// sort text(glyph) by position within rectangles, then concat\n\tfor i := range fieldRects {\n\t\tfr := &fieldRects[i]\n\t\tsort.Slice(fr.texts, func(i, j int) bool {\n\t\t\tdeltaY := fr.texts[i].Y - fr.texts[j].Y\n\t\t\tif math.Abs(deltaY) < NEWLINE_TOLERATION { // tolerate some vertical deviation\n\t\t\t\treturn fr.texts[i].X < fr.texts[j].X // on the same line\n\t\t\t}\n\t\t\treturn deltaY > 0 // not on the same line\n\t\t})\n\t\tfor _, f := range fr.texts {\n\t\t\tif fr.lastPos != nil {\n\t\t\t\tif fr.lastPos.Y-f.Y > NEWLINE_TOLERATION { // new line\n\t\t\t\t\tfr.resultText += \"\\n\"\n\t\t\t\t}\n\t\t\t\tif f.X-fr.lastPos.X > SPACE_TOLERATION { // space\n\t\t\t\t\tfr.resultText += \" \"\n\t\t\t\t}\n\t\t\t}\n\t\t\tfr.resultText += f.S\n\t\t\tfr.lastPos = &pdf.Point{X: f.X, Y: f.Y}\n\t\t}\n\t\tif fr.resultText == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"====== pos: %v, %v; text: \\n%s\\n\", fr.rect.Min, fr.rect.Max, fr.resultText)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73485235/how-to-extract-table-data-from-pdf",
    "body": "====== pos: {0 0}, {794 1123}; text:\nDATE DESCRIPTION BR ENTRY BALANCE\n01/07 Beginning Balance 1,000.00\n02/07 TRSF 0207/DBXO 1 DB 999.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n03/07 TRSF 0307/DBXO 2 DB 997.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n04/07 TRSF 0407/DBXO 3 DB 994.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n05/07 TRSF 0507/DBXO 4 DB 990.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n06/07 TRSF 0607/DBXO 5 DB 985.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n07/07 TRSF 0707/DBXO 6 DB 979.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n08/07 TRSF 0807/DBXO 7 DB 972.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n09/07 TRSF 0907/DBXO 8 DB 964.00\nE-BANKING A/SB24313/\nDB Q0321XXXX\nX56\nLAWSON\n Continued on next page\n====== pos: {372.75 87.296265}, {447 110.44519100000001}; text:\nContinue\n====== pos: {447.75 87.296265}, {522 110.44519100000001}; text:\nd on next page\n====== pos: {147.75 111.19519}, {297 134.34411599999999}; text:\nX56\nLAWSON\n====== pos: {147.75 135.094116}, {222 183.540893}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 135.094116}, {297 208.83874500000002}; text:\nX56\nLAWSON\n0907/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 209.58875}, {222 258.035527}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 209.58875}, {297 283.33337900000004}; text:\nX56\nLAWSON\n0807/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 284.08337}, {222 332.530147}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 284.08337}, {297 357.827999}; text:\nX56\nLAWSON\n0707/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 358.578}, {222 407.024777}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 358.578}, {297 432.322629}; text:\nX56\nLAWSON\n0607/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 433.07263}, {222 481.519407}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 433.07263}, {297 506.81725900000004}; text:\nX56\nLAWSON\n0507/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 507.56726}, {222 556.0140369999999}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 507.56726}, {297 581.311889}; text:\nX56\nLAWSON\n0407/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 582.06189}, {222 630.508667}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 582.06189}, {297 655.806519}; text:\nX56\nLAWSON\n0307/DBXO\nA/SB24313/\nQ0321XXXX\n====== pos: {147.75 656.55652}, {222 705.003297}; text:\nTRSF\nE-BANKING\nDB\n====== pos: {222.75 656.55652}, {297 730.301149}; text:\nnce\n0207/DBXO\nA/SB24313/\nQ0321XXXX"
  },
  {
    "url": "https://stackoverflow.com/questions/73469128/hide-sensitive-fields-in-uber-zap-go",
    "body": "package main\nimport (\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/buffer\"\n\t\"go.uber.org/zap/zapcore\"\n)\ntype MyEncoder struct {\n\tzapcore.Encoder\n}\nfunc (m *MyEncoder) EncodeEntry(entry zapcore.Entry, fields []zapcore.Field) (*buffer.Buffer, error) {\n\tfiltered := make([]zapcore.Field, 0, len(fields))\n\tfor _, field := range fields {\n\t\tif field.Key == \"skip\" || field.Type == zapcore.Int64Type {\n\t\t\tcontinue\n\t\t}\n\t\tfiltered = append(filtered, field)\n\t}\n\treturn m.Encoder.EncodeEntry(entry, filtered)\n}\nfunc main() {\n\t_ = zap.RegisterEncoder(\"mine\", func(config zapcore.EncoderConfig) (zapcore.Encoder, error) {\n\t\tencoder := zapcore.NewConsoleEncoder(config)\n\t\treturn &MyEncoder{encoder}, nil\n\t})\n\tconfig := zap.NewDevelopmentConfig()\n\tconfig.Encoding = \"mine\"\n\tlog, _ := config.Build()\n\tsugar := log.Sugar()\n\tsugar.Infow(\"Some message\", \"skip\", \"skipped\", \"notskip\", \"present\", \"alsoskipping\", int64(1))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71457570/how-to-return-struct-from-golang-error-method",
    "body": "// main.go\npackage main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/labstack/echo\"\n\tlog \"github.com/sirupsen/logrus\"\n)\nfunc main() {\n\te := echo.New()\n\te.GET(\"process\", PostHandler)\n\te.HTTPErrorHandler = customHTTPErrorHandler\n\tlog.Fatal(e.Start(\":3000\"))\n}\nfunc PostHandler(ctx echo.Context) error {\n\tx := 0\n\tif x == 0 {\n\t\treturn NewTypeError(http.StatusInternalServerError, 1024, \"Invalid arguments\")\n\t}\n\treturn ctx.JSON(http.StatusOK, \"message\")\n}\nfunc customHTTPErrorHandler(err error, c echo.Context) {\n\tfmt.Println(\"Inside custom error\")\n\tvar rerr *Error\n\tswitch e := err.(type) {\n\tcase *Error:\n\t\trerr = e\n\tcase *echo.HTTPError:\n\t\t// todo: improve error conversion\n\t\trerr = NewTypeError(e.Code, EchoHttpError, e.Error())\n\tdefault:\n\t\trerr = NewTypeError(http.StatusInternalServerError, InternalError, e.Error())\n\t}\n\tc.JSON(rerr.Code, rerr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70999808/how-to-test-an-expected-formatted-error-in-idiomatic-go",
    "body": "package main\nimport (\n    \"errors\"\n\t\"fmt\"\n\t\"path/filepath\"\n)\ntype ValidationError struct {\n\tWantExtension string\n\tGotExtension  string\n}\nfunc (v ValidationError) Error() string {\n\treturn fmt.Sprintf(\"extension %q not accepted, please use a %s file.\", v.GotExtension, v.WantExtension)\n}\nfunc Validate(fileName string) error {\n\tfileExtension := filepath.Ext(fileName)\n\tif fileExtension != \".vcf\" {\n\t\treturn ValidationError{WantExtension: \".vcf\", GotExtension: fileExtension}\n\t}\n\treturn nil\n}\nfunc main() {\n\tfileName := \"something.jpg\"\n\terr := Validate(fileName)\n    var vErr ValidationError\n\tif errors.As(err, &vErr) {\n\t\t// you can now use vErr.WantExtension and vErr.GotExtension\n\t\tfmt.Println(vErr)\n\t\tfmt.Println(vErr.WantExtension)\n\t\tfmt.Println(vErr.GotExtension)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70999808/how-to-test-an-expected-formatted-error-in-idiomatic-go",
    "body": "func TestValidate(t *testing.T) {\n\ttestCases := []struct {\n\t\tname        string\n\t\tfileName    string\n\t\texpectedErr error\n\t}{\n\t\t{\n\t\t\tname:     \"happy-path\",\n\t\t\tfileName: \"file.vcf\",\n\t\t},\n\t\t{\n\t\t\tname:        \"wrong-extension\",\n\t\t\tfileName:    \"file.md\",\n\t\t\texpectedErr: ValidationError{WantExtension: \".vcf\", GotExtension: \".md\"},\n\t\t},\n\t}\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\terr := Validate(tc.fileName)\n\t\t\tif err != nil {\n\t\t\t\tif tc.expectedErr == nil {\n\t\t\t\t\tt.Errorf(\"unexpected error: %v\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tvar want ValidationError\n\t\t\t\tvar got ValidationError\n\t\t\t\tif w, g := errors.As(tc.expectedErr, &want), errors.As(err, &got); w == g && w {\n\t\t\t\t\t// Both errors are ValidationErrors\n\t\t\t\t\tassertValidationErrorsEqual(t, want, got)\n\t\t\t\t} else if w != g {\n\t\t\t\t\t// The expected and actual error differ in type\n\t\t\t\t\tt.Errorf(\"wanted error of type %T, got error of type %T\", tc.expectedErr, err)\n\t\t\t\t} else {\n\t\t\t\t\t// Neither error is a ValidationError so we just assert that they produce the same error message\n\t\t\t\t\tassertErrorMessagesEqual(t, tc.expectedErr, err)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\nfunc assertErrorMessagesEqual(t *testing.T, want error, got error) {\n\tif w, g := want.Error(), got.Error(); w != g {\n\t\tt.Errorf(\"want %q, got %q\", w, g)\n\t}\n}\nfunc assertValidationErrorsEqual(t *testing.T, want ValidationError, got ValidationError) {\n\tif want.WantExtension != got.WantExtension || want.GotExtension != got.GotExtension {\n\t\tt.Errorf(\"want %v, got %v\", want, got)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69454107/how-to-get-values-from-list-nested-within-list-in-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype Trunk struct {\n\tPersons []Person `json:\"persons\"`\n}\ntype Person struct {\n\tName    string `json:\"name\"`\n\tSurname string `json:\"surname\"`\n\tData    []User `json:\"data\"`\n}\ntype User struct {\n\tUserid          string `json:\"userid\"`\n\tUsername        string `json:\"username\"`\n\tRegistered_date string `json:\"registered_date\"`\n}\nfunc main() {\n\trawstring := []byte(`\n\t{\n       \"persons\":[\n          {\n             \"name\":\"mark\",\n             \"surname\":\"zuckerberg\",\n             \"data\":[\n                {\n                   \"userid\":\"09210\",\n                   \"username\":\"mark290\",\n                   \"registered_date\":\"10-01-2017\"\n                },\n                {\n                   \"userid\":\"092240\",\n                   \"username\":\"mark291\",\n                   \"registered_date\":\"11-01-2017\"\n                }\n             ]\n          },\n          {\n             \"name\":\"bill\",\n             \"surname\":\"clinton\",\n             \"data\":[\n                {\n                   \"userid\":\"0442340\",\n                   \"username\":\"billy\",\n                   \"registered_date\":\"10-01-2000\"\n                },\n                {\n                   \"userid\":\"89472894\",\n                   \"username\":\"billary\",\n                   \"registered_date\":\"11-01-2015\"\n                }\n             ]\n          }\n       ]\n    }\n\t`)\n\tjsondata := Trunk{}\n\tif err := json.Unmarshal(rawstring, &jsondata); err == nil {\n\t\tfmt.Println(jsondata)\n\t\t// print first username of first person\n\t\t// fmt.Println(jsondata.Persons[0].Data[0].Username)\n\t\t// print each username of each person\n\t\tfor _, person := range jsondata.Persons {\n\t\t\tfor _, d := range person.Data {\n\t\t\t\tfmt.Println(d.Username)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfmt.Println(\"Unmarshal failed!\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69393601/how-to-setup-key-based-mutex-lock-and-unlock-in-golang",
    "body": "type StringKeyLock struct {\n    locks map[string]*sync.Mutex\n    mapLock sync.Mutex // to make the map safe concurrently\n}\nfunc NewStringKeyLock() *StringKeyLock {\n    return &StringKeyLock{locks: make(map[string]*sync.Mutex)}\n}\nfunc (l *StringKeyLock) getLockBy(key string) *sync.Mutex {\n    l.mapLock.Lock()\n    defer l.mapLock.Unlock()\n\n    ret, found := l.locks[key]\n    if found {\n        return ret\n    }\n    ret = &sync.Mutex{}\n    l.locks[key] = ret\n    return ret\n}\nfunc (l *StringKeyLock) Lock(key string) {\n    l.getLockBy(key).Lock()\n}\n\nfunc (l *StringKeyLock) Unlock(key string) {\n    l.getLockBy(key).Unlock()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68636506/http-retry-for-request-timeout-408",
    "body": "package main\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"github.com/hashicorp/go-retryablehttp\"\n)\nfunc main() {\n\tretryClient := retryablehttp.NewClient()\n\tretryClient.RetryMax = 10\n\tretryClient.CheckRetry = func(ctx context.Context, resp *http.Response, err error) (bool, error) {\n\t\tok, e := retryablehttp.DefaultRetryPolicy(ctx, resp, err)\n\t\tif !ok && resp.StatusCode == http.StatusRequestTimeout {\n\t\t\treturn true, nil\n\t\t\t// return true for a retry,\n\t\t\t// if e is nil,\n\t\t\t// you might want to populate that error\n\t\t\t// to propagate it.\n\t\t\t// see https://github.com/hashicorp/go-retryablehttp/blob/02c1586c8f14be23e7eeb522f1094afbabf45e93/client.go#L673\n\t\t}\n\t\treturn ok, e\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68547099/how-to-pick-a-random-number-every-time-from-a-list",
    "body": "package main\nimport (\n  \"fmt\"\n  \"math/rand\"\n  \"time\"\n)\n// split breaks buf into a slice of slices whose lengths\n// are randomly chosen from sizes, except for the last slice.\n// The last slice's length is less than or equal to a size that\n// was chosen from sizes, but may be larger than some other size\n// found in sizes.\nfunc split(r *rand.Rand, buf []byte, sizes []int) [][]byte {\n    var chunk []byte\n    chunks := make([][]byte, 0)\n    for len(buf) > 0 {\n        sz := sizes[r.Intn(len(sizes))]\n        if sz > len(buf) {\n           sz = len(buf)\n        }\n        chunk, buf = buf[:sz], buf[sz:]\n        chunks = append(chunks, chunk)\n    }\n    return chunks\n}\nfunc main() {\n    // Go's RNG is deterministic unless seeded with current time.\n    s := int64(time.Now().Nanosecond())\n    r := rand.New(rand.NewSource(s))\n    sizes := []int{2,3,5,7}\n    buf := []byte{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}\n    fmt.Printf(\"result=%v\\n\", split(r, buf, sizes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68547099/how-to-pick-a-random-number-every-time-from-a-list",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n)\ntype rndReader struct {\n\tR       io.Reader\n\tRnd     interface{ Intn(n int) int }\n\tbuf     []byte\n\tlastErr error\n}\nfunc (r *rndReader) Read(p []byte) (n int, err error) {\n\tif r.Rnd == nil {\n\t\tr.Rnd = rand.New(rand.NewSource(time.Now().Unix()))\n\t}\n\tif r.lastErr != nil && len(r.buf) < 1 {\n\t\treturn 0, r.lastErr\n\t}\n\t// rather than a function argument (n), take len(p)\n\tj := len(p)\n\tif r.lastErr == nil {\n\t\tn, err = r.R.Read(p)            // read to p\n\t\tr.buf = append(r.buf, p[:n]...) // save the read\n\t\tr.lastErr = err\n\t}\n\tp = p[:0]                           // reset p, prepare it to receive the random chunk\n\tk := min(r.Rnd.Intn(j), len(r.buf)) // select a random k\n\tp = append(p, r.buf[:k]...)         // copy the desired portion from the internal buf to p\n\tcopy(r.buf, r.buf[k:])              // re arrange the internal buffer\n\tr.buf = r.buf[:len(r.buf)-k]        // adjust its len.\n\treturn len(p), nil\n}\nfunc min(n, k int) int {\n\tif n > k {\n\t\treturn k\n\t}\n\treturn n\n}\nfunc ExampleFromStrings() {\n\tin := strings.Repeat(`12345`, 4)\n\ts := strings.NewReader(in)\n\tr := rndReader{R: s, Rnd: rand.New(rand.NewSource(1))}\n\tout := make([]byte, 3)\n\tfor {\n\t\tn, err := r.Read(out)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(`n=%v err=%v buf=\"%s\"`+\"\\n\", n, err, out[:n])\n\t}\n\t// Output:\n\t// n=2 err=<nil> buf=\"12\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"34\"\n\t// n=2 err=<nil> buf=\"51\"\n\t// n=1 err=<nil> buf=\"2\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=1 err=<nil> buf=\"3\"\n\t// n=2 err=<nil> buf=\"45\"\n\t// n=1 err=<nil> buf=\"1\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"23\"\n\t// n=1 err=<nil> buf=\"4\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"51\"\n\t// n=1 err=<nil> buf=\"2\"\n\t// n=2 err=<nil> buf=\"34\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=1 err=<nil> buf=\"5\"\n}\nfunc ExampleFromBytes() {\n\tin := []byte(strings.Repeat(`12345`, 4))\n\ts := bytes.NewBuffer(in)\n\tr := rndReader{R: s, Rnd: rand.New(rand.NewSource(1))}\n\tout := make([]byte, 3)\n\tfor {\n\t\tn, err := r.Read(out)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(`n=%v err=%v buf=\"%s\"`+\"\\n\", n, err, out[:n])\n\t}\n\t// Output:\n\t// n=2 err=<nil> buf=\"12\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"34\"\n\t// n=2 err=<nil> buf=\"51\"\n\t// n=1 err=<nil> buf=\"2\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=1 err=<nil> buf=\"3\"\n\t// n=2 err=<nil> buf=\"45\"\n\t// n=1 err=<nil> buf=\"1\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"23\"\n\t// n=1 err=<nil> buf=\"4\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=2 err=<nil> buf=\"51\"\n\t// n=1 err=<nil> buf=\"2\"\n\t// n=2 err=<nil> buf=\"34\"\n\t// n=0 err=<nil> buf=\"\"\n\t// n=1 err=<nil> buf=\"5\"\n}\nfunc main() {}"
  },
  {
    "url": "https://stackoverflow.com/questions/68391706/drag-element-on-playwright",
    "body": "async dragElement(element: ElementHandle, xOffset: number, yOffset: number, page: Page): Promise<void> {\n  const elementBox = await element.boundingBox();\n  if (!elementBox) {\n    throw new Error('Unable to find bounding box on element');\n  }\n  const elementCenterX = elementBox.x + elementBox.width / 2;\n  const elementCenterY = elementBox.y + elementBox.height / 2;\n  await element.hover();\n  await page.mouse.down();\n  await page.mouse.move(elementCenterX + xOffset, elementCenterY + yOffset);\n  await page.mouse.up();\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67737908/how-to-add-choices-to-database-field-using-gorm",
    "body": "type Role string\nconst (\n\tAdmin  Role = \"admin\"\n\tUser   Role = \"user\"\n)\nfunc (r *Role) Scan(value interface{}) error {\n\t*r = Role(value.([]byte))\n\treturn nil\n}\nfunc (r Role) Value() (driver.Value, error) {\n\treturn string(r), nil\n}\ntype User struct{\n   ID        int64   `json:\"id\"`\n   FirstName string  `gorm:\"size:100\" json:\"first_name\"`\n   LastName  string  `gorm:\"size:100\" json:\"last_name\"`\n   Email     *string `gorm:\"size:250;index;not null;index:email;unique\" json:\"email\"`\n   Role      Role    `sql:\"type:user_access\"` // PostGreSQL\n   Role      Role    `json:\"role\" sql:\"type:ENUM('admin', 'user')\"` // MySQL\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67152754/how-to-dont-repeat-the-same-fields-for-each-proto-structure",
    "body": "package foo\nimport (\n\t\"github.com/golang/protobuf/proto\"\n\t\"github.com/golang/protobuf/ptypes\"\n\t\"foo/grpcgen\"\n\t\"testing\"\n)\nvar withmeta = &grpcgen.LeagueWithMeta{\n\tMetadata: &grpcgen.Metadata{\n\t\tId: 1000,\n\t\tCreatedAt: ptypes.TimestampNow(),\n\t\tUpdatedAt: ptypes.TimestampNow(),\n\t},\n\tName: \"foo\",\n}\nvar nometa = &grpcgen.LeagueNoMeta{\n\tId: 1000,\n\tCreatedAt: ptypes.TimestampNow(),\n\tUpdatedAt: ptypes.TimestampNow(),\n\tName: \"foo\",\n}\nfunc BenchmarkEncProto(b *testing.B) {\n\tb.Run(\"encode with meta\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tb, _ := proto.Marshal(withmeta)\n\t\t\tif b == nil {\n\t\t\t\tpanic(\"not marshaled\")\n\t\t\t}\n\t\t}\n\t})\n\tb.Run(\"encode without meta\", func(b *testing.B) {\n\t\tb.ReportAllocs()\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\tb, _ := proto.Marshal(nometa)\n\t\t\tif b == nil {\n\t\t\t\tpanic(\"not marshaled\")\n\t\t\t}\n\t\t}\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66808663/how-to-verify-a-jwt-token-in-go-and-load-it-into-a-struct",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/lestrrat-go/jwx/jwa\"\n\t\"github.com/lestrrat-go/jwx/jwk\"\n\t\"github.com/lestrrat-go/jwx/jwt\"\n)\nfunc main() {\n\ttoken, pubKey, err := generateJWT()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// JWT has been generated - lets output it (and the certificate)\n\tfmt.Printf(\"JWT: %s\\nPublic Key: %s\", token, pubKey)\n\tparsedToken, err := parseJWT(token, pubKey)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Standard claims can be accessed as follows:\n\tfmt.Printf(\"Iss: %v\\n\", parsedToken.IssuedAt())\n\tfmt.Printf(\"Exp: %v\\n\", parsedToken.Expiration())\n\tfmt.Printf(\"Aud: %v\\n\", parsedToken.Audience())\n\t// Private Claims\n\tfmt.Printf(\"Private Claims: %#v\\n\", parsedToken.PrivateClaims())\n}\n// generateJWT - Generates a JWT (and signs it with a generated certificate)\nfunc generateJWT() ([]byte, []byte, error) {\n\t// We will start by generating a test token for which a key will be needed\n\tprivKey, err := rsa.GenerateKey(rand.Reader, 2048)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to generate private key: %s\\n\", err)\n\t}\n\t// Preparation:\n\t// For demonstration purposes, we need to do some preparation\n\t// Create a JWK key to sign the token (and also give a KeyID)\n\trealKey, err := jwk.New(privKey)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to create JWK: %s\\n\", err)\n\t}\n\trealKey.Set(jwk.KeyIDKey, `mykey`)\n\t// Create the token\n\ttoken := jwt.New()\n\ttoken.Set(`foo`, `bar`)\n\t// Set a few standard keys\n\ttoken.Set(jwt.IssuedAtKey, time.Now())\n\ttoken.Set(jwt.ExpirationKey,  time.Now().Add(time.Hour)) // lets make it expire in an hour\n\ttoken.Set(jwt.AudienceKey, \"lotsOfUsers\")\n\t// Sign the token and generate a payload\n\tsigned, err := jwt.Sign(token, jwa.RS256, realKey)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"failed to generate signed payload: %s\\n\", err)\n\t}\n\t// For completeness lets encode the public key (so the decoding matches what someone just performing the decode would need to do)\n\tpublickey := &privKey.PublicKey\n\tpublicKeyBytes, err := x509.MarshalPKIXPublicKey(publickey)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"error when dumping publickey: %s \\n\", err)\n\t}\n\tpublicKeyBlock := &pem.Block{\n\t\tType:  \"PUBLIC KEY\",\n\t\tBytes: publicKeyBytes,\n\t}\n\tpublicKeyBuff := new(bytes.Buffer)\n\terr = pem.Encode(publicKeyBuff, publicKeyBlock)\n\tif err != nil {\n\t\treturn nil, nil, fmt.Errorf(\"error when encode public pem: %s \\n\", err)\n\t}\n\tencodedPubKey := publicKeyBuff.Bytes()\n\treturn signed, encodedPubKey, nil\n}\n// parse the passed in JWT with the passed in certificate and return a map of claims\nfunc parseJWT(signedJWT []byte, encodedPubKey []byte) (jwt.Token, error){\n\tvar keyset jwk.Set\n\tprivPem, _ := pem.Decode(encodedPubKey)\n\tif privPem == nil {\n\t\treturn nil, fmt.Errorf(\"Failed to decode PEM block\")\n\t}\n\tprivPemBytes := privPem.Bytes\n\tvar parsedKeyInt interface{}\n\tvar err error\n\tif parsedKeyInt, err = x509.ParsePKIXPublicKey(privPemBytes); err != nil {\n\t\treturn nil, fmt.Errorf(\"Failed to decode cert: %s\", err)\n\t}\n\tparsedKey, ok := parsedKeyInt.(*rsa.PublicKey)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"public key not expected type\")\n\t}\n\t// Now create a key set that users will use to verity the signed payload against\n\tpubKey, err := jwk.New(parsedKey)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create JWK: %s\", err)\n\t}\n\t// Remember, the key must have the proper \"kid\"\n\tpubKey.Set(jwk.KeyIDKey, \"mykey\")\n\t// This key set contains only one key (the correct one)\n\tkeyset = jwk.NewSet()\n\tkeyset.Add(pubKey)\n\tparsedToken, err := jwt.Parse(\n\t\tsignedJWT,\n\t\t// Tell the parser that you want to use this keyset\n\t\tjwt.WithKeySet(keyset),\n\t\t// Tell the parser that you can trust this KeySet, and that\n\t\t// yo want to use the sole key in it\n\t\tjwt.UseDefaultKey(true),\n\t\t// We want to validate the token; e.g. it should not have expired\n\t\tjwt.WithValidate(true),\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to parse payload: %s\", err)\n\t}\n\treturn parsedToken, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65763235/checking-the-row-existence-before-insertion-using-cassandra-within-a-go-applicat",
    "body": "func (r Repository) Insert(ctx context.Context, user User) error {\n\tvar (\n\t\temailAddressCAS, firstNameCAS, idCAS, lastNameCAS string\n\t\tcreatedAtCAS                                      time.Time\n\t)\n\tquery := `\nINSERT INTO users (email_address, created_at, first_name, id, last_name)\nVALUES (?, ?, ?, ?, ?) IF NOT EXISTS\n`\n\tapplied, err := r.session.Query(\n\t\tquery,\n\t\tuser.EmailAddress,\n\t\tuser.CreatedAt,\n\t\tuser.FirstName,\n\t\tuser.LastName,\n\t\tuser.CreateAt,\n\t).\n\tWithContext(ctx).\n\tScanCAS(&emailAddressCAS, &createdAtCAS, &firstNameCAS, &idCAS, &lastNameCAS)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif !applied {\n\t\t// Check CAS vars here if you want.\n\t\treturn // your custom error implying a duplication\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64146997/reading-data-just-written-to-a-temp-file",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\ttmpFile, err := ioutil.TempFile(\"\", fmt.Sprintf(\"%s-\", filepath.Base(os.Args[0])))\n\tif err != nil {\n\t\tlog.Fatal(\"Could not create temporary file\", err)\n\t}\n\tdefer tmpFile.Close()\n\tfmt.Println(\"Created temp file: \", tmpFile.Name())\n\tfmt.Println(\"Writing some data to the temp file\")\n\tif _, err = tmpFile.WriteString(\"test data\"); err != nil {\n\t\tlog.Fatal(\"Unable to write to temporary file\", err)\n\t} else {\n\t\tfmt.Println(\"Data should have been written\")\n\t}\n\tfmt.Println(\"Trying to read the temp file now\")\n\t// Seek the pointer to the beginning\n\ttmpFile.Seek(0, 0)\n\ts := bufio.NewScanner(tmpFile)\n\tfor s.Scan() {\n\t\tfmt.Println(s.Text())\n\t}\n\tif err = s.Err(); err != nil {\n\t\tlog.Fatal(\"error reading temp file\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63577003/how-to-convert-entire-nested-struct-into-map",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/mitchellh/mapstructure\"\n)\nfunc main() {\n\ttype Emails struct {\n\t\tMail []string\n\t}\n\ttype Person struct {\n\t\tName   string\n\t\tAge    int\n\t\tEmails Emails\n\t\tExtra  map[string]string\n\t}\n\t// This input can come from anywhere, but typically comes from\n\t// something like decoding JSON where we're not quite sure of the\n\t// struct initially.\n\tmails := []string{\"foo@bar.com\", \"foo2@bar.com\"}\n\tinput := Person{\n\t\tName:   \"foo\",\n\t\tAge:    25,\n\t\tEmails: Emails{Mail: mails},\n\t\tExtra:  map[string]string{\"family\": \"bar\"},\n\t}\n\tresult := map[string]interface{}{}\n\terr := mapstructure.Decode(input, &result)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v\", result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63559737/golang-os-close-function-works-but-os-remove-function-does-not",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\nconst metaFileName = \"./metadata.txt\"\nfunc main() {\n\tvar (\n\t\terr                   error\n\t\ttmpFile, openMetaFile *os.File\n\t)\n\tfmt.Println(\"Hello\")\n\tif tmpFile, err = os.Create(metaFileName); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = tmpFile.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif openMetaFile, err = os.Open(metaFileName); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = openMetaFile.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err = os.Remove(metaFileName); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Success\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62436071/tls-handshake-failure-when-enabling-tls-for-rabbitmq-with-streadway-amqp",
    "body": "cert, err := tls.LoadX509KeyPair(\"./rabbitmq.test+3-client.pem\", \"./rabbitmq.test+3-client-key.pem\")\n\t// Load CA cert\n\tcaCert, err := ioutil.ReadFile(\"./rootCA.pem\") // The same you configured in your MQ server\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tcaCertPool := x509.NewCertPool()\n\tcaCertPool.AppendCertsFromPEM(caCert)\n\ttlsConfig := &tls.Config{\n\t\tCertificates: []tls.Certificate{cert}, // from tls.LoadX509KeyPair\n\t\tRootCAs:      caCertPool,\n\t\t// ...other options are just the same as yours\n    }\n\tconn, err := amqp.DialTLS(\"amqps://test:secret@127.0.0.1:5671\", tlsConfig)\n\tif err != nil {\n\t\tpanic(err) // does not panic!\n\t}\n    // ... application code"
  },
  {
    "url": "https://stackoverflow.com/questions/62306823/scan-db-results-into-nested-struct-arrays",
    "body": "for stmt.Next() {\n      var userId, userName, userEmail, firstName, lastName string\n         err := stmt.Scan(&userId, &userName, &userEmail, &firstName,&lastName)\n        if err != nil {\n            panic(err.Error())\n        }\n        user:=findUser(users,userId)\n        if user==nil {\n           // Add new user\n           user:=&User{Id:userId,Name:userName,Email:userEmail}\n           // Add user to users\n        }\n        user.Profiles=append(user.Profiles,&Profile{/* Fill profile fields here*/}))\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/62231235/context-without-channels-in-the-same-thread-of-execution",
    "body": "func (s *Server) doWork(ctx context.Context) int {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n    r := rand.Intn(100)\n    log.Printf(\"Going to nap for %d\", r)\n    select {\n    case <- time.After(time.Duration(r) * time.Millisecond):\n        return r\n    case <- ctx.Done():\n        return -1\n    }\n}\nfunc (s *Server)  GetValueWithTimeout(ctx context.Context, maxTime time.Duration) int {\n    d := time.Now().Add(maxTime)\n    ctx, cancel := context.WithDeadline(ctx, d)\n    defer cancel()\n    return s.doWork(ctx)\n}\nfunc main() {\n    const maxTime = 50 * time.Millisecond\n    rand.Seed(time.Now().UTC().UnixNano())\n    s := NewServer()\n    for i :=0; i < 10; i++ {\n        v := s.GetValueWithTimeout(context.Background(), maxTime)\n        log.Print(v)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61180653/tle-time-limit-exceeded-error-for-golang-but-not-python-using-similar-logic",
    "body": "package main\nimport (\n    \"fmt\"\n    \"sort\"\n    \"bufio\"\n    \"os\"\n)\nfunc main() {\n    var N int\n    in := bufio.NewReader(os.Stdin)\n    fmt.Fscan(in, &N)\n    for i := 1; i <= N; i++ {\n        var house, budget int\n        fmt.Fscan(in, &house, &budget)\n        prices := make([]int, house)\n        for j := 0; j < house; j++ {\n            fmt.Fscan(in, &prices[j])\n        }\n        sort.Ints(prices)\n        j := 0\n        for ; j < house; j++ {\n            if prices[j] > budget {\n                break\n            }\n            budget -= prices[j]\n        }\n        fmt.Printf(\"Case #%d: %d\\n\", i , j)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61077483/unable-to-unmarshal-golang-response",
    "body": "// Inventory ...\ntype Inventory struct {\n    Availabilities []Availability `json:\"availabilities\"`\n}\n// Availability ...\ntype Availability struct {\n    Sku                    string   `json:\"sku\"`\n    SellerID               string   `json:\"sellerId\"`\n    SaleChannelExclusivity string   `json:\"saleChannelExclusivity\"`\n    ScheduledDelivery      bool     `json:\"scheduledDelivery\"`\n    IsGiftCard             bool     `json:\"isGiftCard\"`\n    IsService              bool     `json:\"isService\"`\n    Pickup                 Statuses `json:\"pickup\"`\n    Shipping               Statuses `json:\"shipping\"`\n}\n// Statuses ..\ntype Statuses struct {\n    Status      string `json:\"status\"`\n    Purchasable bool   `json:\"purchasable\"`\n}\nfunc (pr *Program) checkInventory() {\n    url := fmt.Sprintf(\"https://www.bestbuy.ca/ecomm-api/availability/products?accept-language=en-CA&skus=%s\", pr.Sku)\n    log.Infof(\"URL %s\", url)\n    resp, err := http.Get(url)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n    bodyBytes, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatal(err)\n    }\n    body := bytes.TrimPrefix(bodyBytes, []byte(\"\\xef\\xbb\\xbf\"))\n    log.Info(string(body))\n    var inv Inventory\n    err = json.Unmarshal([]byte(body), &inv)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Infof(\"%+v\", inv)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59918582/serialize-api-response-in-go",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n)\ntype apiResponse struct {\n\tKey_a kinkyFloat `json:\"key_a\"`\n\tKey_b kinkyFloat `json:\"key_b\"`\n\tKey_c int        `json:\"key_c\"`\n}\ntype kinkyFloat float64\nfunc (kf *kinkyFloat) UnmarshalJSON(b []byte) error {\n\tif len(b) == 0 {\n\t\treturn errors.New(\"empty input\")\n\t}\n\tif b[0] == '\"' {\n\t\t// Get the data between the leading and trailing \" bytes:\n\t\tb = b[1 : len(b)-1]\n\t\tif i := bytes.IndexByte(b, ','); i >= 0 {\n\t\t\tb[i] = '.'\n\t\t}\n\t}\n\t// At this point, we have b containing a set of bytes without\n\t// encolsing \"-s and with the decimal point presented by a dot.\n\tvar f float64\n\tif err := json.Unmarshal(b, &f); err != nil {\n\t\treturn err\n\t}\n\t*kf = kinkyFloat(f)\n\treturn nil\n}\nfunc main() {\n\tfor _, input := range []string{\n\t\t`{\"Key_a\": \"0,12\", \"Key_b\": \"12,34\", \"Key_c\": 42}`,\n\t\t`{\"Key_a\": 0.12, \"Key_b\": 12.34, \"Key_c\": 42}`,\n\t} {\n\t\tvar resp apiResponse\n\t\terr := json.Unmarshal([]byte(input), &resp)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"error: \", err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(\"OK: \", resp)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58577007/cgo-calling-functions-defined-in-a-c-that-are-in-namespaces",
    "body": "#include \"phoenix.h\" // My C wrapper header\n#include \"ctre/phoenix/motorcontrol/can/TalonSRX.h\" // Actual CPP header from library\n#define TALON(ctalon) ((ctre::TalonSRX*) ctalon) // Helper macro to make converting to library object easier. Optional\nnamespace ctre { // Specific to my library which has a lot of long namespaces. Unrelated to problem\n    using ctre::phoenix::motorcontrol::ControlMode;\n    using ctre::phoenix::motorcontrol::can::TalonSRX;\n}\nextern \"C\" {\n    CTalon* CTRE_CreateTalon(int port) {\n        return (CTalon*) new ctre::TalonSRX(port);\n    }\n    void CTRE_Set(CTalon* talon, double output) {\n        TALON(talon)->Set(ctre::ControlMode::PercentOutput, output);\n    }\n    void CTRE_Follow(CTalon* slave, CTalon* master) {\n        TALON(slave)->Follow(*(TALON(master)));\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57782293/how-to-limit-results-of-preload-of-gorm",
    "body": "type Topic struct {\n    Title string  `gorm:\"varchar(250);PRIMARY KEY\" json:\"title\"`\n    // assume the foreign key between two tables are both Title.\n    Items []*Item `gorm:\"foreignkey:Title;association_foreignkey:Title\" json:\"items,omitempty\"`\n}\nvar topics []Topic\ndb.Model(&Topic{}).Preload(\"Items\", func(tx *gorm.DB) *gorm.DB {\n    return tx.Joins(`JOIN LATERAL (\n        SELECT i.url FROM items i WHERE i.title = items.title ORDER BY i.topic_id DESC LIMIT 5\n        ) AS foo ON foo.url = items.url`)\n}).Find(&topics)"
  },
  {
    "url": "https://stackoverflow.com/questions/55554772/how-do-you-connect-to-mongodb-atlas-with-the-official-mongo-go-driver",
    "body": "package main\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar username = \"<username>\"\nvar host1 = \"<atlas host>\"  // of the form foo.mongodb.net\nfunc main() {\n    ctx := context.TODO()\n    pw, ok := os.LookupEnv(\"MONGO_PW\")\n    if !ok {\n        fmt.Println(\"error: unable to find MONGO_PW in the environment\")\n        os.Exit(1)\n    }\n    mongoURI := fmt.Sprintf(\"mongodb+srv://%s:%s@%s\", username, pw, host1)\n    fmt.Println(\"connection string is:\", mongoURI)\n    // Set client options and connect\n    clientOptions := options.Client().ApplyURI(mongoURI)\n    client, err := mongo.Connect(ctx, clientOptions)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n    err = client.Ping(ctx, nil)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n    fmt.Println(\"Connected to MongoDB!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55446776/how-to-transform-any-string-in-struct-field-name-like",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n)\nfunc ConvertFieldName(s string) string {\n\tr := regexp.MustCompile(\"(\\\\b|-|_|\\\\.)[a-z]\")\n\treturn r.ReplaceAllStringFunc(s, func(t string) string {\n\t\tif len(t) == 1 {\n\t\t\treturn strings.ToUpper(t)\n\t\t} else {\n\t\t\treturn strings.ToUpper(string(t[1]))\n\t\t}\n\t})\n}\nfunc main() {\n\tfmt.Println(ConvertFieldName(\"debug\"))\n\tfmt.Println(ConvertFieldName(\"a.string\"))\n\tfmt.Println(ConvertFieldName(\"a-string\"))\n\tfmt.Println(ConvertFieldName(\"a_string\"))\n\tfmt.Println(ConvertFieldName(\"-a.string\"))\n\tfmt.Println(ConvertFieldName(\"something-more-complex\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79473648/batching-channel-reads-with-error-handling-in-go",
    "body": "func batchCollector(ctx context.Context, batchSize int) error {\n    prodCh, errCh := concurrentProducer(ctx)\n    batch := make([]int, 0, batchSize)\n    for value:=range prodCh {\n        batch = append(batch, elem)\n        if len(batch) < batchSize {\n            continue\n         }\n         batchConsumer(batch)\n         batch = batch[:0]\n     }\n     // If error happened, throw away accumulated batch\n     // Check nonzero batch before error if you don't want to lose batches\n     var err error\n     select {\n       case err=<-errCh:\n       default:\n     }\n     if len(batch)>0 {\n        batchConsumer(batch)\n     }\n    return err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79322902/golang-go-playground-validator-how-to-include-single-inverted-comma-insi",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"slices\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype Award struct {\n\tTitle string `validate:\"validAward\"`\n}\nfunc main() {\n\tvalidate := validator.New()\n\t// Register custom validator\n\tvalidate.RegisterValidation(\"validAward\", validateAward)\n\ttestCases := []Award{\n\t\t{\"palm'dor\"},\n\t\t{\"level'dor\"},\n\t\t{\"state award\"},\n\t\t{\"other\"},\n\t}\n\tfor _, testCase := range testCases {\n\t\terr := validate.Struct(testCase)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Input: %q - Invalid (%v)\\n\", testCase.Title, err)\n\t\t} else {\n\t\t\tfmt.Printf(\"Input: %q - Valid\\n\", testCase.Title)\n\t\t}\n\t}\n}\nfunc validateAward(fl validator.FieldLevel) bool {\n\tvalue := fl.Field().String()\n\tvalidAwards := []string{\"palm'dor\", \"level'dor\", \"state award\"}\n\treturn slices.Contains(validAwards, value)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79137853/go-parse-in-ecdsa-public-key-in-uncompressed-hex-format-to-ecdsa-publickey",
    "body": "package main\nimport (\n\t\"crypto/ecdh\"\n\t\"crypto/ecdsa\"\n\t\"crypto/elliptic\"\n\t\"crypto/rand\"\n\t\"errors\"\n\t\"fmt\"\n\t\"math/big\"\n)\n// TODO: awaiting proposal acceptance: https://github.com/golang/go/issues/63963\nfunc UnmarshalPublicKey(ecdsaCurve elliptic.Curve, bytes []byte) (*ecdsa.PublicKey, error) {\n\tvar curve ecdh.Curve\n\tswitch ecdsaCurve {\n\tcase elliptic.P256():\n\t\tcurve = ecdh.P256()\n\tcase elliptic.P384():\n\t\tcurve = ecdh.P384()\n\tcase elliptic.P521():\n\t\tcurve = ecdh.P521()\n\tdefault:\n\t\treturn nil, errors.New(\"non-NIST curve\")\n\t}\n\t// For error checking.\n\tkey, err := curve.NewPublicKey(bytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// https://github.com/golang/go/issues/63963#issuecomment-1794706080\n\trawKey := key.Bytes()\n\tswitch key.Curve() {\n\tcase ecdh.P256():\n\t\treturn &ecdsa.PublicKey{\n\t\t\tCurve: elliptic.P256(),\n\t\t\tX:     big.NewInt(0).SetBytes(rawKey[1:33]),\n\t\t\tY:     big.NewInt(0).SetBytes(rawKey[33:]),\n\t\t}, nil\n\tcase ecdh.P384():\n\t\treturn &ecdsa.PublicKey{\n\t\t\tCurve: elliptic.P384(),\n\t\t\tX:     big.NewInt(0).SetBytes(rawKey[1:49]),\n\t\t\tY:     big.NewInt(0).SetBytes(rawKey[49:]),\n\t\t}, nil\n\tcase ecdh.P521():\n\t\treturn &ecdsa.PublicKey{\n\t\t\tCurve: elliptic.P521(),\n\t\t\tX:     big.NewInt(0).SetBytes(rawKey[1:67]),\n\t\t\tY:     big.NewInt(0).SetBytes(rawKey[67:]),\n\t\t}, nil\n\tdefault:\n\t\treturn nil, errors.New(\"cannot convert non-NIST *ecdh.PublicKey to *ecdsa.PublicKey\")\n\t}\n}\nfunc main() {\n\tprivateKey, _ := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\n\tpublicKey := privateKey.PublicKey\n\tecdhKey, _ := publicKey.ECDH()\n\tbytes := ecdhKey.Bytes()\n\tunmarshaledPublicKey, err := UnmarshalPublicKey(elliptic.P256(), bytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%t\", publicKey.Equal(unmarshaledPublicKey)) // true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78869040/decrypting-rsa-ecb-nopadding-byte-array-in-golang",
    "body": "ciphertextBytes := ([]byte{89, 250, 193, 103, 219, 4, 129, 208, 181, 30, 127, 250, 147, 113, 64, 25, 187, 96, 88, 15, 64, 93, 100, 141, 42, 89, 13, 157, 253, 187, 118, 154, 150, 132, 238, 224, 22, 98, 35, 252, 92, 253, 138, 6, 38, 142, 170, 247, 136, 19, 231, 48, 52, 228, 22, 222, 81, 242, 182, 109, 96, 209, 7, 187, 213, 237, 218, 147, 238, 28, 25, 217, 81, 200, 219, 76, 214, 232, 238, 193, 78, 252, 180, 45, 182, 150, 220, 157, 194, 11, 57, 195, 20, 174, 13, 123, 69, 72, 81, 112, 49, 143, 3, 67, 216, 86, 11, 234, 48, 210, 254, 136, 201, 238, 1, 222, 134, 178, 102, 230, 102, 137, 145, 236, 197, 2, 120, 106})[0:128]\nmodulusInt := \"91851415039980683673835443907833548355613725060429787547716446884026400945844827342368025805543719063805785824109075005634172820422680533076648130137521254244221874431195148950936257983839718841574094615493929797376689026996944801887459231860502077721291214210394902757594184173778070286729141127782416296193\"\nprivateExpInt := \"6487635995240407475566233880851450254636860602479965310563184653343274943593934811905055029279061836006484620592961353145255138101173202734513392349460393317252650745961877082056763589015732603463063131507792018004450541681668317154023863374611531824451608552071840032997073721859882730955156029598795586149\"\nc := new(big.Int)\nc.SetBytes(ciphertextBytes)\nn := new(big.Int)\nn.SetString(modulusInt, 10)\nd := new(big.Int)\nd.SetString(privateExpInt, 10)\ndecrypted := new(big.Int).Exp(c, d, n).Bytes()\nfmt.Println(hex.EncodeToString(decrypted)) // 24000061646d696e00000000000000000061646d696e000000000000000000000000000000"
  },
  {
    "url": "https://stackoverflow.com/questions/78869040/decrypting-rsa-ecb-nopadding-byte-array-in-golang",
    "body": "modulusInt := \"91851415039980683673835443907833548355613725060429787547716446884026400945844827342368025805543719063805785824109075005634172820422680533076648130137521254244221874431195148950936257983839718841574094615493929797376689026996944801887459231860502077721291214210394902757594184173778070286729141127782416296193\"\nn := new(big.Int)\nn.SetString(modulusInt, 10)\nfmt.Println(n.Bytes()) // [130 204 254 101 128 16 28 183 155 24 188 86 117 15 235 104 31 165 104 217 6 182 164 136 101 215 42 113 111 55 208 207 105 35 182 47 241 107 139 215 213 249 43 125 219 34 53 103 250 92 154 128 75 189 168 128 229 6 239 177 101 126 218 75 101 168 157 212 100 197 200 129 112 124 28 36 214 25 0 133 38 80 206 251 208 50 171 207 226 21 167 146 73 54 9 94 162 164 103 166 158 74 189 245 236 249 150 142 28 249 88 95 245 189 21 187 251 209 228 76 13 131 55 207 35 96 169 1]"
  },
  {
    "url": "https://stackoverflow.com/questions/78869040/decrypting-rsa-ecb-nopadding-byte-array-in-golang",
    "body": "privateKey := &rsa.PrivateKey{\n\tPublicKey: rsa.PublicKey{\n\t\tN: big.NewInt(0).SetBytes([]byte{130, 204, 254, 101, 128, 16, 28, 183, 155, 24, 188, 86, 117, 15, 235, 104, 31, 165, 104, 217, 6, 182, 164, 136, 101, 215, 42, 113, 111, 55, 208, 207, 105, 35, 182, 47, 241, 107, 139, 215, 213, 249, 43, 125, 219, 34, 53, 103, 250, 92, 154, 128, 75, 189, 168, 128, 229, 6, 239, 177, 101, 126, 218, 75, 101, 168, 157, 212, 100, 197, 200, 129, 112, 124, 28, 36, 214, 25, 0, 133, 38, 80, 206, 251, 208, 50, 171, 207, 226, 21, 167, 146, 73, 54, 9, 94, 162, 164, 103, 166, 158, 74, 189, 245, 236, 249, 150, 142, 28, 249, 88, 95, 245, 189, 21, 187, 251, 209, 228, 76, 13, 131, 55, 207, 35, 96, 169, 1}),\n\t\tE: 65537,\n\t},\n\tD: big.NewInt(0).SetBytes([]byte{9, 61, 27, 118, 229, 221, 189, 121, 134, 125, 239, 199, 151, 139, 33, 80, 128, 115, 185, 125, 34, 201, 65, 195, 212, 149, 167, 12, 206, 19, 62, 47, 120, 56, 170, 132, 166, 99, 183, 67, 238, 124, 36, 3, 70, 184, 26, 215, 150, 74, 118, 43, 59, 174, 80, 185, 145, 243, 180, 120, 110, 55, 208, 137, 74, 217, 58, 44, 193, 153, 183, 176, 57, 1, 64, 196, 223, 203, 235, 53, 211, 249, 214, 113, 60, 12, 38, 24, 190, 9, 145, 18, 148, 218, 30, 114, 179, 173, 247, 34, 88, 212, 142, 177, 202, 239, 44, 2, 220, 139, 182, 122, 194, 153, 14, 115, 217, 18, 73, 187, 179, 194, 145, 129, 154, 244, 90, 101}),\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78700783/need-help-in-preventing-multiple-crons-scheduler-running-in-golang",
    "body": "// sendTriggers sends a trigger to the channel every 10 seconds.\n func sendTriggers(triggerChan chan<- struct{}) {\n     ticker := time.NewTicker(10 * time.Second)\n     defer ticker.Stop()\n     \n     for {\n         select {\n         case <-ticker.C:\n             triggerChan <- struct{}{}\n         }\n     }\n }\n\n // processTriggers listens to the channel and processes each trigger one at a time.\n func processTriggers(triggerChan <-chan struct{}) {\n     for {\n         select {\n         case <-triggerChan:\n             fmt.Println(\"Received trigger, processing...\")\n             // Simulate work with sleep\n             time.Sleep(5 * time.Second)\n             fmt.Println(\"Processing complete.\")\n         }\n     }\n }\n\n func main() {\n     triggerChan := make(chan struct{})\n     \n     go sendTriggers(triggerChan)\n     go processTriggers(triggerChan)\n     \n     // Prevent the main function from exiting\n     select {}\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/78485634/parsing-terraform-tfvars-file-with-golang",
    "body": "type RawDatabase struct {\n    Name                string   `cty:\"name\"`\n    BusinessVerticalID  string   `cty:\"business_vertical_id\"`\n    Readers             []string `cty:\"readers\"`\n    Contributors        []string `cty:\"contributors\"`\n}\ntype Config struct {\n    Environment       string            `hcl:\"environment\"`\n    BusinessEntity    *string           `hcl:\"business_entity\"`\n    EntitlementLookup map[string]string `hcl:\"entitlement_lookup\"`\n    RawDatabases      []RawDatabase     `hcl:\"raw_databases\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78434611/how-to-mock-redis-in-golang",
    "body": "package __06_2\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\t\"github.com/alicebob/miniredis/v2\"\n\t\"github.com/redis/go-redis/v9\"\n)\nfunc TestSomethingRandom(t *testing.T) {\n\t// 1. Set the mock redis and random string data with fixed seed.\n\t// the string data with fixed seed can be predicted.\n\t// or the data can be used at assert.Equal, right away in the test code.\n\ts := miniredis.RunT(t)\n\trandomOtp := randomStringWithFixedSeed(10, 1)\n\t_ = s.Set(\"otp\", randomOtp)\n\t// 2. Set the client for accessing the mock redis.\n\trdb := redis.NewClient(&redis.Options{\n\t\tAddr:     s.Addr(),\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n\t// 3. Accessing the data from the mock redis.\n\tvar ctx = context.Background()\n\tval, err := rdb.Get(ctx, \"otp\").Result()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"key\", val)\n\tassert.Equal(t, val, randomOtp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77666038/create-a-csr-with-specific-subject-order-in-go",
    "body": "var (\n        oidCountry            = []int{2, 5, 4, 6}\n        oidOrganization       = []int{2, 5, 4, 10}\n        oidOrganizationalUnit = []int{2, 5, 4, 11}\n        oidCommonName         = []int{2, 5, 4, 3}\n        oidLocality           = []int{2, 5, 4, 7}\n    )\n    csrTemplate := x509.CertificateRequest{\n        Subject: pkix.Name{\n            ExtraNames: []pkix.AttributeTypeAndValue{\n                { oidCountry, \"IN\" },\n                { oidOrganization, \"Example Org\" },\n                { oidOrganizationalUnit, \"OU1\" },\n                { oidOrganizationalUnit, \"OU2\" },\n                { oidLocality, \"loc\" },\n                { oidCommonName, \"example.com\" },\n            },\n        },\n        EmailAddresses: []string{\"test@example.com\"},\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/77299889/increasing-value-1000-times-through-channels-and-goroutines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc main() {\n\tvar ch = make(chan int)\n\twg := &sync.WaitGroup{}\n\t//1000 goroutines sending 1 through a channel\n\tvar x = 0\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tch <- 1\n\t\t}()\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(ch)\n\t}()\n\t//Here i need to increase x by value read from the channel and then stop when the last value was sent\n\t//But this code doesn't work\n\tfor {\n\t\tif v, ok := <-ch; ok {\n\t\t\tx += v\n\t\t} else {\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println(x)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77165699/db-modelusertable-createdata-how-to-pass-the-correct-tablename",
    "body": "package main\nimport (\n        \"fmt\"\n       \"gorm/pkg/models\"\n        \"gorm/pkg/database\"\n)\nfunc  main() {\n// Usertable is defined in pkg/models as per gorm standards\n  params := models.Usertable {\n        Firstname : \"MyFirstName3\",\n        Lastname : \"LastName3\" ,\n }\n        // This is a function written to connect to the DB\n        db, _ := database.NewStorage(\"postgres\", \"testdb\")\n        result := db.DB.Create(&params)\n        if ( result != nil ) {\n        fmt.Println(\"Result: \",params.ID)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77141130/why-didnt-the-channel-take-the-value-of-the-last-declaration",
    "body": "1 // print 1 and sleep 1s\n2,3,4 // stop for get values\n3,4 // print 2 and sleep 1\n3,4,5 // stop for get value\n4,5 // print 3 and sleep 1\n4,5,6 // stop for get value\n5,6 // print 4 and sleep 1\n5,6,7 // stop for get value\n6,7 // print 5 and sleep 1\n6,7,8 // stop for get value\n7,8 // print 6 and sleep 1\n7,8,9 // stop for get value\n8,9 // print 7 and sleep 1\n8,9,10 // stop for get value\n// close channel\n// in this line get value : fmt.Println(\"Channel Value is: \", <-channel)\n9,10 // before get value\n10 // get 9 and sleep 1\n// get 10 and sleep 1\n// isdone send signal true"
  },
  {
    "url": "https://stackoverflow.com/questions/77093771/initializing-generic-slice-with-size-inside-a-struct",
    "body": "// example of slice usage:\nfunc testSlice() {\n    var s []int\n    fmt.Println(\"length:\", len(s))\n    for i, x := range s {\n        fmt.Println(\"iterating:\", i, x) // never executed, the slice is empty\n    }\n    newSlice := append(s, 1)  // a slice allocation happens here\n    fmt.Println(\"result of append(s,1):\", newSlice)\n    emptySlice := make([]int, 0)\n    // the only visible different thing is comparing to nil:\n    if s == nil {\n        fmt.Println(\"s is nil\")\n    }\n    if emptySlice == nil {\n        fmt.Println(\"emptySlice is nil\") // not printed\n    }\n    // if you stick to checking the *length* of your slice, you will\n    // have a consistent behavior:\n    if len(s) == 0 {\n        fmt.Println(\"s is empty\")\n    }\n    if len(emptySlice) == 0 {\n        fmt.Println(\"emptySlice is empty\")\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76944766/reading-multiple-return-values-from-goroutines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n)\n// define a struct to hold the result\ntype Result struct {\n\tnl int\n\tnw int\n\tnc int\n}\n// this is to be able to use fmt.Println(result)\nfunc (r Result) String() string {\n\treturn fmt.Sprintf(\"%8d%8d%8d\", r.nl, r.nw, r.nc+r.nl)\n}\nfunc main() {\n\tch := make(chan Result)\n\tfor _, arg := range os.Args[1:] {\n\t\tgo wc(arg, ch)\n\t}\n\ttotalResult := Result{}\n\tfor range os.Args[1:] {\n\t\tresult := <-ch\n\t\tfmt.Println(result) // just for debugging\n        // sum everything\n\t\ttotalResult.nl += result.nl\n\t\ttotalResult.nw += result.nw\n\t\ttotalResult.nc += result.nc\n\t}\n\tfmt.Println(\"Total result:\")\n\tfmt.Println(totalResult)\n}\nfunc wc(arg string, ch chan<- Result) {\n\tnl, nw, nc := 0, 0, 0\n    // your logic to compute nl, nw, nc goes here\n\tch <- Result{nl: nl, nw: nw, nc: nc + nl}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76759898/how-to-get-buffered-logging-with-golang-logrus",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/sirupsen/logrus\"\n)\ntype MyFormatter struct {\n}\nfunc (f *MyFormatter) Format(entry *logrus.Entry) ([]byte, error) {\n\tb := &bytes.Buffer{}\n\tfmt.Fprintf(b, \"{\\\"Level\\\":\\\"%s\\\",\\\"Time\\\":\\\"%s\\\",\\\"Message\\\":\\\"%s\\\"}\\n\", entry.Level, entry.Time.Format(time.RFC3339), entry.Message)\n\treturn b.Bytes(), nil\n}\ntype BufferedLog struct {\n\tMessage string\n\tLevel   logrus.Level\n\tTime    time.Time\n}\nfunc NewBufferingLogger() *logrus.Logger {\n\tlogger := logrus.New()\n\tlogger.Formatter = new(MyFormatter)\n\tlogger.Level = logrus.DebugLevel\n\treturn logger\n}\nfunc main() {\n\tbufferingLogger := NewBufferingLogger()\n\t// Log some messages using the custom bufferingLogger\n\tbufferingLogger.Info(\"This is an informational message.\")\n\tbufferingLogger.Warn(\"This is a warning message.\")\n\tbufferingLogger.Error(\"This is an error message.\")\n\tbufferingLogger.Debug(\"This is a debug message.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76513424/increase-grpc-timeout-in-go",
    "body": "// EnforcementPolicy is used to set keepalive enforcement policy on the\n// server-side. Server will close connection with a client that violates this\n// policy.\ntype EnforcementPolicy struct {\n\t// MinTime is the minimum amount of time a client should wait before sending\n\t// a keepalive ping.\n\tMinTime time.Duration // The current default value is 5 minutes.\n\t// If true, server allows keepalive pings even when there are no active\n\t// streams(RPCs). If false, and client sends ping when there are no active\n\t// streams, server will send GOAWAY and close the connection.\n\tPermitWithoutStream bool // false by default.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76238476/golang-how-to-determine-a-method-is-promoted-from-an-embedded-struct-instead-of",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"runtime\"\n)\ntype inner struct{}\nfunc (t *inner) Method() {}\ntype outer1 struct{ inner }\ntype outer2 struct{ inner }\nfunc (o *outer2) Method() {}\nfunc isPromoted(s any, methodName string) (bool, error) {\n\tv := reflect.ValueOf(s)\n\tm, ok := v.Type().MethodByName(methodName)\n\tif !ok {\n\t\treturn false, fmt.Errorf(\"method sets of s does not include the method\")\n\t}\n\tp := m.Func.Pointer()\n\tf := runtime.FuncForPC(p)\n\tfileName, _ := f.FileLine(f.Entry())\n\tpromoted := fileName == \"<autogenerated>\"\n\treturn promoted, nil\n}\nfunc main() {\n\ti := &inner{}\n\to1 := &outer1{inner: *i}\n\to2 := &outer2{inner: *i}\n\tfmt.Println(\"i - is [Method] promoted?\")\n\tfmt.Println(isPromoted(i, \"Method\"))\n\tfmt.Println(\"o1 - is [Method] promoted?\")\n\tfmt.Println(isPromoted(o1, \"Method\"))\n\tfmt.Println(\"o2 - is [Method] promoted?\")\n\tfmt.Println(isPromoted(o2, \"Method\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76077022/how-to-validate-json-token-generated-by-keycloak-using-golang",
    "body": "package main\nimport (\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\tjwt \"github.com/dgrijalva/jwt-go\"\n)\nfunc main() {\n\t// example token to validate\n\ttokenString := \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ6MXdOWU9YVFRpd2RhQjJyS1NqNElrUG1YTDJHbXVTOVFRNERJeXpWbWlrIn0.eyJleHAiOjE2ODIxMTQ3MjgsImlhdCI6MTY4MjExNDQyOCwianRpIjoiZDE5NGZlMmEtZDUyOC00YjhhLWI3OWItODEwNDMxNWExNzIxIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlYWxtcy9BcnFncmlmbyIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmOWExMTYxYi00YzhiLTRmM2MtODViYy0xYmM1MDE0MWFmNTYiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ3ZWItYXBwIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIvKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlcy1hcnFncmlmbyIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJ3ZWItYXBwIjp7InJvbGVzIjpbInVtYV9wcm90ZWN0aW9uIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6InByb2ZpbGUgZW1haWwiLCJjbGllbnRJZCI6IndlYi1hcHAiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsImNsaWVudEhvc3QiOiIxNzIuMTcuMC4xIiwicHJlZmVycmVkX3VzZXJuYW1lIjoic2VydmljZS1hY2NvdW50LXdlYi1hcHAiLCJjbGllbnRBZGRyZXNzIjoiMTcyLjE3LjAuMSJ9.vqFWx5mMESEMww8E5t1J8ZmoCw1R9qv1qlgaYaG7FQcd8B_sN223cDYMoqJF5y-Xv9zaJ094fUmyDtJHv-ZTkxw3R9AtjG0cCjqMxgBn1X2irlNYEmR5ZX73YXDUxY6XuABLyTGdh00bEcaUIyFR1Pver2UDjMf2okcV1FgEd0Z_94j4pjqtcY0nbsWIKnLoVoor7QV6ytWRpMG25DvrSVxciaOpogOHlUhaWtTfMz-mvfFg64i_S6rIuT84APnVe6weAuj92YS6bUzBif_gcgNeMdLrJChxWdPMK9G5mDAgLOqUv-X5fPOw1arigInV0nCJmKV7LG6Yc1UlDHdmiA\"\n\t// The base64-encoded public key downloaded from Keycloak.\n\t// The screenshot in the question shows the correct place to get it.\n\t// It's much longer than \"P184S3h7Ugjl56l31qeJ4FKvmBB4iikc\".\n\tbase64EncodedPublicKey := `replaced with the public key downloaded from Keycloak`\n\tpublicKey, err := parseKeycloakRSAPublicKey(base64EncodedPublicKey)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\tif _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {\n\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n\t\t}\n\t\t// return the public key that is used to validate the token.\n\t\treturn publicKey, nil\n\t})\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing or validating token:\", err)\n\t\treturn\n\t}\n\tif !token.Valid {\n\t\tfmt.Println(\"Invalid token\")\n\t\treturn\n\t}\n\tclaims := token.Claims.(jwt.MapClaims)\n\tfmt.Println(\"Claims:\", claims)\n}\nfunc parseKeycloakRSAPublicKey(base64Encoded string) (*rsa.PublicKey, error) {\n\tbuf, err := base64.StdEncoding.DecodeString(base64Encoded)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tparsedKey, err := x509.ParsePKIXPublicKey(buf)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpublicKey, ok := parsedKey.(*rsa.PublicKey)\n\tif ok {\n\t\treturn publicKey, nil\n\t}\n\treturn nil, fmt.Errorf(\"unexpected key type %T\", publicKey)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76059059/golang-returning-array-at-http-response-in-gin-framework-doesnt-work",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n)\ntype Time struct {\n\tStandardTime time.Time\n}\nfunc (p Time) MarshalJSON() ([]byte, error) {\n\ttimeString := p.StandardTime.Format(time.RFC3339)\n\treturn json.Marshal(timeString)\n}\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/time\", func(c *gin.Context) {\n\t\ttimeArray := []Time{\n\t\t\t{\n\t\t\t\tStandardTime: time.Now(),\n\t\t\t},\n\t\t\t{\n\t\t\t\tStandardTime: time.Now().Add(30 * time.Minute),\n\t\t\t},\n\t\t}\n\t\tc.JSON(http.StatusOK, timeArray)\n\t})\n\t_ = r.Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75881511/changed-attributes-in-terraform-plugin-framework",
    "body": "NestedObject: schema.NestedAttributeObject{\n        Attributes: map[string]schema.Attribute{\n            \"id\": schema.Int64Attribute{\n                Computed: true,\n                PlanModifiers: []planmodifier.Int64{\n                    int64planmodifier.UseStateForUnknown(),\n                },\n            },\n            \"host\": schema.StringAttribute{\n                Optional: true,\n                Computed: true,\n                PlanModifiers: []planmodifier.String{\n                    stringplanmodifier.UseStateForUnknown(),\n                },\n            },\n            \"ip\": schema.StringAttribute{\n                Optional: true,\n                Computed: true,\n                PlanModifiers: []planmodifier.String{\n                    stringplanmodifier.UseStateForUnknown(),\n                },\n            },\n            \"is_used\": schema.BoolAttribute{\n                Computed: true,\n                PlanModifiers: []planmodifier.Bool{\n                    boolplanmodifier.UseStateForUnknown(),\n                },\n            },\n        },\n    },"
  },
  {
    "url": "https://stackoverflow.com/questions/75863744/how-to-return-a-custom-user-friendly-error-message-in-kubernetes",
    "body": "POST https://xxx.xx.xx.xx:6443/api/v1/namespaces?fieldManager=kubectl-create\nResponse Status: 422 Unprocessable Entity\n{\n    \"kind\": \"Status\",\n    \"apiVersion\": \"v1\",\n    \"metadata\": {},\n    \"status\": \"Failure\",\n    \"message\": \"Namespace \\\"hotel_123\\\" is invalid: metadata.name: Invalid value: \\\"hotel_123\\\": a lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc', regex used for validation is '[a-z0-9]\\r\\n([-a-z0-9]*[a-z0-9])?')\",\n    \"reason\": \"Invalid\",\n    \"details\": {\n        \"name\": \"hotel_123\",\n        \"kind\": \"Namespace\",\n        \"causes\": [\n            {\n                \"reason\": \"FieldValueInvalid\",\n                \"message\": \"Invalid value: \\\"hotel_123\\\": a lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?')\",\n                \"field\": \"metadata.name\"\n            }\n        ]\n    },\n    \"code\": 422\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75863744/how-to-return-a-custom-user-friendly-error-message-in-kubernetes",
    "body": "POST https://xxx.xx.xx.xx:6443/api/v1/namespaces?fieldManager=kubectl-create\nResponse Status: 201 Created\n{\n    \"kind\": \"Namespace\",\n    \"apiVersion\": \"v1\",\n    \"metadata\": {\n        \"name\": \"hotel12345\",\n        \"uid\": \"7a301d8b-37cd-45a5-8345-82wsufy88223456\",\n        \"resourceVersion\": \"12233445566\",\n        \"creationTimestamp\": \"2023-04-03T15:35:59Z\",\n        \"managedFields\": [\n            {\n                \"manager\": \"kubectl-create\",\n                \"operation\": \"Update\",\n                \"apiVersion\": \"v1\",\n                \"time\": \"2023-04-03T15:35:59Z\",\n                \"fieldsType\": \"FieldsV1\",\n                \"fieldsV1\": {\n                    \"f:status\": {\n                        \"f:phase\": {}\n                    }\n                }\n            }\n        ]\n    },\n    \"spec\": {\n        \"finalizers\": [\n            \"kubernetes\"\n        ]\n    },\n    \"status\": {\n        \"phase\": \"Active\"\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75713184/sending-a-raw-email-with-attachments-in-go-via-aws-ses-v2",
    "body": "import (\n  // ...\n  secretutils \"github.com/alessiosavi/GoGPUtils/aws/secrets\"\n  sesutils \"github.com/alessiosavi/GoGPUtils/aws/ses\"\n)\ntype MailConf struct {\n\tFromName string   `json:\"from_name,omitempty\"`\n\tFromMail string   `json:\"from_mail,omitempty\"`\n\tTo       string   `json:\"to,omitempty\"`\n\tCC       []string `json:\"cc,omitempty\"`\n}\nfunc SendRawMail(filename string, data []byte) error {\n\tvar mailConf MailConf\n\tif err := secretutils.UnmarshalSecret(os.Getenv(\"XXX_YOUR_SECRET_STORED_IN_AWS\"), &mailConf); err != nil {\n\t\treturn err\n\t}\n\tsubject := fmt.Sprintf(\"Found errors for the following file: %s\", filename)\n\tvar carbonCopy string\n\tif len(mailConf.CC) > 0 {\n\t\tcarbonCopy = stringutils.JoinSeparator(\",\", mailConf.CC...)\n\t} else {\n\t\tcarbonCopy = \"\"\n\t}\n\traw := fmt.Sprintf(`From: \"%[1]s\" <%[2]s>\nTo: %[3]s\nCc: %[4]s\nSubject: %[5]s\nContent-Type: multipart/mixed;\n    boundary=\"1\"\n--1\nContent-Type: multipart/alternative;\n    boundary=\"sub_1\"\n--sub_1\nContent-Type: string/plain; charset=utf-8\nContent-Transfer-Encoding: quoted-printable\nPlease see the attached file for a list of errors\n--sub_1\nContent-Type: string/html; charset=utf-8\nContent-Transfer-Encoding: quoted-printable\n<html>\n<head></head>\n<body>\n<h1>%[6]s</h1>\n<p><h2>Please see the attached file for the list of the rows.<h2></p>\n</body>\n</html>\n--sub_1--\n--1\nContent-Type: string/plain; name=\"errors_%[6]s\"\nContent-Description: errors_%[6]s\nContent-Disposition: attachment;filename=\"errors_%[6]s\";\ncreation-date=\"%[7]s\";\nContent-Transfer-Encoding: base64\n%[8]s\n--1--`, mailConf.FromName, mailConf.FromMail, mailConf.To, carbonCopy, subject, strings.Replace(filename, \".csv\", \".json\", 1), time.Now().Format(\"2-Jan-06 3.04.05 PM\"), base64.StdEncoding.EncodeToString(data))\n\treturn sesutils.SendMail([]byte(raw))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75618727/redis-timeseries-golang-sampling",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\trt \"github.com/RedisTimeSeries/redistimeseries-go\"\n)\nfunc main() {\n\tkeyname := \"t\"\n\tvar client = rt.NewClient(\"127.0.0.1:6379\", \"nohelp\", nil)\n\tclient.CreateKeyWithOptions(keyname, rt.DefaultCreateOptions)\n\tclient.CreateKeyWithOptions(\"td\", rt.DefaultCreateOptions)\n\tclient.CreateRule(keyname, rt.MaxAggregation, 5000, \"td\")\n\tfor i := 0; i < 10; i++ {\n\t\ttimestamp := time.Now()\n\t\tfmt.Println(time.Now().UnixMilli(), timestamp.String())\n\t\tvalue := float64(i)\n\t\tclient.Add(keyname, timestamp.UnixMilli(), value)\n\t\ttime.Sleep(time.Second)\n\t}\n\tfmt.Println(client.RangeWithOptions(keyname, rt.TimeRangeMinimum, rt.TimeRangeMaximum, rt.DefaultRangeOptions))\n\tfmt.Println(client.RangeWithOptions(\"td\", rt.TimeRangeMinimum, rt.TimeRangeMaximum, rt.DefaultRangeOptions))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75339208/golang-chromedp-pdf-file-download-without-saving-in-server",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"github.com/chromedp/cdproto/page\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\thttp.Handle(\"/pdf\", http.HandlerFunc(servePDF))\n\tlog.Fatal(http.ListenAndServe(\":8080\", http.DefaultServeMux))\n}\nfunc servePDF(w http.ResponseWriter, r *http.Request) {\n\tbuf, err := createPDF()\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/pdf\")\n\tw.Write(buf)\n}\nfunc createPDF() ([]byte, error) {\n\tctx, cancel := newTabContext()\n\tdefer cancel()\n\thtml := `<html>\n<body>\n<div>text</div>\n<img src=\"https://pkg.go.dev/static/shared/gopher/package-search-700x300.jpeg\"/>\n<img src=\"https://go.dev/images/gophers/motorcycle.svg\"/>\n<img src=\"https://go.dev/images/go_google_case_study_carousel.png\" />\n</body>\n</html>`\n\tvar buf []byte\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"about:blank\"),\n\t\t// set the page content and wait until the page is loaded (including its resources).\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tlctx, cancel := context.WithCancel(ctx)\n\t\t\tdefer cancel()\n\t\t\tvar wg sync.WaitGroup\n\t\t\twg.Add(1)\n\t\t\tchromedp.ListenTarget(lctx, func(ev interface{}) {\n\t\t\t\tif _, ok := ev.(*page.EventLoadEventFired); ok {\n\t\t\t\t\t// It's a good habit to remove the event listener if we don't need it anymore.\n\t\t\t\t\tcancel()\n\t\t\t\t\twg.Done()\n\t\t\t\t}\n\t\t\t})\n\t\t\tframeTree, err := page.GetFrameTree().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tif err := page.SetDocumentContent(frameTree.Frame.ID, html).Do(ctx); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\twg.Wait()\n\t\t\treturn nil\n\t\t}),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tvar err error\n\t\t\tbuf, _, err = page.PrintToPDF().WithPrintBackground(false).Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t}),\n\t); err != nil {\n\t\treturn nil, err\n\t}\n\treturn buf, nil\n}\nvar (\n\tbrowserCtx context.Context\n\tonce       sync.Once\n)\n// newTabContext creates a tab context with the global browser context as its parent context.\n//\n// When tasks is run with the returned context, a new tab will be created in the browser.\nfunc newTabContext() (context.Context, context.CancelFunc) {\n\tonce.Do(func() { initBrowser() })\n\tif browserCtx == nil || browserCtx.Err() != nil {\n\t\tlog.Fatalf(\"browser is not available: %v\", browserCtx.Err())\n\t}\n\treturn chromedp.NewContext(browserCtx)\n}\n// initBrowser starts a browser in which to create new tab for running tasks.\nfunc initBrowser() {\n\tbrowserCtx, _ = chromedp.NewContext(context.Background())\n\t// to start the browser\n\tif err := chromedp.Run(browserCtx); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75321865/zip-a-slice-of-byte-into-another-slice-in-golang",
    "body": "package data_test\nimport (\n\t\"bytes\"\n\t\"compress/zlib\"\n\t\"io\"\n\t\"testing\"\n)\nfunc compress(buf []byte) ([]byte, error) {\n\tvar out bytes.Buffer\n\tw := zlib.NewWriter(&out)\n\tif _, err := w.Write(buf); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := w.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn out.Bytes(), nil\n}\nfunc decompress(buf []byte) (_ []byte, e error) {\n\tr, err := zlib.NewReader(bytes.NewReader(buf))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() {\n        if err := r.Close(); e == nil {\n            e = err\n        }\n    }()\n\treturn io.ReadAll(r)\n}\nfunc TestRoundtrip(t *testing.T) {\n\twant := []byte(\"test data\")\n\tzdata, err := compress(want)\n\tif err != nil {\n\t\tt.Fatalf(\"compress: %v\", err)\n\t}\n\tgot, err := decompress(zdata)\n\tif err != nil {\n\t\tt.Fatalf(\"decompress: %v\", err)\n\t}\n\tif !bytes.Equal(want, got) {\n\t\tt.Errorf(\"roundtrip: got = %q; want = %q\", got, want)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75273219/how-to-simulate-password-hash-of-pbkdf2-scala-in-golang-pbkdf2",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/sha512\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"golang.org/x/crypto/pbkdf2\"\n)\nfunc b64Decode(s string) ([]byte, error) {\n\ts = strings.ReplaceAll(s, \".\", \"+\")\n\treturn base64.RawStdEncoding.DecodeString(s)\n}\nfunc main() {\n\titeration := 25000\n\t// Hash User input\n\tpassword := []byte(\"123\")\n\tsalt, err := b64Decode(\"yCyQMMMBt1TuPa1F9FeKfT0yrNIF8tLB\")\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to base64 decode the salt: %s\", err)\n\t}\n\tkey := pbkdf2.Key(password, salt, iteration, 32, sha512.New)\n\t// COMPARE PASSWORD fetched from DB\n\t// 123 hash in scala\n\ttokens := strings.Split(\"$pbkdf2-sha512$25000$yCyQMMMBt1TuPa1F9FeKfT0yrNIF8tLB$TtQt5BZLs4qlA0YAkcGukZwu7pkxOLcxwuoQB3qNtxM\", \"$\")\n\tpasswordHashInDatabase, err := b64Decode(tokens[4])\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to base64 decode password hash from the database: %s\", err)\n\t}\n\tfmt.Printf(\"%x\\n%x\\n\", key, passwordHashInDatabase)\n\tfmt.Printf(\"%d\\n%d\\n\", len(key), len(passwordHashInDatabase))\n\tout := bytes.Compare(key, passwordHashInDatabase)\n\tfmt.Println(\"out: \", out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75262179/bucket-not-exists-with-localstack-and-s3",
    "body": "version: \"3.8\"\nservices:\n  localstack:\n    container_name: \"${LOCALSTACK_DOCKER_NAME-localstack_main}\"\n    image: localstack/localstack\n    ports:\n      - \"127.0.0.1:4566:4566\"            # LocalStack Gateway\n      - \"127.0.0.1:4510-4559:4510-4559\"  # external services port range\n    environment:\n      - DEBUG=${DEBUG-}\n      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}\n      - DOCKER_HOST=unix:///var/run/docker.sock\n    volumes:\n      - \"${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack\"\n      - \"/var/run/docker.sock:/var/run/docker.sock\""
  },
  {
    "url": "https://stackoverflow.com/questions/75065470/colly-how-to-get-the-value-of-a-child-attribute",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/gocolly/colly/v2\"\n)\nfunc main() {\n\tc := colly.NewCollector()\n\tc.OnError(func(_ *colly.Response, err error) {\n\t\tfmt.Println(\"Something went wrong:\", err)\n\t})\n\tc.OnXML(\"/html/body\", func(e *colly.XMLElement) {\n\t\tchild := e.ChildText(\"div[4]/div/div[3]/div[2]/div/div[1]/div[3]/div/div/h1\")\n\t\tfmt.Println(child)\n\t})\n\tc.Visit(\"https://www.lazada.vn/-i1701980654-s7563711492.html\")\n\t// Output:\n\t// Yierku 【Free Shipping Miễn phí vận chuyển】Giày nam mùa thu và mùa đông giày thường xu hướng nam thể thao tất cả các trận đấu giày da tăng chiều cao giày nam\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74972983/error-json-unsupported-type-func-time-time-in-golang",
    "body": "func GetAll() (Response, error) {\n    var quotes []schema.Quote // slice\n    ctx := db.Init()\n    // Assuming\n    // ctx, err := gorm.Open(....)\n    // https://gorm.io/docs/query.html\n    result := db.Find(&quotes)\n    if result.Error != nil {\n        return Response{\n            Status: http.StatusInternalServerError,\n            Message: \"Query failed\",\n        },result.Error\n    }\n    if result.RowsAffected == 0 {\n        return Response{\n            Status: http.StatusNotFound,\n            Message: \"No records found\",\n        },nil\n    }\n\n    return Response{\n        Status: http.StatusOK,\n        Message: \"Success\",\n        Data: quotes,\n    },nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74900245/how-to-pass-path-param-to-httptest-request",
    "body": "package httpunittest\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestGetProduct(t *testing.T) {\n\tt.Run(\"WithUUID\", func(t *testing.T) {\n\t\tr := httptest.NewRequest(http.MethodGet, \"/products/1\", nil) // note that this URL is useless\n\t\tr = mux.SetURLVars(r, map[string]string{\"uuid\": \"1\"})\n\t\tw := httptest.NewRecorder()\n\t\tGetProduct(w, r)\n\t\tassert.Equal(t, http.StatusOK, w.Result().StatusCode)\n\t})\n\tt.Run(\"Without_UUID\", func(t *testing.T) {\n\t\tr := httptest.NewRequest(http.MethodGet, \"/products\", nil) // note that this URL is useless\n\t\tw := httptest.NewRecorder()\n\t\tGetProduct(w, r)\n\t\tassert.Equal(t, http.StatusBadRequest, w.Result().StatusCode)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74786207/how-to-getting-an-empty-array-when-parsing-xml",
    "body": "{\n  \"clid\": \"020\",\n  \"track_list\": [\n    {\n      \"XMLName\": {\n        \"Space\": \"\",\n        \"Local\": \"track\"\n      },\n      \"uuid\": \"551\",\n      \"category\": \"s\",\n      \"route\": \"8\",\n      \"vehicle_type\": \"trolleybus\",\n      \"point\": {\n        \"latitude\": \"53.61491\",\n        \"longitude\": \"55.90922\",\n        \"avg_speed\": \"24\",\n        \"direction\": \"270\",\n        \"time\": \"13122022:072116\"\n      }\n    },\n    {\n      \"XMLName\": {\n        \"Space\": \"\",\n        \"Local\": \"track\"\n      },\n      \"uuid\": \"552\",\n      \"category\": \"s\",\n      \"route\": \"6\",\n      \"vehicle_type\": \"trolleybus\",\n      \"point\": {\n        \"latitude\": \"53.68321\",\n        \"longitude\": \"57.90922\",\n        \"avg_speed\": \"42\",\n        \"direction\": \"181\",\n        \"time\": \"13122022:072216\"\n      }\n    }\n  ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74786207/how-to-getting-an-empty-array-when-parsing-xml",
    "body": "{\n  \"clid\": \"020\",\n  \"track_list\": [\n    {\n      \"uuid\": \"551\",\n      \"category\": \"s\",\n      \"route\": \"8\",\n      \"vehicle_type\": \"trolleybus\",\n      \"point\": {\n        \"latitude\": \"53.61491\",\n        \"longitude\": \"55.90922\",\n        \"avg_speed\": \"24\",\n        \"direction\": \"270\",\n        \"time\": \"13122022:072116\"\n      }\n    },\n    {\n      \"uuid\": \"552\",\n      \"category\": \"s\",\n      \"route\": \"6\",\n      \"vehicle_type\": \"trolleybus\",\n      \"point\": {\n        \"latitude\": \"53.68321\",\n        \"longitude\": \"57.90922\",\n        \"avg_speed\": \"42\",\n        \"direction\": \"181\",\n        \"time\": \"13122022:072216\"\n      }\n    }\n  ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74350957/get-the-type-of-value-using-cty-in-hclwrite",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"github.com/hashicorp/hcl/v2/hclwrite\"\n\t\"github.com/zclconf/go-cty/cty\"\n)\nfunc main() {\n\tf := hclwrite.NewEmptyFile()\n\trootBody := f.Body()\n\tvarBlock := rootBody.AppendNewBlock(\"variable\", []string{\"example\"})\n\tvarBody := varBlock.Body()\n\tvarBody.SetAttributeRaw(\n\t\t\"type\",\n\t\ttypeExprTokens(cty.Set(cty.String)),\n\t)\n\tfmt.Printf(\"%s\", f.Bytes())\n}\nfunc typeExprTokens(ty cty.Type) hclwrite.Tokens {\n\tswitch ty {\n\tcase cty.String:\n\t\treturn hclwrite.TokensForIdentifier(\"string\")\n\tcase cty.Bool:\n\t\treturn hclwrite.TokensForIdentifier(\"bool\")\n\tcase cty.Number:\n\t\treturn hclwrite.TokensForIdentifier(\"number\")\n\tcase cty.DynamicPseudoType:\n\t\treturn hclwrite.TokensForIdentifier(\"any\")\n\t}\n\tif ty.IsCollectionType() {\n\t\tetyTokens := typeExprTokens(ty.ElementType())\n\t\tswitch {\n\t\tcase ty.IsListType():\n\t\t\treturn hclwrite.TokensForFunctionCall(\"list\", etyTokens)\n\t\tcase ty.IsSetType():\n\t\t\treturn hclwrite.TokensForFunctionCall(\"set\", etyTokens)\n\t\tcase ty.IsMapType():\n\t\t\treturn hclwrite.TokensForFunctionCall(\"map\", etyTokens)\n\t\tdefault:\n\t\t\t// Should never happen because the above is exhaustive\n\t\t\tpanic(\"unsupported collection type\")\n\t\t}\n\t}\n\tif ty.IsObjectType() {\n\t\tatys := ty.AttributeTypes()\n\t\tnames := make([]string, 0, len(atys))\n\t\tfor name := range atys {\n\t\t\tnames = append(names, name)\n\t\t}\n\t\tsort.Strings(names)\n\t\titems := make([]hclwrite.ObjectAttrTokens, len(names))\n\t\tfor i, name := range names {\n\t\t\titems[i] = hclwrite.ObjectAttrTokens{\n\t\t\t\tName:  hclwrite.TokensForIdentifier(name),\n\t\t\t\tValue: typeExprTokens(atys[name]),\n\t\t\t}\n\t\t}\n\t\treturn hclwrite.TokensForObject(items)\n\t}\n\tif ty.IsTupleType() {\n\t\tetys := ty.TupleElementTypes()\n\t\titems := make([]hclwrite.Tokens, len(etys))\n\t\tfor i, ety := range etys {\n\t\t\titems[i] = typeExprTokens(ety)\n\t\t}\n\t\treturn hclwrite.TokensForTuple(items)\n\t}\n\tpanic(fmt.Errorf(\"unsupported type %#v\", ty))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74300644/how-do-i-detect-file-type-of-input-thats-piped-into-a-go-program-that-expects-e",
    "body": "// imports:\nimport (\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n// -----\n// logic:\nvar pipedInputTypes = []string{\n\t\"image/png\",\n\t\"image/jpeg\",\n}\nvar inputIsGif bool\npipedInputBytes, err := ioutil.ReadAll(os.Stdin)\nif err != nil {\n\tlog.Fatalf(\"Unable to read piped input: %v\", err)\n}\nfileType := http.DetectContentType(pipedInputBytes)\ninvalidInput := true\nif fileType == \"image/gif\" {\n\tinputIsGif = true\n\tinvalidInput = false\n} else {\n\tfor _, inputType := range pipedInputTypes {\n\t\tif fileType == inputType {\n\t\t\tinvalidInput = false\n\t\t\tbreak\n\t\t}\n\t}\n}\nif invalidInput {\n\tlog.Fatalf(\"Cannot read piped input of type \\\"%v\\\"\", fileType)\n}\nif inputIsGif {\n    // Gif program logic with pipedInputBytes\n} else {\n    // Image program logic with pipedInputBytes\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74239348/generating-new-instance-of-struct-from-scanner-input",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\ntype Boat struct {\n\tname   string\n\tcolor  string\n\tdesign string\n}\ntype Car struct {\n\tname   string\n\tcolor  string\n\tdesign string\n}\nfunc main() {\n\tvar Boats = []Boat{}\n\tvar Cars = []Car{}\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tuserIn := scanner.Text()\n\t\tscanMain := strings.Fields(userIn)\n\t\tif len(scanMain) == 0 {\n\t\t\tbreak\n\t\t}\n\t\tif len(scanMain) != 4 {\n\t\t\tfmt.Println(\"Invalid Input. Try Again.\")\n\t\t}\n\t\tScan0 := scanMain[0]\n\t\tScan1 := scanMain[1]\n\t\tScan2 := scanMain[2]\n\t\tScan3 := scanMain[3]\n\t\tif Scan0 == \"car\" {\n\t\t\tCars = append(Cars, Car{Scan1, Scan2, Scan3})\n\t\t} else if Scan0 == \"boat\" {\n\t\t\tBoats = append(Boats, Boat{Scan1, Scan2, Scan3})\n\t\t} else {\n\t\t\tfmt.Println(\"Invalid Input. Try Again.\")\n\t\t}\n\t}\n\tfmt.Println(\"Boats:\", Boats)\n\tfmt.Println(\"Cars:\", Cars)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74227986/golang-ssh-tunneling-and-proxyjump",
    "body": "package main\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"golang.org/x/crypto/ssh\"\n)\nfunc main() {\n\tclient, err := ssh.Dial(\"tcp\", \"100.1.1.100:22\", &ssh.ClientConfig{\n\t\tUser:            \"root\",\n\t\tAuth:            []ssh.AuthMethod{ssh.Password(\"\")},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t})\n\tif err != nil {\n\t\tlog.Panicln(err)\n\t\treturn\n\t}\n\tlog.Println(\"init ssh client\")\n\tln, err := net.Listen(\"tcp\", \":9999\")\n\tif err != nil {\n\t\tlog.Panicln(err)\n\t\treturn\n\t}\n\tlog.Println(\"local listen\")\n\tfor {\n\t\tlocalconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t\treturn\n\t\t}\n\t\tsshconn, err := client.DialTCP(\"\", nil, &net.TCPAddr{IP: net.ParseIP(\"192.168.1.1\"), Port: 80})\n\t\tif err != nil {\n\t\t\tlog.Panicln(err)\n\t\t\treturn\n\t\t}\n\t\t// local <--> remote\n\t\tgo func() {\n\t\t\terrc := make(chan error, 1)\n\t\t\tspc := switchProtocolCopier{user: localconn, backend: sshconn}\n\t\t\tgo spc.copyToBackend(errc)\n\t\t\tgo spc.copyFromBackend(errc)\n\t\t\tlog.Printf(\"stop conn error: %v\\n\", <-errc)\n\t\t}()\n\t}\n}\n// switchProtocolCopier exists so goroutines proxying data back and\n// forth have nice names in stacks.\ntype switchProtocolCopier struct {\n\tuser, backend io.ReadWriter\n}\nfunc (c switchProtocolCopier) copyFromBackend(errc chan<- error) {\n\t_, err := io.Copy(c.user, c.backend)\n\terrc <- err\n}\nfunc (c switchProtocolCopier) copyToBackend(errc chan<- error) {\n\t_, err := io.Copy(c.backend, c.user)\n\terrc <- err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73815285/iterating-over-json-for-random-object",
    "body": "package main\nimport (\n\t\"github.com/tidwall/gjson\"\n)\nfunc main() {\n\tjson := `{\n\t\"cars\":{\n\t   \"dfhuidsfiusd\":{\n\t\t  \"name\":\"Mercedes\",\n\t\t   \"details\": {\n\t\t\t  \"plate_number\":\"sas2-hd-3\",\n\t\t\t  \"year\": 2010\n\t\t  }\n\t   },\n\t   \"uiwouiouss\":{\n\t\t  \"name\":\"Jaguar\",\n\t\t   \"details\": {\n\t\t\t  \"plate_number\":\"sas2-hd-3\",\n\t\t\t  \"year\": 2010\n\t\t  },\n\t   },\n\t   \"sdikdshkjsd\":{\n\t\t  \"name\":\"Toyota\",\n\t\t   \"details\": {\n\t\t\t  \"plate_number\":\"sas2-hd-3\",\n\t\t\t  \"year\": 2012\n\t\t  }\n\t   }\n\t}\n }`\n\tresult := gjson.Get(json, `cars.@values.#(details.year=2010)#.name`)\n\tprintln(result.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73710472/in-go-can-i-use-generics-to-declare-the-same-method-to-different-structs",
    "body": "type Base struct {\n\tName   string\n\tNumber int\n}\n// Add getter on the base type itself\nfunc (b Base) GetBase() Base {\n\treturn b\n}\ntype Foo struct {\n\tBase // embedding Base promotes GetBase() too\n\tFooID string\n}\n// other Foo methods\ntype Bar struct {\n\tBase // embedding Base promotes GetBase() too\n\tBarID string\n}\n// other Bar methods\n// interface with required functionality\ntype Sayer interface {\n\tGetBase() Base\n\tGetIDIface\n}\nfunc SayName(x Sayer) {\n\tfmt.Printf(\"Number %d \\\"%s\\\" with ID of %s\\n\", x.GetBase().Number, x.GetBase().Name, x.GetID())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73527504/context-timeout-not-working-as-expected-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\nfunc callToServer(ctx context.Context) {\n\tnow := time.Now()\n\tselect {\n\tcase <-ctx.Done(): // context cancelled via cancel or deadline\n\tcase <-time.After(1 * time.Second): // emulate external call\n\t}\n\tfmt.Printf(\"callToServer: %v\\n\", time.Since(now))\n}\nfunc callToServerContextAgnostic(ctx context.Context) {\n\tnow := time.Now()\n\tselect {\n\tcase <-time.After(2 * time.Second): // emulate external call\n\t}\n\tfmt.Printf(\"callToServerContextAgnostic: %v\\n\", time.Since(now))\n}\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\tcallToServer(ctx)\n\tctx2, cancel2 := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel2()\n\tcallToServerContextAgnostic(ctx2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73501907/write-utf-16-encoded-csv-using-golang",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"os\"\n\t\"golang.org/x/text/encoding/unicode\"\n\t\"golang.org/x/text/transform\"\n)\nfunc main() {\n\trecords := [][]string{\n\t\t{\"first_name\", \"last_name\", \"username\"},\n\t\t{\"Rob\", \"Pike\", \"rob\"},\n\t\t{\"Ken\", \"Thompson\", \"ken\"},\n\t\t{\"Robert\", \"Griesemer\", \"gri\"},\n\t}\n\tf, _ := os.Create(\"utf16le.csv\")\n\tt := transform.NewWriter(f, unicode.UTF16(unicode.LittleEndian, unicode.UseBOM).NewEncoder())\n\tw := csv.NewWriter(t)\n\tfor _, record := range records {\n\t\tw.Write(record)\n\t}\n\tw.Flush()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73501907/write-utf-16-encoded-csv-using-golang",
    "body": "hexdump -C utf16le.csv\n00000000  ff fe 66 00 69 00 72 00  73 00 74 00 5f 00 6e 00  |��f.i.r.s.t._.n.|\n00000010  61 00 6d 00 65 00 2c 00  6c 00 61 00 73 00 74 00  |a.m.e.,.l.a.s.t.|\n00000020  5f 00 6e 00 61 00 6d 00  65 00 2c 00 75 00 73 00  |_.n.a.m.e.,.u.s.|\n00000030  65 00 72 00 6e 00 61 00  6d 00 65 00 0a 00 52 00  |e.r.n.a.m.e...R.|\n00000040  6f 00 62 00 2c 00 50 00  69 00 6b 00 65 00 2c 00  |o.b.,.P.i.k.e.,.|\n00000050  72 00 6f 00 62 00 0a 00  4b 00 65 00 6e 00 2c 00  |r.o.b...K.e.n.,.|\n00000060  54 00 68 00 6f 00 6d 00  70 00 73 00 6f 00 6e 00  |T.h.o.m.p.s.o.n.|\n00000070  2c 00 6b 00 65 00 6e 00  0a 00 52 00 6f 00 62 00  |,.k.e.n...R.o.b.|\n00000080  65 00 72 00 74 00 2c 00  47 00 72 00 69 00 65 00  |e.r.t.,.G.r.i.e.|\n00000090  73 00 65 00 6d 00 65 00  72 00 2c 00 67 00 72 00  |s.e.m.e.r.,.g.r.|\n000000a0  69 00 0a 00                                       |i...|\n000000a4"
  },
  {
    "url": "https://stackoverflow.com/questions/73386475/how-can-i-get-a-kubernetes-clientset-in-go-using-a-json-service-account-key",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\tgke \"google.golang.org/api/container/v1\"\n\t\"google.golang.org/api/option\"\n\t\"golang.org/x/oauth2\"\n\t\"golang.org/x/oauth2/google\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/rest\"\n\tclientcmdapi \"k8s.io/client-go/tools/clientcmd/api\"\n)\nconst (\n\tgoogleAuthPlugin = \"gcp\"\n\tprojectID        = \"my_project\"\n\tclusterName      = \"my_cluster\"\n    zone             = \"my_cluster_zone\"\n\tscope            = \"https://www.googleapis.com/auth/cloud-platform\"\n)\ntype googleAuthProvider struct {\n\ttokenSource oauth2.TokenSource\n}\n// These funcitons are needed even if we don't utilize them\n// So that googleAuthProvider is an rest.AuthProvider interface\nfunc (g *googleAuthProvider) WrapTransport(rt http.RoundTripper) http.RoundTripper {\n\treturn &oauth2.Transport{\n\t\tBase:   rt,\n\t\tSource: g.tokenSource,\n\t}\n}\nfunc (g *googleAuthProvider) Login() error { return nil }\nfunc main() {\n\tctx := context.Background()\n    // Extract a token from the JSON SA key\n\tdata, err := ioutil.ReadFile(\"sa_key.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcreds, err := google.CredentialsFromJSON(ctx, data, scope)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttoken, err := creds.TokenSource.Token()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttokenSource := oauth2.StaticTokenSource(token)\n    // Authenticate with the token\n    // If it's nil use Google ADC\n\tif err := rest.RegisterAuthProviderPlugin(googleAuthPlugin,\n\t\tfunc(clusterAddress string, config map[string]string, persister rest.AuthProviderConfigPersister) (rest.AuthProvider, error) {\n\t\t\tvar err error\n\t\t\tif tokenSource == nil {\n\t\t\t\ttokenSource, err = google.DefaultTokenSource(ctx, scope)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, fmt.Errorf(\"failed to create google token source: %+v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn &googleAuthProvider{tokenSource: tokenSource}, nil\n\t\t}); err != nil {\n\t\tlog.Fatalf(\"Failed to register %s auth plugin: %v\", googleAuthPlugin, err)\n\t}\n\tgkeClient, err := gke.NewService(ctx, option.WithTokenSource(tokenSource))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tclientset, err := getClientSet(ctx, gkeClient, projectID, org, env)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Demo to make sure it works\n\tpods, err := clientset.CoreV1().Pods(\"\").List(ctx, metav1.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    log.Printf(\"There are %d pods in the cluster\", len(pods.Items))\n\tfor _, pod := range pods.Items {\n\t\tfmt.Println(pod.Name)\n\t}\n}\nfunc getClientSet(ctx context.Context, client *gke.Service, projectID, name string) (*kubernetes.Clientset, error) {\n    // Get cluster info\n\tcluster, err := client.Projects.Zones.Clusters.Get(projectID, zone, name).Context(ctx).Do()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    // Decode cluster CA certificate\n\tcert, err := base64.StdEncoding.DecodeString(cluster.MasterAuth.ClusterCaCertificate)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    // Build a config using the cluster info\n\tconfig := &rest.Config{\n\t\tTLSClientConfig: rest.TLSClientConfig{\n\t\t\tCAData: cert,\n\t\t},\n\t\tHost:         \"https://\" + cluster.Endpoint,\n\t\tAuthProvider: &clientcmdapi.AuthProviderConfig{Name: googleAuthPlugin},\n\t}\n\treturn kubernetes.NewForConfig(config)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73351968/golang-unmarshal-mapset",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"reflect\"\n\tmapset \"github.com/deckarep/golang-set/v2\"\n)\ntype IntSet struct {\n\tValues mapset.Set[int] `json:\"values\"`\n}\nfunc (s *IntSet) UnmarshalJSON(data []byte) error {\n\t// Anonymous struct for the unmarshalling purposes.\n\tv := struct {\n\t\tValues []int `json:\"values\"`\n\t}{}\n\t// Unmarshal bytes into a custom struct that\n\t// contains int slice as the only value.\n\tif err := json.Unmarshal(data, &v); err != nil {\n\t\treturn err\n\t}\n\t// If there is no set inside a struct, create\n\t// a new set with a single '0' value.\n\tif s.Values == nil {\n\t\ts.Values = mapset.NewSet(0)\n\t}\n\t// Empty the set.\n\ts.Values.Clear()\n\t// Add all the values from the unmarshalled\n\t// bytes to the struct set.\n\tfor _, value := range v.Values {\n\t\ts.Values.Add(value)\n\t}\n\treturn nil\n}\nfunc main() {\n\ta := IntSet{Values: mapset.NewSet(1, 2, 3)}\n\tr, err := json.Marshal(a)\n\tfmt.Println(r, err)\n\tvar b IntSet\n\terr = json.Unmarshal(r, &b)\n\tfmt.Println(b, err)\n\t// Compare a and b using [reflect.DeepEqual].\n\tif !reflect.DeepEqual(a, b) {\n\t\tlog.Fatalln(\"a and b are not equal\")\n\t}\n\t// Compare a and v values by using any\n\t// of the sets' Equal() method.\n\tif !a.Values.Equal(b.Values) || !b.Values.Equal(a.Values) {\n\t\tlog.Fatalln(\"a and b values are not equal\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73351086/how-to-handle-unmarshaling-to-a-custom-interface-whose-type-could-only-be-determ",
    "body": "func (r *Response) UnmarshalJSON(data []byte) error {\n\tvar raw struct {\n\t\tFoo    string          `json:\"foo\"`\n\t\tObject json.RawMessage `json:\"object\"`\n\t}\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn err\n\t}\n\tr.Foo = raw.Foo\n\tvar obj struct {\n\t\tType string `json:\"type\"`\n\t}\n\tif err := json.Unmarshal(raw.Object, &obj); err != nil {\n\t\treturn err\n\t}\n\tswitch obj.Type {\n\tcase \"action\":\n\t\tr.Object = new(Action)\n\tcase \"activity\":\n\t\tr.Object = new(Activity)\n\t}\n\treturn json.Unmarshal(raw.Object, r.Object)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73261683/how-to-start-a-new-goroutine-each-time-a-channel-is-updated",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\tvar Wg sync.WaitGroup\n\tlink := make(chan string)\n\tgo func() {\n\t\tfor i := 0; i < 20; i++ {\n\t\t\t//should simulate the monitoring of the original web page\n\t\t\tnextLink := fmt.Sprintf(\"cool-website-%d\", i)\n\t\t\tlink <- nextLink\n\t\t}\n\t\tclose(link)\n\t}()\n\tvar i int\n\tfor newLink := range link {\n\t\tWg.Add(1)\n\t\tgo func(i int) {\n\t\t\tsimulateScraping(i, newLink)\n\t\t\tWg.Done()\n\t\t}(i)\n\t\ti++\n\t}\n\tWg.Wait()\n}\nfunc simulateScraping(i int, link string) {\n\tfmt.Printf(\"Simulating process %d\\n\", i)\n\tfmt.Printf(\"scraping www.%s.com\\n\", link)\n\ttime.Sleep(3 * time.Second)\n\tfmt.Printf(\"Finished process %d\\n\", i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73231636/testing-nats-subscription-in-go",
    "body": "func (conn *JetStreamConnection) SubscribeMultiple(ctx context.Context, subject string,\n    subscribers ...*SubscriptionCallback) error {\n    callbacks := make(map[string]func(*pnats.NatsMessage) (func(context.Context), error))\n    for _, subscriber := range subscribers {\n        callbacks[subscriber.Category] = subscriber.Callback\n    }\n    fullSubject := fmt.Sprintf(\"%s.*\", subject)\n    sub, err := conn.context.SubscribeSync(fullSubject, nats.Context(ctx))\n    if err != nil {\n        return err\n    }\n    return run(ctx, sub)\n}\n//go:generate mockgen -source conn.go -destination ../mocks/conn.go -package mocks\ntype ISubscription interface{\n    NextMsgWithContext(ctx context.Context) (*nats.Msg, error)\n    Unsubscribe() error\n}\nfunc (conn *JetStreamConnection) run(ctx context.Context, sub ISubscription) error {\nloop:\n    for {\n        select {\n        case <-ctx.Done():\n            break loop\n        default:\n        }\n        msg, err := sub.NextMsgWithContext(ctx)\n        if err != nil {\n            return err\n        }\n        msg.InProgress()\n        var message pnats.NatsMessage\n        if err := conn.unmarshaller(msg.Data, &message); err != nil {\n            msg.Term()\n            return err\n        }\n        actualSubject := fmt.Sprintf(\"%s.%s\", subject, message.Context.Category)\n        subscriber, ok := callbacks[message.Context.Category]\n        if !ok {\n            msg.Nak()\n            continue\n        }\n        callback, err := subscriber(&message)\n        if err == nil {\n            msg.Ack()\n        } else {\n            msg.Nak()\n            return err\n        }\n        callback(ctx)\n    }\n    if err := sub.Unsubscribe(); err != nil {\n        return err\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73102530/how-to-remove-duplicate-json-information-on-struct",
    "body": "type Q struct {\n\tLinks     Links     `json:\"_links\"`\n\tCreatedAt time.Time `json:\"created_at\"`\n\tID        string    `json:\"id\"`\n\tName      string    `json:\"name\"`\n\tUpdatedAt time.Time `json:\"updated_at\"`\n}\ntype Links struct {\n\tSelf Self `json:\"self\"`\n}\ntype Self struct {\n\tHref string `json:\"href\"`\n}\nfunc main() {\n\texpected, _ := json.Marshal(\n\t\tQ{Links: Links{\n\t\t\tSelf: Self{\n\t\t\t\tHref: \"testurl\",\n\t\t\t},\n\t\t},\n\t\t\tID:        \"testid\",\n\t\t\tName:      \"testname\",\n\t\t\tCreatedAt: time.Now(),\n\t\t\tUpdatedAt: time.Now(),\n\t\t})\n\tfmt.Println(string(expected))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72647252/replace-characters-in-go-serialization-by-using-custom-marshaljson-method",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype Foo struct {\n\tName    string\n\tSurname string\n\tLikes   map[string]interface{}\n\tHates   map[string]interface{}\n\tnewGuy  bool //rpcclonable\n}\nfunc main() {\n\tfoo := &Foo{\n\t\tName:    \"George\",\n\t\tSurname: \"Denkin\",\n\t\tLikes: map[string]interface{}{\n\t\t\t\"Sports\":  \"volleyball\",\n\t\t\t\"Message\": \"<Geroge> play volleyball <usually>\",\n\t\t},\n\t}\n\tbuf := &bytes.Buffer{} // or &strings.Builder{} as from the example of @mkopriva\n\tenc := json.NewEncoder(buf)\n\tenc.SetEscapeHTML(false)\n\terr := enc.Encode(foo)\n\tif err != nil {\n\t\treturn\n\t}\n\tfmt.Println(buf.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72551944/cross-platform-way-to-draw-buffer-of-pixels-to-frame-in-golang",
    "body": "package main\nimport (\n\t\"image\"\n\t\"runtime\"\n\t\"github.com/go-gl/gl/all-core/gl\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n)\nfunc init() {\n\t// GLFW: This is needed to arrange that main() runs on main thread.\n\t// See documentation for functions that are only allowed to be called from the main thread.\n\truntime.LockOSThread()\n}\nfunc main() {\n\terr := glfw.Init()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer glfw.Terminate()\n\twindow, err := glfw.CreateWindow(640, 480, \"My Window\", nil, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\twindow.MakeContextCurrent()\n\terr = gl.Init()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar texture uint32\n\t{\n\t\tgl.GenTextures(1, &texture)\n\t\tgl.BindTexture(gl.TEXTURE_2D, texture)\n\t\tgl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n\t\tgl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n\t\tgl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)\n\t\tgl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)\n\t\tgl.BindImageTexture(0, texture, 0, false, 0, gl.WRITE_ONLY, gl.RGBA8)\n\t}\n\tvar framebuffer uint32\n\t{\n\t\tgl.GenFramebuffers(1, &framebuffer)\n\t\tgl.BindFramebuffer(gl.FRAMEBUFFER, framebuffer)\n\t\tgl.FramebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0)\n\t\tgl.BindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer)\n\t\tgl.BindFramebuffer(gl.DRAW_FRAMEBUFFER, 0)\n\t}\n\tfor !window.ShouldClose() {\n\t\tvar w, h = window.GetSize()\n\t\tvar img = image.NewRGBA(image.Rect(0, 0, w, h))\n\t\t// -------------------------\n\t\t// MODIFY OR LOAD IMAGE HERE\n\t\t// -------------------------\n\t\tgl.BindTexture(gl.TEXTURE_2D, texture)\n\t\tgl.TexImage2D(gl.TEXTURE_2D, 0, gl.RGBA8, int32(w), int32(h), 0, gl.RGBA, gl.UNSIGNED_BYTE, gl.Ptr(img.Pix))\n\t\tgl.BlitFramebuffer(0, 0, int32(w), int32(h), 0, 0, int32(w), int32(h), gl.COLOR_BUFFER_BIT, gl.LINEAR)\n\t\twindow.SwapBuffers()\n\t\tglfw.PollEvents()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72402913/skip-nulls-when-unmarshalling-json-array-into-slice-of-pointers",
    "body": "type Item struct {\n    Id       string      `json:\"id\"`\n    Name     string      `json:\"name\"`\n    Products ProductList `json:\"products\"`\n}\n// Use []*Product if you intend to modify\n// the individual elements in the slice.\n// Use []Product if the elements are read-only.\ntype ProductList []*Product\n// Implememt the json.Unmarshaler interface.\n// This will cause the encoding/json decoder to\n// invoke the UnmarshalJSON method, instead of\n// performing the default decoding, whenever it\n// encounters a ProductList instance.\nfunc (ls *ProductList) UnmarshalJSON(data []byte) error {\n    // first, do a normal unmarshal\n    pp := []*Product{}\n    if err := json.Unmarshal(data, &pp); err != nil {\n        return err\n    }\n    // next, append only the non-nil values\n    for _, p := range pp {\n        if p != nil {\n            *ls = append(*ls, p)\n        }\n    }\n    // done\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72402913/skip-nulls-when-unmarshalling-json-array-into-slice-of-pointers",
    "body": "type SkipNullList[T any] []*T\nfunc (ls *SkipNullList[T]) UnmarshalJSON(data []byte) error {\n\tpp := []*T{}\n\tif err := json.Unmarshal(data, &pp); err != nil {\n\t\treturn err\n\t}\n\tfor _, p := range pp {\n\t\tif p != nil {\n\t\t\t*ls = append(*ls, p)\n\t\t}\n\t}\n\treturn nil\n}\ntype Item struct {\n\tId       string                `json:\"id\"`\n\tName     string                `json:\"name\"`\n\tProducts SkipNullList[Product] `json:\"products\"`\n}\ntype Product struct {\n    // ...\n    Variants SkipNullList[Variant] `json:\"variants\"`\n}\ntype Variant struct {\n    // ...\n    Shippings SkipNullList[Shipping] `json:\"shippings\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72389203/how-to-run-a-delete-query-in-golang-that-returns-the-id-of-deleted-entity",
    "body": "package yourpackage\nimport (\n  \"context\"\n  \"github.com/google/uuid\"\n  \"github.com/jackc/pgx/v4\"\n)\nfunc DeleteRecords(/*your args*/) ([]uuid.UUID, error) {\n  var recordIDs []uuid.UUID\n  // build your deleteQuery object.\n  rows, err := pgConnPool.Query(context.Background(), deleteQuery)\n  if err != nil {\n    return nil, err\n  }\n  defer rows.Close()\n  for rows.Next() {\n    var recordID uuid.UUID\n    if err := rows.Scan(&recordID); err != nil {\n      return nil, err\n    }\n    recordIDs = append(recordIDs, recordID)\n  }\n  return recordIDs, rows.Err() // Ensure no reading error occurred\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72245849/how-to-count-number-of-characters-and-words-in-an-html-file-or-html-string",
    "body": "input := []byte(\"<h1>Hello</h1>\\n<h1>Hello</h1>\")\n\ttags, _ := regexp.Compile(\"(\\\\<\\\\/?[A-z0-9]+\\\\>)|(\\\\\\\\[A-z]{1})\")\n\t// remove tags and backslash characters\n\tinput = tags.ReplaceAll(input, []byte(\" \"))\n\twords, _ := regexp.Compile(\"[A-z0-9]+\")\n\t// find all matched words and count them\n\tfmt.Println(\"total words: \", len(words.FindAll(input, -1)))\n\tchars, _ := regexp.Compile(\"[A-z0-9]{1}\")\n\t// find all matched characters and count them\n\tfmt.Println(\"total characters: \", len(chars.FindAll(input, -1)))"
  },
  {
    "url": "https://stackoverflow.com/questions/71867711/converting-xml-to-json-in-golang",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"strings\"\n\txj \"github.com/basgys/goxml2json\"\n)\nconst prefix = \"veryuniqueattrprefix-\"\nfunc main() {\n\txml := strings.NewReader(`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <osm version=\"0.6\" generator=\"CGImap 0.0.2\">\n     <bounds minlat=\"54.0889580\" minlon=\"12.2487570\" maxlat=\"54.0913900\" maxlon=\"12.2524800\"/>\n     <foo>bar</foo>\n    </osm>`)\n\t// Decode XML document\n\troot := &xj.Node{}\n\terr := xj.NewDecoder(\n\t\txml,\n\t\txj.WithAttrPrefix(prefix),\n\t).Decode(root)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tRemoveAttr(root)\n\t// Then encode it in JSON\n\tbuf := new(bytes.Buffer)\n\te := xj.NewEncoder(buf)\n\terr = e.Encode(root)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(buf.String())\n}\nfunc RemoveAttr(n *xj.Node) {\n\tfor k, v := range n.Children {\n\t\tif strings.HasPrefix(k, prefix) {\n\t\t\tdelete(n.Children, k)\n\t\t} else {\n\t\t\tfor _, n := range v {\n\t\t\t\tRemoveAttr(n)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71656425/is-aix-7-2-supported-by-some-version-of-go",
    "body": "aix/ppc64\nandroid/386\nandroid/amd64\nandroid/arm\nandroid/arm64\ndarwin/amd64\ndarwin/arm64\ndragonfly/amd64\nfreebsd/386\nfreebsd/amd64\nfreebsd/arm\nfreebsd/arm64\nillumos/amd64\nios/amd64\nios/arm64\njs/wasm\nlinux/386\nlinux/amd64\nlinux/arm\nlinux/arm64\nlinux/mips\nlinux/mips64\nlinux/mips64le\nlinux/mipsle\nlinux/ppc64\nlinux/ppc64le\nlinux/riscv64\nlinux/s390x\nnetbsd/386\nnetbsd/amd64\nnetbsd/arm\nnetbsd/arm64\nopenbsd/386\nopenbsd/amd64\nopenbsd/arm\nopenbsd/arm64\nopenbsd/mips64\nplan9/386\nplan9/amd64\nplan9/arm\nsolaris/amd64\nwindows/386\nwindows/amd64\nwindows/arm\nwindows/arm64"
  },
  {
    "url": "https://stackoverflow.com/questions/71582516/aws-sdk-go-v2-set-custom-header-on-putobjectinput",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/credentials\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/s3/manager\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n\t\"github.com/aws/smithy-go/middleware\"\n\tsmithyhttp \"github.com/aws/smithy-go/transport/http\"\n)\nfunc SetHttpHeader(key, value string) func(*middleware.Stack) error {\n\treturn func(stack *middleware.Stack) error {\n\t\treturn stack.Build.Add(middleware.BuildMiddlewareFunc(\"IDoEVaultGrant\", func(\n\t\t\tctx context.Context, in middleware.BuildInput, next middleware.BuildHandler,\n\t\t) (\n\t\t\tmiddleware.BuildOutput, middleware.Metadata, error,\n\t\t) {\n\t\t\tswitch v := in.Request.(type) {\n\t\t\tcase *smithyhttp.Request:\n\t\t\t\tv.Header.Add(key, value)\n\t\t\t}\n\t\t\treturn next.HandleBuild(ctx, in)\n\t\t}), middleware.Before)\n\t}\n}\nfunc main() {\n\tclient := s3.New(s3.Options{\n\t\tCredentials: credentials.NewStaticCredentialsProvider(\"your-key-id\", \"your-key-secret\", \"\"),\n\t}, s3.WithAPIOptions(SetHttpHeader(\"key\", \"value\")))\n\tuploader := manager.NewUploader(client, func(uploader *manager.Uploader) {\n\t\tuploader.PartSize = 64 * 1024 * 1024 // 64MB\n\t})\n\tfile, err := os.Open(\"your-file\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\toutput, err := uploader.Upload(context.TODO(), &s3.PutObjectInput{\n\t\tBucket: aws.String(\"your-bucket\"),\n\t\tKey:    aws.String(\"your-key\"),\n\t\tBody:   file,\n\t})\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(output.Location)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71535674/golang-reads-html-tags-from-json-string-data-as-lt-and-gt-which-causes-re",
    "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic JSON Events</title>\n    <link rel=\"stylesheet\" href=\"/blogtemplate.css\"></style>\n</head>\n<body>\n    <section id=\"title\">\n        <h1 id=\"text-title\">{{.Title}}</h1>\n        <time id=\"timestamp\">\n            {{.Timestamp}}\n        </time>\n    </section>\n    <nav role=\"navigation\" id=\"site-nav\">\n        <ul id=\"sitemap\">\n        </ul>\n    </nav>\n    <main role=\"main\" id=\"main\">\n        {{range $element := .Main}} <p>{{$element}}</p> {{end}}\n    </main>\n    <footer role=\"contentinfo\" id=\"footer\">\n        <form id=\"contact-form\" role=\"form\">\n        <address>\n            Contact me by <a id=\"my-email\" href=\"mailto:antonhibl11@gmail.com\" class=\"my-email\">e-mail</a>\n        </address>\n        </form>\n    </footer>\n<script defer src=\"/blogtemplate.js\">\n</script>\n</body>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/71359054/how-to-concurrently-stream-response-back-to-the-client-in-golang",
    "body": "// buffered, so the workers can send and exit immediately\nout := make(chan <type of val>, len(data))\n// you will have to close the out chan when all work is done\nwg := &sync.WaitGroup{}\nwg.Add(len(data))\ngo func() {\n    wg.Wait()\n    close(out)\n}()\nfor _, cid := range data {\n  // don't close around the loop variable\n  go func (id int64) {\n    defer wg.Done()\n    val, err := // obtain output value somehow\n    if err != nil {\n        return\n    }\n    out <- val\n  }(cid)\n}\nfor val := range out {\n  if err := stream.Send(val); err != nil {\n    log.Printf(\"send error %v\", err)\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71056755/mapping-string-to-uuid-in-go",
    "body": "func decode(input, output interface{}) error {\n\tconfig := &mapstructure.DecoderConfig{\n\t\tDecodeHook: mapstructure.ComposeDecodeHookFunc(\n\t\t\tstringToUUIDHookFunc(),\n\t\t),\n\t\tResult: &output,\n\t}\n\tdecoder, err := mapstructure.NewDecoder(config)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn decoder.Decode(input)\n}\nfunc stringToUUIDHookFunc() mapstructure.DecodeHookFunc {\n\treturn func(f reflect.Type, t reflect.Type, data interface{}) (interface{}, error) {\n\t\tif f.Kind() != reflect.String {\n\t\t\treturn data, nil\n\t\t}\n\t\tif t != reflect.TypeOf(uuid.UUID{}) {\n\t\t\treturn data, nil\n\t\t}\n\t\treturn uuid.Parse(data.(string))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70706600/golang-writing-to-a-variable-has-no-effect-in-a-goroutine-if-immediately-follow",
    "body": "~ go tool compile -S main.go\n...\n\"\".main.func1 STEXT nosplit size=3 args=0x0 locals=0x0 funcid=0x0\n        0x0000 00000 (main.go:10)       TEXT    \"\".main.func1(SB), NOSPLIT|NEEDCTXT|ABIInternal, $0-0\n        0x0000 00000 (main.go:10)       FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0000 00000 (main.go:10)       FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0000 00000 (main.go:12)       XCHGL   AX, AX\n        0x0001 00001 (main.go:1)        JMP     0\n        0x0000 90 eb fd"
  },
  {
    "url": "https://stackoverflow.com/questions/70536680/if-each-thread-needs-to-resume-work-whenever-any-thread-finds-some-new-informat",
    "body": "type G struct {\n  numThreads           int\n  numThreadsReady      *uint32 // initialize to 0 somewhere appropriate\n  notifyAllFlag        *uint32 // initialize to 0 somewhere appropriate\n  allCanGoFlag         *uint32 // initialize to 0 somewhere appropriate\n  lock                 *uint32 // initialize to 0 somewhere appropriate\n  // some data, that the workers need access to\n}\n// This function is thread-safe in so far as several\n// workers can concurrently add information.\n//\n// The function is optimized for heavy contention; most\n// threads can leave almost immediately. One threads\n// cleans up any mess they leave behind (and even in\n// bad cases that is not too much).\nfunc (g *G) addInformation(i infoType) {\n  // Step 1: Make information available to all threads.\n  // Step 2: Enqueue information at the end of some array.\n  // Since the responsibility to enqueue an information may\n  // be passed to another thread, it is important that the\n  // last step is executed by the thread which enqueues the\n  // information(s) in order to ensure, that the information\n  // successfully has been enqueued.\n  // Step 3:\n  atomic.StoreUint32(g.notifyAllFlag,1)        // all threads need to be notified\n}\n// If a new information has been added, we must ensure,\n// that every thread, that had finished, resumes work\n// and processes any newly added informations.\n//\n// This function is not thread-safe. Make sure not to\n// have several threads call this function concurrently\n// if these calls are not guarded by some lock.\nfunc (g *G) notifyAll() {\n  if atomic.LoadUint32(g.notifyAllFlag,1) {\n    for j := range g.s {\n      atomic.StoreUint32(g.s[j].needsToResumeWorkFlag, 1)\n    }\n    atomic.StoreUint32(g.notifyAllFlag,0)\n    atomic.StoreUint32(g.numThreadsReady,0)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70536680/if-each-thread-needs-to-resume-work-whenever-any-thread-finds-some-new-informat",
    "body": "type worker struct {\n  // Each worker contains a pointer to g\n  // such that it has access to its member\n  // variables and is able to call the\n  // function g.addInformation(i) as soon\n  // as it finds some information i.\n  g    *G\n  // If new work has been added, the thread\n  // is notified by setting the uint32\n  // at which needsToResumeWorkFlag points to 1.\n  needsToResumeWorkFlag *uint32 // initialize to 0 somewhere appropriate\n  incrementedNumReadyFlag *uint32 // initialize to 0 somewhere appropriate\n  // Also contains some other stuff.\n}\nfunc (s *worker) FooInParallel(wg *sync.WaitGroup) {\n  defer wg.Done()\n  for {\n    a := s.processAllInformation()\n    if atomic.LoadUint32(s.g.allCanGoFlag, 1) {\n      return\n    }\n    if atomic.CompareAndSwapUint32(g.lock,0,1) { // If possible, lock.\n      s.g.notifyAll() // It is essential, that this is also guarded by the lock.\n      if atomic.LoadUint32(s.needsToResumeWorkFlag) == 1 {\n        atomic.StoreUint32(s.needsToResumeWorkFlag,0)\n        // Some new information was found, and this thread can't be sure,\n        // whether it already has processed it. Since the counter for\n        // how many threads are ready had been reset, we must increment\n        // that counter after the next call processAllInformation() in the\n        // following iteration.\n        atomic.StoreUint32(s.incrementedNumReadyFlag,0)\n      } else {\n        // Increment number of ready threads by one, if this thread had not\n        // done this before (since the last newly found information).\n        if atomic.CompareAndSwapUint32(s.incrementedNumReadyFlag,0,1) {\n          atomic.AddUint32(s.g.numThreadsReady,1)\n        }\n        // If all threads are ready, give them all a signal.\n        if atomic.LoadUint32(s.g.numThreadsReady) == s.g.numThreads {\n          atomic.StoreUint32(s.g.allCanGo, 1)\n        }\n      }\n      atomic.StoreUint32(g.lock,0) // Unlock.\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70172685/loop-through-each-element-in-swagger-yaml-in-go",
    "body": "func main() {\n\tm := make(map[string]interface{})\n\terr := yaml.Unmarshal([]byte(data), &m)\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\", err)\n\t}\n\tfor k, v := range m {\n\t\tif k != \"paths\" {\n\t\t\tcontinue\n\t\t}\n\t\tm2, ok := v.(map[interface{}]interface{})\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tif ok {\n\t\t\tfor path, x := range m2 {\n\t\t\t\tm3, ok := x.(map[interface{}]interface{})\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfor method, x := range m3 {\n\t\t\t\t\tm4, ok := x.(map[interface{}]interface{})\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\toperationId, ok := m4[\"operationId\"]\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tfmt.Println(path, method, operationId)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69730864/how-can-i-get-a-size-of-request-header-in-bytes-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\nfunc main() {\n\tres := make(chan error)\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"%+v\", r.Header)\n\t})\n\ts := &http.Server{\n\t\tAddr:           \"127.0.0.1:8103\",\n\t\tHandler:        mux,\n\t\tReadTimeout:    1 * time.Second,\n\t\tWriteTimeout:   1 * time.Second,\n\t\tMaxHeaderBytes: 2048,\n\t}\n\tif l, err := net.Listen(\"tcp\", \"127.0.0.1:8103\"); err != nil {\n\t\tpanic(fmt.Errorf(\"Couldn't listen: %w\", err))\n\t} else {\n\t\tgo func() {\n\t\t\tres <- s.Serve(l)\n\t\t}()\n\t}\n\tclient := &http.Client{\n\t\tTimeout: 3 * time.Second,\n\t}\n\treq, err := http.NewRequest(\"GET\", \"http://127.0.0.1:8103\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Add(\"X-Long-Header\", strings.Repeat(\"long \", 2048)+\"header\")\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"HTTP Request failed: %w\", err))\n\t}\n\tfmt.Println(resp)\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"Could not read response body: %w\", err))\n\t}\n\tfmt.Println(\"Body:\", string(body))\n\ts.Shutdown(context.Background())\n\t<-res\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69567686/how-to-shared-items-in-different-testing-files",
    "body": "func TestOperators(t *testing.T) {\n\tvar complex1, complex2, complex3 *cpx.Complex\n\tcomplex1 = &cpx.Complex{\n\t\tReal: 1,\n\t\tImag: 10,\n\t}\n\tcomplex2 = &cpx.Complex{\n\t\tReal: 2,\n\t\tImag: 9,\n\t}\n\tt.Run(\"TestAdd\", func(t *testing.T) {\n\t\tcomplex3 = cpx.ComplexAdd(complex1, complex2)\n\t\tassert.NotNil(t, complex3)\n\t})\n\tt.Run(\"TestSubtract\", func(t *testing.T) {\n\t\tcomplex3 = cpx.ComplexSubtract(complex1, complex2)\n\t\t// Tests here\n\t})\n\tt.Run(\"TestMultiply\", Multiply)\n\t// More sub tests...\n}\nfunc Multiply(t *testing.T) {\n\t// Tests here\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68218027/how-do-i-sort-a-map-in-go-based-on-another-maps-key-values",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nvar reference = map[string]string{\"Ali\": \"Ali_1\", \"Cat\": \"Cat1\", \"Bob\": \"Bob\"}\nfunc main() {\n\tm1 := testMap()\n\tm2 := testMap2()\n\tfor key1, key2 := range reference {\n\t\tv1, _ := m1[key1]\n\t\tv2, _ := m2[key2]\n\t\tfmt.Printf(\"%s/%s: (%d, %d)\\n\", key1, key2, v1, v2)\n        // not sure what you want with these, so I'm just printing\n\t}\n}\nfunc testMap() map[string]int {\n\treturn map[string]int{\"Ali_1\": 2, \"Bob\": 3, \"Cat1\": 3} // goal is to sort this in the same order of keys(names) as the reference variable\n}\nfunc testMap2() map[string]int {\n\treturn map[string]int{\"Ali\": 2, \"Bob\": 3, \"Cat\": 3} // goal is to sort this in the same order of keys(names) as the reference variable\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68218027/how-do-i-sort-a-map-in-go-based-on-another-maps-key-values",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nvar keyOrder = []string{\"Ali\", \"Cat\", \"Bob\"}\nvar reference = map[string]string{\"Ali\": \"Ali_1\", \"Cat\": \"Cat1\", \"Bob\": \"Bob\"}\nfunc main() {\n\tm1 := testMap()\n\tm2 := testMap2()\n\tfor _, key1 := range keyOrder {\n\t\tkey2, _ := reference[key1]\n\t\tv1, _ := m1[key1]\n\t\tv2, _ := m2[key2]\n\t\tfmt.Printf(\"%s/%s: (%d, %d)\\n\", key1, key2, v1, v2)\n\t}\n}\nfunc testMap() map[string]int {\n\treturn map[string]int{\"Ali_1\": 2, \"Bob\": 3, \"Cat1\": 3} // goal is to sort this in the same order of keys(names) as the reference variable\n}\nfunc testMap2() map[string]int {\n\treturn map[string]int{\"Ali\": 2, \"Bob\": 3, \"Cat\": 3} // goal is to sort this in the same order of keys(names) as the reference variable\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67100960/how-to-extract-field-from-protobuf-message-without-schema",
    "body": "import \"google.golang.org/protobuf/encoding/protowire\"\nfunc getData(src []byte) (creationTime, expiryTime uint64, err error) {\n\tremaining := src\n\tfor len(remaining) > 0 {\n\t\tfieldNum, wireType, n := protowire.ConsumeTag(remaining)\n\t\tif n < 0 {\n\t\t\treturn 0, 0, fmt.Errorf(\"failed to consume tag: %w\", protowire.ParseError(n))\n\t\t}\n\t\tremaining = remaining[n:]\n\t\tswitch fieldNum {\n\t\tcase 4: // Expiry time\n\t\t\tif wireType != protowire.VarintType {\n\t\t\t\treturn 0, 0, fmt.Errorf(\"unexpected type for expiry time field: %d\", wireType)\n\t\t\t}\n\t\t\texpiryTime, n = protowire.ConsumeVarint(remaining)\n\t\tcase 5: // Creation time\n\t\t\tif wireType != protowire.VarintType {\n\t\t\t\treturn 0, 0, fmt.Errorf(\"unexpected type for creation time field: %d\", wireType)\n\t\t\t}\n\t\t\tcreationTime, n = protowire.ConsumeVarint(remaining)\n\t\tdefault:\n\t\t\tn = protowire.ConsumeFieldValue(fieldNum, wireType, remaining)\n\t\t}\n\t\tif n < 0 {\n\t\t\treturn 0, 0, fmt.Errorf(\"failed to consume value for field %d: %w\", fieldNum, protowire.ParseError(n))\n\t\t}\n\t\tremaining = remaining[n:]\n\t}\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66737230/http-get-returning-error-429-too-many-requests-after-one-use-when-the-webpage-wo",
    "body": "req.Header.Set(\"authority\", \"www.reddit.com\")\n\treq.Header.Set(\"pragma\", \"no-cache\")\n\treq.Header.Set(\"cache-control\", \"no-cache\")\n\treq.Header.Set(\"sec-ch-ua\", `\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"`)\n\treq.Header.Set(\"sec-ch-ua-mobile\", \"?0\")\n\treq.Header.Set(\"upgrade-insecure-requests\", \"1\")\n\treq.Header.Set(\"user-agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36\")\n\treq.Header.Set(\"accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\")\n\treq.Header.Set(\"dnt\", \"1\")\n\treq.Header.Set(\"sec-fetch-site\", \"none\")\n\treq.Header.Set(\"sec-fetch-mode\", \"navigate\")\n\treq.Header.Set(\"sec-fetch-user\", \"?1\")\n\treq.Header.Set(\"sec-fetch-dest\", \"document\")\n\treq.Header.Set(\"accept-language\", \"en-GB,en;q=0.9\")"
  },
  {
    "url": "https://stackoverflow.com/questions/66592497/golang-pgx-pool-dynamic-configuration",
    "body": "func (p *Pool) getConfig() (*pgxpool.Config, error) {\n\tconfig, err := pgxpool.ParseConfig(\"\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t/**\n\tThis will refresh the password if the connection is expired\n\t*/\n\tconfig.BeforeConnect = func(ctx context.Context, config *pgx.ConnConfig) error {\n\t\tif p.isTokenExpired() {\n\t\t\tcreds, err := p.getCredentials()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tconfig.User = creds.user\n\t\t\tconfig.Password = creds.password\n\t\t\tconfig.Host = creds.host\n\t\t\tconfig.Database = creds.database\n\t\t\tconfig.Port = creds.port\n\t\t\tp.cachedCredentials = creds\n\t\t\tp.expire = time.Now()\n\t\t} else {\n\t\t\tconfig.User = p.cachedCredentials.user\n\t\t\tconfig.Password = p.cachedCredentials.password\n\t\t\tconfig.Host = p.cachedCredentials.host\n\t\t\tconfig.Database = p.cachedCredentials.database\n\t\t\tconfig.Port = p.cachedCredentials.port\n\t\t}\n\t\treturn nil\n\t}\n\treturn config, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66468264/verify-that-my-repo-its-in-fact-a-github-repo-url-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/url\"\n\t\"strings\"\n)\nfunc isGitHubURL(input string) bool {\n\tu, err := url.Parse(input)\n\tif err != nil {\n\t\treturn false\n\t}\n\thost := u.Host\n\tif strings.Contains(host, \":\") {\n\t\thost, _, err = net.SplitHostPort(host)\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn host == \"github.com\"\n}\nfunc main() {\n\turls := []string{\n\t\t\"https://github.com/foo/bar\",\n\t\t\"http://github.com/bar/foo\",\n\t\t\"http://github.com.evil.com\",\n\t\t\"http://github.com:8080/nonstandard/port\",\n\t\t\"http://other.com\",\n\t\t\"not a valid URL\",\n\t}\n\tfor _, url := range urls {\n\t\tfmt.Printf(\"URL: \\\"%s\\\", is GitHub URL: %v\\n\", url, isGitHubURL(url))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64627575/using-transaction-and-simple-db-connection-in-the-same-struct-because-of-this-pa",
    "body": "type DB interface {\n\tBegin() (*Tx, error)\n\tClose() error\n\tContext() context.Context\n\tCopyFrom(r io.Reader, query interface{}, params ...interface{}) (res Result, err error)\n\tCopyTo(w io.Writer, query interface{}, params ...interface{}) (res Result, err error)\n\tExec(query interface{}, params ...interface{}) (Result, error)\n\tExecContext(c context.Context, query interface{}, params ...interface{}) (Result, error)\n\tExecOne(query interface{}, params ...interface{}) (Result, error)\n\tExecOneContext(c context.Context, query interface{}, params ...interface{}) (Result, error)\n\tFormatter() orm.QueryFormatter\n\tModel(model ...interface{}) *orm.Query\n\tModelContext(c context.Context, model ...interface{}) *orm.Query\n\tPrepare(q string) (*Stmt, error)\n\tQuery(model interface{}, query interface{}, params ...interface{}) (Result, error)\n\tQueryContext(c context.Context, model interface{}, query interface{}, params ...interface{}) (Result, error)\n\tQueryOne(model interface{}, query interface{}, params ...interface{}) (Result, error)\n\tQueryOneContext(c context.Context, model interface{}, query interface{}, params ...interface{}) (Result, error)\n\tRunInTransaction(ctx context.Context, fn func(*Tx) error) error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64627575/using-transaction-and-simple-db-connection-in-the-same-struct-because-of-this-pa",
    "body": "type PlayerRepo struct {\n    db       DB\n    teamRepo *TeamRepo\n}\ntype TeamRepo struct {\n    db DB\n}\nfunc NewPlayerRepo(db DB) *PlayerRepo {\n    return &PlayerRepo{\n        db:       db,\n        teamRepo: NewTeamRepo(db),\n    }\n}\nfunc NewTeamRepo(db DB) *TeamRepo {\n    return &TeamRepo{db: db}\n}\nfunc (r *PlayerRepo) WithTransaction(txFunc func(*PlayerRepo) error) (err error) {\n    tx, err := r.db.Begin()\n    if err != nil {\n        return err\n    }\n    defer func() {\n        // rollback if err; commit if no err\n    }()\n    manager := NewPlayerRepo(tx)\n    err = txFunc(manager)\n    return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64627575/using-transaction-and-simple-db-connection-in-the-same-struct-because-of-this-pa",
    "body": "type PlayerRepo struct {\n    db       DB\n    pg       *pg.DB\n    teamRepo *TeamRepo\n}\ntype TeamRepo struct {\n    db DB\n    pg *pg.DB\n}\nfunc NewPlayerRepo(db DB, pg *pg.DB) *PlayerRepo {\n    return &PlayerRepo{\n        db:       db,\n        pg:       pg,\n        teamRepo: NewTeamRepo(db, pg),\n    }\n}\nfunc NewTeamRepo(db DB, pg *pg.DB) *TeamRepo {\n    return &TeamRepo{db: db, pg: pg}\n}\nfunc (r *PlayerRepo) WithTransaction(txFunc func(*PlayerRepo) error) (err error) {\n    tx, err := r.db.Begin()\n    if err != nil {\n        return err\n    }\n    defer func() {\n        // rollback if err; commit if no err\n    }()\n    manager := NewPlayerRepo(tx, r.pg)\n    err = txFunc(manager)\n    return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64234626/how-to-merge-a-json-array-of-json-objects-to-a-single-json-object",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nvar content = `{\n\t\"jsonarray\": [\n    {\n      \"behavior\": [\n        \"file\",\n        \"create_doc_exe\"\n      ],\n      \"id\": 3303511,\n      \"platform\": \"Windows 7 x64 SP1, Adobe Reader 11, Flash 11, Office 2010\"\n    },\n    {\n      \"info\": [\n        \"sign , 3c4e53e \"\n      ],\n      \"behavior\": [\n        \"sys_folder\",\n        \"file\",\n        \"process\",\n        \"crash\"\n      ],\n      \"id\": 3303,\n      \"platform\": \"Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\"\n    }\n  ]\n}`\ntype payload struct {\n\tJSONArray []map[string]interface{} `json:\"jsonarray\"`\n}\nfunc main() {\n\tvar objPayload = payload{\n\t\t[]map[string]interface{}{},\n\t}\n\tif err := json.Unmarshal([]byte(content), &objPayload); err != nil {\n\t\tpanic(err)\n\t}\n\tvar result = map[string]interface{}{}\n\tfor _, item := range objPayload.JSONArray {\n\t\tfor k, v := range item {\n\t\t\tvar ok bool\n\t\t\t// If this is the first time our key is brought up, let's just copy it to the final map\n\t\t\tif _, ok = result[k]; !ok {\n\t\t\t\tresult[k] = v\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// It's not the first time this key shows up, let's convert it to a slice if it's still not\n\t\t\tif _, ok = result[k].([]interface{}); !ok {\n\t\t\t\tresult[k] = []interface{}{result[k]}\n\t\t\t}\n\t\t\t// Then let's ensure our value is also a slice\n\t\t\tif _, ok = v.([]interface{}); !ok {\n\t\t\t\tv = []interface{}{v}\n\t\t\t}\n\t\t\t// Appending it to the result\n\t\t\tresult[k] = append(\n\t\t\t\tresult[k].([]interface{}),\n\t\t\t\tv.([]interface{})...,\n\t\t\t)\n\t\t}\n\t}\n\tif resultBytes, err := json.Marshal(&result); err != nil {\n\t\tpanic(err)\n\t} else {\n\t\tfmt.Printf(\"%s\", resultBytes) //done!\n\t\t// Result should be {\"behavior\":[\"file\",\"create_doc_exe\",\"sys_folder\",\"file\",\"process\",\"crash\"],\"id\":[3303511,3303],\"info\":[\"sign , 3c4e53e \"],\"platform\":[\"Windows 7 x64 SP1, Adobe Reader 11, Flash 11, Office 2010\",\"Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\"]}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61711527/dynamically-update-ranks-of-elements-in-a-redis-sorted-set",
    "body": "127.0.0.1:6379> zadd mysort 100 a 200 b 300 c 500 d 50 e\n(integer) 5\n127.0.0.1:6379> zrevrange mysort 0 -1 withscores\n 1) \"d\"\n 2) \"500\"\n 3) \"c\"\n 4) \"300\"\n 5) \"b\"\n 6) \"200\"\n 7) \"a\"\n 8) \"100\"\n 9) \"e\"\n10) \"50\"\n127.0.0.1:6379> zrevrank mysort d\n(integer) 0\n127.0.0.1:6379> zrevrank mysort e\n(integer) 4\n127.0.0.1:6379> zrem mysort b\n(integer) 1\n127.0.0.1:6379> zrevrank mysort e\n(integer) 3\n127.0.0.1:6379> zrem mysort d\n(integer) 1\n127.0.0.1:6379> zrevrange mysort 0 -1 withscores\n1) \"c\"\n2) \"300\"\n3) \"a\"\n4) \"100\"\n5) \"e\"\n6) \"50\"\n127.0.0.1:6379> zrevrank mysort e\n(integer) 2\n127.0.0.1:6379> zadd mysort 500 q 25 f 350 p\n(integer) 3\n127.0.0.1:6379> zrevrange mysort 0 -1 withscores\n 1) \"q\"\n 2) \"500\"\n 3) \"p\"\n 4) \"350\"\n 5) \"c\"\n 6) \"300\"\n 7) \"a\"\n 8) \"100\"\n 9) \"e\"\n10) \"50\"\n11) \"f\"\n12) \"25\"\n127.0.0.1:6379> zrevrank mysort q\n(integer) 0"
  },
  {
    "url": "https://stackoverflow.com/questions/60856627/google-cloud-function-doesnt-return-the-cors-headers-i-set-using-go",
    "body": "// Package http provides a set of HTTP Cloud Functions samples.\npackage http\nimport (\n        \"fmt\"\n        \"net/http\"\n)\n// CORSEnabledFunction is an example of setting CORS headers.\n// For more information about CORS and CORS preflight requests, see\n// https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request.\nfunc CORSEnabledFunction(w http.ResponseWriter, r *http.Request) {\n        // Set CORS headers for the preflight request\n        if r.Method == http.MethodOptions {\n                w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n                w.Header().Set(\"Access-Control-Allow-Methods\", \"POST\")\n                w.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n                w.Header().Set(\"Access-Control-Max-Age\", \"3600\")\n                w.WriteHeader(http.StatusNoContent)\n                return\n        }\n        // Set CORS headers for the main request.\n        w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n        fmt.Fprint(w, \"Hello, World!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60636689/custom-unmarshalyaml-interface-for-an-interface-and-its-implementations",
    "body": "// helper to load a list of nodes as a concrete type\nfunc appendFruits(fruits []Fruit, kind reflect.Type, input []yaml.Node) ([]Fruit, error) {\n  for i := range input {\n    val := reflect.New(kind).Interface()\n    if err := input[i].Decode(val); err != nil {\n      return nil, err\n    }\n    fruits = append(fruits, val.(Fruit))\n  }\n  return fruits, nil\n}\nfunc (fruitBasket *FruitBasket) UnmarshalYAML(value *yaml.Node) error {\n    var tmp tmpFruitBasket\n    if err := value.Decode(&tmp); err != nil {\n        return err\n    }\n    fruitBasket.Capacity = tmp.Capacity\n    var fruits []Fruit\n    var err error\n    // sadly, there is no nicer way to get the reflect.Type of Apple / Banana\n    fruits, err = appendFruits(\n      fruits, reflect.TypeOf((*Apple)(nil)).Elem(), tmp.Apple)\n    if err != nil {\n      return err\n    }\n    fruits, err = appendFruits(\n      fruits, reflect.TypeOf((*Banana)(nil)).Elem(), tmp.Banana)\n    if err != nil {\n      return err\n    }\n\n    fruitBasket.Fruits = fruits\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60266582/how-to-get-type-from-types-named",
    "body": "func funcHasContextContextAsFirstParam(pass *analysis.Pass, expr ast.Expr) bool {\n\tt := pass.TypesInfo.TypeOf(expr)\n\tif t == nil {\n\t\treturn false\n\t}\n\tbt, ok := t.Underlying().(*types.Signature)\n\tif !ok {\n\t\treturn false\n\t}\n\tparams := bt.Params()\n\tif params.Len() < 1 {\n\t\treturn false\n\t}\n\tparam := params.At(0)\n\tnamed, ok := param.Type().(*types.Named)\n\tif !ok {\n\t\treturn false\n\t}\n\tnamedObj := named.Obj()\n\tif namedObj.Name() != \"Context\" || namedObj.Pkg().Name() != \"context\" {\n\t\treturn false\n\t}\n\treturn true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60050397/is-there-something-like-sql-nulljson-akin-to-sql-nullstring-in-golang",
    "body": "// Scan implements database/sql.Scanner interface\nfunc (m *MyJsonStruct) Scan(src interface{}) error {\n\tif src == nil {\n\t\treturn nil\n\t}\n\tdata, ok := src.([]byte)\n\tif !ok {\n\t\treturn errors.New(\"type assertion to []byte failed\")\n\t}\n\tvar myJsonStruct MyJsonStruct\n\tif err := json.Unmarshal(data, &myJsonStruct); err != nil {\n\t\treturn fmt.Errorf(\"unmarshal myJsonStruct: %w\", err)\n\t}\n\t*m = myJsonStruct\n\treturn nil\n}\n// Value implements database/sql/driver.Valuer interface\nfunc (m MyJsonStruct) Value() (driver.Value, error) {\n\tdata, err := json.Marshal(m)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"marshal myJsonStruct: %w\", err)\n\t}\n\treturn data, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58269694/how-to-start-and-stop-a-function",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tvar wg sync.WaitGroup\n\tdataChannel := make(chan MyObject, 5)\n\twg.Add(2)\n\tgo produce(ctx, &wg, dataChannel)\n\tgo consume(&wg, dataChannel)\n\ttime.Sleep(1 * time.Second)\n\tcancel() // cancel when we are finished consuming data\n\twg.Wait()\n}\nfunc produce(ctx context.Context, wg *sync.WaitGroup, dataChannel chan MyObject) {\n\tdefer wg.Done()\n\ti := 1\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tclose(dataChannel)\n\t\t\treturn // returning not to leak the goroutine\n\t\tcase dataChannel <- MyObject{i}:\n\t\t\ti++\n\t\t\ttime.Sleep(250 * time.Millisecond)\n\t\t}\n\t}\n}\nfunc consume(wg *sync.WaitGroup, dataChannel chan MyObject) {\n\tdefer wg.Done()\n\tfor v := range dataChannel {\n\t\tfmt.Println(v)\n\t}\n}\ntype MyObject struct {\n\ti int\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57987718/how-to-store-gos-current-time-hour-minute-seconds-on-postgres-table",
    "body": "package main\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n    _ \"github.com/lib/pq\"\n)\nfunc main() {\n    db, err := sql.Open(\"postgres\", \"\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    _, err = db.Exec(\"CREATE TABLE foo (t timetz)\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    now := time.Now()\n    _, err = db.Exec(\"INSERT INTO foo VALUES ($1)\", now)\n    if err != nil {\n        log.Fatal(err)\n    }\n    var t time.Time\n    err = db.QueryRow(\"SELECT t FROM foo\").Scan(&t)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(now.Format(time.RFC3339)) // 2019-09-18T10:22:36+02:00\n    fmt.Println(t.Format(time.RFC3339))   // 0000-01-01T10:22:36+02:00\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57015665/validate-date-in-go-template",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"os\"\n\t\"time\"\n)\n// Note the call to the `After` function of the date.\nconst templateText = `\n{{ if .Data.StartDate.After .Epoch }}\n   <div class=\"box date-row\" id=\"startdate-{{ .Data.DepartureTimeID }}\">{{ .Data.StartDate.Format \"2006-01-02\" }}</div>\n{{ else }}\n   <div class=\"box date-row\" id=\"startdate-{{ .Data.DepartureTimeID }}\">No date</div>\n{{ end }}\n`\nfunc main() {\n     // shortcut for the sake of brevity.\n\ttmpl := template.Must(template.New(\"titleTest\").Parse(templateText))\n\n\t// Create an anonymous wrapper struct for your data and the additional\n\t// time value you need to compare against\n\ttcx := struct {\n\t    // This of course may be of the type you actually use.\n\t\tData struct {\n\t\t\tStartDate       time.Time\n\t\t\tDepartureTimeID int\n\t\t}\n\t\tEpoch time.Time\n\t}{\n\t\tData: struct {\n\t\t\tStartDate       time.Time\n\t\t\tDepartureTimeID int\n\t\t}{time.Now(), 1},\n\t\tEpoch: time.Time{},\n\t}\n\ttmpl.Execute(os.Stdout, tcx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57015665/validate-date-in-go-template",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"os\"\n\t\"log\"\n\t\"time\"\n)\nconst templateText = `\n{{ if afterEpoch .StartDate }}\n   <div class=\"box date-row\" id=\"startdate-{{ .DepartureTimeID }}\">{{ .StartDate.Format \"2006-01-02\" }}</div>\n{{ else }}\n   <div class=\"box date-row\" id=\"startdate-{{ .DepartureTimeID }}\"></div>\n{{ end }}\n`\nfunc AfterEpoch(t time.Time) bool {\n\treturn t.After(time.Time{})\n}\ntype yourData struct {\n\tDepartureTimeID int\n\tStartDate       time.Time\n}\nfunc main() {\n\tfuncMap := template.FuncMap{\n\t\t\"afterEpoch\": AfterEpoch,\n\t}\n\ttmpl := template.Must(template.New(\"fmap\").Funcs(funcMap).Parse(templateText))\n\tlog.Println(\"First run\")\n\ttmpl.Execute(os.Stdout, yourData{1, time.Now()})\n\n\n\tlog.Println(\"Second run\")\n\ttmpl.Execute(os.Stdout, yourData{DepartureTimeID:1})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56722602/golang-http-server-return-html-or-json-depending-on-content-type",
    "body": "const JSON = \"application/json\"\nfunc getUser(w http.ResponseWriter, r *http.Request) {\n\tu, err := _getUser(r)\n\tif err != nil {\n\t\thttp.NotFound(w, r)\n\t\treturn\n\t}\n\tresponseBody(u, r.Header.Get(\"Content-type\"), &w)\n}\nfunc responseBody(u User, contentType string, w io.writer) {\n\tswitch contentType {\n\tcase JSON:\n\t\tw.Header().Set(\"Content-Type\", JSON)\n\t\tjson.NewEncoder(w).Encode(u) //asked for json, return json\n\tdefault:\n\t\tw.Header().Set(\"Content-Type\", \"text/html\")\n\t\trenderTemplate(w, \"view\", u) // asked for html, return html\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56355577/using-database-sql-library-and-fetching-password-from-vault-when-a-new-connectio",
    "body": "package vault-mysql-driver\nimport (\n    \"database/sql\"\n    \"github.com/go-sql-driver/mysql\"\n)\ntype VaultMysqlDriver struct {\n    *mysql.MySQLDriver\n}\nfunc updateDsn(dsn string) (string, err) {\n    // logic to fetch password from vault and update dsn with the password\n}\nfunc (d VaultMysqlDriver) Open(dsn string) (driver.Conn, error) {\n\n    updateddsn, err := updateDsn(dsn)\n    // Pass down the dsn with password to mysql driver's open function\n    return d.MySQLDriver.Open(updateddsn)\n}\n// When initialised will register the driver in sql package\nfunc init() {\n    sql.Register(vault-driver, &CyberarkMysqlDriver{&mysql.MySQLDriver{}})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56355577/using-database-sql-library-and-fetching-password-from-vault-when-a-new-connectio",
    "body": "import (\n    \"database/sql\"\n    _ \"vault-mysql-driver\"// init is invoked and it will get registered in sql package\n    \"net\"\n)\nvar db *sql.DB\nconst port = \"port number\"\nfunc main() {\n    // vault-driver is used instead of mysql so that the sql package knows to use the custom driver for new connections.\n    db, err = sql.Open(\"vault-driver\",\"<Connection string that contains the password fetched from vault>\")\n    db.SetMaxOpenConns(100)\n    listener, err := net.Listen(\"tcp\", \":\"+port)\n    for {\n        conn, err := listener.Accept()\n        go handleConnection(conn)\n    }\n}\nfunc handleConnection(conn net.Conn) {\n    // Uses db variable to connect to db.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55330763/is-there-a-golang-package-that-is-equivalent-to-pythons-chainmap",
    "body": "package main\nimport (\n        \"reflect\"\n        \"testing\"\n)\ntype ChainMap struct {\n        Map  map[string]interface{}\n        maps []map[string]interface{}\n}\nfunc NewChainMap(maps ...map[string]interface{}) ChainMap {\n        if len(maps) == 0 {\n                return ChainMap{\n                        Map:  make(map[string]interface{}, 0),\n                        maps: maps,\n                }\n        }\n        r := make(map[string]interface{}, len(maps[0]))\n        for i := len(maps) - 1; i >= 0; i-- {\n                m := maps[i]\n                for k, v := range m {\n                        r[k] = v\n                }\n        }\n        return ChainMap{\n                Map:  r,\n                maps: maps,\n        }\n}\nfunc (c ChainMap) Parents() ChainMap {\n        if len(c.maps) < 2 {\n                return c\n        }\n        return NewChainMap(c.maps[1:]...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55330763/is-there-a-golang-package-that-is-equivalent-to-pythons-chainmap",
    "body": "func TestChainMap(t *testing.T) {\n        var m = NewChainMap(\n                map[string]interface{}{\n                        \"foo\": \"bar\",\n                },\n                map[string]interface{}{\n                        \"foo\":   \"baz\",\n                        \"hello\": \"world\",\n                },\n                map[string]interface{}{\n                        \"foo\": \"baw\",\n                },\n        )\n        if !reflect.DeepEqual(\n                m.Map,\n                map[string]interface{}{\n                        \"foo\":   \"bar\",\n                        \"hello\": \"world\",\n                },\n        ) {\n                t.Fail()\n        }\n        if !reflect.DeepEqual(\n                m.Parents().Map,\n                map[string]interface{}{\n                        \"foo\":   \"baz\",\n                        \"hello\": \"world\",\n                },\n        ) {\n                t.Fail()\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79507946/cross-compiling-a-go-native-binary-for-java-code-using-docker",
    "body": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>go-jna-example</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\t<properties>\n\t        <maven.compiler.source>17</maven.compiler.source>\n                <maven.compiler.target>17</maven.compiler.target>\n                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n                <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        </properties>\n    <dependencies>\n        <!-- JNA dependency for native library access -->\n        <dependency>\n            <groupId>net.java.dev.jna</groupId>\n            <artifactId>jna</artifactId>\n            <version>5.11.0</version>\n        </dependency>\n    </dependencies>\n    <build>\n      <finalName>app</finalName>\n    </build>\n</project>"
  },
  {
    "url": "https://stackoverflow.com/questions/79507946/cross-compiling-a-go-native-binary-for-java-code-using-docker",
    "body": "package com.example;\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Pointer;\npublic class JnaExample {\n  // Define interface mapping to local library\n  public interface MyLib extends Library {\n\n    //Load dynamic library\n    MyLib INSTANCE = Native.load(\"mylib\", MyLib.class);\n    int add_integers(int a, int b);\n    Pointer concat_strings(String x, String y);\n  }\n  public static void main(String[] args) {\n    // Call the add_integers function\n    int sum = MyLib.INSTANCE.add_integers(10, 20);\n    System.out.println(\"Sum: \" + sum);\n    //Call concat_strings function\n    Pointer resultPointer = MyLib.INSTANCE.concat_strings(\"Hello, \", \"World!\");\n    String resultString = resultPointer.getString(0); //Read string from pointer\n    System.out.println(\"Concatenated String: \" + resultString);\n    // Manually release the memory allocated by malloc\n    Native.free(Pointer.nativeValue(resultPointer));\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79383173/struct-field-with-multiple-const-types",
    "body": "// Declare a type which is both cats and dogs\ntype pettype interface {\n    cattype | dogtype\n}\n// Declare AnimalCount using the union type.\ntype AnimalCount[T pettype] struct {\n  category Animaltype\n  subcategory map[T]int32\n}\nfunc main() {\n    // Instantiate AnimalCount with a concrete type.\n\tdc := AnimalCount[dogtype]{category: dogs, subcategory: map[dogtype]int32{retriever: 2, whippet: 4}}\n\tcc := AnimalCount[cattype]{category: cats, subcategory: map[cattype]int32{siamese: 5, tabby: 10}}\n\tfmt.Println(\"{}\", dc)\n\tfmt.Println(\"{}\", cc)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79259422/how-to-convert-double-to-a-time-time-value-with-the-mongo-golang-driver",
    "body": "var defaultTimeCodec = bsoncodec.NewTimeCodec()\nvar typeTime = reflect.TypeOf(time.Time{})\n// DoubleToDateConverter converts bson doubles to time.Time\nfunc DoubleToDateConverter(ctx bsoncodec.DecodeContext, vr bsonrw.ValueReader, val reflect.Value) error {\n\tif !val.CanSet() || val.Type() != typeTime {\n\t\treturn errors.New(\"bad type or not settable\")\n\t} else if vr.Type() == bson.TypeDouble {\n\t\tepochMilliVal, err := vr.ReadDouble()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttimeVal := time.Unix(0, int64(epochMilliVal)*int64(time.Millisecond))\n\t\tval.Set(reflect.ValueOf(timeVal))\n\t\treturn nil\n\t}\n    // run the default codec if the value being read from the db is not a double\n\treturn defaultTimeCodec.DecodeValue(ctx, vr, val)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79116304/how-can-i-read-windows-memory-usage",
    "body": "package main\nimport (\n    \"fmt\"\n    \"syscall\"\n    \"unsafe\"\n    \"golang.org/x/sys/windows\"\n)\nvar (\n    psapi              = windows.NewLazySystemDLL(\"psapi.dll\")\n    procGetProcessMemoryInfo = psapi.NewProc(\"GetProcessMemoryInfo\")\n)\ntype PROCESS_MEMORY_COUNTERS struct {\n    cb                         uint32\n    PageFaultCount             uint32\n    PeakWorkingSetSize         uintptr\n    WorkingSetSize             uintptr\n    QuotaPeakPagedPoolUsage    uintptr\n    QuotaPagedPoolUsage        uintptr\n    QuotaPeakNonPagedPoolUsage uintptr\n    QuotaNonPagedPoolUsage     uintptr\n    PagefileUsage              uintptr\n    PeakPagefileUsage          uintptr\n}\nfunc GetProcessMemoryInfo(handle windows.Handle) (PROCESS_MEMORY_COUNTERS, error) {\n    var memCounters PROCESS_MEMORY_COUNTERS\n    memCounters.cb = uint32(unsafe.Sizeof(memCounters))\n    r, _, err := procGetProcessMemoryInfo.Call(\n        uintptr(handle),\n        uintptr(unsafe.Pointer(&memCounters)),\n        uintptr(memCounters.cb),\n    )\n    if r == 0 {\n        return memCounters, err\n    }\n    return memCounters, nil\n}\nfunc main() {\n    // pid:= windows.GetCurrentProcess()  previously\n    pid := windows.CurrentProcess() // Get current process handle (new method name)\n    memInfo, err := GetProcessMemoryInfo(pid)\n    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    fmt.Printf(\"Memory Usage:\\n\")\n    fmt.Printf(\"Working Set Size: %v bytes\\n\", memInfo.WorkingSetSize) // actual physical memory used by application\n    fmt.Printf(\"Pagefile Usage: %v bytes\\n\", memInfo.PagefileUsage) // virtual memory\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78958315/cannot-parse-tpm2-0-public-key",
    "body": "f65de292d6d0e5b3c435b15b36f39e837ba934abd967e11c7543e5b6489b\n6ecd8dfc305f4cb68ea069a40721e7d7a1744a29bcc95d7870c43be42054\nbcd0aaff214454fc09082accde4468ed9fb23ef7ed82d72d2874422a2f55\na2e0da45f108c0838c95816d92cca85da4b8068c76f56894e760e6f4ee40\n50286c82478907e7bc0d565dda8657e2ced319a1a27f56f8998b4a71326a\n573bf9e52d39356e133e84dc5c96e17538c3aa235b68be415249727af62a\n8fc5c5e06cdb99d1a8845f7021872ea0d268d3765c9ed49cb5e1729d178b\ndc115509908d96f36834dd5063ac4a74a7af0ddc150607d75ab3861a5496\ne0fa662531f5b4c797c77c7094e3"
  },
  {
    "url": "https://stackoverflow.com/questions/78958315/cannot-parse-tpm2-0-public-key",
    "body": "f65de292d6d0e5b3c435b15b36f39e837ba934abd967e11c7543e5b6489b\n6ecd8dfc305f4cb68ea069a40721e7d7a1744a29bcc95d7870c43be42054\nbcd0aaff214454fc09082accde4468ed9fb23ef7ed82d72d2874422a2f55\na2e0da45f108c0838c95816d92cca85da4b8068c76f56894e760e6f4ee40\n50286c82478907e7bc0d565dda8657e2ced319a1a27f56f8998b4a71326a\n573bf9e52d39356e133e84dc5c96e17538c3aa235b68be415249727af62a\n8fc5c5e06cdb99d1a8845f7021872ea0d268d3765c9ed49cb5e1729d178b\ndc115509908d96f36834dd5063ac4a74a7af0ddc150607d75ab3861a5496\ne0fa662531f5b4c797c77c7094e3"
  },
  {
    "url": "https://stackoverflow.com/questions/78958315/cannot-parse-tpm2-0-public-key",
    "body": "TPMT_PUBLIC             .\nTPMI_ALG_PUBLIC         |   .type                          0001      TPMI_ALG_PUBLIC.RSA\nTPMI_ALG_HASH           |   .nameAlg                       000b      TPMI_ALG_HASH.SHA256\nTPMA_OBJECT             |   .objectAttributes              00052472  TPMA_OBJECT.fixedTPM | TPMA_OBJECT.fixedParent | TPMA_OBJECT.sensitiveDataOrigin | TPMA_OBJECT.userWithAuth | TPMA_OBJECT.noDA | TPMA_OBJECT.reserved2 | TPMA_OBJECT.restricted | TPMA_OBJECT.sign_decrypt\n                        |   |   .reserved                            ...............................0\n                        |   |   .fixedTPM                            ..............................1.\n                        |   |   .stClear                             .............................0..\n                        |   |   .reserved0                           ............................0...\n                        |   |   .fixedParent                         ...........................1....\n                        |   |   .sensitiveDataOrigin                 ..........................1.....\n                        |   |   .userWithAuth                        .........................1......\n                        |   |   .adminWithPolicy                     ........................0.......\n                        |   |   .reserved1                           ......................00........\n                        |   |   .noDA                                .....................1..........\n                        |   |   .encryptedDuplication                ....................0...........\n                        |   |   .reserved2                           ................0010............\n                        |   |   .restricted                          ...............1................\n                        |   |   .decrypt                             ..............0.................\n                        |   |   .sign_decrypt                        .............1..................\n                        |   |   .sign                                ............0...................\n                        |   |   .reserved3                           000000000000....................\nTPM2B_DIGEST            |   .authPolicy\nUINT16                  |   |   .size                      0000      0\nlist[BYTE]              |   |   .buffer\nTPMU_PUBLIC_PARMS       |   .parameters\nTPMS_RSA_PARMS          |   |   .rsaDetail\nTPMT_SYM_DEF_OBJECT     |   |   |   .symmetric\nTPMI_ALG_SYM_OBJECT     |   |   |   |   .algorithm         0010      TPMI_ALG_SYM_OBJECT.NULL\nTPMU_SYM_KEY_BITS       |   |   |   |   .keyBits\nTPMU_SYM_MODE           |   |   |   |   .mode\nTPMU_SYM_DETAILS        |   |   |   |   .details\nTPMT_RSA_SCHEME         |   |   |   .scheme\nTPMI_ALG_RSA_SCHEME     |   |   |   |   .scheme            0014      TPMI_ALG_RSA_SCHEME.RSASSA\nTPMU_ASYM_SCHEME        |   |   |   |   .details\nTPMS_SIG_SCHEME_RSASSA  |   |   |   |   |   .rsassa\nTPMI_ALG_HASH           |   |   |   |   |   |   .hashAlg   000b      TPMI_ALG_HASH.SHA256\nTPMI_RSA_KEY_BITS       |   |   |   .keyBits               0800      2048\nUINT32                  |   |   |   .exponent              00000000  0\nTPMU_PUBLIC_ID          |   .unique\nTPM2B_PUBLIC_KEY_RSA    |   |   .rsa\nUINT16                  |   |   |   .size                  0100      256\nlist[BYTE]              |   |   |   .buffer                9a9ef65de292d6d0e5b3c435b15b36f39e837ba934abd967e11c7543e5b6489b6ecd8dfc305f4cb68ea069a40721e7d7a1744a29bcc95d7870c43be42054bcd0aaff214454fc09082accde4468ed9fb23ef7ed82d72d2874422a2f55a2e0da45f108c0838c95816d92cca85da4b8068c76f56894e760e6f4ee4050286c82478907e7bc0d565dda8657e2ced319a1a27f56f8998b4a71326a573bf9e52d39356e133e84dc5c96e17538c3aa235b68be415249727af62a8fc5c5e06cdb99d1a8845f7021872ea0d268d3765c9ed49cb5e1729d178bdc115509908d96f36834dd5063ac4a74a7af0ddc150607d75ab3861a5496e0fa662531f5b4c797c77c7094e3 ...].......5.[6...{.4..g..uC..H.n...0_L...i..!...tJ)..]xp.;. T....!DT...*..Dh...>....-(tB*/U...E.......m...]....v.h..`...@P(l.G.....V]..W.......V...Jq2jW;..-95n.>..\\..u8..#[h.ARIrz.*....l....._p!....h.v\\.....r.....U.....h4.Pc.Jt........Z...T...f%1.....|p.."
  },
  {
    "url": "https://stackoverflow.com/questions/78799675/go-redis-ftsearch-returns-empty-result",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/redis/go-redis/v9\"\n)\nvar ctx = context.Background()\nfunc main() {\n\tvar client *redis.Client\n\tclient = redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tProtocol: 2, // this right here\n\t})\n\t_, err := client.FTCreate(ctx, \"txt\", &redis.FTCreateOptions{}, &redis.FieldSchema{FieldName: \"txt\", FieldType: redis.SearchFieldTypeText}).Result()\n\tif err != nil {\n\t\tfmt.Printf(\"\\nerr: %v\", err)\n\t}\n\t// Add data\n\tclient.HSet(ctx, \"doc1\", \"txt\", \"foo baz\")\n\tclient.HSet(ctx, \"doc2\", \"txt\", \"foo bar\")\n\t// Search\n\tres, err := client.FTSearchWithArgs(ctx, \"txt\", \"foo ~bar\", &redis.FTSearchOptions{WithScores: true, Limit: 50}).Result()\n\tif err != nil {\n\t\tfmt.Printf(\"\\nerr: %v\", err)\n\t} else {\n\t\tfmt.Printf(\"\\nRetrieved :%d documents\", len(res.Docs))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78623763/terraform-provider-method-configure-not-getting-called",
    "body": "func (r *ApplicationResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {\n\tif req.ProviderData == nil {\n\t\t// IMPORTANT: This method is called MULTIPLE times. An initial call might not have configured the Provider yet, so we need\n\t\t// to handle this gracefully. It will eventually be called with a configured provider.\n\t\treturn\n\t}\n\tclient, ok := req.ProviderData.(*http.Client)\n\tif !ok {\n\t\tresp.Diagnostics.AddError(\n\t\t\t\"Unexpected Resource Configure Type\",\n\t\t\tfmt.Sprintf(\"Expected *http.Client, got: %T. Please report this issue to the provider developers.\", req.ProviderData),\n\t\t)\n\t\treturn\n\t}\n\tr.client = client\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78528901/how-to-test-tlsv1-connection-for-python-requests-to-golang-tlsv1-https-server",
    "body": "from requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.poolmanager import PoolManager\nimport requests\nimport ssl\nclass MyAdapter(HTTPAdapter):\n    def init_poolmanager(self, *args, **kwargs):\n        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n        # set low Security Level to allow TLSv1\n        context.set_ciphers('DEFAULT:@SECLEVEL=0')\n        super().init_poolmanager(*args, **kwargs, ssl_context=context)\ns = requests.Session()\ns.mount('https://', MyAdapter())\nr = s.get('https://10.2.2.14/', verify=False)"
  },
  {
    "url": "https://stackoverflow.com/questions/78381436/why-does-my-go-implementation-of-xorshift128-not-produce-the-same-results-as-ja",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tx := 2328399149\n\tfmt.Printf(\"%.0f\", buildKeyArray(int32(x), 36, 142609045))\n}\ntype Xor128Generator struct {\n\tSM int32\n\ttn int32\n}\nfunc NewXor128Generator(aT, Gj int32) *Xor128Generator {\n\treturn &Xor128Generator{SM: aT, tn: Gj}\n}\nfunc (x *Xor128Generator) Generate() float64 {\n\tFv := x.SM\n\tFv ^= Fv << 23\n\tFv ^= Fv >> 17\n\tRW := x.tn\n\tFv ^= RW\n\tx.SM = RW\n\tFv ^= RW >> 26\n\tx.tn = Fv\n\treturn float64(x.SM) + float64(x.tn)\n}\nfunc buildKeyArray(XorSection int32, max int, Xor128Seed int32) []float64 {\n\tgen := NewXor128Generator(XorSection, Xor128Seed)\n\toutputArray := make([]float64, max)\n\tfor index := 0; index < max; index++ {\n\t\toutputArray[index] = gen.Generate()\n\t}\n\treturn outputArray\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78254627/how-to-implement-a-wide-multi-level-self-join-postgresql-query",
    "body": "create table people\n(\n    uuid            text,\n    givenname       text,\n    surname         text,\n    bio_mother_uuid text,\n    bio_father_uuid text\n);\ninsert into people (uuid, givenname, surname, bio_mother_uuid, bio_father_uuid)\nvalues ('aa', 'david', 'smith', 'ab', 'ac'),\n       ('ab', 'mary', 'smith', 'ad', 'ae'),\n       ('ac', 'john', 'smith', 'af', 'ag'),\n       ('ad', 'gertude', 'snow', null, 'ah'),\n       ('ae', 'Richard', 'snow', null, null),\n       ('af', 'Katie', 'smith', null, null),\n       ('ag', 'Mathew', 'smith', null, null),\n       ('ah', 'Winston', 'Snow', null, null);"
  },
  {
    "url": "https://stackoverflow.com/questions/78254627/how-to-implement-a-wide-multi-level-self-join-postgresql-query",
    "body": "with recursive t as (\n  select\n       p.uuid    as request_uuid,\n       p.uuid                 as uuid,\n       p.givenname            as givenname,\n       p.surname              as surname,\n       p.bio_mother_uuid      as bio_mother_uuid,\n       p.bio_father_uuid      as bio_father_uuid,\n       0 as generation\n       from people p\n  union all\n  select\n       child.request_uuid    as request_uuid,\n       p.uuid                 as uuid,\n       p.givenname            as givenname,\n       p.surname              as surname,\n       p.bio_mother_uuid      as bio_mother_uuid,\n       p.bio_father_uuid      as bio_father_uuid,\n       child.generation + 1 as generation\n       from\n       t child join\n       people p on p.uuid = child.bio_mother_uuid or p.uuid = child.bio_father_uuid\n  )\n  select * from t where request_uuid = 'aa'  and generation < 3"
  },
  {
    "url": "https://stackoverflow.com/questions/78248464/how-do-i-locally-host-an-apache-arrow-flight-server-using-go-and-retrieve-in-jav",
    "body": "type server struct {\n  flight.BaseFlightServer\n}\nfunc (s *server) DoGet(*flight.Ticket, svc flight.FlightService_DoGetServer) error {\n  // if your server can return more than one stream of data,\n  // the ticket is how you would determine which to send.\n  // for your example, we're going to ignore the ticket.\n  rec := GetPutData()\n  defer rec.Release()\n  // create a record stream writer\n  wr := flight.NewRecordWriter(svc, ipc.WithSchema(rec.Schema()))\n  defer wr.Close()\n  // write the record\n  return wr.Write(rec)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78248464/how-do-i-locally-host-an-apache-arrow-flight-server-using-go-and-retrieve-in-jav",
    "body": "func main() {\n  srv := flight.NewFlightServer()\n  // replace \"localhost:0\" with the hosting addr and port\n  // using 0 for the port tells it to pick any open port\n  // rather than specifying one for it.\n  srv.Init(\"localhost:0\")\n  // register the flight server object we defined above\n  srv.RegisterFlightService(&server{})\n  // you can tell it to automatically shutdown on SIGTERM if you like\n  srv.SetShutdownOnSignals(syscall.SIGTERM, os.Interrupt)\n  fmt.Printf(\"Server listening on %s...\\n\", srv.Addr())\n  srv.Serve()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78069276/how-to-pinpoint-a-function-that-is-hanging",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t_ \"net/http/pprof\"\n\t\"os/exec\"\n\t\"golang.org/x/net/trace\"\n)\nfunc bar(ctx context.Context) {\n\ttr, _ := trace.FromContext(ctx)\n\ttr.LazyPrintf(\"bar\")\n\tcmd := exec.Command(\"sleep\", \"5\")\n\terr := cmd.Run()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n\ttr := trace.New(\"foo\", r.URL.Path)\n\tdefer tr.Finish()\n\tctx := trace.NewContext(r.Context(), tr)\n\tbar(ctx)\n\tfmt.Fprintf(w, \"Hello, world!\")\n}\nfunc main() {\n\t// This pulls in /debug/requests and /debug/events\n\tmux := http.DefaultServeMux\n\tmux.HandleFunc(\"/foo\", fooHandler)\n\thttp.ListenAndServe(\":8080\", mux)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77899463/golang-how-to-delete-orphan-metrics-from-prometheus",
    "body": "package main\nimport (\n\t\"github.com/prometheus/client_golang/prometheus\"\n)\nfunc main() {\n\tprometheus.MustRegister(&MyCollector{})\n}\nvar memAllocatedDesc = prometheus.NewDesc(\n\t\"new_billing_raw:memory_allocated:sum\",\n\t\"TODO: help\",\n\t[]string{\"billed_namespace\", \"exported_job\", \"task\", \"task_group\", \"uuaa\"},\n\tnil, // constant labels\n)\n// add descriptions for more metrics as necessary\ntype MyCollector struct{}\n// Describe implements prometheus.Collector. It sends to ch descriptions of\n// all metrics that Collect could ever possibly produce over c's entire\n// lifetime.\n//\n// See also prometheus.DescribeByCollect for a possible shortcut\n// implementation.\nfunc (c *MyCollector) Describe(ch chan<- *prometheus.Desc) {\n\tch <- memAllocatedDesc\n}\nfunc (c *MyCollector) Collect(ch chan<- prometheus.Metric) {\n\t// TODO: query upstream prometheus\n\tch <- prometheus.MustNewConstMetric(\n\t\tmemAllocatedDesc,\n\t\tprometheus.GaugeValue,\n\t\t300,           // value\n\t\t\"default\",     // billed_namespace\n\t\t\"code-server\", // exported_job\n\t\t\"code-serer\",  // task\n\t\t\"code-serer\",  // task_group\n\t\t\"GBT5\",        // uuaa\n\t)\n\t// Repeat as necessary, for each metric and label set.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77823971/change-position-level-and-timestamp-zerolog-golang",
    "body": "func main() {\n\tconsoleWriter := zerolog.ConsoleWriter{Out: os.Stdout, NoColor: true, TimeFormat: time.RFC3339}\n\tconsoleWriter.FormatLevel = func(i interface{}) string {\n\t\treturn strings.ToUpper(fmt.Sprintf(\"[ %-6s]\", i))\n\t}\n\t//consoleWriter.FormatTimestamp = func(i interface{}) string {\n\t//\treturn strings.ToUpper(fmt.Sprintf(\"[%s] -\", i))\n\t//}\n    consoleWriter.TimeFormat = \"[\" + time.RFC3339 + \"] - \"\n\tconsoleWriter.PartsOrder = []string{\n\t\tzerolog.LevelFieldName,\n\t\tzerolog.TimestampFieldName,\n\t\tzerolog.CallerFieldName,\n\t\tzerolog.MessageFieldName,\n\t}\n\tlogger := zerolog.New(consoleWriter).Level(zerolog.TraceLevel).\n\t\tWith().\n\t\tTimestamp().\n\t\tLogger()\n\tlogger.Info().Msg(\"this is message\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77783314/golang-returned-json-top-level-field-is-variable-how-to-use-in-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nvar j = []byte(`{\n    \"1091500\": {\n      \"data\": {\n        \"price_overview\": {\n          \"final_formatted\": \"$59.99\"\n        }\n      }\n    }\n}`)\nfunc main() {\n\tvar t T\n\terr := json.Unmarshal(j, &t)\n\tfmt.Println(err)\n\tfmt.Printf(\"%+v\\n\", t)\n}\ntype T struct {\n\tAppID         string `json:\"-\"`\n\tPriceOverview struct {\n\t\tFileFormatted string `json:\"final_formatted\"`\n\t} `json:\"price_overview\"`\n}\nfunc (t *T) UnmarshalJSON(b []byte) error {\n\tvar m map[string]struct {\n\t\tData json.RawMessage\n\t}\n\terr := json.Unmarshal(b, &m)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttype T_ T // prevent recursion\n\tvar t_ T_\n\tfor appID, x := range m {\n\t\terr := json.Unmarshal(x.Data, &t_)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t*t = T(t_)\n\t\tt.AppID = appID\n\t\tbreak\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77701046/when-i-call-gorm-automigrate-code-i-am-getting-error-there-is-no-unique-constr",
    "body": "type Datacenter struct {\n    gorm.Model\n    ID              uuid.UUID      `gorm:\"type:uuid;primaryKey\" json:\"id\"`\n    Name            string         `gorm:\"unique\" json:\"name\"`\n    Clusters        []Cluster      `gorm:\"foreignKey:DatacenterID\" json:\"clusters\"`\n    CreatedAt       time.Time      `gorm:\"autoCreateTime:true\" json:\"createdAt\"`\n    UpdatedAt       time.Time      `gorm:\"autoUpdateTime:true\" json:\"updatedAt\"`\n    DeletedAt       gorm.DeletedAt `gorm:\"index\"`\n}\ntype Cluster struct {\n    gorm.Model\n    ID              uuid.UUID      `gorm:\"type:uuid;primaryKey\" json:\"id\"`\n    Num             int            `gorm:\"unique\" json:\"num\"`\n    DatacenterID    uuid.UUID      `json:\"datacenterId\"`\n    Servers         []Server       `gorm:\"foreignKey:ClusterID\" json:\"servers\"`\n    CreatedAt       time.Time      `gorm:\"autoCreateTime:true\" json:\"createdAt\"`\n    UpdatedAt       time.Time      `gorm:\"autoUpdateTime:true\" json:\"updatedAt\"`\n    DeletedAt       gorm.DeletedAt `gorm:\"index\"`\n}\ntype Server struct {\n    gorm.Model\n    ID              uuid.UUID      `gorm:\"type:uuid;primaryKey\" json:\"id\"`\n    ScaleUnit       int            `gorm:\"unique\" json:\"scaleUnit\"`\n    IPAddress       string         `json:\"ipAddress\"`\n    ClusterID       uuid.UUID      `json:\"clusterId\"`\n    CreatedAt       time.Time      `gorm:\"autoCreateTime:true\" json:\"createdAt\"`\n    UpdatedAt       time.Time      `gorm:\"autoUpdateTime:true\" json:\"updatedAt\"`\n    DeletedAt       gorm.DeletedAt `gorm:\"index\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77468581/how-to-implement-cryptojs-aes-decrypt-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/Luzifer/go-openssl\"\n)\nfunc main() {\n\tdata := \"U2FsdGVkX19dGrnVQb3BYZ9SWtQBCt2XZDeWFBEfWoi3qnSHg26aQnADUKjTDtSgpPUDzXc59XrIBsTZp9IRg4dYy9Lo0/GjSVn8qlINhE8NJXozQvUNPJSs6nvWSiivCsh9KHGsWFEusMeTefM9V2hKRpQHnFp5VHDLPgGImjHXOQO71eO4qFoQ3ESqUdnDO94nlTjcJU8AP+GabRMjHP08OVz87uyV4SfvT7AZhAYuOPOumHbJaV5nHz2ouqBZgXR3OK07AUk6V+Faz43BT3Qd2+xGLyz8C+teekmudVhmGlnzvMK/VUs0bNDUttdVVnkz/VbXVOj++07uhDsJoMKzZQYTNLkIl9HnuXDmhKOrLSYs2EYpNrH9T/2ZP3nwqJaI7bbLBCfCpNFGNLY4jyNou4Bl5GEK6sxg0zraUCZTgvfuuvBpKWFcFhPvYf8eJGoI3dOWTRWyRnS6e4j3bg==\"\n\tsecret := \"KBlgcIOrad7EYpiz9LNNTMSg98QoqSVK\"\n\to := openssl.New()\n\tdec, err := o.DecryptBytes(secret, []byte(data))\n\tif err != nil {\n\t\tfmt.Printf(\"An error occurred: %s\\n\", err)\n\t}\n\tfmt.Printf(\"Decrypted text: %s\\n\", string(dec))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77448114/whats-the-best-practice-in-golang-to-track-the-done-status-of-two-goroutines-in",
    "body": "go func(transactions chan int, salesDone <-chan T, purchasesDone <-chan T) {\n\t\tdefer wg.Done()\n\t\tfor transactions != nil {\n\t\t\tselect {\n\t\t\tcase transaction, ok := <-transactions:\n\t\t\t\tif ok {\n\t\t\t\t\twidgetInventory += transaction\n\t\t\t\t} else {\n\t\t\t\t\ttransactions = nil\n\t\t\t\t}\n\t\t\tcase <-salesDone:\n\t\t\t\tsalesDone = nil\n\t\t\t\tif purchasesDone == nil {\n\t\t\t\t\tclose(transactions)\n\t\t\t\t}\n\t\t\tcase <-purchasesDone:\n\t\t\t\tpurchasesDone = nil\n\t\t\t\tif salesDone == nil {\n\t\t\t\t\tclose(transactions)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}(transactions, salesDone, purchasesDone)"
  },
  {
    "url": "https://stackoverflow.com/questions/77448114/whats-the-best-practice-in-golang-to-track-the-done-status-of-two-goroutines-in",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc main() {\n\tvar widgetInventory int = 1000\n\ttransactions := make(chan int, 100)\n\tvar wg, resultswg sync.WaitGroup\n\tfmt.Println(\"Starting inventory count = \", widgetInventory)\n\twg.Add(2)\n\tgo makeSales(transactions, &wg)\n\tgo newPurchases(transactions, &wg)\n\tresultswg.Add(1)\n\tgo func() {\n\t\tdefer resultswg.Done()\n\t\tfor transaction := range transactions {\n\t\t\twidgetInventory += transaction\n\t\t}\n\t}()\n\twg.Wait()\n\tclose(transactions)\n\tresultswg.Wait()\n\tfmt.Println(\"Ending inventory count = \", widgetInventory)\n}\nfunc makeSales(transactions chan int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor i := 0; i < 3000; i++ {\n\t\ttransactions <- -100\n\t}\n}\nfunc newPurchases(transactions chan int, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor i := 0; i < 3000; i++ {\n\t\ttransactions <- 100\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77405374/how-do-i-use-the-azure-go-sdk-to-work-with-role-assignments",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/authorization/armauthorization/v2\"\n)\nfunc main() {\n\tsubscriptionID := \"<subscription-id>\"\n\tcred, _ := azidentity.NewDefaultAzureCredential(nil)\n\t// Initialize a client factory using the credential. The subscription ID\n\t// used to create the factory is used in many API requests made using clients\n\t// created from the factory. For example, the \"list for subscription\"\n\t// request shown below.\n\tclientFactory, _ := armauthorization.NewClientFactory(subscriptionID, cred, nil)\n\t// Get the client to be used from the factory.\n\tclient := clientFactory.NewRoleAssignmentsClient()\n\t// To demonstrate that the client was created properly, test the client by\n\t// using it to get the first page of a list of all of the role assignments\n\t// within the subscription.\n\tpager := client.NewListForSubscriptionPager(nil)\n\tpage, _ := pager.NextPage(context.TODO())\n\tfmt.Printf(\"Role assignments in subscription: %v\\n\", page.Value)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77376846/hold-down-button-in-golang-fyne",
    "body": "package main\nimport (\n\t\"fyne.io/fyne/v2/app\"\n\t\"fyne.io/fyne/v2/widget\"\n\t\"fyne.io/fyne/v2/driver/desktop\"\n\t\"log\"\n)\ntype holdableButton struct {\n\twidget.Button\n}\nfunc newHoldableButton(label string) *holdableButton {\n\tbutton := &holdableButton{}\n\tbutton.ExtendBaseWidget(button)\n\tbutton.Text=label\n\treturn button\n}\nfunc (h *holdableButton) MouseDown(*desktop.MouseEvent){\n\tlog.Println(\"down\")\n}\nfunc (h *holdableButton) MouseUp(*desktop.MouseEvent){\n\tlog.Println(\"up\")\n}\nfunc main() {\n\ta := app.New()\n\tw := a.NewWindow(\"Holdable\")\n\tw.SetContent(newHoldableButton(\"Button\"))\n\tw.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77344049/unable-to-connect-to-postgres-database-aws-rds-using-pgx",
    "body": "postgres=> CREATE DATABASE golangdb;\nCREATE DATABASE\npostgres=> \\l\n                                                       List of databases\n   Name    |  Owner   | Encoding | Locale Provider |   Collate   |    Ctype\n-----------+----------+----------+-----------------+-------------+-------------\n golangdb  | postgres | UTF8     | libc            | en_US.UTF-8 | en_US.UTF-8\n postgres  | postgres | UTF8     | libc            | en_US.UTF-8 | en_US.UTF-8\n rdsadmin  | rdsadmin | UTF8     | libc            | en_US.UTF-8 | en_US.UTF-8"
  },
  {
    "url": "https://stackoverflow.com/questions/77273957/how-to-unmarshal-the-json-to-get-the-below-desired-result",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strings\"\n)\nconst data = `[{\n    \"name\": \"Develop\",\n    \"path\": \"/develop\",\n    \"color\": \"#E34D20\",\n    \"icon\": \"DevelopIcon\",\n    \"filter\":{\n      \"permission.IsAdmin\":true\n    }\n  }]`\ntype FilterCondition struct {\n\tPermissions map[string]bool `json:\"permission\"`\n}\nfunc (fc *FilterCondition) UnmarshalJSON(b []byte) error {\n\tvar m map[string]bool\n\tif err := json.Unmarshal(b, &m); err != nil {\n\t\treturn err\n\t}\n\tif len(m) == 0 {\n\t\treturn nil\n\t}\n\tfc.Permissions = make(map[string]bool)\n\tfor k, v := range m {\n\t\tconst permPrefix = \"permission.\"\n\t\tif !strings.HasPrefix(k, permPrefix) {\n\t\t\tcontinue\n\t\t}\n\t\tfc.Permissions[k[len(permPrefix):]] = v\n\t}\n\treturn nil\n}\ntype Item struct {\n\tName   string           `json:\"name\"`\n\tPath   string           `json:\"path\"`\n\tColor  string           `json:\"color\"`\n\tIcon   string           `json:\"icon\"`\n\tFilter *FilterCondition `json:\"filter\"`\n}\nfunc main() {\n\tvar items []Item\n\tif err := json.NewDecoder(strings.NewReader(data)).Decode(&items); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, item := range items {\n\t\tfmt.Printf(\"Name: %s\\nPath: %s\\nColor: %s\\nIcon: %s\\nFilter: %v\\n\\n\", item.Name, item.Path, item.Color, item.Icon, item.Filter)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77220309/aes-256-gcm-encryption-in-node-js-and-decryption-in-golang",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"strings\"\n)\nfunc main() {\n\tdecryptTokenFromNode()\n}\nfunc decryptTokenFromNode() {\n\tfmt.Println(\"======decryptTokenFromNode function ======\")\n\t// Separate Base64url encoded ciphertext, tag and nonce\n\ttoken := \"KZhf9KXZUKmH2jfhYIc68M4x_60gzx6-5aYujPI8ZYc4xaO16mVdtpOXKRjP-cPAk9ftNzFOrng.ll4sqK0jPYDqJkVdBv-9Kw.MTIzNDU2Nzg5MDEy\"\n\tdata := strings.Split(token, \".\")\n\tciphertext, _ := base64.RawURLEncoding.DecodeString(data[0])\n\ttag, _ := base64.RawURLEncoding.DecodeString(data[1])\n\tnonce := ([]byte)(data[2])\n\t// Concatenate raw cipheretext and tag\n\tciphertext = append(ciphertext, tag...)\n\tkey := []byte(\"goodthingstaketimesometime123456\")\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\t// Import 16 bytes nonce\n\taesgcm, err := cipher.NewGCMWithNonceSize(block, 16)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tplaintext, err := aesgcm.Open(nil, nonce, ciphertext, nil)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tfmt.Printf(\"%s\\n\", plaintext) // encrypting this string to verify seal and open in golang\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77188765/what-parameters-is-golang-crc32-using",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"hash/crc32\"\n\t\"math/bits\"\n\t\"github.com/snksoft/crc\"\n)\nfunc crcSnksoft(params *crc.Parameters, input []byte) uint32 {\n\th := crc.NewHash(params)\n\th.Update(input)\n\treturn h.CRC32()\n}\nfunc crcGo(poly uint32, input []byte) uint32 {\n\treversedPoly := bits.Reverse32(poly)\n\tt := crc32.MakeTable(reversedPoly)\n\treturn crc32.Checksum(input, t)\n}\nfunc main() {\n\tpoly := 0xF4ACFB13\n\tdata := []byte(\"0\")\n\tparams := &crc.Parameters{\n\t\tWidth:      32,\n\t\tPolynomial: uint64(poly),\n\t\tInit:       0x00000000,\n\t\tReflectIn:  false,\n\t\tReflectOut: false,\n\t\tFinalXor:   0x00000000,\n\t}\n\tmimicGoParams := &crc.Parameters{\n\t\tWidth:      32,\n\t\tPolynomial: uint64(poly),\n\t\tInit:       0xFFFFFFFF,\n\t\tReflectIn:  true,\n\t\tReflectOut: true,\n\t\tFinalXor:   0xFFFFFFFF,\n\t}\n\tfmt.Printf(\"snksoft/crc: 0x%X\\n\", crcSnksoft(params, data))\n\tfmt.Printf(\"snksoft/crc (matching hash/crc32): 0x%X\\n\", crcSnksoft(mimicGoParams, data))\n\tfmt.Printf(\"Go standard library (hash/crc32): 0x%X\\n\", crcGo(uint32(poly), data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77160883/how-to-stop-reading-from-channel-on-error",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"golang.org/x/sync/errgroup\"\n)\nfunc main() {\n\tconst threads = 3\n\tch := make(chan int, threads)\n\teg, ctx := errgroup.WithContext(context.Background())\n\tfor i := 0; i < threads; i++ {\n\t\ti := i\n\t\teg.Go(func() error {\n\t\t\tfmt.Printf(\"Thread %d: STARTED\\n\", i)\n\t\t\tfor n := range ch {\n\t\t\t\tfmt.Printf(\"Thread %d: GOT=%d\\n\", i, n)\n\t\t\t\ttime.Sleep(time.Duration(1) * time.Second)\n\t\t\t\t// Simulate failed thread\n\t\t\t\tif n == 2 {\n\t\t\t\t\tfmt.Printf(\"Thread %d: FAILED\\n\", i)\n\t\t\t\t\treturn fmt.Errorf(\"Thread %d: FAILED\", i)\n\t\t\t\t}\n\t\t\t\t// For the purpose of this example we will just check the context after\n\t\t\t\t// doing the work.\n\t\t\t\tif ctx.Err() != nil {\n\t\t\t\t\tfmt.Printf(\"Thread %d: Quiting due to context\\n\", i)\n\t\t\t\t\treturn fmt.Errorf(\"Thread %d: Context cancelled: \", i)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\t// We want to stop sending new work if there is a failure (otherwise `ch <- i` will block permanently);\nsendLoop:\n\tfor i := 0; i < 9; i++ {\n\t\tselect {\n\t\tcase ch <- i:\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Printf(\"stopped\\n\")\n\t\t\tbreak sendLoop // Just exit the loop if something goes wrong (you may want to do something else here)\n\t\t}\n\t}\n\tclose(ch) // Note: Important that this happens even if there is an error (otherwise `for n := range ch` may block, leaking goroutines)\n\tfmt.Printf(\"all sent\\n\")\n\tif err := eg.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76984779/how-can-i-use-custom-time-function-in-zap-logger-library",
    "body": "package main\nimport (\n\t\"time\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n)\ntype constantClock time.Time\nfunc (c constantClock) Now() time.Time { return time.Time(c) }\nfunc (c constantClock) NewTicker(d time.Duration) *time.Ticker {\n\treturn &time.Ticker{}\n}\nfunc main() {\n\tdate := time.Date(2077, 1, 23, 10, 15, 13, 441, time.UTC) // clock will always return that date\n\tclock := constantClock(date)\n\tconfig := zap.NewProductionConfig()\n\t// this is just for sugar, to display a readable date instead of an epoch time\n\tconfig.EncoderConfig.EncodeTime = zapcore.TimeEncoderOfLayout(time.RFC3339)\n\tlogger, _ := config.Build()\n\tlogger = logger.WithOptions(zap.WithClock(clock))\n\tdefer logger.Sync()\n\tlogger.Info(\"Hello\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76764155/in-go-how-to-use-discoveryengine-for-gen-app-builder-search-request-integration",
    "body": "import (\n\t\"context\"\n\t\"fmt\"\n\tdiscoveryengine \"cloud.google.com/go/discoveryengine/apiv1beta\"\n\tdiscoveryenginepb \"cloud.google.com/go/discoveryengine/apiv1beta/discoveryenginepb\"\n\t\"google.golang.org/api/iterator\"\n)\n// search searches for a query in a search engine given the Google Cloud Project ID,\n// Location, and Search Engine ID.\n//\n// This example uses the default search engine.\nfunc search(projectID, location, searchEngineID, query string) error {\n\tctx := context.Background()\n\t// Create a client\n\tclient, err := discoveryengine.NewSearchClient(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\t// Full resource name of search engine serving config\n\tservingConfig := fmt.Sprintf(\"projects/%s/locations/%s/collections/default_collection/dataStores/%s/servingConfigs/default_serving_config\",\n\t\tprojectID, location, searchEngineID)\n\tsearchRequest := &discoveryenginepb.SearchRequest{\n\t\tServingConfig: servingConfig,\n\t\tQuery:         query,\n\t}\n\tit := client.Search(ctx, searchRequest)\n\tfor {\n\t\tresp, err := it.Next()\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"%+v\\n\", resp)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76749754/need-to-exclude-ids-from-the-second-table-which-exist-in-the-first-table",
    "body": "type Result struct {\n    TableName  struct{}  `pg:\"students\"`\n    ID         string    `json:\"id\"`\n    UserID     string    `json:\"user_id\"`\n    RequestID  string    `pg:\"fk:request_id\"`\n    Status     string    `json:\"status\"`\n}\nvar res []Result\nstatus := []string{\"canceled\", \"declined\"}\nerr := Model(&res).\n    ColumnExpr(\"students.id, students.user_id, students.request_id, requests.status\").\n    Where(\"students.user_id = ?\", UserID).\n    Where(\"students.start_date >= ? AND students.end_date <= ?\", startDate, endDate).\n    Where(\"NOT EXISTS (SELECT 1 FROM requests WHERE students.request_id = requests.id AND requests.status IN (?))\", status).\n    Select()"
  },
  {
    "url": "https://stackoverflow.com/questions/76735060/how-to-set-values-from-map-associative-array-of-items-in-postgresql",
    "body": "$$\n    DECLARE\n        coordinates jsonb := '[\n          {\n            \"rel_id\": \"1708237\",\n            \"lat\": 1,\n            \"long\": 2\n          },\n          {\n            \"rel_id\": \"1703206\",\n            \"lat\": 3,\n            \"long\": 4\n          },\n          {\n            \"rel_id\": \"1703217\",\n            \"lat\": 5,\n            \"long\": 6\n          },\n          {\n            \"rel_id\": \"1703209\",\n            \"lat\": 7,\n            \"long\": 8\n          },\n          {\n            \"rel_id\": \"1703230\",\n            \"lat\": 9,\n            \"long\": 10\n          }\n        ]'::jsonb;\n    BEGIN\n\t\tupdate t1\n\t\tset lat  = json_data.clat,\n\t\t    long = json_data.clong\n\t\tfrom (select\n\t\t         coords->'rel_id' #>> '{}' as crel_id, --convert jsonb value to string\n\t\t         coords->'lat' as clat,\n\t\t         coords->'long' as clong\n              from (select jsonb_array_elements(coordinates) as coords)\n              as coords_data)\n        as json_data\n\t\twhere t1.rel_id = json_data.crel_id and\n\t\t  -- check value may be null or empty for both 'lat' and 'long' columns\n\t\t  (t1.long is null or t1.long = '' or t1.lat is null or t1.lat = '');\n    END\n$$;"
  },
  {
    "url": "https://stackoverflow.com/questions/76642999/how-can-i-pass-an-array-of-string-string-from-js-to-go-using-syscall-js",
    "body": "func WasmCount(this js.Value, args []js.Value) any {\n\tif len(args) < 1 {\n\t\tfmt.Println(\"invalid number of args\")\n\t\treturn nil\n\t}\n\targ := args[0]\n\tif arg.Type() != js.TypeObject {\n\t\tfmt.Println(\"the first argument should be an array\")\n\t\treturn nil\n\t}\n\tfirstParam := make([]string, arg.Length())\n\tfor i := 0; i < len(firstParam); i++ {\n\t\titem := arg.Index(i)\n\t\tif item.Type() != js.TypeString {\n\t\t\tfmt.Printf(\"the item at index %d should be a string\\n\", i)\n\t\t\treturn nil\n\t\t}\n\t\tfirstParam[i] = item.String()\n\t}\n\treturn len(firstParam)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76612604/hmac-newh-func-hash-hash-key-byte-hash-hash-equivalent-in-javascript",
    "body": "var crypto = require('crypto')\nconst digest = 'sha256'\nconst blockSize = 64 // block size of the digest\n// define input parameter\nvar salt = Buffer.from('salt')\nvar path = [ Buffer.from('alfa'), Buffer.from('beta'), Buffer.from('gamma') ]\nvar data = Buffer.from('data')\n// calculate HMAC\nvar hmac = hmac(data, salt, path)\nconsole.log(hmac.toString('hex'))\nfunction hmac(data, salt, path) {\n\n    // create keyList\n    var keyList = []\n    keyList.push(salt)\n    keyList = keyList.concat(path)\n    // determine HMAC recursively\n    var result = hmac_rec(data, keyList)\n    return result\n}\nfunction hmac_rec(data, keyList) {\n    // adjust key (according to HMAC specification)\n    var key = keyList.pop()\n    if (key.length > blockSize) {\n        k = Buffer.allocUnsafe(blockSize).fill('\\x00');\n        if (keyList.length > 0) {\n            hmac_rec(key, [...keyList]).copy(k)\n        } else {\n            getHash(key).copy(k)\n        }\n    } else if (key.length < blockSize) {\n        k = Buffer.allocUnsafe(blockSize).fill('\\x00');\n        key.copy(k)\n    } else {\n        k = key\n    }\n    // create 'key xor ipad' and 'key xor opad' (according to HMAC specification)\n    var ik = Buffer.allocUnsafe(blockSize)\n    var ok = Buffer.allocUnsafe(blockSize)\n    k.copy(ik)\n    k.copy(ok)\n    for (var i = 0; i < ik.length; i++) {\n        ik[i] = 0x36 ^ ik[i]\n        ok[i] = 0x5c ^ ok[i]\n    }\n    // calculate HMAC\n    if (keyList.length > 0) {\n        var innerHMac = hmac_rec(Buffer.concat([ ik, data ]), [...keyList])\n        var outerHMac = hmac_rec(Buffer.concat([ ok, innerHMac ]), [...keyList])\n    } else {\n        var innerHMac = getHash(Buffer.concat([ik, data]))\n        var outerHMac = getHash(Buffer.concat([ok, innerHMac]))\n    }\n\n    return outerHMac\n}\n// calculate SHA256 hash\nfunction getHash(data){\n    var hash = crypto.createHash(digest);\n    hash.update(data)\n    return hash.digest()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76612604/hmac-newh-func-hash-hash-key-byte-hash-hash-equivalent-in-javascript",
    "body": "package main\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"hash\"\n)\nfunc main() {\n\tSALT := \"salt\"\n\tpath := []string{\"alfa\", \"beta\", \"gamma\"}\n\thmacf := hmac.New(func() hash.Hash {\n\t\treturn hmac.New(func() hash.Hash {\n\t\t\treturn hmac.New(func() hash.Hash {\n\t\t\t\treturn hmac.New(sha256.New, []byte(SALT))\n\t\t\t}, []byte(path[0]))\n\t\t}, []byte(path[1]))\n\t}, []byte(path[2]))\n\thmacf.Write([]byte(\"data\"))\n\tresult := hmacf.Sum(nil)\n\tfmt.Println(hex.EncodeToString(result)) // 2e631dcb4289f8256861a833ed985fa945cd714ebe7c3bd4ed4b4072b107b073\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76612604/hmac-newh-func-hash-hash-key-byte-hash-hash-equivalent-in-javascript",
    "body": "function hmac_rec(data, keyList) {\n    var key = keyList.pop()\n    if (keyList.length > 0) {\n\n        // adjust key (according to HMAC specification)\n        if (key.length > blockSize) {\n            k = Buffer.allocUnsafe(blockSize).fill('\\x00');\n            hmac_rec(key, [...keyList]).copy(k)\n        } else if (key.length < blockSize) {\n            k = Buffer.allocUnsafe(blockSize).fill('\\x00');\n            key.copy(k)\n        } else {\n            k = key\n        }\n\n        // create 'key xor ipad' and 'key xor opad' (according to HMAC specification)\n        var ik = Buffer.allocUnsafe(blockSize)\n        var ok = Buffer.allocUnsafe(blockSize)\n        k.copy(ik)\n        k.copy(ok)\n        for (var i = 0; i < ik.length; i++) {\n            ik[i] = 0x36 ^ ik[i]\n            ok[i] = 0x5c ^ ok[i]\n        }\n        // calculate HMAC\n        var innerHMac = hmac_rec(Buffer.concat([ ik, data ]), [...keyList])\n        var outerHMac = hmac_rec(Buffer.concat([ ok, innerHMac ]), [...keyList])\n    } else {\n        var outerHMac = crypto.createHmac(digest, key).update(data).digest();\n    }\n    return outerHMac\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76581079/how-to-pass-an-url-to-a-fasthttp-router-in-golang",
    "body": "func Lynx(ctx *fasthttp.RequestCtx) {\n\tvar urlstring string = ctx.UserValue(\"url\").(string)\n\turlparsed, err := url.Parse(urlstring)\n\turlparsedstring := urlparsed.String()\n\tfmt.Fprintf(ctx, \"URL: %s\\n\", urlparsedstring)\n\tcmd := exec.Command(\"lynx\", \"--dump\", urlparsedstring)\n\tstdout, err := cmd.Output()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\tfmt.Fprintf(ctx, \"%s\\n\", stdout)\n}\nfunc main() {\n\tr := router.New()\n\tr.GET(\"/free-riding/{url:*}\", Lynx)\n\tlog.Fatal(fasthttp.ListenAndServe(\":8080\", r.Handler))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76562205/how-to-encrypt-repository-secret-for-github-action-secrets-api",
    "body": "func EncodeWithPublicKey(text string, publicKey string) (string, error) {\n\t// Decode the public key from base64\n\tpublicKeyBytes, err := base64.StdEncoding.DecodeString(publicKey)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t// Decode the public key\n\tvar publicKeyDecoded [32]byte\n\tcopy(publicKeyDecoded[:], publicKeyBytes)\n\t// Encrypt the secret value\n\tencrypted, err := box.SealAnonymous(nil, []byte(text), (*[32]byte)(publicKeyBytes), rand.Reader)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t// Encode the encrypted value in base64\n\tencryptedBase64 := base64.StdEncoding.EncodeToString(encrypted)\n\treturn encryptedBase64, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76519824/how-to-convert-string-with-index-number-to-target-slice-item",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\nfunc main() {\n\tbooks := map[int]string{\n\t\t0: \"wadidaw\",\n\t\t1: \"bededaw\",\n\t\t2: \"celepaw\",\n\t}\n\ttarget := \"books[1]\"\n\tvalue, err := getValueByString(target, books)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t} else {\n\t\tfmt.Println(\"Book title:\", value)\n\t}\n}\nfunc getValueByString(target string, data map[int]string) (interface{}, error) {\n\tparts := splitTarget(target)\n\tif len(parts) != 2 {\n\t\treturn nil, fmt.Errorf(\"invalid target format: %s\", target)\n\t}\n\t// Get the variable name and index\n\tvarName := parts[0]\n\tindex, err := strconv.Atoi(parts[1])\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"invalid index: %s\", parts[1])\n\t}\n\t// Check if the variable exists\n\tvalue, ok := data[index]\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"variable not found: %s\", varName)\n\t}\n\treturn value, nil\n}\nfunc splitTarget(target string) []string {\n\tparts := make([]string, 2)\n\t// Find the index of the opening bracket\n\tbraceIndex := -1\n\tfor i, char := range target {\n\t\tif char == '[' {\n\t\t\tbraceIndex = i\n\t\t\tbreak\n\t\t}\n\t}\n\t// Extract the variable name and index\n\tif braceIndex != -1 {\n\t\tparts[0] = target[:braceIndex]\n\t\tparts[1] = target[braceIndex+1 : len(target)-1]\n\t}\n\treturn parts\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76508101/how-to-custom-go-gin-logger-format",
    "body": "package middlewares\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/sirupsen/logrus\"\n\tlog \"github.com/sirupsen/logrus\"\n)\ntype ginBodyLogger struct {\n\t// get all the methods implementation from the original one\n\t// override only the Write() method\n\tgin.ResponseWriter\n\tbody bytes.Buffer\n}\nfunc (g *ginBodyLogger) Write(b []byte) (int, error) {\n\tg.body.Write(b)\n\treturn g.ResponseWriter.Write(b)\n}\nfunc RequestLoggingMiddleware(logger *logrus.Logger) gin.HandlerFunc {\n\treturn func(ctx *gin.Context) {\n\t\tginBodyLogger := &ginBodyLogger{\n\t\t\tbody:           bytes.Buffer{},\n\t\t\tResponseWriter: ctx.Writer,\n\t\t}\n\t\tctx.Writer = ginBodyLogger\n\t\tvar req interface{}\n\t\tif err := ctx.ShouldBindBodyWith(&req, binding.JSON); err != nil {\n\t\t\tctx.JSON(http.StatusBadRequest, err.Error())\n\t\t\treturn\n\t\t}\n\t\tdata, err := json.Marshal(req)\n\t\tif err != nil {\n\t\t\tpanic(fmt.Errorf(\"err while marshaling req msg: %v\", err))\n\t\t}\n\t\tctx.Next()\n\t\tlogger.WithFields(log.Fields{\n\t\t\t\"status\":       ctx.Writer.Status(),\n\t\t\t\"method\":       ctx.Request.Method,\n\t\t\t\"path\":         ctx.Request.URL.Path,\n\t\t\t\"query_params\": ctx.Request.URL.Query(),\n\t\t\t\"req_body\":     string(data),\n\t\t\t\"res_body\":     ginBodyLogger.body.String(),\n\t\t}).Info(\"request details\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76505649/i-have-several-jsons-of-the-same-structure-they-have-object-that-is-an-array-o",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\nconst URL = \"https://catalog.wb.ru/brands/m/catalog?page=%d&limit=300&brand=5786&dest=-1257786&sort=pricedown\"\ntype Response struct {\n\tData struct {\n\t\tProducts []Product `json:\"products\"`\n\t} `json:\"data\"`\n}\ntype Product struct {\n\tID     int     `json:\"id\"`\n\tName   string  `json:\"name\"`\n\tPrice  int     `json:\"priceU\"`\n\tRating float32 `json:\"reviewRating\"`\n\tSale   int     `json:\"sale\"`\n\tNew    bool    `json:\"isNew\"`\n}\nfunc main() {\n\tvar allProducts []Product\n\tfor i := 1; ; i++ {\n\t\tpage, err := fetchPage(i)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err) // TODO\n\t\t}\n\t\tallProducts = append(allProducts, page...)\n\t\tif len(page) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n    fmt.Println(allProducts)\n    fmt.Println(len(allProducts))\n}\nfunc fetchPage(i int) ([]Product, error) {\n\tresp, err := http.Get(fmt.Sprintf(URL, i))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn nil, errors.New(resp.Status)\n\t}\n\tvar response Response\n\terr = json.NewDecoder(resp.Body).Decode(&response)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn response.Data.Products, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420166/hibernates-envers-equivalent-for-golang-gorm-for-auditing",
    "body": "type AuditLog struct {\n\tgorm.Modal\n\tUserID      uuid.UUID `json:\"user_id\"`\n\tUserEmail   string    `json:\"user_email\"`\n\tUserName    string    `json:\"user_name\"`\n\tPhcID       uuid.UUID `json:\"phc_id\"`\n\tRole        string    `json:\"role\"`\n\tEventName   string    `json:\"event_name\"`\n\tAction      string    `json:\"action\"`\n\tEntityID    string    `json:\"entity_id\"`\n\tEntityModel string    `json:\"entity_model\"`\n\tOldData     string    `json:\"old_data\"`\n\tNewData     string    `json:\"new_data\"`\n\tDiff        string    `json:\"diff\"`\n\tDomain      string    `json:\"domain\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420166/hibernates-envers-equivalent-for-golang-gorm-for-auditing",
    "body": "// logCreate callback\nfunc logCreate(db *gorm.DB) {\n\t// Check if the audit log flag is set\n\tif db.Statement.Context.Value(auditLogFlagKey) != nil {\n\t\treturn // Skip logging if already inside audit log creation\n\t}\n\tif db.Statement.Schema != nil {\n\t\t// Get the primary key value\n\t\tvar entityID interface{}\n\t\tif db.Statement.Schema != nil && db.Statement.Schema.PrioritizedPrimaryField != nil {\n\t\t\tentityID, _ = db.Statement.Schema.PrioritizedPrimaryField.ValueOf(db.Statement.Context, db.Statement.ReflectValue)\n\t\t}\n\t\tif db.Statement.Table == \"audit_logs\" {\n\t\t\treturn\n\t\t}\n\t\tuserID := user_id\n\t\trole := user_role\n\t\tnewData := make(map[string]interface{})\n\t\tnewJSON, _ := json.Marshal(db.Statement.Model)\n\t\tjson.Unmarshal(newJSON, &newData)\n\t\t//remove password from audit log ,I do this because encripted passwords can be expose :)\n\t\tdelete(newData, \"password\")\n\t\tdelete(newData, \"Password\")\n\t\tnewJSON, err := json.Marshal(newData)\n\t\tif err != nil {\n\t\t\tlogrus.Error(\"Error marshalling new data: \", err)\n\t\t}\n\t\tcreateAuditLogEntry(db, userID, role, \"Create Event\", \"CREATE\", db.Statement.Table, entityID, nil, newJSON)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420166/hibernates-envers-equivalent-for-golang-gorm-for-auditing",
    "body": "func logUpdate(db *gorm.DB) {\n\t// Check if the audit log flag is set\n\tif db.Statement.Context.Value(auditLogFlagKey) != nil {\n\t\treturn // Skip logging if already inside audit log creation\n\t}\n\tif db.Statement.Schema != nil {\n\t\tvar entityID interface{}\n\t\tif db.Statement.Schema != nil && db.Statement.Schema.PrioritizedPrimaryField != nil {\n\t\t\tentityID, _ = db.Statement.Schema.PrioritizedPrimaryField.ValueOf(db.Statement.Context, db.Statement.ReflectValue)\n\t\t}\n\t\tif db.Statement.Table == \"audit_logs\" {\n\t\t\treturn\n\t\t}\n\t\tuserID := user_id\n\t\trole := user_role\n\t\tvar oldData map[string]interface{}\n\t\tdb.Session(&gorm.Session{NewDB: true}).Table(db.Statement.Table).Where(\"id = ?\", entityID).Find(&oldData)\n\t\tnewData := make(map[string]interface{})\n\t\tnewJSON, _ := json.Marshal(db.Statement.Model)\n\t\tjson.Unmarshal(newJSON, &newData)\n\t\t// Fetch the old data from the database\n\t\t//remove password from audit log\n\t\tdelete(newData, \"password\")\n\t\tdelete(newData, \"Password\")\n\t\tdelete(oldData, \"password\")\n\t\toldJSON, err := json.Marshal(oldData)\n\t\tif err != nil {\n\t\t\tlogrus.Error(\"Error marshalling old data: \", err)\n\t\t}\n\t\tnewJSON, err = json.Marshal(newData)\n\t\tif err != nil {\n\t\t\tlogrus.Error(\"Error marshalling new data: \", err)\n\t\t}\n\t\tcreateAuditLogEntry(db, userID, role, \"Update Event\", \"UPDATE\", db.Statement.Table, entityID, oldJSON, newJSON)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420166/hibernates-envers-equivalent-for-golang-gorm-for-auditing",
    "body": "const auditLogFlagKey = \"audit_log\"\n// createAuditLogEntry creates a log entry in the AuditLog table.\nfunc createAuditLogEntry(db *gorm.DB, userID uuid.UUID, role, eventName, action, entityModel string, entityID interface{}, oldData,\n\tnewData []byte) {\n\t// Check if the flag is already set in the context, to avoid recursive logging\n\tif db.Statement.Context.Value(auditLogFlagKey) != nil {\n\t\t// If the flag is set, skip creating the audit log entry\n\t\treturn\n\t}\n\tvar diffJSON []byte\n\tif newData != nil {\n\t\t// Optionally, you can calculate the diff here\n\t\tdiffJSON = calculateDiff(oldData, newData)\n\t}\n\tauditLog := AuditLog{\n\t\tUserID:      userID,\n\t\tRole:        role,\n\t\tEventName:   eventName,\n\t\tAction:      action,\n\t\tEntityID:    fmt.Sprintf(\"%v\", entityID),\n\t\tEntityModel: entityModel,\n\t\tOldData:     string(oldData),\n\t\tNewData:     string(newData),\n\t\tDiff:        string(diffJSON),\n\t\tUserEmail:   user_email,\n\t\tUserName:    user_name,\n\t\tPhcID:       phc_id,\n\t\tDomain:      domain,\n\t}\n\t// Set the flag in the context to avoid infinite loop\n\tnewCtx := context.WithValue(db.Statement.Context, auditLogFlagKey, true)\n\tdb = db.WithContext(newCtx)\n\t// time.Sleep(5 * time.Second)\n\t// Create the audit log entry\n\tauditLogDB.Create(&auditLog)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76420166/hibernates-envers-equivalent-for-golang-gorm-for-auditing",
    "body": "func convertToSnakeCase(str string) string {\n\t// Compile a regex to find capital letters and replace with _<lowercase>\n\tvar matchFirstCap = regexp.MustCompile(\"(.)([A-Z][a-z]+)\")\n\tvar matchAllCap = regexp.MustCompile(\"([a-z0-9])([A-Z])\")\n\t// Insert underscore before the capital letters\n\tsnake := matchFirstCap.ReplaceAllString(str, \"${1}_${2}\")\n\tsnake = matchAllCap.ReplaceAllString(snake, \"${1}_${2}\")\n\t// Convert to lowercase\n\treturn strings.ToLower(snake)\n}\n// NormalizeKeys converts all keys in a map to snake_case\nfunc normalizeKeys(data map[string]interface{}) map[string]interface{} {\n\tnormalized := make(map[string]interface{})\n\tfor key, value := range data {\n\t\t// Convert each key to snake_case\n\t\tsnakeKey := convertToSnakeCase(key)\n\t\tnormalized[snakeKey] = value\n\t}\n\treturn normalized\n}\nfunc calculateDiff(oldData, newData []byte) []byte {\n\tdiffMap := make(map[string]interface{})\n\toldMap := make(map[string]interface{})\n\tnewMap := make(map[string]interface{})\n\tjson.Unmarshal(oldData, &oldMap)\n\tjson.Unmarshal(newData, &newMap)\n\toldMap = normalizeKeys(oldMap)\n\tnewMap = normalizeKeys(newMap)\n\t// fmt.Println(\"👉️ Old Map: \", oldMap)\n\t// fmt.Println(\"👉️ New Map: \", newMap)\n\tfor key, value := range oldMap {\n\t\tif key == \"password\" {\n\t\t\tcontinue\n\t\t}\n\t\tif newMap[key] != value {\n\t\t\tdiffMap[key] = map[string]interface{}{\n\t\t\t\t\"old\": value,\n\t\t\t\t\"new\": newMap[key],\n\t\t\t}\n\t\t}\n\t}\n\tdiffJSON, _ := json.Marshal(diffMap)\n\treturn diffJSON\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76346054/how-read-interface-value-having-address-of-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\ntype DBBatch struct {\n\tFieldtoKeep  string `json:\"field_to_keep\"`\n\tFieldtoKeep2 string `json:\"field_to_keep2\"`\n}\nfunc main() {\n\tjsonBatch := `{\"field_to_keep\":\"XXXXX\",\"field_to_keep2\":\"26400527\",\"field_to_delete\":\"whynotdeleted\"}`\n\tvar i interface{} = DBBatch{}\n\tfmt.Printf(\"%T\\n\", i) // type is DBBatch\n\tif err := json.Unmarshal([]byte(jsonBatch), &i); err != nil {\n\t\tlog.Println(err)\n\t}\n\tfmt.Printf(\"%T\\n\", i) // type is not DBBatch anymore, instead it's map[string]any\n\ti = &DBBatch{}\n\tfmt.Printf(\"%T\\n\", i) // type is *DBBatch\n\tif err := json.Unmarshal([]byte(jsonBatch), &i); err != nil {\n\t\tlog.Println(err)\n\t}\n\tfmt.Printf(\"%T\\n\", i) // type is *DBBatch\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76259889/how-to-add-dirname-and-serial-to-x509v3-authority-key-identifier",
    "body": "package main\nimport (\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/asn1\"\n\t\"encoding/hex\"\n\t\"encoding/pem\"\n\t\"fmt\"\n\t\"math/big\"\n)\n// RFC 5280, A.2. Implicitly Tagged Module, 1988 Syntax\n//\n//\tAuthorityKeyIdentifier ::= SEQUENCE {\n//\t    keyIdentifier             [0] KeyIdentifier            OPTIONAL,\n//\t    authorityCertIssuer       [1] GeneralNames             OPTIONAL,\n//\t    authorityCertSerialNumber [2] CertificateSerialNumber  OPTIONAL }\n//\t    -- authorityCertIssuer and authorityCertSerialNumber MUST both\n//\t    -- be present or both be absent\ntype authKeyId struct {\n\tKeyIdentifier             []byte       `asn1:\"optional,tag:0\"`\n\tAuthorityCertIssuer       generalNames `asn1:\"optional,tag:1\"`\n\tAuthorityCertSerialNumber *big.Int     `asn1:\"optional,tag:2\"`\n}\n// RFC 5280, A.2. Implicitly Tagged Module, 1988 Syntax\n//\n//\tGeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\n//\n//\tGeneralName ::= CHOICE {\n//\t     otherName                 [0]  AnotherName,\n//\t     rfc822Name                [1]  IA5String,\n//\t     dNSName                   [2]  IA5String,\n//\t     x400Address               [3]  ORAddress,\n//\t     directoryName             [4]  Name,\n//\t     ediPartyName              [5]  EDIPartyName,\n//\t     uniformResourceIdentifier [6]  IA5String,\n//\t     iPAddress                 [7]  OCTET STRING,\n//\t     registeredID              [8]  OBJECT IDENTIFIER }\ntype generalNames struct {\n\tName []pkix.RDNSequence `asn1:\"tag:4\"`\n}\nfunc gen(issuer *x509.Certificate) ([]byte, error) {\n\treturn asn1.Marshal(authKeyId{\n\t\tKeyIdentifier:             issuer.SubjectKeyId,\n\t\tAuthorityCertIssuer:       generalNames{Name: []pkix.RDNSequence{issuer.Issuer.ToRDNSequence()}},\n\t\tAuthorityCertSerialNumber: issuer.SerialNumber,\n\t})\n}\nfunc main() {\n\tcaCert := `-----BEGIN CERTIFICATE-----\nMIIBoTCCAUegAwIBAgIQGoCjDJN1Y6rGWEbXW8V8MDAKBggqhkjOPQQDAjAmMQ8w\nDQYDVQQKEwZNeSBPcmcxEzARBgNVBAMTCk15IFJvb3QgQ0EwHhcNMjMwNTE2MTQy\nNTUwWhcNMjMwNTE3MTUyNTUwWjAmMQ8wDQYDVQQKEwZNeSBPcmcxEzARBgNVBAMT\nCk15IFJvb3QgQ0EwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARZQz2Ka7Fi6w9/\n32SJHTAjrkE+VqYx7hFNmtX1INPBAJNfvONF2SIlh5nQmS50JpNVGIvEhTbFL0A0\ndcuruFHno1cwVTAOBgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEw\nDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU5Y48DJ96LQWVh3S/aNJ/6SGy/j4w\nCgYIKoZIzj0EAwIDSAAwRQIhANQDh6SGZ014wVFdH0ZHbEGhdb2TqXZUJxA7YMo3\n80UnAiApZp4wlzqlB+J4fIPnep+Txru01JgFaKsml2yHv3mEWg==\n-----END CERTIFICATE-----`\n\tb, _ := pem.Decode([]byte(caCert))\n\tif b == nil {\n\t\tpanic(\"couldn't decode test certificate\")\n\t}\n\tissuer, err := x509.ParseCertificate(b.Bytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tauthorityKeyIdentifierValue, err := gen(issuer)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(hex.EncodeToString(authorityKeyIdentifierValue))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76259889/how-to-add-dirname-and-serial-to-x509v3-authority-key-identifier",
    "body": "c#\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text;\ninternal class Program\n{\n    private static void Main(string[] args)\n    {\n        var certBytes = Encoding.ASCII.GetBytes(@\"-----BEGIN CERTIFICATE-----\nMIIBoTCCAUegAwIBAgIQGoCjDJN1Y6rGWEbXW8V8MDAKBggqhkjOPQQDAjAmMQ8w\nDQYDVQQKEwZNeSBPcmcxEzARBgNVBAMTCk15IFJvb3QgQ0EwHhcNMjMwNTE2MTQy\nNTUwWhcNMjMwNTE3MTUyNTUwWjAmMQ8wDQYDVQQKEwZNeSBPcmcxEzARBgNVBAMT\nCk15IFJvb3QgQ0EwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARZQz2Ka7Fi6w9/\n32SJHTAjrkE+VqYx7hFNmtX1INPBAJNfvONF2SIlh5nQmS50JpNVGIvEhTbFL0A0\ndcuruFHno1cwVTAOBgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEw\nDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU5Y48DJ96LQWVh3S/aNJ/6SGy/j4w\nCgYIKoZIzj0EAwIDSAAwRQIhANQDh6SGZ014wVFdH0ZHbEGhdb2TqXZUJxA7YMo3\n80UnAiApZp4wlzqlB+J4fIPnep+Txru01JgFaKsml2yHv3mEWg==\n-----END CERTIFICATE-----\");\n        using var issuer = new X509Certificate2(certBytes);\n        var e = X509AuthorityKeyIdentifierExtension.CreateFromCertificate(issuer, true, true);\n        Console.WriteLine(ByteArrayToHex(e.RawData));\n    }\n    private static string ByteArrayToHex(byte[] bytes)\n    {\n        var builder = new StringBuilder(bytes.Length * 2);\n        for (int i = 0; i < bytes.Length; i++)\n        {\n            builder.Append($\"{bytes[i]:x2}\");\n        }\n        return builder.ToString();\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76259889/how-to-add-dirname-and-serial-to-x509v3-authority-key-identifier",
    "body": "func gen(issuer *x509.Certificate) ([]byte, error) {\n\trdnSequence := issuer.Issuer.ToRDNSequence()\n\tif len(issuer.EmailAddresses) > 0 {\n\t\toidEmail := asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 9, 1}\n\t\temails := make([]pkix.AttributeTypeAndValue, len(issuer.EmailAddresses))\n\t\tfor i, value := range issuer.EmailAddresses {\n\t\t\temails[i].Type = oidEmail\n\t\t\temails[i].Value = value\n\t\t}\n\t\trdnSequence = append(rdnSequence, emails)\n\t}\n\treturn asn1.Marshal(authKeyId{\n\t\tKeyIdentifier:             issuer.SubjectKeyId,\n\t\tAuthorityCertIssuer:       generalNames{Name: []pkix.RDNSequence{rdnSequence}},\n\t\tAuthorityCertSerialNumber: issuer.SerialNumber,\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76241498/gqlgen-and-dependency-injection-using-golang",
    "body": ">\t//  +--- REQUEST   POST /graphql --------------------------------------------+\n>\t//  | +- OPERATION query OpName { viewer { name } } -----------------------+ |\n>\t//  | |  RESPONSE  { \"data\": { \"viewer\": { \"name\": \"bob\" } } }             | |\n>\t//  | +- OPERATION subscription OpName2 { chat { message } } --------------+ |\n>\t//  | |  RESPONSE  { \"data\": { \"chat\": { \"message\": \"hello\" } } }          | |\n>\t//  | |  RESPONSE  { \"data\": { \"chat\": { \"message\": \"byee\" } } }           | |\n>\t//  | +--------------------------------------------------------------------+ |\n>\t//  +------------------------------------------------------------------------+\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/76185208/how-to-structure-golang-api-that-uses-function-from-python-file",
    "body": "package main\n// #cgo CFLAGS: -I/usr/include/python3.8\n// #cgo LDFLAGS: -lpython3.8\n// #include <Python.h>\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\nfunc main() {\n\tC.Py_Initialize()\n\tdefer C.Py_Finalize()\n\tpyName := C.CString(\"monitor_module\")\n\tdefer C.free(unsafe.Pointer(pyName))\n\tpyModule := C.PyImport_ImportModule(pyName)\n\tif pyModule == nil {  // handle error  }\n\tpyFunc := C.PyObject_GetAttrString(pyModule, C.CString(\"monitor_function\"))\n\tpyArgs := C.PyTuple_New(0)\n\tpyResult := C.PyObject_CallObject(pyFunc, pyArgs)\n\tresult := C.GoString(C.PyUnicode_AsUTF8(pyResult)) // Python result to a Go string\n\tfmt.Println(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76165008/is-there-a-way-to-execute-beforecreate-and-beforeupdate-hooks-for-every-struct-i",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/google/uuid\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\":memory:\"), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&InnerStructA{}, &InnerStructB{}, &OuterStruct{})\n\touterStructObject := OuterStruct{\n\t\tID: \"sample_ID\",\n\t}\n\terrCreate := db.Create(&outerStructObject).Error\n\tif err != nil {\n\t\tlog.Fatal(errCreate)\n\t}\n\tvar outer OuterStruct\n\tdb.Last(&outer)\n\tfmt.Println(\"Last register: \", outer)\n\t// innerA := InnerStructA{\n\t// \tA: \"123\",\n\t// }\n\t// errCreateInner := db.Create(&innerA).Error\n\t// if err != nil {\n\t// \tlog.Fatal(errCreateInner)\n\t// }\n}\ntype InnerStructA struct {\n\tA string\n}\ntype InnerStructB struct {\n\tB string\n}\n// This is not being called\nfunc (a *InnerStructA) BeforeCreate(tx *gorm.DB) error {\n\tfmt.Println(\"Hook triggered: BeforeCreate for InnerStructA\")\n\t// ...\n\treturn nil\n}\n// This is not being called\nfunc (b *InnerStructB) BeforeCreate(tx *gorm.DB) error {\n\tfmt.Println(\"Hook triggered: BeforeCreate for InnerStructB\")\n\t// ...\n\treturn nil\n}\n// This works!\nfunc (o *OuterStruct) BeforeCreate(tx *gorm.DB) error {\n\tfmt.Println(\"Hook triggered: BeforeCreate for OuterStruct\")\n\to.InnerStructA.A = uuid.New().String()\n\to.InnerStructB.B = uuid.New().String()\n\treturn nil\n}\ntype OuterStruct struct {\n\tInnerStructA\n\tInnerStructB\n\tID string `gorm:\"type:varchar(40);not null\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76162208/how-to-implement-stack-tracing",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"os\"\n\t\"github.com/pkg/errors\"\n)\nfunc fn() error {\n\t_, err := os.Open(\"non-existing\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"fn\")\n\t}\n\treturn nil\n}\ntype stackTracer interface {\n\tStackTrace() errors.StackTrace\n}\nfunc traceError(err error) {\n\t_, ok := err.(stackTracer)\n\tif ok {\n\t\tfmt.Println(\"tracer implemented\")\n\t} else {\n\t\tfmt.Println(\"tracer not implemented\")\n\t}\n}\nfunc main() {\n\terr := fn()\n\tswitch e := errors.Cause(err); e.(type) {\n\tcase *fs.PathError:\n\t\tfmt.Println(\"caught fs error\")\n\t\ttraceError(err)\n\tdefault:\n\t\tfmt.Println(\"unknown error\")\n\t\ttraceError(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76138645/retrieve-value-from-gin-context",
    "body": "    > userToken, exists := user.(middleware.UserToken)\n    > if exists {\n    > \tworkspaceId := userToken.WorkspaceID\n    > }\n2. According to `claims, ok := token.Claims.(*UserToken)`, the `claims` has the type `*UserToken` instead of `UserToken`. So `user.(middleware.UserToken)` should be `user.(*middleware.UserToken)`.\nNow let's turn back to the error. That means the struct `middleware.UserToken` does not have the field `WorkspaceID`. Maybe it's a field of the struct `domain.UserToken`. Let's assume this is the case, then the overall fix should be:"
  },
  {
    "url": "https://stackoverflow.com/questions/76125365/opensearch-error-pinging-elastic-server-x509-certificate-signed-by-unknown-auth",
    "body": "package main\nimport (\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n)\nfunc main() {\n\treq, err := http.NewRequest(\"GET\", \"https://localhost:9200\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.SetBasicAuth(\"admin\", \"admin\")\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\tInsecureSkipVerify: true,\n\t\t\t},\n\t\t},\n\t}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer res.Body.Close()\n\tbuf, err := httputil.DumpResponse(res, true)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%s\\n\", buf)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76081910/how-to-properly-configure-the-gorutine-limit",
    "body": "m1:=make(chan struct{},10)\nm2:=make(chan struct{},10)\nm3:=make(chan struct{},10)\nwg:=sync.WaitGroup{}\nfor _, value := range list {\n   value := value\n   if checkMethod1 {\n       m1<-struct{}{}\n       wg.Add(1)\n       go func() {\n           defer func() {\n              <-m1\n              wg.Done()\n           }()\n           // do work\n       }()\n   }\n   if checkMethod2 {\n       m2<-struct{}{}\n       wg.Add(1)\n       go func() {\n           defer func() {\n               <-m2\n               wg.Done()\n           }()\n           // do work\n       }()\n   }\n   ...\n  wg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75947754/how-to-combine-cobra-and-klog",
    "body": " package main\n\n import (\n    \"flag\"\n    \"github.com/spf13/cobra\"\n    \"k8s.io/klog\"\n )\n\n var (\n    str     = \"hello world\"\n+   logFile string\n )\n\n func NewCommand() *cobra.Command {\n+   var fs flag.FlagSet\n+   klog.InitFlags(&fs)\n    cmd := &cobra.Command{\n        Use:   \"echo\",\n        Short: \"use klog with cobra\",\n        Long:  \"Use klog together with cobra.\",\n        Run: func(cmd *cobra.Command, args []string) {\n+           fs.Set(\"logtostderr\", \"false\")\n+           fs.Set(\"log_file\", logFile)\n            Run()\n        },\n    }\n-   klog.InitFlags(flag.CommandLine)\n-   cmd.Flags().AddGoFlagSet(flag.CommandLine)\n    cmd.Flags().SortFlags = false\n    cmd.Flags().StringVar(&str, \"str\", str, \"string to print\")\n+   cmd.Flags().StringVar(&logFile, \"log_file\", \"\", \"If non-empty, use this log file\")\n    return cmd\n }\n func Run() {\n    defer klog.Flush()\n    klog.Infof(\"Running, str:%s\", str)\n }\n\n func main() {\n    if err := NewCommand().Execute(); err != nil {\n        klog.Fatalf(\"root cmd execute failed, err=%v\", err)\n    }\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/75903249/how-to-let-golang-distinguish-xml-elements-with-and-without-namespaces",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\nfunc main() {\n\ttype Response struct {\n\t\tXMLName     xml.Name `xml:\"resp\"`\n\t\tItunesImage struct {\n\t\t\tURL string `xml:\"url,attr\"`\n\t\t} `xml:\"http://www.itunes.com/dtds/podcast-1.0.dtd image\"`\n\t\tImage []struct {\n\t\t\tURL string `xml:\"url\"`\n\t\t} `xml:\"image\"`\n\t}\n\txmlData := `\n<resp xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\">\n  <image>\n    <url>http://sampleUrl.com</url>\n  </image>\n  <itunes:image url=\"http://sampleItunesUrl.com/\" />\n</resp>\n`\n\tvar resp Response\n\terr := xml.Unmarshal([]byte(xmlData), &resp)\n\tif err != nil {\n\t\tfmt.Printf(\"Error decoding XML: %s\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"ItunesImage: %v\\n\", resp.ItunesImage)\n\tfmt.Printf(\"Images: %v\\n\", resp.Image)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75903249/how-to-let-golang-distinguish-xml-elements-with-and-without-namespaces",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\nfunc main() {\n\ttype Response struct {\n\t\tXMLName xml.Name `xml:\"resp\"`\n\t\tImage   []struct {\n\t\t\tXMLName xml.Name\n\t\t\tURL     string `xml:\"url\"`\n\t\t} `xml:\"image\"`\n\t}\n\txmlData := `\n<resp xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\">\n  <image>\n    <url>http://sampleUrl.com</url>\n  </image>\n  <itunes:image>\n    <url>http://sampleItunesUrl.com/</url>\n  </itunes:image>\n</resp>\n`\n\tvar resp Response\n\terr := xml.Unmarshal([]byte(xmlData), &resp)\n\tif err != nil {\n\t\tfmt.Printf(\"Error decoding XML: %s\\n\", err)\n\t\treturn\n\t}\n\tfor _, img := range resp.Image {\n\t\tfmt.Printf(\"namespace: %q, url: %s\\n\", img.XMLName.Space, img.URL)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75883854/parse-nested-json-using-struct-in-go-language",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype ObjectTagsList struct {\n\tTagCode  string\n\tTagName  string\n\tTagValue []string\n}\ntype Model struct {\n\tAction   string `json:\"action\"`\n\tBusiness struct {\n\t\tListId     int64            `json:\"ListId\"`\n\t\tObjectTags []ObjectTagsList `json:\"ObjectTags\"`\n\t} `json:\"business\"`\n}\nfunc main() {\n\tJson := `\n{\n  \"action\": \"add\",\n  \"business\": {\n    \"ListId\": 123,\n    \"ObjectTags\": [\n      {\n        \"tagCode\": \"csharp\",\n        \"tagName\": \"codename\",\n        \"tagValue\": [\n          \"2\"\n        ],\n        \"tagType\": 3\n      },\n      {\n        \"tagCode\": \"goLang\",\n        \"tagName\": \"coding\",\n        \"tagValue\": [\n          \"3\"\n        ],\n        \"tagType\": 3\n      }\n    ]\n  }\n}\n`\n\tvar model Model\n\tjson.Unmarshal([]byte(Json), &model)\n\tfmt.Println(model.Action)\n\tfmt.Println(model.Business.ListId)\n\tfmt.Println(model.Business.ObjectTags)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75839041/determine-whether-field-of-interface-type-of-struct-is-set",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\nfunc validateContainer(c *container) {\n\ttC := reflect.TypeOf(*c)\n\tvC := reflect.ValueOf(*c)\n\tfor i := 0; i < vC.NumField(); i++ {\n\t\tif f := vC.Field(i); f.Kind() == reflect.Interface {\n\t\t\tfmt.Printf(\"%v: IsNil: %v, isZero: %v, IsValid: %v\\n\",\n\t\t\t\ttC.Field(i).Name,\n\t\t\t\tf.IsNil(),\n\t\t\t\tf.IsZero(),\n\t\t\t\tf.IsValid(),\n\t\t\t)\n\t\t}\n\t}\n\t// tC.Field(i) returns a reflect.StructField that describes the field.\n\t// It's not the field itself.\n\tfmt.Printf(\"%#v\\n\", reflect.ValueOf(tC.Field(0)))\n}\ntype A interface{ Foo() }\ntype B interface{ Bar() }\ntype container struct {\n\tFieldA A\n\tFieldB B\n}\ntype a struct{}\nfunc (*a) Foo() {}\nfunc NewA() *a  { return &a{} }\nfunc main() {\n\tc := &container{}\n\tc.FieldA = NewA()\n\tvalidateContainer(c)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75787773/how-do-i-close-the-channel-correctly",
    "body": "package main\nimport (\n    \"fmt\"\n    \"github.com/zenthangplus/goccm\"\n)\nfunc main() {\n    c := goccm.New(2)\n    chanStr := make(chan string)\n    lines := []string{\"aaaaaa\", \"fffff\", \"ddddd\", \"eeeee\"}\n    go func() {\n        for value := range chanStr {\n            fmt.Println(value)\n        }\n    }()\n    for _, value := range lines {\n        value := value\n        c.Wait()\n        go func() {\n            chanStr <- value\n            c.Done()\n        }()\n    }\n    c.WaitAllDone()\n    close(chanStr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75670626/how-to-kill-subprocess-on-terminating-main-process-in-go-language",
    "body": "package main\nimport (\n\t\"context\"\n\t\"os/exec\"\n\t\"time\"\n\t\"os/signal\"\n)\nfunc main() {\n\t// terminate the command based on time.Duration\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\tif err := exec.CommandContext(ctx, \"sleep\", \"5\").Run(); err != nil {\n\t\t// This will fail after 100 milliseconds. The 5 second sleep\n\t\t// will be interrupted.\n\t}\n\t// or use os signals to cancel the context\n\tctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer stop()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75525407/import-protoc-gen-openapiv2-options-annotations-proto-was-not-found-or-had-err",
    "body": "tree\n.\n├── foo.proto\n├── go.mod\n├── grpc-gateway\n│   ├── protoc-gen-openapiv2\n│   │   └── options\n│   │       ├── annotations.pb.go\n│   │       ├── annotations.proto\n│   │       ├── annotations.swagger.json\n│   │       ├── BUILD.bazel\n│   │       ├── openapiv2.pb.go\n│   │       ├── openapiv2.proto\n│   │       └── openapiv2.swagger.json\n├── protoc-21.12-linux-x86_64\n│   ├── bin\n│   │   └── protoc\n│   ├── include\n│   │   └── google\n│   │       └── protobuf\n│   │           ├── any.proto\n│   │           ├── api.proto\n│   │           ├── compiler\n│   │           │   └── plugin.proto\n│   │           ├── descriptor.proto\n│   │           ├── duration.proto\n│   │           ├── empty.proto\n│   │           ├── field_mask.proto\n│   │           ├── source_context.proto\n│   │           ├── struct.proto\n│   │           ├── timestamp.proto\n│   │           ├── type.proto\n│   │           └── wrappers.proto\n│   └── readme.txt\n└── protos\n    └── protos\n        └── foo.pb.go"
  },
  {
    "url": "https://stackoverflow.com/questions/75516157/golang-gorm-implement-archived-at-similar-to-soft-delete",
    "body": "package db\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"gorm.io/gorm\"\n)\nconst (\n    GormSettingKeyUnscopeArchive = \"unscope_archive\"\n\tStructFieldNameArchivedAt    = \"ArchivedAt\"\n)\n// ArchivedQueryCallback - conditionally adds \"WHERE archived_at IS NULL\" if the Model being queried has the following\n// 1. Struct field represented by StructFieldNameArchivedAt\n// 2. GORM instance setting GormSettingKeyUnscopeArchive, See UnscopeArchive\nfunc ArchivedQueryCallback(db *gorm.DB) {\n\t// Check if Model is a pointer and has an indirect struct type\n\tif db.Statement.Model != nil &&\n\t\treflect.TypeOf(db.Statement.Model).Kind() == reflect.Ptr &&\n\t\treflect.Indirect(reflect.ValueOf(db.Statement.Model)).Kind() == reflect.Struct {\n\t\tstmt := &gorm.Statement{DB: db}\n\t\tparseErr := stmt.Parse(db.Statement.Model)\n\t\tif parseErr != nil {\n\t\t\tpanic(parseErr)\n\t\t}\n\t\tif _, archivedAtExists := stmt.Schema.FieldsByName[StructFieldNameArchivedAt]; archivedAtExists {\n\t\t\tv, ok := db.InstanceGet(GormSettingKeyUnscopeArchive)\n\t\t\tif ok {\n\t\t\t\tif v == true {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tdb.Where(fmt.Sprintf(\"%s IS NULL\", stmt.Schema.FieldsByName[StructFieldNameArchivedAt].DBName))\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75516157/golang-gorm-implement-archived-at-similar-to-soft-delete",
    "body": "   type User {\n       ID           string         `gorm:\"primary_key\" json:\"id\" valid:\"uuidv4, optional\"`\n\tCreatedAt    time.Time      `valid:\"-\" json:\"created_at\"`\n\tUpdatedAt    time.Time      `valid:\"-\" json:\"-\"`\n\tDeletedAt    gorm.DeletedAt `sql:\"index\" valid:\"-\" json:\"-\"`\n\tArchivedAt   time.Time\n   }\n   var user []User\n   ctx := context.Background()\n   dbClient := InitializeGORM() //helper\n   _ := dbClient.WithContext(ctx).Find(&user).Error // SELECT * FROM users WHERE deleted_at IS NULL AND archived_at IS NULL;\n   _ := dbClient.WithContext(ctx).Scopes(UnscopeArchive).Find(&user).Error // SELECT * FROM users WHERE deleted_at IS NULL;"
  },
  {
    "url": "https://stackoverflow.com/questions/75186654/how-to-read-and-format-a-stream-of-text-received-through-a-bash-pipe",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\t// os.Stdin.SetReadDeadline(time.Now().Add(2 * time.Second))\n\tb, err := readAll(os.Stdin)\n\tif err != nil {\n\t\tfmt.Println(\"ERROR: \", err.Error())\n\t}\n\tstr := string(b)\n\tfmt.Println(str)\n}\nfunc readAll(r io.Reader) ([]byte, error) {\n\tb := make([]byte, 0, 512)\n\ti := 0\n\tfor {\n\t\tif len(b) == cap(b) {\n\t\t\t// Add more capacity (let append pick how much).\n\t\t\tb = append(b, 0)[:len(b)]\n\t\t}\n\t\tn, err := r.Read(b[len(b):cap(b)])\n\t\t//fmt.Fprintf(os.Stderr, \"READ %d - RECEIVED: \\n%s\\n\", i, string(b[len(b):cap(b)]))\n\t\tfmt.Fprintf(os.Stderr, \"%s READ %d - RECEIVED %d BYTES\\n\", time.Now(), i, n)\n\t\ti++\n\t\tb = b[:len(b)+n]\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tfmt.Fprintln(os.Stderr, \"RECEIVED EOF\")\n\t\t\t\terr = nil\n\t\t\t}\n\t\t\treturn b, err\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75181668/synchronize-buffered-channel-and-waitgroup",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"sync\"\n\t\"time\"\n)\ntype studentDetails struct {\n\ttitle string\n\tlink  string\n}\nfunc main() {\n\tvar wg sync.WaitGroup\n\tvar err error\n\tstudents := make([]studentDetails, 0)\n\tstudentCh := make(chan studentDetails, 10000)\n\terrorCh := make(chan error, 1)\n\tstart := time.Now()\n\twg.Add(1)\n\tgo getDetailStudents(context.TODO(), studentCh, errorCh, &wg, \"http://example.com\", false)\nLOOP:\n\tfor {\n\t\tselect {\n\t\tcase p, ok := <-studentCh:\n\t\t\tif ok {\n\t\t\t\tlog.Printf(\"Links %s: [%s]\\n\", p.title, p.link)\n\t\t\t\tstudents = append(students, p)\n\t\t\t} else {\n\t\t\t\tlog.Println(\"Draining student channel\")\n\t\t\t\tfor p := range studentCh {\n\t\t\t\t\tlog.Printf(\"Links %s: [%s]\\n\", p.title, p.link)\n\t\t\t\t\tstudents = append(students, p)\n\t\t\t\t}\n\t\t\t\tbreak LOOP\n\t\t\t}\n\t\tcase err = <-errorCh:\n\t\t\tif err != nil {\n\t\t\t\tbreak LOOP\n\t\t\t}\n\t\tcase <-wrapWait(&wg):\n\t\t\tclose(studentCh)\n\t\t}\n\t}\n\tclose(errorCh)\n\telapsed := time.Since(start)\n\tlog.Printf(\"operation took %s\", elapsed)\n}\nfunc getDetailStudents(rCtx context.Context, content chan<- studentDetails, errorCh chan<- error, wg *sync.WaitGroup, url string, subSection bool) {\n\tdefer func() {\n\t\tlog.Println(\"Closing\")\n\t\twg.Done()\n\t}()\n\tif !subSection {\n\t\twg.Add(1)\n\t\tgo getDetailStudents(rCtx, content, errorCh, wg, url, true)\n\t\t// L.Warnf(\"total pages found %d\", pageSub.Length()+1)\n\t}\n\tcontent <- studentDetails{\n\t\ttitle: \"title\",\n\t\tlink:  \"link\",\n\t}\n}\n// helper function to allow using WaitGroup in a select\nfunc wrapWait(wg *sync.WaitGroup) <-chan struct{} {\n\tout := make(chan struct{})\n\tgo func() {\n\t\twg.Wait()\n\t\tout <- struct{}{}\n\t}()\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75153219/error-when-parsing-yaml-file-on-golang-when-theres-a-dash-before-the-square-bra",
    "body": "const testYaml = `servers:\n    - server_name: ratamahatta\n      server_groups:\n          - [r1, r2, r3]\n          - [r4, r5, r6]\n    - server_name: kaiowas\n      server_groups:\n          - [c1, c2]\n`\ntype S struct {\n\tServers []struct {\n\t\tServerName   string     `yaml:\"server_name\"`\n\t\tServerGroups [][]string `yaml:\"server_groups\"`\n\t} `yaml:\"servers\"`\n}\nfunc main() {\n\tvar s S\n\tif err := yaml.Unmarshal([]byte(testYaml), &s); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Value: %#v\\n\", s.Servers[0].ServerGroups[0]) // []string{\"r1\", \"r2\", \"r3\"}\n\tfmt.Printf(\"Value: %#v\\n\", s.Servers[0].ServerGroups[1]) // []string{\"r4\", \"r5\", \"r6\"}\n\tfmt.Printf(\"Value: %#v\\n\", s.Servers[1].ServerGroups[0]) // []string{\"c1\", \"c2\"}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74959178/how-do-i-copy-a-local-file-to-a-pods-container-in-my-minikube-cluster-using-the",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/client-go/tools/remotecommand\"\n)\nfunc CopyIntoPod(podName string, namespace string, containerName string, srcPath string, dstPath string) {\n\t// Get the default kubeconfig file\n\tkubeConfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\t// Create a config object using the kubeconfig file\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeConfig)\n\tif err != nil {\n\t\tfmt.Printf(\"Error creating config: %s\\n\", err)\n\t\treturn\n\t}\n\t// Create a Kubernetes client\n\tclient, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\tfmt.Printf(\"Error creating client: %s\\n\", err)\n\t\treturn\n\t}\n\t// Open the file to copy\n\tlocalFile, err := os.Open(srcPath)\n\tif err != nil {\n\t\tfmt.Printf(\"Error opening local file: %s\\n\", err)\n\t\treturn\n\t}\n\tdefer localFile.Close()\n\tpod, err := client.CoreV1().Pods(namespace).Get(context.TODO(), podName, metav1.GetOptions{})\n\tif err != nil {\n\t\tfmt.Printf(\"Error getting pod: %s\\n\", err)\n\t\treturn\n\t}\n\t// Find the container in the pod\n\tvar container *corev1.Container\n\tfor _, c := range pod.Spec.Containers {\n\t\tif c.Name == containerName {\n\t\t\tcontainer = &c\n\t\t\tbreak\n\t\t}\n\t}\n\tif container == nil {\n\t\tfmt.Printf(\"Container not found in pod\\n\")\n\t\treturn\n\t}\n\t// Create a stream to the container\n\treq := client.CoreV1().RESTClient().Post().\n\t\tResource(\"pods\").\n\t\tName(podName).\n\t\tNamespace(namespace).\n\t\tSubResource(\"exec\").\n\t\tParam(\"container\", containerName)\n\treq.VersionedParams(&corev1.PodExecOptions{\n\t\tContainer: containerName,\n\t\tCommand:   []string{\"bash\", \"-c\", \"cat > \" + dstPath},\n\t\tStdin:     true,\n\t\tStdout:    true,\n\t\tStderr:    true,\n\t}, scheme.ParameterCodec)\n\texec, err := remotecommand.NewSPDYExecutor(config, \"POST\", req.URL())\n\tif err != nil {\n\t\tfmt.Printf(\"Error creating executor: %s\\n\", err)\n\t\treturn\n\t}\n\t// Create a stream to the container\n\terr = exec.StreamWithContext(context.TODO(), remotecommand.StreamOptions{\n\t\tStdin:  localFile,\n\t\tStdout: os.Stdout,\n\t\tStderr: os.Stderr,\n\t\tTty:    false,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Error streaming: %s\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"File copied successfully\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74721065/golang-aes-decryption-mechanism-outputs-another-ciphertext-only",
    "body": "import (\n\t\"crypto/aes\"\n\t\"crypto/md5\"\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"log\"\n\t\"github.com/Tnze/gomcbot/CFB8\"\n)\nfunc main() {\n\tkey := \"94k/IwqJQ5wf4Yt5JZmbW85r2x246rI3g3LZbTI80Vo=\"\n\tkeyHashed := md5.Sum([]byte(key))\n\tkeyHex := hex.EncodeToString(keyHashed[:])\n\tcipherText := \"h6OpNEE4g8hjyJl5lk5Qm4ZyXP/j3ADWqREolDL8lwb0LuyDqQdrlLGfsg==\" // Ciphertext from the Java side (created with AES/CFB8)\n\tdecryptedText, _ := decrypt([]byte(keyHex), cipherText)\n\tlog.Println(decryptedText)\n}\nfunc decrypt(key []byte, cipherTextB64 string) (decrypted string, err error) {\n\tcipherText, _ := base64.StdEncoding.DecodeString(cipherTextB64)                      // Fix 1: don't separate IV and ciphertext\n\tiv := []byte{231, 9, 137, 91, 166, 112, 98, 216, 65, 150, 255, 96, 118, 243, 88, 85} // Fix 2: apply the static IV from the Java side\n\tblock, _ := aes.NewCipher(key)\n\tstream := CFB8.NewCFB8Decrypt(block, iv) // Fix 3: apply CFB8\n\tstream.XORKeyStream(cipherText, cipherText)\n\treturn string(cipherText), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74697217/running-all-tests-for-a-multi-binary-project",
    "body": "# run all tests\ngo test ./...\n# run all tests under a specific directory (including subdiretories)\ngo test ./bin2/...\n# test package located in specific directory\ngo test ./shared/model\n# test package that has specific import path\ngo test projectroot/shared/model\n# test package in current working directory\ngo test\n# ditto\ngo test .\n# test package in parent directory\ngo test ..\n# run a specific test within the package under test\ngo test -run=X\n# run a specific sub-test within the package under test\ngo test -run=X/Y"
  },
  {
    "url": "https://stackoverflow.com/questions/74629374/why-pgx-returns-connection-busy-on-commit",
    "body": "// InsertItems adds items to the table\nfunc (r *Repository) InsertItems(ctx context.Context, values []service.Transaction) (err error) {\n\tconn, err := r.pool.Acquire(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"acquire connection: %w\", err)\n\t}\n\tdefer conn.Release()\n\tbatch := new(pgx.Batch)\n\tfor _, v := range values {\n\t\tquery := fmt.Sprintf(`INSERT INTO %v (id, date, amount) VALUES ($1, $2, $3)`, r.tableName)\n\t\t_ = batch.Queue(query, v.ID, v.Date, v.Amount)\n\t}\n\ttx, err := conn.Begin(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"starting pgx transaction: %w\", err)\n\t}\n\tresult := tx.SendBatch(ctx, batch)\n\tdefer func() {\n\t\tif e := result.Close(); e != nil {\n\t\t\tlogger.Errorf(\"closing batch result: %v\", e)\n\t\t\terr = e\n\t\t}\n\n\t\tif err != nil {\n\t\t\t_ = tx.Rollback(ctx)\n\t\t} else {\n\t\t\tif e := tx.Commit(ctx); e != nil {\n\t\t\t\terr = e\n\t\t\t}\n\t\t}\n\t}()\n\ttag, err := result.Exec()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"batch res exec: %w\", err)\n\t}\n\n\tlogger.Debugf(\"inserted rows: %d\", tag.RowsAffected())\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74545752/error-1452-cannot-add-or-update-a-child-row-golang-and-mysql",
    "body": "package storage\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n)\ntype Category struct {\n\tgorm.Model\n\tTitle string `gorm:\"type:varchar(255)\"`\n\tSort  int\n}\ntype Contents struct {\n\tgorm.Model\n\tCategory   Category\n\tCategoryID uint\n\tTitle      string `gorm:\"type:varchar(255)\"`\n\tContent    string `gorm:\"type:varchar(255)\"`\n}\nfunc GormTest3() {\n\tdb, err := gorm.Open(sqlite.Open(\"gorm.db\"), &gorm.Config{\n\t\tLogger: logger.Default.LogMode(logger.Info),\n\t})\n\tif err != nil {\n\t\tlog.Fatal(\"could not open database\")\n\t}\n\terr = db.AutoMigrate(&Contents{}, &Category{})\n\tif err != nil {\n\t\tlog.Fatal(\"could not migrate database\")\n\t}\n\tcreateTestData3(db)\n\tfetchData3(db)\n}\nfunc createTestData3(db *gorm.DB) {\n\tcategory := Category{\n\t\tTitle: \"ABC\",\n\t\tSort:  1,\n\t}\n\terr := db.Create(&category).Error\n\tif err != nil {\n\t\tfmt.Println(\"failed to create user data\")\n\t}\n\tcontent := Contents{\n\t\tCategoryID: category.ID,\n\t\tTitle:      \"Good Content Title\",\n\t\tContent:    \"Good Content\",\n\t}\n\terr = db.Create(&content).Error\n\tif err != nil {\n\t\tfmt.Println(\"failed to create user data\")\n\t}\n}\nfunc fetchData3(db *gorm.DB) {\n\tvar cts []Contents\n\tif err := db.Find(&cts).Error; err != nil {\n\t\tfmt.Println(\"failed to load post\")\n\t}\n\tfmt.Println(cts)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74385619/how-to-create-the-dynamic-struct-except-using-interface-and-using-spread-operato",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"reflect\"\n)\ntype DynamicMap map[string]interface{}\ntype Product struct {\n\tName        string            `json:\"name\"`\n\tCode        string            `json:\"code\"`\n\tDescription string            `json:\"description\"`\n\tBrand       string            `json:\"brand\"`\n\tVariants    map[string]string `json:\"variants\"`\n\tCategories  []int             `json:\"categories\"`\n}\nfunc (j Product) MarshalJSON() ([]byte, error) {\n\tm := DynamicMap{}\n\tt := reflect.TypeOf(j)\n\tv := reflect.ValueOf(j)\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tif t.Field(i).Tag.Get(\"json\") == \"variants\" {\n\t\t\tdyn := v.Field(i).Interface().(map[string]string)\n\t\t\tfor key, val := range dyn {\n\t\t\t\tm[key] = val\n\t\t\t}\n\t\t} else if t.Field(i).Type.Kind() == reflect.String {\n\t\t\tm[t.Field(i).Tag.Get(\"json\")] = v.Field(i).String()\n\t\t} else {\n\t\t\tm[t.Field(i).Tag.Get(\"json\")] = v.Field(i)\n\t\t}\n\t}\n\treturn json.Marshal(m)\n}\nfunc (j Product) UnmarshalJSON(data []byte) error {\n\tfmt.Println(\"Unmarshal...\")\n\treturn json.Unmarshal(data, &j)\n}\nfunc main() {\n\tp := Product{Name: \"aa\", Variants: map[string]string{\"a\": \"a\", \"b\": \"b\"}}\n\tmarshal, err := json.Marshal(p)\n\tif err != nil {\n\t\tfmt.Printf(\"%v\\n\", err)\n\t}\n\tfmt.Printf(\"%s\\n\", marshal)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74272391/unmarshal-json-date-string-to-bson-date-in-golang",
    "body": "func dateTimeDecodeValue(dc bsoncodec.DecodeContext, vr bsonrw.ValueReader, val reflect.Value) error {\n\tts, _ := vr.ReadString()\n\tt, err := time.Parse(time.RFC3339Nano, ts)\n\tif err != nil {\n\t\treturn err\n\t}\n\tval.Set(reflect.ValueOf(t))\n\treturn nil\n}\nvar tDateTime = reflect.TypeOf(time.Time{})\ntype TestDoc struct {\n\tName string    `bson:\"name\"`\n\tDob  time.Time `bson:\"dob\"`\n}\nfunc createCustomRegistry() *bsoncodec.RegistryBuilder {\n\tvar primitiveCodecs bson.PrimitiveCodecs\n\trb := bsoncodec.NewRegistryBuilder()\n\tbsoncodec.DefaultValueEncoders{}.RegisterDefaultEncoders(rb)\n\tbsoncodec.DefaultValueDecoders{}.RegisterDefaultDecoders(rb)\n\trb.RegisterTypeDecoder(tDateTime, bsoncodec.ValueDecoderFunc(dateTimeDecodeValue))\n\tprimitiveCodecs.RegisterPrimitiveCodecs(rb)\n\treturn rb\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74272391/unmarshal-json-date-string-to-bson-date-in-golang",
    "body": "func dateTimeDecodeValue(dc bsoncodec.DecodeContext, vr bsonrw.ValueReader, val reflect.Value) error {\n\tts, _ := vr.ReadString()\n\tt, err := time.Parse(time.RFC3339Nano, ts)\n\tif err != nil {\n\t\tval.SetString(ts)\n\t} else {\n\t\tval.Set(reflect.ValueOf(primitive.DateTime(t.UnixMilli())))\n\t}\n\treturn nil\n}\nvar tDateTime = reflect.TypeOf(primitive.DateTime(0))\ntype TestDoc struct {\n\tName string             `bson:\"name\"`\n\tDob  primitive.DateTime `bson:\"dob\"`\n}\nfunc createCustomRegistry() *bsoncodec.RegistryBuilder {\n\tvar primitiveCodecs bson.PrimitiveCodecs\n\trb := bsoncodec.NewRegistryBuilder()\n\tbsoncodec.DefaultValueEncoders{}.RegisterDefaultEncoders(rb)\n\tbsoncodec.DefaultValueDecoders{}.RegisterDefaultDecoders(rb)\n\trb.RegisterTypeDecoder(tDateTime, bsoncodec.ValueDecoderFunc(dateTimeDecodeValue))\n\tprimitiveCodecs.RegisterPrimitiveCodecs(rb)\n\treturn rb\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74133617/docker-moby-golang-image-build-logs-are-base64-encoded",
    "body": "} else if msg.ID == \"moby.buildkit.trace\" {\n                        // Process the message like\n                        // https://github.com/docker/docker-ce/blob/523cf7e71252013fbb6a590be67a54b4a88c1dae/components/cli/cli/command/image/build_buildkit.go#L386\n                        // the 'tracer.write' method in build_buildkit.go\n                        var resp controlapi.StatusResponse\n                        var dt []byte\n                        // ignoring all messages that are not understood\n                        if err := json.Unmarshal(*msg.Aux, &dt); err != nil {\n                                return\n                        }\n                        if err := (&resp).Unmarshal(dt); err != nil {\n                                return\n                        }\n                        for _, v := range resp.Vertexes {\n                                fmt.Printf(\"layer: %+v\", v)\n                        }\n                        for _, v := range resp.Statuses {\n                                fmt.Printf(\"status: %+v\", v)\n                        }\n                        for _, v := range resp.Logs {\n                                fmt.Printf(\"log: msg.Msg)\n                        }\n                  }"
  },
  {
    "url": "https://stackoverflow.com/questions/74115749/get-file-path-in-golang",
    "body": "package main\nimport (\n  \"fmt\"\n  \"io/fs\"\n  \"os\"\n  \"path\"\n  \"path/filepath\"\n  // \"path\"\n)\nfunc main() {\n  root := \"/path/to/root/directory\"\n  files := map[string][]byte{}\n  handler := func(p string, d fs.DirEntry, err error) error {\n    switch {\n    case err != nil:\n      return err\n    case shouldSkipDir(p, d):\n      return fs.SkipDir\n    case d.IsDir():\n      return nil\n    case shouldSkipFile(p, d):\n      return nil\n    default:\n      if fqn, e := filepath.Abs(path.Join(root, p)); e != nil {\n        return e\n      }\n      buf, e := os.ReadFile(fqn)\n      if e != nil {\n        return e\n      }\n      files[fqn] = buf\n    }\n    return nil\n  }\n  err := fs.WalkDir(os.DirFS(root), \".\", handler)\n  if err != nil {\n    panic(err)\n  }\n  for fqn, contents := range files {\n    fmt.Printf(\"%s: %d bytes\", fqn, len(contents))\n  }\n}\nfunc shouldSkipDir(path string, d fs.DirEntry) (skip bool) {\n  // TODO: set skip to true to indicate that this directory should be skipped.\n  // If the current direcotry entry is a file and this returns true, then\n  // the remainder of its containing directory are skipped.\n  return skip\n}\nfunc shouldSkipFile(path string, d fs.DirEntry) (skip bool) {\n  // TODO: set skip to true to ignore this file\n  return skip\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74049973/golang-how-to-use-validator-with-sqlc",
    "body": "version: 2\nsql:\n  - schema: \"./dbModel/migration/schema_20221008.sql\"\n    queries: \"./dbModel/query/query.sql\"\n    engine: \"postgresql\"\n    gen:\n      go:\n        package: \"dbModel\"\n        out: \"dbModel\"\n        emit_json_tags: true\n        emit_db_tags: true\n        emit_prepared_queries: false\n        emit_interface: false\n        emit_exact_table_names: false\n        json_tags_case_style: camel\n        overrides:\n          - column: table1.column_name1\n            go_struct_tag: validate:\"required\" x:\"y,z\"\n          - column: table1.column_name2\n            go_struct_tag: validate:\"required\""
  },
  {
    "url": "https://stackoverflow.com/questions/73852135/how-to-create-a-struct-with-auto-scheduler",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n    // init cache\n\tcache := NewCacheWithExpiry()\n\tcache.addItem(\"key1\", time.Now().Add(time.Second*5))\n\tcache.addItem(\"key2\", time.Now().Add(time.Second*3))\n\ttime.Sleep(time.Second*10)\n}\ntype customCacheWithExpiry struct {\n\taddrs sync.Map\n}\nfunc NewCacheWithExpiry() *customCacheWithExpiry{\n\treturn &customCacheWithExpiry{\n\t\taddrs: sync.Map{},\n\t}\n}\nfunc (c *customCacheWithExpiry) addItem(key string, val time.Time){\n\tfmt.Printf(\"storing key %s which expires at %s\\n\",key,val)\n\tc.addrs.Store(key, val)\n\tticker := time.NewTicker(val.Sub(time.Now()))\n\tgo func() {\n\t\t<-ticker.C\n\t\tfmt.Printf(\"deleting key %s\\n\", key)\n\t\tc.addrs.Delete(key)\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73851836/capture-letter-group-and-repeat-them-certain-times-with-the-number-in-group",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc main() {\n\tfmt.Println(move(\"R2(LF)3(PA)\"))\n}\nfunc ReplaceAllStringSubmatchFunc(re *regexp.Regexp, str string, repl func([]string) string) string {\n\tresult := \"\"\n\tlastIndex := 0\n\tfor _, v := range re.FindAllSubmatchIndex([]byte(str), -1) {\n\t\tgroups := []string{}\n\t\tfor i := 0; i < len(v); i += 2 {\n\t\t\tgroups = append(groups, str[v[i]:v[i+1]])\n\t\t}\n\t\tresult += str[lastIndex:v[0]] + repl(groups)\n\t\tlastIndex = v[1]\n\t}\n\treturn result + str[lastIndex:]\n}\nfunc move(s string) string {\n\trgx := regexp.MustCompile(`(\\d)\\((\\w+)\\)`)\n\treturn ReplaceAllStringSubmatchFunc(rgx, s, func(groups []string) string {\n\t\t// Convert the first group with the digits to an integer value.\n\t\tnbrTimes, err := strconv.Atoi(groups[1])\n\t\tif err != nil {\n\t\t\t// Handle error (could happen if very long number).\n\t\t}\n\t\t// Return the group 2 with the letters repeated n times.\n\t\treturn strings.Repeat(groups[2], nbrTimes)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73827326/how-to-open-an-excel-file-on-excelize-using-url-link",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\texcelize \"github.com/xuri/excelize/v2\"\n)\nfunc main() {\n    // note here the 1 at the end instead of 0 in your original link\n\topenURL(\"https://www.dropbox.com/s/8ngoie6spyga8k1/for%20testing.xlsx?dl=1\")\n}\nfunc openURL(urlLink string) {\n\tdata, err := getData(urlLink)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Open the ZIP file with Excelize\n\texlz, err := excelize.OpenReader(bytes.NewReader(data))\n\tif err != nil {\n\t\tfmt.Println(\"Reader\", err)\n\t\treturn\n\t}\n\tlst := exlz.GetSheetList()\n\tif len(lst) == 0 {\n\t\tfmt.Println(\"Empty document\")\n\t\treturn\n\t}\n\tfmt.Println(\"Sheet list:\")\n\tfor _, s := range lst {\n\t\tfmt.Println(s)\n\t}\n\tdefer func() {\n\t\tif err = exlz.Close(); err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}()\n\tfmt.Println(\"Done\")\n}\nfunc getData(url string) ([]byte, error) {\n\tr, err := http.Get(url)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer r.Body.Close()\n\treturn ioutil.ReadAll(r.Body)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73752836/how-to-make-an-outgoing-websocket-connection-request-in-go",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"github.com/gorilla/websocket\"\n)\nfunc main() {\n\twg := sync.WaitGroup{}\n\twg.Add(2)\n\t// Server\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tvar (\n\t\t\tupgrader = &websocket.Upgrader{}\n\t\t\tstopChan = make(chan struct{})\n\t\t)\n\t\thttp.HandleFunc(\"/ws\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tdefer func() {\n\t\t\t\tclose(stopChan)\n\t\t\t}()\n\t\t\tupgrade, err := upgrader.Upgrade(w, r, nil)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfor {\n\t\t\t\tmsgType, msg, err := upgrade.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Println(\"connection closed,\", err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Println(msgType, string(msg))\n\t\t\t}\n\t\t})\n\t\tgo func() {\n\t\t\terr := http.ListenAndServe(\"localhost:8081\", nil)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalln(err)\n\t\t\t}\n\t\t}()\n\t\t<-stopChan\n\t}()\n\t// Dialer (Client)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tdial, _, err := websocket.DefaultDialer.Dial(\"ws://localhost:8081/ws\", nil)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\tdefer dial.Close()\n\t\terr = dial.WriteMessage(websocket.TextMessage, []byte(\"hello\"))\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\terr = dial.WriteMessage(websocket.TextMessage, []byte(\"world\"))\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t}()\n\twg.Wait()\n}\n// output\n// 2022/09/17 07:18:57 1 hello\n// 2022/09/17 07:18:57 1 world\n// 2022/09/17 07:18:57 connection closed, websocket: close 1006 (abnormal closure): unexpected EOF"
  },
  {
    "url": "https://stackoverflow.com/questions/73744504/not-able-to-access-gcp-secret-manager-from-standalone-go-application",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\tsecretmanager \"cloud.google.com/go/secretmanager/apiv1\"\n\tsecretmanagerpb \"google.golang.org/genproto/googleapis/cloud/secretmanager/v1\"\n)\nfunc main() {\n\tctx := context.Background()\n\tclient, err := secretmanager.NewClient(ctx)\n\tif err != nil {\n\t\t// stop your program from executing the next lines\n\t\tpanic(fmt.Errorf(\"failed to create secretmanager client: %v\", err))\n\t\t// you can also use return statement\n\t\t//\n\t\t// log.Println(fmt.Errorf(\"failed to create secretmanager client: %v\", err))\n\t\t// return\n\t}\n\tdefer client.Close()\n\tname := \"projects/485126440943/secrets/APIAdminServiceAccountLookupKey\"\n\t// Build the request.\n\treq := &secretmanagerpb.GetSecretRequest{\n\t\tName: name,\n\t}\n\t// Call the API.\n\tresult, err := client.GetSecret(ctx, req)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"failed to get secret: %v\", err))\n\t}\n\treplication := result.Replication.Replication\n\tfmt.Printf(\"Found secret %s with replication policy %s\\n\", result.Name, replication)\n\t//return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73696396/gcp-list-projects-wtih-golang-api",
    "body": "ORGANIZATION=[[YOUR-ORG]]\nPROJECT=[[YOUR-PROJECT]] # Service Accounts are owned by Projects\nACCOUNT=\"tester\"\n# Enable Cloud Resource Manager API in a Project\n# This Project will own the Service Account too\ngcloud services enable cloudresourcemanager.googleapis.com \\\n--project=${PROJECT}\n# Create the Service Account\ngcloud iam service-accounts create ${ACCOUNT} \\\n--project=${PROJECT}\nEMAIL=${ACCOUNT}@${PROJECT}.iam.gserviceaccount.com\n\n# Create a Service Account Key locally\n# For testing purposes only\ngcloud iam service-accounts keys create ${PWD}/${ACCOUNT}.json \\\n--iam-account=${EMAIL} \\\n--project=${PROJECT}\n# Ensure the Service Account can browse the Organization's resources\ngcloud organizations add-iam-policy-binding ${ORGANIZATION} \\\n--role=roles/browser \\\n--member=serviceAccount:${EMAIL}\n\nexport GOOGLE_APPLICATION_CREDENTIALS=${PWD}/${ACCOUNT}.json\nexport ORGANIZATION\ngo run ."
  },
  {
    "url": "https://stackoverflow.com/questions/73696396/gcp-list-projects-wtih-golang-api",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\tresourcemanager \"cloud.google.com/go/resourcemanager/apiv3\"\n\tresourcemanagerpb \"google.golang.org/genproto/googleapis/cloud/resourcemanager/v3\"\n\t\"google.golang.org/api/iterator\"\n)\nfunc main() {\n\torganization := os.Getenv(\"ORGANIZATION\")\n\tif organization == \"\" {\n\t\tlog.Fatalf(\"unable to obtain ORGANIZATION from the environment\")\n\t}\n\tctx := context.Background()\n\tc, err := resourcemanager.NewProjectsClient(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer c.Close()\n\trqst := &resourcemanagerpb.SearchProjectsRequest{\n\t\tQuery: fmt.Sprintf(\"parent:organizations/%s\", organization),\n\t}\n\tit := c.SearchProjects(ctx, rqst)\n\tfor {\n\t\tresp, err := it.Next()\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tlog.Println(resp.DisplayName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73590440/how-to-iterate-the-process-of-printing-multiple-values",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tvar name string\n\tvalue1 := map[string]string{\"name\": \"samename\", \"email\": \"email one\", \"role\": \"job role one\"}\n\tvalue2 := map[string]string{\"name\": \"samename\", \"email\": \"email two\", \"role\": \"job role two\"}\n\tvalues := []map[string]string{value1, value2}\n\tvar found bool\n\tfor {\n\t\tfmt.Printf(\"Enter your name: \")\n\t\tfmt.Scanln(&name)\n\t\tfmt.Println()\n\t\tfor _, value := range values {\n\t\t\tif value[\"name\"] == name {\n\t\t\t\tfound = true\n\t\t\t\tfor k, v := range value {\n\t\t\t\t\tfmt.Printf(\"Here is the %s: %s\\n\", k, v)\n\t\t\t\t}\n\t\t\t\tfmt.Println()\n\t\t\t}\n\t\t}\n\t\tif found {\n\t\t\tbreak\n\t\t} else {\n\t\t\tfmt.Println(\"Name is not found. Try again!\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73580340/whats-the-best-way-to-resume-goroutines-work",
    "body": "func main() {\n  structsToUpdate := getStructs() //some func to get my structs\n  communication := make(chan bool)\n  //the waitgroup used to block the goroutine\n  var resume sync.WaitGroup\n  resume.Add(1) //The waitgroup will be blocked !!!\n  success := 0\n  for _,structToUpdate := range structsToUpdates {\n    go updateStruct(&structToUpdate,communication,&resume)\n  }\n  //waiting for all goroutines do their first part of job\n  for i:=0; i<len(structsToUpdates); i++ {\n    res := <- communication\n    if res {\n      success++\n    }\n  }\n  //all structs should have done with first part now... Resume their job !\n  resume.Done()\n  //receive second part job\n  for success != 0 {\n    <-communication\n    success--\n  }\n}\nfunc updateStruct(s *StructToUpdate, c chan bool, resume *sync.WaitGroup) {\n  //First part of the job\n  result, err := performSomeRequest(s)\n  if err != nil  {\n    //something wrong happened\n    c <- false\n    return\n  }\n  informGlobalWatcherOfResult(result)\n  c <- true //I did my job\n  //wait for all goroutines do their first part job\n  resume.Wait()\n  //here the main program 'Done()' the WaitGroup so it resumes the execution of the goroutine\n  updateOrNotStruct() //Some operations...\n  c <- true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73563697/how-can-i-concurrently-download-files-limited-to-3-at-the-same-time",
    "body": "package main\nimport (\n    \"fmt\"\n    \"time\"\n)\nfunc worker(id int, jobs <-chan URL, results chan<- int) {\n    for j := range jobs {\n        bytes, err := getXML(j.Loc)\n        results <- 0 // flag that job is finished\n    }\n}\nfunc main() {\n    //\n      // Get URLSET HERE\n    //\n    numJobs := len(urlSet.URLs)\n    jobs := make(chan URL, numJobs)\n    results := make(chan int, numJobs)\n    for w := 1; w <= 3; w++ { // only 3 workers, all blocked initially\n        go worker(w, jobs, results)\n    }\n    // continually feed in urls to workers\n    for _, url := range urlSet.URLs {\n        jobs <- url\n    }\n    close(jobs) // no more urls, so tell workers to stop their loop\n    // needed if you want to make sure that workers don't block forever on writing results, remove both this loop and workers writing results if you don't need output from workers\n    for a := 1; a <= numJobs; a++ {\n        <-results\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73563023/how-to-stop-and-start-gin-server-multiple-times-in-one-run",
    "body": "func serve() *http.Server {\n\trouter := gin.Default()\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\ttime.Sleep(5 * time.Second)\n\t\tc.String(http.StatusOK, \"Welcome Gin Server\\n\")\n\t})\n\tsrv := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: router,\n\t}\n\tgo func() {\n\t\t// service connections\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tlog.Printf(\"listen: %s\\n\", err)\n\t\t}\n\t}()\n\treturn srv\n}\nfunc main() {\n\t{\n\t\tsrv := serve()\n\t\ttime.Sleep(time.Second * 3)\n\t\tfmt.Println(\"down\", srv.Shutdown(context.Background()))\n\t}\n\t{\n\t\ttime.Sleep(time.Second * 3)\n\t\tfmt.Println(\"up\", serve())\n\t}\n\tselect {}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73494600/validation-number-in-gin-golang",
    "body": "...\nerr := ctx.ShouldBindJSON(&bookRequest)\nif err != nil {\n    if vals, ok := err.(validator.ValidationErrors); ok {\n        // do for loop from vals\n        ...\n        ctx.JSON(http.StatusBadRequest, web.WebResponse{\n            Code:   http.StatusBadRequest,\n            Status: \"BAD REQUEST\",\n            Data:   error_request,\n        })\n        return\n    }\n    ctx.JSON(http.StatusInternalServerError, web.WebResponse{\n        Code:   http.StatusInternalServerError,\n        Status: \"Internal Server Error\",\n        Data:   err,\n    })\n    return\n}\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/73494600/validation-number-in-gin-golang",
    "body": "func (br *BookRequest) UnmarshalJSON(b []byte) error {\n\t// TODO: remove binding tag\n\ttype helperBookRequest struct {\n\t\tTitle       string `json:\"title\" binding:\"required\"`\n\t\tDescription string `json:\"description\" binding:\"required\"`\n\t\tPrice       any    `json:\"price\" binding:\"required,numeric,gte=0\"` // look at this type is any or interface{}\n\t\tRating      int    `json:\"rating\" binding:\"required,numeric\"`\n\t}\n\tvar hbr helperBookRequest\n\terr := json.Unmarshal(b, &hbr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbr.Title = hbr.Title\n\tbr.Description = hbr.Description\n\tbr.Rating = hbr.Rating\n\tswitch hbr.Price.(type) {\n\tcase float64:\n\t\tbr.Price = strconv.Itoa(int(hbr.Price.(float64)))\n\tcase string:\n\t\tbr.Price = hbr.Price.(string)\n\tdefault:\n\t\treturn errors.New(\"invalid type\")\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73404279/how-to-navigate-page-from-string-html-golang-in-chromedp",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"time\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"<h1>Hello World</h1>\"))\n\t}))\n\tdefer s.Close()\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.Flag(\"headless\", false),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tctx, cancel = chromedp.NewContext(ctx)\n\tdefer cancel()\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(s.URL),\n\t\tchromedp.Sleep(10*time.Second),\n\t); err != nil {\n\t\tlog.Print(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73404279/how-to-navigate-page-from-string-html-golang-in-chromedp",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/chromedp/cdproto/page\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.Flag(\"headless\", false),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tctx, cancel = chromedp.NewContext(ctx)\n\tdefer cancel()\n\thtml := `<h1>Hello World</h1>`\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"about:blank\"),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tframeTree, err := page.GetFrameTree().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn page.SetDocumentContent(frameTree.Frame.ID, html).Do(ctx)\n\t\t}),\n\t\tchromedp.Sleep(10*time.Second),\n\t); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73377565/dynamically-handling-the-responses",
    "body": "type response struct {\n\tError responseError\n}\ntype responseError struct {\n\tMessage string\n}\nfunc (e *responseError) UnmarshalJSON(data []byte) error {\n\tif len(data) == 0 || string(data) == `null` { // nothing?\n\t\treturn nil\n\t}\n\tif data[0] == '\"' && data[len(data)-1] == '\"' { // string?\n\t\treturn json.Unmarshal(data, &e.Message)\n\t}\n    // avoid infinite recursion by declaring a new type\n    // with same structure as responseError but no methods.\n\ttype E responseError\n\treturn json.Unmarshal(data, (*E)(e))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73331215/how-to-encrypt-a-file-so-that-openssl-can-decrypt-it-without-providing-the-iv-ma",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"crypto/sha256\"\n\t\"io\"\n\t\"os\"\n\t\"golang.org/x/crypto/pbkdf2\"\n)\nfunc main() {\n\tkeySize := 32;\n    // its only for demonstration purpose\n\tpassword := []byte(\"TESTPASSWORD1234TESTPASSWORD1234\");\n\tbReader, err := os.Open(\"doc.docx\")\n\tdefer bReader.Close();\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsalt := make([]byte, 8)\n\tif _, err := io.ReadFull(rand.Reader, salt[:]); err != nil {\n\t\tpanic(err)\n\t}\n\tcomputed := pbkdf2.Key(password, salt, 10000, keySize + aes.BlockSize , sha256.New)\n\tkey := computed[:keySize]\n\tiv := computed[keySize:]\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tstream := cipher.NewOFB(block, iv)\n\tbWriter, err := os.Create(\"doc-encrypted.docx\")\n\tif err != nil {\n\t\tpanic(err)\n \t}\n\tdefer bWriter.Close()\n\tprefix := []byte(\"Salted__\");\n\theader := append(prefix[:], salt...);\n  bWriter.Write(header)\n\tsWriter := &cipher.StreamWriter{S: stream, W: bWriter}\n\tif _, err := io.Copy(sWriter, bReader); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73297061/how-to-convert-a-flat-list-of-objects-with-parent-field-into-a-nested-tree-like",
    "body": "func list2tree(employees []EmployeeNode) EmployeeNode {\n  // a map, to keep track of each individual subtree.\n  // Using a pointer to the EmployeeInfo struct so as to ensure that there's\n  // only a single copy of each struct.\n  subtrees := map[string]*EmployeeNode{}\n\n  // populate the map: every node is the root of its own subtree\n  for _, emp := range employees {\n    subtrees[emp.ReportTo] = &emp\n  }\n\n  // iterate over the list of employees\n  for _, emp := range employees {\n\n    // if this is not the root node, she reports to somebody\n    if emp.ReportTo != \"\" {\n\n      // look up their immediate manager\n      subtree := subtrees[emp.ReportTo]\n\n      // add them as a direct report\n      subtree.Children = append(subtree.Children, emp)\n\n    }\n  }\n  // At the end of the day, now, the tree is fully populated\n  // return the root node for the entire tree\n  return *subtrees[\"\"]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73259202/how-to-load-extension-for-chrome-in-remote-selenium-using-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/tebeka/selenium\"\n\t\"github.com/tebeka/selenium/chrome\"\n)\nconst (\n\tport = 8080\n)\nfunc main() {\n\topts := []selenium.ServiceOption{\n\t\t// Enable fake XWindow session.\n\t\t// selenium.StartFrameBuffer(),\n\t\tselenium.Output(os.Stderr), // Output debug information to STDERR\n\t}\n\t_, err := selenium.NewChromeDriverService(\"../your_driver_path/chromedriver.exe\", port, opts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tcaps := selenium.Capabilities{\"browserName\": \"chrome\"}\n\tvar cap_ext chrome.Capabilities\n\t// add your extention by crx file\n\tcap_ext.AddExtension(\"./modheader.crx\")\n\tcaps.AddChrome(cap_ext)\n\twd, err := selenium.NewRemote(caps, fmt.Sprintf(\"http://127.0.0.1:%d/wd/hub\", port))\n\t// Using api to setting modheader\n\t// add header\n\twd.Get(\"https://webdriver.modheader.com/add?test=ModHeader%20Test\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73148024/regex-repeated-capturing-group-captures-the-last-iteration-but-i-need-all",
    "body": "type javaString struct {\n\tvalue  string\n\tlineno int\n}\n\t// First we find all string literals\n\tvar placeholder = \"JSTR\"\n\tvar reJavaStringLiteral = regexp.MustCompile(`(?m)(\"(?:\\\\\"|[^\"])*\")`)\n\tjavaStringLiterals := make([]javaString, 0)\n\tfor pos, strMatch := range reJavaStringLiteral.FindAllStringSubmatch(strContent, -1) {\n\t\tpos = strings.Index(strContent, strMatch[0])\n\t\thead := strContent[0:pos]\n\t\tlineno := strings.Count(head, \"\\n\") + 1\n\t\tjavaStringLiterals = append(javaStringLiterals, javaString{value: strMatch[1], lineno: lineno})\n\t}\n\t// Next, we replace all string literals with placeholders.\n\tfor i, jstr := range javaStringLiterals {\n\t\tstrContent = strings.Replace(strContent, jstr.value, fmt.Sprintf(\"%v(%v)\", placeholder, i), 1)\n\t}\n    // Now the transformed text does not contain any string literals."
  },
  {
    "url": "https://stackoverflow.com/questions/73115743/communicate-with-nsq-over-a-websocket",
    "body": "// Create the default config\nwsqConfig := wsq.NewConfig()\n// Configure Websocket CheckOrigin callback to bypass any checks.\n// Don't do it in production!\nwsqConfig.SetWSCheckOrigin(wsq.CheckOriginBypass)\n// Create the server instance specifying message and user types to use.\nserver := wsq.NewServer[message, *wsq.AnonymousUser](\n\t// Address (optional) and port to listen on\n\t\":9980\",\n\t// WSQ Config instance\n\twsqConfig,\n\t// NSQ Config instance\n\tnsq.NewConfig(),\n\t// WSQ Transformer struct providing encoders/decoders for NSQ and Websocket sides respectivly\n\t&wsq.Transformer[message]{NSQEnDec: &nsqEnDec{}, WSEnDec: &wsEnDec{}},\n\t// Authentication controller\n\t&wsq.NoAuthentication,\n)\nserver.Run()"
  },
  {
    "url": "https://stackoverflow.com/questions/72902665/go-calculate-the-cidr-below-one-bit-of-the-cidr-provided",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/big\"\n\t\"net/netip\"\n)\nfunc main() {\n\tp := netip.MustParsePrefix(\"192.168.0.0/16\")\n\tlo, hi := split(p)\n\tfmt.Println(lo, hi) // 192.168.0.0/17 192.168.128.0/17\n}\nfunc split(p netip.Prefix) (lo, hi netip.Prefix) {\n\tp = p.Masked()\n\tlo, _ = p.Addr().Prefix(p.Bits() + 1)\n\tdelta := big.NewInt(1)\n\tdelta.Lsh(delta, uint(lo.Addr().BitLen()-lo.Bits()))\n\tn := new(big.Int).SetBytes(lo.Addr().AsSlice())\n\tn.Add(n, delta)\n\thiIP, _ := netip.AddrFromSlice(n.Bytes())\n\thi = netip.PrefixFrom(hiIP, lo.Bits())\n\treturn lo, hi\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72882193/path-parameters-with-arbitrary-depth-in-gorilla-mux",
    "body": "func main() {\n    r := mux.NewRouter()\n    sub := r.HandleFunc(\"/api\", func(w http.ResponseWriter, r *http.Request) {\n        q := r.URL.Query()\n        depthPath := q.Get(\"depthPath\")\n        depthPathArr := strings.Split(depthPath, \"-\")\n        // depthPath []string{1, 2, 3, 4, 5}\n        // write function that follow the depthPath\n    })\n    srv := &http.Server{\n        Handler: r,\n        Addr: \"localhost:7890\",\n        WriteTimeout: 15 * time.Second,\n        ReadTimeout: 15 * time.Second,\n    }\n    log.Fatal(srv.ListenAndServe())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72674051/how-to-build-a-structure-tree-from-a-slice-of-struct",
    "body": "package main\nimport \"log\"\ntype Team struct {\n\tid    string\n\tname  string\n\tlevel int64\n}\ntype TeamTree struct {\n\tteams    []Team\n\tchildren []TeamTree\n}\nfunc main() {\n\tfirstChild := TeamTree{teams: []Team{{id: \"firstChildId\", name: \"First\", level: 10}}, children: make([]TeamTree, 0)}\n\tsecondChild := TeamTree{teams: []Team{{id: \"secondChildId\", name: \"Second\", level: 20}}, children: make([]TeamTree, 0)}\n\tthirdChild := TeamTree{teams: []Team{{id: \"thirdChildId\", name: \"Third\", level: 30}}, children: make([]TeamTree, 0)}\n\trootTeamTree := TeamTree{teams: []Team{{id: \"rootId\", name: \"Root\", level: 100}}, children: []TeamTree{firstChild, secondChild, thirdChild}}\n\tlog.Println(\"What's the second child's level:\", rootTeamTree.children[1].teams[0].level)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72627512/verify-auth0-id-token-which-secret-do-i-need-to-use",
    "body": "package auth0\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/lestrrat-go/jwx/jwk\"\n\t\"github.com/lestrrat-go/jwx/jwt\"\n\tlog \"github.com/sirupsen/logrus\"\n\t\"net/http\"\n)\nvar (\n\tErrInvalidToken = fmt.Errorf(\"invalid token\")\n\tErrNoToken      = fmt.Errorf(\"no token found\")\n)\ntype middleware struct {\n\tkeySet   jwk.Set\n\taudience string\n\tissuer   string\n}\ntype AuthUser struct {\n\tID    string `json:\"id\"`\n\tEmail string `json:\"email\"`\n}\ntype userKeyType string\nconst userKey = userKeyType(\"user\")\ntype Middleware interface {\n\tAuthenticateUser(next http.Handler) http.Handler\n}\nvar _ Middleware = &middleware{}\nfunc NewMiddleware(issuer string, audience string) (middleware, error) {\n\t// TODO implement auto rotation/refresh\n\tkeySet, err := jwk.Fetch(context.Background(), fmt.Sprintf(\"%s.well-known/jwks.json\", issuer))\n\tif err != nil {\n\t\treturn middleware{}, err\n\t}\n\treturn middleware{\n\t\tkeySet:   keySet,\n\t\taudience: audience,\n\t\tissuer:   issuer,\n\t}, nil\n}\nfunc (m *middleware) AuthenticateUser(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tauthHeader := r.Header.Get(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\tlog.Debug(\"no authorization header found\")\n\t\t\thttp.Error(w, ErrNoToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\tbearerToken := authHeader[7:]\n\t\tif bearerToken == \"\" {\n\t\t\tlog.Error(\"no bearer token found\")\n\t\t\thttp.Error(w, ErrNoToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\ttoken, err := jwt.Parse([]byte(bearerToken), jwt.WithKeySet(m.keySet))\n\t\tif err != nil {\n\t\t\tlog.Error(\"error parsing token\")\n\t\t\thttp.Error(w, ErrInvalidToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\tif err := jwt.Validate(token,\n\t\t\tjwt.WithAudience(m.audience),\n\t\t\tjwt.WithIssuer(m.issuer)); err != nil {\n\t\t\tlog.Error(\"error validating token\")\n\t\t\thttp.Error(w, ErrInvalidToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\temailValue, ok := token.Get(\"email\")\n\t\tif !ok {\n\t\t\tlog.Error(\"error no email found\")\n\t\t\thttp.Error(w, ErrInvalidToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\temail, ok := emailValue.(string)\n\t\tif !ok {\n\t\t\tlog.Error(\"error email not a string\")\n\t\t\thttp.Error(w, ErrInvalidToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\tif token.Subject() == \"\" && email == \"\" {\n\t\t\tlog.Error(\"error no subject or email found\")\n\t\t\thttp.Error(w, ErrInvalidToken.Error(), http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\tctx := context.WithValue(r.Context(), userKey, AuthUser{\n\t\t\tID:    token.Subject(),\n\t\t\tEmail: email,\n\t\t})\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\nfunc GetUserFromContext(ctx context.Context) (AuthUser, error) {\n\tuser, ok := ctx.Value(userKey).(AuthUser)\n\tif !ok {\n\t\treturn AuthUser{}, fmt.Errorf(\"could not get user from context\")\n\t}\n\treturn user, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72596134/how-to-server-static-files-with-virtual-hosts-functioality-in-go",
    "body": "package main\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n)\n//go:embed *.go\nvar f embed.FS\nfunc main() {\n\t// embed.Fs defaule modtime use now or env value.\n\tnow := time.Now()\n\t// use mapping host to http.FileSystem\n\tvhosts := make(map[string]http.FileSystem)\n\tvhosts[\"qa.example.com\"] = http.FS(f)    // from embed.FS\n\tvhosts[\"my.example.com\"] = http.Dir(\".\") // from http.Dir\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, world!\")\n\t})\n\thttp.HandleFunc(\"/static/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// find host\n\t\tfs, ok := vhosts[r.Host]\n\t\tif !ok {\n\t\t\tw.WriteHeader(404)\n\t\t\tw.Write([]byte(\"404 not found vhost\"))\n\t\t\treturn\n\t\t}\n\t\t// open file from http.FileSystem\n\t\tfile, err := fs.Open(strings.TrimPrefix(r.URL.Path, \"/static/\"))\n\t\tif err != nil {\n\t\t\t// reference go1.18.3/net/http/fs.go toHTTPError function hander file error.\n\t\t\tw.Write([]byte(\"check err is 403 or 404 or 500\"))\n\t\t\treturn\n\t\t}\n\t\tstat, _ := file.Stat()\n\t\t// fix embed modtime is zero.\n\t\tmodtime := stat.ModTime()\n\t\tif modtime.IsZero() {\n\t\t\tmodtime = now\n\t\t}\n\t\t// response\n\t\thttp.ServeContent(w, r, stat.Name(), modtime, file)\n\t})\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72586157/goroutine-not-seeing-context-cancel",
    "body": "ctx := context.Background()\nctx, cancel := context.WithCancel(ctx)\ndefer cancel()\ndone := make(chan os.Signal, 1)\nsignal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\n// \"golang.org/x/sync/errgroup\"\nwg, ctx := errgroup.WithContext(ctx)\nwg.Go(func() error {\n\treturn eng.Watcher(ctx, wg)\n})\nwg.Go(func() error {\n\treturn eng.Suspender(ctx, wg)\n})\nwg.Go(func() error {\n\tdefer cancel()\n\t<-done\n\treturn nil\n})\nerr := wg.Wait()\nif err != nil {\n\tlog.Print(err)\n}\nlog.Print(\"receive shutdown\")\nlog.Print(\"controller exited properly\")"
  },
  {
    "url": "https://stackoverflow.com/questions/72289400/trying-to-convert-image-on-demand-in-memory-and-return-it-converted",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n    \"strconv\"\n\t\"github.com/sunshineplan/imgconv\"\n)\nvar client = http.Client{\n\tTransport: cloneTransport(),\n}\nfunc main() {\n\timageURL := ImageURL(\"https://go.dev/blog/go-brand/Go-Logo/JPG/Go-Logo_Blue.jpg\")\n\thttp.Handle(\"/logos/golang.png\", imageURL)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\ntype ImageURL string\nfunc (imageURL ImageURL) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tif req.Method != http.MethodGet {\n\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tres, err := client.Get(string(imageURL))\n\tif err != nil {\n\t\tlog.Printf(\"fetch %q image: %v\", imageURL, err)\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tif res.StatusCode != http.StatusOK {\n\t\tlog.Printf(\"fetch %q image: %s [%d]\", imageURL, res.Status, res.StatusCode)\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tbuffer := new(bytes.Buffer)\n\terr = convert(buffer, res.Body)\n\tdefer res.Body.Close()\n\tif err != nil {\n\t\tlog.Printf(\"convert %q image: %v\", imageURL, err)\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"image/png\")\n    w.Header().Set(\"Content-Length\", strconv.FormatInt(int64(buffer.Len()), 10))\n\tw.WriteHeader(http.StatusOK)\n\tif _, err = buffer.WriteTo(w); err != nil {\n\t\tlog.Printf(\"write data: %v\", err)\n\t}\n}\nfunc convert(w io.Writer, r io.Reader) error {\n\tsrcImage, err := imgconv.Decode(r)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"decode image: %w\", err)\n\t}\n\timg := imgconv.Resize(srcImage, imgconv.ResizeOption{Width: 128, Height: 128})\n\terr = imgconv.Write(w, img, imgconv.FormatOption{Format: imgconv.PNG})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"encode image: %w\", err)\n\t}\n\treturn nil\n}\nfunc cloneTransport() *http.Transport {\n\ttransport := http.DefaultTransport.(*http.Transport).Clone()\n\ttransport.TLSClientConfig = &tls.Config{\n\t\tInsecureSkipVerify: true,\n\t}\n\treturn transport\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71899763/python-like-nested-dictionary-in-go-lang",
    "body": "func generateChart() map[string]map[string]map[string]string {\n\tvar outcome_chart = map[string]map[string]map[string]string{}\n\tfor _, a := range A_LIST {\n\t\tfor _, b := range B_LIST {\n\t\t\tfor _, c := range C_LIST {\n\t\t\t\tif _, ok := outcome_chart[a]; !ok {\n\t\t\t\t\toutcome_chart[a] = map[string]map[string]string{}\n\t\t\t\t}\n\t\t\t\tif _, ok := outcome_chart[a][b]; !ok {\n\t\t\t\t\toutcome_chart[a][b] = map[string]string{}\n\t\t\t\t}\n\t\t\t\tresult := \"some string from external source, would be different on each request\"\n\t\t\t\toutcome_chart[a][b][c] = result\n\t\t\t}\n\t\t}\n\t}\n\treturn outcome_chart\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71899763/python-like-nested-dictionary-in-go-lang",
    "body": "func generateChart() map[string]map[string]map[string]string {\n\tvar outcome_chart = map[string]map[string]map[string]string{}\n\tfor _, a := range A_LIST {\n\t\tif _, ok := outcome_chart[a]; !ok {\n\t\t\toutcome_chart[a] = map[string]map[string]string{}\n\t\t}\n\t\tfor _, b := range B_LIST {\n\t\t\tif _, ok := outcome_chart[a][b]; !ok {\n\t\t\t\toutcome_chart[a][b] = map[string]string{}\n\t\t\t}\n\t\t\tfor _, c := range C_LIST {\n\t\t\t\tresult := \"some string from external source, would be different on each request\"\n\t\t\t\toutcome_chart[a][b][c] = result\n\t\t\t}\n\t\t}\n\t}\n\treturn outcome_chart\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71899763/python-like-nested-dictionary-in-go-lang",
    "body": "type Chart struct {\n\tM map[string]*Chart\n\tV string\n}\nfunc newChart() *Chart {\n\treturn &Chart{M: make(map[string]*Chart)}\n}\nfunc (c *Chart) addIfEmpty(key string) *Chart {\n\tif _, ok := c.M[key]; !ok {\n\t\tc.M[key] = newChart()\n\t}\n\treturn c.M[key]\n}\nfunc generateChart() *Chart {\n\tvar chart = newChart()\n\tfor _, a := range A_LIST {\n\t\taChart := chart.addIfEmpty(a)\n\t\tfor _, b := range B_LIST {\n\t\t\tbChart := aChart.addIfEmpty(b)\n\t\t\tfor _, c := range C_LIST {\n\t\t\t\tresult := \"some string from external source, would be different on each request\"\n\t\t\t\tbChart.addIfEmpty(c).V = result\n\t\t\t}\n\t\t}\n\t}\n\treturn chart\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71825024/sending-an-email-with-raw-content-using-aws-pinpoint-and-go-returns-403",
    "body": "func generateRawEmailContent(subject, to, from, HTMLBody string, attachments *[]EmailAttachment) []byte {\n    buf := bytes.NewBuffer(nil)\n    // Creating headers by gluing together strings is precarious.\n    // I'm sure there must be a better way.\n    buf.WriteString(fmt.Sprintf(\"Subject: %s\\n\", subject))\n    buf.WriteString(fmt.Sprintf(\"To: %s\\n\", to))\n    // Remove spurious newline\n    buf.WriteString(fmt.Sprintf(\"From: %s\\n\", from))\n    writer := multipart.NewWriter(buf)\n    boundary := writer.Boundary()\n    buf.WriteString(fmt.Sprintf(\"MIME-Version: 1.0\\n\", boundary))\n    buf.WriteString(fmt.Sprintf(\"Content-Type: multipart/mixed; boundary=%s\\n\", boundary))\n    // End of headers\n    buf.WriteString(\"\\n\")\n    buf.WriteString(fmt.Sprintf(\"--%s\\n\", boundary))\n    buf.WriteString(\"Content-Type: text/html; charset=\\\"UTF-8\\\";\\n\\n\")\n    buf.WriteString(HTMLBody)\n    for _, attachment := range *attachments {\n        buf.WriteString(fmt.Sprintf(\"\\n\\n--%s\\n\", boundary))\n        buf.WriteString(fmt.Sprintf(\"Content-Type: %s\\n\", http.DetectContentType(attachment.Data)))\n        buf.WriteString(\"Content-Transfer-Encoding: base64\\n\")\n        buf.WriteString(fmt.Sprintf(\"Content-Disposition: attachment; filename=%s\\n\", attachment.FileName))\n        b := make([]byte, base64.StdEncoding.EncodedLen(len(attachment.Data)))\n        base64.StdEncoding.Encode(b, attachment.Data)\n        buf.Write(b)\n        // Don't add a second boundary here\n        buf.WriteString(\"\\n\")\n    }\n    // Final terminating boundary, notice -- after\n    buf.WriteString(fmt.Sprintf(\"\\n--%s--\\n\", boundary))\n    log.Println(string(buf.Bytes()))\n    return buf.Bytes()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71746994/how-to-use-io-reader-client",
    "body": "ctx := context.Background()\ncid, err := client.ContainerCreate(\n  ctx,\n  &container.Config{\n    Image: \"docker.io/library/busybox:latest\",\n    Cmd: strslice.StrSlice{\"cat\", \"/host/etc/shadow\"},\n  },\n  &container.HostConfig{\n    Mounts: []mount.Mount{\n      {\n        Type: mount.TypeBind,\n        Source: \"/\",\n        Target: \"/host\",\n      },\n    },\n  },\n  nil,\n  nil,\n  \"\"\n)\nif err != nil {\n  return err\n}\ndefer client.ContainerRemove(ctx, cid.ID, &types.ContainerRemoveOptions{})\nrawLogs, err := client.ContainerLogs(\n  ctx,\n  cid.ID,\n  types.ContainerLogsOptions{ShowStdout: true},\n)\nif err != nil {\n  return err\n}\ndefer rawLogs.close()\ngo func() {\n  of, err := os.Create(\"/tmp/host-shadow\")\n  if err != nil {\n    panic(err)\n  }\n  defer of.Close()\n  _ = stdcopy.StdCopy(of, io.Discard, rawLogs)\n}()\ndone, cerr := client.ContainerWait(ctx, cid.ID, container. WaitConditionNotRunning)\nfor {\n  select {\n    case err := <-cerr:\n      return err\n    case waited := <-done:\n      if waited.Error != nil {\n        return errors.New(waited.Error.Message)\n      } else if waited.StatusCode != 0 {\n        return fmt.Errorf(\"cat container exited with status code %v\", waited.StatusCode)\n      } else {\n        return nil\n      }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71739971/unmarshalling-a-bson-d-object-golang",
    "body": "func GetResourceData(ctx context.Context, CL *mongo.Client, Resource string) error {\n\tourDatabase := CL.Database(\"Event_Database\")\n\teventsCollection := ourDatabase.Collection(\"Events\")\n\topts := options.Find()\n\topts.SetSort(bson.D{{\"Date\", -1}, {\"Time\", -1}})\n\tfilterCursor, err := eventsCollection.Find(\n\t\tctx,\n\t\tbson.M{\"Resource\": Resource},\n\t\topts)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif filterCursor.Next(ctx) {\n\t\tvar eventsFiltered []bson.M\n\t\tif err = filterCursor.All(ctx, &eventsFiltered); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\t// If you need ordered print, uncomment the following lines and comment out following uncommented for loop\n\t\t//        for _, event := range eventsFiltered {\n\t\t//            for _, keyValPair := range event{\n\t\t//                fmt.Printf(\"key is %s; val is %v\", keyValPair.Key, keyValPair.Value)\n\t\t//            }\n\t\t//        }\n\t\tfor _, event := range eventsFiltered {\n\t\t\tfor key, val := range event {\n\t\t\t\tfmt.Printf(\"key is %s; val is %v\", key, val)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71727437/processing-dynamodb-items-in-go-lambda",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n)\ntype Product struct {\n\tProductUUID string `json:\"productUUID\"`\n\tName        string `json:\"name\"`\n\tDescription string `json:\"description\"`\n\tBrand       string `json:\"brand\"`\n\tPrice       string `json:\"price\"`\n\tCategory    string `json:\"category\"`\n\tDateAdded   string `json:\"dateAdded\"`\n}\nfunc handleRequest() (events.APIGatewayProxyResponse, error) {\n\tproducts := []Product{}\n\tcfg, err := config.LoadDefaultConfig(context.TODO(), func(o *config.LoadOptions) error {\n\t\to.Region = \"us-east-2\"\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsvc := dynamodb.NewFromConfig(cfg)\n\tout, err := svc.Scan(context.TODO(), &dynamodb.ScanInput{\n\t\tTableName: aws.String(\"products\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = attributevalue.UnmarshalListOfMaps(out.Items, &products)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"failed to unmarshal Dynamodb Scan Items, %v\", err))\n\t}\n\tproductsJson, err := json.Marshal(products)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tresp := events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tIsBase64Encoded: false,\n\t\tBody:            string(productsJson),\n\t\tHeaders: map[string]string{\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t}\n\treturn resp, nil\n}\nfunc main() {\n\tlambda.Start(handleRequest)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71667203/update-specific-yaml-property",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/gardener/gardener/pkg/apis/core/v1beta1\"\n\t\"io/ioutil\"\n\t\"k8s.io/apimachinery/pkg/runtime\"\n\t\"k8s.io/apimachinery/pkg/util/yaml\"\n)\ntype InfraConfig struct {\n\tAPIVersion string `json:\"apiVersion\"`\n\tKind       string `json:\"kind\"`\n\tNetworks   struct {\n\t\tCloudNAT struct {\n\t\t\tMinPortsPerVM int `json:\"minPortsPerVM\"`\n\t\t\tNatIPNames    []struct {\n\t\t\t\tName string `json:\"name\"`\n\t\t\t} `json:\"natIPNames\"`\n\t\t} `json:\"cloudNAT\"`\n\t} `json:\"networks\"`\n}\nfunc main() {\n\tshoot, e := parseShoot(\"test.yaml\")\n\tif e != nil {\n\t\tfmt.Println(e)\n\t}\n\tvar existingInfraConfig InfraConfig\n\terr := json.Unmarshal(shoot.Spec.Provider.InfrastructureConfig.Raw, &existingInfraConfig)\n\tfmt.Println(err)\n\texistingInfraConfig.Networks.CloudNAT.NatIPNames[0].Name = \"test2\"\n\tbyteData, _ := json.Marshal(existingInfraConfig)\n\tshoot.Spec.Provider.InfrastructureConfig = &runtime.RawExtension{\n\t\tRaw:    byteData,\n\t\tObject: nil,\n\t}\n\tfmt.Println(string(shoot.Spec.Provider.InfrastructureConfig.Raw))\n}\nfunc parseShoot(path string) (*v1beta1.Shoot, error) {\n\tvar shootSpec *v1beta1.Shoot\n\tbytes, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = yaml.Unmarshal(bytes, &shootSpec)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn shootSpec, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71553777/k8s-rolling-update-algorithm",
    "body": "// rolloutRolling implements the logic for rolling a new replica set.\nfunc (dc *DeploymentController) rolloutRolling(ctx context.Context, d *apps.Deployment, rsList []*apps.ReplicaSet) error {\n\tnewRS, oldRSs, err := dc.getAllReplicaSetsAndSyncRevision(ctx, d, rsList, true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tallRSs := append(oldRSs, newRS)\n\t// Scale up, if we can.\n\tscaledUp, err := dc.reconcileNewReplicaSet(ctx, allRSs, newRS, d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif scaledUp {\n\t\t// Update DeploymentStatus\n\t\treturn dc.syncRolloutStatus(ctx, allRSs, newRS, d)\n\t}\n\t// Scale down, if we can.\n\tscaledDown, err := dc.reconcileOldReplicaSets(ctx, allRSs, controller.FilterActiveReplicaSets(oldRSs), newRS, d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif scaledDown {\n\t\t// Update DeploymentStatus\n\t\treturn dc.syncRolloutStatus(ctx, allRSs, newRS, d)\n\t}\n\tif deploymentutil.DeploymentComplete(d, &d.Status) {\n\t\tif err := dc.cleanupDeployment(ctx, oldRSs, d); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\t// Sync deployment status\n\treturn dc.syncRolloutStatus(ctx, allRSs, newRS, d)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71511901/priority-on-select-cases-with-channel",
    "body": "func report() {\n\tticker := time.NewTicker(timeConfig)\n\tdefer ticker.Stop()\n\tsigC := make(chan os.Signal, 1)\n\tsignal.Notify(sigC, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT, os.Interrupt)\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tgo func() {\n\t\t\t\tconnection = connectionInit()\n\t\t\t\ttagValues, err := fetchLatestTags()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif len(tagValues) >= threshold {\n\t\t\t\t\tmetrics, err := fetchMetrics(tagValues)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tif stdout {\n\t\t\t\t\t\terr = locally(metrics)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr = sendMail(metrics)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconnection.Close()\n\t\t\t}()\n\t\tcase <-sigC:\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71431198/write-health-check-endpoints-if-the-service-has-no-http-server",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/go-ping/ping\"\n)\nfunc main() {\n\tt := time.NewTicker(5 * time.Second)\n\tfor {\n\t\tselect {\n\t\tcase <-t.C:\n\t\t\terr := checkService(\"google\", \"216.239.38.120\")\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"notif to email, error:\", err.Error())\n\t\t\t\ttime.Sleep(1 * time.Hour) // to not spam email\n\t\t\t}\n\t\t}\n\t}\n}\nfunc checkService(name string, ip string) error {\n\tp, err := ping.NewPinger(ip)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.Count = 3\n\tp.Timeout = 5 * time.Second\n\terr = p.Run()\n\tif err != nil {\n\t\treturn err\n\t}\n\tstats := p.Statistics()\n\tif stats.PacketLoss == 100 {\n\t\treturn fmt.Errorf(\"service %s down\", name)\n\t}\n\tfmt.Printf(\"stats: %#v\\n\", stats)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71372971/how-to-make-a-grid-fyne-golang",
    "body": "package main\nimport (\n\t\"fyne.io/fyne/v2\"\n\t\"fyne.io/fyne/v2/app\"\n\t\"fyne.io/fyne/v2/container\"\n\t\"fyne.io/fyne/v2/widget\"\n)\nfunc main() {\n\ta := app.New()\n\tw := a.NewWindow(\"Fyne Demo\")\n\tw.SetMaster()\n\tcontent := container.NewMax()\n\ttitle := widget.NewLabel(\"Component name\")\n\tintro := widget.NewLabel(\"An introduction would probably go\\nhere, as well as a\")\n\tintro.Wrapping = fyne.TextWrapWord\n\ttutorial := container.NewBorder(\n\t\tcontainer.NewVBox(title, widget.NewSeparator(), intro), nil, nil, nil, content)\n\tsplit := container.NewHSplit(makeNav(), tutorial)\n\tsplit.Offset = 0\n\tw.SetContent(split)\n\tw.Resize(fyne.NewSize(640, 460))\n\tw.ShowAndRun()\n}\nfunc makeNav() fyne.CanvasObject {\n\ttree := widget.NewTreeWithStrings(menuItems)\n\treturn container.NewBorder(nil, nil, nil, nil, tree)\n}\nvar menuItems = map[string][]string{\n\t\"\":            {\"welcome\", \"collections\", \"advanced\"},\n\t\"collections\": {\"list\", \"table\"},\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71331915/how-i-can-put-a-comma-a-the-end-every-time-i-write-a-file",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n)\nvar (\n\tm1 = json.RawMessage(`[{\"name\":\"bob\",\"title\":\"Mr.\"},{\"name\":\"bob2\",\"title\":\"Mr.2\"}]`)\n\tm2 = json.RawMessage(`[{\"name\":\"bob3\",\"title\":\"Mr.3\"},{\"name\":\"bob4\",\"title\":\"Mr.4\"}]`)\n\tm3 = json.RawMessage(`[{\"name\":\"bob5\",\"title\":\"Mr.5\"},{\"name\":\"bob6\",\"title\":\"Mr.6\"}]`)\n)\nfunc main() {\n\tresult, err := mergeJSON(m1, m2, m3)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tf, err := os.OpenFile(\"file.json\", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0660)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tf.Write(result)\n}\nfunc mergeJSON(j ...json.RawMessage) (json.RawMessage, error) {\n\tvar m []interface{}\n\tfor _, v := range j {\n\t\tvar d interface{}\n\t\tjson.Unmarshal(v, &d)\n\t\tb := d.([]interface{})\n\t\tm = append(m, b...)\n\t}\n\treturn json.MarshalIndent(m, \"\", \"  \")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71158069/concurrent-execution-but-serialized-output",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tchang1 := make(chan string)\n\tchang2 := make(chan string)\n\tchang3 := make(chan string)\n\tchannels := []chan string{chang1, chang2, chang3}\n\tfor i := 1; i < 10; i += 3 {\n\t\tgo g1(i, channels[i%3])\n\t\tgo g2(i+1, channels[(i+1)%3])\n\t\tgo g3(i+2, channels[(i+2)%3])\n\t\tfmt.Print(<-channels[i%3])\n\t\tfmt.Print(<-channels[(i+1)%3])\n\t\tfmt.Print(<-channels[(i+2)%3])\n\t}\n}\nfunc g1(i int, chanel chan string) {\n\tchanel <- fmt.Sprintln(\"g1\", i)\n}\nfunc g2(i int, chanel chan string) {\n\tchanel <- fmt.Sprintln(\"g2\", i)\n}\nfunc g3(i int, chanel chan string) {\n\tchanel <- fmt.Sprintln(\"g3\", i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71155485/extract-resource-id-from-arn",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nfunc main() {\n\t// Compile the expression once, usually at init time.\n\t// Use raw strings to avoid having to quote the backslashes.\n\tvar validID = regexp.MustCompile(`[^:/]*$`)\n\tfmt.Println(validID.FindString(\"arn:partition:service:region:account-id:resource-id\"))\n\tfmt.Println(validID.FindString(\"arn:partition:service:region:account-id:resource-type/resource-id\"))\n\tfmt.Println(validID.FindString(\"arn:partition:service:region:account-id:resource-type:resource-id\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71143243/in-go-how-to-parse-xml-with-mixed-elements-chardata-elements-chardata-content",
    "body": "func (b *Book) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tfor {\n\t\tt, err := d.Token()\n\t\tif err != nil {\n\t\t\tif err != io.EOF {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t\tswitch t := t.(type) {\n\t\tcase xml.StartElement:\n\t\t\tvar f interface{} // field\n\t\t\tvar r string      // replace\n\t\t\tswitch t.Name.Local {\n\t\t\tcase \"title\":\n\t\t\t\tf = &b.Title\n\t\t\tcase \"author\":\n\t\t\t\tif len(b.Author) > 0 { // if \"author\" was already decoded then assume this is the element in the \"blah chardata\"\n\t\t\t\t\tr = b.Author // if you want <author/> to appear in Text then do `r = \"<author/>\"` instead\n\t\t\t\t} else {\n\t\t\t\t\tf = &b.Author\n\t\t\t\t}\n\t\t\tcase \"year\":\n\t\t\t\tif len(b.Year) > 0 { // same logic as for author above\n\t\t\t\t\tr = b.Year\n\t\t\t\t} else {\n\t\t\t\t\tf = &b.Year\n\t\t\t\t}\n\t\t\tcase \"price\":\n\t\t\t\tf = &b.Price\n\t\t\t}\n\t\t\tif f != nil {\n\t\t\t\tif err := d.DecodeElement(f, &t); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(r) > 0 {\n\t\t\t\tb.Text += \" \" + r + \" \" // add empty space for padding the replacement string\n\t\t\t}\n\t\tcase xml.CharData:\n\t\t\ts := strings.TrimSpace(string(t))\n\t\t\tif len(s) > 0 {\n\t\t\t\tb.Text += s\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70913226/how-to-execute-multiple-variables-in-html-go-template",
    "body": "func RemoveVehicle(w http.ResponseWriter, r *http.Request) {\n    // check if the user is logged in\n\tusername, _ := ExtractTokenUsername(r)\n\tif len(username) == 0 {\n        // if not, render the template with no data, this\n        // will show the \"please login\" part of your template\n\t\tif err := removeTemplate.Execute(w, nil); err != nil {\n            http.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t\treturn\n\t}\n    switch r.Method {\n\t// if the method is GET, show the list of vehicles available\n\tcase http.MethodGet:\n\t\t// select vehicles from db\n\t\trows, err := db.Query(`SELECT * FROM Vehicle`)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer rows.Close()\n\t\t// scan rows\n\t\tvar vehicles []Vehicle\n\t\tfor rows.Next() {\n\t\t\tvar v Vehicle\n\t\t\terr := rows.Scan(&v.Id, &v.Date, &v.Brand, &v.Model, &v.Mileage, &v.Year, &v.rented, &v.Dayrate)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvehicles = append(vehicles, v)\n\t\t}\n\t\tif err := rows.Err(); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\t// now render the template with the data\n        // that you just retrieved from the database\n\t\tdata := map[string]interface{}{\n\t\t\t\"Username\": username,\n\t\t\t\"Vehicles\": vehicles,\n\t\t}\n\t\tif err := removeTemplate.Execute(w, data); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t// if the method is POST, delete the vehicle\n\tcase http.MethodPost {\n\t\tvar id = r.FormValue(\"select\")\n\t\tif _, err := db.Exec(\"DELETE FROM vehicle WHERE id=?\", id); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70913226/how-to-execute-multiple-variables-in-html-go-template",
    "body": "{{if .Username}}\n<div><img src=\"images/kogdpilnmzhz9rhzceo2.png\" alt=\"\" width=\"65\" height=\"65\" class=\"addV_label\"/></div>\n<hr style=\"height:5px\">\n<form action=\"/remove\" method=\"POST\" source=\"custom\" name=\"form\">\n\t<input type=\"hidden\" name=\"xss-token\" value=\"\"/>\n\t<div class=\"form-group\">\n\t\t<div>\n\t\t\t<label class=\"addV_label\">Select Vehicle&nbsp;</label>\n\t\t\t<select name=\"select\" class=\"form-control loginInput2\" required=\"required\">\n\t\t\t\t{{range .Vehicles}}\n\t\t\t\t<option value=\"{{.Id}}\">{{.Brand}} {{.Model}} ({{.Year}}), {{.Mileage}} miles | £{{.Dayrate}}/pd</option>\n\t\t\t\t{{end}}\n\t\t\t</select>\n\t\t</div>\n\t</div>\n\t<div>\n\t\t<button class=\"btn-block frgt_1 btn addV_btn\" type=\"submit\" value=\"remove\">REMOVE</button>\n\t</div>\n</form>\n{{else}}\n<p> Access Denied, please login.<a href=\"/login\">Login</a></p>\n{{end}}"
  },
  {
    "url": "https://stackoverflow.com/questions/70874903/calling-json-decoder-repetitvely-because-of-small-change-in-response-structure",
    "body": "var email string\nvar response interface{}\nif err := json.NewDecoder(r.Body).Decode(&response); err != nil {\n    return err\n}\n// If you are sure that the structure of the content of the response,\n// given its type, is always what you expect it to be, you can use a\n// quick-and-dirty type switch/assertion.\nswitch v := response.(type) {\ncase []interface{}:\n    email = v[0].(map[string]interface{})[\"email\"].(string)\ncase map[string]interface{}:\n    email = v[\"email\"].(string)\n}\n// But! If you're not sure, if the APIs don't provide a guarantee,\n// then you should guard against panics using the comma-ok idiom\n// at every step.\nif s, ok := response.([]interface{}); ok && len(s) > 0 {\n    if m, ok := s[0].(map[string]interface{}); ok && len(m) > 0 {\n        email, _ = m[\"email\"].(string)\n    }\n} else if m, ok := response.(map[string]interface{}); ok && len(m) > 0 {\n    email, _ = m[\"email\"].(string)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70869050/how-to-extract-7z-files-in-go",
    "body": "func extractAndOpenAll(*extractor.Archive) ([]*os.File, error) {\n  err := a.Extract(\"/tmp/path\") // consider using ioutil.TempDir()\n  if err != nil {\n    return nil, err\n  }\n  filestats, err := ioutil.ReadDir(\"/tmp/path\")\n  if err != nil {\n    return nil, err\n  }\n  # warning: all these file handles must be closed by the caller,\n  # which is why even the error case here returns the list of files.\n  # if you forget, your process might leak file handles.\n  files := make([]*os.File, 0)\n  for _, fs := range(filestats) {\n    file, err := os.Open(fs.Name())\n    if err != nil {\n      return files, err\n    }\n    files = append(files, file)\n  }\n  return files, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70550180/measuring-reverse-proxy-response-times-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n\t\"time\"\n)\nfunc main() {\n\turl, _ := url.Parse(\"https://stackoverflow.com\")\n\tproxy := httputil.NewSingleHostReverseProxy(url)\n\tproxy.Transport = NewTimingRoundtripper(http.DefaultTransport)\n}\ntype TimingRoundtripper struct {\n\ttransport http.RoundTripper\n}\nfunc NewTimingRoundtripper(transport http.RoundTripper) http.RoundTripper {\n\treturn TimingRoundtripper{transport: transport}\n}\nfunc (rt TimingRoundtripper) RoundTrip(r *http.Request) (resp *http.Response, err error) {\n\tstart := time.Now()\n\tresp, err = rt.transport.RoundTrip(r)\n\tfmt.Println(\"request\", r.URL, time.Since(start))\n\treturn resp, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70538103/parse-nested-json-array-from-a-file",
    "body": "func main() {\n\tfile, err := ioutil.ReadFile(\"/Users/janedoe/Downloads/sample.json\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar events []Event\n\tif err := json.Unmarshal([]byte(file), &events); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(reflect.TypeOf(events))\n\tfor i, event := range events {\n\t\t// Reading each value by its key for each event\n\t\tfmt.Println(i, \"Event123_Time :\", event.Time,\n\t\t\t\"\\nEvent123_ExtraData_Id :\", event.ExtraData.Id,\n\t\t\t\"\\nEvent123_Info :\", event.Info)\n\t}\n}\ntype Event struct {\n\tTime      string    `json:\"time\"`\n\tExtraData ExtraData `json:\"extra_data\"`\n\tInfo      string    `json:\"info\"`\n}\ntype ExtraData struct {\n\tId string `json:\"id\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70457829/how-to-mock-external-http-request-api-when-integration-test-in-golang",
    "body": "type Service interface {\n     GetDataFromDB(params apiParams, thirdClient ApiCient)\n}\ntype Repository interface {\n     GetDataFromDB(orm *gorm.DB)\n}\ntype ThirdPartyDoer interface {\n    Do(url string) interface{}\n}\n\ntype DataService struct {\n     repo Repository\n     thirdParty ThirdPartyDoer\n}\nfunc (s *DataService) GetDataFromDB(params apiParams, thirdClient ApiClient) []interface{} {\n     var result []interface{}\n     dataFromDb := s.repo.GetDataFromDB()\n     dataFromAPI := s.thirdParty.Do(url)\n     result = append(result, dataFromDb)\n     result = append(result, dataFromAPI)\n     return result\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70043127/go-concurrency-circular-logic",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n)\ntype SleepResult struct {\n\tworker_id int\n\tduration  time.Duration\n\tstart     time.Time\n\tend       time.Time\n}\nfunc main() {\n\tvar num_workers = 2\n\tworkchan := make(chan time.Duration)\n\tresultschan := make(chan SleepResult)\n\tvar wg sync.WaitGroup\n\tvar resultswg sync.WaitGroup\n\tresultswg.Add(1)\n\tgo results(&resultswg, resultschan)\n\tfor i := 0; i < num_workers; i++ {\n\t\twg.Add(1)\n\t\tgo worker(i, &wg, workchan, resultschan)\n\t}\n\t// playground doesn't have stdin\n\tvar input = bytes.NewBufferString(\n\t\tstrings.Join([]string{\n\t\t\t\"3ms\",\n\t\t\t\"1 seconds\",\n\t\t\t\"3600ms\",\n\t\t\t\"300 ms\",\n\t\t\t\"5s\",\n\t\t\t\"0.05min\"}, \"\\n\") + \"\\n\")\n\tvar scanner = bufio.NewScanner(input)\n\tfor scanner.Scan() {\n\t\ttext := scanner.Text()\n\t\tif dur, err := time.ParseDuration(text); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, \"Invalid duration\", text)\n\t\t} else {\n\t\t\tworkchan <- dur\n\t\t}\n\t}\n\tclose(workchan) // we know when our inputs are done\n\twg.Wait()       // and when our jobs are done\n\tclose(resultschan)\n\tresultswg.Wait()\n}\nfunc results(wg *sync.WaitGroup, resultschan <-chan SleepResult) {\n\tfor res := range resultschan {\n\t\tfmt.Printf(\"Worker %d: %s : %s => %s\\n\",\n\t\t\tres.worker_id, res.duration,\n\t\t\tres.start.Format(time.RFC3339Nano), res.end.Format(time.RFC3339Nano))\n\t}\n\twg.Done()\n}\nfunc worker(id int, wg *sync.WaitGroup, jobchan <-chan time.Duration, resultschan chan<- SleepResult) {\n\tvar res = SleepResult{worker_id: id}\n\tfor dur := range jobchan {\n\t\tres.duration = dur\n\t\tres.start = time.Now()\n\t\ttime.Sleep(res.duration)\n\t\tres.end = time.Now()\n\t\tresultschan <- res\n\t}\n\twg.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70036803/generate-openapi-xml-model-from-go-structure",
    "body": "// write a marshal func that converts a given type to the structure declared above\n// - this example converts only plain structs\nfunc marshalOpenAPI(v interface{}) (interface{}, error) {\n\trt := reflect.TypeOf(v)\n\tif rt.Kind() == reflect.Struct {\n\t\tobj := DataType{Type: \"object\"}\n\t\tfor i := 0; i < rt.NumField(); i++ {\n\t\t\tf := rt.Field(i)\n\t\t\ttag := strings.Split(f.Tag.Get(\"xml\"), \",\")\n\t\t\tif len(tag) == 0 || len(tag[0]) == 0 { // no name?\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif obj.Props == nil {\n\t\t\t\tobj.Props = make(map[string]*DataType)\n\t\t\t}\n\t\t\tname := tag[0]\n\t\t\tobj.Props[name] = &DataType{\n\t\t\t\tType: goTypeToOpenAPIType(f.Type),\n\t\t\t}\n\t\t\tif len(tag) > 1 && tag[1] == \"attr\" {\n\t\t\t\tobj.Props[name].XML = &XML{Attr: true}\n\t\t\t}\n\t\t}\n\t\treturn obj, nil\n\t}\n\treturn nil, fmt.Errorf(\"unsupported type\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70022742/how-to-create-custom-objects-in-kubernetes",
    "body": "func getClusterConfig() *rest.Config {\n\tconfig, err := rest.InClusterConfig()\n\tif err != nil {\n\t\tglog.Fatal(err.Error())\n\t}\n\treturn config\n}\nfunc getRestClient() *rest.RESTClient {\n\tcfg := getClusterConfig()\n\tgv := schema.GroupVersion{Group: \"<API>\", Version: \"<version>\"}\n\tcfg.GroupVersion = &gv\n\tcfg.APIPath = \"/apis\" // you can verify the path from step 2\n\tvar Scheme = runtime.NewScheme()\n\tvar Codecs = serializer.NewCodecFactory(Scheme)\n\tcfg.NegotiatedSerializer = Codecs.WithoutConversion()\n\trestClient, err := rest.RESTClientFor(cfg)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn restClient\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70012060/how-to-mock-unit-tests-for-golang-function-calling-an-aws-service-multiple-times",
    "body": "type UserCreator interface{\n  GetUser(*iam.GetUserInput) (*iam.GetUserOutput, error)\n  CreateUser(*iam.CreateUserInput) (*iam.CreateUserInput, error)\n}\nfunc CreateMyUser(iamSvc UserCreator, userName string) (string, error){\n    //first IAM call\n    _, err:=iamSvc.GetUser(&iam.GetUserInput{UserName: userName})\n    if err != nil {\n      fmt.Println(\"Failed to get user, attempting to create\")\n\n      //second IAM call\n      _, err:=iamSvc.CreateUser(&iam.CreateUserInput{UserName: userName})\n\n      if err != nil {\n        log.Fatalf(\"Failed to create user\\n\", err )\n      }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70012060/how-to-mock-unit-tests-for-golang-function-calling-an-aws-service-multiple-times",
    "body": "type mockUserCreator{\n  Response string\n}\nfunc (m * mockUserCreator) GetUser(input *iam.GetUserInput)(*iam.GetUserOutput, error){\nreturn &iam.GetUserOutput{}, nil\n}\nfunc (m * mockUserCreator) CreateUser(input *iam.CreateUserInput)(*iam.CreateUserOutput, error){\nreturn &iam.CreateUserOutput{}, nil\n}\nfunc TestCreateMyUser(t *testing.T){\n  testcases:=[]struct{\n   TestName string\n  }{\n    {\n      TestName:\"Some test\"\n    }\n  }\n  for _, tt := range testcases{\n    t.Run(tt.TestName, func(t *testing.T){\n      m := mockUserCreator{}\n     mockUser := \"TestUser\"\n      _, err:= CreateMyUser(&m, mockUser)\n\n      if err != nil {\n        t.Error(\"TestCreateMyUser returned and error: %s\", err)\n      }\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70011708/terraform-iterate-through-list-within-a-map-of-objects",
    "body": "variable \"tunnels\" {\n    default =   {\n      test125231-test-tunnel   = {\n           authby        = \"secret\"\n           auto          = \"ondemand\"\n           customer_name = \"test125231\"\n           dh_ingress_ip = \"10.0.1.71\"\n           esp           = \"aes256-sha256-modp2048\"\n           ike           = \"aes256-sha256-modp2048\"\n           ikelifetime   = 3600\n           ikev2         = \"no\"\n           keyexchange   = \"ike\"\n           left          = \"%defaultroute\"\n           leftid        = \"10.10.10.10\"\n           leftsourceip  = \"10.0.1.122\"\n           leftsubnet    = \"10.0.0.0/16\"\n           peer_ip       = \"10.10.10.10\"\n           ports         = [\n               \"7000\",\n               \"7001\",\n            ]\n           right         = \"10.10.10.10\"\n           rightid       = \"10.10.10.10\"\n           rightsourceip = \"10.41.0.191\"\n           rightsubnet   = \"10.41.0.0/16\"\n           salifetime    = 3600\n           tunnel_name   = \"test-tunnel\"\n        },\n       test125231-test-tunnel-2 = {\n           authby        = \"secret\"\n           auto          = \"ondemand\"\n           customer_name = \"test125231\"\n           dh_ingress_ip = \"10.0.1.71\"\n           esp           = \"aes256-sha256-modp2048\"\n           ike           = \"aes256-sha256-modp2048\"\n           ikelifetime   = 3600\n           ikev2         = \"no\"\n           keyexchange   = \"ike\"\n           left          = \"%defaultroute\"\n           leftid        = \"3.229.37.95\"\n           leftsourceip  = \"10.0.1.234\"\n           leftsubnet    = \"184.72.223.116/32\"\n           peer_ip       = \"10.10.10.10\"\n           ports         = [\n               \"7000\",\n            ]\n           right         = \"10.10.10.10\"\n           rightid       = \"10.10.10.10\"\n           rightsourceip = \"10.41.0.191\"\n           rightsubnet   = \"10.41.0.0/16\"\n           salifetime    = 3600\n           tunnel_name   = \"test-tunnel-2\"\n        },\n       test125231-test-tunnel-3 = {\n           authby        = \"secret\"\n           auto          = \"ondemand\"\n           customer_name = \"test125231\"\n           dh_ingress_ip = \"10.0.1.71\"\n           esp           = \"aes256-sha256-modp2048\"\n           ike           = \"aes256-sha256-modp2048\"\n           ikelifetime   = 3600\n           ikev2         = \"no\"\n           keyexchange   = \"ike\"\n           left          = \"%defaultroute\"\n           leftid        = \"10.10.10.10\"\n           leftsourceip  = \"10.0.1.234\"\n           leftsubnet    = \"190.72.224.115/32\"\n           peer_ip       = \"10.10.10.10\"\n           ports         = [\n               \"7000\",\n            ]\n           right         = \"10.10.10.10\"\n           rightid       = \"10.10.10.10\"\n           rightsourceip = \"10.41.0.191\"\n           rightsubnet   = \"10.41.0.0/16\"\n           salifetime    = 3600\n           tunnel_name   = \"test-tunnel-3\"\n        },\n       test125231-test-tunnel-4 = {\n           authby        = \"secret\"\n           auto          = \"ondemand\"\n           customer_name = \"test125231\"\n           dh_ingress_ip = \"10.0.1.71\"\n           esp           = \"aes256-sha256-modp2048\"\n           ike           = \"aes256-sha256-modp2048\"\n           ikelifetime   = 3600\n           ikev2         = \"no\"\n           keyexchange   = \"ike\"\n           left          = \"%defaultroute\"\n           leftid        = \"10.10.10.10\"\n           leftsourceip  = \"10.0.1.234\"\n           leftsubnet    = \"10.10.10.10/32\"\n           peer_ip       = \"10.10.10.10\"\n           ports         = [\n               \"7000\",\n            ]\n           right         = \"10.10.10.10\"\n           rightid       = \"10.10.10.10\"\n           rightsourceip = \"10.41.0.191\"\n           rightsubnet   = \"10.41.0.0/16\"\n           salifetime    = 3600\n           tunnel_name   = \"test-tunnel-4\"\n        }\n    }\n}\nlocals {\n    tunnels_flat = merge([\n           for tunnel_name, tunnel_details in var.tunnels:\n            {\n                for idx, port in tunnel_details.ports:\n                    \"${tunnel_name}-${port}\" => merge({\n                        port          = port\n                    }, tunnel_details)\n            }\n        ]...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69970608/pass-resource-from-command-to-subcommands-in-urfave-cli-v2",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"github.com/urfave/cli/v2\"\n)\nfunc main() {\n\tapp := &cli.App{\n\t\tCommands: []*cli.Command{\n\t\t\t{\n\t\t\t\tName:   \"db\",\n\t\t\t\tBefore: func(c *cli.Context) error {\n\t\t\t\t\tdb := \"example\"\n\t\t\t\t\tc.Context = context.WithValue(c.Context, \"db\", db)\n\t\t\t\t\treturn nil\n\t\t\t\t},\n\t\t\t\tSubcommands: []*cli.Command{\n\t\t\t\t\t{\n\t\t\t\t\t\tName:  \"connect\",\n\t\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\t\tdb := c.Context.Value(\"db\").(string) // remember to assert to original type\n\t\t\t\t\t\t\tfmt.Println(\"sub command:\", db)\n\t\t\t\t\t\t\treturn nil\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\terr := app.Run(os.Args)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69938563/can-i-skip-a-json-tag-while-marshalling-a-struct-in-golang",
    "body": "type Employee struct {\n\tInterface Interface `json:\"-\"`\n}\nfunc (e Employee) MarshalJSON() ([]byte, error) {\n    type E Employee\n\tobj1, err := json.Marshal(E(e))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tobj2, err := json.Marshal(e.Interface)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n    // join the two objects by dropping '}' from obj1 and\n    // dropping '{' from obj2 and then appending obj2 to obj1\n    //\n    // NOTE: if the Interface field was nil, or it contained a type\n    // other than a struct or a map or a pointer to those, then this\n    // will produce invalid JSON and marshal will fail with an error.\n    // If you expect those cases to occur in your program you should\n    // add some logic here to handle them.\n\treturn append(obj1[:len(obj1)-1], obj2[1:]...), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69806290/questions-about-go-curls-opt-cookiejar-option",
    "body": "  CommonSetopt(easy)\n  easy.Setopt(curl.OPT_VERBOSE, 0)\n  easy.Setopt(curl.OPT_COOKIEJAR, cookieName)\n  easy.Setopt(curl.OPT_URL, string(\"https://drive.google.com/uc?export=download&id=\"+gdriveID))\n  log.Println(\"start download cookie: \", url)\n  if err := easy.Perform(); err != nil {\n      log.Println(\"cookie download fail: \", err)\n      easy.Cleanup()\n      return\n  }\n  // do cleanup\n  easy.Cleanup()\n  readBuf, err := ioutil.ReadFile(cookieName)\n  if err != nil {\n      log.Println(\"cookie read fail: \", err)\n      return\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/69719233/how-to-wait-for-user-input-in-go-generate-script",
    "body": "package main\nimport (\n        \"fmt\"\n        \"log\"\n        \"github.com/eiannone/keyboard\"\n)\nfunc main() {\n        if err := keyboard.Open(); err != nil {\n                panic(err)\n        }\n        defer func() {\n                _ = keyboard.Close()\n        }()\n        for isFileOk := checkFile(); !isFileOk; {\n                log.Println(\"File requires manual update.\")\n                log.Println(\"Hit [RETURN] when resolved.\")\n                char, key, err := keyboard.GetKey()\n                if err != nil {\n                        panic(err)\n                }\n                fmt.Println(char, key, err)\n                if key == keyboard.KeyEsc {\n                        return\n                }\n        }\n}\nfunc checkFile() bool {\n        return false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69362308/extracting-data-from-kafka-rest-proxy-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t    \"encoding/json\"\n)\nfunc main() {\ntype Value struct {\n    AdoptionID string `json:\"AdoptionID\"`\n    IPAddress  string `json:\"IPAddress\"`\n    Port       string `json:\"Port\"`\n    Status     string `json:\"Status\"`\n}\ntype AutoGenerated []struct {\n    Topic     string      `json:\"topic\"`\n    Key       interface{} `json:\"key\"`\n    Value     Value       `json:\"value\"`\n    Partition int         `json:\"partition\"`\n    Offset    int         `json:\"offset\"`\n}\n    byt := []byte(`[{\"topic\":\"backward\",\"key\":null,\"value\":{\"AdoptionID\":\"abcd123\",\"IPAddress\":\"8.8.8.8\",\"Port\":\"80\",\"Status\":\"requested\"},\"partition\":0,\"offset\":7}]`)\n   var dat AutoGenerated\n   if err := json.Unmarshal(byt, &dat); err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%#v\", dat)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69247065/updating-mmap-file-with-struct-in-go",
    "body": "// Note: using uint32 instead of time.Time for decoding.\n// Convert to time.Time afterwards if needed.\ntype MVHD struct {\n    Version          byte\n    Flags            [3]byte\n    DateCreatedSecs  uint32\n    DateModifiedSecs uint32\n    TimeUnit        uint32 // time unit per second (default = 600)\n    DurationInUnits uint64 // time length (in time units)\n}\n// ..or use binary.BigEndian - whichever is correct for your data.\nvar endian = binary.LittleEndian\nfunc decode(rd io.Reader) (*MVHD, error) {\n    var header MVHD\n    if err := binary.Read(rd, endian, &header); err != nil {\n        return nil, err\n    }\n    return &header, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69247065/updating-mmap-file-with-struct-in-go",
    "body": "func decode2(buf []byte) (*MVHD, error) {\n    if len(buf) < 24 {\n        return nil, errors.New(\"not enough data\")\n    }\n    return &MVHD{\n        Version:          buf[0],\n        Flags:            [3]byte{buf[1], buf[2], buf[3]},\n        DateCreatedSecs:  binary.LittleEndian.Uint32(buf[4:8]),\n        DateModifiedSecs: binary.LittleEndian.Uint32(buf[8:12]),\n        TimeUnit:         binary.LittleEndian.Uint32(buf[12:16]),\n        DurationInUnits:  binary.LittleEndian.Uint64(buf[16:24]),\n    }, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68796484/custom-validator-to-compare-two-fields",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/go-playground/validator/v10\"\n)\n// Booking contains binded and validated data.\ntype Booking struct {\n\tCheckIn  time.Time `form:\"check_in\" binding:\"required,bookabledate\" time_format:\"2006-01-02\"`\n\tCheckOut time.Time `form:\"check_out\" binding:\"required\" time_format:\"2006-01-02\"`\n}\nvar bookableDate validator.Func = func(fl validator.FieldLevel) bool {\n\tdate, ok := fl.Field().Interface().(time.Time)\n\tif ok {\n\t\tbooking, ok2 := fl.Parent().Interface().(*Booking)\n\t\tif ok2 && booking.CheckOut.Unix() - date.Unix() > 24*3600 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\nfunc main() {\n\troute := gin.Default()\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\tv.RegisterValidation(\"bookabledate\", bookableDate)\n\t}\n\troute.GET(\"/bookable\", getBookable)\n\troute.Run(\":8085\")\n}\nfunc getBookable(c *gin.Context) {\n\tvar b Booking\n\tif err := c.ShouldBindWith(&b, binding.Query); err == nil {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Booking dates are valid!\"})\n\t} else {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68677575/merging-intervals-out-of-hyphenated-string-ranges",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strconv\"\n\t\"strings\"\n)\ntype intSet struct {\n\tstart int\n\tend   int\n}\nfunc (s intSet) String() string {\n\tif s.start == s.end {\n\t\treturn fmt.Sprintf(\"%d\", s.start)\n\t}\n\treturn fmt.Sprintf(\"%d-%d\", s.start, s.end)\n}\nfunc (s intSet) in(i int) bool {\n\treturn s.start <= i && i <= s.end\n}\nfunc (s *intSet) union(set intSet) {\n\tif set.start < s.start {\n\t\ts.start = set.start\n\t}\n\tif set.end > s.end {\n\t\ts.end = set.end\n\t}\n}\nfunc insert(set intSet, is []intSet) bool {\n\tfor i, s := range is {\n\t\tif s.in(set.start) || s.in(set.end) {\n\t\t\tis[i].union(set)\n\t\t\treturn true\n\t\t}\n\t\t//updated here with thankful to @mh-cbon\n\t\tif set.in(s.start) || set.in(s.end) {\n\t\t\tis[i].union(set)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\nfunc main() {\n\tvar set []intSet\n\tports := []string{\"1\", \"2-7\", \"12-1200\", \"10-500\", \"9-5500\"}\n\tfor _, port := range ports {\n\t\ts := strings.Split(port, `-`)\n\t\tif len(s) < 1 || len(s) > 2 {\n\t\t\tlog.Fatalln(`set cannot have multiple values or no value`)\n\t\t}\n\t\tstart, err := strconv.Atoi(s[0])\n\t\tif err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\tend := start\n\t\tif len(s) == 2 {\n\t\t\tend, err = strconv.Atoi(s[1])\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalln(err)\n\t\t\t}\n\t\t}\n\t\ttemSet := intSet{\n\t\t\tstart: start,\n\t\t\tend:   end,\n\t\t}\n\t\tif !insert(temSet, set) {\n\t\t\tset = append(set, temSet)\n\t\t}\n\t}\n\tfmt.Println(set) //[1 2-7 9-5500]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68567124/use-an-inner-join-in-sql-server",
    "body": "type MyUser struct {\n    Id_User       int64     `json:\"id_user,omitempty\"`\n    Name          string    `json:\"name,omitempty\"`\n    NameSecond    string    `json:\"name_second,omitempty\"`\n    Surname       string    `json:\"surname,omitempty\"`\n    SurnameSecond string    `json:\"surname_second,omitempty\"`\n    Email         string    `json:\"email,omitempty\"`\n    Password      string    `json:\"password,omitempty\"`\n    RoleUserName  string  `json:\"roleUser_name,omitempty\"`\n    UserStateName  string `json:\"userState_name,omitempty\"`\n    CreatedAt     time.Time `json:\"created_at,omitempty\"`\n    UpdatedAt     time.Time `json:\"crated_at,omitempty\"`\n}\nfunc (u *User) MarshalJSON() ([]byte, error) {\n\tmu := MyUser{\n\t\tId_User:       u.Id_User,\n\t\tName:          u.Name,\n\t\tNameSecond:    u.NameSecond,\n\t\tSurname:       u.Surname,\n\t\tSurnameSecond: u.SurnameSecond,\n\t\tEmail:         u.Email,\n\t\tPassword:      u.Password,\n\t\tRoleUserName:  u.Id_RoleUser.Name,\n\t\tUserStateName: u.Id_UserState.Name,\n\t\tCreatedAt:     u.CreatedAt,\n\t\tUpdatedAt:     u.UpdatedAt,\n\t}\n\treturn json.Marshal(mu)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68551177/validate-aws-cognito-jwt-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/golang-jwt/jwt\"\n\t\"github.com/MicahParks/keyfunc\"\n)\nfunc main() {\n\t// Get the JWKs URL from your AWS region and userPoolId.\n\t//\n\t// See the AWS docs here:\n\t// https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-verifying-a-jwt.html\n\tregionID := \"\"   // TODO Get the region ID for your AWS Cognito instance.\n\tuserPoolID := \"\" // TODO Get the user pool ID of your AWS Cognito instance.\n\tjwksURL := fmt.Sprintf(\"https://cognito-idp.%s.amazonaws.com/%s/.well-known/jwks.json\", regionID, userPoolID)\n\t// Create the keyfunc options. Use an error handler that logs. Refresh the JWKs when a JWT signed by an unknown KID\n\t// is found or at the specified interval. Rate limit these refreshes. Timeout the initial JWKs refresh request after\n\t// 10 seconds. This timeout is also used to create the initial context.Context for keyfunc.Get.\n\trefreshInterval := time.Hour\n\trefreshRateLimit := time.Minute * 5\n\trefreshTimeout := time.Second * 10\n\trefreshUnknownKID := true\n\toptions := keyfunc.Options{\n\t\tRefreshErrorHandler: func(err error) {\n\t\t\tlog.Printf(\"There was an error with the jwt.KeyFunc\\nError:%s\\n\", err.Error())\n\t\t},\n\t\tRefreshInterval:   &refreshInterval,\n\t\tRefreshRateLimit:  &refreshRateLimit,\n\t\tRefreshTimeout:    &refreshTimeout,\n\t\tRefreshUnknownKID: &refreshUnknownKID,\n\t}\n\t// Create the JWKs from the resource at the given URL.\n\tjwks, err := keyfunc.Get(jwksURL, options)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create JWKs from resource at the given URL.\\nError:%s\\n\", err.Error())\n\t}\n\t// Get a JWT to parse.\n\tjwtB64 := \"eyJraWQiOiJmNTVkOWE0ZSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJLZXNoYSIsImF1ZCI6IlRhc2h1YW4iLCJpc3MiOiJqd2tzLXNlcnZpY2UuYXBwc3BvdC5jb20iLCJleHAiOjE2MTkwMjUyMTEsImlhdCI6MTYxOTAyNTE3NywianRpIjoiMWY3MTgwNzAtZTBiOC00OGNmLTlmMDItMGE1M2ZiZWNhYWQwIn0.vetsI8W0c4Z-bs2YCVcPb9HsBm1BrMhxTBSQto1koG_lV-2nHwksz8vMuk7J7Q1sMa7WUkXxgthqu9RGVgtGO2xor6Ub0WBhZfIlFeaRGd6ZZKiapb-ASNK7EyRIeX20htRf9MzFGwpWjtrS5NIGvn1a7_x9WcXU9hlnkXaAWBTUJ2H73UbjDdVtlKFZGWM5VGANY4VG7gSMaJqCIKMxRPn2jnYbvPIYz81sjjbd-sc2-ePRjso7Rk6s382YdOm-lDUDl2APE-gqkLWdOJcj68fc6EBIociradX_ADytj-JYEI6v0-zI-8jSckYIGTUF5wjamcDfF5qyKpjsmdrZJA\"\n\t// Parse the JWT.\n\ttoken, err := jwt.Parse(jwtB64, jwks.KeyFunc)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to parse the JWT.\\nError:%s\\n\", err.Error())\n\t}\n\t// Check if the token is valid.\n\tif !token.Valid {\n\t\tlog.Fatalf(\"The token is not valid.\")\n\t}\n\tlog.Println(\"The token is valid.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68495559/how-to-get-the-size-of-zipped-folder",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\nfunc main() {\n\tbigBuf := strings.NewReader(strings.Repeat(\"borng string\", 10000))\n\tdst := &LimitWriter{Writer: os.Stdout, N: 20}\n\tn, err := io.Copy(dst, bigBuf)\n\tfmt.Println(\"n=\", n)\n\tfmt.Println(\"err=\", err)\n}\nvar ErrWriteOverflow = errors.New(\"write overflow, data is too large\")\ntype LimitWriter struct {\n\tio.Writer\n\tN       int64\n\twritten int64\n}\nfunc (l *LimitWriter) Write(p []byte) (n int, err error) {\n\tif l.written+int64(len(p)) >= l.N {\n\t\treturn 0, ErrWriteOverflow\n\t}\n\tn, err = l.Writer.Write(p)\n\tl.written += int64(n)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68435353/waitgroup-wait-causing-dead-lock",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nvar wg sync.WaitGroup\nfunc foo(c chan int, i int) {\n\tdefer wg.Done()\n\tc <- i\n}\nfunc main() {\n\tch := make(chan int) // unbuffered channel\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo foo(ch, i)\n\t}\n\t// wg.Wait is waiting for all goroutines to finish but that's\n\t// only possible if the send to channel succeeds. In this case,\n\t// it is not possible as your receiver \"for item := range ch\" is below\n\t// this. Hence, a deadlock.\n\twg.Wait()\n\t// Ideally, it should be the sender's duty to close the channel.\n\t// And closing a channel before the receiver where the channel\n\t// is unbuffered is not correct.\n\tclose(ch)\n\tfor item := range ch {\n\t\tfmt.Println(item)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68231412/go-image-bytes-and-python-pil-tobytes-produce-different-byte-data",
    "body": "#!/usr/bin/env python\nimport sys\nfrom PIL import Image\nfrom hashlib import md5\ndef read_file_data(file_name):\n    with open(file_name, \"rb\") as fin:\n        return fin.read()\ndef read_img_data(file_name):\n    with Image.open(file_name) as img:\n        return img.tobytes()\ndef process_bytes(buf, first=20, last=20):\n    print(\"Len: {:d}\\nFirst bytes:\\n  \".format(len(buf)), end=\" \")\n    for i in range(first):\n        print(\"0x{:02X}\".format(buf[i]), end=\" \")\n    print(\"\\nLast bytes:\\n  \", end=\" \")\n    for i in range(-last, 0, 1):\n        print(\"0x{:02X}\".format(buf[i]), end=\" \")\n    print(\"\\nMD5: {:}\".format(md5(buf).hexdigest()))\ndef main(*argv):\n    img_name = \"rb.png\"\n    funcs = [\n        read_file_data,\n        read_img_data,\n    ]\n    for func in funcs:\n        print(\"\\nFunction {:s}\".format(func.__name__))\n        b = func(img_name)\n        process_bytes(b)\nif __name__ == \"__main__\":\n    print(\"Python {:s} {:03d}bit on {:s}\\n\".format(\" \".join(elem.strip() for elem in sys.version.split(\"\\n\")),\n                                                   64 if sys.maxsize > 0x100000000 else 32, sys.platform))\n    rc = main(*sys.argv[1:])\n    print(\"\\nDone.\")\n    sys.exit(rc)"
  },
  {
    "url": "https://stackoverflow.com/questions/68231412/go-image-bytes-and-python-pil-tobytes-produce-different-byte-data",
    "body": ">    [cfati@CFATI-5510-0:e:\\Work\\Dev\\StackOverflow\\q068231412]> sopr.bat\n>    ### Set shorter prompt to better fit when pasted in StackOverflow (or other) pages ###\n>\n>    [prompt]> \"e:\\Work\\Dev\\VEnvs\\py_pc064_03.08.07_test0\\Scripts\\python.exe\" code00.py\n>    Python 3.8.7 (tags/v3.8.7:6503f05, Dec 21 2020, 17:59:51) [MSC v.1928 64 bit (AMD64)] 064bit on win32\n>\n>\n>    Function read_file_data:\n>    Len: 169\n>    First bytes:\n>       0x89 0x50 0x4E 0x47 0x0D 0x0A 0x1A 0x0A 0x00 0x00 0x00 0x0D 0x49 0x48 0x44 0x52 0x00 0x00 0x00 0x10\n>    Last bytes:\n>       0xE2 0x8A 0x24 0x69 0x53 0x4C 0xB3 0x03 0x00 0x00 0x00 0x00 0x49 0x45 0x4E 0x44 0xAE 0x42 0x60 0x82\n>    MD5: 8368b5c29a12b298cea2ad4b32955830\n>\n>    Function read_img_data:\n>    Len: 2048\n>    First bytes:\n>       0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF\n>    Last bytes:\n>       0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF\n>    MD5: ebdf44b7ad36d79b221a70ea2b0fa0c7\n>\n>    Done.\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/68231412/go-image-bytes-and-python-pil-tobytes-produce-different-byte-data",
    "body": "package main\nimport (\n    \"crypto/md5\"\n    \"fmt\"\n    \"image\"\n    \"image/draw\"\n    \"io/ioutil\"\n    \"os\"\n    _ \"image/gif\"\n    _ \"image/jpeg\"\n    _ \"image/png\"\n)\ntype ImageFunc func(string) []byte\ntype ImageFuncs []ImageFunc\nfunc ReadFileData(fileName string) []byte {\n    buf, _ := ioutil.ReadFile(fileName)\n    return buf\n}\nfunc ReadImgData(fileName string) []byte {\n    reader, _ := os.Open(fileName)\n    defer reader.Close()\n    img, _, _ := image.Decode(reader)\n    rect := img.Bounds()\n    rgba := image.NewRGBA(rect)\n    draw.Draw(rgba, rect, img, rect.Min, draw.Src)\n    //fmt.Printf(\"%v\\n\", rgba.Pix)\n    return rgba.Pix\n}\nfunc ProcessBytes(buf []byte, first int, last int) {\n    lb := len(buf)\n    fmt.Printf(\"Len: %d\\nFirst bytes:\\n  \", lb)\n    for i := 0; i < first; i++ {\n        fmt.Printf(\"0x%02X \", buf[i])\n    }\n    fmt.Printf(\"\\nLast bytes:\\n  \")\n    for i := lb - last; i < lb; i++ {\n        fmt.Printf(\"0x%02X \", buf[i])\n    }\n    fmt.Printf(\"\\nMD5: %x\", md5.Sum(buf))\n}\nfunc main() {\n    imgName := \"rb.png\"\n    first := 20\n    last := 20\n    funcs := ImageFuncs{\n        ReadFileData,\n        ReadImgData,\n    }\n    for idx := range funcs {\n        function := funcs[idx]\n        fmt.Printf(\"\\n\\nFunction %#v:\\n\", function)\n        b := function(imgName)\n        ProcessBytes(b, first, last)\n    }\n    fmt.Printf(\"\\n\\nDone.\\n\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68231412/go-image-bytes-and-python-pil-tobytes-produce-different-byte-data",
    "body": ">    [prompt]> \"f:\\Install\\pc064\\Google\\GoLang\\1.16.5\\bin\\go.exe\" run code00.go\n>\n>\n>    Function (main.ImageFunc)(0x9f1060):\n>    Len: 169\n>    First bytes:\n>      0x89 0x50 0x4E 0x47 0x0D 0x0A 0x1A 0x0A 0x00 0x00 0x00 0x0D 0x49 0x48 0x44 0x52 0x00 0x00 0x00 0x10\n>    Last bytes:\n>      0xE2 0x8A 0x24 0x69 0x53 0x4C 0xB3 0x03 0x00 0x00 0x00 0x00 0x49 0x45 0x4E 0x44 0xAE 0x42 0x60 0x82\n>    MD5: 8368b5c29a12b298cea2ad4b32955830\n>\n>    Function (main.ImageFunc)(0x9f10e0):\n>    Len: 2048\n>    First bytes:\n>      0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF 0xED 0x1C 0x24 0xFF\n>    Last bytes:\n>      0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF 0x00 0x00 0xFF 0xFF\n>    MD5: ebdf44b7ad36d79b221a70ea2b0fa0c7\n>\n>    Done.\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/68084178/react-client-and-golang-server-in-same-dockerfile",
    "body": "#!/bin/sh\n# Start the first process\n./zid &\nZID_PID=$!\n# Start the second process\ncd /web\nnpm start &\nWEB_PID=$!\n# Naive check runs checks once a minute to see if either of the processes exited.\n# This illustrates part of the heavy lifting you need to do if you want to run\n# more than one service in a container. The container exits with an error\n# if it detects that either of the processes has exited.\n# Otherwise it loops forever, waking up every 60 seconds\nwhile sleep 60; do\n  ps -fp $ZID_PID\n  ZID_PROCESS_STATUS=$?\n  if [ $ZID_PROCESS_STATUS -ne 0 ]; then\n    echo \"ZID process has already exited.\"\n    exit 1\n  fi\n\n  ps -fp $WEB_PID\n  WEB_PROCESS_STATUS=$?\n  if [ $WEB_PROCESS_STATUS -ne 0 ]; then\n    echo \"WEB process has already exited.\"\n    exit 1\n  fi\ndone"
  },
  {
    "url": "https://stackoverflow.com/questions/68084178/react-client-and-golang-server-in-same-dockerfile",
    "body": "# Build the Go API\nFROM golang:latest as go_builder\nRUN mkdir /zid\nWORKDIR /zid\nCOPY . /zid\nRUN GOOS=linux GOARCH=amd64 go build -a -ldflags \"-linkmode external -extldflags '-static' -s -w\" -o /go/bin/zid\n# Build the React application\nFROM node:alpine as node_builder\nCOPY --from=go_builder /zid/web ./web\nWORKDIR /web\nRUN npm install\n# Final stage build, this will be the container with Go and React\nFROM node:alpine\nRUN apk --no-cache add ca-certificates procps\nCOPY --from=go_builder /go/bin/zid /go/zid\nCOPY --from=go_builder /zid/static /go/static\nCOPY --from=go_builder /zid/ca /go/ca\nCOPY --from=node_builder /web /web\nCOPY --from=go_builder /zid/start.sh /go/start.sh\nRUN chmod +x /go/start.sh\nEXPOSE 3000 10000\nWORKDIR /go\nCMD ./start.sh"
  },
  {
    "url": "https://stackoverflow.com/questions/67817746/get-s3-bucket-size-from-aws-go-sdk",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\n// iterate all objects in a given S3 bucket and prefix, sum up objects' total size in bytes\n// use: size, err := S3ObjectsSize(\"example-bucket-name\", \"/a/b/c\")\nfunc S3ObjectsSize(bucket string, prefix string, s3client S3Client) (int64, error) {\n\toutput, err := s3client.ListObjectsV2(context.TODO(), &s3.ListObjectsV2Input{\n\t\tBucket: aws.String(bucket),\n\t\tPrefix: aws.String(prefix),\n\t})\n\tif err != nil {\n\t\treturn -1, fmt.Errorf(\"cannot ListObjectsV2 in %s/%s: %s\", bucket, prefix, err.Error())\n\t}\n\tvar size int64\n\tfor _, object := range output.Contents {\n\t\tsize += object.Size\n\t}\n\treturn size, nil\n}\n// stub of s3.Client for dependency injection\ntype S3Client interface {\n\tListObjectsV2(ctx context.Context, params *s3.ListObjectsV2Input, optFns ...func(*s3.Options)) (*s3.ListObjectsV2Output, error)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67369923/golang-json-in-html-script-tag",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"text/template\"\n)\ntype Student struct {\n\tId   string `json:\"id\"`\n\tName string `json:\"name\"`\n}\nfunc main() {\n\temailModel, err := json.Marshal(Student{Id: \"m\", Name: \"k\"})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttr, err := template.New(\"tr\").Parse(\"<html><body><script type=\\\"application/ld+json\\\">{{.}}</script></body></html>\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar doc bytes.Buffer\n\terr = tr.Execute(&doc, string(emailModel))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\temailHtmlContent := doc.String()\n\tfmt.Println(emailHtmlContent)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67199570/gorm-beforecreate-hook-is-not-working-to-generate-a-uuid",
    "body": "package main\nimport (\n    \"fmt\"\n    \"gorm.io/driver/sqlite\"\n    \"gorm.io/gorm\"\n)\ntype User struct {\n    Id int\n    Name string\n}\nfunc (u *User) BeforeCreate(tx *gorm.DB) (err error) {\n    u.Name = \"Steve\"\n    return\n}\nfunc (u *User) BeforeSave(tx *gorm.DB) (err error) {\n    u.Name = \"Sally\"\n    return\n}\nfunc main() {\n    db, err := gorm.Open(sqlite.Open(\"hooks.db\"), &gorm.Config{})\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n    db.AutoMigrate(&User{})\n    user := User{\n        Name: \"Blake\",\n    }\n    db.Create(&user)\n    fmt.Println(user.Name)\n    user.Name = \"Tyler\"\n    db.Save(&user)\n    fmt.Println(user.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67112451/install-list-of-charts-in-parallel-with-ok-status",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"sync\"\n)\nfunc main() {\n\tkcfgFilePath := tmpfile.Name()\n\tsettings := cli.New()\n\tac := new(action.Configuration)\n\tclientGetter := genericclioptions.NewConfigFlags(false)\n\tclientGetter.KubeConfig = &kcfgFilePath\n\tvar wg sync.WaitGroup\n\tfor _, chartInstallation := range charts {\n        wg.Add(1)\n\t\tgo installChart(&wg, chartInstallation.Path)\n\t}\n\tfmt.Println(\"Installing...\")\n\twg.Wait()\n\tfmt.Println(\"Installed!\")\n}\nfunc installChart(wg *sync.WaitGroup, chartInstallationPath string) error {\n\tdefer wg.Done()\n\tchart, err := loader.Load(chartInstallationPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\treleaseName := releaseName + \"-\" + chartInstallation.Name\n\tif err := ac.Init(clientGetter, settings.Namespace(), os.Getenv(\"HELM_DRIVER\"), func(format string, v ...interface{}) {\n\t}); err != nil {\n\t\treturn err\n\t}\n\treleasePresent := true\n\tstatusAction := action.NewStatus(ac)\n\tstatus, err := statusAction.Run(releaseName)\n\tif err != nil {\n\t\tif strings.Contains(err.Error(), driver.ErrReleaseNotFound.Error()) {\n\t\t\treleasePresent = false\n\t\t} else {\n\t\t\treturn err\n\t\t}\n\t}\n\tif !releasePresent {\n\t\t// install chart\n\t\tinstallAction := action.NewInstall(ac)\n\t\tinstallAction.CreateNamespace = true\n\t\tinstallAction.Namespace = chartInstallation.Namespace\n\t\tinstallAction.ReleaseName = releaseName\n\t\t_, err := installAction.Run(chart, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Info(\"chart installed: \", \"releaseName\", releaseName)\n\t}\n\tif status != nil {\n\t\tif releasePresent && status.Info.Status.String() == release.StatusFailed.String() {\n\t\t\tupgradeAction := action.NewUpgrade(ac)\n\t\t\t// HERE IT WAIT FOR THE CHART TO VERIFY THAT EVERYTHING IS UP\n\t\t\tupgradeAction.Wait = true\n\t\t\tupgradeAction.ReuseValues = false\n\t\t\tupgradeAction.Recreate = false\n\t\t\t_, err := upgradeAction.Run(releaseName, chart, nil)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67004643/cors-set-cookie-header-present-in-response-but-cookie-isnt-created",
    "body": "func Login(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\t// In case you don't have separate CORS middleware\n\tif r.Method == http.MethodOptions {\n\t\theader := w.Header()\n\t    header.Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t    header.Set(\"Access-Control-Allow-Headers\", \"Content-Type, withCredentials\")\n\t    header.Set(\"Access-Control-Allow-Origin\", \"http://localhost:3000\")\n\t    header.Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\")\n\t    w.WriteHeader(http.StatusOK)\n\t    return\n\t}\n\n    http.SetCookie(w, &http.Cookie{Name: \"sabor\", Value: \"merda\", Path: \"/\", HttpOnly: false, SameSite: http.SameSiteNoneMode, Secure: false, Domain: \"localhost\"})\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66830301/bit-manipulation-golang",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tfmt.Println(NodeID{0xFF}.PrefixLen()) // 0\n\tfmt.Println(NodeID{0x7F}.PrefixLen()) // 1\n\tfmt.Println(NodeID{0x3F}.PrefixLen()) // 2\n\tfmt.Println(NodeID{0x1F}.PrefixLen()) // 3\n\tfmt.Println(NodeID{0x0F}.PrefixLen()) // 4\n\t// ...\n\tfmt.Println(NodeID{0x00, 0x00, 0x05}.PrefixLen()) // 21\n\t// ...\n\tfmt.Println(NodeID{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}.PrefixLen()) // 159\n\tfmt.Println(NodeID{}.PrefixLen()) // 159\n}\nconst IdLength = 20\ntype NodeID [IdLength]byte\nfunc (node NodeID) PrefixLen() (ret int) {\n\tfor i := 0; i < IdLength; i++ {\n\t\tfor j := 0; j < 8; j++ {\n\t\t\tif (node[i]>>uint8(7-j))&0x1 != 0 {\n\t\t\t\treturn i*8 + j\n\t\t\t}\n\t\t}\n\t}\n\treturn IdLength*8 - 1\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66629509/send-multiple-messages-to-one-channel-in-go-for-collating",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\ntype event struct {\n\tdata      chan string\n\tnumWorker int\n}\nfunc (e event) Send() {\n\tvar wg sync.WaitGroup\n\t// Spaw numWorker goroutines that sends message to\n\t// the same channel.\n\tfor i := 0; i < e.numWorker; i++ {\n\t\twg.Add(1)\n\t\tgo func(id int) {\n\t\t\t// Do some fake work\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\te.data <- fmt.Sprintf(\"message from go #%d\", id)\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\t// Wait for goroutines to finish their work.\n\twg.Wait()\n\t// Close the channel to signal Recv to stop ranging\n\t// over the channel.\n\tclose(e.data)\n}\nfunc (e event) Recv() {\n\t// Range over the data channel to receive message(s).\n\tfor msg := range e.data {\n\t\tfmt.Println(msg)\n\t}\n}\nfunc main() {\n\te := event{\n\t\tnumWorker: 10, // Number of worker goroutine(s)\n\t\tdata:      make(chan string, 5 /* Buffer Size */),\n\t}\n\t// Spawn a goroutine for Send\n\tgo e.Send()\n\t// Recv receives data from Send\n\te.Recv()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66133879/reuse-struct-while-parsing-json-with-gorm",
    "body": "type Order struct {\n\tID                     int64    `json:\"id,omitempty\"`\n\tOrderStatusURL         string   `json:\"order_status_url,omitempty\"`\n\tPresentmentCurrency    string   `json:\"presentment_currency,omitempty\"`\n\tTotalLineItemsPriceSet PriceSet `json:\"total_line_items_price_set,omitempty\" gorm:\"embedded;embeddedPrefix:total_line_items_\"`\n\tTotalDiscountSet       PriceSet `json:\"total_discounts_set,omitempty\"  gorm:\"embedded;embeddedPrefix:total_discount_\"`\n\tTotalShippingPriceSet  PriceSet `json:\"total_shipping_price_set,omitempty\"  gorm:\"embedded;embeddedPrefix:total_shipping_\"`\n\tSubTotalPriceSet       PriceSet `json:\"subtotal_price_set,omitempty\"  gorm:\"embedded;embeddedPrefix:subtotal_\"`\n\tTotalPriceSet          PriceSet `json:\"total_price_set,omitempty\"  gorm:\"embedded;embeddedPrefix:total_\"`\n\tTotalTaxSet            PriceSet `json:\"total_tax_set,omitempty\"  gorm:\"embedded;embeddedPrefix:total_tax_\"`\n}\ntype PriceSet struct {\n\tShopMoney        CurrencyHolder `json:\"shop_money,omitempty\" gorm:\"embedded;embeddedPrefix:shop_\"`\n\tPresentmentMoney CurrencyHolder `json:\"presentment_money,omitempty\" gorm:\"embedded;embeddedPrefix:presentment_\"`\n}\ntype CurrencyHolder struct {\n\tAmount       string `json:\"amount,omitempty\"`\n\tCurrencyCode string `json:\"currency_code,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65825030/best-practice-for-error-handling-anon-functions",
    "body": "func FooHandler(w http.ResponseWriter, r *http.Request) {\n\tvar1, err := doSomething1()\n\tif err != nil {\n\t\thandleErr(w, err, http.StatusBadRequest, \"some user error msg\")\n\t\treturn\n\t}\n\tvar2, err := doSomething2()\n\tif err != nil {\n\t\thandleErr(w, err, http.StatusUnauthorized, \"some user error msg\")\n\t\treturn\n\t}\n\tvar3, err := doSomething3()\n\tif err != nil {\n\t\thandleErr(w, err, http.StatusInternalServerError, \"some user error msg\")\n\t\treturn\n\t}\n\tvar4, err := doSomething4()\n\tif err != nil {\n\t\thandleErr(w, err, http.StatusInternalServerError, \"some user error msg\")\n\t\treturn\n\t}\n\t// do successful response here\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65825030/best-practice-for-error-handling-anon-functions",
    "body": "func handleErr(f func(w http.ResponseWriter, r *http.Request) (int, error)) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tstatusCode, err := f(w, r)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tlog.Printf(\"statusCode: %d; error: %s\", statusCode, err)\n\t\tw.WriteHeader(statusCode)\n\t\tbts, err := json.Marshal(struct {\n\t\t\tError string\n\t\t}{\n\t\t\tError: err.Error(),\n\t\t})\n\t\tif err != nil {\n\t\t\t_, _ = w.Write([]byte(`{\"Error\":\"error while marshalling error response\"`))\n\t\t}\n\t\t_, _ = w.Write(bts)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65825030/best-practice-for-error-handling-anon-functions",
    "body": "func FooHandler(w http.ResponseWriter, r *http.Request) (int, error) {\n\tvar1, err := doSomething1()\n\tif err != nil {\n\t\treturn http.StatusBadRequest, fmt.Error(\"some error\")\n\t}\n\tvar2, err := doSomething2()\n\tif err != nil {\n\t\treturn http.StatusUnauthorized, fmt.Error(\"some error\")\n\t}\n\tvar3, err := doSomething3()\n\tif err != nil {\n\t\treturn http.StatusInternalServerError, fmt.Error(\"some error\")\n\t}\n\tvar4, err := doSomething4()\n\tif err != nil {\n\t\treturn http.StatusInternalServerError, fmt.Error(\"some error\")\n\t}\n\t// do successful response here\n\treturn http.StatusOK, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65646869/how-do-i-convert-c-avframe-to-image-image",
    "body": "func fromCPtr(buf unsafe.Pointer, size int) (ret []uint8) {\n\thdr := (*reflect.SliceHeader)((unsafe.Pointer(&ret)))\n\thdr.Cap = size\n\thdr.Len = size\n\thdr.Data = uintptr(buf)\n\treturn\n}\nw := int(frame.width)\nh := int(frame.height)\nys := int(frame.linesize[0])\ncs := int(frame.linesize[1])\nimg = image.YCbCr{\n    Y: fromCPtr(unsafe.Pointer(frame.data[0]), ys*h),\n    Cb: fromCPtr(unsafe.Pointer(frame.data[1]), cs*h/2),\n    Cr: fromCPtr(unsafe.Pointer(frame.data[2]), cs*h/2),\n    YStride: ys,\n    CStride: cs,\n    SubsampleRatio: image.YCbCrSubsampleRatio420,\n    Rect: image.Rect(0, 0, w, h),\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65584176/why-does-create-table-operation-attach-owner-as-yugabyte-to-a-new-table-yet-th",
    "body": "--  Shows two \"Superuser\" users: \"postgres\" and \"yugabyte\" (nothing else).\n\\du\n-- Shows two databases: \"postgres\" and \"yugabyte\" (nothing else except \"system\" databases).\n-- Both \"postgres\" and \"yugabyte\" databases are owned by \"postgres\".\n\\l\n-- Create a new \"ordinary user and connect as that user.\ncreate user rodgers login password 'p';\nalter user rodgers createdb;\n-- Now connect to database yugabyte as user rodgers\n\\c yugabyte rodgers\n-- Create a new database and check it's there.\ncreate database rog_db owner rodgers;\n\\l\n--       Name       |  Owner   | Encoding | Collate |    Ctype    |   Access privileges\n-- -----------------+----------+----------+---------+-------------+-----------------------\n   ...\n--  rog_db          | rodgers  | UTF8     | C       | en_US.UTF-8 |\n-- ...\n-- Now connect to the new \"rog_db\" database. Works fine.\n\\c rog_db rodgers\n-- Quit \"ysqlsh.\n\\q"
  },
  {
    "url": "https://stackoverflow.com/questions/65584176/why-does-create-table-operation-attach-owner-as-yugabyte-to-a-new-table-yet-th",
    "body": "-- Works fine.\ncreate table t(k int primary key);\n-- Inspect it. First \"\\d\", then \"\\d t\".\n\\d\n--         List of relations\n--  Schema | Name | Type  |  Owner\n-- --------+------+-------+---------\n--  public | t    | table | rodgers\n\\d t\n--                  Table \"public.t\"\n Column |  Type   | Collation | Nullable | Default\n-- --------+---------+-----------+----------+---------\n--  k      | integer |           | not null |\n-- Indexes:\n--     \"t_pkey\" PRIMARY KEY, lsm (k HASH)\n-- This is OK for playing. But terrible for real work.\ndrop table t;\n\\c rog_db yugabyte\ndrop schema public;\n\\c rog_db rodgers\ncreate schema rog_schema authorization rodgers;\n-- For future connect commands.\nalter user rodgers set search_path = 'rog_schema';\n-- for here and now.\nset schema 'rog_schema';\ncreate table t(k int primary key);\n\\d\n--           List of relations\n--    Schema   | Name | Type  |  Owner\n-- ------------+------+-------+---------\n--  rog_schema | t    | table | rodgers\n--------------------------------------------------------------------------------"
  },
  {
    "url": "https://stackoverflow.com/questions/65567592/are-unused-const-function-of-golang-package-included-in-executable-binary",
    "body": "package a\nconst (\n   A0 = `ZAAA0` // use this on main\n   A1 = `ZAAA1`\n   A2 = `ZAAA2`\n   A3 = `ZAAA3`\n   A4 = `ZAAA4`\n   A5 = `ZAAA5`\n   A6 = `ZAAA6`\n)\nfunc B1() string { return A1 } // call this on main\nfunc B2() string { return A2 }\nfunc B3() string { return `ZBBB3` } // call this on main\nfunc B4() string { return `ZBBB4` }\ntype C1 struct{}\nfunc (c *C1) C3() string { return A3 } // call this on main\nfunc (c *C1) C4() string { return A4 }\ntype D1 struct{}\nfunc (c *D1) D5() string { return A5 }\nfunc (c *D1) D6() string { return A6 }"
  },
  {
    "url": "https://stackoverflow.com/questions/65367660/extending-kubernetes-client-go",
    "body": "import (\n\t\"fmt\"\n\tsplitClientV1alpha1 \"github.com/servicemeshinterface/smi-sdk-go/pkg/gen/client/split/clientset/versioned/typed/split/v1alpha1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n\t\"path/filepath\"\n)\ntype MyKubeClient struct {\n\tkubernetes.Clientset\n\tsplitClientV1alpha1.SplitV1alpha1Client\n}\nfunc getClient() (*MyKubeClient, error) {\n\t// getting ./kube/config from file\n\tkubehome := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\t// Building the config from file\n\tkubeConfig, err := clientcmd.BuildConfigFromFlags(\"\", kubehome)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error loading kubernetes configuration: %w\", err)\n\t}\n\t// Creating the native client object\n\tkubeClient, err := kubernetes.NewForConfig(kubeConfig)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error creating kubernetes client: %w\", err)\n\t}\n\t// Creating another clientset exclusively for the custom resource\n\tsplitClient, err := splitClientV1alpha1.NewForConfig(kubeConfig)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error creating split client: %s\", err)\n\t}\n\treturn &MyKubeClient{\n\t\tClientset:           *kubeClient,\n\t\tSplitV1alpha1Client: *splitClient,\n\t}, nil\n}\nfunc doSomething() error {\n\tclient, err := getClient()\n\tif err != nil {\n\t\treturn err\n\t}\n\tclient.CoreV1().Pods(\"\").Create(...)\n\tclient.TrafficSplits(...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65044369/how-to-receive-publishtime",
    "body": "import (\n\t\"cloud.google.com/go/functions/metadata\"\n\t\"context\"\n\t\"log\"\n)\ntype PubSubMessage struct {\n\tData []byte `json:\"data\"`\n}\n// HelloPubSub consumes a Pub/Sub message.\nfunc HelloPubSub(ctx context.Context, m PubSubMessage) error {\n\tmeta,err := metadata.FromContext(ctx)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\tlog.Printf(\"publishTime, %s\", meta.Timestamp)\n\tlog.Printf(\"messageId, %s\", meta.EventID)\n\tlog.Printf(\"Type, %s\", meta.EventType)\n\tlog.Printf(\"Resource, %s\", meta.Resource)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64782331/cross-platform-aes-cryptlib",
    "body": "package main\nimport (\n    \"encoding/hex\"\n    \"encoding/base64\"\n    \"crypto/cipher\"\n    \"crypto/sha256\"\n    \"crypto/aes\"\n)\nfunc main() {\n    iv := \"Vmr-uU5mA2_Zr_13\"\n    key := \"<Secret_Key>\"\n    ciphertext := \"bvtkHfZiTsY0CX6QmHhCboBwXeY9RZVPpdhhdIy6aSwCTVI7YiEGha1aXTIKY4BocGdNIbWkreQHZcTk4WE6F2tQLoVyWERYCGZotbDzxxs=\"\n\n    hash := sha256.Sum256([]byte(key))\n    key = hex.EncodeToString(hash[:])[:32]\n\n    btext, err := base64.StdEncoding.DecodeString(ciphertext)\n    if err != nil {\n        println(\"Error decoding cipertext: \", err.Error())\n        return\n    }\n    aesCipher, err := aes.NewCipher([]byte(key))\n    if err != nil {\n        println(\"Error creating cipher: \", err.Error())\n        return\n    }\n    cipher.NewCBCDecrypter(aesCipher, []byte(iv)).\n        CryptBlocks(btext, btext)\n\n    println(\"Result: \", string(btext))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64459394/setting-the-size-of-the-operating-systems-receive-buffer-for-an-ipv4-packetconn",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"syscall\"\n\t\"golang.org/x/sys/unix\"\n)\nfunc control(network, address string, c syscall.RawConn) error {\n\tc.Control(func(fd uintptr) {\n\t\tif err := unix.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.SO_RCVBUF, 1024*1024); err != nil {\n\t\t\tfmt.Printf(\"Set socket receive buffer size failed: %v\\n\", err)\n\t\t}\n\t\tfmt.Printf(\"Set socket receive buffer size\\n\")\n\t})\n\treturn nil\n}\nfunc main() {\n\tlc := net.ListenConfig{Control: control}\n\tif _, err := lc.ListenPacket(context.Background(), \"udp\", \"127.0.0.1:9999\"); err != nil {\n\t\tfmt.Printf(\"ListenPacket failed: %v\\n\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64314243/what-is-the-purpose-of-having-an-empty-struct-in-a-go-struct-as-a-field",
    "body": "type MyStruct struct {\n    _struct bool    `codec:\",omitempty\"`   //set omitempty for every field\n    Field1 string   `codec:\"-\"`            //skip this field\n    Field2 int      `codec:\"myName\"`       //Use key \"myName\" in encode stream\n    Field3 int32    `codec:\",omitempty\"`   //use key \"Field3\". Omit if empty.\n    Field4 bool     `codec:\"f4,omitempty\"` //use key \"f4\". Omit if empty.\n    io.Reader                              //use key \"Reader\".\n    MyStruct        `codec:\"my1\"`          //use key \"my1\".\n    MyStruct                               //inline it\n    ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64210104/use-job-with-time-and-timeout",
    "body": "// How to use the library\npackage main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/oze4/reactor\"\n)\nfunc main() {\n\ttimeoutForJobs := time.Duration(time.Second * 10)\n\tnumOfWorkers := 10\n\tmyreactor := reactor.New(numOfWorkers, timeoutForJobs)\n\t// You can also create a Reactor with a custom Client\n\t// myreactor := reactor.NewWithClient(numOfWorkers, timeoutForJobs, &reactor.Client{...})\n\t// Add job(s)\n\tmyreactor.Add(reactor.Job{\n\t\tName: \"job1\",\n\t\tRunner: func(c *reactor.Client) reactor.React {\n\t\t\t// do something with client `c`\n\t\t\tres, _ := c.HTTP.Get(\"xyz.com\")\n\t\t\treturn reactor.React{Info: res}\n\t\t},\n\t})\n\t// All results will be here\n\tresults := myreactor.GetResults()\n\n\tfor _, result := range results {\n\t\tfmt.Println(result)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64210104/use-job-with-time-and-timeout",
    "body": "// Library code\npackage reactor\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/gammazero/workerpool\"\n\t\"k8s.io/client-go/kubernetes\"\n)\n// New creates a new Reactor\nfunc New(maxWorkers int, jobTimeout time.Duration) Reactor {\n\t// Do whatever you need to here to create default client\n\tdefaultClient := &Client{\n\t\tHTTP:       http.Client{},\n\t\tKubernetes: kubernetes.Clientset{},\n\t}\n\treturn &reactor{\n\t\tworkerPool:  workerpool.New(maxWorkers),\n\t\tjobTimeout:  jobTimeout,\n\t\ttransport:   defaultClient,\n\t\tresultsChan: make(chan React, 100),\n\t}\n}\n// NewWithClient creates a new Reactor with a custom client\nfunc NewWithClient(client *Client, maxWorkers int, jobTimeout time.Duration) Reactor {\n\treturn &reactor{\n\t\tworkerPool:  workerpool.New(maxWorkers),\n\t\tjobTimeout:  jobTimeout,\n\t\ttransport:   client,\n\t\tresultsChan: make(chan React, 100),\n\t}\n}\n// Reactor knows how to handle jobs\ntype Reactor interface {\n\tAdd(j Job)                          // Add puts a job on the queue\n\tClient() *Client                    // I dont know if you want the consumer to have access to this or not\n\tGetResults() []React                // Get results\n\tTimeout() time.Duration             // I dont know if you want the consumer to have access to this or not\n\tWorkerPool() *workerpool.WorkerPool // I dont know if you want the consumer to have access to this or not\n}\ntype reactor struct {\n\tjobTimeout  time.Duration\n\tworkerPool  *workerpool.WorkerPool\n\tresultsChan chan React\n\ttransport   *Client\n}\n// Add submits a job\nfunc (r *reactor) Add(j Job) {\n\tr.workerPool.Submit(r.wrapper(j))\n}\n// I dont know if you want the consumer to have access to this or not\nfunc (r *reactor) Client() *Client {\n\treturn r.transport\n}\n// Get results gets results\nfunc (r *reactor) GetResults() []React {\n\treturn r.getResults()\n}\nfunc (r *reactor) getResults() []React {\n\tr.workerPool.StopWait()\n\tclose(r.resultsChan)\n\tvar allReacts []React\n\tfor jobreact := range r.resultsChan {\n\t\tallReacts = append(allReacts, jobreact)\n\t}\n\treturn allReacts\n}\nfunc (r *reactor) Timeout() time.Duration {\n\treturn r.jobTimeout\n}\n// I dont know if you want the consumer to have access to this or not\nfunc (r *reactor) WorkerPool() *workerpool.WorkerPool {\n\treturn r.workerPool\n}\n// worker should be private\nfunc (r *reactor) worker(ctx context.Context, done context.CancelFunc, job Job, start time.Time) {\n\trunner := job.Runner(r.transport)\n\trunner.duration = time.Since(start)\n\trunner.name = job.Name\n\tif ctx.Err() == nil {\n\t\tr.resultsChan <- runner\n\t}\n\tdone()\n}\n// wrapper should be private\nfunc (r *reactor) wrapper(job Job) func() {\n\tctx, cancel := context.WithTimeout(context.Background(), r.jobTimeout)\n\treturn func() {\n\t\tstart := time.Now()\n\t\tgo r.worker(ctx, cancel, job, start)\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tswitch ctx.Err() {\n\t\t\tcase context.DeadlineExceeded:\n\t\t\t\tr.resultsChan <- React{\n\t\t\t\t\tError:    context.DeadlineExceeded,\n\t\t\t\t\tname:     job.Name,\n\t\t\t\t\tduration: time.Since(start),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n// React holds response data\ntype React struct {\n\t// This should be public so the consumer can set it\n\tInfo  interface{}\n\tError error\n\t// These fields should be private and handled via public methods\n\tduration time.Duration\n\tname     string\n}\n// Duration returns duration\nfunc (r *React) Duration() time.Duration {\n\treturn r.duration\n}\n// Name returns the job name\nfunc (r *React) Name() string {\n\treturn r.name\n}\n// Client holds http and kubernetes clients\ntype Client struct {\n\tHTTP       http.Client\n\tKubernetes kubernetes.Clientset\n}\n// Job holds job data\ntype Job struct {\n\tName   string\n\tRunner func(*Client) React\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64210104/use-job-with-time-and-timeout",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/gammazero/workerpool\"\n)\nvar (\n\t//\n\t// Set timeout for all jobs here\n\t//\n\tjobTimeout = time.Duration(time.Second * 1)\n)\n// MyReturnType could be anything you want it to be\ntype MyReturnType struct {\n\tname              string\n\tData              interface{}\n\tError             error\n\tExecutionDuration time.Duration\n}\n// Name returns name. It is written like this so the consumer\n// cannot change the name outside of supplying one via the Job\nfunc (m *MyReturnType) Name() string {\n\treturn m.name\n}\n// Job holds job data\ntype Job struct {\n\tName string\n\tTask func() MyReturnType\n}\nfunc wrapJob(timeout time.Duration, resultsChan chan MyReturnType, job Job) func() {\n\ttimeoutContext, timeoutCancel := context.WithTimeout(context.Background(), timeout)\n\treturn func() {\n\t\ttimerStart := time.Now()\n\t\tgo func(ctx context.Context, done context.CancelFunc, resChan chan MyReturnType, todo Job, startTime time.Time) {\n\t\t\tresult := todo.Task()\n\t\t\tresult.ExecutionDuration = time.Since(startTime)\n\t\t\tresult.name = todo.Name\n\t\t\tif timeoutContext.Err() == nil {\n\t\t\t\tresChan <- result\n\t\t\t}\n\t\t\tdone()\n\t\t}(timeoutContext, timeoutCancel, resultsChan, job, timerStart)\n\t\tselect {\n\t\tcase <-timeoutContext.Done():\n\t\t\tswitch timeoutContext.Err() {\n\t\t\tcase context.DeadlineExceeded:\n\t\t\t\tresultsChan <- MyReturnType{\n\t\t\t\t\tname:              job.Name,\n\t\t\t\t\tError:             context.DeadlineExceeded,\n\t\t\t\t\tExecutionDuration: time.Since(timerStart),\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nfunc main() {\n\tjobs := []Job{\n\t\t{\n\t\t\tName: \"job1\",\n\t\t\tTask: func() MyReturnType {\n\t\t\t\t// This will surpass our timeout and should get cancelled\n\t\t\t\ttime.Sleep(time.Second * 3)\n\t\t\t\t// Don't have to set the name here\n\t\t\t\treturn MyReturnType{Data: map[string]string{\"Whatever\": \"You want\"}}\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName: \"job2\",\n\t\t\tTask: func() MyReturnType {\n\t\t\t\t// This job will succeed\n\t\t\t\ttime.Sleep(time.Millisecond * 300)\n\t\t\t\tresultFromCurl := \"i am a result\"\n\t\t\t\treturn MyReturnType{Data: resultFromCurl}\n\t\t\t},\n\t\t},\n\t}\n\tjobResultsChannel := make(chan MyReturnType, len(jobs))\n\tpool := workerpool.New(10)\n\tfor _, job := range jobs {\n\t\tpool.Submit(wrapJob(jobTimeout, jobResultsChannel, job))\n\t}\n\tpool.StopWait()\n\tclose(jobResultsChannel)\n\t// Do whatever you want with results\n\tfor jobResult := range jobResultsChannel {\n\t\tif jobResult.Error != nil {\n\t\t\tfmt.Printf(\"[took '%d' ms] '%s' : JobError : %s\\n\", jobResult.ExecutionDuration, jobResult.Name(), jobResult.Error)\n\t\t} else {\n\t\t\tfmt.Printf(\"[took '%d' ms] '%s' : JobSuccess : %s\\n\", jobResult.ExecutionDuration, jobResult.Name(), jobResult.Data)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64210104/use-job-with-time-and-timeout",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/gammazero/workerpool\"\n)\ntype MyReturnType struct {\n\tName string\n    Data interface{}\n    Time time.Duration\n}\nfunc wrapJob(rc chan MyReturnType, f func() MyReturnType) func() {\n    return func() {\n        start := time.Now()\n        result := f()\n        result.Time = time.Since(start)\n        rc <- result\n    }\n}\nfunc main() {\n\tjobs := []func() MyReturnType{\n\t\tfunc() MyReturnType {\n            time.Sleep(time.Millisecond*400)\n\t\t\treturn MyReturnType{Name: \"job1\", Data: map[string]string{\"Whatever\": \"You want\"}}\n\t\t},\n\t\tfunc() MyReturnType {\n\t\t\tresultFromCurl := \"i am a result\"\n\t\t\treturn MyReturnType{Name: \"job2\", Data: resultFromCurl}\n\t\t},\n\t}\n\tresults := make(chan MyReturnType, len(jobs))\n\tpool := workerpool.New(10)\n\tfor _, job := range jobs {\n\t\tj := job\n\t\tpool.Submit(wrapJob(results, j))\n\t}\n\tpool.StopWait()\n\tclose(results)\n\tfor res := range results {\n        fmt.Printf(\"[took '%d' ms] \", res.Time)\n        fmt.Println(res)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64032756/how-to-pass-values-from-handler-to-middleware-in-golang",
    "body": "func main() {\n    //firstHandler ➡️ activity ➡️ lastHandler`\n\thttp.Handle(\"/\", firstHandler(activity(lastHandler())))\n\thttp.ListenAndServe(\":80\", nil)\n}\nfunc firstHandler(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tv := map[string]string{\n\t\t\t\"created_by\": CreatedBy,\n\t\t\t\"name\":       Name,\n\t\t}\n\t\trcopy := r.WithContext(context.WithValue(r.Context(), \"result\", v))\n\t\tnext.ServeHTTP(w, rcopy)\n\t})\n}\nfunc activity(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tresult := getParams(r.Context())\n\t\tfmt.Println(\"activity result\", result)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\nfunc lastHandler() http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tresult := getParams(r.Context())\n\t\tfmt.Println(\"last result\", result)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63622995/how-to-use-gomock-or-similar-to-mock-verify-calls-to-the-db",
    "body": "package mocks\nimport (\n\t\"github.com/mrdulin/golang/src/stackoverflow/63622995/db\"\n\t\"github.com/stretchr/testify/mock\"\n)\ntype MockedOrmDB struct {\n\tmock.Mock\n}\nfunc (s *MockedOrmDB) Table(name string) db.OrmDB {\n\targs := s.Called(name)\n\treturn args.Get(0).(db.OrmDB)\n}\nfunc (s *MockedOrmDB) Where(query interface{}, args ...interface{}) db.OrmDB {\n\targuments := s.Called(query, args)\n\treturn arguments.Get(0).(db.OrmDB)\n}\nfunc (s *MockedOrmDB) Scan(dest interface{}) *db.OrmDBWithError {\n\targs := s.Called(dest)\n\treturn args.Get(0).(*db.OrmDBWithError)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63622995/how-to-use-gomock-or-similar-to-mock-verify-calls-to-the-db",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/google/uuid\"\n\t\"github.com/mrdulin/golang/src/stackoverflow/63622995/db\"\n\t\"github.com/mrdulin/golang/src/stackoverflow/63622995/mocks\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n)\nfunc TestOrderPersister_GetOrder(t *testing.T) {\n\tassert := assert.New(t)\n\tt.Run(\"should get order\", func(t *testing.T) {\n\t\ttestDb := new(mocks.MockedOrmDB)\n\t\tid := uuid.New()\n\t\ttestDb.\n\t\t\tOn(\"Table\", \"orders\").\n\t\t\tReturn(testDb).\n\t\t\tOn(\"Where\", \"order_id = ?\", mock.Anything).\n\t\t\tReturn(testDb).\n\t\t\tOn(\"Scan\", mock.Anything).Run(func(args mock.Arguments) {\n\t\t\tret := args.Get(0).(*Order)\n\t\t\tret.order_id = \"123\"\n\t\t}).\n\t\t\tReturn(&db.OrmDBWithError{Error: nil})\n\t\top := OrderPersister{DB: testDb}\n\t\tgot, err := op.GetOrder(id)\n\t\ttestDb.AssertExpectations(t)\n\t\tassert.Nil(err)\n\t\tassert.Equal(Order{order_id: \"123\"}, *got)\n\t})\n\tt.Run(\"should return error\", func(t *testing.T) {\n\t\ttestDb := new(mocks.MockedOrmDB)\n\t\tid := uuid.New()\n\t\ttestDb.\n\t\t\tOn(\"Table\", \"orders\").\n\t\t\tReturn(testDb).\n\t\t\tOn(\"Where\", \"order_id = ?\", mock.Anything).\n\t\t\tReturn(testDb).\n\t\t\tOn(\"Scan\", mock.Anything).\n\t\t\tReturn(&db.OrmDBWithError{Error: errors.New(\"network\")})\n\t\top := OrderPersister{DB: testDb}\n\t\tgot, err := op.GetOrder(id)\n\t\ttestDb.AssertExpectations(t)\n\t\tassert.Equal(Order{}, *got)\n\t\tassert.Equal(err.Error(), \"network\")\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63622995/how-to-use-gomock-or-similar-to-mock-verify-calls-to-the-db",
    "body": "=== RUN   TestOrderPersister_GetOrder\n=== RUN   TestOrderPersister_GetOrder/should_get_order\n    TestOrderPersister_GetOrder/should_get_order: main_test.go:32: PASS:\tTable(string)\n    TestOrderPersister_GetOrder/should_get_order: main_test.go:32: PASS:\tWhere(string,string)\n    TestOrderPersister_GetOrder/should_get_order: main_test.go:32: PASS:\tScan(string)\n=== RUN   TestOrderPersister_GetOrder/should_return_error\n    TestOrderPersister_GetOrder/should_return_error: main_test.go:49: PASS:\tTable(string)\n    TestOrderPersister_GetOrder/should_return_error: main_test.go:49: PASS:\tWhere(string,string)\n    TestOrderPersister_GetOrder/should_return_error: main_test.go:49: PASS:\tScan(string)\n--- PASS: TestOrderPersister_GetOrder (0.00s)\n    --- PASS: TestOrderPersister_GetOrder/should_get_order (0.00s)\n    --- PASS: TestOrderPersister_GetOrder/should_return_error (0.00s)\nPASS\nProcess finished with exit code 0"
  },
  {
    "url": "https://stackoverflow.com/questions/63535380/how-to-stream-video-capture-to-web",
    "body": "package mjpeg\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\n// Stream represents a single video feed.\ntype Stream struct {\n\tm             map[chan []byte]bool\n\tframe         []byte\n\tlock          sync.Mutex\n\tFrameInterval time.Duration\n}\nconst boundaryWord = \"MJPEGBOUNDARY\"\nconst headerf = \"\\r\\n\" +\n\t\"--\" + boundaryWord + \"\\r\\n\" +\n\t\"Content-Type: image/jpeg\\r\\n\" +\n\t\"Content-Length: %d\\r\\n\" +\n\t\"X-Timestamp: 0.000000\\r\\n\" +\n\t\"\\r\\n\"\n// ServeHTTP responds to HTTP requests with the MJPEG stream, implementing the http.Handler interface.\nfunc (s *Stream) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tlog.Println(\"Stream:\", r.RemoteAddr, \"connected\")\n\tw.Header().Add(\"Content-Type\", \"multipart/x-mixed-replace;boundary=\"+boundaryWord)\n\tc := make(chan []byte)\n\ts.lock.Lock()\n\ts.m[c] = true\n\ts.lock.Unlock()\n\tfor {\n\t\ttime.Sleep(s.FrameInterval)\n\t\tb := <-c\n\t\t_, err := w.Write(b)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.lock.Lock()\n\tdelete(s.m, c)\n\ts.lock.Unlock()\n\tlog.Println(\"Stream:\", r.RemoteAddr, \"disconnected\")\n}\n// UpdateJPEG pushes a new JPEG frame onto the clients.\nfunc (s *Stream) UpdateJPEG(jpeg []byte) {\n\theader := fmt.Sprintf(headerf, len(jpeg))\n\tif len(s.frame) < len(jpeg)+len(header) {\n\t\ts.frame = make([]byte, (len(jpeg)+len(header))*2)\n\t}\n\tcopy(s.frame, header)\n\tcopy(s.frame[len(header):], jpeg)\n\ts.lock.Lock()\n\tfor c := range s.m {\n\t\t// Select to skip streams which are sleeping to drop frames.\n\t\t// This might need more thought.\n\t\tselect {\n\t\tcase c <- s.frame:\n\t\tdefault:\n\t\t}\n\t}\n\ts.lock.Unlock()\n}\n// NewStream initializes and returns a new Stream.\nfunc NewStream() *Stream {\n\treturn &Stream{\n\t\tm:             make(map[chan []byte]bool),\n\t\tframe:         make([]byte, len(headerf)),\n\t\tFrameInterval: 50 * time.Millisecond,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63535380/how-to-stream-video-capture-to-web",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/hybridgroup/mjpeg\"\n\t_ \"github.com/hybridgroup/mjpeg\"\n\t\"gocv.io/x/gocv\"\n)\nfunc main() {\n\tdeviceID := 0\n\twebcam, err := gocv.OpenVideoCapture(deviceID)\n\tif err != nil {\n\t\tfmt.Printf(\"Error opening video capture device: %v\\n\", deviceID)\n\t\treturn\n\t}\n\t// create the mjpeg stream\n\tstream := mjpeg.NewStream()\n\t// start capturing\n\tgo func(webcam *gocv.VideoCapture, stream *mjpeg.Stream) {\n\t\tdefer webcam.Close()\n\t\twindow := gocv.NewWindow(\"Capture Window\")\n\t\tdefer window.Close()\n\t\timg := gocv.NewMat()\n\t\tdefer img.Close()\n\t\tfmt.Printf(\"Start reading device: %v\\n\", deviceID)\n\t\tfor {\n\t\t\tif ok := webcam.Read(&img); !ok {\n\t\t\t\tfmt.Printf(\"Device closed: %v\\n\", deviceID)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif img.Empty() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tbuf, _ := gocv.IMEncode(\".jpg\", img)\n\t\t\tstream.UpdateJPEG(buf)\n\t\t\twindow.IMShow(img)\n\t\t\tif window.WaitKey(1) == 27 { // 27 => Esc\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}(webcam, stream)\n\thttp.Handle(\"/\", stream)\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62875248/problem-understanding-golang-concurrency-code",
    "body": "// a goroutine is created and c is empty. because\n    // the code of `squares` act as a consumer, the goroutine\n    // \"block\" at instruction `num := <-c`, but not the main goroutine\n    go squares(c)\n\n    // 1 is pushed to the channel. Till \"c\" is not full the main goroutine\n    // doesn't block but the other goroutine may be \"released\"\n    c <- 1\n    // if goroutine of squares has not consume 1 yet, main goroutine block\n    // untill so, but is released just after\n    c <- 2\n    // it continues with same logic\n    c <- 3\n    c <- 4\n    // till main goroutine encountered `<- c` (instruction I added) .\n    // Here, it behave as a consumer of \"c\". At this point all\n    // goroutine are waiting as consuler on \"c\" => deadlock"
  },
  {
    "url": "https://stackoverflow.com/questions/62387069/golang-parse-raw-http-2-response",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\nfunc main() {\n\tfmt.Println(\"Hello, playground\")\n\treq, _ := http.NewRequest(\"GET\", \"https://google.com\", nil)\n\t{\n\t\tresp, err := http.ReadResponse(bufio.NewReader(bytes.NewBuffer(httpbody)), req)\n\t\tfmt.Println(resp, err)\n\t\t// err is malformed HTTP version \"HTTP/2\", because http.ParseHTTPVersion not parse \"HTTP/2\"\n\t}\n\t{\n\t\tbody := bytes.NewBuffer(httpbody)\n\t\tprefix := make([]byte, 7)\n\t\tn, err := io.ReadFull(body, prefix)\n\t\tif err != nil {\n\t\t\tpanic(\"handler err\")\n\t\t}\n\t\tfmt.Println(n, err, string(prefix))\n\t\tif string(prefix[:n]) == \"HTTP/2 \" {\n\t\t\t// fix HTTP/2 proto\n\t\t\tresp, err := http.ReadResponse(bufio.NewReader(io.MultiReader(bytes.NewBufferString(\"HTTP/2.0 \"), body)), req)\n\t\t\tfmt.Println(resp, err)\n\t\t} else {\n\t\t\t// other proto\n\t\t\tresp, err := http.ReadResponse(bufio.NewReader(io.MultiReader(bytes.NewBuffer(prefix[:n]), body)), req)\n\t\t\tfmt.Println(resp, err)\n\t\t}\n\t}\n}\nvar httpbody = []byte(`HTTP/2 301\nlocation: https://www.google.com/\ncontent-type: text/html; charset=UTF-8\ndate: Mon, 15 Jun 2020 11:08:39 GMT\nexpires: Wed, 15 Jul 2020 11:08:39 GMT\ncache-control: public, max-age=2592000\nserver: gws\ncontent-length: 220\n<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF=\"https://www.google.com/\">here</A>.\n</BODY></HTML>`)"
  },
  {
    "url": "https://stackoverflow.com/questions/61475070/is-there-a-more-efficient-function-for-finding-byte-similarities",
    "body": "func bytesSimilar2(s1 []byte, s2 []byte) []byte {\n\tl1 := len(s1)\n\tl2 := len(s2)\n\tleast := l1\n\tif least > l2 {\n\t\tleast = l2\n\t}\n\tcount := 0\n\tfor i := 0; i < least; i++ {\n\t\tif s1[i] == s2[i] {\n\t\t\tcount++\n\t\t\tcontinue\n\t\t}\n\t\tbreak\n\t}\n\tif count == 0 {\n\t\treturn []byte{}\n\t}\n\treturn s1[:count]\n}\nfunc BenchmarkBytePrefix200v1(b *testing.B) {\n\ts1 := []byte{0, 15, 136, 96, 88, 76, 0, 0, 0, 1}\n\ts2 := []byte{0, 15, 136, 96, 246, 1, 255, 255, 255, 255}\n\tb.ReportAllocs()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tbytesSimilar1(s1, s2)\n\t}\n}\nfunc BenchmarkBytePrefix200v2(b *testing.B) {\n\ts1 := []byte{0, 15, 136, 96, 88, 76, 0, 0, 0, 1}\n\ts2 := []byte{0, 15, 136, 96, 246, 1, 255, 255, 255, 255}\n\tb.ReportAllocs()\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tbytesSimilar2(s1, s2)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61416082/why-does-for-range-behaves-differently-depending-on-the-slice-struct-size",
    "body": "v22 (7) = Phi <*SomeStruct> v14 v45\n        v28 (7) = Phi <int> v16 v37\n        v23 (7) = Phi <mem> v12 v27\n        v37 (+7) = ADDQconst <int> [1] v28\n        v25 (7) = VarDef <mem> {.autotmp_7} v23\n        v26 (7) = LEAQ <*SomeStruct> {.autotmp_7} v2\n        v44 (7) = CMPQconst <flags> [1000000] v37\n        v32 (+7) = LEAQ <*SomeStruct> {.autotmp_7} [8] v2\n        v31 (+7) = ADDQconst <*SomeStruct> [8] v22\n        v29 (+7) = MOVQload <uint64> v22 v25\n        v24 (+7) = LEAQ <*SomeStruct> {.autotmp_7} [40] v2\n        v15 (+7) = ADDQconst <*SomeStruct> [40] v22\n        v46 (+7) = LEAQ <*SomeStruct> {.autotmp_7} [56] v2\n        v35 (+7) = ADDQconst <*SomeStruct> [56] v22\n        v21 (+7) = LEAQ <*SomeStruct> {.autotmp_7} [24] v2\n        v17 (+7) = ADDQconst <*SomeStruct> [24] v22\n        v39 (7) = SETL <bool> v44\n        v42 (7) = TESTB <flags> v39 v39\n        v30 (+7) = MOVQstore <mem> {.autotmp_7} v2 v29 v25\n        v41 (+7) = MOVOload <int128> [8] v22 v30\n        v20 (+7) = MOVOstore <mem> {.autotmp_7} [8] v2 v41 v30\n        v34 (+7) = MOVOload <int128> [24] v22 v20\n        v19 (+7) = MOVOstore <mem> {.autotmp_7} [24] v2 v34 v20\n        v33 (+7) = MOVOload <int128> [40] v22 v19\n        v38 (+7) = MOVOstore <mem> {.autotmp_7} [40] v2 v33 v19\n        v47 (+7) = MOVOload <int128> [56] v22 v38\n        v27 (+7) = MOVOstore <mem> {.autotmp_7} [56] v2 v47 v38"
  },
  {
    "url": "https://stackoverflow.com/questions/61313260/why-is-my-google-cloud-run-server-returning-a-cors-error",
    "body": "// Package http provides a set of HTTP Cloud Functions samples.\npackage http\nimport (\n        \"fmt\"\n        \"net/http\"\n)\n// CORSEnabledFunctionAuth is an example of setting CORS headers with\n// authentication enabled.\n// For more information about CORS and CORS preflight requests, see\n// https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request.\nfunc CORSEnabledFunctionAuth(w http.ResponseWriter, r *http.Request) {\n        // Set CORS headers for the preflight request\n        if r.Method == http.MethodOptions {\n                w.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n                w.Header().Set(\"Access-Control-Allow-Headers\", \"Authorization\")\n                w.Header().Set(\"Access-Control-Allow-Methods\", \"POST\")\n                w.Header().Set(\"Access-Control-Allow-Origin\", \"https://example.com\")\n                w.Header().Set(\"Access-Control-Max-Age\", \"3600\")\n                w.WriteHeader(http.StatusNoContent)\n                return\n        }\n        // Set CORS headers for the main request.\n        w.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n        w.Header().Set(\"Access-Control-Allow-Origin\", \"https://example.com\")\n        fmt.Fprint(w, \"Hello World!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61180950/using-an-assertion-library-with-godog-test-framework",
    "body": "package bdd\nimport (\n    \"fmt\"\n    \"github.com/cucumber/godog\"\n    \"github.com/stretchr/testify/assert\"\n)\ntype scenario struct{}\nfunc (_ *scenario) assert(a assertion, expected, actual interface{}, msgAndArgs ...interface{}) error {\n    var t asserter\n    a(&t, expected, actual, msgAndArgs...)\n    return t.err\n}\nfunc (sc *scenario) forcedFailure() error {\n    return sc.assert(assert.Equal, 1, 2)\n}\ntype assertion func(t assert.TestingT, expected, actual interface{}, msgAndArgs ...interface{}) bool\ntype asserter struct {\n    err error\n}\nfunc (a *asserter) Errorf(format string, args ...interface{}) {\n    a.err = fmt.Errorf(format, args...)\n}\nfunc FeatureContext(s *godog.Suite) {\n    var sc scenario\n    s.Step(\"^forced failure$\", sc.forcedFailure)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60348559/using-go-to-copy-from-one-postgres-db-to-another",
    "body": "r, w := io.Pipe()\n\twriter := make(chan error)\n\tgo func() {\n\t\tdefer w.Close()\n\t\t_, err := src.CopyTo(w, `COPY (SELECT * FROM sourceView) TO STDOUT`)\n\t\twriter <- err\n\t}()\n\treader := make(chan error)\n\tgo func() {\n\t\t_, err := dest.CopyFrom(r, \"COPY destinationTable FROM STDIN\")\n\t\treader <- err\n\t}()\n\terrWriter := <-writer\n\tif errWriter != nil {\n\t\tfmt.Printf(\"Writer (CopyTo) error: %v\", errWriter)\n\t}\n\terrReader := <-reader\n\tif errReader != nil {\n\t\tfmt.Printf(\"Reader (CopyFrom) error: %v\", errReader)\n\t}\n\tif errWriter == nil && errReader == nil {\n\t\tfmt.Println(\"All done - no errors\")\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/60209460/can-i-get-a-faunadb-documents-json-data-in-one-shot-with-go-api",
    "body": "package main\nimport (\n\t\"fmt\"\n\tf \"github.com/fauna/faunadb-go/faunadb\"\n)\ntype LabelData struct {\n\tRedirectURL   string `fauna:\"redirectURL\"`\n\tOwner         string `fauna:\"owner\"`\n\tRedirectCount int    `fauna:\"redirectCount\"`\n}\nvar (\n\tdata = f.ObjKey(\"data\")\n\tref  = f.ObjKey(\"ref\")\n)\nfunc main() {\n\tvar labelId f.RefV\n\tconfig := f.Endpoint(\"http://localhost:8443\")\n\tclient := f.NewFaunaClient(\"secret\", config)\n\tlabelData := LabelData{\n\t\tRedirectURL:   \"\",\n\t\tOwner:         \"\",\n\t\tRedirectCount: 0,\n\t}\n\t// Create a collection to store labels\n\t_, _ = client.Query(f.CreateCollection(f.Obj{\"name\": \"label\"}))\n\n\tnewlabel, err := client.Query(\n\t\tf.Create(\n\t\t\tf.Collection(\"label\"),\n\t\t\tf.Obj{\"data\": labelData},\n\t\t),\n\t)\n\tif err != nil {\n\t\treturn\n\t}\n\n\t// Get generated label ID\n\t_ = newlabel.At(ref).Get(&labelId)\n\tfmt.Println(labelId)\n\t// Retrieve label by its ID\n\tvalue, _ := client.Query(f.Get(labelId))\n\tvar newLabelData LabelData\n\t_ = value.At(data).Get(&newLabelData)\n\tfmt.Println(newLabelData.RedirectURL)\n\tfmt.Println(newLabelData.Owner)\n\tfmt.Println(newLabelData.RedirectCount)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60050395/cant-get-data-with-gorm",
    "body": "type Productos struct {\n\tgorm.Model\n    // Remove the ProductoID field if you want to use the default gorm Model\n    // ProductoID int     `gorm:\"type:int, primary_key\"`\n\tStock       int     `gorm:\"type:int\"`\n\tCodigo      string  `gorm:\"type:varchar(45)\"`\n\tRubro       string  `gorm:\"type:varchar(100)\" `\n\tDescripcion string  `gorm:\"type:varchar(140)\" `\n\tProveedores string  `gorm:\"type:varchar(250)\" `\n\tMoneda      string  `gorm:\"type:varchar(10)\" `\n\tCosto       float32 `gorm:\"type:decimal\" `\n\tIva         float32 `gorm:\"type:decimal\" `\n\tPedir       bool    `gorm:\"type:tinyint\" `\n}\nfunc main() {\n\tdb, err := gorm.Open(\"mysql\", \"root:admin123@/test?charset=utf8&parseTime=True&loc=Local\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\tif !db.HasTable(&Productos{}) {\n\t\tif err := db.AutoMigrate(&Productos{}).Error; err != nil {\n\t\t}\n        db.Create(&Productos{\n\t\t\tStock:       2,\n\t\t\tCodigo:      \"a\",\n\t\t\tRubro:       \"b\",\n\t\t\tDescripcion: \"c\",\n\t\t\tProveedores: \"d\",\n\t\t\tMoneda:      \"e\",\n\t\t\tCosto:       0,\n\t\t\tIva:         0,\n\t\t})\n\t}\n\tproducto := &Productos{}\n\tdb.First(producto)\n\tfmt.Printf(\"%+v\\n\", producto)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59507580/how-to-store-byte-as-binary-in-mongodb-using-go-mongo-driver",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Hash [4]byte\ntype Model struct {\n\tKey Hash `bson:\"key\"`\n}\nfunc main() {\n\tclient, err := mongo.NewClient(options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\terr = client.Connect(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb := client.Database(\"database\")\n\tcollection := db.Collection(\"collection\")\n\t// insert as plain []byte slice\n\t_, err = collection.InsertOne(ctx, bson.M{\"key\": [4]byte{1, 2, 3, 4}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// insert h as a Hash type\n\th := Hash([4]byte{1, 2, 3, 4})\n\t_, err = collection.InsertOne(ctx, bson.M{\"key\": h})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcursor, err := collection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar all []Model\n\tif err := cursor.All(ctx, &all); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(all)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58804673/command-requires-line-break-to-finish",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os/exec\"\n\t\"time\"\n)\nfunc readLinesFromChannelWithTimeout(ch chan string, timeout time.Duration) []string {\n\tvar lines []string\n\tfor {\n\t\tselect {\n\t\tcase line, ok := <-ch:\n\t\t\tif !ok {\n\t\t\t\treturn lines\n\t\t\t} else {\n\t\t\t\tlines = append(lines, line)\n\t\t\t}\n\t\tcase <-time.After(timeout):\n\t\t\treturn lines\n\t\t}\n\t}\n}\nfunc startScanner(cmdOut io.ReadCloser) chan string {\n\tch := make(chan string)\n\tgo func(ch chan string) {\n        defer close(ch)\n\t\tscanner := bufio.NewScanner(cmdOut)\n\t\tfor scanner.Scan() {\n\t\t\tch <- scanner.Text()\n\t\t}\n\t}(ch)\n\treturn ch\n}\nfunc main() {\n\tcmd := exec.Command(\"/usr/bin/sqlite3\")\n\tcmdIn, _ := cmd.StdinPipe()\n\tcmdOut, _ := cmd.StdoutPipe()\n\tcmd.Start()\n\tch := startScanner(cmdOut)\n\tvar lines []string\n\tio.WriteString(cmdIn, \".help\\n\")\n\tlines = readLinesFromChannelWithTimeout(ch, time.Millisecond*100)\n\tfmt.Printf(\"Got %d lines from .help\\n\", len(lines))\n\tio.WriteString(cmdIn, \".show\\n\")\n\tlines = readLinesFromChannelWithTimeout(ch, time.Millisecond*100)\n\tfmt.Printf(\"Got %d lines from .show\\n\", len(lines))\n\tcmdIn.Close() // vital! Wait() will hang otherwise\n\tif err := cmd.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58610824/passing-a-struct-containing-byte-to-syscall-and-read-its-content-after-executio",
    "body": "sensigrafo := \"en\\000\" // \\000 = 0 = null termination, \\0 does not valid\noptions := \"\\000\"\n...\nuintptr(*(*unsafe.Pointer)(unsafe.Pointer(&sensigrafo))\nuintptr(*(*unsafe.Pointer)(unsafe.Pointer(&options))\n// *(*unsafe.Pointer) are accessing the first field of string header:\ntype string struct {\n    data *byte\n    len int\n}\n// same with slices\n// but for them there's less ugly way:\nsensigrafo := []byte(\"en\\000\")\noptions := []byte(\"\\000\")\nuintptr(unsafe.Pointer(&sensigrafo[0]))\nuintptr(unsafe.Pointer(&options[0]))"
  },
  {
    "url": "https://stackoverflow.com/questions/57880928/how-to-marshall-json-from-one-struct-to-another-with-different-json-tags-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype User struct {\n\tID         string `json:id`\n\tGiveName   string `json:given_name`\n\tFamilyName string `json:family_name`\n\tEmail      string `json:email`\n}\ntype UserFromMySQL struct {\n\tID        string `json:\"id\"`\n\tFirstName string `json:\"first_name\"`\n\tLastName  string `json:\"last_name\"`\n\tEmail     string `json:\"email\"`\n}\nfunc (u *UserFromMySQL) GetUser() *User {\n\treturn &User{\n\t\tID:         u.ID,\n\t\tGiveName:   u.FirstName,\n\t\tFamilyName: u.LastName,\n\t\tEmail:      u.Email,\n\t}\n}\nfunc main() {\n\tum := new(UserFromMySQL)\n\tb := []byte(`{\n   \"id\": \"123\",\n   \"first_name\": \"john\",\n   \"last_name\": \"smith\",\n   \"email\": \"js@mail.com\"\n}`)\n\terr := json.Unmarshal(b, um)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%+v\\n\", um)\n\tfmt.Printf(\"%+v\\n\", um.GetUser())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57818302/how-to-execute-method-in-a-new-process",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo f(&wg)\n\t// go do another jobs here ...\n\twg.Wait()\n\tfmt.Println(\"done\")\n}\nfunc f(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\ttime.Sleep(1 * time.Second)\n\td1 := []byte(\"hello\\ngo\\n\")\n\terr := ioutil.WriteFile(\"test\", d1, 0644)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tf, err := os.Create(\"test\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tdefer f.Close()\n\td2 := []byte{115, 111, 109, 101, 10}\n\tn2, err := f.Write(d2)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tfmt.Printf(\"wrote %d bytes\\n\", n2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57818302/how-to-execute-method-in-a-new-process",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"time\"\n)\nfunc main() {\n\tdone := make(chan struct{})\n\tgo f(done)\n\t// go do another jobs here ...\n\t<-done\n\tfmt.Println(\"done\")\n}\nfunc f(done chan struct{}) {\n\tdefer func() { done <- struct{}{} }()\n\ttime.Sleep(1 * time.Second)\n\td1 := []byte(\"hello\\ngo\\n\")\n\terr := ioutil.WriteFile(\"test\", d1, 0644)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tf, err := os.Create(\"test\")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tdefer f.Close()\n\td2 := []byte{115, 111, 109, 101, 10}\n\tn2, err := f.Write(d2)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tfmt.Printf(\"wrote %d bytes\\n\", n2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57682216/gorm-in-goroutines-freezes-if-large-query-limit",
    "body": "func main() {\n  ... // init DB connection etc\n  wg := sync.WaitGroup{}\n  defer db.Close()\n  wg.Add(1) // number of goroutines\n  go fetch(db, &wg)\n  wg.Wait() // wait for goroutines before exiting\n}\nfunc fetch(db *gotm.DB, wg *sync.WaitGroup) {\n  .... // some code counts pages, creates file etc\n  sqlLimit := 20000 // set limit\n  for i := 0; i < pages; i++ {\n    db.Table(\"reports_bookings\"),Debug().Where(sql).Offset(i * sqlLimit).Limit(sqlLimit).Find(&myModels)\n    .... // code: push it to file\n    for {} // keeps open process\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56805314/youtube-dl-download-to-client-browser-directly",
    "body": "func SearchHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Content-Disposition\", \"attachment; filename=BigBuckBunny.mp4\")\n    w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n    // or more precisely: w.Header().Set(\"Content-Type\", \"video/mp4\")\n    url := r.FormValue(\"entry-domain\")\n\n    stderr := &bytes.Buffer{}\n    cmd := exec.CommandContext(r.Context(), \"youtube-dl.exe\", \"-o\", \"-\", url)\n    cmd.Stdout = w\n    cmd.Stderr = stderr\n    if err := cmd.Run(); err != nil {\n        log.Println(err)\n        log.Println(\"stderr:\", buf.String())\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56646518/main-not-exiting-after-reading-from-channel",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\ntype PDF struct {\n\tfilename string\n\tcode     string\n\terror    error\n}\nfunc (p *PDF) GetCode() string {\n\treturn p.code\n}\nvar wg sync.WaitGroup\nfunc main() {\n\tjobs := make(chan PDF)\n\tresults := make(chan PDF)\n\tfor w := 0; w < 8; w++ {\n\t\tgo worker(jobs, results)\n\t}\n\t// PDF files to read.\n\tpdfs := []string{\"test.pdf\", \"test2.pdf\", \"test3.pdf\"}\n\tdefer func() { close(results) }()\n\tfor _, file := range pdfs {\n\t\twg.Add(1)\n\t\tjobs <- PDF{filename: file}\n\t}\n\tgo func() {\n\t\tfor i := range results {\n\t\t\tfmt.Printf(\"%s\", i.GetCode())\n\t\t}\n\t}()\n\twg.Wait()\n\tclose(jobs)\n}\nfunc worker(jobs <-chan PDF, results chan<- PDF) {\n\tfor file := range jobs {\n\t\tfmt.Printf(\"Processing %s\\n\", file.filename)\n\t\tcode, err := outputPdfText(file.filename)\n\t\tresults <- PDF{filename: file.filename, code: code, error: err}\n\t\twg.Done()\n\t}\n}\nfunc outputPdfText(inputPath string) (string, error) {\n\t// Code that reads PDF and returns value\n\treturn \"\", nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56625287/unmarshaling-xml-use-different-target-type-based-on-an-attribute-value",
    "body": "type Apple struct {\n\tColor string\n}\ntype Peach struct {\n\tSize string\n}\ntype Fruits struct {\n\tApples  []Apple\n\tPeaches []Peach\n}\ntype Element struct {\n\tXMLName xml.Name `xml:\"element\"`\n\tNodes   []struct {\n\t\tName  string `xml:\"name,attr\"`\n\t\tApple struct {\n\t\t\tColor string `xml:\"color\"`\n\t\t} `xml:\"apple\"`\n\t\tPeach struct {\n\t\t\tSize string `xml:\"size\"`\n\t\t} `xml:\"peach\"`\n\t} `xml:\"node\"`\n}\nfunc (f *Fruits) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tvar element Element\n\td.DecodeElement(&element, &start)\n\tfor _, el := range element.Nodes {\n\t\tswitch el.Name {\n\t\tcase \"apple\":\n\t\t\tf.Apples = append(f.Apples, Apple{\n\t\t\t\tColor: el.Apple.Color,\n\t\t\t})\n\t\tcase \"peach\":\n\t\t\tf.Peaches = append(f.Peaches, Peach{\n\t\t\t\tSize: el.Peach.Size,\n\t\t\t})\n\t\t}\n\t}\n\treturn nil\n}\nfunc main() {\n\tf := Fruits{}\n\terr := xml.Unmarshal([]byte(x), &f)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"Apples:\", f.Apples)\n\tfmt.Println(\"Peaches\", f.Peaches)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56317781/how-to-unmarshal-an-xml-enum-attribute-in-go",
    "body": "type EnumType int\nconst (\n\tEnumUnknown EnumType = iota\n\tEnumFoo\n\tEnumBar\n)\ntype EnumContainer struct {\n\tValue EnumType\n}\nfunc (E *EnumContainer) UnmarshalXMLAttr(attr xml.Attr) error {\n\tswitch attr.Value {\n\tcase \"foo\":\n\t\tE.Value = EnumFoo\n\tcase \"bar\":\n\t\tE.Value = EnumBar\n\tdefault:\n\t\tE.Value = EnumUnknown\n\t}\n\treturn nil\n}\n// Example of how the unmarshal could be called:\ntype Tag struct {\n\tAttribute EnumContainer `xml:\"attribute,attr\"`\n}\nfunc main() {\n\ttag := &Tag{}\n\txml.Unmarshal([]byte(\"<tag attribute=\\\"foo\\\"/>\"), tag)"
  },
  {
    "url": "https://stackoverflow.com/questions/55233520/recursively-changing-arrays-to-non-arrays-in-json-with-sjson-in-golang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\nfunc main() {\n\ts := `{\"path\":[{\"secret/foo\":[{\"capabilities\":[\"read\"]}]}]}`\n\tfmt.Println(s)\n\tvar data map[string]interface{}\n\tif err := json.Unmarshal([]byte(s), &data); err != nil {\n\t\tpanic(err)\n\t}\n\tremoveOneElementSlice(data)\n\tbuf, err := json.Marshal(data)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(buf)) //{\"a\":\"a\",\"n\":7}\n}\nfunc removeOneElementSlice(data map[string]interface{}) {\n\tfor k, v := range data {\n\t\tswitch t := v.(type) {\n\t\tcase []interface{}:\n\t\t\tif len(t) == 1 {\n\t\t\t\tdata[k] = t[0]\n\t\t\t\tif v, ok := data[k].(map[string]interface{}); ok {\n\t\t\t\t\tremoveOneElementSlice(v)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55030681/extracting-all-the-txt-records-of-a-particular-domain",
    "body": "$ dig +ignore +bufsize=512 geckoboard.com txt\n; <<>> DiG 9.10.3-P4-Debian <<>> +ignore +bufsize=512 geckoboard.com txt\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 60761\n;; flags: qr tc rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1200\n;; QUESTION SECTION:\n;geckoboard.com.\t\t\tIN\tTXT\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#53(127.0.0.1)\n;; WHEN: Wed Mar 06 20:39:31 CET 2019\n;; MSG SIZE  rcvd: 43"
  },
  {
    "url": "https://stackoverflow.com/questions/54823690/why-does-kubernetes-internally-use-string-pointers-rather-than-strings",
    "body": "package main\nimport \"fmt\"\nfunc stringPointer(s string) *string {\n    return &s\n}\ntype Config struct {\n    String  string\n    Pointer *string\n}\nfunc NewConfig() Config {\n    return Config{\n        String:  \"default\",\n        Pointer: stringPointer(\"default\"),\n    }\n}\nvar (\n    config = NewConfig()\n    String  = config.String\n    Pointer = config.Pointer\n)\nfunc PrintVars() {\n    fmt.Printf(\"config.String: %v\\n\", config.String)\n    fmt.Printf(\"config.Pointer: %v\\n\", *config.Pointer)\n    fmt.Printf(\"String: %v\\n\", String)\n    fmt.Printf(\"Pointer: %v\\n\", *Pointer)\n    fmt.Println(\"-------------------------\")\n}\nfunc main() {\n    PrintVars()\n    config.String = \"new value\"\n    *config.Pointer = \"new value\"\n    PrintVars()\n    String = \"even newer value\"\n    *Pointer = \"even newer value\"\n    PrintVars()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54618541/decoding-bmp-images-from-stdout-using-go-image-library",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"image\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t_ \"golang.org/x/image/bmp\"\n)\nfunc main() {\n\tcmd := exec.Command(\n\t\t\"docker\", \"run\",\n\t\t\"--rm\",\n\t\t\"mwader/static-ffmpeg\",\n\t\t\"-ss\", \"5\",\n\t\t\"-f\", \"lavfi\",\n\t\t\"-i\", \"testsrc\",\n\t\t\"-frames:v\", \"1\",\n\t\t\"-f\", \"image2\",\n\t\t\"-vcodec\", \"bmp\",\n\t\t\"pipe:1\",\n\t)\n\tvar out bytes.Buffer\n\tcmd.Stderr = os.Stderr\n\tcmd.Stdout = &out\n\terr := cmd.Run()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\timg, imgFormat, imgErr := image.Decode(&out)\n\tlog.Printf(\"img.Bounds(): %#+v\\n\", img.Bounds())\n\tlog.Printf(\"imgFormat: %#+v\\n\", imgFormat)\n\tlog.Printf(\"imgErr: %#+v\\n\", imgErr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54490304/xml-parsing-returns-string-with-newlines",
    "body": "Location: https://www.washingtonpost.com/news-sitemaps/politics.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/opinions.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/local.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/sports.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/national.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/world.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/business.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/technology.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/lifestyle.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/entertainment.xml\nLocation: https://www.washingtonpost.com/news-sitemaps/goingoutguide.xml"
  },
  {
    "url": "https://stackoverflow.com/questions/53959452/how-do-i-write-a-pre-post-traffic-hook-function-in-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/codedeploy\"\n)\ntype CodeDeployEvent struct {\n\tDeploymentId                  string `json:\"deploymentId\"`\n\tLifecycleEventHookExecutionId string `json:\"lifecycleEventHookExecutionId\"`\n}\nfunc HandleRequest(ctx context.Context, event CodeDeployEvent) (string, error) {\n\t// add some tests here and change status flag as needed . . .\n\n    client := codedeploy.New(session.New())\n\tparams := &codedeploy.PutLifecycleEventHookExecutionStatusInput{\n\t\tDeploymentId:                  &event.DeploymentId,\n\t\tLifecycleEventHookExecutionId: &event.LifecycleEventHookExecutionId,\n\t\tStatus:                        \"Succeeded\",\n\t}\n\treq, _ := client.PutLifecycleEventHookExecutionStatusRequest(params)\n\t_ = req.Send()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46647028/multiple-endpoints-for-prometheus-in-go",
    "body": "var (\n        // custom collector\n        reg = prometheus.NewRegistry()\n        // some metrics\n        myGauge = prometheus.NewGaugeVec(\n                prometheus.GaugeOpts{\n                        Name: \"gauge_name\",\n                        Help: \"guage_help\",\n                },\n                []string{\"l\"},\n        )\n)\nfunc init() {\n        // register metrics to my collector\n        reg.MustRegister(myGauge)\n}\nfunc main() {\n        // instrument\n        myGauge.WithLabelValues(\"l\").Set(123)\n        // expose endpoint\n        http.Handle(\"/service\", promhttp.HandlerFor(reg, promhttp.HandlerOpts{}))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/46117887/to-avoid-multiple-database-calls-blocking-each-other-in-a-go-web-app-handler-ar",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc GetUserDetailsHander(c *gin.Context) {\n\tvar userInfo USERINlFO\n\tvar billingInfo BILLL\n\terr := parallel(\n\t\tfunc() (e error) {\n\t\t\tuserInfo, e = UserRepository.FindById(c.getInt(\"user_id\"))\n\t\t\treturn\n\t\t},\n\t\tfunc() (e error) {\n\t\t\tbillingInfo, e = BillingRepository.FindById(c.getInt(\"user_id\"))\n\t\t\treturn\n\t\t},\n\t)\n\tfmt.Println(err)\n\tc.JSON(http.StatusOK, gin.H{\n\t\tuser_data:    userResult,\n\t\tbilling_data: billingInfo,\n\t})\n\treturn\n}\nfunc parallel(do ...func() error) error {\n\tvar err error\n\trcverr := make(chan error)\n\tvar wg sync.WaitGroup\n\tfor _, d := range do {\n\t\twg.Add(1)\n\t\tgo func(do func() error) {\n\t\t\trcverr <- do()\n\t\t\twg.Done()\n\t\t}(d)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(rcverr)\n\t}()\n\tfor range do {\n\t\te := <-rcverr\n\t\tif e != nil {\n\t\t\terr = e // return here for fast path\n\t\t}\n\t}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79544392/how-to-make-viper-unmarshal-return-an-error-if-an-env-var-is-not-set-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/go-viper/mapstructure/v2\"\n\t\"github.com/spf13/viper\"\n)\ntype Config struct {\n\tDatabaseURL string `mapstructure:\"DATABASE_URL\"`\n}\nfunc main() {\n\tviper.AutomaticEnv()\n\tvar config Config\n\tif err := viper.Unmarshal(&config, func(dc *mapstructure.DecoderConfig) {\n\t\tdc.ErrorUnset = true // Set ErrorUnset field to true here\n\t}); err != nil {\n\t\tlog.Fatalf(\"Error unmarshaling config: %v\", err)\n\t}\n\tfmt.Println(\"Config:\", config)\n}\n// output\n2025/03/31 10:38:09 Error unmarshaling config: decoding failed due to the following error(s):\n'' has unset fields: DATABASE_URL\nexit status 1"
  },
  {
    "url": "https://stackoverflow.com/questions/79540817/how-to-gracefully-terminate-a-process-on-windows-similar-to-sigterm",
    "body": "// target process main.go\nfunc main() {\n    // ... some logic\n    sig := make(chan os.Signal, 1)\n    signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)\n    go func() {\n        pipeName := fmt.Sprintf(\"\\\\\\\\.\\\\pipe\\\\%d\", os.Getpid())\n        listener, err := winio.ListenPipe(pipeName, nil)\n        if err != nil {\n            log.Errorf(\"Failed to create pipe: %v\", err)\n            return\n        }\n        defer listener.Close()\n        conn, err := listener.Accept()\n        if err != nil {\n            log.Errorf(\"Pipe accept error: %v\", err)\n            return\n        }\n        defer conn.Close()\n        buf := make([]byte, 1024)\n        n, err := conn.Read(buf)\n        if err != nil {\n            log.Errorf(\"Pipe read error: %v\", err)\n        }\n        msg := string(buf[:n])\n        if msg == \"shutdown\" {\n            sig <- syscall.SIGTERM\n        }\n    }()\n\n    <-sig\n    stop()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79540817/how-to-gracefully-terminate-a-process-on-windows-similar-to-sigterm",
    "body": "// control process\nfunc StartProcess(path string, arg ...string) error {\n\tcmd := exec.Command(path, arg...)\n\tcmd.Dir = filepath.Dir(path)\n\tstdinPipe, err := cmd.StdinPipe()\n\tif err != nil {\n\t\treturn errors.Errorf(\"get stdin pipe failed: %v\", err)\n\t}\n\tpipeMap.Store(filepath.Base(path), stdinPipe)\n\tif err := cmd.Start(); err != nil {\n\t\treturn errors.Errorf(\"start process %s failed: %v\", filepath.Base(path), err)\n\t}\n\treturn nil\n}\nfunc kill(process string) {\n    if pipe, ok := pipeMap.Load(processName); ok {\n        pipe.(io.WriteCloser).Close()\n    }\n    // ...force kill\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79532808/how-can-i-plot-cartesian-data",
    "body": "package main\nimport (\n\t\"log\"\n\t\"math\"\n\t\"net/http\"\n\t\"github.com/go-echarts/go-echarts/v2/charts\"\n\t\"github.com/go-echarts/go-echarts/v2/opts\"\n)\nfunc main() {\n\tline := charts.NewScatter()\n\tline.SetGlobalOptions(\n\t\tcharts.WithTitleOpts(opts.Title{Title: \"Cartesian Coordinates Example\"}),\n\t\tcharts.WithXAxisOpts(opts.XAxis{Type: \"value\", Name: \"X-Axis\"}),\n\t\tcharts.WithYAxisOpts(opts.YAxis{Type: \"value\", Name: \"Y-Axis\"}),\n\t)\n\tradius := 10.0\n\tnumPoints := 100\n\tdata := generateCircleData(radius, numPoints)\n\tline.AddSeries(\"Circle\", data)\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\terr := line.Render(w)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error rendering chart:\", err)\n\t\t}\n\t})\n\tlog.Println(\"Starting server at http://localhost:8081\")\n\thttp.ListenAndServe(\":8081\", nil)\n}\nfunc generateCircleData(radius float64, numPoints int) []opts.ScatterData {\n\tdata := make([]opts.ScatterData, 0, numPoints)\n\tfor i := 0; i < numPoints; i++ {\n\t\ttheta := 2 * math.Pi * float64(i) / float64(numPoints) // Angle in radians\n\t\tx := radius * math.Cos(theta)\n\t\ty := radius * math.Sin(theta)\n\t\tdata = append(data, opts.ScatterData{Value: [2]float64{x, y}})\n\t}\n\treturn data\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79527565/need-help-showing-y-axis-on-right-side-of-chart-for-line-overlay-with-go-echarts",
    "body": "package main\nimport (\n\t\"math/rand\"\n\t\"os\"\n\t\"github.com/go-echarts/go-echarts/v2/charts\"\n\t\"github.com/go-echarts/go-echarts/v2/opts\"\n)\nfunc generateBarItems() []opts.BarData {\n\titems := make([]opts.BarData, 0)\n\tfor i := 0; i < 7; i++ {\n\t\titems = append(items, opts.BarData{Value: rand.Intn(300)})\n\t}\n\treturn items\n}\nfunc generateBarItemsBig() []opts.BarData {\n\titems := make([]opts.BarData, 0)\n\tfor i := 0; i < 7; i++ {\n\t\titems = append(items, opts.BarData{Value: rand.Intn(300) + 1000})\n\t}\n\treturn items\n}\nfunc main() {\n\t// create a new bar instance\n\tbar := charts.NewBar()\n\t// set some global options like Title/Legend/ToolTip or anything else\n\tbar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{\n\t\tTitle:    \"My first bar chart generated by go-echarts\",\n\t\tSubtitle: \"It's extremely easy to use, right?\",\n\t}))\n\t// Put data into instance\n\tbar.SetXAxis([]string{\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"}).\n\t\tAddSeries(\"Category A\", generateBarItems(), charts.WithBarChartOpts(opts.BarChart{\n\t\t\tYAxisIndex: 0,\n\t\t})).\n\t\tAddSeries(\"Category B\", generateBarItemsBig(), charts.WithBarChartOpts(opts.BarChart{\n\t\t\tYAxisIndex: 1,\n\t\t}))\n\tbar.YAxisList = []opts.YAxis{\n\t\topts.YAxis{\n\t\t\tType: \"value\",\n\t\t\tName: \"small\",\n\t\t},\n\t\topts.YAxis{\n\t\t\tType: \"value\",\n\t\t\tName: \"big\",\n\t\t},\n\t}\n\t// Where the magic happens\n\tf, _ := os.Create(\"bar.html\")\n\tbar.Render(f)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79510650/why-does-clientset-in-client-go-fail-to-deploy-a-deployment",
    "body": "deploymentName := \"test-deployment\"\nnamespace := \"default\"\nlabels := map[string]string{\n    \"app\": \"test-app\",\n}\ncontainerName := \"nginx\"\nimage := \"docker.io/nginx:1.14.2\"\nport := int32(8080)\ndeploymentApplyConfig := applyappsv1.Deployment(\n    deploymentName,\n    namespace,\n).WithSpec(\n    applyappsv1.DeploymentSpec().WithReplicas(3).WithSelector(\n        applymetav1.LabelSelector().WithMatchLabels(labels),\n    ).WithTemplate(\n        applycorev1.PodTemplateSpec().WithLabels(labels).WithSpec(\n            applycorev1.PodSpec().WithContainers(\n                applycorev1.Container().WithName(containerName).WithImage(image).WithPorts(applycorev1.ContainerPort().WithContainerPort(port)),\n            ),\n        ),\n    ),\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/79499375/how-to-convert-go-struct-to-dynamic-message-or-proto-message-in-go-grpc",
    "body": "package main\nimport (\n\t\"time\"\n\t\"github.com/DazWilkin/stackoverflow/79499375/protos\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"google.golang.org/protobuf/types/known/timestamppb\"\n)\nfunc main() {\n\t// Create a Foo\n\tfoo := &protos.Foo{\n\t\tTimestamp: timestamppb.New(time.Date(2025, time.January, 1, 0, 0, 0, 0, time.Local)),\n\t}\n\t// Marshal Foo to JSON\n\tif b, err := protojson.Marshal(foo); err == nil {\n\t\tprintln(string(b))\n\t}\n\t// Update Foo\n\tfoo.Timestamp = timestamppb.Now()\n\t// Marshal Foo to JSON\n\tif b, err := protojson.Marshal(foo); err == nil {\n\t\tprintln(string(b))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79462690/zerolog-logger-does-not-display-error-field-in-the-logs",
    "body": "// This is the `err` I wish to log\nif err := validate.Validate.Struct(payload); err != nil {\n        // err becomes nil here\n\t\terrResponse, err := utils.GenerateErrorMessages(err)\n\t\tif err != nil {\n\t\t\tutils.WriteJSON(w, http.StatusInternalServerError, err)\n\t\t\treturn\n\t\t}\n\t\terrorMessage := response.ErrorResponse{\n\t\t\tMessage: \"Invalid request body\",\n\t\t\tErrors:  errResponse,\n\t\t}\n        // nil err is passed to response writer and not logged.\n\t\tresponse.BadRequestErrorResponse(w, r, err, errorMessage)\n\t\treturn\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/79304336/how-do-i-iterate-over-the-paginated-list-returned-by-google-admin-sdk-usersservi",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\tadmin \"google.golang.org/api/admin/directory/v1\"\n\t\"google.golang.org/api/googleapi\"\n)\nfunc main() {\n\tctx := context.Background()\n\tadminService, err := admin.NewService(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Create a request\n\trqst := adminService.Users.List().Customer(\"my_customer\")\n\t// Loop\n\tfor {\n\t\t// Do'ing the request\n\t\tresp, err := rqst.Do()\n\t\tif err != nil {\n\t\t\tif e, ok := err.(*googleapi.Error); ok {\n\t\t\t\tfmt.Printf(\"Error code: %v\\n\", e.Code)\n\t\t\t\tfmt.Printf(\"Message: %v\\n\", e.Message)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"Error: %v\\n\", err)\n\t\t\t}\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfor _, user := range resp.Users {\n\t\t\tfmt.Printf(\"User: %s (%s)\\n\", user.Name.FullName, user.PrimaryEmail)\n\t\t}\n\t\t// Until there aren't any more pages\n\t\tif resp.NextPageToken == \"\" {\n\t\t\tbreak\n\t\t}\n\t\t// Using the NextPageToken to page\n\t\trqst.PageToken(resp.NextPageToken)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79215664/how-can-i-back-up-my-database-to-io-writer",
    "body": "// acquire connections somehow\nsrcConnection, _ := sql.Open(\"sqlite3\", \"/path/to/database.db\")\ndstConnection, _ := sql.Open(\"sqlite3\", \":memory:\")\n// get reference to underlying driver connection object\nsrc := srcConnection.(*sqlite3.SQLiteConn)\ndst := dstConnection.(*sqlite3.SQLiteConn)\n// start a backup operation\n//\n// see: https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupinit\n// see: https://pkg.go.dev/github.com/mattn/go-sqlite3#SQLiteBackup\nbackup, _ := dst.Backup(\"main\" /* name of the database */, src, \"main\")\ndefer backup.Finish()\n// stepping copies the pages\n//\n// see: https://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupstep\n// see: https://pkg.go.dev/github.com/mattn/go-sqlite3#SQLiteBackup.Step\n_, _ = backup.Step(-1 /* number of pages to copy */)\n// serialize the database into a buffer\ndata, _ := dst.Serialize(\"main\")\n// copy the buffer into sink\n_, _ = io.Copy(sink, bytes.NewReader(data)) // assuming sink is your final io.Writer"
  },
  {
    "url": "https://stackoverflow.com/questions/79163350/how-to-implement-api-signature-algorithm-in-go-for-kraken",
    "body": "package main\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"crypto/sha512\"\n\t\"encoding/base64\"\n\t\"log\"\n\t\"strconv\"\n\t\"time\"\n)\nfunc createAPISign(apiSecret string) (string, string, error) {\n\tapiPath := \"/0/private/GetWebSocketsToken\"\n\tnonce := strconv.FormatInt(time.Now().UnixMilli(), 10)\n\tpostData := \"nonce=\" + nonce\n\tconcatenatedNonce := nonce + postData\n\tapiSha256 := sha256.New()\n\t// write the concatenated nonce to the sha256 object\n\tapiSha256.Write([]byte(concatenatedNonce))\n\t// retrieve bytes for what's been written to the sha256 object\n\tapiSha256Bytes := apiSha256.Sum(nil)\n\t// decode the api secret into bytes\n\tencodedSecret, err := base64.StdEncoding.DecodeString(apiSecret)\n\tif err != nil {\n\t\treturn \"\", \"\", err\n\t}\n\t// create the hmac object\n\th := hmac.New(sha512.New, encodedSecret)\n\t// write the api path and the sha256 bytes to the hmac object\n\th.Write(append([]byte(apiPath), apiSha256Bytes...))\n\t// retrieve the hmac digest\n\thmacDigest := h.Sum(nil)\n\t// encode the hmac digest into a base64 string\n\tapiSignature := base64.StdEncoding.EncodeToString(hmacDigest)\n\treturn postData, apiSignature, nil\n}\nfunc main() {\n\tapiSecret := \"apiSecret\"\n\tpostData, apiSignature, err := createAPISign(apiSecret)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating API sign: %v\", err)\n\t}\n\tlog.Printf(\"postData: %s\\napiSignature: %s\\n\", postData, apiSignature)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79149585/interchanging-structures-with-different-size-fields",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"log/slog\"\n)\ntype MyData[WordSize uint32 | uint64] struct {\n\tField1 WordSize\n\tLength uint32\n\tField2 WordSize\n}\nfunc printGenericStruct[WordSize uint32 | uint64](s MyData[WordSize]) {\n\tslog.Info(\"Field 1\", \"field1\", s.Field1, \"field2\", s.Field2, \"length\", s.Length)\n}\nfunc main() {\n\ta := MyData[uint32]{0, 0, 1}\n\tb := MyData[uint64]{100, 1, 101}\n\tprintGenericStruct(a)\n\tprintGenericStruct(b)\n\tdata := []byte{1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\toffset := 0\n\tvar c MyData[uint32]\n\terr := binary.Read(bytes.NewBuffer(data[offset:]), binary.LittleEndian, &c)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tprintGenericStruct(c)\n\tvar d MyData[uint64]\n\terr = binary.Read(bytes.NewBuffer(data[offset:]), binary.LittleEndian, &d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tprintGenericStruct(d)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79023707/how-to-get-the-manifest-of-docker-image-stored-in-google-artifact-registry-using",
    "body": "import(\n    artifactregistry \"cloud.google.com/go/artifactregistry/apiv1\"\n    \"golang.org/x/oauth2/google\"\n    dockeref \"github.com/containers/image/v5/docker/reference\"\n\timgtypes \"github.com/containers/image/v5/types\"\n    \"github.com/containers/image/v5/docker\"\n)\nfunc do(ctx context.Context) ([]byte, error) {\n    namedRef, err := dockeref.ParseDockerRef(\"us-west1-docker.pkg.dev/my-project/my-repo/image-name:latest\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tref, err := docker.NewReference(namedRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcreds, err := google.FindDefaultCredentials(ctx, artifactregistry.DefaultAuthScopes()...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ttoken, err := creds.TokenSource.Token()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\timg, err := ref.NewImage(ctx, &imgtypes.SystemContext{\n\t\tDockerBearerRegistryToken: token.AccessToken,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn img.ConfigBlob(ctx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78949000/how-to-reuse-an-http-client-instance-with-a-dynamic-proxy-url-in-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n)\nfunc main() {\n\tc := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tProxy: ProxyFromContext,\n\t\t},\n\t}\n\treq, err := http.NewRequest(\"GET\", \"http://example.com\", nil)\n\treq = WithProxy(req, &url.URL{\n\t\t// ...\n\t})\n\tres, err := c.Do(req)\n\t// use (and re-use) c for any request\n}\ntype ctxKey int\nconst (\n\tctxKeyProxyURL ctxKey = iota\n)\nfunc WithProxy(r *http.Request, u *url.URL) *http.Request {\n\tctx := context.WithValue(r.Context(), ctxKeyProxyURL, u)\n\treturn r.WithContext(ctx)\n}\nfunc ProxyFromContext(r *http.Request) (*url.URL, error) {\n\tu, _ := r.Context().Value(ctxKeyProxyURL).(*url.URL)\n\treturn u, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78910467/golang-http-handler-is-it-possible-to-implement-a-call-and-response-pattern-w",
    "body": "func UserSyncHandler(db *psql.Database, cache *serverCache.Cache) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\n        // Added as noted in a comment\n        controller := http.NewResponseController(w)\n\t\t_ = controller.EnableFullDuplex() // no error reported\n\n\t\treader := bufio.NewReader(r.Body)\n\t\tfor {\n            line, err := reader.ReadBytes('\\n')\n\t\t\tif err != nil {\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\tlogger.Info(\"Received EOF\")\n\t\t\t\t\tbreak // naturally reached end of stream\n\t\t\t\t}\n\t\t\t\twriteError(w, \"Failed to read from sync stream\", err, http.StatusInternalServerError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Send response here\n\t\t\twriteData([]byte(\"confirmation data\"))\n            // Added as noted in another comment\n            controller.Flush()\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78807568/how-to-run-golang-backend-with-postgresql-db-and-redis-using-docker",
    "body": "networks:\n  my_network:\nservices:\n  db:\n    image: postgres\n    volumes:\n      - ./db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d\n    networks:\n      - my_network\n    ports:\n      - 5433:5432\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: 123\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready\"]\n      interval: 1s\n      retries: 100\n  redis:\n    image: redis\n    networks:\n      - my_network\n    ports:\n      - 6380:6379\n  backend:\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_started\n    build: ./backend\n    networks:\n      - my_network\n    ports:\n      - 8000:8089"
  },
  {
    "url": "https://stackoverflow.com/questions/78790695/verify-that-a-substring-within-a-string-of-html-sits-within-specific-html-tags-i",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nfunc main() {\n\tstringifiedHTML := `<h2>Here is John Doe</h2>\n<div>Hi my name is Jane Bob.</div>\n<p>Joe Smith is my name.</p>\n<button>Jen Willis</button>`\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"John Doe\"))   // true\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Jane Bob\"))   // false\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Joe Smith\"))  // true\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Jen Willis\")) // false\n}\nfunc betweenValidTags(input string, subStr string) bool {\n\t// regex for tags <p>, <li>, <h2>\n\tinTags := fmt.Sprintf(`<(p|li|h2)[^>]*>.*?%s.*?</(p|li|h2)>`, regexp.QuoteMeta(subStr))\n\tre := regexp.MustCompile(inTags)\n\treturn re.MatchString(input)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78790695/verify-that-a-substring-within-a-string-of-html-sits-within-specific-html-tags-i",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n)\nfunc main() {\n\tstringifiedHTML := `<h2>Here is John Doe</h2>\n<div>Hi my name is Jane Bob.</div>\n<p>Joe Smith is my name.</p>\n<button>Jen Willis</button>`\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"John Doe\"))   // true\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Jane Bob\"))   // false\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Joe Smith\"))  // true\n\tfmt.Println(betweenValidTags(stringifiedHTML, \"Jen Willis\")) // false\n}\nvar tagRegex = regexp.MustCompile(`<(p|li|h2)[^>]*>(.*?)</(p|li|h2)>`)\nfunc betweenValidTags(input string, subStr string) bool {\n\tmatches := tagRegex.FindAllStringSubmatch(input, -1)\n\t// Iterate through all matches and check if subStr is within the matched content\n\tfor _, match := range matches {\n\t\tif len(match) > 2 && strings.Contains(match[2], subStr) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78778839/unmarshal-xml-into-custom-struct-how-to-handle-different-structures-for-the-sa",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\ntype RDF struct {\n\tClasses []Class `xml:\"Class\"`\n}\ntype Class struct {\n\tClassDefinition []ClassDescriptor `xml:\"subClassOf\"`\n}\ntype ClassDescriptor struct {\n\tNodeID     string\n\tOnProperty string\n}\nfunc (description *ClassDescriptor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tif len(start.Attr) > 0 {\n\t\tvar v struct {\n\t\t\tNodeID string `xml:\"nodeID,attr\"`\n\t\t}\n\t\tif err := d.DecodeElement(&v, &start); err != nil {\n\t\t\treturn fmt.Errorf(\"can't decode node id on %+v: %w\", start, err)\n\t\t}\n\t\tdescription.NodeID = v.NodeID\n\t} else {\n\t\tvar v struct {\n\t\t\tRestriction struct {\n\t\t\t\tOnProperty struct {\n\t\t\t\t\tResource string `xml:\"resource,attr\"`\n\t\t\t\t} `xml:\"onProperty\"`\n\t\t\t} `xml:\"Restriction\"`\n\t\t}\n\t\tif err := d.DecodeElement(&v, &start); err != nil {\n\t\t\treturn fmt.Errorf(\"can't decode node id on %+v: %w\", start, err)\n\t\t}\n\t\tdescription.OnProperty = v.Restriction.OnProperty.Resource\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78760592/extracting-env-variables-in-go",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/caarlos0/env/v11\"\n\t\"github.com/joho/godotenv\"\n)\ntype LocalConfig struct {\n\tHost       string `env:\"DB_HOST\"`\n\tDBPort     int    `env:\"DB_PORT\"`\n\tDBUser     string `env:\"DB_USER\"`\n\tDBPassword string `env:\"DB_PASSWORD\"`\n\tDBName     string `env:\"DB_NAME\"`\n\tPort       int    `env:\"SERVER_PORT\"`\n}\nfunc main() {\n\terr := godotenv.Load(\"local.env\")\n\tif err != nil {\n\t\tlog.Fatal(\"Error loading .env file\", err)\n\t}\n\tvar localconfig LocalConfig\n\tif err := env.Parse(&localconfig); err != nil {\n\t\tlog.Fatalf(\"Error reading the environment variables: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"%+v\\n\", localconfig)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78728802/cbz-image-concatenation-in-golang",
    "body": "package main\nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"image\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"image/png\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"sort\"\n\t\"strings\"\n\t\"golang.org/x/image/webp\"\n)\nconst (\n\tport         = 8080\n\tcbzDirectory = \"./\" // Directory where .cbz files are stored\n)\nfunc main() {\n\thttp.HandleFunc(\"/webtoon\", handleWebtoon)\n\tlog.Printf(\"Server starting on port %d...\\n\", port)\n\tlog.Fatal(http.ListenAndServe(fmt.Sprintf(\":%d\", port), nil))\n}\nfunc handleWebtoon(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tfilename := r.URL.Query().Get(\"file\")\n\tif filename == \"\" {\n\t\thttp.Error(w, \"File parameter is required\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tif filepath.Ext(filename) != \".cbz\" {\n\t\thttp.Error(w, \"Invalid file extension. Only .cbz files are allowed\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tfilePath := filepath.Join(cbzDirectory, filepath.Clean(filename))\n\tif _, err := os.Stat(filePath); os.IsNotExist(err) {\n\t\thttp.Error(w, \"File not found\", http.StatusNotFound)\n\t\treturn\n\t}\n\timg, err := CreateWebtoonStrip(filePath)\n\tif err != nil {\n\t\tlog.Printf(\"Error creating webtoon strip: %v\", err)\n\t\thttp.Error(w, fmt.Sprintf(\"Error processing file: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"image/png\")\n\tw.Header().Set(\"Content-Disposition\", fmt.Sprintf(\"inline; filename=\\\"%s.png\\\"\", filepath.Base(filename)))\n\terr = streamPNG(w, img)\n\tif err != nil {\n\t\tlog.Printf(\"Error streaming PNG: %v\", err)\n\t\thttp.Error(w, \"Error sending image\", http.StatusInternalServerError)\n\t\treturn\n\t}\n}\nfunc CreateWebtoonStrip(cbzFilePath string) (image.Image, error) {\n\treader, err := zip.OpenReader(cbzFilePath)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error opening CBZ file: %v\", err)\n\t}\n\tdefer reader.Close()\n\tsort.Slice(reader.File, func(i, j int) bool {\n\t\treturn reader.File[i].Name < reader.File[j].Name\n\t})\n\tvar images []image.Image\n\tvar totalHeight int\n\tvar commonWidth int\n\tfor _, file := range reader.File {\n\t\tif isImageFile(file.Name) {\n\t\t\trc, err := file.Open()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"error opening file %s: %v\", file.Name, err)\n\t\t\t}\n\t\t\tdata, err := io.ReadAll(rc)\n\t\t\trc.Close()\n\t\t\tif err != nil {\n\t\t\t\treturn nil, fmt.Errorf(\"error reading file %s: %v\", file.Name, err)\n\t\t\t}\n\t\t\timg, format, err := decodeImage(bytes.NewReader(data))\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error decoding file %s: %v\", file.Name, err)\n\t\t\t\tcontinue // Skip this file and try the next one\n\t\t\t}\n\t\t\tlog.Printf(\"Successfully decoded %s as %s\", file.Name, format)\n\t\t\twidth := img.Bounds().Dx()\n\t\t\tif commonWidth == 0 {\n\t\t\t\tcommonWidth = width\n\t\t\t} else if width != commonWidth {\n\t\t\t\tlog.Printf(\"Skipping %s: width %d doesn't match common width %d\", file.Name, width, commonWidth)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\timages = append(images, img)\n\t\t\ttotalHeight += img.Bounds().Dy()\n\t\t}\n\t}\n\tif len(images) == 0 {\n\t\treturn nil, fmt.Errorf(\"no valid images found with matching width in the CBZ file\")\n\t}\n\tfinalImage := image.NewRGBA(image.Rect(0, 0, commonWidth, totalHeight))\n\tcurrentY := 0\n\tfor _, img := range images {\n\t\tdraw.Draw(finalImage, image.Rect(0, currentY, commonWidth, currentY+img.Bounds().Dy()), img, image.Point{}, draw.Src)\n\t\tcurrentY += img.Bounds().Dy()\n\t}\n\treturn finalImage, nil\n}\nfunc isImageFile(filename string) bool {\n\text := strings.ToLower(filepath.Ext(filename))\n\treturn ext == \".jpg\" || ext == \".jpeg\" || ext == \".png\" || ext == \".webp\"\n}\nfunc decodeImage(r io.Reader) (image.Image, string, error) {\n\tdata, err := io.ReadAll(r)\n\tif err != nil {\n\t\treturn nil, \"\", fmt.Errorf(\"error reading image data: %v\", err)\n\t}\n\t// Try decoding as JPEG\n\timg, err := jpeg.Decode(bytes.NewReader(data))\n\tif err == nil {\n\t\treturn img, \"jpeg\", nil\n\t}\n\t// Try decoding as PNG\n\timg, err = png.Decode(bytes.NewReader(data))\n\tif err == nil {\n\t\treturn img, \"png\", nil\n\t}\n\t// Try decoding as WebP\n\timg, err = webp.Decode(bytes.NewReader(data))\n\tif err == nil {\n\t\treturn img, \"webp\", nil\n\t}\n\treturn nil, \"\", fmt.Errorf(\"unsupported image format\")\n}\nfunc streamPNG(w io.Writer, img image.Image) error {\n\tencoder := png.Encoder{\n\t\tCompressionLevel: png.DefaultCompression,\n\t}\n\treturn encoder.Encode(w, img)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78688400/get-user-information-who-are-added-in-the-channel-using-invite-link-in-telegram",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os\"\n\ttgbotapi \"github.com/go-telegram-bot-api/telegram-bot-api/v5\"\n)\nfunc main() {\n\tbot, err := tgbotapi.NewBotAPI(os.Getenv(\"BOT_TOKEN\"))\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tbot.Debug = true\n\tlog.Printf(\"Authorized on account %s\", bot.Self.UserName)\n\tu := tgbotapi.NewUpdate(0)\n\tu.Timeout = 60\n\tu.AllowedUpdates = []string{\"message\", \"chat_member\"}\n\tupdates := bot.GetUpdatesChan(u)\n\tfor update := range updates {\n\t\tif update.ChatMember == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\t// Process the ChatMember info here\n\t\tprint(update.ChatMember)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78688400/get-user-information-who-are-added-in-the-channel-using-invite-link-in-telegram",
    "body": "{\n  \"chat\": {\n    \"id\": -1002232751336,\n    \"type\": \"channel\",\n    \"title\": \"Channel Title\",\n    \"username\": null,\n    \"first_name\": null,\n    \"last_name\": null,\n    \"is_forum\": false\n  },\n  \"from\": {\n    \"id\": 123456789,\n    \"is_bot\": false,\n    \"first_name\": \"User's First Name\",\n    \"username\": \"some_user_name\",\n    \"language_code\": \"en\"\n  },\n  \"date\": 1719777260,\n  \"old_chat_member\": {\n    \"user\": {\n      \"id\": 123456789,\n      \"is_bot\": false,\n      \"first_name\": \"User's First Name\",\n      \"username\": \"some_user_name\",\n      \"language_code\": \"en\"\n    },\n    \"status\": \"left\"\n  },\n  \"new_chat_member\": {\n    \"status\": \"member\",\n    \"user\": {\n      \"id\": 123456789,\n      \"is_bot\": false,\n      \"first_name\": \"User's First Name\",\n      \"username\": \"some_user_name\",\n      \"language_code\": \"en\"\n    }\n  },\n  \"invite_link\": {\n    \"invite_link\": \"https://t.me/+actual-invite-link\",\n    \"creator\": {\n      \"id\": 9876543210,\n      \"is_bot\": true,\n      \"first_name\": \"Your Bot Name\",\n      \"username\": \"myawesomebot\"\n    },\n    \"creates_join_request\": false,\n    \"is_primary\": false,\n    \"is_revoked\": false,\n    \"name\": \"Optional name for the invite link (if set with createChatInviteLink)\"\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78670986/parse-hcl-block-into-golang-map",
    "body": "package ...\nimport (\n\t...\n\t\"testing\"\n\t\"github.com/hashicorp/hcl/v2\"\n\t\"github.com/hashicorp/hcl/v2/gohcl\"\n\t\"github.com/hashicorp/hcl/v2/hclsyntax\"\n)\nfunc TestAccResource(t *testing.T) {\n\t...\n\tinnerBlock := `{\n        field1 = 0\n        field2 = false\n        field4 = \"value\"\n    }`\n\texpr, diag := hclsyntax.ParseExpression([]byte(innerBlock), \"example.hcl\", hcl.InitialPos)\n\tif diag.HasErrors() {\n\t\tt.Error(diag.Error())\n\t}\n\tvar innerBlockMap map[string]string\n\tdiag = gohcl.DecodeExpression(expr, nil, &innerBlockMap)\n\tif diag.HasErrors() {\n\t\tt.Error(diag.Error())\n\t}\n\t...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78635681/can-i-specify-a-timeout-value-when-cancelling-a-context",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tctx := context.Background()\n\texitCtx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\n\tdefer cancel()\n\tuploadDone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(uploadDone)\n\t\tpublishMetrics(exitCtx)\n\t}()\n\tselect {\n\tcase <-uploadDone:\n\t\tfmt.Println(\"Terminating regularly\")\n\tcase <-exitCtx.Done():\n\t\tfmt.Println(\"Timed out\")\n\t}\n}\nfunc publishMetrics(ctx context.Context) {\n\ttimer := time.NewTimer(500 * time.Millisecond) // Simulate upload\n\tselect {\n\tcase <-timer.C:\n\t\tfmt.Println(\"Upload successful\")\n\tcase <-ctx.Done():\n\t\ttimer.Stop()\n\t\tfmt.Println(\"Upload aborted\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78612856/fnv-hashing-with-sorted-input-performance-and-hash-collisions",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/prometheus/common/model\"\n)\nfunc main() {\n\tlabels := []string{\n\t\t`{\"A\":\"cswpLMIZpwt\",\"_\":\"ypfajYg2lsv\"}`,\n\t\t`{\"A\":\"K6sjsNNczPl\",\"_\":\"KiqbryhzUpn\"}`,\n\t}\n\tfor _, l := range labels {\n\t\tvar ls model.LabelSet\n\t\tif err := json.Unmarshal([]byte(l), &ls); err != nil {\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t\tfmt.Printf(\"label set: %v, valid: %v\\n\", ls, ls.Validate() == nil)\n\t\tfmt.Printf(\"- fingerprint: %v, fast fingerprint: %v\\n\", ls.Fingerprint(), ls.FastFingerprint())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78541294/how-to-pass-golang-gin-sesssion-to-next-js",
    "body": "...\nexport default async function middleware(request:NextRequest){\n    const response = NextResponse.next();\n    const cookieStore = cookies()\n    let cookie = cookieStore.get('set-cookie')\n    let header = \"\"\n    if(!cookie) {\n        console.log(\"we need to fetch from gin and get cookie from response\")\n        const initialPromise = await fetch(`${process.env.BACKEND}/incr`)\n        header = initialPromise.headers.get('set-cookie')\n        console.log(\"this is the response cookie\",header)\n    } else {\n        console.log(\"Finally the cookie\",cookie)\n        response.headers.set('set-cookie',cookie.value)\n    }\n    return response\n}\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/78536774/why-does-swag-init-only-generate-general-api-information",
    "body": "// CreateOrder godoc\n//\t@Summary\t\tCreate a new order\n//\t@Description\tCreate a new order with the input payload\n//\t@Tags\t\t\torders\n//\t@Accept\t\t\tjson\n//\t@Produce\t\tjson\n//\t@Param\t\t\torder\tbody\t\tOrder\ttrue\t\"Create order\"\n//\t@Success\t\t200\t\t{object}\tOrder\n//\t@Router\t\t\t/orders [post]\nfunc CreateOrder(w http.ResponseWriter, r *http.Request) {\n\tvar order Order\n\tjson.NewDecoder(r.Body).Decode(&order)\n\tprevOrderID++\n\torder.OrderID = strconv.Itoa(prevOrderID)\n\torders = append(orders, order)\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(order)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78536774/why-does-swag-init-only-generate-general-api-information",
    "body": "// CreateOrder godoc\n//\n//\t@Summary\t\tCreate a new order\n//\t@Description\tCreate a new order with the input payload\n//\t@Tags\t\t\torders\n//\t@Accept\t\t\tjson\n//\t@Produce\t\tjson\n//\t@Param\t\t\torder\tbody\t\tOrder\ttrue\t\"Create order\"\n//\t@Success\t\t200\t\t{object}\tOrder\n//\t@Router\t\t\t/orders [post]\nfunc CreateOrder(w http.ResponseWriter, r *http.Request) {\n\tvar order Order\n\tjson.NewDecoder(r.Body).Decode(&order)\n\tprevOrderID++\n\torder.OrderID = strconv.Itoa(prevOrderID)\n\torders = append(orders, order)\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(order)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78480166/gorm-creating-inserting-a-model-with-a-foreign-key-field-returns-an-error-canno",
    "body": "type UserContact struct {\n    BaseModel\n    User        User `gorm:\"column:user_id;foreignKey:UserID;references:ID;unique;not null\"`\n    UserID      uint64\n    Address     Address `gorm:\"column:address_id;foreignKey:AddressID;references:ID;not null\"`\n    AddressID   uint64\n    Email       string  `gorm:\"column:email;size:255;unique;not null\"`\n    Firstname   string  `gorm:\"column:firstname;size:255;not null\"`\n    Lastname    string  `gorm:\"column:lastname;size:255;not null\"`\n    PhoneNumber *string `gorm:\"column:phone_number;size:255;unique\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78480166/gorm-creating-inserting-a-model-with-a-foreign-key-field-returns-an-error-canno",
    "body": "type UserContact struct {\n    BaseModel\n    User        User `gorm:\"foreignKey:UserID;references:ID;unique;not null\"`\n    UserID      uint64\n    Address     Address `gorm:\"foreignKey:AddressID;references:ID;not null\"`\n    AddressID   uint64\n    Email       string  `gorm:\"column:email;size:255;unique;not null\"`\n    Firstname   string  `gorm:\"column:firstname;size:255;not null\"`\n    Lastname    string  `gorm:\"column:lastname;size:255;not null\"`\n    PhoneNumber *string `gorm:\"column:phone_number;size:255;unique\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78447661/how-to-generate-a-jwt-for-apple-app-store-connect-api",
    "body": "func GetJwtToken() {\n\theader := map[string]interface{}{\n\t\t\"alg\": \"ES256\",            // Algorithm\n\t\t\"kid\": os.Getenv(\"KEYID\"), // Key ID (replace with your actual Key ID)\n\t\t\"typ\": \"JWT\",\n\t}\n\t// Define custom payload\n\tpayload := jwt.MapClaims{\n\t\t\"iss\": os.Getenv(\"ISSUER_ID\"),      // Issuer (replace with your actual Team ID)\n\t\t\"iat\": time.Now().Unix(),           // Issued At Time\n\t\t\"exp\": time.Now().Add(1800).Unix(), // Expiration Time (within 30 minutes)\n\t\t\"aud\": \"appstoreconnect-v1\",        // Audience\n\t\t\"bid\": os.Getenv(\"BUNDLE_ID\"),      // Subject (replace with your actual Client ID)\n\t}\n\t    // Read the private key from file\n\t    privateKeyBytes, err :=\n        os.ReadFile(\"privateKeys/SubscriptionKey_ISSUER_ID.p8\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error reading private token file: %v\", err)\n\t}\n\tblock, _ := pem.Decode(privateKeyBytes)\n\tif block == nil {\n\t\tfmt.Println(\"Error decoding private key PEM\")\n\t\treturn\n\t}\n\tprivateKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)\n\tif err != nil {\n\t\tfmt.Println(\"Error parsing private key:\", err)\n\t\treturn\n\t}\n\tecKey, ok := privateKey.(*ecdsa.PrivateKey)\n\tif !ok {\n\t\tfmt.Println(\"Error casting private key to ECDSA\")\n\t\treturn\n\t}\n\t// Sign JWT token\n\ttoken := jwt.New(jwt.SigningMethodES256)\n\ttoken.Header = header\n\ttoken.Claims = payload\n\ttokenString, err := token.SignedString(ecKey)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error signing token: %v\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"JWT Token:\", tokenString)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78419499/how-to-timeout-concurrent-calls-when-iterating-through-a-list-of-items",
    "body": "package main\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"time\"\n)\nfunc doSomething(ctx context.Context, x int) (int, error) {\n\ttimer := time.NewTimer(700 * time.Millisecond)\n\tdefer timer.Stop()\n\tselect {\n\tcase <-ctx.Done(): // canceled\n\t\treturn 0, ctx.Err()\n\tcase <-timer.C:\n\t}\n\treturn x, nil\n}\nfunc process(ctx context.Context, timeout time.Duration, somethings []int) ([]int, error) {\n\tctx, cancel := context.WithTimeout(ctx, timeout)\n\tdefer cancel()\n\tvar results []int\n\tvar err error\n\tfor _, key := range somethings {\n\t\tvar result int\n\t\tresult, err = doSomething(ctx, key)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t\tresults = append(results, result)\n\t}\n\tif err != nil && !errors.Is(err, context.DeadlineExceeded) {\n\t\treturn nil, err\n\t}\n\treturn results, nil\n}\nfunc main() {\n\tctx := context.Background()\n\ttimeoutCfg := 5 * time.Second\n\tsomethings := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tresults, err := process(ctx, timeoutCfg, somethings)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfor _, x := range results {\n\t\t\tfmt.Println(x)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78419499/how-to-timeout-concurrent-calls-when-iterating-through-a-list-of-items",
    "body": "func process(ctx context.Context, timeout time.Duration, somethings []int) ([]int, error) {\n\tctx, cancel := context.WithTimeout(ctx, timeout)\n\tdefer cancel()\n\teg, ctx := errgroup.WithContext(ctx)\n\tvar results resultCollector\n\tfor _, key := range somethings {\n\t\teg.Go(func() error {\n\t\t\tresult, err := doSomething(ctx, key)\n\t\t\tif err == nil {\n\t\t\t\tresults.append(result)\n\t\t\t}\n\t\t\treturn err\n\t\t})\n\t}\n\terr := eg.Wait()\n\tif err != nil && !errors.Is(err, context.DeadlineExceeded) {\n\t\treturn nil, err\n\t}\n\treturn results.get(), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78393562/unable-to-create-cosmosdb-database-via-go-sdk",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos\"\n)\nfunc handle(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc main() {\n\tconst (\n\t\tcosmosDbEndpoint = \"your_cosmosdb_endpoint\"\n\t\tcosmosDbKey      = \"your_cosmosdb_key\"\n\t\tdbName           = \"samdb1\"\n\t)\n\t// Create a new client with the account key\n\tcred, err := azcosmos.NewKeyCredential(cosmosDbKey)\n\thandle(err)\n\tclient, err := azcosmos.NewClientWithKey(cosmosDbEndpoint, cred, nil)\n\thandle(err)\n\t// Create a new database\n\tdatabaseProperties := azcosmos.DatabaseProperties{ID: dbName}\n\t_, err = client.CreateDatabase(context.Background(), databaseProperties, nil)\n\thandle(err)\n\tlog.Println(\"Database created successfully:\", dbName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78362289/cors-error-it-does-not-have-http-ok-status-golang-mux-api",
    "body": "package main\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/jub0bs/cors\"\n)\nfunc main() {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"GET /hello\", handleHello)\n\tcorsMiddleware, err := cors.NewMiddleware(cors.Config{\n\t\tOrigins: []string{\"*\"},\n\t\tMethods: []string{\n\t\t\thttp.MethodGet,\n\t\t\thttp.MethodPost,\n\t\t\thttp.MethodPut,\n\t\t\thttp.MethodDelete,\n\t\t},\n\t\tRequestHeaders: []string{\n\t\t\t\"Authorization\",\n\t\t\t\"Content-Type\",\n\t\t\t\"X-Requested-With\",\n\t\t},\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ts := &http.Server{\n\t\tAddr:    \"localhost:8080\",\n\t\tHandler: corsMiddleware.Wrap(mux),\n\t\t// other settings omitted\n\t}\n\tlog.Fatal(s.ListenAndServe())\n}\nfunc handleHello(w http.ResponseWriter, _ *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tio.WriteString(w, `{\"msg\": \"Hello, World!\"}`)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78353048/setup-jaeger-in-docker-compose-not-with-all-in-one-image",
    "body": "jaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.124311,\"caller\":\"healthcheck/handler.go:99\",\"msg\":\"Health Check server started\",\"http-port\":14269,\"status\":\"unavailable\"}\njaeger-go-example-jaeger-collector-1  | WARNING: found deprecated option kafka.brokers, please use kafka.producer.brokers instead\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1347585,\"caller\":\"kafka/factory.go:62\",\"msg\":\"Kafka factory\",\"producer builder\":{\"Brokers\":[\"kafka:9092\"]},\"topic\":\"jaeger-spans\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1638942,\"caller\":\"static/strategy_store.go:79\",\"msg\":\"No sampling strategies provided, using defaults\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.170055,\"caller\":\"collector/main.go:140\",\"msg\":\"Starting jaeger-collector TChannel server\",\"port\":14267}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1706026,\"caller\":\"grpcserver/grpc_server.go:64\",\"msg\":\"Starting jaeger-collector gRPC server\",\"grpc-port\":\"14250\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1713939,\"caller\":\"collector/main.go:154\",\"msg\":\"Registering metrics handler with HTTP server\",\"route\":\"/metrics\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1718876,\"caller\":\"collector/main.go:163\",\"msg\":\"Starting jaeger-collector HTTP server\",\"http-port\":14268}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715817606.1722622,\"caller\":\"healthcheck/handler.go:133\",\"msg\":\"Health Check state change\",\"status\":\"ready\"}"
  },
  {
    "url": "https://stackoverflow.com/questions/78353048/setup-jaeger-in-docker-compose-not-with-all-in-one-image",
    "body": "jaeger-go-example-jaeger-collector-1  | 2024/05/16 00:41:06 maxprocs: Leaving GOMAXPROCS=8: CPU quota undefined\njaeger-go-example-jaeger-collector-1  | 2024/05/16 00:41:06 application version: git-commit=55e991a29725468164b11be5fc4e260dc09598d6, git-version=v1.57.0, build-date=2024-05-01T23:19:12Z\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820066.9970202,\"caller\":\"flags/service.go:110\",\"msg\":\"Mounting metrics handler on admin server\",\"route\":\"/metrics\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820066.9974976,\"caller\":\"flags/service.go:116\",\"msg\":\"Mounting expvar handler on admin server\",\"route\":\"/debug/vars\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820066.9984624,\"caller\":\"flags/admin.go:130\",\"msg\":\"Mounting health check on admin server\",\"route\":\"/\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820066.9987607,\"caller\":\"flags/admin.go:144\",\"msg\":\"Starting admin HTTP server\",\"http-addr\":\":14269\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0008337,\"caller\":\"flags/admin.go:122\",\"msg\":\"Admin server started\",\"http.host-port\":\"[::]:14269\",\"health-status\":\"unavailable\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0110576,\"caller\":\"kafka/factory.go:77\",\"msg\":\"Kafka factory\",\"producer builder\":{\"Brokers\":[\"kafka:9092\"],\"RequiredAcks\":1,\"Compression\":\"none\",\"CompressionLevel\":0,\"ProtocolVersion\":\"\",\"BatchLinger\":0,\"BatchSize\":0,\"BatchMinMessages\":0,\"BatchMaxMessages\":0,\"MaxMessageBytes\":1000000,\"Authentication\":\"none\",\"Kerberos\":{\"ServiceName\":\"kafka\",\"Realm\":\"\",\"UseKeyTab\":false,\"Username\":\"\",\"ConfigPath\":\"/etc/krb5.conf\",\"KeyTabPath\":\"/etc/security/kafka.keytab\",\"DisablePAFXFast\":false},\"TLS\":{\"Enabled\":false,\"CAPath\":\"\",\"CertPath\":\"\",\"KeyPath\":\"\",\"ServerName\":\"\",\"ClientCAPath\":\"\",\"CipherSuites\":null,\"MinVersion\":\"\",\"MaxVersion\":\"\",\"SkipHostVerify\":false,\"ReloadInterval\":0},\"PlainText\":{\"Username\":\"\",\"Mechanism\":\"PLAIN\"}},\"topic\":\"jaeger-spans\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0482032,\"caller\":\"static/strategy_store.go:68\",\"msg\":\"No sampling strategies source provided, using defaults\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.085572,\"caller\":\"grpc@v1.63.2/server.go:675\",\"msg\":\"[core][Server #1]Server created\",\"system\":\"grpc\",\"grpc_log\":true}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0860224,\"caller\":\"server/grpc.go:104\",\"msg\":\"Starting jaeger-collector gRPC server\",\"grpc.host-port\":\"[::]:14250\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0860848,\"caller\":\"server/http.go:56\",\"msg\":\"Starting jaeger-collector HTTP server\",\"http host-port\":\":14268\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0868862,\"caller\":\"grpc@v1.63.2/server.go:871\",\"msg\":\"[core][Server #1 ListenSocket #2]ListenSocket created\",\"system\":\"grpc\",\"grpc_log\":true}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0912595,\"caller\":\"app/collector.go:146\",\"msg\":\"Not listening for Zipkin HTTP traffic, port not configured\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.091624,\"caller\":\"handler/otlp_receiver.go:77\",\"msg\":\"OTLP receiver status change\",\"status\":\"StatusStarting\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"warn\",\"ts\":1715820067.091747,\"caller\":\"internal@v0.98.0/warning.go:42\",\"msg\":\"Using the 0.0.0.0 address exposes this server to every network interface, which may facilitate Denial of Service attacks. Enable the feature gate to change the default and remove this warning.\",\"documentation\":\"https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md#safeguards-against-denial-of-service-attacks\",\"feature gate ID\":\"component.UseLocalHostAsDefaultHost\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.09237,\"caller\":\"grpc@v1.63.2/server.go:675\",\"msg\":\"[core][Server #3]Server created\",\"system\":\"grpc\",\"grpc_log\":true}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.0924554,\"caller\":\"otlpreceiver@v0.98.0/otlp.go:102\",\"msg\":\"Starting GRPC server\",\"endpoint\":\"0.0.0.0:4317\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"warn\",\"ts\":1715820067.1029644,\"caller\":\"internal@v0.98.0/warning.go:42\",\"msg\":\"Using the 0.0.0.0 address exposes this server to every network interface, which may facilitate Denial of Service attacks. Enable the feature gate to change the default and remove this warning.\",\"documentation\":\"https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md#safeguards-against-denial-of-service-attacks\",\"feature gate ID\":\"component.UseLocalHostAsDefaultHost\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.1030934,\"caller\":\"otlpreceiver@v0.98.0/otlp.go:152\",\"msg\":\"Starting HTTP server\",\"endpoint\":\"0.0.0.0:4318\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.1046698,\"caller\":\"healthcheck/handler.go:129\",\"msg\":\"Health Check state change\",\"status\":\"ready\"}\njaeger-go-example-jaeger-collector-1  | {\"level\":\"info\",\"ts\":1715820067.1038973,\"caller\":\"grpc@v1.63.2/server.go:871\",\"msg\":\"[core][Server #3 ListenSocket #4]ListenSocket created\",\"system\":\"grpc\",\"grpc_log\":true}"
  },
  {
    "url": "https://stackoverflow.com/questions/78353048/setup-jaeger-in-docker-compose-not-with-all-in-one-image",
    "body": "services:\n  # Using Apache Zookeeper to co-ordinate Apache services\n  zookeeper:\n    image: confluentinc/cp-zookeeper:5.2.1\n    ports:\n      - \"2181:2181\"\n    environment:\n      ZOOKEEPER_CLIENT_PORT: \"2181\"\n\n  # Using Apache Kafka as a temporary storage and stream processing system (span post processing)\n  kafka:\n    image: confluentinc/cp-kafka:5.2.1\n    ports:\n      - \"9092:9092\"\n      - \"9093:9093\"\n    environment:\n      KAFKA_ZOOKEEPER_CONNECT: \"zookeeper:2181\"\n      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093\n      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_BROKER_ID: 1\n    depends_on:\n      - zookeeper\n    healthcheck:\n      test: nc -z localhost 9092 || exit -1\n      start_period: 15s\n      interval: 5s\n      timeout: 10s\n      retries: 10\n  jaeger-collector:\n    image: jaegertracing/jaeger-collector:1.57\n    hostname: jaeger-collector\n    ports:\n      - \"14269:14269\"\n      - \"14268:14268\"\n      - \"14267:14267\"\n      - \"9411:9411\"\n    environment:\n      LOG_LEVEL: \"info\"\n      SPAN_STORAGE_TYPE: \"kafka\"\n      KAFKA_PRODUCER_BROKERS: \"kafka:9092\"\n      METRICS_BACKEND: \"prometheus\"\n    depends_on:\n      kafka:\n        condition: service_healthy\n  service-b:\n    build:\n      context: .\n      dockerfile: service-b/Dockerfile\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger-collector:4317\n      - OTEL_EXPORTER_OTLP_INSECURE=true\n    ports:\n      - '8082:8082'\n    depends_on:\n      - jaeger-collector"
  },
  {
    "url": "https://stackoverflow.com/questions/78332807/convert-hmac-signature-from-go-into-r",
    "body": "library(digest)\nlibrary(base64enc)\nservice_id <- \"test\"\ndate       <- \"2019-03-08T19:31:12.213831+00:00\"\nsalt       <- \"0EvkK316T-sBLA\"\nsecret_key <- \"YMIVXikJWAiiR3q-JMz1v2Mfmx3gTXJVNqme5kyaqrY\"\nkey_digest  <- digest::digest(\n  paste0(salt, secret_key),\n  algo = \"sha1\",\n  serialize = FALSE,\n  raw = TRUE\n)\nhmac_binary <- digest::hmac(\n  key_digest,\n  paste0(date, \":\", service_id),\n  \"sha1\",\n  raw = TRUE\n)\nbase64enc::base64encode(hmac_binary) # Should output: 2y8vHb9xK6RSxN8EXMeAEUiYtZk\n#> [1] \"2y8vHb9xK6RSxN8EXMeAEUiYtZk=\""
  },
  {
    "url": "https://stackoverflow.com/questions/78267880/azure-event-hub-check-pointing-on-multiple-containers",
    "body": "type CheckpointStore interface {\n\t// ClaimOwnership attempts to claim ownership of the partitions in partitionOwnership and returns\n\t// the actual partitions that were claimed.\n\tClaimOwnership(ctx context.Context, partitionOwnership []Ownership, options *ClaimOwnershipOptions) ([]Ownership, error)\n\t// ListCheckpoints lists all the available checkpoints.\n\tListCheckpoints(ctx context.Context, fullyQualifiedNamespace string, eventHubName string, consumerGroup string, options *ListCheckpointsOptions) ([]Checkpoint, error)\n\t// ListOwnership lists all ownerships.\n\tListOwnership(ctx context.Context, fullyQualifiedNamespace string, eventHubName string, consumerGroup string, options *ListOwnershipOptions) ([]Ownership, error)\n\t// SetCheckpoint updates a specific checkpoint with a sequence and offset.\n\tSetCheckpoint(ctx context.Context, checkpoint Checkpoint, options *SetCheckpointOptions) error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78242200/auth0-return-status-code-400-after-on-subsequent-polls-for-request-token",
    "body": "// Gets a request token.\nfunc (loginJob *LoginJob) GetRequestToken() error {\n\turl := loginJob.Domain + \"/oauth/token\"\n\tmethod := \"POST\"\n\tauthenticate := false\n\tvar pollErr error\n\t//Keep polling Auth0 for a request token until status 200 or until invalid grant\n\tfor !authenticate {\n\t\tauthenticate, pollErr = loginJob.PollRequestTokenStatus(url, method)\n\t\tif pollErr != nil {\n\t\t\tlog.Panic(pollErr)\n\t\t}\n\t\t//Sleep for the interval duration in the device code data. If we poll too fast, Auth0 will give 429 status.\n\t\ttime.Sleep(time.Duration(loginJob.DeviceCodeData.Interval) * time.Second)\n\t}\n\treturn nil\n}\nfunc (loginJob *LoginJob) PollRequestTokenStatus(url string, method string) (bool, error) {\n\t//Construct a new Reader. This must be done within this function, or else Go will read to the end of the REader and not\n\t//properly construct our http request.\n\tpayload := strings.NewReader(\"grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=\" +\n\t\tloginJob.DeviceCodeData.DeviceCode + \"&client_id=\" + loginJob.ClientID)\n\t//Create a new http Client. This is done within this function because Go will not erase previous Client settings if we\n\t//pass a client instance as a parameter, which will mess up our post request.\n\tclient := &http.Client{\n\t\tTimeout: time.Second * 10,\n\t}\n\t//Construct a new http request. This must be done within this function because Go will nuke the request headers after every\n\t//call of &http.Client.Do().\n\treq, reqErr := http.NewRequest(method, url, payload)\n\tif reqErr != nil {\n\t\tfmt.Println(reqErr)\n\t\treturn false, reqErr\n\t}\n\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\tres, resErr := client.Do(req)\n\tif resErr != nil {\n\t\tfmt.Println(resErr)\n\t\treturn false, resErr\n\t}\n\tdefer res.Body.Close()\n\tfmt.Println(\"res.StatusCode:\")\n\tfmt.Println(res.StatusCode)\n\tif res.StatusCode == 200 {\n\t\tfmt.Println(\"Authenticated!\")\n\t\tfmt.Println(\"- Id Token: \")\n\t\treturn true, nil\n\t} else if res.StatusCode == 400 {\n\t\treturn true, nil\n\t}\n\treturn false, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78212983/prepoluting-index-page-before-mux-handle-call",
    "body": ".\n├── blogposts\n│   ├── 1.html\n│   └── 2.html\n├── go.mod\n├── handlers\n│   ├── contactshandler.go\n│   ├── indexhandler.go\n│   ├── projectshandler.go\n│   └── readerhandler.go\n├── main.go\n└── static\n    ├── components\n    │   ├── navigation-links1.css\n    │   └── navigation-links1.html\n    ├── contacts.html\n    ├── css\n    │   ├── 404.css\n    │   ├── contacts.css\n    │   ├── index.css\n    │   ├── projects.css\n    │   └── style.css\n    ├── index.html\n    ├── package.json\n    ├── projects.html\n    └── public\n        └── external\n            ├── 1f3eb.svg\n            └── 1f44b.svg"
  },
  {
    "url": "https://stackoverflow.com/questions/78141586/pulumi-s3-how-can-i-attach-a-accesspointpolicy-to-a-accesspoint-when-the-pol",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := s3.NewBucket(ctx, \"bucket\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taccessPoint, err := s3.NewAccessPoint(ctx, \"access-point\", &s3.AccessPointArgs{\n\t\t\tBucket: bucket.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpolicy, err := s3.NewBucketPolicy(ctx, \"policy\", &s3.BucketPolicyArgs{\n\t\t\tBucket: bucket.ID(),\n\t\t\t// 👇 Use .ApplyT() to wait for the ARN to be available, then compose a new string output with it.\n\t\t\tPolicy: accessPoint.Arn.ApplyT(func(arn string) (pulumi.StringOutput, error) {\n\t\t\t\tp, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\t\"Statement\": []map[string]interface{}{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\t\"Action\": \"s3:ListBucket\",\n\t\t\t\t\t\t\t\"Principal\": map[string]string{\n\t\t\t\t\t\t\t\t\"AWS\": \"exampleValue\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// 👇 Use the unwrapped string.\n\t\t\t\t\t\t\t\"Resource\": arn + \"/*\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn pulumi.StringOutput{}, err\n\t\t\t\t}\n\t\t\t\t// 👇 Return a new, transformed string output.\n\t\t\t\treturn pulumi.String(p).ToStringOutput(), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"policy\", policy.ID())\n\t\treturn nil\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78132092/conditional-repositories-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n)\ntype Vehicle struct {\n}\ntype VehicleRepository interface {\n\tGetVehicles(ctx context.Context, brand string) ([]Vehicle, error)\n}\ntype VehicleMySQLRepository struct {\n}\nfunc (r *VehicleMySQLRepository) GetVehicles(ctx context.Context, brand string) ([]Vehicle, error) {\n    var vehicles []Vehicle\n\t//...\n    return vehicles, nil\n}\ntype VehicleMongoRepository struct {\n}\nfunc (r *VehicleMongoRepository) GetVehicles(ctx context.Context, brand string) ([]Vehicle, error) {\n    var vehicles []Vehicle\n\t//...\n    return vehicles, nil\n}\ntype Repositories struct {\n    Vehicle VehicleRepository\n}\ntype Connections struct {\n}\nfunc CreateRepositories(conn Connections, condition bool) *Repositories {\n    if condition == true {\n        return &Repositories{\n            Vehicle: &VehicleMySQLRepository{},\n        }\n    }\n    return &Repositories{\n        Vehicle:     &VehicleMongoRepository{},\n    }\n}\nfunc main() {\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78131316/accessing-db-connection-with-a-go-discord-bot-without-global-variables",
    "body": "type Bot struct {\n\tDB   *sql.DB\n\tName string\n}\nfunc (bot *Bot) ReadyHandler(s *discordgo.Session, r *discordgo.Ready) {\n\tlog.Printf(\"Bot  %v is up! \\n\", bot.Name)\n}\nfunc (bot *Bot) MessageHandler(s *discordgo.Session, r *discordgo.MessageCreate) {\n\tlog.Println(\"inside MessageCreate\")\n}\nfunc (bot *Bot) UpdateHandler(s *discordgo.Session, r *discordgo.PresenceUpdate) {\n\tlog.Println(\"inside PresenceUpdate\")\n}\nfunc Run() {\n\tdb, err := InitDb()\n\tcheckNilErr(err)\n\t// Init the bot handler with the required data\n\tbot := Bot{\n\t\tDB:   db,\n\t\tName: \"my-custom-bot\",\n\t}\n\t// create a discord session\n\tdiscord, err := discordgo.New(\"Bot \" + botToken)\n\tcheckNilErr(err)\n\tdiscord.AddHandler(bot.ReadyHandler)\n\t// Rest of your codes\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77934569/finding-downloads-folder-programmatically-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\nvar (\n\tDownloadDirNames []string = []string{\"Downloads\", \"downloads\", \"download\", \"Downloads\", \"etc...\"}\n)\nfunc main() {\n\tvar downloadDir string\n\thomeDir, err := os.UserHomeDir()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, ddn := range DownloadDirNames {\n\t\tvar dir = filepath.Join(homeDir, ddn)\n\t\tif _, err := os.Stat(dir); os.IsNotExist(err) {\n\t\t\tfmt.Println(dir, \"does not exist\")\n\t\t} else {\n\t\t\tfmt.Println(\"The provided directory named\", dir, \"exists\")\n\t\t\tdownloadDir = dir\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println(\"Download Directory:\", downloadDir)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77862320/golang-testcontainers-cant-get-network-to-work",
    "body": "prescriptionDBContainer, err := testcontainers.GenericContainer(context.Background(), testcontainers.GenericContainerRequest{\n\tContainerRequest: testcontainers.ContainerRequest{\n\t\tImage:        \"postgres\",\n\t\tExposedPorts: []string{\"5432/tcp\"},\n\t\tEnv: map[string]string{\n\t\t\t\"POSTGRES_USER\":     \"postgres\",\n\t\t\t\"POSTGRES_PASSWORD\": \"password\",\n\t\t\t\"POSTGRES_DB\":       \"prescription\",\n\t\t},\n\t\tNetworks:       []string{networkName},\n\t\tNetworkAliases: map[string][]string{networkName: []string{\"postgres\"}},\n\t\tWaitingFor: wait.ForAll(\n\t\t\twait.ForLog(\"database system is ready to accept connections\"),\n\t\t\twait.ForListeningPort(\"5432/tcp\"),\n\t\t),\n\t},\n\tStarted: true,\n})\nif err != nil {\n\tt.Fatal(err)\n}\nprescriptionContainer, err := testcontainers.GenericContainer(context.Background(), testcontainers.GenericContainerRequest{\n\tContainerRequest: testcontainers.ContainerRequest{\n\t\tFromDockerfile: testcontainers.FromDockerfile{Context: \"./testapp\"},\n\t\tExposedPorts:   []string{\"8080/tcp\"},\n\t\tNetworks:       []string{networkName},\n\t\tNetworkAliases: map[string][]string{networkName: []string{\"blah\"}},\n\t\tEnv: map[string]string{\n\t\t\t\"DATABASE_URL\": \"postgres://postgres:password@postgres:5432/prescription\",\n\t\t},\n\t\tWaitingFor: wait.ForListeningPort(\"8080/tcp\"),\n\t},\n\tStarted: true,\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/77840339/how-to-connect-an-oci-function-to-oci-nosql-with-go",
    "body": "func createClientNoSQL() (*nosqldb.Client, bool) {\n\tregion := \"ap-sydney-1\"\n\tcompartmentID := \"ocid1.compartment.oc1......\"\n\ttenancy := \"ocid1.tenancy.oc1......\"\n\tuser := \"ocid1.user.oc1......\"\n\tfingerprint := \"....\"\n\tprivateKeyPassphrase := \"\" // empty or passphrase\n\tpemString := `-----BEGIN PRIVATE KEY-----\n    ......\n    -----END PRIVATE KEY-----`\n\tsp, err := iam.NewRawSignatureProvider(tenancy, user, region, fingerprint, compartmentID, pemString, &privateKeyPassphrase)\n\tif err != nil {\n\t\treturn nil, false\n\t}\n\tcfg := nosqldb.Config{\n\t\tMode:                  \"cloud\",\n\t\tRegion:                common.Region(region),\n\t\tAuthorizationProvider: sp,\n\t}\n\tlcfg := nosqldb.LoggingConfig{\n\t\tLogger: logger.New(os.Stdout, logger.Warn, false),\n\t}\n\tcfg.LoggingConfig = lcfg\n\tclient, err := nosqldb.NewClient(cfg)\n\tif err != nil {\n\t\treturn nil, false\n\t}\n\treturn client, true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77724884/time-taken-by-10000-api-calls-in-too-long",
    "body": "func myGoRoutine(wg *sync.WaitGroup, count *int32) {\n\tdefer wg.Done()\n\tatomic.AddInt32(count, 1)\n}\nfunc myGoRoutineWithHighLoad(wg *sync.WaitGroup, count *int32) {\n\tdefer wg.Done()\n\ttime.Sleep(time.Millisecond * 10)\n\tatomic.AddInt32(count, 1)\n}\nfunc makeRequestWithGoRoutine(n int) {\n\twg := sync.WaitGroup{}\n\tvar count int32\n\twg.Add(n)\n\tfor j := 0; j < n; j++ {\n//\t\tgo myGoRoutine(&wg, &count)\n\t\tgo myGoRoutineWithHighLoad(&wg, &count)\n\t}\n\twg.Wait()\n}\nfunc makeRequestWithoutGoRoutine(n int) {\n\twg := sync.WaitGroup{}\n\tvar count int32\n\twg.Add(n)\n\tfor j := 0; j < n; j++ {\n//\t\tmyGoRoutine(&wg, &count)\n\t\tmyGoRoutineWithHighLoad(&wg, &count)\n\t}\n\twg.Wait()\n}\nfunc makeRequestWithoutFunctionCall(n int) {\n\twg := sync.WaitGroup{}\n\tvar count int32\n\twg.Add(n)\n\tfor j := 0; j < n; j++ {\n\t\tcount++\n\t\twg.Done()\n\t}\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77671962/connection-refused-when-golang-app-tries-to-connect-to-postgresql-in-docker-comp",
    "body": "version: \"3.8\"\nservices:\n  web:\n    container_name: order-api\n    build: .\n    environment:\n      DB_URL: \"postgres://dev:passwordqwerty@dborder:5432/orderdb?sslmode=disable\"\n      DB_DRIVER: postgres\n    depends_on:\n      db:\n        condition: service_healthy\n    ports:\n      - \"3000:3000\"\n    networks:\n      - mynet\n  db:\n    container_name: dborder\n    image: postgres:14-alpine\n    restart: always\n    healthcheck:\n      test: \"exit 0\" # -> any healthcheck will works\n    environment:\n      POSTGRES_USER: dev\n      POSTGRES_PASSWORD: passwordqwerty\n      POSTGRES_DB: orderdb\n    ports:\n      - \"5432:5432\"\n    networks:\n      - mynet\nvolumes:\n  postgresql:\nnetworks:\n  mynet:\n    name: mynet-network\n    driver: bridge"
  },
  {
    "url": "https://stackoverflow.com/questions/77657118/the-tenant-for-tenant-guid-x-does-not-exist-for-self-email-accountim-the-on",
    "body": "package public_test\nimport (\n\t\"context\"\n\t\"github.com/AzureAD/microsoft-authentication-library-for-go/apps/public\"\n)\nfunc Example() {\n\tclient, err := public.New(\"client_id\", public.WithAuthority(\"https://login.microsoftonline.com/common\"))\n\tif err != nil {\n\t}\n\tvar result public.AuthResult\n\tscopes := []string{\"https://graph.microsoft.com/.default\"}\n\taccounts, err := client.Accounts(context.TODO())\n\tif err != nil {\n\t\t// TODO: handle error\n\t}\n\tif len(accounts) > 0 {\n\t\tresult, err = client.AcquireTokenSilent(context.TODO(), scopes, public.WithSilentAccount(accounts[0]))\n\t}\n\tif err != nil || len(accounts) == 0 {\n\t\tresult, err = client.AcquireTokenInteractive(context.TODO(), scopes)\n\t\tif err != nil {\n\t\t}\n\t}\n\t_ = result.Account\n\t_ = result.AccessToken\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77602090/ignoring-createdat-field-when-create-update-but-return-to-json-response",
    "body": "type System struct {\n\tID        uint\n\tName      string\n\tCreatedAt time.Time\n\tUpdatedAt time.Time\n}\ntype InputSystem struct {\n\tName string\n}\nfunc (inputSystem *InputSystem) Convert() System {\n\tsystem := System{\n\t\tName: inputSystem.Name,\n\t}\n\treturn system\n}\nfunc (system *System) Save() (*System, error) {\n\terr := DB.Create(system).Error\n\tif err != nil {\n\t\treturn &System{}, err\n\t}\n\treturn system, err\n}\nfunc (system *System) BeforeSave(*gorm.DB) error {\n\tsystem.Name = html.EscapeString(strings.TrimSpace(system.Name))\n\treturn nil\n}\nfunc (system *System) BeforeUpdate(*gorm.DB) error {\n\tsystem.Name = html.EscapeString(strings.TrimSpace(system.Name))\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77588070/golang-conditionally-serve-js-gz-if-it-exists-otherwise-js",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/s3\"\n)\nfunc getFileFromS3(bucket, key string, w http.ResponseWriter, r *http.Request) error {\n\tsess, err := session.NewSession(&aws.Config{\n\t\tRegion: aws.String(\"your-region\"),\n\t\t// Add other necessary configurations\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tclient := s3.New(sess)\n\t// Check if gzipped version exists\n\tgzKey := key + \".gz\"\n\t_, err = client.HeadObject(&s3.HeadObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(gzKey),\n\t})\n\tif err == nil {\n\t\t// Gzipped version exists, fetch and serve directly\n\t\tobj, err := client.GetObject(&s3.GetObjectInput{\n\t\t\tBucket: aws.String(bucket),\n\t\t\tKey:    aws.String(gzKey),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer obj.Body.Close()\n\t\t// Set appropriate headers\n\t\tw.Header().Set(\"Content-Encoding\", \"gzip\")\n\t\tw.Header().Set(\"Content-Type\", \"application/javascript\") // Set the appropriate content type\n\t\t// Copy the gzipped content directly to the response\n\t\t_, err = fmt.Fprint(w, obj.Body)\n\t\treturn err\n\t}\n\t// Gzipped version doesn't exist, fetch the regular version\n\tobj, err := client.GetObject(&s3.GetObjectInput{\n\t\tBucket: aws.String(bucket),\n\t\tKey:    aws.String(key),\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer obj.Body.Close()\n\t// Set appropriate headers\n\tw.Header().Set(\"Content-Type\", \"application/javascript\") // Set the appropriate content type\n\t// Copy the regular content directly to the response\n\t_, err = fmt.Fprint(w, obj.Body)\n\treturn err\n}\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\t// Extract the file key from the request URL or any other way you have it\n\tfileKey := \"your-file-key\"\n\t// Set appropriate cache headers, handle CORS, etc.\n\t// Fetch the file from S3\n\terr := getFileFromS3(\"your-s3-bucket\", fileKey, w, r)\n\tif err != nil {\n\t\t// Handle error, e.g., return a 404 or 500 response\n\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/your-endpoint\", handler)\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77584732/continually-receiving-messages-from-azure-service-bus-subscription-queue",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus\"\n)\nfunc main() {\n\n\tconnectionString := \"AzureServiceBusConnectionString \"\n\n\tclient, err := azservicebus.NewClientFromConnectionString(connectionString, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tqueueName := \"AzureServiceBusQueuename\"\n\n\treceiver, err := client.NewReceiverForQueue(queueName, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tctx, cancel := context.WithTimeout(context.TODO(), 60*time.Second)\n\tdefer cancel()\n\tmessages, err := receiver.ReceiveMessages(ctx, 1, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, message := range messages {\n\t\t// The message body is a []byte. For this example, we assume it's a string.\n\t\tvar body []byte = message.Body\n\t\tfmt.Printf(\"Message received with body: %s\\n\", string(body))\n\n\t\terr = receiver.CompleteMessage(context.TODO(), message, nil)\n\t\tif err != nil {\n\t\t\t// Handle completion error as needed\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Printf(\"Received and completed the message\\n\")\n\t}\n\n\tclient.Close(context.TODO())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77584732/continually-receiving-messages-from-azure-service-bus-subscription-queue",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/messaging/azservicebus\"\n)\nfunc main() {\n\t// Replace 'your_connection_string' with the actual Service Bus connection string\n\tconnectionString := \"your_connection_string\"\n\n\tclient, err := azservicebus.NewClientFromConnectionString(connectionString, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tqueueName := \"your_queue_name\"\n\t// Create a receiver for the specified queue\n\treceiver, err := client.NewReceiverForQueue(queueName, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tctx, cancel := context.WithCancel(context.Background())\n\t// Use a signal handler to gracefully stop the application\n\tstopSignal := make(chan os.Signal, 1)\n\tsignal.Notify(stopSignal, syscall.SIGINT, syscall.SIGTERM)\n\tgo func() {\n\n\t\t<-stopSignal\n\t\tfmt.Println(\"Received termination signal. Stopping gracefully...\")\n\t\tcancel()\n\t}()\n\nmessageLoop:\n\tfor {\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Println(\"Context canceled. Exiting the message receiving loop.\")\n\t\t\tbreak messageLoop\n\t\tdefault:\n\n\t\t\tmessages, err := receiver.ReceiveMessages(ctx, 1, nil)\n\t\t\tif err != nil {\n\t\t\t\t// Handle receive error as needed\n\t\t\t\tfmt.Printf(\"Error receiving messages: %v\\n\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, message := range messages {\n\n\t\t\t\tvar body []byte = message.Body\n\t\t\t\tfmt.Printf(\"Message received with body: %s\\n\", string(body))\n\n\t\t\t\terr = receiver.CompleteMessage(ctx, message, nil)\n\t\t\t\tif err != nil {\n\n\t\t\t\t\tfmt.Printf(\"Error completing message: %v\\n\", err)\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Received and completed the message\\n\")\n\t\t\t}\n\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}\n\n\tclient.Close(ctx)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77582123/google-cloud-spanner-error-invalid-session-pool",
    "body": "func createClient(ctx context.Context, db string) (*spanner.Client, error) {\n\tsessionPoolConfig := spanner.SessionPoolConfig{\n\t\tTrackSessionHandles: true,\n\t\tInactiveTransactionRemovalOptions: spanner.InactiveTransactionRemovalOptions{\n\t\t\tActionOnInactiveTransaction: spanner.WarnAndClose,\n\t\t},\n\t}\n\tdataClient, err := spanner.NewClientWithConfig(\n\t\tctx, db, spanner.ClientConfig{SessionPoolConfig: sessionPoolConfig},\n\t)\n\tif err != nil {\n\t\tslog.Error(\"failed to create the spanner client\", \"err\", err)\n\t\treturn nil, err\n\t}\n\t// Remove this\n\tdefer dataClient.Close()\n\t// Also this isn't doing anything\n\t_ = dataClient\n\treturn dataClient, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77580676/graphql-go-has-no-built-in-validation-for-argument-variables-passed-on",
    "body": "// resolver.go\nfunc SendOtpEmail(db *gorm.DB, req *http.Request) *graphql.Field {\n\treturn &graphql.Field{\n\t\tType:        graphqlGlobal.ResultType,\n\t\tDescription: \"Send OTP to user's email.\",\n\t\tArgs: graphql.FieldConfigArgument{\n\t\t\t\"email\": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.String)},\n\t\t},\n\t\tResolve: func(params graphql.ResolveParams) (interface{}, error) {\n\t\t\treturn resolver(params, db, req)\n\t\t},\n\t}\n}\ntype Args struct {\n\tEmail string `json:\"email\" validate:\"required,email\"`\n}\nfunc resolver(params graphql.ResolveParams, db *gorm.DB, req *http.Request) (interface{}, error) {\n\targs := params.Args\n\tsuccess := true\n\tmessages := []string{}\n\tvar argsDecoded Args\n\terr := mapstructure.Decode(args, &argsDecoded)\n\tif err != nil {\n\t\tsuccess = false\n\t\tmessages = []string{\"Decoding map data type failed.\"}\n\t}\n\tif success {\n\t\tvalidate := validator.New()\n\t\terrValidate := validate.Struct(argsDecoded)\n\t\tif errValidate != nil {\n\t\t\tsuccess = false\n\t\t\tmessages = strings.Split(errValidate.Error(), \"\\n\")\n\t\t}\n\t}\n\tif success {\n\t\tuserImpl := repository.NewAuthRepo(db, req)\n\t\temail := argsDecoded.Email\n\t\terr := userImpl.SendOtpEmail(email)\n\t\tif err != nil {\n\t\t\tsuccess = false\n\t\t\tmessages = []string{err.Error()}\n\t\t}\n\t}\n\tresponse := fiber.Map{\n\t\t\"success\":  success,\n\t\t\"messages\": messages,\n\t}\n\treturn response, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77502242/xor-cipher-in-golang-with-custom-base64encoding-decoding-small-question-regardi",
    "body": "package main\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n)\nfunc XOR(text string, encrypt bool, key string) string {\n\t// Convert the key to a byte array\n\tkeyBytes := []byte(key)\n\t// If decrypting, decode the input text from base64\n\tif !encrypt {\n\t\tdecodedText, err := base64.StdEncoding.DecodeString(text)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error decoding base64:\", err)\n\t\t\treturn \"\"\n\t\t}\n\t\ttext = string(decodedText)\n\t}\n\t// Convert the text to a byte array\n\ttextBytes := []byte(text)\n\t// Initialize result array\n\tresultBytes := make([]byte, len(textBytes))\n\t// Perform XOR operation\n\tfor i := 0; i < len(textBytes); i++ {\n\t\t// Get the corresponding byte from the key, using modulo to repeat the key if necessary\n\t\tkeyByte := keyBytes[i%len(keyBytes)]\n\t\t// Perform XOR\n\t\tif encrypt {\n\t\t\tresultBytes[i] = textBytes[i] ^ keyByte\n\t\t} else {\n\t\t\t// For decryption, XOR operation is the same as encryption\n\t\t\tresultBytes[i] = textBytes[i] ^ keyByte\n\t\t}\n\t}\n\t// If encrypting, encode the result as base64\n\tif encrypt {\n\t\tresultText := base64.StdEncoding.EncodeToString(resultBytes)\n\t\treturn resultText\n\t}\n\t// If decrypting, return the result as a string\n\treturn string(resultBytes)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77264688/which-method-is-used-for-verifying-secp256k1-signatures-in-gos-btcec-library",
    "body": "// This example demonstrates verifying a secp256k1 signature against a public\n// key that is first parsed from raw bytes.  The signature is also parsed from\n// raw bytes.\nfunc Example_verifySignature() {\n\t// Decode hex-encoded serialized public key.\n\tpubKeyBytes, err := hex.DecodeString(\"02a673638cb9587cb68ea08dbef685c\" +\n\t\t\"6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tpubKey, err := btcec.ParsePubKey(pubKeyBytes)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t// Decode hex-encoded serialized signature.\n\tsigBytes, err := hex.DecodeString(\"30450220090ebfb3690a0ff115bb1b38b\" +\n\t\t\"8b323a667b7653454f1bccb06d4bbdca42c2079022100ec95778b51e707\" +\n\t\t\"1cb1205f8bde9af6592fc978b0452dafe599481c46d6b2e479\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tsignature, err := ecdsa.ParseSignature(sigBytes)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t// Verify the signature for the message using the public key.\n\tmessage := \"test message\"\n\tmessageHash := chainhash.DoubleHashB([]byte(message))\n\tverified := signature.Verify(messageHash, pubKey)\n\tfmt.Println(\"Signature Verified?\", verified)\n\t// Output:\n\t// Signature Verified? true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77255161/how-to-generate-a-x509-certificate-chain-of-arbitrary-length-in-go",
    "body": "func keyIDFromCryptoKey(pubKey crypto.PublicKey) string {\n\t// Generate and return a fingerprint of the public key.\n\t// For an RSA key this should be:\n\t//   SHA256(DER encoded ASN1)\n\t// Then truncated to 240 bits and encoded into 12 base32 groups like so:\n\t//   ABCD:EFGH:IJKL:MNOP:QRST:UVWX:YZ23:4567:ABCD:EFGH:IJKL:MNOP\n\tderBytes, err := x509.MarshalPKIXPublicKey(pubKey)\n\tif err != nil {\n\t\treturn \"\"\n\t}\n\thasher := crypto.SHA256.New()\n\thasher.Write(derBytes)\n\treturn keyIDEncode(hasher.Sum(nil)[:30])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77245039/tpm2-loadexternal-throws-error-code-0x16-unsupported-symmetric-algorithm-or",
    "body": "Command                                   .\nTPMI_ST_COMMAND_TAG                       |   .tag                                       8001                 TPMI_ST_COMMAND_TAG.NO_SESSIONS\nUINT32                                    |   .commandSize                               00000068             104\nTPM_CC                                    |   .commandCode                               00000167             TPM_CC.LoadExternal\nTPMS_COMMAND_HANDLES_LOAD_EXTERNAL        |   .handles\nTPMS_COMMAND_PARAMS_LOAD_EXTERNAL         |   .parameters\nTPM2B_SENSITIVE                           |   |   .inPrivate\nUINT16                                    |   |   |   .size                              0000                 0\nTPMT_SENSITIVE                            |   |   |   .sensitiveArea\nTPM2B_PUBLIC                              |   |   .inPublic\nUINT16                                    |   |   |   .size                              0056                 86\nTPMT_PUBLIC                               |   |   |   .publicArea\nTPMI_ALG_PUBLIC                           |   |   |   |   .type                          0023                 TPMI_ALG_PUBLIC.ECC\nTPMI_ALG_HASH                             |   |   |   |   .nameAlg                       000b                 TPMI_ALG_HASH.SHA256\nTPMA_OBJECT                               |   |   |   |   .objectAttributes              00060040             393280\n                                          |   |   |   |   |   .reserved                                       ...............................0\n                                          |   |   |   |   |   .fixedTPM                                       ..............................0.\n                                          |   |   |   |   |   .stClear                                        .............................0..\n                                          |   |   |   |   |   .reserved0                                      ............................0...\n                                          |   |   |   |   |   .fixedParent                                    ...........................0....\n                                          |   |   |   |   |   .sensitiveDataOrigin                            ..........................0.....\n                                          |   |   |   |   |   .userWithAuth                                   .........................1......\n                                          |   |   |   |   |   .adminWithPolicy                                ........................0.......\n                                          |   |   |   |   |   .reserved1                                      ......................00........\n                                          |   |   |   |   |   .noDA                                           .....................0..........\n                                          |   |   |   |   |   .encryptedDuplication                           ....................0...........\n                                          |   |   |   |   |   .reserved2                                      ................0000............\n                                          |   |   |   |   |   .restricted                                     ...............0................\n                                          |   |   |   |   |   .decrypt                                        ..............1.................\n                                          |   |   |   |   |   .sign_decrypt                                   .............1..................\n                                          |   |   |   |   |   .sign                                           ............0...................\n                                          |   |   |   |   |   .reserved3                                      000000000000....................\nTPM2B_DIGEST                              |   |   |   |   .authPolicy\nUINT16                                    |   |   |   |   |   .size                      0000                 0\nlist[BYTE]                                |   |   |   |   |   .buffer\nTPMU_PUBLIC_PARMS                         |   |   |   |   .parameters\nTPMS_ECC_PARMS                            |   |   |   |   |   .eccDetail\nTPMT_SYM_DEF_OBJECT                       |   |   |   |   |   |   .symmetric\nTPMI_ALG_SYM_OBJECT                       |   |   |   |   |   |   |   .algorithm         0010                 TPMI_ALG_SYM_OBJECT.NULL\nTPMU_SYM_KEY_BITS                         |   |   |   |   |   |   |   .keyBits\nTPMU_SYM_MODE                             |   |   |   |   |   |   |   .mode\nTPMU_SYM_DETAILS                          |   |   |   |   |   |   |   .details\nTPMT_ECC_SCHEME                           |   |   |   |   |   |   .scheme\nTPMI_ALG_ECC_SCHEME                       |   |   |   |   |   |   |   .scheme            0010                 TPMI_ALG_ECC_SCHEME.NULL\nTPMU_ASYM_SCHEME                          |   |   |   |   |   |   |   .details\nTPMI_ECC_CURVE                            |   |   |   |   |   |   .curveID               0003                 TPMI_ECC_CURVE.NIST_P256\nTPMT_KDF_SCHEME                           |   |   |   |   |   |   .kdf\nTPMI_ALG_KDF                              |   |   |   |   |   |   |   .scheme            0010                 TPMI_ALG_KDF.NULL\nTPMU_KDF_SCHEME                           |   |   |   |   |   |   |   .details\nTPMU_PUBLIC_ID                            |   |   |   |   .unique\nTPMS_ECC_POINT                            |   |   |   |   |   .ecc\nTPM2B_ECC_PARAMETER                       |   |   |   |   |   |   .x\nUINT16                                    |   |   |   |   |   |   |   .size              0020                 32\nlist[BYTE]                                |   |   |   |   |   |   |   .buffer            f1ef85f33015e46293608004c167d9cfef3b4d37e01a19b6697930823da93d77 ....0..b.`...g...;M7....iy0.=.=w\nTPM2B_ECC_PARAMETER                       |   |   |   |   |   |   .y\nUINT16                                    |   |   |   |   |   |   |   .size              0020                 32\nlist[BYTE]                                |   |   |   |   |   |   |   .buffer            9d845395e9720dcaf765255ce321c7f588e0b5c29f6355caf99953b741f47aed ..S..r...e%\\.!.......cU...S.A.z.\nTPMI_RH_HIERARCHY                         |   |   .hierarchy                             40000001             TPM_RH.OWNER\nResponse                                  .\nTPM_ST                                    |   .tag                                       8001                 TPM_ST.NO_SESSIONS\nUINT32                                    |   .responseSize                              00000032             50\nTPM_RC                                    |   .responseCode                              00000000             TPM_RC.SUCCESS\nTPMS_RESPONSE_HANDLES_LOAD_EXTERNAL       |   .handles\nTPM_HANDLE                                |   |   .objectHandle                          80000002             TPM_HR.TRANSIENT.000002\nTPMS_RESPONSE_PARAMS_LOAD_EXTERNAL        |   .parameters\nTPM2B_NAME                                |   |   .name\nUINT16                                    |   |   |   .size                              0022                 34\nlist[BYTE]                                |   |   |   .name                              000b81cda27e7bb1a82b4e8b04994a856cb838329451d4f834ec74a003c2c4a0c8a6 .....~{..+N...J.l.82.Q..4.t......."
  },
  {
    "url": "https://stackoverflow.com/questions/77208629/how-to-mock-the-elastic-search-sdk-for-go",
    "body": "type MockTransport struct {\n\tResponse    *http.Response\n\tRoundTripFn func(req *http.Request) (*http.Response, error)\n}\nfunc (t *MockTransport) RoundTrip(req *http.Request) (*http.Response, error) {\n\treturn t.RoundTripFn(req)\n}\nfunc TestStore(t *testing.T) {\n\tmockTransport := MockTransport{\n\t\tResponse: &http.Response{\n\t\t\tStatusCode: http.StatusOK,\n\t\t\tBody:       io.NopCloser(strings.NewReader(`{}`)),\n\t\t\tHeader:     http.Header{\"X-Elastic-Product\": []string{\"Elasticsearch\"}},\n\t\t},\n\t}\n\tmockTransport.RoundTripFn = func(req *http.Request) (*http.Response, error) { return mockTransport.Response, nil }\n\tclient, err := elasticsearch.NewClient(elasticsearch.Config{\n\t\tTransport: &mockTransport,\n\t})\n\tif err != nil {\n\t\tt.Fatalf(\"Error creating Elasticsearch client: %s\", err)\n\t}\n    // Now you can use the client for testing.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77141465/negative-and-positive-numbers-golang",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tvar score int\n\t_, err := fmt.Scanln(&score)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// print whether the number is negative, zero, or positive, and also whether it is even or odd, in one line\n    // take note that fmt.Print is used here and not Println, so that it does not append a newline to the end of the string\n\tif score < 0 {\n\t\tfmt.Print(\"The number is negative\")\n\t} else if score == 0 {\n\t\tfmt.Print(\"The number is zero\")\n\t} else {\n\t\tfmt.Print(\"The number is positive\")\n\t}\n\tif score%2 == 0 {\n\t\tfmt.Println(\" and even\")\n\t} else {\n\t\tfmt.Println(\" and odd\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77113965/how-do-i-access-the-underlying-struct-of-a-reflect-value",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"time\"\n)\ntype MyStruct struct {\n\tTimestamp time.Time\n\tName      string\n}\nfunc main() {\n\t// Create a MyStruct value.\n\ts := MyStruct{\n\t\tTimestamp: time.Now(),\n\t\tName:      \"Test\",\n\t}\n\t// Get the reflect.Value of the MyStruct value.\n\tval := reflect.ValueOf(s)\n\t// Access the Timestamp field.\n\ttimeField := val.FieldByName(\"Timestamp\")\n\t// Use Interface() to get an interface{} value, then do a type assertion\n\t// to get the underlying time.Time.\n\tunderlyingTime, ok := timeField.Interface().(time.Time)\n\tif !ok {\n\t\tfmt.Println(\"Failed to get the underlying time.Time\")\n\t\treturn\n\t}\n\tfmt.Println(\"Underlying time.Time:\", underlyingTime)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77069823/problems-with-cross-field-custom-validation-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/go-playground/validator/v10\"\n)\ntype TeamMember struct {\n\tCountry  string\n\tAge      int\n\tDropShip bool\n}\nfunc TeamMemberStructLevelValidation(sl validator.StructLevel) {\n\tteamMember := sl.Current().Interface().(TeamMember)\n\tif teamMember.DropShip {\n\t\t// submit the Country and Age to another API to see if this team member is eligible.\n\t\tif teamMember.Country == \"Canada\" && teamMember.Age == 34 {\n\t\t\tsl.ReportError(teamMember.Country, \"country\", \"Country\", \"is_eligible\", \"\")\n\t\t\tsl.ReportError(teamMember.Age, \"age\", \"Age\", \"is_eligible\", \"\")\n\t\t}\n\t}\n}\nfunc main() {\n\tvalidate := validator.New(validator.WithRequiredStructEnabled())\n\tvalidate.RegisterStructValidation(TeamMemberStructLevelValidation, TeamMember{})\n\tteamMember := TeamMember{\"Canada\", 34, true}\n\terr := validate.Struct(teamMember)\n\tfmt.Printf(\"%+v\\n\", err)\n\t// Output:\n\t//   Key: 'TeamMember.country' Error:Field validation for 'country' failed on the 'is_eligible' tag\n\t//   Key: 'TeamMember.age' Error:Field validation for 'age' failed on the 'is_eligible' tag\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76936278/gos-kafka-library-watermill-and-multiple-subscribers",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/IBM/sarama\"\n)\nconst (\n\ttopic = \"test2\"\n)\nfunc main() {\n\tbrokers := []string{\"localhost:9092\", \"localhost:9093\"}\n\tcfg := sarama.NewConfig()\n\tcfg.Producer.Return.Successes = true\n\tproducer, err := sarama.NewSyncProducer(brokers, cfg)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tcounter := 0\n\tfor {\n\t\tmsg := sarama.ProducerMessage{\n\t\t\tTopic:     topic,\n\t\t\tPartition: -1,\n\t\t\tValue:     sarama.StringEncoder(fmt.Sprintf(\"Hello world %d\", counter)),\n\t\t}\n\t\tif counter%2 == 0 {\n\t\t\tmsg.Key = sarama.StringEncoder(\"two\")\n\t\t} else {\n\t\t\tmsg.Key = sarama.StringEncoder(\"one\")\n\t\t}\n\t\tpartition, offset, err := producer.SendMessage(&msg)\n\t\tif err != nil {\n\t\t\tlog.Print(\"Failed to sent message\", err)\n\t\t}\n\t\tlog.Printf(\"Sent message to partiotion %d with offset %d key %s\", partition, offset, msg.Key)\n\t\tcounter++\n\t\ttime.Sleep(10 * time.Millisecond)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76936278/gos-kafka-library-watermill-and-multiple-subscribers",
    "body": "2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7882 key two\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7883 key one\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7884 key two\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7885 key one\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7886 key two\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7887 key one\n2023/08/21 09:04:37 Sent message to partiotion 1 with offset 7888 key two"
  },
  {
    "url": "https://stackoverflow.com/questions/76924749/gorm-association-error-got-error-unsupported-data-type",
    "body": "type MultiString []string\n// User Model\ntype User struct {\n\tID           uuid.UUID `json:\"user_id\" gorm:\"type:uuid;default:gen_random_uuid();primary_key\"`\n\tCreatedAt    time.Time `json:\"created_at\" gorm:\"not null;default:NOW()\"`\n\tUpdatedAt    time.Time `json:\"-\" gorm:\"not null;NOW()\"`\n\tName         string    `json:\"name\" gorm:\"type:varchar(255);not null\"`\n\tEmail        string    `json:\"email\" gorm:\"uniqueIndex;not null\"`\n\tPassword     string    `json:\"-\" gorm:\"not null\"` // \"-\" excludes the Password field from JSON\n\tRole         string    `json:\"user_role,omitempty\" gorm:\"type:varchar(255);not null\"`\n\tPhoto        string    `json:\"photo,omitempty\" gorm:\"type:varchar(255);default:''\"`\n\tApiKey       string    `json:\"-\" gorm:\"type:varchar(255);default:''\"`\n\tVerified     bool      `json:\"verified\" gorm:\"default:false\"`\n\tPlaygroundID uuid.UUID `json:\"folder\" gorm:\"type:uuid\"`\n\tFolders      []Folder  `gorm:\"foreignKey:AuthorID\"`\n}\ntype Prompt struct {\n\tID          uuid.UUID    `json:\"folder_id\" gorm:\"type:uuid;default:gen_random_uuid();primary_key\"`\n\tCreatedAt   time.Time    `json:\"created_at\" gorm:\"not null;default:NOW()\"`\n\tUpdatedAt   time.Time    `json:\"updated_at\" gorm:\"not null;NOW()\"`\n\tTitle       string       `json:\"prompt_title\" gorm:\"not null\"`\n\tPrompt      string       `json:\"prompt\" gorm:\"not null\"`\n\tTags        MultiString  `json:\"tags\" gorm:\"type:text\"`\n\tAuthorID    uuid.UUID    `json:\"author_id\" gorm:\"type:uuid\"`\n\tFolderID    uuid.UUID    `json:\"folder\" gorm:\"type:uuid\"`\n\tDescription string       `json:\"description\" gorm:\"not null\"`\n\tPlaygrounds []Playground `json:\"playgrounds\" gorm:\"foreignKey:PromptID\"`\n}\ntype Playground struct {\n\tID         uuid.UUID `json:\"playground_id\" gorm:\"type:uuid;default:gen_random_uuid();primary_key\"`\n\tCreatedAt  time.Time `json:\"created_at\" gorm:\"not null;default:NOW()\"`\n\tUpdatedAt  time.Time `json:\"update_at\" gorm:\"not null;NOW()\"`\n\tName       string    `json:\"name\" gorm:\"varchar(255);not null\"`\n\tTemplate   string    `json:\"prompt_template\" gorm:\"not null\"`\n\tTemprature uint      `json:\"temprature\" gorm:\"default:3\"`\n\tAiModel    string    `json:\"ai_model\" gorm:\"default:'gpt-3.5-turbo'\"`\n\tTopPValue  uint      `json:\"top_p_value\" gorm:\"default:0\"`\n\tLikes      uint32    `json:\"likes\" gorm:\"default:0\"`\n\tForks      uint32    `json:\"forks_count\" gorm:\"default:0\"`\n\tAuthor     User      `json:\"author\" gorm:\"foreignKey:AuthorID\"`\n\tLikers     []User    `json:\"likers\" gorm:\"foreignKey:PlaygroundID\"`\n\tPromptID   uuid.UUID `json:\"prompt_id\"`\n\tAuthorID   uuid.UUID `json:\"author_id\"`\n}\ntype Folder struct {\n\tID        uuid.UUID `json:\"folder_id\" gorm:\"type:uuid;default:gen_random_uuid();primary_key\"`\n\tCreatedAt time.Time `json:\"created_at\" gorm:\"not null;default:NOW()\"`\n\tUpdatedAt time.Time `json:\"updated_at\" gorm:\"not null;NOW()\"`\n\tName      string    `json:\"name\" gorm:\"varchar(255);not null\"`\n\tAuthorID  uuid.UUID `json:\"author_id\" gorm:\"type:uuid\"`\n\tPrompts   []Prompt  `json:\"prompts\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76907893/how-can-i-set-a-context-value-on-request-for-my-middleware-getting-go-staticche",
    "body": "func (h *HTTP) renderError(w http.ResponseWriter, r *http.Request, err error) {\n            switch e := err.(type) {\n            case *app.AppError:\n                w.WriteHeader(e.Status)\n                render.JSON(w, r, e)\n                return\n            default:\n                internalErr := app.NewInternalError(\"internal-error\", \"Something went wrong\", nil)\n                w.WriteHeader(internalErr.Status)\n                render.JSON(w, r, internalErr)\n                return\n            }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76825866/what-is-wrong-with-this-implementation-of-merge-sort",
    "body": "func merge_sort(array []uint) []uint {\n\tif len(array) > 1 {\n\t\tr := len(array) / 2\n\t\tL := array[:r]\n\t\tM := array[r:]\n\t\tL = merge_sort(L)\n\t\tM = merge_sort(M)\n\t\tresult := make([]uint, len(array))\n\t\ti, j, k := 0, 0, 0\n\t\tfor i < len(L) && j < len(M) {\n\t\t\tif L[i] <= M[j] {\n\t\t\t\tresult[k] = L[i]\n\t\t\t\ti++\n\t\t\t} else {\n\t\t\t\tresult[k] = M[j]\n\t\t\t\tj++\n\t\t\t}\n\t\t\tk++\n\t\t}\n\t\tfor i < len(L) {\n\t\t\tresult[k] = L[i]\n\t\t\ti++\n\t\t\tk++\n\t\t}\n\t\tfor j < len(M) {\n\t\t\tresult[k] = M[j]\n\t\t\tj++\n\t\t\tk++\n\t\t}\n\t\treturn result\n\t}\n\treturn array\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76752902/getting-the-actual-error-source-in-go-with-uber-zap-logging-in-grpc-middleware",
    "body": "import (\n\t\"github.com/pkg/errors\"\n)\n// ...\nfunc (s *ProviderServer) Pay(ctx context.Context, in *payment.PayRequest) (string, error) {\n\tresp, err := ctx.Value(in.Provider).(provider.IPayment).Exec(ctx, in)\n\tif err != nil {\n\t\t// Wrap the error with file and line information\n\t\terr = errors.Wrap(err, \"pay error\")\n\t\t// Log the wrapped error\n\t\ts.log.Errorw(\"Error occurred\", \"error\", err)\n\t\treturn resp.Result, err\n\t} else {\n\t\ts.log.Infow(\"Request processed successfully\", \"response\", resp)\n\t\treturn resp.Result, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76675783/go-reverseproxy-handle-redirect-error-http-invalid-read-on-closed-body",
    "body": "// after transport, the request body will close,\n// so if we need redirect it, we have to wrap the body and ensure that it won't be close\n// we will handle it after we finished.\n// see this issue: https://github.com/flynn/flynn/issues/872\ntype fakeCloseReadCloser struct {\n\tio.ReadCloser\n}\nfunc (w *fakeCloseReadCloser) Close() error {\n\treturn nil\n}\nfunc (w *fakeCloseReadCloser) RealClose() error {\n\tif w.ReadCloser == nil {\n\t\treturn nil\n\t}\n\treturn w.ReadCloser.Close()\n}\ntype Proxy struct {\n\t*httputil.ReverseProxy\n}\nfunc (p *Proxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n\treq.Body = &fakeCloseReadCloser{req.Body}\n\t// The body can only be read once, so we use this func to make the body available on the second forwarding\n\tif req.Body != nil {\n\t\tbodyBytes, _ := io.ReadAll(req.Body)\n\t\t_ = req.Body.(*fakeCloseReadCloser).RealClose()\n\t\treq.Body = &fakeCloseReadCloser{io.NopCloser(bytes.NewBuffer(bodyBytes))}\n\t\treq.GetBody = func() (io.ReadCloser, error) {\n\t\t\tbody := io.NopCloser(bytes.NewBuffer(bodyBytes))\n\t\t\treturn body, nil\n\t\t}\n\t}\n\tp.ReverseProxy.ServeHTTP(rw, req)\n\t_ = req.Body.(*fakeCloseReadCloser).RealClose()\n}\n// Get returns a proxy for the given shard.\nfunc (pp *ProxyPool) Get(url *urlpkg.URL) *Proxy {\n\tpp.mutex.Lock()\n\tdefer pp.mutex.Unlock()\n\tp, ok := pp.pool[url.String()]\n\tif !ok {\n\t\t// When the original target server returns 302,\n\t\t// proxy.ModifyResponse will return a customized redirect error containing location,\n\t\t// proxy.ErrorHandler catches the error and modifies the request,\n\t\t// adds a \"redirect\" header field to it, and Serve it again.\n\t\t// At this point proxy.Director will detect the \"redirect\" field in the request header\n\t\t// and send the request to the final target server.\n\t\trp := httputil.NewSingleHostReverseProxy(url)\n\t\tpx := &Proxy{ReverseProxy: rp}\n\t\tpx.ErrorLog = proxyLogger\n\t\tpx.ModifyResponse = func(response *http.Response) error {\n\t\t\tif response.StatusCode > 300 && response.StatusCode < 400 {\n\t\t\t\tlocation, err := response.Location()\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn &RedirectErr{location: location}\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\t\tpx.Director = func(request *http.Request) {\n\t\t\tif redirect := request.Header.Get(\"redirect\"); redirect != \"\" {\n\t\t\t\trequest.Header.Del(\"redirect\")\n\t\t\t\tu, _ := urlpkg.Parse(redirect)\n\t\t\t\t// rewind\n\t\t\t\tif request.GetBody != nil {\n\t\t\t\t\tb, _ := request.GetBody()\n\t\t\t\t\trequest.Body = b\n\t\t\t\t}\n\t\t\t\trewriteRequestURL(request, u)\n\t\t\t\treturn\n\t\t\t}\n\t\t\trewriteRequestURL(request, url)\n\t\t}\n\t\tpx.ErrorHandler = func(writer http.ResponseWriter, request *http.Request, err error) {\n\t\t\tvar redirect *RedirectErr\n\t\t\tif redirect, ok = err.(*RedirectErr); !ok {\n\t\t\t\tp.ErrorLog.Printf(\"http: proxy error: %v\", err)\n\t\t\t\twriter.WriteHeader(http.StatusBadGateway)\n\t\t\t} else {\n\t\t\t\trequest.Header.Set(\"redirect\", redirect.location.String())\n\t\t\t\tpx.ReverseProxy.ServeHTTP(writer, request)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tpp.pool[url.Host] = px\n\t\tp = px\n\t}\n\treturn p\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76609926/go-load-data-into-three-struct-using-a-common-method",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\ntype a struct {\n\ta string\n}\ntype b struct {\n\tb string\n}\ntype c struct {\n\tc string\n}\ntype l struct {\n\ta\n\tb\n\tc\n}\nfunc main() {\n\tl := &l{}\n\tfilename := \"test.txt\"\n\tl.parse_file(filename)\n\tfmt.Println(\"A : \", l.a)\n\tfmt.Println(\"B : \", l.b)\n\tfmt.Println(\"C : \", l.c)\n}\n// In below method, *l not sure how to define which can include 3 struct\nfunc (l *l) parse_file(filename string) {\n\t// open a file\n\tfile, err := os.Open(filename)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\t// read line by line\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tswitch {\n\t\t// if the line has value a then load into Struct a\n\t\tcase strings.HasPrefix(line, \"a -\"):\n\t\t\t// add the data to the a object\n\t\t\tl.a = a{\n\t\t\t\ta: line,\n\t\t\t}\n\t\t//If the line has value b then load into Struct b\n\t\tcase strings.HasPrefix(line, \"b -\"):\n\t\t\t// add the data to the b object\n\t\t\tl.b = b{\n\t\t\t\tb: line,\n\t\t\t}\n\t\t//If the line has value C then load into Struct c\n\t\tcase strings.HasPrefix(line, \"c -\"):\n\t\t\t// add the data to the c object\n\t\t\tl.c = c{\n\t\t\t\tc: line,\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76516010/gorm-configure-many-to-many-with-customs-columns",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Residue struct {\n\tID   int\n\tName string\n\tResidueResidueCategories []*ResidueResidueCategory\n}\ntype ResidueResidueCategory struct {\n\tID                int `gorm:\"primaryKey\"`\n\tResidueCategoryId int `gorm:\"column:residueCategoryId\"`\n\tResidueId         int `gorm:\"column:residueId\"`\n}\ntype ResidueCategory struct {\n\tID   int\n\tName string\n\tResidueResidueCategories []*ResidueResidueCategory\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Residue{}, &ResidueCategory{}, &ResidueResidueCategory{})\n\t// insert into parent tables\n\tdb.Create(&Residue{ID: 1, Name: \"residue 1\"})\n\tdb.Create(&ResidueCategory{ID: 1, Name: \"category 1\"})\n\t// insert into join table\n\tdb.Debug().Model(&Residue{ID: 1}).Association(\"ResidueResidueCategories\").Append(&ResidueResidueCategory{ResidueCategoryId: 1, ResidueId: 1})\n\t// fetch data\n\tvar joinTableRecords []ResidueResidueCategory\n\tif err := db.Model(&ResidueResidueCategory{}).Find(&joinTableRecords).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range joinTableRecords {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76512267/gin-gonic-framework-confusing-response-status-codes",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n)\n// input DTO provided by HTTP Request\ntype createDataModeInput struct {\n\tName string `json:\"name\" binding:\"required\"`\n}\n// output DTO to send in error scenario\ntype DataValidationErrorApiResponse struct {\n\tCode    string `json:\"code\"`\n\tMessage string `json:\"message\"`\n}\n// function to build the DataValidationErrorApiResponse instance\nfunc GetValidationErrors(err error) DataValidationErrorApiResponse {\n\treturn DataValidationErrorApiResponse{\n\t\tCode:    \"VALIDATION_ERR\",\n\t\tMessage: err.Error(),\n\t}\n}\nfunc RespondWithValidationError(c *gin.Context, validationErrors DataValidationErrorApiResponse) {\n\tc.AbortWithStatusJSON(http.StatusUnprocessableEntity, validationErrors)\n}\nfunc CreateDataModeAction(c *gin.Context) {\n\tvar input createDataModeInput\n\tif err := c.ShouldBind(&input); err != nil {\n\t\tRespondWithValidationError(c, GetValidationErrors(err))\n\t\treturn\n\t}\n\tc.JSON(http.StatusCreated, nil)\n}\nfunc main() {\n\tgin.SetMode(gin.DebugMode)\n\tr := gin.Default()\n\tr.POST(\"/demo\", CreateDataModeAction)\n\tr.Run((\":8000\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76451264/how-to-load-an-inlined-svg-in-go-using-gotk3-and-librsvg",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/gotk3/gotk3/gtk\"\n\t\"github.com/gotk3/gotk3/gdk\"\n)\nfunc main() {\n\tgtk.Init(nil)\n\twin, err := gtk.WindowNew(gtk.WINDOW_TOPLEVEL)\n\tif err != nil {\n\t\tlog.Fatal(\"Unable to create window:\", err)\n\t}\n\twin.SetTitle(\"Svg Example\")\n\twin.Connect(\"destroy\", func() {\n\t\tgtk.MainQuit()\n\t})\n\tcolor := \"#FF0000\"\n\tsvgdata := \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\" +\n \t\t\t   \"<!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\" \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\\n\" +\n               \"<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"32px\\\" height=\\\"32px\\\" viewBox=\\\"0 0 32 32\\\" enable-background=\\\"new 0 0 32 32\\\" xml:space=\\\"preserve\\\">\\n\" +\n               \"    <rect fill=\\\"\" + color + \"\\\" width=\\\"32\\\" height=\\\"32\\\"/>\\n\" +\n               \"</svg>\"\n\tsvgImage, err  := ImageNewFromSvg(svgdata)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\twin.Add(svgImage)\n\twin.ShowAll()\n\tgtk.Main()\n}\nfunc ImageNewFromSvg(svg string) (*gtk.Image, error){\n  pixbuf, err := gdk.PixbufNewFromDataOnly([]byte(svg))\n  if err !=  nil {\n  \treturn nil, err\n  }\n\n  img, err := gtk.ImageNewFromPixbuf(pixbuf)\n\n  if err !=  nil {\n  \treturn nil, err\n  }\n\n  return img, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76437210/updatecolumns-triggers-gorm-hook-with-incorrect-values",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Post struct {\n\tID        int\n\tDownvote  uint `gorm:\"column:downvote\"`\n\tUpvote    uint `gorm:\"column:upvote\"`\n\tVoteScore int  `gorm:\"column:vote_score\"`\n}\nfunc (p *Post) AfterUpdate(tx *gorm.DB) error {\n\tfmt.Println(\"upvotes: \", p.Upvote)\n\tfmt.Println(\"downvotes: \", p.Downvote)\n\tp.VoteScore = int(p.Upvote) - int(p.Downvote)\n\tif err := tx.Model(&Post{}).Where(\"id = ?\", p.ID).UpdateColumn(\"vote_score\", p.VoteScore).Error; err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Post{})\n\t// db.Create(&Post{ID: 1})\n\tif err := db.Model(&Post{ID: 1}).Where(\"id = ?\", 1).Updates(map[string]interface{}{\"upvote\": 4, \"downvote\": 3}).Error; err != nil {\n\t\tdb.Rollback()\n\t\tfmt.Println(err.Error())\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76421974/how-to-query-a-model-where-the-embedded-value-of-a-relationship-equals-a-specifi",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Post struct {\n\tPublished bool\n}\ntype Car struct {\n\tgorm.Model\n\tBrand  string\n\tTypeID int\n\tType   Type\n\tPost   Post `gorm:\"embedded\"`\n}\ntype Type struct {\n\tgorm.Model\n\tName  string\n\tCarID int\n\tPost  Post `gorm:\"embedded\"`\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Car{})\n\tdb.AutoMigrate(&Type{})\n\t// uncomment these to seed data\n\t// db.Create(&Car{Brand: \"Tesla\", Type: Type{Name: \"SUV\", Post: Post{Published: true}}, Post: Post{Published: true}})\n\t// db.Create(&Car{Brand: \"Ford\", Type: Type{Name: \"City\", Post: Post{Published: false}}, Post: Post{Published: false}})\n\tvar cars []Car\n\tif err := db.Debug().Model(&Car{}).Preload(\"Type\").Where(&Car{Post: Post{Published: true}}).Find(&cars).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range cars {\n\t\tfmt.Println(v.Type.Name)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76419750/how-to-eager-loading-belongs-to-relationship-using-gorm",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype User struct {\n\tgorm.Model\n\tName      string\n\tCompanyID int\n\tCompany   Company\n}\ntype Company struct {\n\tID   int\n\tName string\n\tUser *User\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Company{})\n\tdb.AutoMigrate(&User{})\n\t// db.Create(&Company{ID: 1, Name: \"ACME\", User: &User{Name: \"John\"}})\n\t// db.Create(&User{Model: gorm.Model{ID: 2}, Name: \"Suzy\", Company: Company{ID: 2, Name: \"XYZ\"}})\n\tvar company Company\n\tif err := db.Debug().Model(&Company{}).Preload(\"User\").Find(&company).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"User:\", company.User.Name)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76414325/wkhtmltopdf-not-displaying-footer-on-pdf",
    "body": "package main\nimport (\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\twkhtml \"github.com/SebastiaanKlippert/go-wkhtmltopdf\"\n)\nfunc HTMLtoPDF(html string, someID int64) (*wkhtml.PDFGenerator, error) {\n\tpdfg, err := wkhtml.NewPDFGenerator()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tpage := wkhtml.NewPageReader(strings.NewReader(html))\n\tpage.FooterHTML.Set(\"footer.html\")\n\t// the following parameters are passed to footer.html in the query.\n\tpage.Replace.Set(\"hello\", \"world\")\n\tpage.Replace.Set(\"my_id\", strconv.Itoa(int(someID)))\n\tpdfg.AddPage(page)\n\tpdfg.MarginTop.Set(10)\n\tpdfg.MarginBottom.Set(10)\n\terr = pdfg.Create()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn pdfg, nil\n}\nfunc main() {\n\tpdfg, err := HTMLtoPDF(html, 123457789)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = os.WriteFile(\"temp.pdf\", pdfg.Bytes(), 0o644)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\nvar html = `\n<html>\n    <body style=\"font-size:100pt;\">\n        Hello world!\n    </body>\n</html>\n`"
  },
  {
    "url": "https://stackoverflow.com/questions/76414325/wkhtmltopdf-not-displaying-footer-on-pdf",
    "body": "<!DOCTYPE html>\n<html>\n  <head>\n    <script>\n      function subst() {\n        var vars = {};\n        var query_strings_from_url = document.location.search\n          .substring(1)\n          .split('&');\n        for (var query_string in query_strings_from_url) {\n          if (query_strings_from_url.hasOwnProperty(query_string)) {\n            var temp_var = query_strings_from_url[query_string].split('=', 2);\n            vars[temp_var[0]] = decodeURI(temp_var[1]);\n          }\n        }\n        var css_selector_classes = [\n          // these values are provided by wkhtmltopdf.\n          'page',\n          'frompage',\n          'topage',\n          'webpage',\n          'section',\n          'subsection',\n          'date',\n          'isodate',\n          'time',\n          'title',\n          'doctitle',\n          'sitepage',\n          'sitepages',\n          // these values are provided by the \"replace\" option.\n          'hello',\n          'my_id',\n        ];\n        for (var css_class in css_selector_classes) {\n          if (css_selector_classes.hasOwnProperty(css_class)) {\n            var element = document.getElementsByClassName(\n              css_selector_classes[css_class]\n            );\n            for (var j = 0; j < element.length; ++j) {\n              element[j].textContent = vars[css_selector_classes[css_class]];\n            }\n          }\n        }\n      }\n    </script>\n  </head>\n  <body style=\"border: 0; margin: 0\" onload=\"subst()\">\n    <table style=\"border-top: 1px solid black; width: 100%\">\n      <tr>\n        <td class=\"section\"></td>\n        <td class=\"hello\"></td>\n        <td class=\"my_id\"></td>\n        <td style=\"text-align: right\">\n          Page <span class=\"page\"></span> of <span class=\"topage\"></span>\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/76391050/multicast-doesnt-work-on-linux-in-golang",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n\t\"golang.org/x/net/ipv4\"\n)\nvar (\n\tlisten string\n\tjoin   string\n\tsend   string\n\tifname string\n)\nfunc main() {\n\tflag.StringVar(&listen, \"listen\", \"230.0.0.1:9001\", \"\")\n\tflag.StringVar(&join, \"join\", \"230.0.0.1:9001\", \"the multicast group address to receive data from\")\n\tflag.StringVar(&send, \"send\", \"230.0.0.2:9002\", \"the multicast group address to send data to\")\n\tflag.StringVar(&ifname, \"ifname\", \"eth0\", \"the name of the interface\")\n\tflag.Parse()\n\titf, err := net.InterfaceByName(ifname)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tgroupAddr, err := net.ResolveUDPAddr(\"udp4\", join)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tc, err := net.ListenPacket(\"udp4\", listen)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer c.Close()\n\tp := ipv4.NewPacketConn(c)\n\tif err := p.JoinGroup(itf, &net.UDPAddr{IP: groupAddr.IP}); err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"join multicast group %s, waiting...\", join)\n\tgo sendData(c, send)\n\treceivedData(p)\n}\nfunc sendData(c net.PacketConn, target string) {\n\tdata := []byte(ifname)\n\taddr, err := net.ResolveUDPAddr(\"udp4\", target)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor {\n\t\t_, err := c.WriteTo(data, addr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\ttime.Sleep(time.Second)\n\t}\n}\nfunc receivedData(receiver *ipv4.PacketConn) {\n\tbuf := make([]byte, 1500)\n\tfor {\n\t\tn, _, _, err := receiver.ReadFrom(buf)\n\t\tif err == nil {\n\t\t\tlog.Printf(\"Receive Data from: %s\\n\", buf[0:n])\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76380802/unexpected-vs-code-debugger-values",
    "body": "(dlv) b 7\nBreakpoint 2 set at 0x4608de for main.main() ./main.go:7\n(dlv) c\n> main.main() ./main.go:7 (hits goroutine(1):1 total:1) (PC: 0x4608de)\n     2:\n     3:\tfunc main() {\n     4:\t\ta := f(1)\n     5:\t\tb := 1\n     6:\n=>   7:\t\tc := a < b\n     8:\t\t_ = c\n     9:\t}\n    10:\n    11:\tfunc f(i int) int {\n    12:\t\tif i > 0 {\n(dlv) locals\na = 824633745824\nb = 824633843808\n(dlv) disass\nTEXT main.main(SB) /home/zeke/src/temp/76380802/main.go\n\tmain.go:3\t0x4608c0\t493b6610\t\t\tcmp rsp, qword ptr [r14+0x10]\n\tmain.go:3\t0x4608c4\t7639\t\t\t\tjbe 0x4608ff\n\tmain.go:3\t0x4608c6\t4883ec28\t\t\tsub rsp, 0x28\n\tmain.go:3\t0x4608ca\t48896c2420\t\t\tmov qword ptr [rsp+0x20], rbp\n\tmain.go:3\t0x4608cf\t488d6c2420\t\t\tlea rbp, ptr [rsp+0x20]\n\tmain.go:4\t0x4608d4\tb801000000\t\t\tmov eax, 0x1\n\tmain.go:4\t0x4608d9\te842000000\t\t\tcall $main.f\n=>\tmain.go:7\t0x4608de*\t4883f801\t\t\tcmp rax, 0x1\n\tmain.go:4\t0x4608e2\t4889442418\t\t\tmov qword ptr [rsp+0x18], rax\n\tmain.go:5\t0x4608e7\t48c744241001000000\tmov qword ptr [rsp+0x10], 0x1\n\tmain.go:7\t0x4608f0\t0f9c44240f\t\t\tsetl byte ptr [rsp+0xf]\n\tmain.go:9\t0x4608f5\t488b6c2420\t\t\tmov rbp, qword ptr [rsp+0x20]\n\tmain.go:9\t0x4608fa\t4883c428\t\t\tadd rsp, 0x28\n\tmain.go:9\t0x4608fe\tc3\t\t\t\t\tret\n\tmain.go:3\t0x4608ff\t90\t\t\t\t\tnop\n\tmain.go:3\t0x460900\te83bccffff\t\t\tcall $runtime.morestack_noctxt\n\tmain.go:3\t0x460905\tebb9\t\t\t\tjmp $main.main"
  },
  {
    "url": "https://stackoverflow.com/questions/76318008/how-to-limited-producer-and-read-messages-by-consumers",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\tconst nConsumers = 2\n\tctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n\tdefer stop()\n\tin := make(chan int, 10)\n\tp := Producer{in}\n\tc := Consumer{in}\n\tgo p.Produce(ctx)\n\tvar wg sync.WaitGroup\n\twg.Add(nConsumers)\n\tfor i := 1; i <= nConsumers; i++ {\n\t\tgo c.Work(&wg, i)\n\t}\n\t<-ctx.Done()\n\tfmt.Printf(\"\\nGot end signal, waiting for %d jobs to finish\\n\", len(in))\n\twg.Wait()\n}\ntype Consumer struct {\n\tin chan int\n}\nfunc (c *Consumer) Work(wg *sync.WaitGroup, i int) {\n\tdefer wg.Done()\n\tfor job := range c.in {\n\t\tfmt.Printf(\"Worker #%d start job %d\\n\", i, job)\n\t\ttime.Sleep(time.Millisecond * time.Duration(3000+rand.Intn(3000)))\n\t\tfmt.Printf(\"Worker #%d finish job %d\\n\", i, job)\n\t}\n\tfmt.Printf(\"Worker #%d interrupted\\n\", i)\n}\ntype Producer struct {\n\tin chan int\n}\nfunc (p *Producer) Produce(ctx context.Context) {\n\ttask := 1\n\tfor {\n\t\tselect {\n\t\tcase p.in <- task:\n\t\t\tfmt.Printf(\"Send value %d\\n\", task)\n\t\t\ttask++\n\t\t\ttime.Sleep(time.Millisecond * 500)\n\t\tcase <-ctx.Done():\n\t\t\tclose(p.in)\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76208994/how-do-i-best-normalize-json-data-to-api-in-go-for-a-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strconv\"\n)\ntype CoolStruct struct {\n\tMoneyOwed string `json:\"money_owed\"`\n}\n// UnmarshalJSON the json package will delegate deserialization to our code if we implement the json.UnmarshalJSON interface\nfunc (c *CoolStruct) UnmarshalJSON(data []byte) error {\n\t// get the body as a map[string]*[]byte\n\traw := map[string]*json.RawMessage{}\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn fmt.Errorf(\"unable to unmarshal raw meessage map: %w\", err)\n\t}\n\t// if we don't know the variable type sent we can unmarshal to an interface\n\tvar tempHolder interface{}\n\terr := json.Unmarshal(*raw[\"money_owed\"], &tempHolder)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to unmarshal custom value from raw message map: %w\", err)\n\t}\n\t// the unmarshalled interface has an underlying type use go's typing\n\t// system to determine type conversions / normalizations required\n\tswitch tempHolder.(type) {\n\tcase int64:\n\t\t// once we determine the type of the we just assign the value\n\t\t// to the receiver's field\n\t\tc.MoneyOwed = strconv.FormatInt(tempHolder.(int64), 10)\n\t// we could list all individually or as a group; driven by requirements\n\tcase int, int32, float32, float64:\n\t\tc.MoneyOwed = fmt.Sprint(tempHolder)\n\tcase string:\n\t\tc.MoneyOwed = tempHolder.(string)\n\tdefault:\n\t\tfmt.Printf(\"missing type case: %T\\n\", tempHolder)\n\t}\n\t// success; struct is now populated\n\treturn nil\n}\nfunc main() {\n\tmyJson := []byte(`{\"money_owed\": 123.12}`)\n\tcool := CoolStruct{}\n\t// outside of your struct you marshal/unmarshal as normal\n\tif err := json.Unmarshal(myJson, &cool); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%+v\\n\", cool)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76187312/go-ssh-into-unix-get-users-etc-passwd-and-finding-groups-associated-for-every",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n)\ntype UserGroups map[string][]string\nfunc main() {\n\tfile, err := os.Open(\"/etc/passwd\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\tscanner := bufio.NewScanner(file)\n\tuserGroups := make(UserGroups)\n\tfor scanner.Scan() {\n\t\tfields := strings.Split(scanner.Text(), \":\")\n\t\tusername := fields[0]\n\t\tcmd := exec.Command(\"id\", \"-Gn\", username)\n\t\toutput, err := cmd.Output()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tgroups := strings.Split(strings.TrimSpace(string(output)), \" \")\n\t\tuserGroups[username] = groups\n\t}\n\tfor username, groups := range userGroups {\n\t\tfmt.Printf(\"%s: %s\\n\", username, strings.Join(groups, \", \"))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76174826/how-to-call-windows-setpriorityclass-windows",
    "body": "// https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\nconst PROCESS_ALL_ACCESS = windows.STANDARD_RIGHTS_REQUIRED | windows.SYNCHRONIZE | 0xffff\nfunc SetPriorityWindows(pid int, priority uint32) error {\n\thandle, err := windows.OpenProcess(PROCESS_ALL_ACCESS, false, uint32(pid))\n\tif err != nil {\n\t\treturn err\n\t}\n    defer windows.CloseHandle(handle) // Technically this can fail, but we ignore it if it does\n\terr = windows.SetPriorityClass(handle, priority)\n\tif err != nil {\n\t\treturn err\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76174826/how-to-call-windows-setpriorityclass-windows",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os/exec\"\n\t\"golang.org/x/sys/windows\"\n)\n// https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\nconst PROCESS_ALL_ACCESS = windows.STANDARD_RIGHTS_REQUIRED | windows.SYNCHRONIZE | 0xffff\nfunc SetPriorityWindows(pid int, priority uint32) error {\n\thandle, err := windows.OpenProcess(PROCESS_ALL_ACCESS, false, uint32(pid))\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer windows.CloseHandle(handle) // Technically this can fail, but we ignore it\n\terr = windows.SetPriorityClass(handle, priority)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n\tcmd := exec.Command(\"python\", \"hello.py\")\n\terr := cmd.Start()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Set priority to above normal\n\terr = SetPriorityWindows(cmd.Process.Pid, windows.ABOVE_NORMAL_PRIORITY_CLASS)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = cmd.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76170294/how-to-define-custom-sql-type-enum-field",
    "body": "package db_test\nimport (\n\t\"testing\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n)\ntype StatusEnum int64\nconst (\n\tStatusEnumEnable StatusEnum = iota\n\tStatusEnumDisable\n)\nvar StatusEnumMap = map[StatusEnum]string{\n\tStatusEnumEnable:  \"Enable\",\n\tStatusEnumDisable: \"Disable\",\n}\nfunc (e StatusEnum) String() string {\n\tif v, ok := StatusEnumMap[e]; ok {\n\t\treturn v\n\t}\n\treturn \"unknown\"\n}\ntype module struct {\n\tStatus StatusEnum\n}\nfunc TestEnum(t *testing.T) {\n\tdb, _ := gorm.Open(sqlite.Open(\":memory:\"))\n\tdb.AutoMigrate(&module{})\n\tdb.Model(&module{}).Create(&module{Status: StatusEnumDisable})\n\tvar out *module\n\t// SELECT * FROM `modules` WHERE status=1 ORDER BY `modules`.`status` LIMIT 1\n\tdb.Debug().Model(&module{}).Where(\"status=?\", StatusEnumDisable).First(&out)\n\tt.Log(out)\n\tt.Logf(\"status value: %d, status string: %s\", out.Status, out.Status)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76152907/chromedp-click-is-not-working-in-my-golang-code-can-you-find-whats-wrong",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/chromedp/cdproto/target\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.Flag(\"headless\", false),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tctx, cancel = chromedp.NewContext(ctx)\n\tdefer cancel()\n\tvar htmlContent string\n\tch := chromedp.WaitNewTarget(ctx, func(i *target.Info) bool {\n\t\treturn strings.Contains(i.URL, \"/timetable/web/\")\n\t})\n\terr := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"https://pts.map.naver.com/end-subway/ends/web/11321/home\"),\n\t\tchromedp.WaitVisible(\".end_footer_area\"),\n\t\tchromedp.Click(\".end_section.station_info_section > div.at_end.sofzqce > div > div.c10jv2ep.wrap_btn_schedule.schedule_time > button\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tnewCtx, cancel := chromedp.NewContext(ctx, chromedp.WithTargetID(<-ch))\n\tdefer cancel()\n\tif err := chromedp.Run(newCtx,\n\t\tchromedp.WaitReady(\".table_schedule\", chromedp.ByQuery),\n\t\tchromedp.OuterHTML(\"html\", &htmlContent, chromedp.ByQuery),\n\t); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"html\", htmlContent)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76129643/how-to-register-new-websocket-connections-gofiber",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/websocket/v2\"\n)\nvar (\n\tregister   = make(chan *websocket.Conn)\n\tunregister = make(chan *websocket.Conn)\n)\nfunc main() {\n\t// Make it easy to find out which line prints the log.\n\tlog.SetFlags(log.Lshortfile)\n\tapp := fiber.New()\n\tapp.Get(\"/ws/monitor\", websocket.New(HandleWsMonitor))\n\tlog.Fatal(app.Listen(\":8080\"))\n}\nfunc HandleWsMonitor(c *websocket.Conn) {\n\t// It seems the we only need one SocketListener goroutine for the whole server.\n\t// If this is the case, the next line should be moved outside of this func.\n\tgo SocketListener()\n\tdefer func() {\n\t\tunregister <- c\n\t\tc.Close()\n\t}()\n\tregister <- c\n\tfor {\n\t\tmessageType, message, err := c.ReadMessage()\n\t\tif err != nil {\n\t\t\tif websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {\n\t\t\t\tlog.Println(\"read error:\", err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\tif messageType == websocket.TextMessage {\n\t\t\tlog.Println(\"got textmessage:\", string(message))\n\t\t} else {\n\t\t\tlog.Println(\"received message of type:\", messageType)\n\t\t}\n\t}\n}\nfunc SocketListener() {\n\tfor {\n\t\tselect {\n\t\tcase c := <-register:\n\t\t\t// This did appear in the log.\n\t\t\tlog.Println(\"case c := <-register\")\n\t\t\tmessageType, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\t// unregister is unbuffered, the sending will be blocked.\n\t\t\t\tunregister <- c\n\t\t\t\t// If we use only one SocketListener goroutine then it should\n\t\t\t\t// not return here.\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"Got message of type: %d\\nMessage:%s\\n\", messageType, string(message))\n\t\t\tlog.Printf(\"Connection Params: %s\\n\", c.Params(\"id\"))\n\t\tcase c := <-unregister:\n\t\t\tc.Close()\n\t\t\tlog.Println(\"Closed connection\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76106323/custom-golang-startup-command-on-azure-web-app",
    "body": "2023-04-26T17:20:12.596331026Z Detecting platforms...\n2023-04-26T17:20:12.805572634Z Could not detect any platform in the source directory.\n2023-04-26T17:20:15.792565274Z Running /home/site/wwwroot/go-test now\n2023-04-26T17:20:15.928193597Z /home/site/wwwroot/go-test: /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.32' not found (required by /home/site/wwwroot/go-test)\n2023-04-26T17:20:15.934491135Z /home/site/wwwroot/go-test: /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.34' not found (required by /home/site/wwwroot/go-test)"
  },
  {
    "url": "https://stackoverflow.com/questions/76077440/implementing-a-lock-free-unbounded-queue-with-new-atomic-pointer-types",
    "body": "package queue\nimport (\n\t\"sync/atomic\"\n)\n// LockfreeQueue represents a FIFO structure with operations to enqueue\n// and dequeue generic values.\n// Reference: https://www.cs.rochester.edu/research/synchronization/pseudocode/queues.html\ntype LockFreeQueue[T any] struct {\n\thead atomic.Pointer[node[T]]\n\ttail atomic.Pointer[node[T]]\n}\n// node represents a node in the queue\ntype node[T any] struct {\n\tvalue T\n\tnext  atomic.Pointer[node[T]]\n}\n// newNode creates and initializes a node\nfunc newNode[T any](v T) *node[T] {\n\treturn &node[T]{value: v}\n}\n// NewQueue creates and initializes a LockFreeQueue\nfunc NewLockFreeQueue[T any]() *LockFreeQueue[T] {\n\tvar head atomic.Pointer[node[T]]\n\tvar tail atomic.Pointer[node[T]]\n\tvar n = node[T]{}\n\thead.Store(&n)\n\ttail.Store(&n)\n\treturn &LockFreeQueue[T]{\n\t\thead: head,\n\t\ttail: tail,\n\t}\n}\n// Enqueue adds a series of Request to the queue\nfunc (q *LockFreeQueue[T]) Enqueue(v T) {\n\tn := newNode(v)\n\tfor {\n\t\ttail := q.tail.Load()\n\t\tnext := tail.next.Load()\n\t\tif tail == q.tail.Load() {\n\t\t\tif next == nil {\n\t\t\t\tif tail.next.CompareAndSwap(next, n) {\n\t\t\t\t\tq.tail.CompareAndSwap(tail, n)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tq.tail.CompareAndSwap(tail, next)\n\t\t\t}\n\t\t}\n\t}\n}\n// Dequeue removes a Request from the queue\nfunc (q *LockFreeQueue[T]) Dequeue() T {\n\tvar t T\n\tfor {\n\t\thead := q.head.Load()\n\t\ttail := q.tail.Load()\n\t\tnext := head.next.Load()\n\t\tif head == q.head.Load() {\n\t\t\tif head == tail {\n\t\t\t\tif next == nil {\n\t\t\t\t\treturn t\n\t\t\t\t}\n\t\t\t\tq.tail.CompareAndSwap(tail, next)\n\t\t\t} else {\n\t\t\t\tv := next.value\n\t\t\t\tif q.head.CompareAndSwap(head, next) {\n\t\t\t\t\treturn v\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n// Check if the queue is empty.\nfunc (q *LockFreeQueue[T]) IsEmpty() bool {\n\treturn q.head.Load() == q.tail.Load()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76044654/how-can-i-debug-view-the-generated-query-when-usings-the-olivere-elastic-elas",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"github.com/olivere/elastic/v7\"\n)\ntype LoggingHttpElasticClient struct {\n\tc http.Client\n}\nfunc (l LoggingHttpElasticClient) Do(r *http.Request) (*http.Response, error) {\n\t// Log the http request dump\n\trequestDump, err := httputil.DumpRequest(r, true)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"reqDump: \" + string(requestDump))\n\treturn l.c.Do(r)\n}\nfunc main() {\n\tdoer := LoggingHttpElasticClient{\n\t\tc: http.Client{\n\t\t\t// Load a trusted CA here, if running in production\n\t\t\tTransport: &http.Transport{\n\t\t\t\tTLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n\t\t\t},\n\t\t},\n\t}\n\tclient, err := elastic.NewClient(\n        // Provide the logging doer here\n\t\telastic.SetHttpClient(doer),\n\t\telastic.SetBasicAuth(\"elastic\", \"<password>\"),\n\t\telastic.SetURL(\"https://<address>:9200\"),\n\t\telastic.SetSniff(false), // this is specific to my docker elastic runtime\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n    /*\n        Generate a random HTTP request to check if it's logged\n    */\n\tac := client.Alias()\n\tac.Add(\"myIndex\", \"myAlias\").Do(context.Background())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76036268/cant-get-the-cookie-data-from-go-server-with-react",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\nfunc main() {\n\tgo func() {\n\t\t_ = http.ListenAndServe(\":5173\", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Write([]byte(page))\n\t\t}))\n\t}()\n\thttp.HandleFunc(\"/callback\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.SetCookie(w, &http.Cookie{\n\t\t\tName:     \"session\",\n\t\t\tValue:    \"abc\",\n\t\t\tPath:     \"/\",\n\t\t\tExpires:  time.Now().Add(24 * time.Hour),\n\t\t\tMaxAge:   86372,\n\t\t\tHttpOnly: true,\n\t\t\tSameSite: http.SameSiteLaxMode,\n\t\t})\n\t\tw.Write([]byte(\"done\"))\n\t})\n\thttp.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"http://127.0.0.1:5173\")\n\t\tw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n\t\tw.Header().Set(\"Access-Control-Allow-Methods\", \"GET\")\n\t\tw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t\tcookie, err := r.Cookie(\"session\")\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(w, err.Error())\n\t\t\treturn\n\t\t}\n\t\tw.Write([]byte(cookie.Value))\n\t})\n\thttp.ListenAndServe(\":3080\", nil)\n}\nconst page = `<html>\n  <body>\n    <button>fetch</button>\n    <script>\n      document.querySelector('button').addEventListener('click', () => {\n        fetch('http://127.0.0.1:3080/user', {\n          method: 'GET',\n          credentials: 'include',\n        })\n          .then((response) => response.text())\n          .then((data) => {\n            console.log(data);\n          })\n          .catch((error) => console.error(error));\n      });\n    </script>\n  </body>\n</html>`"
  },
  {
    "url": "https://stackoverflow.com/questions/76020506/unable-to-retrieve-query-output-of-mongodb-using-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nfunc main() {\n\tclient, err := mongo.NewClient(options.Client().ApplyURI(\"mongodb://localhost:27017/dev-camper-go\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\terr = client.Connect(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tcollection := client.Database(\"dev-camper-go\").Collection(\"user\")\n\tvar userModel struct {\n\t\tID    primitive.ObjectID `bson:\"_id\"`\n\t\tEMAIL *string            `json:\"email\" validate:\"required,max=100\"`\n\t}\n\tuserExists := collection.FindOne(ctx, bson.M{\"email\": \"billi@gmail.com\"}).Decode(&userModel)\n\tfmt.Println(\"Data From Services >>>>> \", userExists)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76011686/how-to-create-an-index-of-pair-unique-for-mongodb",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\ntype Object struct {\n\tObjectId   string `json:\"object_id\" bson:\"object_id\"`\n\tObjectType string `json:\"object_type\" bson:\"object_type\"`\n}\nfunc main() {\n\tctx, cancelFunc := context.WithTimeout(context.Background(), time.Second*10)\n\tdefer cancelFunc()\n\tclientOptions := options.Client().ApplyURI(\"mongodb://root:root@localhost:27017\")\n\tmongoClient, err := mongo.Connect(ctx, clientOptions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer mongoClient.Disconnect(ctx)\n\tdemoDb := mongoClient.Database(\"demodb\")\n\tdefer demoDb.Drop(ctx)\n\tmyCollection := demoDb.Collection(\"myCollection\")\n\tdefer myCollection.Drop(ctx)\n\t// create index\n\tindexModel := mongo.IndexModel{\n\t\tKeys: bson.D{\n\t\t\tbson.E{\n\t\t\t\tKey:   \"object_id\",\n\t\t\t\tValue: 1,\n\t\t\t},\n\t\t\tbson.E{\n\t\t\t\tKey:   \"object_type\",\n\t\t\t\tValue: 1,\n\t\t\t},\n\t\t},\n\t\tOptions: options.Index().SetUnique(true),\n\t}\n\tidxName, err := myCollection.Indexes().CreateOne(ctx, indexModel)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"index name:\", idxName)\n\t// delete documents\n\tdefer func() {\n\t\tif _, err := myCollection.DeleteMany(ctx, bson.M{}); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\t// insert first doc\n\tres, err := myCollection.InsertOne(ctx, Object{ObjectId: \"abc\", ObjectType: \"SAMPLE\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(res.InsertedID)\n\t// insert second doc\n\t// res, err = myCollection.InsertOne(ctx, Object{ObjectId: \"abc\", ObjectType: \"SAMPLE\"}) => ERROR\n\tres, err = myCollection.InsertOne(ctx, Object{ObjectId: \"def\", ObjectType: \"SAMPLE\"}) // => OK!\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(res.InsertedID)\n\t// list all docs\n\tvar objects []Object\n\tcursor, err := myCollection.Find(ctx, bson.M{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err = cursor.All(ctx, &objects); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(objects)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75949860/how-to-handle-large-file-upload-to-google-bucket",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"github.com/farrellit/writeprogress\"\n)\nfunc main() {\n\tin, err := os.Open(\"/dev/urandom\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tout, err := os.OpenFile(\"/dev/null\", os.O_WRONLY, 0)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer in.Close()\n\tdefer out.Close()\n\tlength := int64(1e6)\n\twp := writeprogress.NewProgressWriter(uint64(length))\n\td, _ := wp.Watch(func(p float64) { fmt.Printf(\"\\r%2.0f%%\", p*100) })\n\tif b, err := io.Copy(\n\t\tio.MultiWriter(out, wp),\n\t\t&io.LimitedReader{R: in, N: length},\n\t); err != nil {\n\t\tpanic(err)\n\t} else {\n\t\t<-d\n\t\tfmt.Printf(\"\\n%d/%d %2.0f%%\\n\", b, length, wp.GetProgress()*100)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75912747/how-to-print-a-2-columns-table-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"sort\"\n)\nfunc main() {\n\ta := map[string]string{\n\t\"Key1\": strings.Repeat(\"Value1\", 50),\n\t\"Key2\": strings.Repeat(\"Value2\", 50),\n\t\"Key3\": strings.Repeat(\"Value3\", 50),\n\t}\n\n\tcolumner(a, 30)\n}\nfunc columner(m map[string]string, charAmount int) {\n\tvar keys []string\n\n\tvar keyLens []int\n\n\t// to avoid index panics and gathering keys for later usage\n\tfor key, value := range m {\n\t\tif charAmount > len(value) || charAmount < 1{\n\t\t\tvalue += strings.Repeat(\" \", charAmount-len(value))\n\t\t\tm[key] = value\n\t\t}\n\t\tkeys = append(keys, key)\n\t\tkeyLens = append(keyLens, len(key))\n\t}\n\tsort.Ints(keyLens)\n\n\tfor i := 0; i < len(keys); i++ {\n\n\t\t// for storing updated value of key\n\t\tvar value2 string\n\n\t\tvalue := m[keys[i]]\n\t\t// will used while extracting substring of key's value as first index\n\t\tfirstI := 0\n\n\t\t// last index for extract substring from key's value. the len of substring will be same as charAmount\n\t\tcharAmount2 := charAmount\n\n\t\t// will be used to advance next substring of key's value\n\t\tadvance := charAmount2\n\n\t\t// spaces between between key and value\n\t\t// key       value\n\t\tspacing := strings.Repeat(\" \", 20 + (keyLens[0] - len(keys[i])))\n\n\t\t// var for adjusting spaces of gap between key and value of next line\n\t\t// key        value\n\t\t//          value\n\t\t// to\n\t\t// key        value\n\t\t//            value\n\t\tspacingU := spacing + strings.Repeat(\" \", len(keys[i]) + 1)\n\n\t\t// this loop will be run as long as there is no substring left which exceed next line\n\t\tfor j := 0; j < len(value); j += advance {\n\n\t\t\t// adjusting spaces of gap between key and value of next line\n\t\t\tif j > 0 {\n\t\t\t\tspacing = spacingU\n\t\t\t}\n\n\t\t\t// add space between key and value, then extract substring, then add spaces to the next line of the\n\t\t\t// next substring of key's value\n\t\t\tvalue2 += spacing + value[firstI:charAmount2] + \"\\n\"\n\n\t\t\t// finish loop when there is no substring that can be exceed to next line\n\t\t\tif ((len(value) - charAmount2) < advance) || ((len(value) - charAmount2) == advance) {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t// changing first index to start index of next substring of key's value\n\t\t\tfirstI = charAmount2\n\n\t\t\t// advancing to next substring of key's value\n\t\t\tcharAmount2 += advance\n\t\t}\n\n\t\t// add last remaining substring of key's value to variable which will be show as formatted.\n\t\tvalue2 += spacing + value[charAmount2:]\n\t\t// show formatted key and value\n\t\tfmt.Println(keys[i], value2, \"\\n\")\n\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75912747/how-to-print-a-2-columns-table-in-golang",
    "body": "Key1                     Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\n                         Value1Value1Value1Value1Value1\nKey2                     Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\n                         Value2Value2Value2Value2Value2\nKey3                     Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3\n                         Value3Value3Value3Value3Value3"
  },
  {
    "url": "https://stackoverflow.com/questions/75909529/hugo-adding-http-equiv-refresh-content-0-on-build-make-it-stop",
    "body": "$ curl -i 'https://mellifluous-marzipan-3893e2.netlify.app/contact'\n    HTTP/2 200\n    // other headers truncated and response body formatted\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>https://mellifluous-marzipan-3893e2.netlify.app/contact/</title>\n        <link\n          rel=\"canonical\"\n          href=\"https://mellifluous-marzipan-3893e2.netlify.app/contact/\"\n        />\n        <meta name=\"robots\" content=\"noindex\" />\n        <meta charset=\"utf-8\" />\n        <meta\n          http-equiv=\"refresh\"\n          content=\"0; url=https://mellifluous-marzipan-3893e2.netlify.app/contact/\"\n        />\n      </head>\n    </html>"
  },
  {
    "url": "https://stackoverflow.com/questions/75903010/concurrency-with-a-single-write-by-a-single-writer-and-multiple-readers",
    "body": "$ go test -run=XXX -bench=. -benchmem -benchtime=1000000x\ngoos: darwin\ngoarch: arm64\npkg: untitled1\nBenchmarkRacyNoGoodConcurrently-12                       1000000              3529 ns/op             384 B/op         12 allocs/op\nBenchmarkAtomicBooleanConcurrently-12                    1000000              3494 ns/op             384 B/op         12 allocs/op\nBenchmarkRWMutexConcurrently-12                          1000000              3909 ns/op             384 B/op         12 allocs/op\nBenchmarkMutexConcurrently-12                            1000000              4180 ns/op             384 B/op         12 allocs/op\nBenchmarkRacyNoGoodSequentiallyAllCores-12               1000000                 3.661 ns/op           0 B/op          0 allocs/op\nBenchmarkAtomicBooleanSequentiallyAllCores-12            1000000                 3.748 ns/op           0 B/op          0 allocs/op\nBenchmarkRWMutexSequentiallyAllCores-12                  1000000              1934 ns/op               0 B/op          0 allocs/op\nBenchmarkMutexSequentiallyAllCores-12                    1000000              1486 ns/op               0 B/op          0 allocs/op\nBenchmarkRacyNoGoodSequentiallySingleCore-12             1000000                28.95 ns/op            0 B/op          0 allocs/op\nBenchmarkAtomicBooleanSequentiallySingleCore-12          1000000                29.54 ns/op            0 B/op          0 allocs/op\nBenchmarkRWMutexSequentiallySingleCore-12                1000000               188.6 ns/op             0 B/op          0 allocs/op\nBenchmarkMutexSequentiallySingleCore-12                  1000000               187.4 ns/op             0 B/op          0 allocs/op\nPASS\nok      untitled1       19.093s"
  },
  {
    "url": "https://stackoverflow.com/questions/75903010/concurrency-with-a-single-write-by-a-single-writer-and-multiple-readers",
    "body": "package main\nimport (\n\t\"runtime\"\n\t\"sync\"\n\t\"sync/atomic\"\n)\ntype ErrorNotifier interface {\n\tSetEmailSenderService(func(string))\n\tSendErrorMessage(string)\n}\n// Mutex\ntype MutexErrorNotifier struct {\n\tmutex       sync.Mutex\n\temailSender func(string)\n}\nvar _ ErrorNotifier = (*MutexErrorNotifier)(nil)\nfunc (a *MutexErrorNotifier) SetEmailSenderService(emailSender func(string)) {\n\ta.mutex.Lock()\n\tdefer a.mutex.Unlock()\n\ta.emailSender = emailSender\n}\nfunc (a *MutexErrorNotifier) SendErrorMessage(errorMessage string) {\n\ta.mutex.Lock()\n\tdefer a.mutex.Unlock()\n\tif a.emailSender != nil {\n\t\ta.emailSender(errorMessage)\n\t}\n}\n// RWMutex\ntype RWMutexErrorNotifier struct {\n\trwMutex     sync.RWMutex\n\temailSender func(string)\n}\nvar _ ErrorNotifier = (*RWMutexErrorNotifier)(nil)\nfunc (a *RWMutexErrorNotifier) SetEmailSenderService(emailSender func(string)) {\n\ta.rwMutex.Lock()\n\tdefer a.rwMutex.Unlock()\n\ta.emailSender = emailSender\n}\nfunc (a *RWMutexErrorNotifier) SendErrorMessage(errorMessage string) {\n\ta.rwMutex.RLock()\n\tdefer a.rwMutex.RUnlock()\n\tif a.emailSender != nil {\n\t\ta.emailSender(errorMessage)\n\t}\n}\n// Atomic Boolean\ntype AtomicBooleanErrorNotifier struct {\n\temailerIsSet atomic.Bool\n\temailSender  func(string)\n}\nvar _ ErrorNotifier = (*AtomicBooleanErrorNotifier)(nil)\nfunc (a *AtomicBooleanErrorNotifier) SetEmailSenderService(emailSender func(string)) {\n\tdefer a.emailerIsSet.Store(true)\n\ta.emailSender = emailSender\n}\nfunc (a *AtomicBooleanErrorNotifier) SendErrorMessage(errorMessage string) {\n\tif a.emailerIsSet.Load() {\n\t\ta.emailSender(errorMessage)\n\t}\n}\n// NOT A SOLUTION: racy no locking solution - just for benchmarking\ntype RacyNoGoodErrorNotifier struct {\n\temailSender func(string)\n}\nvar _ ErrorNotifier = (*RacyNoGoodErrorNotifier)(nil)\nfunc (a *RacyNoGoodErrorNotifier) SetEmailSenderService(emailSender func(string)) {\n\ta.emailSender = emailSender\n}\nfunc (a *RacyNoGoodErrorNotifier) SendErrorMessage(errorMessage string) {\n\tif a.emailSender != nil {\n\t\ta.emailSender(errorMessage)\n\t}\n}\n// Demo run\nconst allConcurrent = \"all concurrent\"\nconst sequentialSingleCore = \"sequential single core\"\nconst sequentialAllCores = \"sequential all cores\"\nfunc Run(n int, runner ErrorNotifier, runType string) {\n\temailSender := func(emailMessage string) {\n\t\t// sending email...\n\t}\n\tvar wg sync.WaitGroup\n\tswitch runType {\n\tcase allConcurrent:\n\t\twg.Add(n * runtime.NumCPU())\n\t\tfor i := 0; i < n*runtime.NumCPU(); i++ {\n\t\t\tgo func() {\n\t\t\t\trunner.SendErrorMessage(\"ALARM!\")\n\t\t\t\twg.Done()\n\t\t\t}()\n\t\t}\n\tcase sequentialAllCores:\n\t\twg.Add(runtime.NumCPU())\n\t\tfor i := 0; i < runtime.NumCPU(); i++ {\n\t\t\tgo func() {\n\t\t\t\tfor j := 0; j < n; j++ {\n\t\t\t\t\trunner.SendErrorMessage(\"ALARM!\")\n\t\t\t\t}\n\t\t\t\twg.Done()\n\t\t\t}()\n\t\t}\n\tcase sequentialSingleCore:\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tfor j := 0; j < n*runtime.NumCPU(); j++ {\n\t\t\t\trunner.SendErrorMessage(\"ALARM!\")\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\tdefault:\n\t\tpanic(\"unknown mode\")\n\t}\n\trunner.SetEmailSenderService(emailSender)\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75903010/concurrency-with-a-single-write-by-a-single-writer-and-multiple-readers",
    "body": "package main\nimport \"testing\"\nfunc BenchmarkRacyNoGoodConcurrently(b *testing.B) {\n\tRun(b.N, &RacyNoGoodErrorNotifier{}, allConcurrent)\n}\nfunc BenchmarkAtomicBooleanConcurrently(b *testing.B) {\n\tRun(b.N, &AtomicBooleanErrorNotifier{}, allConcurrent)\n}\nfunc BenchmarkRWMutexConcurrently(b *testing.B) {\n\tRun(b.N, &RWMutexErrorNotifier{}, allConcurrent)\n}\nfunc BenchmarkMutexConcurrently(b *testing.B) {\n\tRun(b.N, &MutexErrorNotifier{}, allConcurrent)\n}\nfunc BenchmarkRacyNoGoodSequentiallyAllCores(b *testing.B) {\n\tRun(b.N, &RacyNoGoodErrorNotifier{}, sequentialAllCores)\n}\nfunc BenchmarkAtomicBooleanSequentiallyAllCores(b *testing.B) {\n\tRun(b.N, &AtomicBooleanErrorNotifier{}, sequentialAllCores)\n}\nfunc BenchmarkRWMutexSequentiallyAllCores(b *testing.B) {\n\tRun(b.N, &RWMutexErrorNotifier{}, sequentialAllCores)\n}\nfunc BenchmarkMutexSequentiallyAllCores(b *testing.B) {\n\tRun(b.N, &MutexErrorNotifier{}, sequentialAllCores)\n}\nfunc BenchmarkRacyNoGoodSequentiallySingleCore(b *testing.B) {\n\tRun(b.N, &RacyNoGoodErrorNotifier{}, sequentialSingleCore)\n}\nfunc BenchmarkAtomicBooleanSequentiallySingleCore(b *testing.B) {\n\tRun(b.N, &AtomicBooleanErrorNotifier{}, sequentialSingleCore)\n}\nfunc BenchmarkRWMutexSequentiallySingleCore(b *testing.B) {\n\tRun(b.N, &RWMutexErrorNotifier{}, sequentialSingleCore)\n}\nfunc BenchmarkMutexSequentiallySingleCore(b *testing.B) {\n\tRun(b.N, &MutexErrorNotifier{}, sequentialSingleCore)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75826138/how-to-correctly-determine-the-type-of-variable-google-protobuf-any",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"google.golang.org/protobuf/reflect/protoregistry\"\n    // importing the package solely for its side-effects (initialization).\n    // See https://go.dev/ref/spec#Import_declarations.\n\t_ \"google.golang.org/protobuf/types/known/anypb\"\n\t_ \"google.golang.org/protobuf/types/known/wrapperspb\"\n)\nfunc main() {\n\tres := protoregistry.GlobalTypes\n\tfmt.Println(\"NumMessages:\", res.NumMessages())\n\tmsgType, err := protoregistry.GlobalTypes.FindMessageByName(\"google.protobuf.StringValue\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(msgType)\n\tmsgType, err = res.FindMessageByURL(\"type.googleapis.com/google.protobuf.StringValue\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(msgType)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75825167/synchronizing-requests-between-two-separate-rate-limited-endpoints",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"sort\"\n\t\"sync\"\n\t\"time\"\n\t\"golang.org/x/time/rate\"\n)\ntype task[T any] struct {\n\tparam       T\n\tfailedCount int\n}\ntype Scheduler[T any] struct {\n\tname     string\n\tlimit    int\n\tmaxTries int\n\twg       sync.WaitGroup\n\ttasks    chan task[T]\n\taction   func(param T) error\n}\n// NewScheduler creates a scheduler that runs the action with the specified rate limit.\n// It will retry the action if the action returns a non-nil error.\nfunc NewScheduler[T any](name string, limit, maxTries, chanSize int, action func(param T) error) *Scheduler[T] {\n\treturn &Scheduler[T]{\n\t\tname:     name,\n\t\tlimit:    limit,\n\t\tmaxTries: maxTries,\n\t\ttasks:    make(chan task[T], chanSize),\n\t\taction:   action,\n\t}\n}\nfunc (s *Scheduler[T]) AddTask(param T) {\n\ts.wg.Add(1)\n\ts.tasks <- task[T]{param: param}\n}\nfunc (s *Scheduler[T]) retryLater(t task[T]) {\n\ts.wg.Add(1)\n\ts.tasks <- t\n}\nfunc (s *Scheduler[T]) Run() {\n\tlim := rate.NewLimiter(rate.Limit(s.limit), 1)\n\tfor t := range s.tasks {\n\t\tt := t\n\t\tif err := lim.Wait(context.Background()); err != nil {\n\t\t\tlog.Fatalf(\"wait: %s\", err)\n\t\t\treturn\n\t\t}\n\t\tgo func() {\n\t\t\tdefer s.wg.Done()\n\t\t\terr := s.action(t.param)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"task %s, param %v failed: %v\", s.name, t.param, err)\n\t\t\t\tt.failedCount++\n\t\t\t\tif t.failedCount == s.maxTries {\n\t\t\t\t\tlog.Printf(\"task %s, param %v failed with %d tries\", s.name, t.param, s.maxTries)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ts.retryLater(t)\n\t\t\t}\n\t\t}()\n\t}\n}\nfunc (s *Scheduler[T]) Wait() {\n\ts.wg.Wait()\n\tclose(s.tasks)\n}\nfunc main() {\n\ts := &server{}\n\tts := httptest.NewServer(s)\n\tdefer ts.Close()\n\tschedulerPost := NewScheduler(\"post\", 20, 3, 1, func(param string) error {\n\t\treturn post(fmt.Sprintf(\"%s/%s\", ts.URL, param))\n\t})\n\tgo schedulerPost.Run()\n\tschedulerGet := NewScheduler(\"get\", 10, 3, 1, func(param int) error {\n\t\tid, err := get(fmt.Sprintf(\"%s/%d\", ts.URL, param))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tschedulerPost.AddTask(id)\n\t\treturn nil\n\t})\n\tgo schedulerGet.Run()\n\tfor i := 0; i < 100; i++ {\n\t\tschedulerGet.AddTask(i)\n\t}\n\tschedulerGet.Wait()\n\tschedulerPost.Wait()\n\ts.printStats()\n}\nfunc get(url string) (string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn \"\", fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}\nfunc post(url string) error {\n\tresp, err := http.Post(url, \"\", nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tif resp.StatusCode != 200 {\n\t\treturn fmt.Errorf(\"unexpected status code: %d\", resp.StatusCode)\n\t}\n\treturn nil\n}\ntype server struct {\n\tgMu  sync.Mutex\n\tgets []int64\n\tpMu   sync.Mutex\n\tposts []int64\n}\nfunc (s *server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tlog.Printf(\"%s: %s\", r.Method, r.URL.Path)\n\t// collect request stats.\n\tif r.Method == http.MethodGet {\n\t\ts.gMu.Lock()\n\t\ts.gets = append(s.gets, time.Now().UnixMilli())\n\t\ts.gMu.Unlock()\n\t} else {\n\t\ts.pMu.Lock()\n\t\ts.posts = append(s.posts, time.Now().UnixMilli())\n\t\ts.pMu.Unlock()\n\t}\n\tn := rand.Intn(1000)\n\t// simulate latency.\n\ttime.Sleep(time.Duration(n) * time.Millisecond)\n\t// simulate errors.\n\tif n%10 == 0 {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tif r.Method == http.MethodGet {\n\t\tfmt.Fprintf(w, \"%s\", r.URL.Path[1:])\n\t\treturn\n\t}\n}\nfunc (s *server) printStats() {\n\tlog.Printf(\"GETS (total: %d):\\n\", len(s.gets))\n\tprintStats(s.gets)\n\tlog.Printf(\"POSTS (total: %d):\\n\", len(s.posts))\n\tprintStats(s.posts)\n}\nfunc printStats(ts []int64) {\n\tsort.Slice(ts, func(i, j int) bool {\n\t\treturn ts[i] < ts[j]\n\t})\n\tcount := 0\n\tto := ts[0] + 1000\n\tfor i := 0; i < len(ts); i++ {\n\t\tif ts[i] < to {\n\t\t\tcount++\n\t\t} else {\n\t\t\tfmt.Printf(\"  %d: %d\\n\", to, count)\n\t\t\ti-- // push back the current item\n\t\t\tcount = 0\n\t\t\tto += 1000\n\t\t}\n\t}\n\tif count > 0 {\n\t\tfmt.Printf(\"  %d: %d\\n\", to, count)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75825167/synchronizing-requests-between-two-separate-rate-limited-endpoints",
    "body": "...\n2023/03/25 21:03:30 GETS (total: 112):\n  1679749398998: 10\n  1679749399998: 10\n  1679749400998: 10\n  1679749401998: 10\n  1679749402998: 10\n  1679749403998: 10\n  1679749404998: 10\n  1679749405998: 10\n  1679749406998: 10\n  1679749407998: 10\n  1679749408998: 10\n  1679749409998: 2\n2023/03/25 21:03:30 POSTS (total: 111):\n  1679749399079: 8\n  1679749400079: 8\n  1679749401079: 12\n  1679749402079: 8\n  1679749403079: 10\n  1679749404079: 9\n  1679749405079: 9\n  1679749406079: 8\n  1679749407079: 14\n  1679749408079: 12\n  1679749409079: 9\n  1679749410079: 4"
  },
  {
    "url": "https://stackoverflow.com/questions/75811731/trouble-finding-bug-in-the-merge-sort-algorithm-implemented-in-go",
    "body": "func merge(data sortable, lo, mid, hi int) {\n\ttemp := make([]int, hi-lo+1)\n\tfor i := lo; i <= hi; i++ {\n        // Notice I have to cast here, because temp it []int,\n        // but data is an interface\n\t\ttemp[i-lo] = data.At(i).(int)\n\t}\n\ti, j := lo, mid+1\n\tfor k := lo; k <= hi; k++ {\n\t\tif i > mid {\n\t\t\tdata.Set(k, temp[j-lo])\n\t\t\tj++\n\t\t} else if j > hi {\n\t\t\tdata.Set(k, temp[i-lo])\n\t\t\ti++\n\t\t} else if temp[i-lo] <= temp[j-lo] { // <- here, check against the actual data\n\t\t\tdata.Set(k, temp[i-lo])\n\t\t\ti++\n\t\t} else {\n\t\t\tdata.Set(k, temp[j-lo])\n\t\t\tj++\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75807619/avoid-code-duplication-when-unmarshalling-similar-json-in-go",
    "body": "type Artworks struct {\n\tArtist         string `json:\"artist\"`\n\tTags           string `json:\"tags\"`\n\tId             string `json:\"id\"`\n\tThumbnail      string `json:\"thumbnail\"`\n\tHigh_res_image string `json:\"high_res_image\"`\n\tDate_uploaded  string `json:\"date_uploaded\"`\n\tUrl            string `json:\"url\"`\n\tImagedata      string `json:\"image_data,omitempty\"`\n}\nfunc readJSON(filePath string) []Artworks {\n    artworksList, error := ioutil.ReadFile(filePath)\n    if error != nil {\n        log.Fatalf(\"Error when opening file: %v\", error.Error())\n    }\n    var artworkData []Artworks\n    error = json.Unmarshal(artworksList, &artworkData)\n    if error != nil {\n        log.Fatalf(\"Error during unmarshal(): %v\", error.Error())\n    }\n    return artworkData\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75789829/send-uploaded-file",
    "body": "func (s *Storage) Upload(ctx context.Context, file multipart.File, fileHeader *multipart.FileHeader) (cid.Cid, error) {\n\trCtx, cancel := context.WithTimeout(ctx, 30*time.Second)\n\tdefer cancel()\n\tbuf := new(bytes.Buffer)\n\twriter := multipart.NewWriter(buf)\n\tpart, err := writer.CreateFormFile(\"file\", fileHeader.Filename)\n\tif err != nil {\n\t\treturn cid.Undef, err\n\t}\n\tb, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\treturn cid.Undef, err\n\t}\n\tpart.Write(b)\n\twriter.Close()\n\treq, err := http.NewRequestWithContext(rCtx, http.MethodPost, s.config.endpoint+\"/upload\", buf)\n\tif err != nil {\n\t\treturn cid.Undef, err\n\t}\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", s.config.token))\n\treq.Header.Set(\"X-Client\", \"web3.storage/go\")\n\tres, err := s.config.hc.Do(req)\n\tif err != nil {\n\t\treturn cid.Undef, err\n\t}\n\td := json.NewDecoder(res.Body)\n\tif res.StatusCode != 200 {\n\t\tvar out responseError\n\t\td.Decode(&out)\n\t\tlog.Error(out)\n\t\treturn cid.Undef, fmt.Errorf(\"unexpected response status: %d\", res.StatusCode)\n\t}\n\tvar out struct {\n\t\tCid string `json:\"cid\"`\n\t}\n\terr = d.Decode(&out)\n\tif err != nil {\n\t\treturn cid.Undef, err\n\t}\n\treturn cid.Parse(out.Cid)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75764651/how-to-return-interface-list-from-a-for-loop-in-go",
    "body": "func (d *db) ProjectList(Type, uid string, size uint64) ([]interface{}, error) {\n\ttype resp struct {\n\t\tName        string `json:\"name\"`\n\t\tId          string `json:\"id\"`\n\t\tProjectType string `json:\"project_type\"`\n\t}\n\t// get all types, you can get it from db\n\t// example: select DISTINCT ProjectType from project\n\ttypes := []string{\"1\", \"2\", \"3\", \"4\"}\n\tans := []interface{}{}\n\tfor _, sType := range types {\n\t\tvar project_type []*resp\n\t\tsql = fmt.Sprintf(sql, where.String())\n\t\t_, err := d.ctx.DB().SelectBySql(\"select * from project where project_type=\" + sType + \" order by rand() limit 10\").Load(&project_type)\n\t\tans = append(ans, project_type)\n\t}\n\treturn ans, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75668718/how-to-post-basic-json-as-multipart-form-data-in-golang",
    "body": "import (\n   \"mime/multipart\"\n)\nbodyInput := map[string]interface{}{\"client_id\":\"abc123\", \"you_ok\": false, \"jwt_token\":\"psojioajf.sjfiofijw.asdisaoetcetc\"}\nreqBody := new(bytes.Buffer)\nmp := multipart.NewWriter(reqBody)\nfor k, v := range bodyInput {\n  str, ok := v.(string)\n  if !ok {\n    return fmt.Errorf(\"converting %v to string\", v)\n  }\n  mp.WriteField(k, str)\n}\nmp.Close()\nreq, err := http.NewRequest(http.MethodPost, \"https://my-website.com/endpoint/path\", reqBody)\nif err != nil {\n// handle err\n}\nreq.Header[\"Content-Type\"] = []string{mp.FormDataContentType()}"
  },
  {
    "url": "https://stackoverflow.com/questions/75666355/null-values-golang-libpq-postgresql",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/lomsa-dev/gonull\"\n)\ntype MyCustomInt int\ntype MyCustomFloat32 float32\ntype Person struct {\n\tName    string\n\tAge     gonull.Nullable[MyCustomInt]\n\tAddress gonull.Nullable[string]\n\tHeight  gonull.Nullable[MyCustomFloat32]\n}\nfunc main() {\n\tjsonData := []byte(`{\"Name\":\"Alice\",\"Age\":15,\"Address\":null,\"Height\":null}`)\n\tvar person Person\n\terr := json.Unmarshal(jsonData, &person)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Unmarshalled Person: %+v\\n\", person)\n\tmarshalledData, err := json.Marshal(person)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Marshalled JSON: %s\\n\", string(marshalledData))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75574755/unit-testing-s3-presigned-api",
    "body": "// client.go\ntype (\n\t// AWSClient is the main client that wraps our AWS s3 client\n\tAWSClient struct {\n\t\ts3Client            s3iface.S3API\n\t\tobjectRequestClient ObjectRequester\n\t}\n\t// AWSClientConfig is the configuration for our client\n\tAWSClientConfig struct {\n\t\tEndpoint string `mapstructure:\"endpoint\"`\n\t}\n\t// ObjectRequester is our custom implementation of the S3 API\n\tObjectRequester interface {\n\t\tgetObjectRequest(bucket, key, filename string) Presignable\n\t}\n\t// ObjectRequestClient is the concrete version of the above, and will use the normal S3 API\n\tObjectRequestClient struct {\n\t\ts3Client s3iface.S3API\n\t}\n\t// Presignable is an interface that will allow us to use both request.Request, as well as whatever other struct\n\t// we want that implements Presign.\n\tPresignable interface {\n\t\tPresign(time time.Duration) (string, error)\n\t}\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/75574755/unit-testing-s3-presigned-api",
    "body": "// client.go\n// GetPresignedUrl creates a presigned url to an s3 object.\nfunc (s *AWSClient) GetPresignedUrl(bucket, key, filename string) (string, error) {\n\tr := s.objectRequestClient.getObjectRequest(bucket, key, filename)\n\treturn r.Presign(15 * time.Minute)\n}\n// getObjectRequest encapsulates GetObjectRequest so that it can be adapted for testing.\n// Returning an interface here looks dumb, but it lets us return an object that is not\n// *request.Request in the mock of this function so that we can call something.Presign()\n// without a connection to AWS.\nfunc (s *ObjectRequestClient) getObjectRequest(bucket, key, filename string) Presignable {\n\treq, _ := s.s3Client.GetObjectRequest(&s3.GetObjectInput{\n\t\tBucket:                     aws.String(bucket),\n\t\tKey:                        aws.String(key),\n\t\tResponseContentDisposition: aws.String(fmt.Sprintf(\"attachment; filename=\\\"%s\\\"\", filename)),\n\t})\n\treturn req\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75574755/unit-testing-s3-presigned-api",
    "body": "// client_test.go\ntype (\n\tMockS3Client struct {\n\t\ts3iface.S3API\n\t\tmock.Mock\n\t}\n\tMockObjectRequestClient struct {\n\t\tmock.Mock\n\t}\n\tMockPresignable struct {\n\t\tmock.Mock\n\t}\n)\nfunc (m *MockPresignable) Presign(time time.Duration) (string, error) {\n\targs := m.Called(time)\n\treturn args.String(0), args.Error(1)\n}\nfunc (m *MockObjectRequestClient) getObjectRequest(bucket, key, filename string) Presignable {\n\targs := m.Called(bucket, key, filename)\n\treturn args.Get(0).(Presignable)\n}\nfunc TestGetPresignedUrl(t *testing.T) {\n\tbucket := \"bucket\"\n\tkey := \"key\"\n\tname := \"spike\"\n\turl := \"https://test.com\"\n\tm := MockS3Client{}\n\tmp := MockPresignable{}\n\tmo := MockObjectRequestClient{}\n\tmo.On(\"getObjectRequest\", bucket, key, name).Return(&mp)\n\tmp.On(\"Presign\", 15*time.Minute).Return(url, nil)\n\tclient := AWSClient{s3Client: &m, objectRequestClient: &mo}\n\treturnedUrl, err := client.GetPresignedUrl(bucket, key, name)\n\tassert.NoError(t, err)\n\tassert.Equal(t, url, returnedUrl)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75515595/is-it-possible-to-reuse-an-http-request-body-multiple-times-without-reading-it-i",
    "body": "pub async fn calculate_hashes<R, W>(\n    mut reader: R,\n    hashers: &mut [&mut dyn Update],\n    mut writer: W,\n) -> Result<(), std::io::Error>\nwhere\n    R: AsyncBufRead + Unpin,\n    W: AsyncWrite + Unpin,\n{\n    loop {\n        let part = reader.fill_buf().await?;\n        if part.is_empty() {\n            break;\n        }\n        for hasher in hashers.iter_mut() {\n            hasher.update(part);\n        }\n        writer.write_all(part).await?;\n        let part_len = part.len();\n        reader.consume(part_len);\n    }\n    Ok(())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75326111/understanding-sql-connection-pool-work-with-go",
    "body": "connPool := make(chan struct{}, maxOpenConns) // create a buffered channel with a size equal to the maximum number of connections in the pool\nfor m := range msgs {\n    // ...\n    se := &sqlEntity{\n        body:      string(m.Body),\n        cnt:       m.MessageCount,\n        timeStamp: fmt.Sprintf(\"%v\", m.Timestamp.Format(\"2006-01-02 15:04:05\")),\n        uuid:      u,\n    }\n    go func(se *sqlEntity) {\n        writeSQL(se)\n    }(se)\n    // ...\n}\nfunc writeSQL(se *sqlEntity) {\n    connPool <- struct{}{} // wait for a free connection in the pool\n    defer func() {\n        <-connPool // release the connection after writeSQL is done\n    }()\n    result, err := db.Exec(cmd, args...)\n    // handle error and return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75321426/how-to-create-a-generic-type-for-lambda-middleware-in-go",
    "body": "package middlewares\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n)\ntype Record struct {\n\tevents.APIGatewayProxyRequest `json:\",omitempty\"`\n\tevents.SQSEvent               `json:\",omitempty\"`\n}\ntype Event struct {\n\tRecords []Record `json:\"records\"`\n}\ntype HandlerFunc func(ctx context.Context, event Event) (string, error)\nfunc LogMiddleware(ctx context.Context, next HandlerFunc) HandlerFunc {\n\treturn HandlerFunc(func(ctx context.Context, event Event) (string, error) {\n\t\tfmt.Println(\"log from middleware!\")\n\t\treturn next(ctx, event)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75321426/how-to-create-a-generic-type-for-lambda-middleware-in-go",
    "body": "{\n    \"records\": [\n        {\n            \"body\": \"{\\\"message\\\": \\\"hello world\\\"}\",\n            \"resource\": \"/hello\",\n            \"path\": \"/hello\",\n            \"httpMethod\": \"GET\",\n            \"isBase64Encoded\": false,\n            \"queryStringParameters\": {\n                \"foo\": \"bar\"\n            },\n            \"pathParameters\": {\n                \"proxy\": \"/path/to/resource\"\n            },\n            \"stageVariables\": {\n                \"baz\": \"qux\"\n            },\n            \"headers\": {\n                \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n                \"Accept-Encoding\": \"gzip, deflate, sdch\",\n                \"Accept-Language\": \"en-US,en;q=0.8\",\n                \"Cache-Control\": \"max-age=0\",\n                \"CloudFront-Forwarded-Proto\": \"https\",\n                \"CloudFront-Is-Desktop-Viewer\": \"true\",\n                \"CloudFront-Is-Mobile-Viewer\": \"false\",\n                \"CloudFront-Is-SmartTV-Viewer\": \"false\",\n                \"CloudFront-Is-Tablet-Viewer\": \"false\",\n                \"CloudFront-Viewer-Country\": \"US\",\n                \"Host\": \"1234567890.execute-api.us-east-1.amazonaws.com\",\n                \"Upgrade-Insecure-Requests\": \"1\",\n                \"User-Agent\": \"Custom User Agent String\",\n                \"Via\": \"1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)\",\n                \"X-Amz-Cf-Id\": \"cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==\",\n                \"X-Forwarded-For\": \"127.0.0.1, 127.0.0.2\",\n                \"X-Forwarded-Port\": \"443\",\n                \"X-Forwarded-Proto\": \"https\"\n            },\n            \"requestContext\": {\n                \"accountId\": \"123456789012\",\n                \"resourceId\": \"123456\",\n                \"stage\": \"prod\",\n                \"requestId\": \"c6af9ac6-7b61-11e6-9a41-93e8deadbeef\",\n                \"requestTime\": \"09/Apr/2015:12:34:56 +0000\",\n                \"requestTimeEpoch\": 1428582896000,\n                \"identity\": {\n                    \"cognitoIdentityPoolId\": null,\n                    \"accountId\": null,\n                    \"cognitoIdentityId\": null,\n                    \"caller\": null,\n                    \"accessKey\": null,\n                    \"sourceIp\": \"127.0.0.1\",\n                    \"cognitoAuthenticationType\": null,\n                    \"cognitoAuthenticationProvider\": null,\n                    \"userArn\": null,\n                    \"userAgent\": \"Custom User Agent String\",\n                    \"user\": null\n                },\n                \"path\": \"/prod/hello\",\n                \"resourcePath\": \"/hello\",\n                \"httpMethod\": \"GET\",\n                \"apiId\": \"1234567890\",\n                \"protocol\": \"HTTP/1.1\"\n            }\n        }\n    ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75321426/how-to-create-a-generic-type-for-lambda-middleware-in-go",
    "body": "{\n    \"records\": [\n        {\n            \"Records\": [\n                {\n                    \"messageId\": \"19dd0b57-b21e-4ac1-bd88-01bbb068cb78\",\n                    \"receiptHandle\": \"MessageReceiptHandle\",\n                    \"body\": \"My own event payload!\",\n                    \"attributes\": {\n                        \"ApproximateReceiveCount\": \"1\",\n                        \"SentTimestamp\": \"1523232000000\",\n                        \"SenderId\": \"123456789012\",\n                        \"ApproximateFirstReceiveTimestamp\": \"1523232000001\"\n                    },\n                    \"messageAttributes\": {},\n                    \"md5OfBody\": \"4d1d0024b51659ad8c3725f9ba7e2471\",\n                    \"eventSource\": \"aws:sqs\",\n                    \"eventSourceARN\": \"arn:aws:sqs:us-east-1:123456789012:MyQueue\",\n                    \"awsRegion\": \"us-east-1\"\n                }\n            ]\n        }\n    ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75294389/how-to-connect-mongodb-golang-in-kubernetes",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nfunc main() {\n\t// Set client options\n\tclientOptions := options.Client().ApplyURI(\"mongodb://mongodb-service:27017\")\n\t// Connect to MongoDB\n\tclient, err := mongo.Connect(context.TODO(), clientOptions)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Check the connection\n\terr = client.Ping(context.TODO(), nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Connected to MongoDB!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75294389/how-to-connect-mongodb-golang-in-kubernetes",
    "body": "apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mongodb\nspec:\n  serviceName: mongodb-service\n  replicas: 1\n  selector:\n    matchLabels:\n      app: mongodb\n  template:\n    metadata:\n      labels:\n        app: mongodb\n    spec:\n      containers:\n        - name: mongodb\n          image: mongo:4.4\n          ports:\n            - containerPort: 27017\n          volumeMounts:\n            - name: mongodb-data\n              mountPath: /data/db\n  volumeClaimTemplates:\n    - metadata:\n      name: mongodb-data\n      annotations:\n        volume.beta.kubernetes.io/storage-class: standard\n      spec:\n        accessModes: [ \"ReadWriteOnce\" ]\n        resources:\n          requests:\n            storage: 1Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mongodb-service\nspec:\n  selector:\n    app: mongodb\n  ports:\n    - name: mongodb\n      port: 27017\n      targetPort: 27017\n  clusterIP: None\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: go-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: go-app\n  template:\n    metadata:\n      labels:\n        app: go-app\n    spec:\n      containers:\n        - name: go-app\n          image: <your-go-app-image>\n          ports:\n            - containerPort: 8080"
  },
  {
    "url": "https://stackoverflow.com/questions/75244452/unmarshal-yaml-into-complex-object-which-may-be-either-struct-or-string",
    "body": "type UNFT struct {\n\tItemMeta map[string]map[any]string `yaml:\"item_meta\"`\n}\nfunc (u *UNFT) UnmarshalYAML(n *yaml.Node) error {\n\tvar obj struct {\n\t\tItemMeta map[string]map[MetaKey]string `yaml:\"item_meta\"`\n\t}\n\tif err := n.Decode(&obj); err != nil {\n\t\treturn err\n\t}\n\tu.ItemMeta = make(map[string]map[any]string, len(obj.ItemMeta))\n\tfor k, v := range obj.ItemMeta {\n\t\tm := make(map[any]string, len(v))\n\t\tfor k, v := range v {\n\t\t\tif k.Source != (Source{}) {\n\t\t\t\tm[k.Source] = v\n\t\t\t} else {\n\t\t\t\tm[k.String] = v\n\t\t\t}\n\t\t}\n\t\tu.ItemMeta[k] = m\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75227143/aggregation-with-insertion-of-data-from-one-collection-into-another",
    "body": "db.chat.aggregate([\n  {\n    $match: {\n      participants: \"63ce54460aeee5e72c778d90\",\n\n    }\n  },\n  {\n    $lookup: {\n      from: \"message\",\n      localField: \"id\",\n      foreignField: \"chat_id\",\n      pipeline: [\n        {\n          $sort: {\n            created: -1\n          }\n        },\n        {\n          $limit: 1\n        }\n      ],\n      as: \"last_message\",\n\n    }\n  },\n  {\n    $unwind: {\n      path: \"$last_message\",\n      preserveNullAndEmptyArrays: true\n    }\n  },\n  {\n    $project: {\n      last_message: \"$last_message\"\n    }\n  }\n])"
  },
  {
    "url": "https://stackoverflow.com/questions/75227071/consuming-paginated-rest-api",
    "body": "package models\nimport (\n    \"encoding/json\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"fmt\"\n)\ntype Request struct {\n    Url string\n    ApiKey string\n}\ntype Response struct {\n    ...some fields...\n    Paginations Pagination `json:\"pagination\"`\n}\ntype Pagination struct {\n    EndCursor   string `json:\"endCursor\"`\n    HasNextPage bool   `json:\"hasNextPage\"`\n}\nfunc (request *Request) Get() ([]Response, error) {\n\n    var responses []Response\n    var response Response\n    // Set up new request\n    req, err := http.NewRequest(\"GET\", request.Url, nil)\n    if err != nil {\n        fmt.Println(\"Error creating request...\")\n        return responses, err\n    }\n    // Add request headers\n    req.Header = http.Header{\n        \"accept\":        {\"application/json\"},\n        \"authorization\": {\"Bearer \" + request.ApiKey},\n    }\n    // Get our initial response from the API and capture status code\n    resp, _ := http.DefaultClient.Do(req)\n    response.Status = resp.StatusCode\n    // Read the response body and Unmarshal into struct\n    respBody, err := ioutil.ReadAll(resp.Body)\n    json.Unmarshal(respBody, &response)\n    // If there was a parsing error, log it\n    if err != nil {\n        fmt.Println(err)\n    }\n    defer resp.Body.Close()\n\n    // This field will be in the response payload\n    // It is verified to be of type bool (not string)\n    fmt.Printf(\"Has Next Page? %t\\n\", resp.Paginations.HasNextPage)\n    // Append response to our slice of responses\n    responses = append(responses, response)\n    // If paginations are available, continue to loop through until all paginations are exhausted\n    for response.Paginations.HasNextPage == true {\n        // Append \"after\" cursor to query in order to redirect to paginated response\n        qry := req.URL.Query()\n        qry.Set(\"after\", response.Paginations.EndCursor)\n        req.URL.RawQuery = qry.Encode()\n        fmt.Println(\"Paginated request query: \", req.URL.String())\n        // Make request\n        resp, err := http.DefaultClient.Do(req)\n        response.Status = resp.StatusCode\n        fmt.Printf(\"Status Code: %d\\n\", response.Status)\n        // Read response and deserialize it\n        respBody, err := ioutil.ReadAll(resp.Body)\n        json.Unmarshal(respBody, &response)\n        fmt.Println(\"Pagination Cursor: \", response.Paginations.EndCursor)\n        fmt.Printf(\"Has Next Page? %t\\n\", response.Paginations.HasNextPage)\n        // If there was a parsing error, log it\n        if err != nil {\n            fmt.Println(err)\n        }\n        defer resp.Body.Close()\n        // Append response to our slice of responses\n        responses = append(responses, response)\n    }\n    return responses, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75215946/using-discord-go-how-do-i-retrieve-message-attachments-from-a-slash-command-opt",
    "body": "func SlashCommand(s *discordgo.Session, i *discordgo.InteractionCreate) {\n\tattachmentID := i.ApplicationCommandData().Options[0].Value.(string)\n\tattachmentUrl := i.ApplicationCommandData().Resolved.Attachments[attachmentID].URL\n\t//get the file contents\n\tres, err := http.DefaultClient.Get(attachmentUrl)\n\tif err != nil {\n\t\tlog.Println(errors.New(\"could not get response from code explain bot\"))\n\t\ts.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{\n\t\t\tType: discordgo.InteractionResponseChannelMessageWithSource,\n\t\t\tData: &discordgo.InteractionResponseData{\n\t\t\t\tContent: \"Could not get response\",\n\t\t\t},\n\t\t})\n\t\treturn\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/75199466/setting-labels-on-gcp-compute-instances-using-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"golang.org/x/oauth2/google\"\n\t\"google.golang.org/api/compute/v1\"\n)\nfunc main() {\n\taddLabelToGCPInstances()\n}\nfunc addLabelToGCPInstances() error {\n\t// You can pass these as args\n\tproject := \"Your GCP Project ID\"\n\tzone := \"europe-west2-a\"\n\tinstance := \"milad-test-instance\"\n\tprodLablesMap := map[string]string{\n\t\t\"production\":  \"true\",\n\t\t\"environment\": \"production\",\n\t}\n\tctx := context.Background()\n\tos.Setenv(\"GOOGLE_APPLICATION_CREDENTIALS\", \"gke.json\")\n\tc, err := google.DefaultClient(ctx, compute.CloudPlatformScope)\n\tif err != nil {\n\t\treturn err\n\t}\n\tcomputeService, err := compute.New(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\trespInstance, err := computeService.Instances.Get(project, zone, instance).Context(ctx).Do()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trb := &compute.InstancesSetLabelsRequest{\n\t\tLabels:           prodLablesMap,\n\t\tLabelFingerprint: respInstance.LabelFingerprint,\n\t}\n\trespLabels, err := computeService.Instances.SetLabels(project, zone, instance, rb).Context(ctx).Do()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_ = respLabels\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75192805/problem-writing-a-unit-test-using-gorm-and-sql-mock",
    "body": "func Test_Create(t *testing.T) {\n\tdb, mock, err := sqlmock.New()\n\tif err != nil {\n\t\tt.Errorf(\"Failed to open mock sql db, got error: %v\", err)\n\t}\n\tif db == nil {\n\t\tt.Error(\"db is null\")\n\t}\n\tif mock == nil {\n\t\tt.Error(\"mock is null\")\n\t}\n\tdefer db.Close()\n\tdialector := postgres.New(postgres.Config{\n\t\tDSN:                  \"sqlmock_db_0\",\n\t\tDriverName:           \"postgres\",\n\t\tConn:                 db,\n\t\tPreferSimpleProtocol: true,\n\t})\n\tpDb, err := gorm.Open(dialector, &gorm.Config{})\n\tif err != nil {\n\t\tt.Fatalf(\"gorm postgres fatal: %v\", err)\n\t}\n\tstudent := Student{\n\t\tID:   12345,\n\t\tName: \"Test user\",\n\t}\n\tmock.ExpectBegin()\n\tmock.ExpectQuery(\n\t\tregexp.QuoteMeta(`INSERT INTO \"students\" (\"name\",\"id\") VALUES ($1,$2) RETURNING \"id\"`)).\n\t\tWithArgs(student.Name, student.ID).WillReturnRows(sqlmock.NewRows([]string{\"id\"}).AddRow(student.ID))\n\tmock.ExpectCommit()\n\tif err = pDb.Create(&student).Error; err != nil {\n\t\tt.Errorf(\"Failed to insert to gorm db, got error: %v\", err)\n\t\tt.FailNow()\n\t}\n\terr = mock.ExpectationsWereMet()\n\tif err != nil {\n\t\tt.Errorf(\"Failed to meet expectations, got error: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75168418/test-for-handler-with-file-upload",
    "body": "package multipart\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestHandleFile(t *testing.T) {\n\tt.Run(\"MultipartRequest\", func(t *testing.T) {\n\t\t// instantiate multipart request\n\t\tvar buf bytes.Buffer\n\t\tmultipartWriter := multipart.NewWriter(&buf)\n\t\tdefer multipartWriter.Close()\n\t\t// add form field\n\t\tfilePart, _ := multipartWriter.CreateFormFile(\"file\", \"file.txt\")\n\t\tfilePart.Write([]byte(\"Hello, World!\"))\n\t\tr := httptest.NewRequest(http.MethodPost, \"/file\", &buf)\n\t\tw := httptest.NewRecorder()\n\t\tr.Header.Set(\"Content-Type\", multipartWriter.FormDataContentType())\n\t\tHandleFile(w, r)\n\t\tdata, _ := io.ReadAll(w.Result().Body)\n\t\tassert.Equal(t, http.StatusOK, w.Result().StatusCode)\n\t\tassert.Equal(t, []byte(\"Hello, World!\"), data)\n\t})\n\tt.Run(\"PlainRequest\", func(t *testing.T) {\n\t\tr := httptest.NewRequest(http.MethodPost, \"/file\", nil)\n\t\tw := httptest.NewRecorder()\n\t\tHandleFile(w, r)\n\t\tassert.Equal(t, http.StatusBadRequest, w.Result().StatusCode)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75168418/test-for-handler-with-file-upload",
    "body": "package multipart\nimport (\n\t\"io\"\n\t\"mime\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"strings\"\n)\nfunc HandleFile(w http.ResponseWriter, r *http.Request) {\n\tmediaType, params, _ := mime.ParseMediaType(r.Header.Get(\"Content-Type\"))\n\tif strings.HasPrefix(mediaType, \"multipart/\") {\n\t\tmultipartReader := multipart.NewReader(r.Body, params[\"boundary\"])\n\t\tfilePart, _ := multipartReader.NextPart()\n\t\t// pay attention here when you read large file\n\t\tdata, _ := io.ReadAll(filePart)\n\t\tw.Write(data)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusBadRequest)\n\tw.Write([]byte(\"request is not multipart\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75137033/variable-type-of-input-parameter-in-function",
    "body": "type IssueComment struct {\n\tID        *int64     `json:\"id,omitempty\"`\n\tNodeID    *string    `json:\"node_id,omitempty\"`\n\tBody      *string    `json:\"body,omitempty\"`\n\tUser      *User      `json:\"user,omitempty\"`\n\tReactions *Reactions `json:\"reactions,omitempty\"`\n\tCreatedAt *time.Time `json:\"created_at,omitempty\"`\n\tUpdatedAt *time.Time `json:\"updated_at,omitempty\"`\n\t// AuthorAssociation is the comment author's relationship to the issue's repository.\n\t// Possible values are \"COLLABORATOR\", \"CONTRIBUTOR\", \"FIRST_TIMER\", \"FIRST_TIME_CONTRIBUTOR\", \"MEMBER\", \"OWNER\", or \"NONE\".\n\tAuthorAssociation *string `json:\"author_association,omitempty\"`\n\tURL               *string `json:\"url,omitempty\"`\n\tHTMLURL           *string `json:\"html_url,omitempty\"`\n\tIssueURL          *string `json:\"issue_url,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75137033/variable-type-of-input-parameter-in-function",
    "body": "func DoStuff(comments []interface{}) error {\n  for _, c : = range comments {\n    if ic, ok := c.(*github.IssueComment); ok { // Remove the deref if your slice contains values, not references\n      // Pull out fields and do IssueComment-specific things\n      ProcessIssueComment(ic)\n    } else if prc, ok := c.(*github.PullRequestComment); ok {\n      // Do PRComment-specific things\n      ProcessPullRequestComment(prc)\n    } else {\n      return(fmt.Errorf(\"I did not want something of type %s\", t))\n    }\n  }\n  return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75130852/advance-elasticsearch-golang",
    "body": "import (\n    \"encoding/json\"\n\t\"github.com/elastic/go-elasticsearch/v8/typedapi/core/search\"\n\t\"github.com/elastic/go-elasticsearch/v8/typedapi/types\"\n\t\"github.com/elastic/go-elasticsearch/v8/typedapi/types/enums/simplequerystringflag\"\n)\ntype MessageSearchParams struct {\n\tQuery   string\n\tFilters *MessageSearchFilters\n\tSize    int\n}\ntype MessageSearchFilters struct {\n\tUserIDs      []string\n\tChannelIDs   []string\n\tMinCreatedAt time.Time\n\tMaxCreatedAt time.Time\n}\nfunc buildMessageSearchQuery(params *MessageSearchParams) (json.RawMessage, error) {\n\t// build elasticsearch query here\n\tvar filters []types.QueryContainer\n\tif len(params.Filters.ChannelIDs) > 0 {\n\t\tfilters = append(filters, types.QueryContainer{\n\t\t\tTerms: &types.TermsQuery{\n\t\t\t\tTermsQuery: map[types.Field]types.TermsQueryField{\n\t\t\t\t\t\"channel_id\": params.Filters.ChannelIDs,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}\n\tif !params.Filters.MinCreatedAt.IsZero()  || !params.Filters.MaxCreatedAt.IsZero() {\n\t\tvar gt, lt *types.DateMath\n\t\tif !params.Filters.MinCreatedAt.IsZero() {\n\t\t\tminCreatedAtStr := types.DateMath(strconv.FormatInt(params.Filters.MinCreatedAt.UnixMilli(), 10))\n\t\t\tgt = &minCreatedAtStr\n\t\t}\n\t\tif !params.Filters.MaxCreatedAt.IsZero() {\n\t\t\tmaxCreatedAtStr := types.DateMath(strconv.FormatInt(params.Filters.MaxCreatedAt.UnixMilli(), 10))\n\t\t\tlt = &maxCreatedAtStr\n\t\t}\n\t\tfilters = append(filters, types.QueryContainer{\n\t\t\tRange: map[types.Field]types.RangeQuery{\n\t\t\t\t\"created_at\": types.DateRangeQuery{\n\t\t\t\t\tGt: gt,\n\t\t\t\t\tLt: lt,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}\n\tqueryStringFlag := types.NewSimpleQueryStringFlagsBuilder().\n\t\tSimpleQueryStringFlag(simplequerystringflag.PHRASE).\n\t\tSimpleQueryStringFlag(simplequerystringflag.NOT).\n\t\tBuild()\n\treq := &search.Request{\n\t\tQuery: &types.QueryContainer{\n\t\t\tBool: &types.BoolQuery{\n\t\t\t\tMust: []types.QueryContainer{\n\t\t\t\t\t{\n\t\t\t\t\t\tSimpleQueryString: &types.SimpleQueryStringQuery{\n\t\t\t\t\t\t\tQuery: params.Query,\n\t\t\t\t\t\t\tFlags: &queryStringFlag,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tFilter: filters,\n\t\t\t},\n\t\t},\n\t}\n\treturn json.Marshal(req)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75123909/writing-to-a-slice-by-a-channel-and-a-goroutine-why-slice-is-eventually-empty",
    "body": "func Writer(wg *sync.WaitGroup, vertices *[]Vertex) (chan<- []*Triangle3) {\n    // External code writes to this channel.\n    // This goroutine reads the channel and writes to vertices.\n    writer := make(chan []*Triangle3)\n    // Write by a goroutine.\n    wg.Add(1)\n    go func() {\n        defer wg.Done()\n        a := Vertex{}\n        // Read from the channel and write them to vertices.\n        for ts := range writer {\n            for _, t := range ts {\n                a.X = float32(t.V[0].X)\n                a.Y = float32(t.V[0].Y)\n                a.Z = float32(t.V[0].Z)\n                *vertices = append(*vertices, a)  <=====\n            }\n        }\n    }()\n    return writer\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75119131/validating-free-time-slot-in-schedule",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\ntype Slot struct {\n\tstart int\n\tend   int\n}\nvar timeslots = []Slot{\n\t{start: 10, end: 14},\n\t{start: 17, end: 21},\n\t{start: 30, end: 37},\n}\nfunc checkValid(slot Slot) bool {\n\ti := sort.Search(len(timeslots), func(i int) bool {\n\t\treturn timeslots[i].start > slot.end\n\t})\n\treturn i == 0 || timeslots[i-1].end < slot.start\n}\nfunc main() {\n\tsort.Slice(timeslots, func(a, b int) bool {\n\t\treturn timeslots[a].start < timeslots[b].start\n\t})\n\tfmt.Println(checkValid(Slot{start: 15, end: 16})) // should be true\n\tfmt.Println(checkValid(Slot{start: 15, end: 18})) // should be false\n\tfmt.Println(checkValid(Slot{start: 16, end: 27})) // should be false\n\tfmt.Println(checkValid(Slot{start: 8, end: 39}))  // should be false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75103855/how-to-define-two-separate-types-for-arbitrary-precision-decimals-so-they-can-on",
    "body": "package main\nimport \"github.com/shopspring/decimal\"\ntype Number[K any] struct{ decimal.Decimal }\n// Wrapper to enforce covariant type among receiver, parameters and return.\nfunc (n Number[K]) Add(d2 Number[K]) Number[K] {\n\treturn Number[K]{n.Decimal.Add(d2.Decimal)}\n}\n// These are dummy types used as parameters to differentiate Number types.\ntype (\n\tprice    struct{}\n\tquantity struct{}\n)\nfunc main() {\n\tvar somePrice Number[price]\n\tvar someQuantity Number[quantity]\n\t// no error\n\tsomePrice.Add(somePrice)\n\t// cannot use someQuantity (variable of type Number[quantity]) as type Number[price] in argument to somePrice.Add\n\tsomePrice.Add(someQuantity)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75078944/how-to-apply-the-css-style-in-a-gomail-library",
    "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n    <center><h1>We're glad you're here, {{.GetAccountName}}</h1></center>\n    <center>We just want to confirm it's you.<br><br></center>\n    <center>\n        <button style=\"background-color:#008CBA; border-color:#008CBA; border-radius: 4px; color:white; height: 50px; width: 300px;\">\n            Click to confirm your email address\n        </button>\n    <center>\n    <center><br>If you didn't create a proctl account, just delete this email.</center>\n</body>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/75012923/how-to-fix-error-with-query-dynamodb-request",
    "body": "package main\nimport (\n    \"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute\"\n\t\"fmt\"\n)\nfunc main() {\n\t// Create Session\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\tSharedConfigState: session.SharedConfigEnable,\n\t}))\n\t// Create DynamoDB Client with Logging\n\tclient := dynamodb.New(sess, aws.NewConfig())\n\ttype Item struct {\n\t\tEmail    string `dynamodbav: \"email\"`\n\t\tPassword string `dynamodbav: \"password,omitempty\"`\n\t\tRname    string `dynamodbav: \"rname,omitempty\"`\n\t}\n\tresult, err := client.Query(&dynamodb.QueryInput{\n        TableName: aws.String(\"accountsTable\"),\n        KeyConditions: map[string]*dynamodb.Condition{\n            \"email\": {\n                ComparisonOperator: aws.String(\"EQ\"),\n                AttributeValueList: []*dynamodb.AttributeValue{\n                    {\n                        S: aws.String(\"lhnng@amazon.com\"),\n                    },\n                },\n            },\n        },\n    })\n    if err != nil {\n        fmt.Println(\"Query API call failed:\")\n        fmt.Println((err.Error()))\n    }\n\tfor _, i := range result.Items {\n\n\t\titem := Item{}\n\t\terr = dynamodbattribute.UnmarshalMap(i, &item)\n\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Got error unmarshalling: %s\", err)\n\t\t}\n\n\t\tfmt.Println(\"Email: \", item.Email)\n\t\tfmt.Println()\n\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75012923/how-to-fix-error-with-query-dynamodb-request",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute\"\n)\nfunc main() {\n\t// Item to Get\n\ttype Item struct {\n\t\tEmail    string `dynamodbav: \"email\"`\n\t\tPassword string `dynamodbav: \"password,omitempty\"`\n\t\tRname    string `dynamodbav: \"rname,omitempty\"`\n\t}\n\t// Create Session\n\tsess := session.Must(session.NewSessionWithOptions(session.Options{\n\t\tSharedConfigState: session.SharedConfigEnable,\n\t}))\n\t// Create DynamoDB Client\n\tclient := dynamodb.New(sess, aws.NewConfig())\n\t// Get Item\n    result, err := client.GetItem(&dynamodb.GetItemInput{\n        TableName: aws.String(\"accountsTable\"),\n        Key: map[string]*dynamodb.AttributeValue{\n            \"email\": {\n                S: aws.String(\"lhnng@amazon.com\"),\n            },\n        },\n    })\n\t// Catch Error\n\tif err != nil {\n\t\tfmt.Println(\"GetItem API call failed:\")\n\t\tfmt.Println((err.Error()))\n\t}\n\titem := Item{}\n\t// Unmarhsall\n    err = dynamodbattribute.UnmarshalMap(result.Item, &item)\n    if err != nil {\n        panic(fmt.Sprintf(\"Failed to unmarshal Record, %v\", err))\n    }\n\t// If Item Returns Empty\n    if item.Email == \"\" {\n        fmt.Println(\"Could not find Item\")\n        return\n    }\n\t// Print Result\n    fmt.Println(\"Found item:\")\n    fmt.Println(\"Email:  \", item.Email)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74956308/goroutine-kafka-consumers",
    "body": "func main() {\n\tctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n\tdefer stop()\n    mySQLClient, _ := db.NewMySQLDBClient(\"root\", \"\", \"localhost\", 3306, \"testbase\")\n    workers := worker.CreateGroup(\"localhost:9092\", \"testgroup\", 1)\n    var wg sync.WaitGroup\n    for _, w := range workers {\n        w_ := w\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            worker.StartWorker(ctx, w_, []string{\"test-topic\"}, mySQLClient)\n        }()\n    }\n    wg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74939764/unmarshal-yaml-map-dict-key-to-struct-property",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n)\nvar input []byte = []byte(`\ncommands:\n    php:\n        service: php\n        bin: /bin/php\n    node:\n        service: node\n        bin: /bin/node\n`)\ntype Command struct {\n\tService string\n\tBin     string\n}\ntype NamedCommand struct {\n\tCommand\n\tName string\n}\ntype NamedCommands []NamedCommand\ntype Config struct {\n\tCommands NamedCommands\n}\nfunc (p *NamedCommands) UnmarshalYAML(value *yaml.Node) error {\n\tif value.Kind != yaml.MappingNode {\n\t\treturn fmt.Errorf(\"`commands` must contain YAML mapping, has %v\", value.Kind)\n\t}\n\t*p = make([]NamedCommand, len(value.Content)/2)\n\tfor i := 0; i < len(value.Content); i += 2 {\n\t\tvar res = &(*p)[i/2]\n\t\tif err := value.Content[i].Decode(&res.Name); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := value.Content[i+1].Decode(&res.Command); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\nfunc main() {\n\tvar f Config\n\tvar err error\n\tif err = yaml.Unmarshal(input, &f); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, cmd := range f.Commands {\n\t\tfmt.Printf(\"%+v\\n\", cmd)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74893821/get-output-in-a-specific-format",
    "body": "package main\nimport(\n  \"fmt\"\n)\ntype data struct {\n    id   int\n    name string\n    age  int\n}\nfunc print_data_array(datum []data) {\n  fmt.Println(\"[\")\n  for _, data := range(datum) {\n    fmt.Printf(\"  %v,\\n\", format_data_struct(data))\n  }\n  fmt.Println(\"]\")\n}\nfunc format_data_struct(d data) (string) {\n  // Note: this does not escape quotes in d.name.\n  return fmt.Sprintf(\n    `{ %v: %v, %v: \"%v\", %v: %v }`,\n    \"id\", d.id,\n    \"name\", d.name,\n    \"age\", d.age,\n  )\n}\nfunc main() {\n  var people = []data{\n      {id: 1, name: \"Udin\", age: 12},\n      {id: 2, name: \"Wati\", age: 51},\n      {id: 3, name: \"Budi\", age: 34},\n      {id: 4, name: \"Agus\", age: 16},\n      {id: 5, name: \"Sari\", age: 19},\n      {id: 6, name: \"Ririn\", age: 21},\n  }\n  print_data_array(people)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74835444/how-to-test-nested-input-in-go",
    "body": "package input\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc getInput(reader *bufio.Reader) (string, error) {\n\tdata, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"get input error: %w\", err)\n\t}\n\treturn strings.ReplaceAll(data, \"\\n\", \"\"), nil\n}\ntype Person struct {\n\tName string\n\tAge  int\n}\nfunc NestedInput(input io.Reader) (*Person, error) {\n\treader := bufio.NewReader(input)\n\tname, err := getInput(reader)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tswitch name {\n\tcase \"q\":\n\t\treturn nil, nil\n\tdefault:\n\t\tageStr, err := getInput(reader)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tage, err := strconv.Atoi(ageStr)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn &Person{Name: name, Age: age}, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74742431/unmarshaling-from-json-key-containing-a-single-quote",
    "body": "func (p *Product) UnmarshalJSON(b []byte) error {\n\ttype product Product // revent recursion\n\tvar _p product\n\tif err := json.Unmarshal(b, &_p); err != nil {\n\t\treturn err\n\t}\n\t*p = Product(_p)\n\treturn unmarshalFieldsWithSingleQuotes(p, b)\n}\nfunc unmarshalFieldsWithSingleQuotes(dest interface{}, b []byte) error {\n\t// Look through the JSON tags. If there is one containing single quotes,\n\t// unmarshal b again, into a map this time. Then unmarshal the value\n\t// at the map key corresponding to the tag, if any.\n\tvar m map[string]json.RawMessage\n\tt := reflect.TypeOf(dest).Elem()\n\tv := reflect.ValueOf(dest).Elem()\n\tfor i := 0; i < t.NumField(); i++ {\n\t\ttag := t.Field(i).Tag.Get(\"json\")\n\t\tif !strings.Contains(tag, \"'\") {\n\t\t\tcontinue\n\t\t}\n\t\tif m == nil {\n\t\t\tif err := json.Unmarshal(b, &m); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tif j, ok := m[tag]; ok {\n\t\t\tif err := json.Unmarshal(j, v.Field(i).Addr().Interface()); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74718292/adding-to-get-the-same-endpoint-with-post-and-different-queries-ends-up-with-inc",
    "body": "// You can edit this code!\n// Click here and start typing.\npackage main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"time\"\n\t\"github.com/gorilla/mux\"\n)\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/api/v2\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tfmt.Fprintf(w, \"You made a POST request\")\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t}).Methods(\"POST\")\n\tr.HandleFunc(\"/api/v2\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// an example API handler\n\t\tfmt.Fprintf(w, \"You made a GET request\")\n\t\tjson.NewEncoder(w).Encode(map[string]bool{\"ok\": true})\n\t}).\n\t\tQueries(\"from\", \"{from:[0-9]+}\",\n\t\t\t\"to\", \"{to:[0-9]+}\").\n\t\tMethods(\"GET\")\n\tr.HandleFunc(\"/api/v2\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.Error(w, \"\", http.StatusNotFound)\n\t}).Methods(\"GET\")\n\tsrv := &http.Server{\n\t\tHandler: r,\n\t\tAddr:    \"127.0.0.1:8000\",\n\t\t// Good practice: enforce timeouts for servers you create!\n\t\tWriteTimeout: 15 * time.Second,\n\t\tReadTimeout:  15 * time.Second,\n\t}\n\tgo srv.ListenAndServe()\n\treq2 := httptest.NewRequest(\"GET\", \"/api/v2?from=3&to=-5\", nil)\n\tout2 := httptest.NewRecorder()\n\tr.ServeHTTP(out2, req2)\n\tfmt.Println(out2.Code)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74678438/go-flags-ignore-unknown-input",
    "body": "func StripUnknownFlags(flagSet *flag.FlagSet, args []string) []string {\n\tformalFlagNames := getFormalFlagNames(flagSet)\n\tres := make([]string, 0, len(args))\n\tfor i := 0; i < len(args); i++ {\n\t\targ := args[i]\n\t\tisFlag, isTerminator, flagName, hasInlineValue := parseArg(arg)\n\t\tif isTerminator {\n\t\t\tres = append(res, args[i:]...)\n\t\t\tbreak\n\t\t}\n\t\tif !isFlag {\n\t\t\tres = append(res, arg)\n\t\t\tcontinue\n\t\t}\n\t\tisBoolFlag, exists := formalFlagNames[flagName]\n\t\tvar appendTo *[]string\n\t\tif exists {\n\t\t\tappendTo = &res\n\t\t} else {\n\t\t\tappendTo = &stripped\n\t\t}\n\t\t*appendTo = append(*appendTo, arg)\n\t\tif !hasInlineValue && !isBoolFlag {\n\t\t\t// next arg is supposed to be the flag value\n\t\t\tif i+1 < len(args) {\n\t\t\t\t*appendTo = append(*appendTo, args[i+1])\n\t\t\t}\n\t\t\ti++ // skip the flag value\n\t\t}\n\t}\n\treturn res\n}\nfunc parseArg(arg string) (isFlag bool, isTerminator bool, flagName string, hasInlineValue bool) {\n\tif len(arg) < 2 || arg[0] != '-' {\n\t\treturn false, false, \"\", false\n\t}\n\tnumMinuses := 1\n\tif arg[1] == '-' {\n\t\tnumMinuses++\n\t\tif len(arg) == 2 { // \"--\" terminates the flags\n\t\t\treturn false, true, \"\", false\n\t\t}\n\t}\n\tflagName = arg[numMinuses:]\n\tif equalsSignIndex := strings.Index(flagName, \"=\"); equalsSignIndex == 0 {\n\t\t// std FlagSet.Parse() will return \"bad flag syntax\" error\n\t\treturn false, false, \"\", false\n\t} else if equalsSignIndex > 0 {\n\t\tflagName = flagName[:equalsSignIndex]\n\t\thasInlineValue = true\n\t}\n\treturn true, false, flagName, hasInlineValue\n}\n// getFormalFlagNames returns a map where key is a flag name and value indicates it's a bool flag\nfunc getFormalFlagNames(flagSet *flag.FlagSet) map[string]bool {\n\tflags := make(map[string]bool)\n\tflagSet.VisitAll(func(f *flag.Flag) {\n\t\tisBoolFlag := false\n\t\tif boolFlag, ok := f.Value.(boolFlag); ok {\n\t\t\tisBoolFlag = boolFlag.IsBoolFlag()\n\t\t}\n\t\tflags[f.Name] = isBoolFlag\n\t})\n\treturn flags\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74655705/how-to-create-a-service-port-in-client-go",
    "body": "func GetLabels() map[string]string {\n\treturn map[string]string{\n\t\t\"app.kubernetes.io/instance\": \"test\",\n\t\t\"app.kubernetes.io/name\":     \"test\",\n\t\t\"control-plane\":              \"controller-manager\",\n\t}\n}\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test-webhook-admissions\",\n\t\t\tNamespace: namespace,\n\t\t\tLabels:    GetLabels(),\n\t\t},\n\t\tSpec: corev1.ServiceSpec{\n\t\t\tPorts: []corev1.ServicePort{\n\t\t\t\t{\n\t\t\t\t\tName:       \"webhook\",\n\t\t\t\t\tPort:       8443,\n\t\t\t\t\tTargetPort: intstr.FromInt(8443),\n\t\t\t\t\tProtocol:   \"TCP\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tSelector: GetLabels(),\n\t\t},\n\t}\n\terr := w.Client.Create(context.Background(), service)"
  },
  {
    "url": "https://stackoverflow.com/questions/74578519/my-program-in-golang-prints-the-first-input-two-times-in-the-file",
    "body": "func main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tn := 0\n\tinputFile, err := os.Create(\"input.csv\") //create the input.csv file\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer inputFile.Close()\n\tcsvwriter := csv.NewWriter(inputFile)\n\tfmt.Println(\"How many records ?\")\n\tfmt.Scanln(&n)\n\tfmt.Println(\"Enter the records\")\n\tvar lines [][]string\n\tfor i := 0; i < n; i++ {\n\t\tscanner.Scan()\n\t\ttext := scanner.Text()\n\t\tlines = append(lines, []string{text})\n\t}\n\terr = csvwriter.WriteAll(lines)\n\tif err != nil {\n\t\treturn\n\t}\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74576109/wait-for-aws-athena-query-execution-in-go-sdk",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/athena\"\n\t\"github.com/aws/aws-sdk-go-v2/service/athena/types\"\n)\nfunc main() {\n\tcfg := aws.NewConfig()\n\tath := athena.NewFromConfig(*cfg)\n\tctx, cancelFunc := context.WithTimeout(context.Background(), time.Minute*5)\n\tdefer cancelFunc()\n\trows, err := GetQueryResults(ctx, ath, aws.String(\"query-id\"), 10)\n\tif err != nil {\n\t\tpanic(err) // TODO: handle error\n\t}\n\tfmt.Println(rows)\n}\nfunc GetQueryResults(ctx context.Context, client *athena.Client, QueryID *string, attempts int) ([]types.Row, error) {\n\tt := time.NewTicker(time.Second * 5)\n\tdefer t.Stop()\n\tattemptsFunc := func(o *athena.Options) { o.RetryMaxAttempts = attempts }\nWAIT:\n\tfor {\n\t\tselect {\n\t\tcase <-t.C:\n\t\t\tout, err := client.GetQueryExecution(ctx, &athena.GetQueryExecutionInput{\n\t\t\t\tQueryExecutionId: QueryID,\n\t\t\t}, attemptsFunc)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tswitch out.QueryExecution.Status.State {\n\t\t\tcase types.QueryExecutionStateCancelled,\n\t\t\t\ttypes.QueryExecutionStateFailed,\n\t\t\t\ttypes.QueryExecutionStateSucceeded:\n\t\t\t\tbreak WAIT\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\tbreak WAIT\n\t\t}\n\t}\n\tdata, err := client.GetQueryResults(ctx, &athena.GetQueryResultsInput{\n\t\tQueryExecutionId: QueryID,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn data.ResultSet.Rows, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74537787/golang-how-to-get-the-kubernetes-modifications",
    "body": "func onUpdate(oldObj interface{}, newObj interface{}) {\n\toldDepl := oldObj.(*v1.Deployment)\n\tnewDepl := newObj.(*v1.Deployment)\n\tfor oldContainerID := range oldDepl.Spec.Template.Spec.Containers {\n\t\tfor newContainerID := range newDepl.Spec.Template.Spec.Containers {\n\t\t\tif oldDepl.Spec.Template.Spec.Containers[oldContainerID].Name == newDepl.Spec.Template.Spec.Containers[newContainerID].Name {\n\t\t\t\tif oldDepl.Spec.Template.Spec.Containers[oldContainerID].Image != newDepl.Spec.Template.Spec.Containers[newContainerID].Image {\n\t\t\t\t\tfmt.Printf(\"CONTAINER IMAGE UPDATED FROM %s to %s\",\n\t\t\t\t\t\toldDepl.Spec.Template.Spec.Containers[oldContainerID].Image, newDepl.Spec.Template.Spec.Containers[newContainerID].Image)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74463204/how-to-get-an-http-proxy-response-header-in-golang-built-in-http-client",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"os\"\n)\nfunc main() {\n\tproxy := func(w http.ResponseWriter, req *http.Request) {\n\t\tlog.Println(\"proxy\", req.Method, req.RequestURI)\n\t\tif req.URL.Host != \"\" {\n\t\t\tif req.Method == http.MethodConnect {\n\t\t\t\t// tunnel\n\t\t\t\tconn, err := net.Dial(\"tcp\", req.URL.Host)\n\t\t\t\tif err != nil {\n\t\t\t\t\tw.WriteHeader(502)\n\t\t\t\t\tfmt.Fprint(w, err)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tclient, _, err := w.(http.Hijacker).Hijack()\n\t\t\t\tif err != nil {\n\t\t\t\t\tw.WriteHeader(502)\n\t\t\t\t\tfmt.Fprint(w, err)\n\t\t\t\t\tconn.Close()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tclient.Write([]byte(\"HTTP/1.0 200 OK\\r\\n\\r\\n\"))\n\t\t\t\thr, hw := io.Pipe()\n\t\t\t\tgo func(){\n\t\t\t\t\tio.Copy(os.Stdout, hr)\n\t\t\t\t\thr.Close()\n\t\t\t\t}()\n\t\t\t\tgo func() {\n\t\t\t\t\t// print response to stdout\n\t\t\t\t\tio.Copy(io.MultiWriter(client, hw), conn)\n\t\t\t\t\tclient.Close()\n\t\t\t\t\tconn.Close()\n\t\t\t\t\thw.Close()\n\t\t\t\t}()\n\t\t\t\tgo func() {\n\t\t\t\t\tio.Copy(conn, client)\n\t\t\t\t\tclient.Close()\n\t\t\t\t\tconn.Close()\n\t\t\t\t}()\n\t\t\t\treturn\n\t\t\t}\n\t\t\thttputil.NewSingleHostReverseProxy(req.URL).ServeHTTP(w, req)\n\t\t}\n\t}\n\thttp.ListenAndServe(\":8021\", http.HandlerFunc(proxy))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74459420/how-do-i-add-all-resource-arns-lambda-golang-listtags",
    "body": "package main\nimport (\n\t\"context\"\n\tawsutils \"github.com/alessiosavi/GoGPUtils/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"os\"\n\t\"sync\"\n)\nvar lambdaClient *lambda.Client = nil\nvar once sync.Once\nfunc init() {\n\tonce.Do(func() {\n\t\tcfg, err := awsutils.New()\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tlambdaClient = lambda.New(lambda.Options{Credentials: cfg.Credentials, Region: cfg.Region})\n\t})\n}\nfunc ListLambdas() ([]string, error) {\n\tf, err := lambdaClient.ListFunctions(context.Background(), &lambda.ListFunctionsInput{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar functions = make([]string, len(f.Functions))\n\tfor i, functionName := range f.Functions {\n\t\tfunctions[i] = *functionName.FunctionName\n\t}\n\tcontinuationToken := f.NextMarker\n\tfor continuationToken != nil {\n\t\tf, err = lambdaClient.ListFunctions(context.Background(), &lambda.ListFunctionsInput{Marker: continuationToken})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tcontinuationToken = f.NextMarker\n\t\tfor _, functionName := range f.Functions {\n\t\t\tfunctions = append(functions, *functionName.FunctionName)\n\t\t}\n\t}\n\treturn functions, nil\n}\nfunc DescribeLambda(lambdaName string) (*lambda.GetFunctionOutput, error) {\n\tfunction, err := lambdaClient.GetFunction(context.Background(), &lambda.GetFunctionInput{FunctionName: aws.String(lambdaName)})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn function, nil\n}\nfunc ListTags(lambdaARN string) (*lambda.ListTagsOutput, error) {\n\treturn lambdaClient.ListTags(context.Background(), &lambda.ListTagsInput{\n\t\tResource: aws.String(lambdaARN),\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74425152/how-to-test-mapped-objects-in-golang",
    "body": "package services\nimport (\n\t\"time\"\n\t\"userapp/db\"\n\t\"userapp/dto\"\n\t\"userapp/models\"\n)\ntype UserService struct {\n\tDB db.UserDbInterface\n}\ntype UserServiceInterface interface {\n\tAddUser(inputReq *dto.UserDTO) (*dto.UserDTO, error)\n}\nfunc NewUserService(db db.UserDbInterface) *UserService {\n\treturn &UserService{\n\t\tDB: db,\n\t}\n}\nfunc (u *UserService) AddUser(inputReq *dto.UserDTO) (*dto.UserDTO, error) {\n\t// here you can write complex logic\n\tuser := models.NewUser(inputReq.Id)\n\t// invoke db repo\n\tif err := u.DB.SaveUser(user); err != nil {\n\t\treturn nil, err\n\t}\n\tinputReq.AddedOn = time.Now()\n\treturn inputReq, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74425152/how-to-test-mapped-objects-in-golang",
    "body": "package controllers\nimport (\n\t\"encoding/json\"\n\t\"io\"\n\t\"net/http\"\n\t\"userapp/dto\"\n\t\"userapp/services\"\n)\ntype UserController struct {\n\tUS services.UserServiceInterface\n}\nfunc NewUserController(userService services.UserServiceInterface) *UserController {\n\treturn &UserController{\n\t\tUS: userService,\n\t}\n}\nfunc (u *UserController) Save(w http.ResponseWriter, r *http.Request) {\n\treqBody, err := io.ReadAll(r.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr.Body.Close()\n\tvar userReq dto.UserDTO\n\tjson.Unmarshal(reqBody, &userReq)\n\tuserRes, err := u.US.AddUser(&userReq)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tjson.NewEncoder(w).Encode(err)\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusCreated)\n\tjson.NewEncoder(w).Encode(userRes)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74418529/is-there-a-standard-way-to-categorize-custom-error-types",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\nvar (\n\tErrInvalidMsg   = errors.New(\"invalid message\")\n\tErrInvalidParam = errors.New(\"invalid param\")\n\tErrBadMsg       = errors.New(\"bad message\")\n)\ntype GroupError1 struct {\n\tBase error\n}\nfunc (ge GroupError1) Error() string {\n\treturn ge.Base.Error()\n}\ntype GroupError2 struct {\n\tBase error\n}\nfunc (ge GroupError2) Error() string {\n\treturn ge.Base.Error()\n}\nfunc TheError(n int) error {\n\tswitch n % 3 {\n\tcase 0:\n\t\treturn GroupError2{\n\t\t\tBase: ErrBadMsg,\n\t\t}\n\tcase 1:\n\t\treturn GroupError1{\n\t\t\tBase: ErrInvalidParam,\n\t\t}\n\tcase 2:\n\t\treturn GroupError1{\n\t\t\tBase: ErrInvalidMsg,\n\t\t}\n\t}\n\treturn nil\n}\nfunc main() {\n\tif err := TheError(1); err != nil {\n\t\tvar ge1 GroupError1\n\t\tvar ge2 GroupError2\n\t\tif ok := errors.As(err, &ge1); ok {\n\t\t\tfmt.Println(\"error group 1\")\n\t\t} else if ok := errors.As(err, &ge2); ok {\n\t\t\tfmt.Println(\"error group 2\")\n\t\t} else {\n\t\t\tfmt.Println(\"no error group\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74416717/how-can-i-show-an-animated-spinner-while-cloning-a-git-repository-and-show-the-l",
    "body": "// Implements io.Writer; changes the spinner's message to match whatever\n// is sent to Write().\ntype spinnerUpdater struct {\n\ts *yacspin.Spinner\n\t// The base message you want to write next to the spinner.\n\tbase string\n\t// How many net lines of output from git are there,\n\t// taking control terminal codes into account?\n\tlines int\n\t// Raw output from git so far.\n\toutput string\n}\n// Terminal control code to move the cursor up one line.\nconst moveUp = \"\\033[1A\"\nfunc (su *spinnerUpdater) Write(b []byte) (int, error) {\n\tsu.output += string(b)\n\t// Add one line for each newline we see, but subtract one\n\t// for each \"move cursor up\" control sequence.\n\tsu.lines += strings.Count(string(b), \"\\n\")\n\tsu.lines -= strings.Count(string(b), moveUp)\n\t// Tack on some control codes to the end of the message to move\n\t// the cursor back up to the starting line because that's where\n\t// the spinner expects the cursor to be when it outputs an update.\n\tmove := strings.Repeat(moveUp, su.lines + 1)\n\tsu.s.Message(fmt.Sprintf(\"%s\\n%s%s\", su.base, su.output, move))\n\treturn len(b), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74416717/how-can-i-show-an-animated-spinner-while-cloning-a-git-repository-and-show-the-l",
    "body": "func cloneWithSpinner(target, url string) error {\n\tcfg := yacspin.Config{\n\t\tFrequency:     100 * time.Millisecond,\n\t\tCharSet:       yacspin.CharSets[59],\n\t\tMessage: \"Cloning repository\",\n\t\tStopCharacter: \"✓\",\n\t\tStopMessage: \"Done cloning repository\",\n\t\tStopColors:    []string{\"fgGreen\"},\n\t\tStopFailCharacter: \"✗\",\n\t\tStopFailMessage: \"Error cloning repository\",\n\t\tStopFailColors: []string{\"fgRed\"},\n\t}\n\tspinner, err := yacspin.New(cfg)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := spinner.Start(); err != nil {\n\t\treturn err\n\t}\n\tupdater := &spinnerUpdater{s: spinner, base: cfg.Message}\n\t_, err = git.PlainClone(target, false, &git.CloneOptions{\n\t\tURL:      url,\n\t\tProgress: updater,\n\t})\n\tif err != nil {\n\t\tspinner.StopFail()\n\t} else {\n\t\tspinner.Stop()\n\t}\n\t// Print one more time to get the cursor down to where it's supposed to be.\n\tfmt.Print(updater.output)\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74393250/error-database-driver-unknown-driver-postgresql-forgotten-import-how-to-r",
    "body": "table = $(table)\nname = $(name)\nurl=postgres://postgres:secret@127.0.0.1:5432/school?sslmode=disable\nversion=$(version)\nmigration-up :\n\tmigrate -database \"$(url)\" -path ./migrations/ up $(version)\n\nmigration-down :\n\tmigrate -database \"$(url)\" -path ./migrations/ down $(version)\n\nmigration-create:\n\tmigrate create -ext sql -dir ./migrations/ -seq $(name)\nmigration-force:\n\tmigrate -database \"$(url)\" -path ./migrations/ force $(version)\nmigration-version:\n\tmigrate -database \"$(url)\" -path ./migrations/ version"
  },
  {
    "url": "https://stackoverflow.com/questions/74389367/how-to-access-mapstringinterface-data-from-my-yaml-file",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype (\n\tEntry struct {\n\t\tTestName string `yaml:\"TEST_NAME\"`\n\t\tRunPath  string `yaml:\"RUN_PATH\"`\n\t}\n)\nfunc main() {\n\treportYAML := os.Args[1]\n\t// userDictionary := os.Args[2]\n\tyfile, err := ioutil.ReadFile(reportYAML)\n\tif err != nil {\n\t\tfmt.Printf(\"ERROR: Unable to open yaml file : %s\\n\", err)\n\t}\n\tdata := make(map[string]Entry)\n\terror := yaml.Unmarshal([]byte(yfile), &data)\n\tif error != nil {\n\t\tfmt.Printf(\"ERROR: Unable to read yaml file : %s\\n\", err)\n\t}\n\tfor _, value := range data {\n\t\tfmt.Printf(\"test_name: %s\\n\", value.TestName)\n\t\tfmt.Printf(\"run_path: %s\\n\", value.RunPath)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74388101/go-redis-hgetall-protobuf-message",
    "body": "unboxed, ok := res.(map[string]string)\nif !ok {\n\tfmt.Println(\"Output should be a pointer of a map\")\n}\n//If error is nil but value is also empty/nil. Data not found in redis, reindex\nif unboxed == nil || len(unboxed) <= 0 {\n\t//async reindexing call\n\tisCacheMiss = true\n\tstatsd.Instance().Incr(\"redis.keyNotPresentError\", 1)\n\treturn nil, isCacheMiss, nil\n}\nredisEntry := &style_fetch.CMSStyleRedisEntry{}\nfor key, value := range unboxed {\n\tif key == \"style\" {\n\t\tstyle := &style_fetch.Style{}\n\t\tproto.Unmarshal([]byte(value), style)\n\t\tredisEntry.Style = style\n\t}\n           //...other keys\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74283926/go-regex-inside-loop",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\tcsvutils \"github.com/alessiosavi/GoGPUtils/csv\"\n\t\"log\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\nfunc main() {\n\tnow := time.Now()\n\tPrecomputed(\"www.google.it\")\n\tfmt.Println(time.Since(now))\n\tnow = time.Now()\n\tNonPrecomputed(\"www.google.it\")\n\tfmt.Println(time.Since(now))\n}\nfunc NonPrecomputed(website string) int {\n\tfor _, line := range cachedLines {\n\t\tl := line\n\t\tdata := strings.Split(l, \"/\")\n\t\tif data[0] == \"regex\" {\n\t\t\tmatch, _ := regexp.MatchString(``+data[1]+``, website)\n\t\t\tif match {\n\t\t\t\tid, _ := strconv.Atoi(data[2])\n\t\t\t\treturn id\n\t\t\t}\n\t\t}\n\t}\n\treturn -1\n}\nfunc Precomputed(site string) int {\n\tfor regex, id := range rawRegex {\n\t\tif ok := regex.MatchString(site); ok {\n\t\t\treturn id\n\t\t}\n\t}\n\treturn -1\n}\nvar rawRegex map[*regexp.Regexp]int = make(map[*regexp.Regexp]int)\nvar cachedLines []string\nvar sites []string\nfunc init() {\n\tnow := time.Now()\n\tfile, err := os.ReadFile(\"regex.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tscanner := bufio.NewScanner(bytes.NewReader(file))\n\tfor scanner.Scan() {\n\t\ttxt := scanner.Text()\n\t\tcachedLines = append(cachedLines, txt)\n\t\tsplit := strings.Split(txt, \"/\")\n\t\tif len(split) == 3 {\n\t\t\tcompile, err := regexp.Compile(split[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tif rawRegex[compile], err = strconv.Atoi(split[2]); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t}\n\tfile, err = os.ReadFile(\"top500Domains.csv\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t_, csvData, err := csvutils.ReadCSV(file, ',')\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, line := range csvData {\n\t\tsites = append(sites, line[1])\n\t}\n\tlog.Println(\"Init took:\", time.Since(now))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74199122/go-get-server-address-from-kubeconfig-file",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n\tvar kubeconfig *string\n\tif home := homedir.HomeDir(); home != \"\" {\n\t\tkubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n\t} else {\n\t\tkubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n\t}\n\tflag.Parse()\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"server: %s\\n\", config.Host)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74170426/required-if-in-validation-package-dont-work-in-validation-of-parent-struct-from",
    "body": "func myValidate(sl validator.StructLevel) {\n\tif a, ok := sl.Current().Interface().(A); ok {\n\t\tif a.CardType == 1 && a.B.Day != \"01\" {\n\t\t\tsl.ReportError(sl.Current().Interface(), \"Day\", \"A.B.Day\", \"\", \"\")\n\t\t}\n\t}\n}\nfunc Test_validator(t *testing.T) {\n\tt.Run(\"error when IRN=1 and B is not set\", func(t *testing.T) {\n\t\tm := A{\n\t\t\tCardType: 1,\n\t\t\tIRN:      1,\n\t\t\tB:        B{\n\t\t\t\t//Day: \"01\",\n\t\t\t},\n\t\t}\n\t\tv := validator.New()\n\t\tv.RegisterStructValidation(myValidate, A{}) // 👈🏻 register \"myValidate\"\n\t\terr := v.Struct(m)\n\t\tassert.Error(t, err)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74099245/chromedp-sending-request-with-cookies",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/chromedp/cdproto/cdp\"\n\t\"github.com/chromedp/cdproto/network\"\n\t\"github.com/chromedp/cdproto/storage\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\terr := chromedp.Run(ctx,\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\texpr := cdp.TimeSinceEpoch(time.Now().Add(180 * 24 * time.Hour))\n\t\t\tcookies := []string{\"cookie1\", \"value1\", \"cookie2\", \"value2\"}\n\t\t\tfor i := 0; i < len(cookies); i += 2 {\n\t\t\t\terr := network.SetCookie(cookies[i], cookies[i+1]).\n\t\t\t\t\tWithExpires(&expr).\n\t\t\t\t\tWithDomain(\"en.afew-store.com\").\n\t\t\t\t\tWithHTTPOnly(true).\n\t\t\t\t\tDo(ctx)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn nil\n\t\t}),\n\t\tchromedp.Navigate(\"https://en.afew-store.com/\"),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tcookies, err := storage.GetCookies().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tfor i, cookie := range cookies {\n\t\t\t\tlog.Printf(\"chrome cookie %d: %+v\", i, cookie)\n\t\t\t}\n\t\t\treturn nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74089792/go-unmarshalling-a-toml-which-contains-a-hash-table-name",
    "body": "type (\n                fruitSpecs struct {\n                    Id     int      `toml:\"id\"`\n                    Name   string   `toml:\"name\"`\n                }\n                fruits struct {\n                    fruit fruitSpecs `toml:\"kiwi\"`\n                }\n            )\n            blob := `\n            [kiwi]\n                id = 1234581941\n                name = \"kiwi\"\n            `\n            o := &fruits{}\n            err := toml.Unmarshal([]byte(blob), o)\n            fmt.Println(o.fruit.Id)\n// CLI Output:\n// 1234581941"
  },
  {
    "url": "https://stackoverflow.com/questions/74089792/go-unmarshalling-a-toml-which-contains-a-hash-table-name",
    "body": "type (\n                fruitSpecs struct {\n                    Id     int      `toml:\"id\"`\n                    Name   string   `toml:\"name\"`\n                }\n                fruits struct {\n                    fruit fruitSpecs `toml:\"*\"` // Do not filter by name, accept every table name entry\n                }\n            )\n            blob := `\n            [kiwi]\n                id = 1234581941\n                name = \"kiwi\"\n            [banana]\n                id = 9876544312\n                name = \"banana\"\n            `\n            o := &fruits{}\n            err := toml.Unmarshal([]byte(blob), o)\n            fmt.Println(o.fruit.Id)\n// Desired output:\n// 1234581941\n// 9876544312"
  },
  {
    "url": "https://stackoverflow.com/questions/74089792/go-unmarshalling-a-toml-which-contains-a-hash-table-name",
    "body": "type (\n                fruitSpecs struct {\n                    Id     int      `toml:\"id\"`\n                    Name   string   `toml:\"name\"`\n                }\n                fruit map[inteface{}]fruitSpecs\n            )\n            blob := `\n            [kiwi]\n                id = 1234581941\n                name = \"kiwi\"\n            [banana]\n                id = 9876544312\n                name = \"banana\"\n            `\n            var o fruit\n            err := toml.Decode(blob, &fruit)\n            for _, item := range o {\n                fmt.Println(item.Id)\n            }\n// CLI Output:\n// 1234581941\n// 9876544312"
  },
  {
    "url": "https://stackoverflow.com/questions/74078022/how-to-perform-authentication-of-rpc-serverclient-by-http-in-go",
    "body": "srv := grpc.NewServer(exampleJwtMiddleware())\nfunc exampleJwtMiddleware() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {\n        token, err := extractHeaderFromContext(ctx, \"Authorization\")\n        // do sometings...\n\t\treturn handler(ctx, req)\n\t}\n}\nfunc extractHeaderFromContext(ctx context.Context, header string) ([]string, error) {\n\tmd, ok := metadata.FromIncomingContext(ctx)\n\tif !ok {\n\t\treturn nil, ERROR_NO_HEADER_IN_REQUEST\n\t}\n\tfoundedHeaders, ok := md[header]\n\tif !ok {\n\t\treturn nil, ERROR_NO_HEADER_IN_REQUEST\n\t}\n\treturn foundedHeaders, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74017055/how-to-see-generated-pdf-on-localhost-webpage-in-golang",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"github.com/krazybee/gofpdf\"\n)\nfunc getRoot(w http.ResponseWriter, r *http.Request) {\n\tfmt.Printf(\"got / request\\n\")\n\tio.WriteString(w, \"This is my website!\\n\")\n}\nfunc getHello(w http.ResponseWriter, r *http.Request) {\n\tfmt.Printf(\"got /hello request\\n\")\n\tio.WriteString(w, \"Hello, HTTP!\\n\")\n}\nfunc generatePDF(w http.ResponseWriter, r *http.Request) {\n\tvar b bytes.Buffer\n\tpw := io.Writer(&b)\n\tpr := io.Reader(&b)\n\tpdf := gofpdf.New(\"P\", \"mm\", \"A4\", \"\")\n\tfontsize := 12.0\n\tfont := \"Arial\"\n\tpdf.SetFont(\"Arial\", \"\", 6)\n\tpdf.AddPage()\n\tpdf.SetMargins(5, 5, 5)\n\tpdf.SetAutoPageBreak(true, 34)\n\tpdf.SetFont(font, \"B\", fontsize)\n\tpdf.MultiCell(0, 8, \"TERMS OF LIVING\", \"\", \"C\", false)\n\tpdf.MultiCell(0, 8, \"Terms\", \"\", \"C\", false)\n\t// Show the pdf on localhost web page.\n\terr := pdf.Output(pw)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/pdf\")\n\tresPDF, _ := ioutil.ReadAll(pr)\n\tw.Write(resPDF)\n\tfmt.Println(\"PDF served successfully\")\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", getRoot)\n\thttp.HandleFunc(\"/hello\", getHello)\n\thttp.HandleFunc(\"/pdf\", generatePDF)\n\terr := http.ListenAndServe(\":3333\", nil)\n\tif errors.Is(err, http.ErrServerClosed) {\n\t\tfmt.Printf(\"server closed\\n\")\n\t} else if err != nil {\n\t\tfmt.Printf(\"error starting server: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73995340/changing-text-in-html-with-golang-without-affecting-html-tags",
    "body": "s := `<html><head></head><body><h2>Relative URLs</h2>\n<p><a href=\"html_images.asp\">HTML Images</a></p></body></html>`\ndoc, _ := htmlquery.Parse(strings.NewReader(s))\nfmt.Printf(\"Before update \\n%s\\n\", htmlquery.OutputHTML(doc, true))\nnodes := htmlquery.Find(doc, \"/html/body//*\")\nfor _, node := range nodes {\n  if node.FirstChild.DataAtom == 0 {\n    // DataAtom is the atom for Data, or zero if Data is not a known tag name.\n    node.FirstChild.Data = strings.ToUpper(node.FirstChild.Data)\n  }\n}\nfmt.Printf(\"After update \\n%s\\n\", htmlquery.OutputHTML(doc, true))"
  },
  {
    "url": "https://stackoverflow.com/questions/73965697/force-unmarshal-as-interface-instead-of-mapstringinterface",
    "body": "func (nc *NodeConfig) UnmarshalYAML(value *yaml.Node) error {\n\tvar ncu struct {\n\t\tType   string    `yaml:\"type\"`\n\t\tConfig yaml.Node `yaml:\"config\"`\n\t}\n\tvar err error\n\t// unmarshall into a NodeConfigUnmarshaler to detect correct type\n\terr = value.Decode(&ncu)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// now, detect the type and covert it accordingly\n\tnc.Type = ncu.Type\n\tswitch ncu.Type {\n\tcase \"request\":\n\t\tnc.Config = &RequestConfig{}\n\tcase \"log\":\n\t\tnc.Config = &LogConfig{}\n\tdefault:\n\t\treturn fmt.Errorf(\"unknown type %q\", ncu.Type)\n\t}\n\terr = ncu.Config.Decode(nc.Config)\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73965697/force-unmarshal-as-interface-instead-of-mapstringinterface",
    "body": "type RequestConfig struct {\n\tFoo string `yaml:\"foo\"`\n\tBar string `yaml:\"bar\"`\n}\ntype LogConfig struct {\n\tMessage string `yaml:\"message\"`\n}\nfunc main() {\n\tlogSampleYAML := []byte(`\ntype: log\nconfig:\n    message: this is a log message\n`)\n\treqSampleYAML := []byte(`\ntype: request\nconfig:\n    foo: foo value\n    bar: bar value\n`)\n\tfor i, val := range [][]byte{logSampleYAML, reqSampleYAML} {\n\t\tvar nc NodeConfig\n\t\terr := yaml.Unmarshal(val, &nc)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"failed to parse sample %d: %v\\n\", i, err)\n\t\t} else {\n\t\t\tfmt.Printf(\"sample %d type %q (%T) = %+v\\n\", i, nc.Type, nc.Config, nc.Config)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73965697/force-unmarshal-as-interface-instead-of-mapstringinterface",
    "body": "func (nc *NodeConfig) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\tvar ncu struct {\n\t\tType   string     `yaml:\"type\"`\n\t\tConfig RawMessage `yaml:\"config\"`\n\t}\n\tvar err error\n\t// unmarshall into a NodeConfigUnmarshaler to detect correct type\n\terr = unmarshal(&ncu)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// now, detect the type and covert it accordingly\n\tnc.Type = ncu.Type\n\tswitch ncu.Type {\n\tcase \"request\":\n\t\tcfg := &RequestConfig{}\n\t\terr = ncu.Config.Unmarshal(cfg)\n\t\tnc.Config = cfg\n\tcase \"log\":\n\t\tcfg := &LogConfig{}\n\t\terr = ncu.Config.Unmarshal(cfg)\n\t\tnc.Config = cfg\n\tdefault:\n\t\treturn fmt.Errorf(\"unknown type %q\", ncu.Type)\n\t}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73904143/how-to-create-custom-unmarshal-for-2-types-mapstringinterface-and-interfac",
    "body": "type UserItem struct {\n\tUser   string `json:\"user\"`\n\tStatus string `json:\"status\"`\n}\ntype UserList []UserItem\nfunc (ul *UserList) UnmarshalJSON(data []byte) error {\n\tswitch {\n\tcase len(data) == 0 || string(data) == `null`:\n\t\treturn nil\n\tcase data[0] == '[': // assume it's a JSON array\n\t\treturn json.Unmarshal(data, (*[]UserItem)(ul))\n\tcase data[0] == '{': // assume it's a JSON object\n\t\tobj := make(map[string]UserItem)\n\t\tif err := json.Unmarshal(data, &obj); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, v := range obj {\n\t\t\t*ul = append(*ul, v)\n\t\t}\n\t\treturn nil\n\tdefault:\n\t\treturn fmt.Errorf(\"unsupported json type\")\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73855594/how-to-add-a-field-to-struct-golang-using-jen-package-where-fields-depend-on-jso",
    "body": "jen.Var().Id(\"queryOutput\").Op(\"[]\").StructFunc(\n\t\t\tfunc(g *jen.Group) {\n\t\t\t\tg.Add(jen.Id(utils.GetCamelCaseName(XAxisColumn)).String().Tag(map[string]string{\n\t\t\t\t\t\"json\": utils.GetFormattedName(XAxisColumn),\n\t\t\t\t\t\"db\":   utils.GetFormattedName(XAxisColumn),\n\t\t\t\t}))\n\t\t\t\tfor _, yaxis := range YAxisColumn {\n\t\t\t\t\tcolumns := yaxis.(map[string]interface{})\n\t\t\t\t\tcolumnName := columns[\"name\"].(string)\n\t\t\t\t\tc := jen.Id(utils.GetCamelCaseName(columnName)).Int().Tag(map[string]string{\n\t\t\t\t\t\t\"json\": utils.GetFormattedName(columnName),\n\t\t\t\t\t\t\"db\":   utils.GetFormattedName(columnName),\n\t\t\t\t\t})\n\t\t\t\t\tg.Add(c)\n\t\t\t\t}\n\t\t\t},\n\t\t),"
  },
  {
    "url": "https://stackoverflow.com/questions/73843909/remotely-debug-from-a-docker-container-a-chromium-instance-running-on-host",
    "body": "ips, err := net.LookupIP(\"browser-devtools\")\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get browser service ip: %w\", err)\n\t\t}\n\t\tif len(ips) == 0 {\n\t\t\treturn nil, errors.New(\"ip list empty\")\n\t\t}\n\t\tip := ips[0].String()\n\t\tfmt.Printf(\"IP is %q\\n\", ip)\n\t\tresp, err := http.Get(fmt.Sprintf(\"http://%s:9222/json/version/\", ip))\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to get devtools info: %w\", err)\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbody, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed read response body: %w\", err)\n\t\t}\n\t\tprintln(string(body))\n\t\tresponseMapped := make(map[string]interface{})\n\t\tif err = json.Unmarshal(body, &responseMapped); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to unmarshal response: %w\", err)\n\t\t}\n\t\tdebuggerUrl, ok := responseMapped[\"webSocketDebuggerUrl\"].(string)\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"no 'webSocketDebuggerUrl' entry in response map\")\n\t\t}\n\t\tbrowser := rod.New().ControlURL(debuggerUrl)\n\t\tif err := browser.Connect(); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed connect to browser: %w\", err)\n\t\t}\n\t\treturn browser, nil"
  },
  {
    "url": "https://stackoverflow.com/questions/73809274/how-to-disable-javascript-in-chromedp",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.Flag(\"blink-settings\", \"scriptEnabled=false\"),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tctx, cancel = chromedp.NewContext(ctx)\n\tdefer cancel()\n\tvar res []byte\n\terr := chromedp.Run(ctx,\n\t\tchromedp.Navigate(`https://twitter.com/`),\n\t\tchromedp.FullScreenshot(&res, 100),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tos.WriteFile(\"screenshot.png\", res, 0644)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73807928/how-to-validate-band-protocol-network-address",
    "body": "package band_validator\nimport (\n\t\"regexp\"\n\t\"github.com/btcsuite/btcutil/bech32\"\n)\nconst allowed_chars = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\nconst atomRegex = \"^(band)1([\" + allowed_chars + \"]+)$\"\nfunc IsValidAddress(address string) bool {\n\tmatch, _ := regexp.MatchString(atomRegex, address)\n\tif match {\n\t\treturn verifyChecksum(address)\n\t} else {\n\t\treturn false\n\t}\n}\nfunc verifyChecksum(address string) bool {\n\t_, decoded, _ := bech32.Decode(address)\n\tif decoded != nil {\n\t\treturn len(decoded) == 32\n\t} else {\n\t\treturn false\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73797238/how-to-increase-or-decrease-the-number-of-columns-according-to-data-in-table",
    "body": "func InfoTable(headings []string, allData [][]string) {\n\tif len(headings) != len(allData) {\n\t\tpanic(\"Must have a heading per column\")\n\t}\n\ttable := simpletable.New()\n\t// Populate headings (adding one for the row number)\n\theaderCells := make([]*simpletable.Cell, len(headings)+1)\n\theaderCells[0] = &simpletable.Cell{Align: simpletable.AlignCenter, Text: \"#\"}\n\tfor i := range headings {\n\t\theaderCells[i+1] = &simpletable.Cell{Align: simpletable.AlignCenter, Text: headings[i]}\n\t}\n\ttable.Header = &simpletable.Header{\n\t\tCells: headerCells,\n\t}\n\t// Work out number of rows needed\n\tnoOfCols := len(allData)\n\tnoOfRows := 0\n\tfor _, col := range allData {\n\t\tif len(col) > noOfRows {\n\t\t\tnoOfRows = len(col)\n\t\t}\n\t}\n\t// Populate cells (adding row number)\n\tcells := make([][]*simpletable.Cell, noOfRows)\n\tfor rowNo := range cells {\n\t\trow := make([]*simpletable.Cell, noOfCols+1) // add column for row number\n\t\trow[0] = &simpletable.Cell{Align: simpletable.AlignCenter, Text: fmt.Sprintf(\"%d\", rowNo+1)}\n\t\tfor col := 0; col < noOfCols; col++ {\n\t\t\tif len(allData[col]) > rowNo {\n\t\t\t\trow[col+1] = &simpletable.Cell{Align: simpletable.AlignCenter, Text: allData[col][rowNo]}\n\t\t\t} else {\n\t\t\t\trow[col+1] = &simpletable.Cell{Align: simpletable.AlignCenter, Text: \"\"} // Blank cell\n\t\t\t}\n\t\t\tcells[rowNo] = row\n\t\t}\n\t}\n\ttable.Body = &simpletable.Body{Cells: cells}\n\ttable.SetStyle(simpletable.StyleUnicode)\n\ttable.Println()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73709371/pgx-tls-connection-throws-client-cert-invalid-error-for-valid-cert",
    "body": "func configTLS(settings map[string]string, thisHost string, parseConfigOptions ParseConfigOptions) ([]*tls.Config, error) {\n    [...]\n    sslcert := settings[\"sslcert\"]\n    sslkey := settings[\"sslkey\"]\n    [...]\n\tif sslcert != \"\" && sslkey != \"\" {\n        [...]\n        certfile, err := ioutil.ReadFile(sslcert)\n        if err != nil {\n            return nil, fmt.Errorf(\"unable to read cert: %w\", err)\n        }\n        cert, err := tls.X509KeyPair(certfile, pemKey)\n        if err != nil {\n            return nil, fmt.Errorf(\"unable to load cert: %w\", err)\n        }\n        tlsConfig.Certificates = []tls.Certificate{cert}"
  },
  {
    "url": "https://stackoverflow.com/questions/73643263/read-byte-slice-into-struct-with-variable-size-members",
    "body": "type EncryptionSDK_Header_v1 struct {\n\tVersion     byte\n\tType        byte\n\tAlgorithmID uint16\n\tMessageID   [16]byte\n\tAAD         AAD\n\tDataKeys    []EncryptedDataKey\n\tContentType byte\n\tReserved    [4]byte\n\tIVLength    byte   //Maybe a uint8?\n\tFrameLength uint32 //A little-endian uint32\n\tHeaderAuth  []byte\n}\nfunc (h *EncryptionSDK_Header_v1) ReadFrom(r io.Reader) error {\n\tvar err error\n\tif err = binary.Read(r, binary.LittleEndian, &h.Version); err != nil {\n\t\treturn err\n\t}\n\tif err = binary.Read(r, binary.LittleEndian, &h.Type); err != nil {\n\t\treturn err\n\t}\n\tif err = binary.Read(r, binary.LittleEndian, &h.AlgorithmID); err != nil {\n\t\treturn err\n\t}\n\tif _, err = io.ReadFull(r, h.MessageID[:]); err != nil {\n\t\treturn err\n\t}\n\tvar aadLen uint16\n\tif err = binary.Read(r, binary.LittleEndian, &aadLen); err != nil {\n\t\treturn err\n\t}\n\th.AAD = make(AAD)\n\tif aadLen > 0 {\n\t\taadBuf := make([]byte, aadLen)\n\t\tif _, err = io.ReadFull(r, aadBuf); err != nil {\n\t\t\treturn err\n\t\t}\n\t\taadReader := bytes.NewReader(aadBuf)\n\t\tif err = h.AAD.ReadFrom(aadReader); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tvar keyCount uint16\n\tif err = binary.Read(r, binary.LittleEndian, keyCount); err != nil {\n\t\treturn err\n\t}\n\th.DataKeys = make([]EncryptedDataKey, keyCount)\n\tfor i := uint16(0); i < keyCount; i++ {\n\t\tif err = h.DataKeys[i].ReadFrom(r); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tif err = binary.Read(r, binary.LittleEndian, &h.ContentType); err != nil {\n\t\treturn err\n\t}\n\tif _, err = io.ReadFull(r, h.Reserved[:]); err != nil {\n\t\treturn err\n\t}\n\tif err = binary.Read(r, binary.LittleEndian, &h.IVLength); err != nil {\n\t\treturn err\n\t}\n\tif err = binary.Read(r, binary.LittleEndian, &h.FrameLength); err != nil {\n\t\treturn err\n\t}\n\t// Stopped at Header Authentication\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73611725/golang-reflection-get-actual-value-from-structfield",
    "body": "package main\nimport (\n\t\"log\"\n\t\"reflect\"\n)\ntype Root struct {\n\tOne Nested\n\tTwo Nested\n}\ntype Nested struct {\n\ti int\n\ts string\n}\nfunc main() {\n\tr := Root{\n\t\tOne: Nested{i: 1, s: \"one\"},\n\t\tTwo: Nested{i: 2, s: \"two\"},\n\t}\n\trv := reflect.Indirect(reflect.ValueOf(&r))\n\trt := rv.Type()\n\tfor i, limit := 0, rt.NumField(); i < limit; i++ {\n\t\tfld := rt.Field(i)\n\t\tv := rv.FieldByName(fld.Name).Addr().Interface()\n\t\tnv, ok := v.(*Nested)\n\t\tif !ok {\n\t\t\tlog.Fatalf(\"field is type %T not Nested\", v)\n\t\t}\n\t\tlog.Printf(\"field name: %s, type: %T, i: %v, s: %v\", fld.Name, v, nv.i, nv.s)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73569349/ssh-from-golang-code-successfully-but-hangs",
    "body": "package main\nimport (\n    \"log\"\n    \"golang.org/x/crypto/ssh\"\n    \"golang.org/x/crypto/ssh/knownhosts\"\n)\nfunc main() {\n    // ssh config\n    hostKeyCallback, err := knownhosts.New(\"/home/debian11/.ssh/known_hosts\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    config := &ssh.ClientConfig{\n        User: \"ubuntu\",\n        Auth: []ssh.AuthMethod{\n            ssh.Password(\"password\"),\n        },\n        HostKeyCallback: hostKeyCallback,\n    }\n    // connect to ssh server\n    conn, err := ssh.Dial(\"tcp\", \"192.169.0.1:22\", config)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer conn.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73568861/how-to-pass-a-variadic-function-with-different-type-of-arguments-as-a-value-in-g",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Action func() error\nfunc ActionType(f Action) reflect.Type {\n\t// call f to perform the action\n\terr := f()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\t// do other things ...\n\treturn reflect.TypeOf(f)\n}\n// this is essentially the same since Action's underlying type\n// is \"func() error\"\nfunc ActionType2(f func() error) reflect.Type { return reflect.TypeOf(f) }\nfunc main() {\n\tmsg := \"hello world\"\n\tnumber := 42\n\taction1 := func() error {\n\t\tfmt.Println(msg)\n\t\treturn nil\n\t}\n\taction2 := func() error {\n\t\tnumber *= 2\n\t\treturn nil\n\t}\n\tfmt.Println(ActionType(action1))\n\tfmt.Println(ActionType(action2))\n\tfmt.Println(ActionType2(action2)) // doesn't modify number\n\tfmt.Println(number)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73530814/golang-mongodb-search-document",
    "body": "`golang\nfunc (r *Mongo) queryBuilderFilter(query *Query) bson.M {\n\tvar andFilters []bson.M\n\tif query.Query != \"\" {\n\t\torFilters := []bson.M{\n\t\t\t{\n\t\t\t\t\"username\": bson.M{\"$regex\": primitive.Regex{Pattern: \"^\" + query.Query + \"*\", Options: \"i\"}},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"firstname\": bson.M{\"$regex\": primitive.Regex{Pattern: \"^\" + query.Query + \"*\", Options: \"i\"}},\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"lastname\": bson.M{\"$regex\": primitive.Regex{Pattern: \"^\" + query.Query + \"*\", Options: \"i\"}},\n\t\t\t},\n\t\t}\n\t\tandFilters = append(andFilters, bson.M{\"$or\": orFilters})\n\t}\n\tif len(andFilters) == 0 {\n\t\t// Handle empty and, since there must be one item.\n\t\treturn bson.M{}\n\t}\n\treturn bson.M{\"$and\": andFilters}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73498953/best-practice-to-get-nested-result-json",
    "body": "query := \"select id, text, user_id from questions limit 10 offset 10\"\nrows, err, := db.QueryCtx(ctx, query)\n//handel error\nvar questions []Question\nvar userIds []string\nquestionIds := make([]int, 0, 10) // because limit is 10\nmapQuestionIdx := make(map[int]int)\nidx := 0\nfor rows.Next() {\n  var q Question\n  var userId string\n  //scan to `question` and `userId`\n  questions = append(questions, q)\n  userIds = append(questions, userId)\n  questionIds = append(questionIds, q.ID)\n  mapQuestionIdx[q.ID] = idx\n  idx++\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73498953/best-practice-to-get-nested-result-json",
    "body": "// add select question_id\nquery = \"select q.id question_id, answers.id, answers.text, u.id, u.name from answers join questions as q on q.id=answers.question_id join users as u on u.id=answers.user_id where answers.questions_id in ($1)\"\n  rowAnswer, err := db.QueryCtx(ctx, query, questionIds) // questionIds from above\n  //handle error\n  for rowAnswer.Next(){\n    var answer Answer\n    var question_id int\n    //scan to answer and question_id\n    i := mapQuestionIdx[question_id]\n\n    questions[i].User.Id = users[i].Id\n    questions[i].User.Name = users[i].Name\n    if questions[i].Answer == nil {\n      questions[i].Answer = make([]answer, 0)\n    }\n    questions[i].Answer = append(questions[i].Answer, answer)\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/73436055/how-to-bind-openssl-c-binding-via-cgo-in-golang",
    "body": "go run .\n2022/08/21 22:19:14 Hello, from GO!\nJwkSecret { priv_key: \"--\", pub_key: \"--\" }\nEncrypted JWT: eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiZXBrIjp7Imt0eSI6Ik9LUCIsImNydiI6Ilg0NDgiLCJ4IjoiTmdjRlE4bFY3WWtjUWMtNXR6RlhuUnZvcEI0NlZVTnhPWHFKajgwSzNLQnR4YWh1al9zM3ZNRVY4WVA0cnVvNkttS0FNR0FCN1M4In0sImFsZyI6IkVDREgtRVMifQ..q9BgTEh2UPjiSgLNfu0BTw.rLDyrLQYwtWpi4Qyo43csmERW-VNXowQQBPmqu7zj7U.epX8cMdNA9o9xzMTVdaxJALdtgruVyox5JaPYxKpwZ8\nSome(\"eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiZXBrIjp7Imt0eSI6Ik9LUCIsImNydiI6Ilg0NDgiLCJ4IjoiTmdjRlE4bFY3WWtjUWMtNXR6RlhuUnZvcEI0NlZVTnhPWHFKajgwSzNLQnR4YWh1al9zM3ZNRVY4WVA0cnVvNkttS0FNR0FCN1M4In0sImFsZyI6IkVDREgtRVMifQ..q9BgTEh2UPjiSgLNfu0BTw.rLDyrLQYwtWpi4Qyo43csmERW-VNXowQQBPmqu7zj7U.epX8cMdNA9o9xzMTVdaxJALdtgruVyox5JaPYxKpwZ8\")"
  },
  {
    "url": "https://stackoverflow.com/questions/73405757/how-to-specify-a-docker-containers-network-in-go-sdk",
    "body": "resp, err := m.DockerManager.Client.ContainerCreate(ctx,\n\t\t&container.Config{\n\t\t\tImage: kafka,\n\t\t\tEnv:   []string{\"KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\", \"ALLOW_PLAINTEXT_LISTENER=yes\"},\n\t\t},\n\t\t&container.HostConfig{\n\t\t\tPortBindings: nat.PortMap{nat.Port(\"9092\"): []nat.PortBinding{{HostIP: \"0.0.0.0\", HostPort: \"9092\"}}},\n\t\t\tMounts:       []mount.Mount{{Type: mount.TypeVolume, Source: \"kafka_data\", Target: \"/bitnami\"}},\n\t\t},\n\t\t&network.NetworkingConfig{EndpointsConfig: map[string]*network.EndpointSettings{\"orchestration\": {NetworkID: \"orchestration\"}}},\n\t\tnil,\n\t\t\"kafka\",\n\t)"
  },
  {
    "url": "https://stackoverflow.com/questions/73371538/helper-func-to-assign-respective-data-to-its-key",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Parent struct {\n\tA ChildA\n\tB ChildB\n\tC ChildC\n\tD ChildD\n}\ntype ChildA struct {\n\tx string\n}\ntype ChildB struct {\n\tx string\n}\ntype ChildC struct {\n}\ntype ChildD struct {\n}\nfunc helper(childs ...any) (Parent, error) {\n\tcheck := make(map[string]int)\n\tvar p Parent\n\tfor _, v := range childs {\n\t\tif v == nil {\n\t\t\tcontinue\n\t\t}\n\t\tchildType := reflect.TypeOf(v)\n\t\tcheck[childType.String()]++\n\t\tif check[childType.String()] > 1 {\n\t\t\treturn p, errors.New(\"child must be unique\")\n\t\t}\n\t\tswitch childType.String() {\n\t\tcase \"main.ChildA\":\n\t\t\tp.A = v.(ChildA)\n\t\tcase \"main.ChildB\":\n\t\t\tp.B = v.(ChildB)\n\t\tcase \"main.ChildC\":\n\t\t\tp.C = v.(ChildC)\n\t\tcase \"main.ChildD\":\n\t\t\tp.D = v.(ChildD)\n\t\t}\n\t}\n\treturn p, nil\n}\nfunc main() {\n\tp, err := helper(ChildA{\"hello\"}, ChildB{\"world\"}, ChildC{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(p)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73349434/unsupported-relations-for-schema-has-many-uuid-without-gorm-model",
    "body": "type RecordingServerBase struct {\n\tName    string   `json:\"name\" gorm:\"size:128\"`\n\tAddress string   `json:\"address\" gorm:\"size:16\"`\n\tCameras []Camera `json:\"cameras\" gorm:\"foreignKey:RecordingServerGuid\"`\n}\ntype RecordingServer struct {\n\tGuid uuid.UUID `json:\"guid\" format:\"uuid\" gorm:\"type:uuid;primaryKey\"`\n\tRecordingServerBase\n}\ntype CameraBase struct {\n\tName                string    `json:\"name\" gorm:\"size:128\"`\n\tAddress             string    `json:\"address\" gorm:\"size:16\"`\n\tUsername            string    `json:\"username\" gorm:\"size:32\"`\n\tPassword            string    `json:\"password\" gorm:\"size:64\"`\n\tRecordingServerGuid uuid.UUID `gorm:\"type:uuid\"`\n}\ntype Camera struct {\n\tGuid uuid.UUID `json:\"guid\" format:\"uuid\" gorm:\"type:uuid;primaryKey\"`\n\tCameraBase\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73284567/mongodb-aggregation-pipeline-in-golang-for-divide-subtract",
    "body": "query := []bson.M{\n  {\n    \"$match\" : bson.M{\n      \"attendanceDate\" : \"07/26/2022\",\n    },\n  },\n  {\n    \"$unwind\" : \"$history\",\n  },\n  {\n    \"$set\" : bson.M{\n      \"timeDiff\" : bson.M{\n        \"$divide\" : bson.A{\n          {\n            \"$subtract\" : bson.M{\n              \"$history.endTime\",\n              \"$history.startTime\",\n            },\n          },\n          60000.0,\n        },\n      },\n    },\n  },\n  {\n    \"$group\" : bson.M{\n      \"_id\" : bson.M{\n        \"status\" : \"$history.status\",\n        \"displayName\" : \"$displayName\",\n      },\n      \"duration\" : bson.M{\n        \"$sum\" : \"$timeDiff\",\n      },\n    },\n  },\n  {\n    \"$group\" : bson.M{\n      \"_id\" : \"$_id.displayName\",\n      \"durations\" : bson.M{\n        \"$push\" : bson.M{\n          \"key\" : \"$_id.status\",\n          \"value\" : \"$duration\",\n        },\n      },\n    },\n  },\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73228045/golang-implementation-of-dining-philosophers-variant-problem",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n\t\"golang.org/x/exp/slices\"\n)\nconst (\n\tnumPhilo       = 5\n\teatTimes       = 3\n\tnumEatingPhilo = 2\n)\ntype eatRequest struct {\n\twho            int         // Who is making the request\n\tfinishedFnChan chan func() // When approves a response will be sent on this channel with a function to call when done\n}\n// simulateHost - the host must provide permission before a philosopher can eat\n// Exits when channel closed\nfunc simulateHost(requestChannel <-chan eatRequest) {\n\tawaitRequest := requestChannel\n\tfinishedChan := make(chan struct {\n\t\twho  int\n\t\tdone chan struct{}\n\t})\n\tvar whoEating []int // tracks who is currently eating\n\tfor {\n\t\tselect {\n\t\tcase request, ok := <-awaitRequest:\n\t\t\tif !ok {\n\t\t\t\treturn // Closed channel means that we are done (finishedChan is guaranteed to be empty)\n\t\t\t}\n\t\t\t// Sanity check - confirm that philosopher is not being greedy! (should never happen)\n\t\t\tif slices.Index(whoEating, request.who) != -1 {\n\t\t\t\tpanic(\"Multiple requests from same philosopher\")\n\t\t\t}\n\t\t\twhoEating = append(whoEating, request.who) // New request always goes at the end\n\t\t\tfmt.Printf(\"%d started eating (currently eating %v)\\n\", request.who, whoEating)\n\t\t\t// Let philosopher know and provide means for them to tell us when done\n\t\t\trequest.finishedFnChan <- func() {\n\t\t\t\td := make(chan struct{})\n\t\t\t\tfinishedChan <- struct {\n\t\t\t\t\twho  int\n\t\t\t\t\tdone chan struct{}\n\t\t\t\t}{who: request.who, done: d}\n\t\t\t\t<-d // Wait until request has been processed (ensure we should never have two active requests from one philosopher)\n\t\t\t}\n\t\tcase fin := <-finishedChan:\n\t\t\tidx := slices.Index(whoEating, fin.who)\n\t\t\tif idx == -1 {\n\t\t\t\tpanic(\"philosopher stopped eating multiple times!\")\n\t\t\t}\n\t\t\twhoEating = append(whoEating[:idx], whoEating[idx+1:]...) // delete the element\n\t\t\tfmt.Printf(\"%d completed eating (currently eating %v)\\n\", fin.who, whoEating)\n\t\t\tclose(fin.done)\n\t\t}\n\t\t// There has been a change in the number of philosopher's eating\n\t\tif len(whoEating) < numEatingPhilo {\n\t\t\tawaitRequest = requestChannel\n\t\t} else {\n\t\t\tawaitRequest = nil // Ignore new eat requests until a philosopher finishes (nil channel will never be selected)\n\t\t}\n\t}\n}\n// ChopS represents a single chopstick\ntype ChopS struct {\n\tmu  sync.Mutex\n\tidx int // Including the index can make debugging simpler\n}\n// philosopher simulates a Philosopher (brain in a vat!)\nfunc philosopher(philNum int, leftCS, rightCS *ChopS, requestToEat chan<- eatRequest) {\n\tfor numEat := 0; numEat < eatTimes; numEat++ {\n\t\t// once the philosopher intends to eat, lock the corresponding chopsticks\n\t\tfor {\n\t\t\tleftCS.mu.Lock()\n\t\t\t// Attempt to get the right Chopstick - if someone else has it we replace the left chopstick and try\n\t\t\t// again (in order to avoid deadlocks)\n\t\t\tif rightCS.mu.TryLock() {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tleftCS.mu.Unlock()\n\t\t}\n\t\t// We have the chopsticks but need the hosts permission\n\t\tffc := make(chan func()) // when accepted we will receive a function to call when done eating\n\t\trequestToEat <- eatRequest{\n\t\t\twho:            philNum,\n\t\t\tfinishedFnChan: ffc,\n\t\t}\n\t\tdoneEating := <-ffc\n\t\tfmt.Printf(\"philosopher %d starting to eat (%d feed)\\n\", philNum, numEat)\n\t\ttime.Sleep(time.Millisecond * time.Duration(rand.Intn(200))) // Eating takes a random amount of time\n\t\tfmt.Printf(\"philosopher %d finished eating (%d feed)\\n\", philNum, numEat)\n\t\trightCS.mu.Unlock()\n\t\tleftCS.mu.Unlock()\n\t\tdoneEating() // Tell host that we have finished eating\n\t}\n\tfmt.Printf(\"philosopher %d is full\\n\", philNum)\n}\nfunc main() {\n\tCSticks := make([]*ChopS, numPhilo)\n\tfor i := 0; i < numPhilo; i++ {\n\t\tCSticks[i] = &ChopS{idx: i}\n\t}\n\trequestChannel := make(chan eatRequest)\n\tvar wg sync.WaitGroup\n\twg.Add(numPhilo)\n\tfor i := 0; i < numPhilo; i++ {\n\t\tgo func(philNo int) {\n\t\t\tphilosopher(philNo, CSticks[philNo-1], CSticks[philNo%numPhilo], requestChannel)\n\t\t\twg.Done()\n\t\t}(i + 1)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(requestChannel)\n\t}()\n\tsimulateHost(requestChannel)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73138855/how-can-i-get-pythons-code-coloring-for-go-code-in-vs-code",
    "body": "// Just an example\n    \"editor.tokenColorCustomizations\": {\n        \"[Abyss]\": {\n            \"textMateRules\": [\n                {\n                    \"scope\": \"meta.function-call\",\n                    \"settings\": {\n                        \"foreground\": \"#ffffff\"\n                    }\n                },\n                {\n                    \"scope\": \"entity.name.type, entity.name.class, entity.name.namespace, entity.name.scope-resolution\",\n                    \"settings\": {\n                        \"fontStyle\": \"\"\n                    }\n                },\n            ]\n        }\n    },"
  },
  {
    "url": "https://stackoverflow.com/questions/73087262/how-to-fix-unsupported-relations-for-schema-error-with-gorm-preload",
    "body": "type Ticker struct {\n    gorm.Model\n    ShopID              uuid.UUID  `json:\"shopID\"`\n    Archived            bool       `json:\"archived\"`\n    Services            []string   `json:\"services\"`\n    Price               int        `json:\"price\"`\n    Location            int        `json:\"location\"`\n    Checkedout          bool       `json:\"checkedout\"`\n    TechnicianID        uuid.UUID  `json:\"technicianId\"`\n    Technician          Technician `json:\"technician\"`\n    TechnicianPartnerID *uuid.UUID `json:\"technicianPartnerId\"`\n    LastUpdatedBy       uuid.UUID  `json:\"lastupdatedBy\"`\n}\ntype Technician struct {\n    gorm.Model\n    ShopID    uuid.UUID `json:\"shopID\"`\n    Name      string    `json:\"name\"`\n    Active    bool      `json:\"active\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72972742/having-trouble-with-persistent-data-in-struct-due-to-pointer-how-can-i-grab-mos",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n)\ntype TravelHandler struct {\n\tData interface{} // the preloaded data you need to serve http\n}\nfunc (th TravelHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\terr := json.NewEncoder(w).Encode(th.Data)\n\tif err != nil {\n\t\thttp.Error(w, \"could not encode data\", 500)\n\t}\n}\nfunc createTravelHandler() *TravelHandler {\n\t// populate travel handler\n\treturn &TravelHandler{}\n}\nfunc main() {\n\tth := createTravelHandler() // no mutable global, return the handler from a function (or pipe it through several functions)\n\terr := http.ListenAndServe(\"localhost:3000\", th)\n\tlog.Println(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72906721/golang-tailing-utf16le-windows-log-file",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"time\"\n\t\"golang.org/x/text/encoding/unicode\"\n)\nfunc main() {\n\tfile, err := newTailReader(\"./Local_20220707_170827_1006197774.txt\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer file.Close()\n\tutf := unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM)\n\treader := bufio.NewReader(utf.NewDecoder().Reader(file))\n\tfor {\n\t\tline, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(string(line))\n\t}\n}\n// Code copied from https://stackoverflow.com/a/31122253/11810946\n// and modified to output contents of file before beginning to 'tail'\ntype tailReader struct {\n\tio.ReadCloser\n}\nfunc (t tailReader) Read(b []byte) (int, error) {\n\tfor {\n\t\tn, err := t.ReadCloser.Read(b)\n\t\tif n > 0 {\n\t\t\treturn n, nil\n\t\t} else if err != io.EOF {\n\t\t\treturn n, err\n\t\t}\n\t\ttime.Sleep(10 * time.Millisecond)\n\t}\n}\nfunc newTailReader(fileName string) (tailReader, error) {\n\tf, err := os.Open(fileName)\n\tif err != nil {\n\t\treturn tailReader{}, err\n\t}\n\treturn tailReader{f}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72897720/when-using-headobject-in-aws-sdk-2-for-go-why-it-gives-undefined",
    "body": "package main\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nvar (\n\tbucketName      string\n\tobjectPrefix    string\n\tobjectDelimiter string\n\tmaxKeys         int\n)\nfunc init() {\n\tflag.StringVar(&bucketName, \"bucket\", \"\", \"The `name` of the S3 bucket to list objects from.\")\n\tflag.StringVar(&objectPrefix, \"prefix\", \"\", \"The optional `object prefix` of the S3 Object keys to list.\")\n\tflag.StringVar(&objectDelimiter, \"delimiter\", \"\",\n\t\t\"The optional `object key delimiter` used by S3 List objects to group object keys.\")\n\tflag.IntVar(&maxKeys, \"max-keys\", 0,\n\t\t\"The maximum number of `keys per page` to retrieve at once.\")\n}\n// Lists all objects in a bucket using pagination\nfunc main() {\n\tflag.Parse()\n\tif len(bucketName) == 0 {\n\t\tflag.PrintDefaults()\n\t\tlog.Fatalf(\"invalid parameters, bucket name required\")\n\t}\n\t// Load the SDK's configuration from environment and shared config, and\n\t// create the client with this.\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to load SDK configuration, %v\", err)\n\t}\n\tclient := s3.NewFromConfig(cfg)\n\t// Set the parameters based on the CLI flag inputs.\n\tparams := &s3.ListObjectsV2Input{\n\t\tBucket: &bucketName,\n\t}\n\tif len(objectPrefix) != 0 {\n\t\tparams.Prefix = &objectPrefix\n\t}\n\tif len(objectDelimiter) != 0 {\n\t\tparams.Delimiter = &objectDelimiter\n\t}\n\t// Create the Paginator for the ListObjectsV2 operation.\n\tp := s3.NewListObjectsV2Paginator(client, params, func(o *s3.ListObjectsV2PaginatorOptions) {\n\t\tif v := int32(maxKeys); v != 0 {\n\t\t\to.Limit = v\n\t\t}\n\t})\n\t// Iterate through the S3 object pages, printing each object returned.\n\tvar i int\n\tlog.Println(\"Objects:\")\n\tfor p.HasMorePages() {\n\t\ti++\n\t\t// Next Page takes a new context for each page retrieval. This is where\n\t\t// you could add timeouts or deadlines.\n\t\tpage, err := p.NextPage(context.TODO())\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to get page %v, %v\", i, err)\n\t\t}\n\t\t// Log the objects found\n\t\t// Headobject function is called\n\t\tfor _, obj := range page.Contents {\n\t\t\tfmt.Println(\"Object:\", *obj.Key)\n\t\t\tOpHeadObject(client, bucketName, *obj.Key)\n\n\t\t}\n\t}\n}\nfunc OpHeadObject(sess *s3.Client, bucketName, objectName string) {\n\tinput := &s3.HeadObjectInput{\n\t\tBucket: &bucketName,\n\t\tKey:    &objectName,\n\t}\n\tresp, err := sess.HeadObject(context.TODO(), input)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n        fmt.Println(resp.StorageClass) // that you want.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72829742/i-have-two-go-functions-that-id-expect-to-behave-the-same-but-give-different-r",
    "body": "func (tree *BST) InOrderRecursive(values []int) []int {\n    curr := tree\n    if curr.left != nil {\n        curr = curr.left\n        values = curr.InOrderRecursive(values)\n    }\n    // curr here will take on the node's left child value if\n    // it's not nil (bug).\n    values = append(values, curr.value)\n    // That issue will cascade to here as well (if the OG curr.left\n    // != nil), we're now checking the left child node's right child.\n    if curr.right != nil {\n        curr = curr.right\n        values = curr.InOrderRecursive(values)\n    }\n    // The result of the right recursive call is not appended to the\n    // `values` list. (bug)\n    return values\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72811192/is-go-pprof-random-pick-one-thread-receiving-signal",
    "body": "// minitSignalStack is called when initializing a new m to set the\n// alternate signal stack. If the alternate signal stack is not set\n// for the thread (the normal case) then set the alternate signal\n// stack to the gsignal stack. If the alternate signal stack is set\n// for the thread (the case when a non-Go thread sets the alternate\n// signal stack and then calls a Go function) then set the gsignal\n// stack to the alternate signal stack. We also set the alternate\n// signal stack to the gsignal stack if cgo is not used (regardless\n// of whether it is already set). Record which choice was made in\n// newSigstack, so that it can be undone in unminit.\nfunc minitSignalStack() {"
  },
  {
    "url": "https://stackoverflow.com/questions/72809902/how-to-disable-transparent-huge-page-in-golang-code",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"syscall\"\n)\nconst (\n\t// https://filippo.io/linux-syscall-table/\n\tPRCTL_SYSCALL = 157\n\t// see /usr/include/linux/prctl.h\n\tPR_SET_THP_DISABLE = 41\n\tPR_GET_THP_DISABLE = 42\n)\nfunc disableTHP() {\n\t_, _, errno := syscall.RawSyscall6(uintptr(PRCTL_SYSCALL), uintptr(PR_SET_THP_DISABLE), uintptr(1), 0, 0, 0, 0)\n\tif errno != 0 {\n\t\tlog.Fatalf(\"failed to disable THP: %v\", errno)\n\t}\n}\nfunc isTHPDisabled() bool {\n\ts, _, errno := syscall.RawSyscall6(uintptr(PRCTL_SYSCALL), uintptr(PR_GET_THP_DISABLE), 0, 0, 0, 0, 0)\n\tif errno != 0 {\n\t\tlog.Fatalf(\"failed get THP disable status: %v\", errno)\n\t}\n\treturn s == 1\n}\nfunc main() {\n\tif os.Getenv(\"X_IN_CHILD_PROC\") == \"\" {\n\t\truntime.LockOSThread()\n\t\tdisableTHP()\n\t\tcmd := exec.Command(os.Args[0], os.Args...)\n\t\tcmd.Env = append(os.Environ(), fmt.Sprintf(\"X_IN_CHILD_PROC=yes\"))\n\t\tcmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr\n\t\t_ = cmd.Run() // err discarded\n\t\tos.Exit(cmd.ProcessState.ExitCode())\n\t}\n\t// code below has THP disabled\n\tif !isTHPDisabled() { // sanity check\n\t\tlog.Fatal(\"THP is somehow not disabled\")\n\t}\n\tfmt.Println(\"THP is disabled\")\n\tfmt.Println(\"hello world\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72806808/golang-json-cannot-unmarshal-array-into-go-value-of-type-string",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\ntype name struct {\n\tNew []string\n\tOld string\n}\ntype event struct {\n\tType string `json:\"type\"`\n\tName name   `json:\"name\"`\n}\nfunc do(j string) {\n\tvar e event\n\terr := json.Unmarshal([]byte(j), &e)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to unmarshall %s: %s\\n\", j, err)\n\t\treturn\n\t}\n\tfmt.Printf(\"%v\\n\", e)\n}\nfunc (n *name) UnmarshalJSON(text []byte) error {\n\tt := strings.TrimSpace(string(text))\n\tif strings.HasPrefix(t, \"[\") {\n\t\treturn json.Unmarshal(text, &n.New)\n\t}\n\treturn json.Unmarshal(text, &n.Old)\n}\nfunc main() {\n\tjsonstring := `{\"type\":\"a\",\"name\":\"rodney\"}`\n\tjsonarray := `{\"type\":\"a\",\"name\":[\"rodney\",\"dangerfield\"]}`\n\tdo(jsonstring)\n\tdo(jsonarray)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72771038/getting-file-content-into-a-multidimensional-string-var",
    "body": "type Information struct {\n\tInfo []Info `json:\"info\"`\n}\ntype Info struct {\n\tType string `json:\"type\"`\n\tNews []New  `json:\"news\"` // Here should be a slice define.\n}\ntype New struct {\n\tName string `json:\"name\"`\n\tRead bool   `json:\"read\"`\n}\nfunc ReadFile(file_name string) *Information {\n\tjsonFile, err := os.Open(file_name)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"Successfully Opened file_name.json\")\n\tdefer jsonFile.Close()\n\tbyteValue, _ := ioutil.ReadAll(jsonFile)\n\tvar infor Information\n\tjson.Unmarshal(byteValue, &infor)\n\treturn &infor\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72719195/how-to-create-a-new-group-in-azure-ad-using-go-sdk",
    "body": "//THE GO SDK IS IN PREVIEW. NON-PRODUCTION USE ONLY\ngraphClient := msgraphsdk.NewGraphServiceClient(requestAdapter)\nrequestBody := msgraphsdk.NewGroup()\ndescription := \"Example of Security Group\"\nrequestBody.SetDescription(&description)\ndisplayName := \"Sri Security\"\nrequestBody.SetDisplayName(&displayName)\nrequestBody.SetGroupTypes( []string {\n}\nmailEnabled := false\nrequestBody.SetMailEnabled(&mailEnabled)\nmailNickname := \"test\"\nrequestBody.SetMailNickname(&mailNickname)\nsecurityEnabled := true\nrequestBody.SetSecurityEnabled(&securityEnabled)\nresult, err := graphClient.Groups().Post(requestBody)"
  },
  {
    "url": "https://stackoverflow.com/questions/72705456/connecting-a-golang-code-with-browser-based-vanilla-js",
    "body": "http.HandleFunc(\"/myrpc/\", func(w http.ResponseWriter, r *http.Request) {\n\t// check\n\t{\n\t\t// check Method\n\t\tif r.Method != http.MethodPost {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\t// check Content-Type\n\t\t// check Auth\n\t\t// ...\n\t}\n\t// Get user input\n\tvar req RPCRequest\n\t{\n\t\t_ = json.NewDecoder(r.Body).Decode(&req)\n\t}\n\tconn, _ := rpc.Dial(\"tcp\", \"127.0.0.1:12345\")\n\tdefer conn.Close()\n\tvar reply string\n\tif err := conn.Call(req.Method, req.Params, &reply); err != nil { // <--\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\t// handle response\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n\tresultBytes, _ := json.Marshal(struct {\n\t\tMsg string\n\t}{\n\t\treply,\n\t})\n\n\t_, _ = fmt.Fprintln(w, string(resultBytes))\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/72705456/connecting-a-golang-code-with-browser-based-vanilla-js",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/rpc\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"strings\"\n\t\"time\"\n)\ntype RPCRequest struct {\n\tMethod string\n\tParams json.RawMessage\n\tId     int\n}\ntype Arith int\nfunc (t *Arith) Multiply(args *json.RawMessage, reply *string) error {\n\tpara := struct {\n\t\tA int `json:\"a\"`\n\t\tB int `json:\"b\"`\n\t}{}\n\tif err := json.Unmarshal(*args, &para); err != nil {\n\t\treturn err\n\t}\n\t*reply = fmt.Sprintf(\"%d\", para.A*para.B)\n\treturn nil\n}\nfunc (t *Arith) unMarshal(args *json.RawMessage) (*struct{ A, B int }, error) {\n\toutput := new(struct{ A, B int })\n\terr := json.Unmarshal(*args, output)\n\treturn output, err\n}\nfunc (t *Arith) Add(args *json.RawMessage, reply *string) error {\n\tpara, err := t.unMarshal(args)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*reply = fmt.Sprintf(\"%d\", para.A+para.B)\n\treturn nil\n}\nfunc NewRPCServer() (listener net.Listener, runFunc func()) {\n\trpcServer := rpc.NewServer()\n\t// rpcServer.RegisterName(\"Arith\", new(Arith)) // same as below\n\tif err := rpcServer.Register(new(Arith)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlistener, _ = net.Listen(\"tcp\", \"127.0.0.1:0\")\n\tlog.Println(\"[RPC SERVER]\", listener.Addr().String())\n\trunFunc = func() {\n\t\tfor {\n\t\t\tconn, err := listener.Accept()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"[listener.Accept]\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tgo func(conn net.Conn) {\n\t\t\t\tdefer func() {\n\t\t\t\t\tif err = conn.Close(); err != nil && !strings.Contains(err.Error(), \"use of closed network connection\") {\n\t\t\t\t\t\tlog.Println(err)\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\t_ = conn.SetReadDeadline(time.Now().Add(2 * time.Second))\n\t\t\t\trpcServer.ServeConn(conn)\n\t\t\t}(conn)\n\t\t}\n\t}\n\treturn listener, runFunc\n}\nvar RPCServerAddr *string\nfunc main() {\n\tlistenerRPC, rpcServerRunFunc := NewRPCServer()\n\tdefer func() {\n\t\t_ = listenerRPC.Close()\n\t}()\n\tgo rpcServerRunFunc()\n\tRPCServerAddr = new(string)\n\t*RPCServerAddr = listenerRPC.Addr().String()\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/myrpc/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost {\n\t\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\t\treturn\n\t\t}\n\t\tif r.Header.Get(\"Content-Type\") != \"application/json\" {\n\t\t\thttp.Error(w, \"content type error\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tvar req RPCRequest\n\t\tif err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tconn, err := rpc.Dial(\"tcp\", *RPCServerAddr)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tdefer func() {\n\t\t\t_ = conn.Close()\n\t\t}()\n\t\tvar reply string\n\t\tif err = conn.Call(req.Method, req.Params, &reply); err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\t// handle response\n\t\tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\tresultBytes, _ := json.Marshal(struct {\n\t\t\tMsg   string\n\t\t}{\n\t\t\treply,\n\t\t})\n\t\tif _, err = fmt.Fprintln(w, string(resultBytes)); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t})\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thttp.ServeFile(w, r, \"index.html\")\n\t})\n\tserver := http.Server{Addr: \"127.0.0.1:0\", Handler: mux}\n\tlistener, _ := net.Listen(\"tcp\", server.Addr)\n\tlog.Println(\"[Addr]:\", listener.Addr())\n\tif runtime.GOOS == \"windows\" {\n\t\t// help you open the browser automatically.\n\t\tgo func() {\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tif err := exec.Command(\"rundll32\", \"url.dll,FileProtocolHandler\", \"http://\"+listener.Addr().String()).Start(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\t}\n\t_ = server.Serve(listener)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72705456/connecting-a-golang-code-with-browser-based-vanilla-js",
    "body": "<h2>TEST RPC</h2>\n<div></div>\n<script type=\"module\">\n  async function rpcCall(method, params) {\n    return fetch(location.protocol + \"//\" + location.hostname + (location.port ? \":\" + location.port : \"\") +\n      \"/myrpc/\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        method,\n        params,\n        id: 0\n      })\n    })\n      .then(response => {\n        return response.json()\n      })\n      .then(result => {\n        return result\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n\n  const aa = await rpcCall(Arith.Multiply\", {a: 2, b: 3})\n  console.log(aa);\n\n  // more test\n  [\n    [\"Arith.Multiply\", {a: 2, b: 3}],\n    [\"Arith.Add\", {a: 2, b: 3}],\n  ].forEach(async ([method, params]) => {\n    const val = await rpcCall(method, params)\n    document.querySelector(\"div\").innerHTML += JSON.stringify(val, null, 2) + \"<br>\"\n  })\n</script>"
  },
  {
    "url": "https://stackoverflow.com/questions/72673118/rxgo-how-can-i-stop-an-observable-stream",
    "body": "import (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"github.com/reactivex/rxgo/v2\"\n)\nfunc main() {\n\terrs := rxgo.Just(\n\t\trxgo.Of(1),\n\t\terrors.New(\"foo\"),\n\t\trxgo.Of(2),\n\t\trxgo.Of(3),\n\t)()\n\tfor v := range errs.Observe(rxgo.WithErrorStrategy(rxgo.StopOnError)) {\n\t\tfmt.Printf(\"CHECK %+v %v\\n\", v, v.Error())\n\t}\n\terrs = rxgo.Just(\n\t\trxgo.Of(1),\n\t\terrors.New(\"foo\"),\n\t\trxgo.Of(2),\n\t\trxgo.Of(3),\n\t)().Map(func(ctx context.Context, i interface{}) (interface{}, error) {\n\t\treturn i, nil\n\t})\n\tfor v := range errs.Observe(rxgo.WithErrorStrategy(rxgo.StopOnError)) {\n\t\tfmt.Printf(\"CHECK MAP %+v %v\\n\", v, v.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72666748/golang-gorm-scope-broken-after-upgrade-from-v1-to-v2",
    "body": "// Paginate is a Gorm scope function.\nfunc Paginate(entity BaseEntity, p *Pagination) func(db *gorm.DB) *gorm.DB {\n\treturn func(db *gorm.DB) *gorm.DB {\n\t\tvar totalRows int64\n\t\t// we must create a new session to run the count, otherwise by using the same db connection\n\t\t// we'll get some residual data which will cause db.Offset(p.Offset).Limit(p.PerPage) to fail.\n\t\tcountDBSession := db.Session(&gorm.Session{Initialized: true})\n\t\tcountDBSession.Model(entity).Count(&totalRows)\n\t\ttotalPages := int(math.Ceil(float64(totalRows) / float64(p.PerPage)))\n\t\tp.TotalPages = totalPages\n\t\tp.TotalCount = int(totalRows)\n\t\tp.SetLinks(entity.ResourceName())\n\t\treturn db.Offset(p.Offset).Limit(p.PerPage)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72501227/why-is-go-project-build-failing-on-netlify-functions-with-missing-go-sum-entry",
    "body": "▶ make setup all GO=go1.16.5\ncd analytics && rm go.mod go.sum && go1.16.5 mod init renato/analytics && go1.16.5 mod tidy\ngo: creating new go.mod: module renato/analytics\ngo: to add module requirements and sums:\n        go mod tidy\ngo: finding module for package github.com/aws/aws-lambda-go/lambda\ngo: finding module for package github.com/aws/aws-lambda-go/events\ngo: found github.com/aws/aws-lambda-go/events in github.com/aws/aws-lambda-go v1.32.0\ngo: found github.com/aws/aws-lambda-go/lambda in github.com/aws/aws-lambda-go v1.32.0\ncd analytics && go1.16.5 test .\nok      renato/analytics        0.166s\ncd analytics && go1.16.5 build -o ../netlify/functions/analytics ."
  },
  {
    "url": "https://stackoverflow.com/questions/72501227/why-is-go-project-build-failing-on-netlify-functions-with-missing-go-sum-entry",
    "body": "7:36:59 PM: ────────────────────────────────────────────────────────────────\n7:36:59 PM:   1. Build command from Netlify app\n7:36:59 PM: ────────────────────────────────────────────────────────────────\n7:36:59 PM: ​\n7:36:59 PM: $ make all\n7:36:59 PM: cd analytics && go test .\n7:37:00 PM: go: downloading github.com/aws/aws-lambda-go v1.32.0\n7:37:08 PM: ok  \trenato/analytics\t0.017s\n7:37:08 PM: cd analytics && go build -o ../netlify/functions/analytics .\n7:37:09 PM: ​\n7:37:09 PM: (build.command completed in 9.2s)\n7:37:09 PM: ​\n7:37:09 PM: ────────────────────────────────────────────────────────────────\n7:37:09 PM:   2. Functions bundling\n7:37:09 PM: ────────────────────────────────────────────────────────────────\n7:37:09 PM: ​\n7:37:09 PM: Packaging Functions from netlify/functions directory:\n7:37:09 PM:  - analytics\n7:37:09 PM: ​\n7:37:09 PM: ​\n7:37:09 PM: (Functions bundling completed in 101ms)"
  },
  {
    "url": "https://stackoverflow.com/questions/72355896/how-to-tell-if-one-goroutine-succeeded-or-all-goroutines-are-done",
    "body": "func (c *cycleDet) hasCycle() bool {\n    ctx, cancel := context.WithCancel(context.Background())\n    hasCycle := make(chan bool)\n    var wg sync.WaitGroup\n    adj := c.b // adjacency list representation of the unerlying graph\n    for node := range adj {\n        wg.Add(1)\n        go func(ctx context.Context, no nodeID, co chan<- bool, cancel context.CancelFunc) {\n            // Use wg to synchronize termination of read-only goroutines.\n            defer wg.Done()\n            select {\n                case <-ctx.Done():\n                    return\n                default:\n            }\n            visited := make(map[nodeID]struct{})\n            // c.nodeHasCycle will use a recursive implementation of DFS to\n            // find out if the node no leads to a cycle.\n            if c.nodeHasCycle(ctx, no, visited) {\n                co <- true\n                cancel()\n                return\n            }\n        }(ctx, node, hasCycle, cancel)\n    }\n    // Observer goroutine to notify when wg is done waiting.\n    time.Sleep(100 * time.Millisecond)\n    wg.Wait()\n    defer cancel()\n    select {\n    case <-hasCycle:\n        fmt.Println(\"got a cycle\")\n        return true\n    default:\n        fmt.Println(\"no cycle detected\")\n        return false\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72315729/how-to-deserialize-an-openapi-3-yaml-file-with-a-polymorphic-array-based-on-a-di",
    "body": "func discriminators() {\n\tvar yamlData = `\nspec:\n  traits:\n    - name: Web dashboard\n      type: ui\n      summary: hmmm ET\n    - name: Wiki\n      type: documentation\n      description: Description\n`\n\tdata := Data{}\n\terr := yaml.Unmarshal([]byte(yamlData), &data)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttrait := data.Spec.Traits[0]\n\tvar ut UiTrait\n\tif err := mapstructure.Decode(trait, &ut); err != nil {\n\t\tpanic(err)\n\t}\n\tprintln(ut.Summary)\n}\ntype Data struct {\n\tSpec Specification `yaml:\"spec\"`\n}\ntype Trait struct {\n\tName  string `yaml:\"name\"`\n\tType_ string `yaml:\"type\"`\n}\ntype UiTrait struct {\n\tName    string `yaml:\"name\"`\n\tType_   string `yaml:\"type\"`\n\tSummary string `json:\"summary,omitempty\"`\n}\ntype DocumentationTrait struct {\n\tName        string `yaml:\"name\"`\n\tType_       string `yaml:\"type\"`\n\tDescription string `json:\"description,omitempty\"`\n}\ntype Specification struct {\n\tTraits []interface{} `yaml:\"traits,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72301727/remove-element-from-the-priority-queue",
    "body": "type PriorityQueue []int\n// I will skip the heap.Interface part\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tpq := make(PriorityQueue, k)\n\tresult := make([]int, 0, len(nums)-k+1)\n\tfor i := 0; i < k; i++ {           // 1.\n\t\tpq[i] = nums[i]\n\t}\n\theap.Init(&pq)\n\tresult = append(result, pq[0])     // 2.\n\tfor i := k; i < len(nums); i++ {\n\t\tfor j, value := range pq {     // 3.1.\n\t\t\tif value == nums[i-k] {\n\t\t\t\tpq[j] = nums[i]        // Instead of removing then pushing\n\t\t\t\theap.Fix(&pq, j)       // We modify the content with heap.Fix\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tresult = append(result, pq[0]) // 3.2.\n\t}\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72301727/remove-element-from-the-priority-queue",
    "body": "type PriorityQueue struct {\n\tWindow           []int         // The queue\n\tIndicesOfIndices CircularArray // `i -> j` mapping\n}\n// func (pq *PriorityQueue) Len() ...\nfunc (pq *PriorityQueue) Push(x interface{}) {} // don't use\nfunc (pq *PriorityQueue) Pop() interface{} { return nil } // don't use\nfunc (pq *PriorityQueue) Less(a, b int) bool {\n\treturn pq.Window[a] > pq.Window[b]\n}\nfunc (pq *PriorityQueue) Swap(a, b int) {\n\tpq.Window[a], pq.Window[b] = pq.Window[b], pq.Window[a]\n\tpq.IndicesOfIndices.Swap(a, b)\n}\nfunc maxSlidingWindow(nums []int, k int) []int {\n\tpq := PriorityQueue{\n\t\tWindow:           make([]int, 0, k),\n\t\tIndicesOfIndices: make(CircularArray, k),\n\t}\n\tresult := make([]int, 1, len(nums)-k+1)\n\tfor i := 0; i < k; i++ {\n\t\tpq.PushWithIndex(nums[i], i)                          // 1.\n\t}\n\theap.Init(&pq)\n\tresult[0] = pq.Window[0]                                  // 2.\n\tfor i := k; i < len(nums); i++ {\n\t\tresult = append(result, pq.NextWithIndex(nums[i], i)) // 3.\n\t}\n\treturn result\n}\n// Pushes into the queue and sets up the `i -> j` mapping\nfunc (pq *PriorityQueue) PushWithIndex(value int, i int) {\n\tpq.IndicesOfIndices.Set(i, len(pq.Window))\n\tpq.Window = append(pq.Window, value)\n}\n// Updates the queue and returns the max element\nfunc (pq *PriorityQueue) NextWithIndex(pushed int, i int) int {\n\tj := pq.IndicesOfIndices.Get(i) // 3.1.\n\tpq.Window[j] = pushed\n\theap.Fix(pq, j)\n\treturn pq.Window[0]             // 3.2.\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72058964/kafka-consumer-offset-export-golang-sharma-or-confluent-kafka-go-lib",
    "body": "func main() {\n\tbrokers := []string{BK}\n\tkfk.Logger = log.New(os.Stdout, \"\", log.LstdFlags)\n\tcfg := kfk.NewConfig()\n\tcfg.ClientID = CID\n\tclient, _ := kfk.NewClient(brokers, cfg)\n\t//fmt.Println(client)\n\toffsetMg, _ := kfk.NewOffsetManagerFromClient(CG, client)\n\tdefer offsetMg.Close()\n\tconsumer, _ := kfk.NewConsumerFromClient(client)\n\tdefer consumer.Close()\n\tpartitions, _ := consumer.Partitions(TOPIC)\n\tfor _, p := range partitions {\n\t\tpom, _ := offsetMg.ManagePartition(TOPIC, p)\n\t\tofs, pomStr := pom.NextOffset()\n\t\tfmt.Printf(\"Partition: %v -> nextOffset: %v:%s\\n\", p, ofs, pomStr)\n\t}\n\tfmt.Println(\"--\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72058964/kafka-consumer-offset-export-golang-sharma-or-confluent-kafka-go-lib",
    "body": "❯ kafka-consumer-groups.sh --bootstrap-server $kfk --dry-run --reset-offsets --topic $t --group $cg1 --to-current | sort -k3 -n\nGROUP                          TOPIC                          PARTITION  NEW-OFFSET\npropertest-cg1                 propertest                     0          31\npropertest-cg1                 propertest                     1          30\npropertest-cg1                 propertest                     2          45\npropertest-cg1                 propertest                     3          39\npropertest-cg1                 propertest                     4          45\npropertest-cg1                 propertest                     5          39\npropertest-cg1                 propertest                     6          37\npropertest-cg1                 propertest                     7          42\npropertest-cg1                 propertest                     8          43\npropertest-cg1                 propertest                     9          35\npropertest-cg1                 propertest                     10         41\npropertest-cg1                 propertest                     11         36"
  },
  {
    "url": "https://stackoverflow.com/questions/72029314/flags-defined-in-different-functions-with-sync-giving-error",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n)\nfunc pingone(websiteone *string) {\n\tfmt.Println(\"website:\", *websiteone)\n\teurl := \"https://thesiteone.com/\"\n\thapp := \"/subpage\"\n\tfor {\n\t\tresp, err := http.Get(eurl + *websiteone + happ)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(resp)\n\t\ttime.Sleep(2 * time.Second)\n\t}\n}\nfunc pingtwo(websitetwo *string) {\n\tfmt.Println(\"website:\", *websitetwo)\n\teurltwo := \"https://thesitetwo.com/\"\n\thapptwo := \"/subpage\"\n\tfor {\n\t\tresp, err := http.Get(eurltwo + *websitetwo + happtwo)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(resp)\n\t\ttime.Sleep(2 * time.Second)\n\t}\n}\nfunc main() {\n\twebsiteone := flag.String(\"websiteone\", \"adminone\", \"Zdefault website\")\n\twebsitetwo := flag.String(\"websitetwo\", \"admintwo\", \"Zdefault website\")\n\tflag.Parse()\n\tvar wg sync.WaitGroup\n\tfmt.Printf(\"Both pingone and pingtwo started\\n\")\n\twg.Add(2)\n\tgo pingone(websiteone)\n\tgo pingtwo(websitetwo)\n\twg.Wait()\n\tfmt.Printf(\"both pingone and pingtwo have finished\\n\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71959716/go-invalid-memory-address-or-nil-pointer-dereference-when-reading-files-and-str",
    "body": "fmt.Printf(\"IN FILE %s %s \\n\", client.Username, client.SendingOperation)\nbytes, err := reader.ReadBytes('\\n')\n// REMOVE THIS\n// if err == nil {\n//     fmt.Printf(\"ERROR:: \", err.Error())\n// }\nfmt.Printf(\"The bytes: %s \\n\", bytes)\nfmt.Printf(\"fileBytes: %s \\n\", fileBytes)\nif err != nil {\n    if err == io.EOF {\n        writeBytesToFile(dstFile, fileBytes)\n        //Go back to listen commands first\n        client.SetSendingOperation(\"command\")\n        fileBytes = make([]byte, 0)\n    } else { // ADD THIS ELSE BLOCK\n        fmt.Printf(\"ERROR:: \", err.Error())\n    }\n} else {\n    fileBytes = append(fileBytes, bytes...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71883446/dynamic-function-call-from-generics-depending-on-type",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\ntype Cut interface {\n\tint | int8 | int16 | int32 | int64 | float32 | float64 | string\n}\ntype AudioObj struct {\n\tfileName string\n}\nfunc (A AudioObj) CutIfFirstIsString(from string, to float64) {\n\t// Cut audio file: (\"00:00:03\", 81.0)\n\tfmt.Println(`Cut audio file: (\"00:00:03\", 81.0)`)\n}\nfunc (A AudioObj) CutIfSecondIsString(from float64, to string) {\n\t// Cut audio file: (0.3, \"01:21:00\")\n\tfmt.Println(`Cut audio file: (0.3, \"01:21:00\")`)\n}\nfunc CutAudio[S Cut, E Cut](MusicFile AudioObj, start S, end E) {\n\t// The first parameter is a string.\n\tif _, ok := any(start).(string); ok {\n\t\tMusicFile.CutIfFirstIsString(cutToString(start), cutToFloat(end))\n\t}\n\t// The second parameter is a string.\n\tif _, ok := any(end).(string); ok {\n\t\tMusicFile.CutIfSecondIsString(cutToFloat(start), cutToString(end))\n\t}\n}\nfunc cutToString[S Cut](cut S) string {\n\tvar str string\n\tswitch start := any(cut).(type) {\n\tcase int:\n\t\tstr = strconv.FormatInt(int64(start), 10)\n\tcase int8:\n\t\tstr = strconv.FormatInt(int64(start), 10)\n\tcase int16:\n\t\tstr = strconv.FormatInt(int64(start), 10)\n\tcase int32:\n\t\tstr = strconv.FormatInt(int64(start), 10)\n\tcase int64:\n\t\tstr = strconv.FormatInt(start, 10)\n\tcase float32:\n\t\tstr = strconv.FormatFloat(float64(start), 'G', -1, 32)\n\tcase float64:\n\t\tstr = strconv.FormatFloat(start, 'G', -1, 64)\n\tcase string:\n\t\tstr = start\n\t}\n\treturn str\n}\nfunc cutToFloat[S Cut](cut S) float64 {\n\tvar flt float64\n\tswitch end := any(cut).(type) {\n\tcase int:\n\t\tflt = float64(end)\n\tcase int8:\n\t\tflt = float64(end)\n\tcase int16:\n\t\tflt = float64(end)\n\tcase int32:\n\t\tflt = float64(end)\n\tcase int64:\n\t\tflt = float64(end)\n\tcase float32:\n\t\tflt = float64(end)\n\tcase float64:\n\t\tflt = end\n\tcase string:\n\t\tflt, _ = strconv.ParseFloat(end, 64)\n\t}\n\treturn flt\n}\nfunc main() {\n\taudio := AudioObj{fileName: \"music.mp3\"}\n\tCutAudio(audio, \"00:00:03\", 81.0)\n\tCutAudio(audio, 0.3, \"01:21:00\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71870275/go-same-interface-to-handle-multiple-types",
    "body": "type DeviceRepository interface {\n    FindDeviceByChecksum(string) (device.Device, error)\n    InsertDevice(device.Device) (bool, error)\n}\ntype VendorAdapter interface {\n    AssignGroupToDevice(GroupID, DeviceRemoteID string) (bool, error)\n}\ntype Orchestrator struct {\n    deviceRepo    DeviceRepository\n    vendorAdapter VendorAdapter\n}\n// Inside orchestrator#Assign method\ndevice, err := o.deviceRepo.FindDeviceByChecksum(\"checksum from arg\")\nif err != nil {...}\n.\n.\no.vendorAdapter.AssignGroupToDevice(\"groupID from arg\", device.RemoteID)\n//"
  },
  {
    "url": "https://stackoverflow.com/questions/71849417/create-list-of-values-from-a-json-file-of-multiple-lines-in-golang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype Input struct {\n\tCustomerId string `json:\"customer_id\"`\n}\ntype InputList []Input\ntype Output struct {\n\tCustomerIds []string `json:\"Customer_id\"`\n}\nfunc main() {\n\tjsonSource := `[\n        { \"customer_id\": \"g62\" },\n        { \"customer_id\": \"b23\" },\n        { \"customer_id\": \"a34\" },\n        { \"customer_id\": \"c42\" }\n    ]`\n\tinput := deserialize(jsonSource)\n\tfmt.Println()\n\tfmt.Println(\"Input:\")\n\tfmt.Printf(\"%+v\\n\", input)\n\toutput := transform(input)\n\tfmt.Println()\n\tfmt.Println(\"Output:\")\n\tfmt.Printf(\"%+v\\n\", output)\n\tjsonFinal := serialize(output)\n\tfmt.Println()\n\tfmt.Println(\"Final JSON:\")\n\tfmt.Println(jsonFinal)\n}\nfunc deserialize(s string) InputList {\n\tvar input InputList\n\tif err := json.Unmarshal([]byte(s), &input); err != nil {\n\t\tpanic(err)\n\t}\n\treturn input\n}\nfunc transform(input InputList) Output {\n\toutput := Output{\n\t\tCustomerIds: make([]string, 0, len(input)),\n\t}\n\tfor _, item := range input {\n\t\toutput.CustomerIds = append(output.CustomerIds, item.CustomerId)\n\t}\n\treturn output\n}\nfunc serialize(output Output) string {\n\tbuf, err := json.Marshal(output)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := string(buf)\n\treturn s\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71842954/unmarshal-flat-xml-to-go-data-structure",
    "body": "func (b *Buckets) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {\n\tb.XMLName = start.Name\n\tvar currentBucket *Bucket\n\tvar currentItem *Item\n\tfor {\n\t\tt, err := d.Token()\n\t\tif t == nil {\n\t\t\t// append the last bucket before exiting\n\t\t\tb.Buckets = append(b.Buckets, currentBucket)\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tswitch se := t.(type) {\n\t\tcase xml.StartElement:\n\t\t\tswitch se.Name.Local {\n\t\t\tcase \"Bucket-name\":\n\t\t\t\t// check if currentBucket is nil, it is necessary for the first time that\n\t\t\t\t// is going to run. Otherwise, append the last bucket to the slice and reset it\n\t\t\t\tif currentBucket != nil {\n\t\t\t\t\tb.Buckets = append(b.Buckets, currentBucket)\n\t\t\t\t}\n\t\t\t\tcurrentBucket = &Bucket{}\n\t\t\t\tif err := d.DecodeElement(&currentBucket.BucketName, &se); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\tcase \"item-name\":\n\t\t\t\tcurrentItem = &Item{}\n\t\t\t\tif err := d.DecodeElement(&currentItem.Name, &se); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\tcase \"weight\":\n\t\t\t\tif err := d.DecodeElement(&currentItem.Weight, &se); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\tcase \"quantity\":\n\t\t\t\tif err := d.DecodeElement(&currentItem.Quantity, &se); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\t// since quantity comes last append the item to the bucket,  and reset it\n\t\t\t\tcurrentBucket.Items = append(currentBucket.Items, currentItem)\n\t\t\t\tcurrentItem = &Item{}\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71781753/how-to-terminate-a-console-input-request-when-a-new-input-is-requested",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/fs\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc setNonblock(f *os.File) error {\n\tc, err := f.SyscallConn()\n\tif err != nil {\n\t\treturn err\n\t}\n\tvar err2 error\n\terr = c.Control(func(fd uintptr) {\n\t\terr2 = syscall.SetNonblock(int(fd), true)\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn err2\n}\nfunc nonBlockingFile(f *os.File) (*os.File, error) {\n\tif err := setNonblock(f); err != nil {\n\t\treturn nil, err\n\t}\n\tfd, err := syscall.Dup(int(f.Fd()))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tf2 := os.NewFile(uintptr(fd), f.Name())\n\treturn f2, nil\n}\nfunc read(ctx context.Context, f *os.File) (io.Reader, error) {\n\tr, err := nonBlockingFile(f)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tgo func() {\n\t\tdefer r.Close()\n\t\t<-ctx.Done()\n\t}()\n\tbuff := bytes.NewBuffer([]byte{})\n\tfor {\n\t\t_, err := io.Copy(buff, r)\n\t\tif err != nil {\n\t\t\tif errors.Is(err, fs.ErrClosed) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpanic(err)\n\t\t}\n\t}\n\treturn buff, nil\n}\nfunc main() {\n\tctx1, cancel := context.WithCancel(context.Background())\n\tgo func() {\n\t\ttime.Sleep(time.Second * 2)\n\t\tcancel()\n\n\t}()\n\tbuf1, err := read(ctx1, os.Stdin)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tctx2, _ := context.WithTimeout(context.Background(), time.Second*2)\n\tbuf2, err := read(ctx2, os.Stdin)\n\tfmt.Println(\"buf1\")\n\tfmt.Println(ioutil.ReadAll(buf1))\n\tfmt.Println(\"buf2\")\n\tfmt.Println(ioutil.ReadAll(buf2))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71618744/recursively-iterate-struct-array-in-go",
    "body": "func (input Input) Script (id int) (out [][]Question) {\n\tfor _, q := range input.Questions {\n\t\tif q.Id == id {\n\t\t\tadded := false // avoid add last multiple times\n\t\t\tfor _, answer := range q.Answer {\n\t\t\t\tpaths := input.Script(answer.NextQuestion)\n\t\t\t\tif len(paths) == 0  && !added {\n                    // answer has no next question | question not found in input\n\t\t\t\t\tout = append(out, []Question{q})\n\t\t\t\t\tadded = true\n\t\t\t\t}\n\t\t\t\tfor _, path := range paths {\n\t\t\t\t\t// prepend question to every path from recursive function\n\t\t\t\t\tpath = append([]Question{q}, path...)\n\t\t\t\t\tout = append(out, path)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn out\n\t\t}\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71614033/aes-256-ctr-encryption-in-golang-decrypt-in-node-js-with-cryptojs-and-the-key-is",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\tevp \"github.com/walkert/go-evp\"\n\t\"github.com/zenazn/pkcs7pad\"\n)\nfunc main() {\n\trawKey := \"46ca2a49c8074dadb99843f6b86c5975\"\n\tdata := pkcs7pad.Pad([]byte(\"the quick brown fox jumps over the lazy dog\"), 16) // 1. Pad the plaintext with PKCS#7\n\tfmt.Println(\"padded data: \", hex.EncodeToString(data))\n\tencryptedData := encrypt(rawKey, data)\n\tfmt.Println(\"encrypted data: \", encryptedData)\n}\nfunc encrypt(rawKey string, plainText []byte) string {\n\tsalt := []byte(\"ABCDEFGH\") // hardcoded at the moment\n\t// Gets key and IV from raw key.\n\tkey, iv := evp.BytesToKeyAES256CBCMD5([]byte(salt), []byte(rawKey))\n\t// Create new AES cipher block\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn err.Error()\n\t}\n\tcipherText := make([]byte, len(plainText))\n\t// Encrypt.\n\tencryptStream := cipher.NewCTR(block, iv)\n\tencryptStream.XORKeyStream(cipherText, plainText)\n\tivHex := hex.EncodeToString(iv)\n\tencryptedDataHex := hex.EncodeToString([]byte(\"Salted__\")) + hex.EncodeToString(salt) + hex.EncodeToString(cipherText) // 2. Apply the OpenSSL format, hex encode the result\n\treturn ivHex + \":\" + encryptedDataHex // 3. Any value for ivHex can be used here, e.g. \"00000000000000000000000000000000\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71576931/unexpected-result-from-mergesort-implementation",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tt := []int{23, 67, 98, 2, 3}\n\tMergeSort(t)\n\tfmt.Println(t)\n}\nfunc MergeSort(arr []int) {\n\tif len(arr) < 2 {\n\t\treturn\n\t}\n\tmid := len(arr) / 2\n\n    // these lines are important, you cannot do split sort\n    // in-place like you did because the memory would get\n    // corrupted as you join slice into itself.\n\tleft := append([]int{}, arr[:mid]...)\n\tright := append([]int{}, arr[mid:]...)\n\tMergeSort(left)\n\tMergeSort(right)\n\tmerge(arr, left, right)\n}\nfunc merge(a []int, l []int, r []int) {\n\ti := 0\n\tj := 0\n\tk := 0\n\tfor i < len(l) && j < len(r) {\n\t\tif l[i] <= r[j] {\n\t\t\ta[k] = l[i]\n\t\t\ti++\n\t\t} else {\n\t\t\ta[k] = r[j]\n\t\t\tj++\n\t\t}\n\t\tk++\n\t}\n\tfor i < len(l) {\n\t\ta[k] = l[i]\n\t\ti++\n\t\tk++\n\t}\n\tfor j < len(r) {\n\t\ta[k] = r[j]\n\t\tj++\n\t\tk++\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71562766/reading-last-modified-file-name-from-amazon-s3-bucket-in-go",
    "body": "    ...\n    objs := []types.Object{}\n\tparams := &s3.ListObjectsV2Input{\n\t\tBucket:     aws.String(s.bucket),\n\t\tPrefix:     aws.String(prefix), //uploaded\n\t}\n\tp := s3.NewListObjectsV2Paginator(svc, params)\n\tfor p.HasMorePages() {\n\t\tout, err := p.NextPage(ctx)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tobjs = append(objs, out.Contents...)\n\t}\n\tif l :=len(objs); l > 0 {\n        sort.Slice(objs, func(a, b int) bool {\n\t\t    return objs[a].LastModified.Before(*objs[b].LastModified)\n\t    })\n\t    return objs[l-1].Key, nil\n\t}\n\treturn \"\", nil"
  },
  {
    "url": "https://stackoverflow.com/questions/71562766/reading-last-modified-file-name-from-amazon-s3-bucket-in-go",
    "body": "    ...\n    lastModifiedKey := \"\"\n\tparams := &s3.ListObjectsV2Input{\n\t\tBucket:     aws.String(s.bucket),\n\t\tPrefix:     aws.String(prefix), //uploaded\n\t\tStartAfter: aws.String(previousSearchKey),\n\t}\n\tp := s3.NewListObjectsV2Paginator(svc, params)\n\tfor p.HasMorePages() {\n\t\tout, err := p.NextPage(ctx)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n        // ListObjectV2 sorts key by ascending order & your name format is sortable\n\t\tlastModifiedKey =  out.Contents[len(out.Contents) -1]\n\t}\n\treturn lastModifiedKey, nil"
  },
  {
    "url": "https://stackoverflow.com/questions/71519319/golang-find-a-string-in-a-file-and-print-the-whole-line",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\nconst output = `Orang yang baru saja memulai atau sudah dalam perjalanan belajar coding pasti sudah tidak asing lagi dengan kata “Stack Overflow”. Dalam website resminya, Stack Overflow digambarkan sebagai “platform publik yang membangun kumpulan pertanyaan dan jawaban coding yang terpercaya.” Platform ini pertama kali dibuat pada tahun 2008 dan seketika mengalahkan popularitas Experts Exchange, sebagai platform tanya-jawab teknologi nomor satu pada saat itu.\nStack Overflow sering diibaratkan sebagai ‘sahabat’ programmer zaman now. Tidak peduli jenis pekerjaan atau lama karir yang dimiliki, seorang programmer pasti pernah membuka situs Stack Overflow untuk mencari jawaban penyelesaian masalah coding yang mereka hadapi. Pertanyaan yang sudah ditandai dengan jenis bahasa pemrogramannya dimaksudkan untuk memudahkan user untuk mencari informasi terkait.\nBagi programmer muda yang belum pernah menggunakan platform ini, berikut adalah beberapa hal yang perlu kamu ketahui sebelum masuk ke komunitas Stack Overflow.\n`\nfunc main() {\n\tidxFind := strings.Index(output, \"programmer zaman now\")\n\tleft := strings.LastIndex(output[:idxFind], \"\\n\")\n\tright := strings.Index(output[idxFind:], \"\\n\")\n\tfmt.Println(output[left : idxFind+right])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71497849/golang-reflect-cannot-recognize-tag-from-map-members",
    "body": "func tryMapWithReflect(obj interface{}) {\n\treflectMap := reflect.ValueOf(obj)\n\tfor _, key := range reflectMap.MapKeys() {\n\t\ttheValue := reflectMap.MapIndex(key).Interface()\n\t\t// allocate a new value of type *Student\n\t\tnewValue := reflect.New(reflectMap.MapIndex(key).Type())\n\t\t// use Elem do dereference *Stunded\n\t\t// and then use Set to set the Student to the content of theValue\n\t\tnewValue.Elem().Set(reflect.ValueOf(theValue))\n\t\tfmt.Printf(\"Key: %v, Value: %v, value pointer %p\\n\", key, newValue.Elem().Interface(), newValue.Interface())\n\t\t// return the newValue *Student\n\t\ttraversalTag(newValue.Interface())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71452529/setting-an-index-of-a-binary-tree-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n// A single Node in a binary tree\ntype Node struct {\n\t// Value contained by the node\n\tValue int\n\t// Left subnode of the node\n\tLeft *Node\n\t// Right subnode of the node\n\tRight *Node\n}\ntype BinaryTree struct {\n\tRoot *Node\n}\n// inserting the element in the binary tree\nfunc (tree *BinaryTree) Insert(value int) {\n\tif tree.Root == nil {\n\t\tnode := new(Node)\n\t\tnode.Value = value\n\t\ttree.Root = node\n\t\treturn\n\t}\n\tcurrent := tree.Root\n\tfor {\n\t\tif value < current.Value {\n\t\t\tif current.Left == nil {\n\t\t\t\tnode := new(Node)\n\t\t\t\tnode.Value = value\n\t\t\t\tcurrent.Left = node\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tcurrent = current.Left\n\t\t\t}\n\t\t} else {\n\t\t\tif current.Right == nil {\n\t\t\t\tnode := new(Node)\n\t\t\t\tnode.Value = value\n\t\t\t\tcurrent.Right = node\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tcurrent = current.Right\n\t\t\t}\n\t\t}\n\t}\n}\n// current left right\nfunc (tree *BinaryTree) RecursivePreOrder(root *Node) {\n\tif root == nil {\n\t\treturn\n\t}\n\tfmt.Println(root.Value)\n\ttree.RecursivePreOrder(root.Left)\n\ttree.RecursivePreOrder(root.Right)\n}\nfunc (tree *BinaryTree) IterativePreOrder(root *Node) {\n\tstack := []*Node{}\n\tfor {\n\t\tfor root != nil {\n\t\t\tfmt.Println(root.Value)\n\t\t\tstack = append([]*Node{root}, stack...)\n\t\t\troot = root.Left\n\t\t}\n\t\tif len(stack) == 0 {\n\t\t\tbreak\n\t\t}\n\t\troot = stack[0]\n\t\tstack = stack[1:]\n\t\troot = root.Right\n\t}\n}\nfunc (tree *BinaryTree) RecursiveInOrder(root *Node) {\n\tif root == nil {\n\t\treturn\n\t}\n\ttree.RecursiveInOrder(root.Left)\n\tfmt.Println(root.Value)\n\ttree.RecursiveInOrder(root.Right)\n}\nfunc (tree *BinaryTree) IterativeInOrder(root *Node) {\n\tvar stack []*Node\n\tfor {\n\t\tfor root != nil {\n\t\t\tstack = append([]*Node{root}, stack...)\n\t\t\troot = root.Left\n\t\t}\n\t\tif len(stack) == 0 {\n\t\t\tbreak\n\t\t}\n\t\troot = stack[0]\n\t\tstack = stack[1:]\n\t\tfmt.Println(root.Value)\n\t\troot = root.Right\n\t}\n}\nfunc (tree *BinaryTree) RecursivePostOrder(root *Node) {\n\tif root == nil {\n\t\treturn\n\t}\n\ttree.RecursivePostOrder(root.Left)\n\ttree.RecursivePostOrder(root.Right)\n\tfmt.Println(root.Value)\n}\nfunc (tree *BinaryTree) IterativePostOrder(root *Node) {\n\tstack := []*Node{}\n\tvar previous *Node = nil\n\tfor {\n\t\tfor root != nil {\n\t\t\tstack = append([]*Node{root}, stack...)\n\t\t\troot = root.Left\n\t\t}\n\t\tfor root == nil && len(stack) != 0 {\n\t\t\troot = stack[0]\n\t\t\tif root.Right == nil || root.Right == previous {\n\t\t\t\tfmt.Println(root.Value)\n\t\t\t\tstack = stack[1:]\n\t\t\t\tprevious = root\n\t\t\t\troot = nil\n\t\t\t} else {\n\t\t\t\troot = root.Right\n\t\t\t}\n\t\t}\n\t\tif len(stack) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\nfunc (tree *BinaryTree) LevelOrder(root *Node) {\n\t// a queue for performing level order traversal of breadth first traversal\n\tqueue := []*Node{}\n\tif root != nil {\n\t\tqueue = append(queue, root)\n\t}\n\tfor len(queue) > 0 {\n\t\troot = queue[0]\n\t\tqueue = queue[1:]\n\t\tfmt.Println(root.Value)\n\t\tif root.Left != nil {\n\t\t\tqueue = append(queue, root.Left)\n\t\t}\n\t\tif root.Right != nil {\n\t\t\tqueue = append(queue, root.Right)\n\t\t}\n\t}\n}\nfunc (tree *BinaryTree) Size(root *Node) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tsum := tree.Size(root.Left) + 1 + tree.Size(root.Right)\n\treturn sum\n}\nfunc (tree *BinaryTree) ElementAt(root *Node, index int) *Node {\n\tif index > tree.Size(root)-1 {\n\t\tfmt.Println(\"Index doesnot exist\")\n\t\treturn nil\n\t}\n\tleftSize := tree.Size(root.Left)\n\tif index == leftSize {\n\t\treturn root\n\t} else if index < leftSize {\n\t\treturn tree.ElementAt(root.Left, index)\n\t} else {\n\t\treturn tree.ElementAt(root.Right, index-leftSize-1)\n\t}\n}\nfunc (tree *BinaryTree) Height(root *Node) int {\n\tif root == nil {\n\t\treturn -1\n\t}\n\treturn int(math.Max(float64(tree.Height(root.Left)), float64(tree.Height(root.Right)))) + 1\n}\n// starting point of the program\nfunc main() {\n\ttree := new(BinaryTree)\n\ttree.Insert(44)\n\ttree.Insert(55)\n\ttree.Insert(33)\n\tfmt.Println(tree.Height(tree.Root))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71412983/go-net-http-server-error-accept-tcp-443-accept4-too-many-open-files-ret",
    "body": "func main() {\n        if len(os.Args) < 2 {\n                logger.Log(\"error\", \"main\", \"Missing config.json file path as argument\")\n                return\n        }\n        configuration := configuration.Configuration{}\n        appConfig.InitConfig(os.Args[1], &configuration)\n        // download file\n        http.HandleFunc(\"/file-download\", handlers.DownloadFile(&configuration))\n        // upload file\n        http.HandleFunc(\"/file-upload\", handlers.UploadFile(&configuration))\n        // Get url\n        http.HandleFunc(\"/file-url\", handlers.GetUrl(&configuration))\n        // Delete\n        http.HandleFunc(\"/delete\", handlers.DeleteHandler(&configuration))\n        // file system\n        fs := http.FileServer(http.Dir(configuration.RootStoragePath))\n        corsFS := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n                if strings.HasSuffix(r.URL.Path, \"/\") {\n                        http.NotFound(w, r)\n                        return\n                }\n                w.Header().Add(\"Access-Control-Allow-Origin\", \"*\")\n                fs.ServeHTTP(w, r)\n        })\n        http.Handle(\"/\", corsFS)\n        srv := &http.Server{\n                Addr:         \":443\",\n                ReadTimeout:  30 * time.Second,\n                WriteTimeout: 120 * time.Second,\n        }\n        srv.SetKeepAlivesEnabled(false)\n        err := srv.ListenAndServeTLS(\"crt/server.crt\", \"crt/server.key\")\n        if err != nil {\n                logger.Log(\"error\", \"ListenAndServeTLS\", err.Error())\n                os.Exit(1)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71387340/go-mongodb-nested-query-with-lookup",
    "body": "func getMatchesByProfileId(id primitive.ObjectID) (*[]Match, error) {\n\tvar matches []Match\n\tmatch := bson.D{\n\t\t{\"unlocked\", false},\n\t\t{\"deletedAt\", nil},\n\t\t{\"$or\", []bson.M{\n\t\t\t{\n\t\t\t\t\"partnerA.id\":               id,\n\t\t\t\t\"partnerA.looksInteresting\": false,\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"partnerB.id\":               id,\n\t\t\t\t\"partnerB.looksInteresting\": false,\n\t\t\t},\n\t\t}},\n\t}\n\tpipeline := mongo.Pipeline{\n\t\t{{\"$match\", match}},\n\t\t{{\"$lookup\", bson.M{\n\t\t\t\"from\":         \"profile\",\n\t\t\t\"localField\":   \"partnerA.id\",\n\t\t\t\"foreignField\": \"_id\",\n\t\t\t\"as\":           \"partnerA.offer.profile\",\n\t\t}}},\n\t\t{{\"$unwind\", \"$partnerA.offer.profile\"}},\n\t\t{{\"$lookup\", bson.M{\n\t\t\t\"from\":         \"profile\",\n\t\t\t\"localField\":   \"partnerB.id\",\n\t\t\t\"foreignField\": \"_id\",\n\t\t\t\"as\":           \"partnerB.offer.profile\",\n\t\t}}},\n\t\t{{\"$unwind\", \"$partnerB.offer.profile\"}},\n\t}\n\tctx, _ := db.GetTimeoutContext()\n\tcursor, err := getMatchCollection().Aggregate(ctx, pipeline)\n\tif err != nil {\n\t\tlog.Error(\"Could not aggregate matches, Error: \", err)\n\t\treturn nil, err\n\t}\n\tdefer cursor.Close(ctx)\n\tfor cursor.Next(ctx) {\n\t\tvar m Match\n\t\tif err = cursor.Decode(&m); err != nil {\n\t\t\tlog.Error(\"Could not decode matches in getMatchesByProfileId error: \", err)\n\t\t\treturn nil, err\n\t\t}\n\t\tmatches = append(matches, m)\n\t}\n\treturn &matches, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71257080/how-to-find-the-longest-matching-substring-in-go",
    "body": "func longest_vowel_run(s string) (string, int, int) {\n\tslen := len(s)\n\tbgn := 0\n\tend := 0\n\tmax := 0\n\tx := 0\n\ty := 0\n\t// while we still have chars left...\n\tfor x < len(s) {\n\t\t// find the first vowel\n\t\tfor x < slen && !vowel[s[x]] {\n\t\t\tx++\n\t\t}\n\t\t// find the next non-vowel\n\t\tfor y = x; y < slen && vowel[s[y]]; {\n\t\t\ty++\n\t\t}\n\t\t// if the current run is longer than the max run, update the max run\n\t\tif z := y - x; z > max {\n\t\t\tbgn = x\n\t\t\tend = y\n\t\t\tmax = z\n\t\t}\n\t\t// pick up where we left off\n\t\tx = y\n\t}\n\tvar maxRun string\n\tif max > 0 {\n\t\tmaxRun = s[bgn:end]\n\t}\n\treturn maxRun, bgn, end - 1\n}\nvar vowel = map[byte]bool{\n\t'a': true, 'A': true,\n\t'e': true, 'E': true,\n\t'i': true, 'I': true,\n\t'o': true, 'O': true,\n\t'u': true, 'U': true,\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71206167/go-cancel-context-inside-a-for-loop",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net\"\n\t\"time\"\n)\nfunc generateMessageToUDP(ctx context.Context, conn *net.UDPConn, addr *net.UDPAddr) {\n\tfmt.Println(\"Generating message to UDP client\", addr)\n\tgo func() {\n\t\tfor i := 0; ; i++ {\n\t\t\tRandomInt := rand.Intn(100)\n\t\t\td := []byte(fmt.Sprintf(\"%d\", RandomInt))\n\t\t\tconn.WriteTo(d, addr)\n\t\t\ttime.Sleep(time.Second * 1)\n\t\t}\n\t}()\n\t<-ctx.Done()\n\tfmt.Println(\"Stopping writing to UDP client\", addr)\n}\n//var addr *net.UDPAddr\n//var conn *net.UDPConn\nfunc main() {\n\tfmt.Println(\"Hi this is a UDP server\")\n\tudpServer, err := net.ListenUDP(\"udp\", &net.UDPAddr{IP: net.IPv4(0, 0, 0, 0), Port: 5010})\n\tif err != nil {\n\t\tfmt.Println(\"Error: \", err)\n\t}\n\tdefer func(udpServer *net.UDPConn) {\n\t\terr := udpServer.Close()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error in closing the UDP Connection: \", err)\n\t\t}\n\t}(udpServer)\n\t// create a buffer to read data into\n\ttype peer struct {\n\t\tstop  func()\n\t\tsince time.Time\n\t}\n\tpeers := map[string]peer{}\n\tbuffer := make([]byte, 1024)\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tfor {\n\t\t// read the incoming connection into the buffer\n\t\tn, addr, err := udpServer.ReadFromUDP(buffer)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error: \", err)\n\t\t}\n\t\tfmt.Println(\"Received \", string(buffer[0:n]), \" from \", addr)\n\t\tif string(buffer[0:n]) == \"stop\" {\n\t\t\tfmt.Println(\"Stopped listening\")\n\t\t\tpeer, ok := peers[addr.String()]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpeer.stop()\n\t\t\tdelete(peers, addr.String())\n\t\t\tcontinue\n\t\t} else if string(buffer[0:n]) == \"start\" {\n\t\t\tpeer, ok := peers[addr.String()]\n\t\t\tif ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpctx, pcancel := context.WithCancel(ctx)\n\t\t\tpeer.stop = pcancel\n\t\t\tpeer.since = time.Now()\n\t\t\tpeers[addr.String()] = peer\n\t\t\t// send a response back to the client\n\t\t\t_, err = udpServer.WriteToUDP([]byte(\"Hi, I am a UDP server\"), addr)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Error: \", err)\n\t\t\t}\n\t\t\t// start a routine to generate messages to the client\n\t\t\tgo generateMessageToUDP(pctx, udpServer, addr)\n\t\t} else if string(buffer[0:n]) == \"ping\" {\n\t\t\tpeer, ok := peers[addr.String()]\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpeer.since = time.Now()\n\t\t\tpeers[addr.String()] = peer\n\t\t} else {\n\t\t\tfmt.Println(\"Unknown command\")\n\t\t}\n\t\tfor addr, p := range peers {\n\t\t\tif time.Since(p.since) > time.Minute {\n\t\t\t\tfmt.Println(\"Peer timedout\")\n\t\t\t\tp.stop()\n\t\t\t\tdelete(peers, addr)\n\t\t\t}\n\t\t}\n\t}\n}\n-- go.mod --\nmodule play.ground\n-- client.go --\npackage main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"time\"\n)\nfunc main() {\n\tfmt.Println(\"Hello, I am a client\")\n\t// Create a new client\n\tlocalAddr, err := net.ResolveUDPAddr(\"udp\", \"127.0.0.1:5011\")\n\tclient3, err := net.DialUDP(\"udp\", localAddr, &net.UDPAddr{IP: net.IPv4(127, 0, 0, 1), Port: 5010})\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer client3.Close()\n\tvar n int\n\tn, err = client3.Write([]byte(\"start\"))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlog.Println(n)\n\tnow := time.Now()\n\tb := make([]byte, 2048)\n\tfor time.Since(now) < time.Second*10 {\n\t\tn, addr, err := client3.ReadFrom(b)\n\t\tfmt.Println(n, addr, err)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tif addr.String() == \"127.0.0.1:5010\" {\n\t\t\tm := b[:n]\n\t\t\tfmt.Println(\"message:\", string(m))\n\t\t}\n\t}\n\tfmt.Println(\"Sending stop message\")\n\t_, err = client3.Write([]byte(\"stop\"))\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71129173/scp-sink-implementation-in-go",
    "body": "debug1: Sending command: scp -v -t /\nSending file modes: C0644 9 test.txt\ntest.txt                                                                                                                                                                                                    0%    0     0.0KB/s   --:-- ETAdebug1: client_input_channel_req: channel 0 rtype exit-status reply 0\ndebug1: channel 0: free: client-session, nchannels 1\ntest.txt                                                                                                                                                                                                  100%    9    14.1KB/s   00:00\ndebug1: fd 0 clearing O_NONBLOCK\nTransferred: sent 2152, received 1172 bytes, in 0.0 seconds\nBytes per second: sent 1391979.3, received 758085.4\ndebug1: Exit status 0"
  },
  {
    "url": "https://stackoverflow.com/questions/71101091/gorountines-causing-a-deadlock",
    "body": "func getLength(dd []string, wg *sync.WaitGroup) {\n\twg.Add(len(dd))\n\tc := make(chan string)\n\tfor _, d := range dd {\n\t\td1 := d\n\t\tgo computeLength(d1, c, wg)\n\t}\n\t// close c once all goroutines are done to\n\t// ensure the for-range loop below exits.\n\tgo func() { wg.Wait(); close(c) }()\n\t// Use for-range loop on the channel to receive all the sends.\n\t//\n\t// But note that a for-range loop over a channel exits only\n\t// when the channel is closed or the loop is exited from within.\n\t//\n\t// So to exit you can close c once wg.Wait() returns,\n\t// that's why there's that extra goroutine above.\n\tfor v := range c {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71099598/what-other-attribute-should-i-add-for-my-gorm-table",
    "body": "create table appUser (\n  id serial not null,\n  name text not null,\n  primary key (id)\n);\ncreate table Community (\n  id serial not null,\n  owner_id int not null,\n  name text not null,\n  primary key (id),\n  foreign key (owner_id) references appUser(id)\n);\ncreate table plan (\n  id serial not null,\n  community_id int not null,\n  name text not null,\n  price float not null,\n  primary key (id),\n  foreign key (community_id) references Community(id)\n);\ncreate table UserCommunity (\n  user_id int not null,\n  community_id int not null,\n  plan_id int not null,\n  primary key (user_id, community_id),\n  foreign key (plan_id) references plan(id)\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/71099598/what-other-attribute-should-i-add-for-my-gorm-table",
    "body": "insert into appUser (name) values ('maria'), ('jose'), ('clara');\ninsert into Community (name, owner_id) values ('community1', 1);\ninsert into plan (community_id, name, price) values\n(1, 'free', 0.0), (1, 'paid', 10.0);\ninsert into UserCommunity (user_id, community_id, plan_id) values\n  (2, 1, 1), (3, 1, 2);\nselect\n  appUser.name as \"user\",\n  community.name as \"community\",\n  plan.name as \"plan\"\nfrom appUser\n  join UserCommunity on appUser.id = UserCommunity.user_id\n  join Community on Community.id = UserCommunity.community_id\n  join plan on plan.id = UserCommunity.plan_id\nwhere plan.name = 'paid';"
  },
  {
    "url": "https://stackoverflow.com/questions/71097719/how-to-create-multiple-xml-files-if-single-xml-file-matches-the-requirements",
    "body": "    t := time.Unix(0, 0).UTC()\n    done := make(chan bool)\n    go func() {\n        // create new object to populate all URL data in memory\n        urlHolder := NewClient()\n        urlCounter := 0\n        byteCounter := 0\n        fileCounter := 0\n        for {\n            resp, err := stream.Recv()\n            if err == io.EOF {\n                done <- true\n                file, _ := os.Create(fmt.Sprintf(\"%d_abc_%d.xml\", clientId, fileCounter))\n                urlHolder.WriteTo(file)\n                return\n            }\n            if err != nil {\n                log.Fatalf(\"can not receive %v\", err)\n            }\n            log.Printf(\"Resp received: %s\", resp.GetCustomerUrl())\n            // I add the bytes of the URL here as a return\n            urlBytes := urlHolder.Add(&URL{\n               Loc:        resp.GetCustomerUrl(),\n               LastMod:    &t,\n               ChangeFreq: Daily,\n               Priority:   10.2,\n            })\n            byteCounter += urlBytes\n            urlCounter += 1\n            if byteCounter > 49000000 || urlCounter >= 50000 {\n                file, _ := os.Create(fmt.Sprintf(\"%d_abc_%d.xml\", clientId, fileCounter))\n                urlHolder.WriteTo(file)\n                urlHolder = NewClient() // create a new object for next loop\n                fileCounter += 1 // prepare fileCounter for next loop\n                byteCounter = 0 // restart count variables\n                urlCounter = 0\n            }\n        }\n    }()\n    <-done\n    log.Printf(\"finished\")\n    // No longer write the files here."
  },
  {
    "url": "https://stackoverflow.com/questions/71029427/apache-pulsar-read-consume-messages-from-an-integer-specified-message-id-to-a",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\t\"github.com/apache/pulsar-client-go/pulsar\"\n)\nfunc writeBytesToFile(f string, byteSlice []byte) int {\n\t// Open a new file for writing only\n\tf = \"./data/\" + f\n\tfile, err := os.OpenFile(\n\t\tf,\n\t\tos.O_WRONLY|os.O_TRUNC|os.O_CREATE,\n\t\t0666,\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer file.Close()\n\t// Write bytes to file\n\tbytesWritten, err := file.Write(byteSlice)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"Wrote %d bytes.\\n\", bytesWritten)\n\treturn bytesWritten\n}\nfunc readBackByEntryId(msgDir string, msgIndex string) (yourBytes []byte) {\n\t//We know the file name by convention\n\tfname := msgDir + \"/\" + msgIndex + \".dat\"\n\tyourBytes, err := ioutil.ReadFile(fname)\n\tif err != nil {\n\t\tlog.Printf(\"error reading %s\", fname)\n\t\treturn nil\n\t}\n\treturn yourBytes\n}\nfunc getFiles(aDir string) []string {\n\tvar theFiles []string\n\tfiles, err := ioutil.ReadDir(\"./data/\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, f := range files {\n\t\ttheFiles = append(theFiles, f.Name())\n\t}\n\treturn theFiles\n}\nfunc streamAll(reader pulsar.Reader, startMsgIndex int64, stopMsgIndex int64) {\n\tread := false\n\tfor reader.HasNext() {\n\t\tmsg, err := reader.Next(context.Background())\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\t//can I access the details of the message ? yes\n\t\tfmt.Printf(\"%v -> %#v\\n\", msg.ID().EntryID(), msg.ID())\n\t\t//Can i serialize into bytes? Yes\n\t\tmyBytes := msg.ID().Serialize()\n\t\t//Can I store it somewhere? Perhaps a map ? or even on disk in a file ?\n\t\t//In other words: Can I write a byte[] slice to a file? Yes!\n\t\tmsgIndex := msg.ID().EntryID()\n\t\tif msgIndex == startMsgIndex {\n\t\t\tfmt.Println(\"start read: \", msgIndex)\n\t\t\tread = true\n\t\t}\n\t\tif msgIndex > stopMsgIndex {\n\t\t\tfmt.Println(\"stop reading: \", msgIndex)\n\t\t\tread = false\n\t\t}\n\t\tif read == false {\n\t\t\tfmt.Println(\"skipping \", msgIndex)\n\t\t} else {\n\t\t\tfname := strconv.FormatInt(msgIndex, 10) + \".dat\"\n\t\t\tfmt.Println(\"written bytes: \", writeBytesToFile(fname, myBytes))\n\t\t\tfmt.Printf(\"Received message msgId: %#v -- content: '%s' published at %v\\n\",\n\t\t\t\tmsg.ID(), string(msg.Payload()), msg.PublishTime())\n\t\t}\n\t\t/*\n\t\t\t//FYI - to save and reread a msgId from store: https://githubmemory.com/@storm-5\n\t\t\tmsgId := msg.ID()\n\t\t\tmsgIdBytes := msgId.Serialize()\n\t\t\tidNew, _ := pulsar.DeserializeMessageID(msgIdBytes)\n\t\t\treaderInclusive, err := client.CreateReader(pulsar.ReaderOptions{\n\t\t\t\tTopic:                   \"ragnarok/transactions/requests\",\n\t\t\t\tStartMessageID:          idNew,\n\t\t\t\tStartMessageIDInclusive: true,\n\t\t\t})\n\t\t*/\n\t}\n}\nfunc retrieveRange(client pulsar.Client) {\n\tsomeFiles := getFiles(\"./data/\")\n\tfor _, f := range someFiles {\n\t\tfIndex := strings.Split(f, \".\")[0]\n\t\tfmt.Println(\"re-reading message index -> \", fIndex)\n\t\tmsgIdBytes := readBackByEntryId(\"./data\", fIndex)\n\t\tfmt.Printf(\"boom -> %#v\\n\", msgIdBytes)\n\t\tidNew, err := pulsar.DeserializeMessageID(msgIdBytes)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Println(\"Got message entry id => \", idNew.EntryID())\n\t\treaderInclusive, err := client.CreateReader(pulsar.ReaderOptions{\n\t\t\tTopic:                   \"ragnarok/transactions/requests\",\n\t\t\tStartMessageID:          idNew,\n\t\t\tStartMessageIDInclusive: true,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer readerInclusive.Close()\n\t\t//defer readerInclusive.Close()\n\t\tfmt.Println(\"bleep!\")\n\t\tmsg, err := readerInclusive.Next(context.Background())\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\t//fmt.Println(\"retrieved message -> \", string(msg.Payload()))\n\t\tfmt.Printf(\"Retrieved message ID message msgId: %#v -- content: '%s' published at %v\\n\",\n\t\t\tmsg.ID(), string(msg.Payload()), msg.PublishTime())\n\t}\n}\nfunc main() {\n\tclient, err := pulsar.NewClient(\n\t\tpulsar.ClientOptions{\n\t\t\tURL:               \"pulsar://localhost:6650\",\n\t\t\tOperationTimeout:  30 * time.Second,\n\t\t\tConnectionTimeout: 30 * time.Second,\n\t\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Could not instantiate Pulsar client: %v\", err)\n\t}\n\tdefer client.Close()\n\treader, err := client.CreateReader(pulsar.ReaderOptions{\n\t\tTopic:          \"ragnarok/transactions/requests\",\n\t\tStartMessageID: pulsar.EarliestMessageID(),\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer reader.Close()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar startMsgId int64 = 55\n\tvar stopMsgId int64 = 66\n\t//stream all the messages from the earliest to latest\n\t//pick a subset between a start and stop id\n\tstreamAll(reader, startMsgId, stopMsgId)\n\t//retrieve the picked range\n\tretrieveRange(client)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71023735/get-the-documents-of-order-id-1-that-are-not-in-order-id-2-mongodb",
    "body": "db.collection.aggregate([\n  {\n    \"$group\": {\n      \"_id\": \"$productName\",\n      \"orderids\": {\n        \"$push\": \"$orderid\"\n      },\n      \"root\": {\n        \"$push\": \"$$ROOT\"\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"$and\": [\n        {\n          \"orderids\": 1\n        },\n        {\n          \"orderids\": {\n            \"$ne\": 2\n          }\n        }\n      ]\n    }\n  },\n  {\n    \"$unwind\": \"$root\"\n  },\n  {\n    \"$project\": {\n      \"_id\": \"$root._id\",\n      \"orderid\": \"$root.orderid\",\n      \"productName\": \"$root.productName\"\n    }\n  }\n])"
  },
  {
    "url": "https://stackoverflow.com/questions/70962304/google-docs-access-data",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"google.golang.org/api/option\"\n\t\"google.golang.org/api/sheets/v4\"\n)\nfunc main() {\n\tAPIkey := \"###\" // Please set your API key.\n\tctx := context.Background()\n\tsrv, err := sheets.NewService(ctx, option.WithAPIKey(APIkey))\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to retrieve Docs client: %v\", err)\n\t}\n\tspreadsheetId := \"12i3Lvwb_14fQES27jVP6baqqmWUXWwM7fZy-neDH3bE\"\n\tres, err := srv.Spreadsheets.Get(spreadsheetId).Do()\n\tif err != nil {\n\t\tlog.Fatalf(\"Unable to retrieve data from document: %v\", err)\n\t}\n\tfmt.Printf(\"The title of the doc is: %s\\n\", res.Properties.Title)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70745961/unable-to-access-secret-from-secrets-manager",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\tsecretmanager \"cloud.google.com/go/secretmanager/apiv1\"\n\t\"google.golang.org/api/option\"\n\tsecretmanagerpb \"google.golang.org/genproto/googleapis/cloud/secretmanager/v1\"\n\t\"google.golang.org/grpc/status\"\n)\n// Your Project ID\nconst projectId = \"project-id\"\n// Name of your secret\nconst secret = \"secret\"\nfunc main() {\n\t// Path to your secret\n\t// The version can be a version number as a string (e.g. \"5\") or an\n\t// alias (e.g. \"latest\").\n\tname := fmt.Sprintf(\"projects/%s/secrets/%s/versions/latest\", projectId, secret)\n\n\tctx := context.Background()\n\n\t// Explicitly reads credentials from the specified path.\n\t// Create the client.\n\t\tclient, err := secretmanager.NewClient(ctx,\n\t\toption.WithCredentialsFile(\"service-account-key.json\"))\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to create secretmanager client\\n\")\n\t\tif s, ok := status.FromError(err); ok {\n\t\t\tlog.Println(s.Message())\n\t\t\tfor _, d := range s.Proto().Details {\n\t\t\t\tlog.Println(d)\n\t\t\t}\n\t\t}\n\t}\n\tdefer client.Close()\n\t// Build the request.\n\treq := &secretmanagerpb.AccessSecretVersionRequest{\n\t\tName: name,\n\t}\n\n\t// accessSecretVersion accesses the payload for the given secret version if one exists.\n\t// Call the API.\n\tresult, err := client.AccessSecretVersion(ctx, req)\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to access secret version\\n\")\n\t\tif s, ok := status.FromError(err); ok {\n\t\t\tlog.Println(s.Message())\n\t\t\tfor _, d := range s.Proto().Details {\n\t\t\t\tlog.Println(d)\n\t\t\t}\n\t\t}\n\t}\n\t// WARNING: Do not print the secret in a production environment - this snippet\n\t// is showing how to access the secret material.\n\tlog.Printf(\"Plaintext: %s\\n\", string(result.Payload.Data))\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, `<h1>For testing purposes only.</h1>\n\t\t<h2>Do not use in production enviroments</h2>\n\t\t<p>Your secret is shown on Logs.<p>`)\n\t})\n\tport := os.Getenv(\"PORT\")\n\tfmt.Printf(\"Starting server at port %s\\n\", port)\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70738155/how-do-i-enforce-the-proper-data-types-on-gofiber-golang-from-post-data-from-fro",
    "body": "func PostCreate(c *fiber.Ctx) error {\n\n    type PostCreateData struct {\n        fieldOne       string  `json:\"field_one\" form:\"field_one\" validate:\"required\"`\n        fieldTwo       string  `json:\"field_two\" form:\"field_two\" validate:\"required\"`\n        fieldThree     float64 `json:\"field_three,string\" form:\"field_three\" validate:\"required\"`\n    }\n    data := PostCreateCreateData{}\n    if err := c.BodyParser(&data); err != nil {\n        return err\n    }\n    validate := validator.New()\n        if err := validate.Struct(data); err != nil {\n        return err\n    }\n    postCreate := models.PostCreate{\n        fieldOne:         data.fieldOne,\n        fieldTwo:         data.fieldTwo,\n        fieldThree:       float64(data.fieldThree),\n    }\n    database.DB.Create(&postCreate)\n    return c.JSON(postCreate)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70723267/docker-build-for-go-project-with-gitlab-private-repositories",
    "body": "FROM golang:1.16.8-alpine3.14 as BuildStage\n# setup Git & SSL (for getting dependencies)\nRUN apk update && \\\n    apk add --no-cache git ca-certificates tzdata gcc libc-dev openssh-client && \\\n    update-ca-certificates\nENV GOPRIVATE=\"gitlab.com/MyProject\"\nRUN mkdir -p -m 0600 ~/.ssh && ssh-keyscan gitlab.com >> ~/.ssh/known_hosts\nRUN git config --global url.\"git@gitlab.com:\".insteadOf \"https://gitlab.com/\"\n# setup an application user\nENV USER=appuser\nENV UID=10001\nRUN adduser --disabled-password \\\n            --gecos \"\" \\\n            --home \"/nonexistent\" \\\n            --shell \"/sbin/nologin\" \\\n            --no-create-home \\\n            --uid \"${UID}\" \"${USER}\"\n# build the project\nWORKDIR $GOPATH/src/myproject\nCOPY . .\n# make sure Go knows the packages are private\nRUN go env -w GOPRIVATE=\"gitlab.com/MyProject/*\"\n# build the binary\nRUN --mount=type=ssh go mod download -x && go mod verify\nRUN --mount=type=ssh GOOS=linux GOARCH=amd64 go build -ldflags='-w -s -extldflags \"-static\"' -tags musl -a -o /go/bin/mybinary"
  },
  {
    "url": "https://stackoverflow.com/questions/70701958/staticcheck-undesirably-checks-items-outside-the-immediate-directory",
    "body": "$ staticcheck ./...\nconfig/config.go:114:6: func getAuth is unused (U1000)\nexporter/http.go:38:2: should use for range instead of for { select {} } (S1000)\nexporter/http.go:55:6: func getEarlierDaysMs is unused (U1000)\nexporter/http.go:70:10: error strings should not be capitalized (ST1005)\nexporter/http.go:79:10: error strings should not be capitalized (ST1005)\nexporter/http.go:84:10: error strings should not be capitalized (ST1005)\nexporter/http.go:84:10: error strings should not end with punctuation or a newline (ST1005)\nexporter/http.go:88:10: error strings should not be capitalized (ST1005)\nexporter/http.go:88:10: error strings should not end with punctuation or a newline (ST1005)\nexporter/http.go:92:10: error strings should not be capitalized (ST1005)\nexporter/http.go:92:10: error strings should not end with punctuation or a newline (ST1005)\nexporter/structs.go:101:12: unknown JSON option \"int64\" (SA5008)\n$ go version\ngo version go1.17.4 linux/amd64\n$ staticcheck --version\nstaticcheck 2021.1.2 (v0.2.2)"
  },
  {
    "url": "https://stackoverflow.com/questions/70513069/how-to-pass-a-message-from-go-and-consuming-it-from-nestjs-with-rabbitmq",
    "body": "type MessageQueue struct {\n\tBody    string `json:\"body\"`\n\tPattern string `json:\"pattern\"`\n\tAge     string `json:\"age\"`\n    Data    string `json:\"data\"`\n}\nfunc NewMessageQueue(body, pattern, age string, data) *MessageQueue {\n\treturn &MessageQueue{\n\t\tbody, pattern, age, data\n\t}\n}\nfunc (m *MessageQueue) Marshal() ([]byte, error) {\n\tbytes, err := json.Marshal(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes, err\n}\nfunc main() {\n    ...\n\tmessage := NewMessageQueue(\"Hello...\", \"test\", \"20\", \"data...\")\n\t// TODO: check the error\n\tbody, _ := message.Marshal()\n\terr = ch.Publish(\n\t\t\"\",     \t// exchange\n\t\tq.Name,     // routing key\n\t\tfalse,  \t// mandatory\n\t\tfalse,  \t// immediate\n\t\tamqp.Publishing{\n\t\t\tContentType: \"text/plain\",\n\t\t\tBody:        body,\n\t\t},\n\t)\n    ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70466094/writing-to-ffpmeg-stdin-freezes-program",
    "body": "cmd := exec.Command(\n\t\"ffmpeg\",\n\t\"-i\", \"pipe:0\", // read from stdin\n\t\"-vcodec\", \"copy\",\n\t\"-acodec\", \"copy\",\n\t\"-f\", \"matroska\",\n\t\"pipe:1\",\n)\nout, err := cmd.StdoutPipe()\nif err != nil {\n\tpanic(err)\n}\nin, err := cmd.StdinPipe()\nwriter := bufio.NewWriter(in)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"starting\")\nerr = cmd.Start()\nif err != nil {\n\tpanic(err)\n}\ngo func() {\n\tdefer writer.Flush()\n\tdefer in.Close()\n\tfmt.Println(\"writing\")\n\t_, err = writer.Write(bytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}()\nvar outBytes []byte\ndefer out.Close()\nfmt.Println(\"reading\")\noutBytes, err = io.ReadAll(out)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"waiting\")\nerr = cmd.Wait()\nif err != nil {\n\tpanic(err)\n}\nreturn outBytes, nil"
  },
  {
    "url": "https://stackoverflow.com/questions/70382337/how-to-properly-delay-between-executing-a-pool-of-workers",
    "body": "func Test_t(t *testing.T) {\n\t// just a published, this publishes result on a chan\n\tpublish := func(s int, ch chan int, wg *sync.WaitGroup) {\n\t\tch <- s // this is blocking!!!\n\t\twg.Done()\n\t}\n\twg := &sync.WaitGroup{}\n\twg.Add(100)\n\t// we'll use done channel to notify the work is done\n\tres := make(chan int)\n\tdone := make(chan struct{})\n\t// create worker that will notify that all results were published\n\tgo func() {\n\t\twg.Wait()\n\t\tdone <- struct{}{}\n\t}()\n\n\t// let's create a jobs that publish on our res chan\n\t// please note all goroutines are created immediately\n\tfor i := 0; i < 100; i++ {\n\t\tgo publish(i, res, wg)\n\t}\n\t// lets get 30 args and then wait\n\tvar resCounter int\nforloop:\n\tfor {\n\t\tselect {\n\t\tcase ss := <-res:\n\t\t\tprintln(ss)\n\t\t\tresCounter += 1\n\t\t\t// break the loop\n\t\t\tif resCounter%30 == 0 {\n\t\t\t\t// after receiving 30 results we are blocking this thread\n\t\t\t\t// no more results will be taken from the channel for 5 seconds\n\t\t\t\tprintln(\"received 30 results, waiting...\")\n\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t}\n\t\tcase <-done:\n\t\t\t// we are done here, let's break this infinite loop\n\t\t\tbreak forloop\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70134680/how-to-delete-nth-element-in-mongodb-array-with-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"time\"\n)\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tmClient, err := mongo.Connect(ctx, options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tdefer func() {\n\t\tif err = mClient.Disconnect(ctx); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\tcollection := mClient.Database(\"temp\").Collection(\"tmp10\")\n\tctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tvar result bson.M\n\terr = collection.FindOne(ctx, bson.D{}).Decode(&result)\n\tfmt.Println(result)\n\tindexToRemove := \"0\"  // <- Input index to remove in string or convert it into string\n\t_, err = collection.UpdateOne(\n\t\tctx,\n\t\tbson.D{},\n\t\tbson.D{\n\t\t\t{\"$unset\", bson.D{\n\t\t\t\t{\"expenses.\"+indexToRemove, 1},  // <- Removes `indexToRemove` th element from `expenses` array\n\t\t\t}},\n\t\t},\n\t)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\terr = collection.FindOne(ctx, bson.D{}).Decode(&result)\n\tfmt.Println(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70088621/right-way-to-pull-data-from-mongodb-in-golang",
    "body": "func main() {\n    ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)\n    client, err = mongo.Connect(ctx, options.Client().ApplyURI(\"mongodb://localhost:27017/\"))\n    if err != nil {\n\t    log.Fatalf(\"can't connect to database: %v\\n\", err)\n    }\n\n    objID, _ := primitive.ObjectIDFromHex(\"619dd79acad38082f9ce16af\")\n\n    db := client.Database(\"db\")\n    col := db.Collection(\"products\")\n\n    filter := bson.D{\n        {\"_id\", objID},\n    }\n\n    dest := &Project{}\n\n    err := col.FindOne(ctx, filter).Decode(dest)\n    if err != nil {\n        log.Fatalln(err)\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/69963970/making-a-widget-using-multiple-widgets",
    "body": "package fyne_custom\nimport (\n\t\"os\"\n\t\"fyne.io/fyne/v2\"\n\t\"fyne.io/fyne/v2/data/binding\"\n\t\"fyne.io/fyne/v2/widget\"\n\t\"github.com/sqweek/dialog\"\n)\ntype FileChoice struct {\n\twidget.BaseWidget\n\tpath                               binding.String\n\tlabelText, placeHolder, buttonText string\n}\nfunc (fc FileChoice) Text() string {\n\ttext, _ := fc.path.Get()\n\treturn text\n}\nfunc NewFileChoice(labelText, placeHolder, buttonText string) *FileChoice {\n\tf := &FileChoice{}\n\tf.path = binding.NewString()\n\tf.labelText = labelText\n\tf.placeHolder = placeHolder\n\tf.buttonText = buttonText\n\tf.ExtendBaseWidget(f)\n\treturn f\n}\ntype fileChoiceRender struct {\n\tfc     *FileChoice\n\tlabel  *widget.Label\n\tentry  *widget.Entry\n\tbutton *widget.Button\n}\nfunc (fcr fileChoiceRender) Objects() []fyne.CanvasObject {\n\treturn []fyne.CanvasObject{fcr.label, fcr.entry, fcr.button}\n}\nfunc (fcr fileChoiceRender) MinSize() fyne.Size {\n\tvar minHeight float32\n\tvar totalWidth float32\n\tfor _, item := range fcr.Objects() {\n\t\tif item.MinSize().Height > minHeight {\n\t\t\tminHeight = item.MinSize().Height\n\t\t}\n\t\ttotalWidth += item.MinSize().Width\n\t}\n\treturn fyne.NewSize(totalWidth, minHeight)\n}\nfunc (fcr fileChoiceRender) Layout(size fyne.Size) {\n\ttopLeft := fyne.NewPos(0, 0)\n\tfcr.label.Move(topLeft)\n\tfcr.label.Resize(fyne.NewSize(fcr.label.MinSize().Width, size.Height))\n\ttopLeft = topLeft.Add(fyne.NewPos(fcr.label.MinSize().Width, 0))\n\tfcr.entry.Move(topLeft)\n\tfcr.entry.Resize(fyne.NewSize(size.Width-fcr.label.MinSize().Width-fcr.button.MinSize().Width, size.Height))\n\ttopLeft = topLeft.Add(fyne.NewPos(size.Width-fcr.label.MinSize().Width-fcr.button.MinSize().Width, 0))\n\tfcr.button.Move(topLeft)\n\tfcr.button.Resize(fyne.NewSize(fcr.button.MinSize().Width, size.Height))\n}\nfunc (fcr fileChoiceRender) Destroy() {}\nfunc (fcr fileChoiceRender) Refresh() {}\nfunc (fc FileChoice) CreateRenderer() fyne.WidgetRenderer {\n\tlabel := widget.NewLabel(fc.labelText)\n\tentry := widget.NewEntryWithData(fc.path)\n\tentry.PlaceHolder = fc.placeHolder\n\tbutton := widget.NewButton(fc.buttonText, func() {\n\t\tcwd, _ := os.Getwd()\n\t\tdefer os.Chdir(cwd)\n\t\tfile, err := dialog.File().Load()\n\t\tif err != nil {\n\t\t\tfile = \"\"\n\t\t}\n\t\tif file != \"\" {\n\t\t\tentry.SetText(file)\n\t\t}\n\t})\n\treturn &fileChoiceRender{label: label, entry: entry, button: button}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69957715/how-can-i-read-write-an-array-of-objects-inside-a-postgresql-row-golang",
    "body": "type Comment struct {\n    Id          int\n    User        string\n    Email       string\n    Date        string\n    Comment     string\n}\ntype Comments []Comment\n// Make the Comments type implement the driver.Valuer interface. This method\n// simply returns the JSON-encoded representation of the struct.\nfunc (c Comments) Value() (driver.Value, error) {\n    return json.Marshal(c)\n}\n// Make the Comments type implement the sql.Scanner interface. This method\n// simply decodes a JSON-encoded value into the struct fields.\nfunc (c *Comments) Scan(value interface{}) error {\n    var b []byte\n    switch t := value.(type) {\n    case []byte:\n        b = t\n    case string:\n        b = string(t)\n    default:\n        return errors.New(\"unknown type\")\n    }\n    return json.Unmarshal(b, &c)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69929360/how-to-make-pagination-from-inline-buttons-telegram-in-golang",
    "body": "func DummyDataTextMarkup(currentPage, count int) (text string, markup tgbotapi.InlineKeyboardMarkup) {\n\ttext = strings.Join(data[currentPage*count:currentPage*count+count], \"\\n\")\n\tvar rows []tgbotapi.InlineKeyboardButton\n\tif currentPage > 0 {\n\t\trows = append(rows, tgbotapi.NewInlineKeyboardButtonData(\"Previous\", fmt.Sprintf(\"pager:prev:%d:%d\", currentPage, count)))\n\t}\n\tif currentPage < maxPages-1 {\n\t\trows = append(rows, tgbotapi.NewInlineKeyboardButtonData(\"Next\", fmt.Sprintf(\"pager:next:%d:%d\", currentPage, count)))\n\t}\n\tmarkup = tgbotapi.NewInlineKeyboardMarkup(rows)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69929360/how-to-make-pagination-from-inline-buttons-telegram-in-golang",
    "body": "func CallbackQueryHandler(query *tgbotapi.CallbackQuery) {\n\tsplit := strings.Split(query.Data, \":\")\n\tif split[0] == \"pager\" {\n\t\tHandleNavigationCallbackQuery(query.Message.MessageID, split[1:]...)\n\t\treturn\n\t}\n}\nfunc HandleNavigationCallbackQuery(messageId int, data ...string) {\n\tpagerType := data[0]\n\tcurrentPage, _ := strconv.Atoi(data[1])\n\titemsPerPage, _ := strconv.Atoi(data[2])\n\tif pagerType == \"next\" {\n\t\tnextPage := currentPage + 1\n\t\tif nextPage < maxPages {\n\t\t\tSendDummyData(chatId, nextPage, itemsPerPage, &messageId)\n\t\t}\n\t}\n\tif pagerType == \"prev\" {\n\t\tpreviousPage := currentPage - 1\n\t\tif previousPage >= 0 {\n\t\t\tSendDummyData(chatId, previousPage, itemsPerPage, &messageId)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69791659/how-to-create-a-namgedrange-using-google-sheets-api-when-doing-a-batch-update-wi",
    "body": "config, err := google.ConfigFromJSON(b, \"https://www.googleapis.com/auth/spreadsheets\")\nif err != nil {\n\tlog.Fatalf(\"Unable to parse client secret file to config: %v\", err)\n}\nclient := getClient(config)\nsrv, err := sheets.NewService(ctx, option.WithHTTPClient(client))\nif err != nil {\n\tlog.Fatalf(\"Unable to retrieve Sheets client: %v\", err)\n}\nspreadsheetId := \"###\" // Please set your Spreadsheet ID.\nsheetId := 1234567890 // Please set your sheet ID.\nnameOfNamedRange := \"sampleNamedRange1\" // Please set the name of the named range.\nreq := sheets.Request{\n\tAddNamedRange: &sheets.AddNamedRangeRequest{\n\t\tNamedRange: &sheets.NamedRange{\n\t\t\tRange: &sheets.GridRange{\n\t\t\t\tSheetId:          int64(sheetId),\n\t\t\t\tStartRowIndex:    1,\n\t\t\t\tEndRowIndex:      3,\n\t\t\t\tStartColumnIndex: 1,\n\t\t\t\tEndColumnIndex:   3,\n\t\t\t},\n\t\t\tName: nameOfNamedRange,\n\t\t},\n\t},\n}\nrequestBody := &sheets.BatchUpdateSpreadsheetRequest{\n\tRequests: []*sheets.Request{&req},\n}\nresp, err := srv.Spreadsheets.BatchUpdate(spreadsheetId, requestBody).Do()\nif err != nil {\n\tlog.Fatal(err)\n}\nfmt.Print(resp)"
  },
  {
    "url": "https://stackoverflow.com/questions/69753926/how-to-mock-zap-logger-from-ctrl-sigs-k8s-io-controller-runtime",
    "body": "func SetLogger(buf *bytes.Buffer) {\n    opts := zap.Options{\n        Development:     developmentFlag,\n        StacktraceLevel: stacktraceLevel,\n        Level:           isLevelEnabler,\n        Encoder:         logFmtEncoder,\n        // here 'zap' selector is 'go.uber.org/zap'\n        ZapOpts: []zap.Option{\n\t\t\tzap.Hooks(func(entry zapcore.Entry) error {\n\t\t\t\tbuf.WriteString(entry.Message)\n\t\t\t\treturn nil\n\t\t\t}),\n\t\t},\n    }\n    // here I call 'k8szap' selector the package 'sigs.k8s.io/controller-runtime/pkg/log/zap'\n    ctrl.SetLogger(k8szap.New(k8szap.UseFlagOptions(&opts)))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69730972/is-it-possible-to-specify-an-outbound-proxy-using-the-twilio-go-client-library",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"github.com/twilio/twilio-go/client\"\n\tapiv2010 \"github.com/twilio/twilio-go/rest/api/v2010\"\n)\nfunc main() {\n\tfrom := os.Getenv(\"TWILIO_FROM_PHONE_NUMBER\")\n\tto := os.Getenv(\"TWILIO_TO_PHONE_NUMBER\")\n\tbody := os.Getenv(\"TWILIO_MSG_BODY\")\n\taccountSid := os.Getenv(\"TWILIO_ACCOUNT_SID\")\n\tauthToken := os.Getenv(\"TWILIO_AUTH_TOKEN\")\n\tproxyUrl, err := url.Parse(\"http://localhost:8080\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tc := client.Client{\n\t\tCredentials: &client.Credentials{\n\t\t\tUsername: accountSid,\n\t\t\tPassword: authToken,\n\t\t},\n\t\tHTTPClient: &http.Client{\n\t\t\tTransport: &http.Transport{\n\t\t\t\tProxy: http.ProxyURL(proxyUrl),\n\t\t\t},\n\t\t},\n\t}\n\tc.SetAccountSid(accountSid)\n\tparams := &apiv2010.CreateMessageParams{\n\t\tTo:   &to,\n\t\tFrom: &from,\n\t\tBody: &body,\n\t}\n\ttextMsgSvc := apiv2010.NewApiServiceWithClient(&c)\n\tresp, err := textMsgSvc.CreateMessage(params)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t} else {\n\t\tresponse, _ := json.Marshal(*resp)\n\t\tfmt.Println(\"Response: \" + string(response))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69722488/does-zap-logger-support-escape-character-n-and-t-to-print-new-line-errorve",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/buffer\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"os\"\n)\nfunc main() {\n\tcore := zapcore.NewCore(\n\t\t&EscapeSeqJSONEncoder{ Encoder: zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()) },\n\t\tos.Stdout,\n\t\tzapcore.InfoLevel,\n\t)\n\tlogger := zap.New(core)\n\tlogger.Info(\"foo\", zap.String(\"some_field\", \"foo\\nbar\"))\n}\ntype EscapeSeqJSONEncoder struct {\n\tzapcore.Encoder\n}\nfunc (enc *EscapeSeqJSONEncoder) Clone() zapcore.Encoder {\n\treturn enc // TODO: change me\n}\nfunc (enc *EscapeSeqJSONEncoder) EncodeEntry(entry zapcore.Entry, fields []zapcore.Field) (*buffer.Buffer, error) {\n    // call EncodeEntry on the embedded interface to get the\n    // original output\n\tb, err := enc.Encoder.EncodeEntry(entry, fields)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tnewb := buffer.NewPool().Get()\n    // then manipulate that output into what you need it to be\n\tnewb.Write(bytes.Replace(b.Bytes(), []byte(\"\\\\n\"), []byte(\"\\n\"), -1))\n\treturn newb, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69655088/go-client-connect-to-an-url-with-socket",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/url\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\t\"github.com/gorilla/websocket\"\n)\nvar addr = flag.String(\"addr\", \"127.0.0.1:8080\", \"http service address\")\nfunc main() {\n\tflag.Parse()\n\tlog.SetFlags(0)\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tu := url.URL{Scheme: \"ws\", Host: *addr, Path: \"/register\"}\n\tlog.Printf(\"connecting to %s\", u.String())\n\tc, _, err := websocket.DefaultDialer.Dial(u.String(), nil)\n\tif err != nil {\n\t\tlog.Fatal(\"dial:\", err)\n\t}\n\tdefer c.Close()\n\tdone := make(chan struct{})\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := c.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tcase t := <-ticker.C:\n\t\t\terr := c.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase <-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\t\t\t// Cleanly close the connection by sending a close message and then\n\t\t\t// waiting (with timeout) for the server to close the connection.\n\t\t\terr := c.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-done:\n\t\t\tcase <-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69398824/creating-per-provider-loggers-in-wire-dependency-injection",
    "body": "// +build wireinject\npackage serve\nimport /*...*/\nfunc initializeLoginService(\n        config interfaces.MySQLConfig,\n        jwtKey service.JWTKey,\n        loginServiceLogger service.LoginServiceLogger,\n        jwtServiceLogger service.JWTServiceLogger,\n        userDaoLogger service.UserDaoLogger,\n        databaseLogger database.DatabaseLogger,\n    ) (interfaces.LoginService, error) {\n\n    wire.Build(\n        // bind interfaces to implementations\n        wire.Bind(new(interfaces.LoginService), new(*service.LoginServiceImpl)),\n        wire.Bind(new(interfaces.JWTService), new(*service.JWTServiceImpl)),\n        wire.Bind(new(interfaces.UserDao), new(*dao.UserDao)),\n        // services\n        service.NewLoginService,\n        service.NewJWTService,\n        // daos\n        dao.NewUserDao,\n        // database\n        database.Connect,\n    )\n    return nil, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69335827/what-is-the-best-way-to-deal-with-plain-text-passwords-in-go",
    "body": "const ConfigFileEnv \"ConfigFile\" // avoid typing errors\nvar config Config\n...\nif f, err := os.Open(os.Getenv(ConfigFileEnv); err != nil {\n  panic(fmt.Errorf(\"Couldn't open config file %s: %w\",\n    os.Getenv(ConfigFileEnv),\n    err,\n  ))\n} else if err := json.NewDecoder(f).Decode(&config); err != nil {\n   panic(fmt.Errorf(\"Couldn't decode json from config file %s: %w\",\n      os.Getenv(ConfigFileEnv),\n      err\n   )\n}\n// Now config file has been loaded into config\n...\nreq.SetBasicAuth(config.Username, config.Password)"
  },
  {
    "url": "https://stackoverflow.com/questions/69105774/set-custom-width-for-widgets",
    "body": "import (\n\t\"fyne.io/fyne/v2\"\n\t\"fyne.io/fyne/v2/canvas\"\n\t\"fyne.io/fyne/v2/container\"\n\t\"fyne.io/fyne/v2/layout\"\n\t\"fyne.io/fyne/v2/app\"\n\t\"image/color\"\n)\nvar topLevelLayOutContent *fyne.Container\nfunc main() {\n\ta := app.New()\n\twin := a.NewWindow(\"Server Mon\")\n\tc1 := canvas.NewText(\"Canvas Object 1\", color.White)\n\tc2 := canvas.NewText(\"Canvas Object 2\", color.White)\n\tn1 := canvas.NewText(\"Canvas Object 3\", color.White)\n\tn2 := canvas.NewText(\"Canvas Object 4\", color.White)\n\ttopLevelLayOutContent = container.New(layout.NewVBoxLayout(),\n\t\tcontainer.New(layout.NewMaxLayout(),\n\t\t\tcontainer.New(layout.NewGridLayoutWithColumns(2), c1, c2)),\n\t\tcontainer.New(layout.NewMaxLayout(),\n\t\t\tcontainer.New(layout.NewGridLayoutWithColumns(2), n1, n2)),\n\t)\n\twin.SetContent(topLevelLayOutContent)\n\twin.Resize(fyne.NewSize(float32(400), float32(30)))\n\twin.ShowAndRun()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68775773/managing-producer-consumer-deadlock-in-case-of-failure",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"sync\"\n)\nfunc read(ctx context.Context) (<-chan int, <-chan error) {\n\tch := make(chan int)\n\te := make(chan error)\n\tgo func() {\n\t\tdefer close(e)\n\t\tdefer close(ch)\n\t\tfor i := 0; i < 12; i++ {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase ch <- i:\n\t\t\t}\n\t\t}\n\t}()\n\treturn ch, e\n}\nfunc manipulate(in <-chan int) (<-chan int, <-chan error) {\n\tch := make(chan int)\n\te := make(chan error)\n\tgo func() {\n\t\tdefer close(e)\n\t\tdefer close(ch)\n\t\tfor n := range in {\n\t\t\tch <- 2 * n\n\t\t}\n\t}()\n\treturn ch, e\n}\nfunc write(in <-chan int) <-chan error {\n\te := make(chan error)\n\tgo func() {\n\t\tdefer close(e)\n\t\tfor n := range in {\n\t\t\tfmt.Println(\"written: \", n)\n\t\t\tif n == 10 {\n\t\t\t\te <- fmt.Errorf(\"output error during write\")\n\t\t\t}\n\t\t}\n\t}()\n\treturn e\n}\nfunc collectErrors(errs ...<-chan error) {\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < len(errs); i++ {\n\t\twg.Add(1)\n\t\tgo func(errs <-chan error) {\n\t\t\tdefer wg.Done()\n\t\t\tfor err := range errs {\n\t\t\t\tlog.Printf(\"%v\", err)\n\t\t\t}\n\t\t}(errs[i])\n\t}\n\twg.Wait()\n}\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tch1, err1 := read(ctx)\n\tch2, err2 := manipulate(ch1)\n\terr3 := write(ch2)\n\tcollectErrors(err1, err2, err3)\n\tfmt.Println(\"main wait complete\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68605305/multiple-static-files-directories",
    "body": "package main\nimport (\n\t\"embed\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n//go:embed static\nvar staticFiles embed.FS\nfunc main() {\n\tgo func() {\n\t\thttp.HandleFunc(\"/favicon.ico\", func(rw http.ResponseWriter, r *http.Request) {})\n\t\t// http.FS can be used to create a http Filesystem\n\t\tvar staticFS = http.FS(staticFiles)\n\t\tfs := http.FileServer(staticFS) // embeded static files\n\t\t// Serve static files, to be embedded in the binary\n\t\thttp.Handle(\"/static/\", fs)\n\t\t// Serve public files, to be beside binary\n\t\thttp.Handle(\"/public/\", http.StripPrefix(\"/public/\", http.FileServer(http.Dir(\"./files\"))))\n\t\thttp.HandleFunc(\"/getSkills\", getSkills)\n\t\tlog.Println(\"Listening on :3000...\")\n\t\terr := http.ListenAndServe(\":3000\", nil)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68508665/how-to-stop-the-repetition-of-code-when-parsing-files",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nvar (\n\tfiles = []string{\"ui/html/home.html\", \"ui/html/footer.html\", \"ui/html/base.html\"}\n)\nfunc indexHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/\" {\n\t\thttp.NotFound(w, r)\n\t\treturn\n\t}\n\ttmpl, err := template.ParseFiles(files...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttmpl.Execute(w, nil)\n}\nfunc signup(w http.ResponseWriter, r *http.Request) {\n\ttmpl, err := template.ParseFiles(files...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttmpl.Execute(w, nil)\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", indexHandler)\n\thttp.HandleFunc(\"/signup\", signup)\n\tlog.Println(\"Starting the server at :4000\")\n\thttp.ListenAndServe(\":4000\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68508665/how-to-stop-the-repetition-of-code-when-parsing-files",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc makeTpl(base string) *template.Template {\n\tfiles := []string{base, \"ui/html/footer.html\", \"ui/html/base.html\"}\n\treturn template.Must(template.ParseFiles(files...))\n}\nvar (\n\tindexTpml  = makeTpl(\"ui/html/home.html\")\n\tsignupTpml = makeTpl(\"ui/html/signup.html\")\n)\nfunc indexHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path != \"/\" {\n\t\thttp.NotFound(w, r)\n\t\treturn\n\t}\n\tindexTpml.Execute(w, nil)\n}\nfunc signup(w http.ResponseWriter, r *http.Request) {\n\tsignupTpml.Execute(w, nil)\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", indexHandler)\n\thttp.HandleFunc(\"/signup\", signup)\n\tlog.Println(\"Starting the server at :4000\")\n\thttp.ListenAndServe(\":4000\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68384426/how-to-process-a-request-that-has-multiple-inputs-and-multiple-files-at-the-same",
    "body": "func storeFile(part *multipart.Part) error {\n\tname := part.FileName()\n\toutfile, err := os.Create(\"uploads/\" + name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outfile.Close()\n\t_, err = io.Copy(outfile, part)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc filePOST(w http.ResponseWriter, r *http.Request) error {\n\tfmt.Println(\"File Upload Endpoint Hit\")\n\tmr, err := r.MultipartReader()\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor {\n\t\tpart, err := mr.NextPart()\n\t\t// This is OK, no more parts\n\t\tswitch {\n\t\tcase errors.Is(err, io.EOF):\n\t\t\tfmt.Println(\"done\")\n\t\t\treturn nil\n\t\tcase err != nil:\n\t\t\t// Some error\n\t\t\treturn err\n\t\tdefault:\n\t\t\tswitch part.FormName() {\n\t\t\tcase \"coverArt\", \"profile\", \"songs\", \"videos\":\n\t\t\t\tif err := storeFile(part); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/upload\", func(writer http.ResponseWriter, request *http.Request) {\n\t\terr := filePOST(writer, request)\n\t\tif err != nil {\n\t\t\thttp.Error(writer, err.Error(), http.StatusInternalServerError)\n\t\t\tlog.Println(\"Error\", err)\n\t\t}\n\t})\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68384426/how-to-process-a-request-that-has-multiple-inputs-and-multiple-files-at-the-same",
    "body": "func storeFile(part *multipart.FileHeader) error {\n\tname := part.Filename\n\tinfile, err := part.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer infile.Close()\n\toutfile, err := os.Create(\"uploads/\" + name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outfile.Close()\n\t_, err = io.Copy(outfile, infile)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc FilePOST(w http.ResponseWriter, r *http.Request) error {\n\tfmt.Println(\"File Upload Endpoint Hit\")\n\tif err := r.ParseMultipartForm(2 << 24); err != nil {\n\t\treturn err\n\t}\n\tfor _, fileType := range []string{\"coverArt\", \"profile\", \"songs\", \"videos\"} {\n\t\tuploadedFiles, exists := r.MultipartForm.File[fileType]\n\t\tif !exists {\n\t\t\tcontinue\n\t\t}\n\t\tfor _, file := range uploadedFiles {\n\t\t\tif err := storeFile(file); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\nfunc main() {\n\thttp.HandleFunc(\"/upload\", func(writer http.ResponseWriter, request *http.Request) {\n\t\terr := FilePOST(writer, request)\n\t\tif err != nil {\n\t\t\thttp.Error(writer, err.Error(), http.StatusInternalServerError)\n\t\t\tlog.Println(\"Error\", err)\n\t\t}\n\t})\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68377034/how-to-generate-a-tree-parent-child-in-json-format-from-a-map",
    "body": "func (n *Node) InsertNode(path string, o *Node) bool {\n\tparts := strings.Split(path, \" \")\n\ttarget := n\n\tfor _, part := range parts {\n\t\tfound := false\n\t\tfor _, child := range target.Children {\n\t\t\tif child.Name == part {\n\t\t\t\ttarget = child\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\treturn false\n\t\t}\n\t}\n\ttarget.Children = append(target.Children, o)\n\treturn true\n}\nfunc third_example() {\n\troot := &Node{Name: \"1\"}\n\troot.Children = append(root.Children, &Node{Name: \"3\"})\n\troot.InsertNode(\"3\", &Node{Name: \"5\"})\n\tbytes, err := json.Marshal(root)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(bytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68358940/web-crawler-stops-at-first-page",
    "body": "func processElement(index int, element *goquery.Selection) {\n    href, exists := element.Attr(\"href\")\n    if exists && strings.HasPrefix(href, \"http\") {\n        crawlWebsite = href\n        processUrl(crawlWebsite)\n    }\n}\nfunc processUrl(crawlWebsite string) {\n    response, err := http.Get(crawlWebsite)\n    if err != nil {\n        log.Fatalf(\"error on current website\")\n    }\n    defer response.Body.Close()\n    document, err := goquery.NewDocumentFromReader(response.Body)\n    if err != nil {\n        log.Fatal(\"Error loading HTTP response body.\", err)\n    }\n    document.Find(\"img\").Each(func(index int, element *goquery.Selection) {\n        imgSrc, exists := element.Attr(\"src\")\n        if strings.HasPrefix(imgSrc, \"http\") && exists {\n            fileName := fmt.Sprintf(\"./images/img\" + strconv.Itoa(imageCount) + \".jpg\")\n            currWebsite := fmt.Sprint(imgSrc)\n            fmt.Println(\"[+]\", currWebsite)\n            DownloadFile(fileName, currWebsite)\n            imageCount++\n        }\n    })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68324147/how-to-make-container-for-multiple-servers-in-one-code-base-to-deploy-golang-app",
    "body": "# docker-compose.yml\nversion: '3.8'\nservices:\n  accounts:\n    build:\n      context: .\n      dockerfile: Dockerfile.accounts\n  events:\n    build:\n      context: .\n      dockerfile: Dockerfile.events\n  places:\n    build:\n      context: .\n      dockerfile: Dockerfile.places\n  gateway:\n    build:\n      context: .\n      dockerfile: Dockerfile.gateway\n      # (Since a Node app can't reuse Go code, this could also\n      # reasonably be `build: cmd/gateway` using a\n      # `cmd/gateway/Dockerfile`)\n    ports:\n      - 3000:3000"
  },
  {
    "url": "https://stackoverflow.com/questions/68171765/httptest-responserecorder-keeps-the-old-value",
    "body": "func TestHandlerAuthentication(t *testing.T) {\n\tUrlOdoo = \"https://isi.nc\"\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\tOdoo = OdooRPC{createMockOdooClient}\n\tclient = mock_odoorpc.NewMockOdooClient(ctrl)\n\tclient.EXPECT().Authenticate(gomock.Any(), gomock.Any(), invalidUsername, invalidPassword).AnyTimes().Return(fmt.Errorf(\"invalid login\"))\n\tclient.EXPECT().Authenticate(gomock.Any(), gomock.Any(), validUsername, validPassword).AnyTimes().Return(nil)\n\tclient.EXPECT().Logout(gomock.Any()).AnyTimes().Return(nil)\n\tsession = mock_session.NewMockSession(ctrl)\n\tSession = SessionGetter{createMockSession}\n\tsession.EXPECT().Set(\"username\", validUsername).AnyTimes().Return()\n\tsession.EXPECT().Set(\"password\", validPassword).AnyTimes().Return()\n\tsession.EXPECT().Save().AnyTimes().Return(nil)\n\tfor name, test := range map[string]struct {\n\t\tinput Login\n\t\twant  int\n\t}{\n\t\t\"valid login\": {\n\t\t\tinput: Login{\n\t\t\t\tUsername: validUsername,\n\t\t\t\tPassword: validPassword,\n\t\t\t},\n\t\t\twant: 200,\n\t\t},\n\t\t\"invalid login\": {\n\t\t\tinput: Login{\n\t\t\t\tUsername: invalidUsername,\n\t\t\t\tPassword: invalidPassword,\n\t\t\t},\n\t\t\twant: 401,\n\t\t},\n\t} {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tresp := httptest.NewRecorder()\n\t\t\tgin.SetMode(gin.TestMode)\n\t\t\tc, r := gin.CreateTestContext(resp)\n\t\t\tr.POST(\"/test\", func(c *gin.Context) {\n\t\t\t\thandlerAuthentication(c)\n\t\t\t})\n\t\t\tbody, _ := json.Marshal(test.input)\n\t\t\tc.Request, _ = http.NewRequest(http.MethodPost, \"/test\", strings.NewReader(string(body)))\n\t\t\tr.ServeHTTP(resp, c.Request)\n\t\t\tassert.Equal(t, test.want, resp.Code)\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67733845/chromedp-golang-how-to-create-screenshot-and-pdf-from-template-html-string-inst",
    "body": "package main\nimport (\n\t\"context\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"github.com/chromedp/cdproto/page\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\t// construct your html\n\thtml := \"<html><body>test</body></html>\"\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"about:blank\"),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tframeTree, err := page.GetFrameTree().Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn page.SetDocumentContent(frameTree.Frame.ID, html).Do(ctx)\n\t\t}),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tbuf, _, err := page.PrintToPDF().WithPrintBackground(false).Do(ctx)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn ioutil.WriteFile(\"sample.pdf\", buf, 0644)\n\t\t}),\n\t); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67606439/reading-multiple-documents-from-a-yaml-file-and-marshaling-them-with-go-yaml-v3",
    "body": "package main\nimport (\n    \"errors\"\n    \"fmt\"\n    \"io\"\n    \"os\"\n    \"gopkg.in/yaml.v3\"\n)\nfunc main() {\n    reader := io.Reader(os.Stdin)\n    dec := yaml.NewDecoder(reader)\n    for {\n        var node yaml.Node\n        err := dec.Decode(&node)\n        if errors.Is(err, io.EOF) {\n            break\n        }\n        if err != nil {\n            panic(err)\n        }\n        content, err := yaml.Marshal(&node)\n        if err != nil {\n            panic(err)\n        }\n        fmt.Printf(\"Found a doc\\n\\n%s\\n\", content)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67176979/bad-connection-response-to-long-running-mssql-transaction-in-golang",
    "body": "func (requester *Requester) getConn(ctx context.Context) (*sql.Conn, error) {\n\t// First, attempt to ping the server to ensure that the connection is good\n\t// If this fails, then return an error\n\tif err := requester.conn.PingContext(ctx); err != nil {\n\t\treturn nil, err\n\t}\n    // Create an object that will dictate how and when the retries are done\n    // We currently want an exponential backoff that retries a maximum of 5 times\n    repeater := backoff.WithContext(backoff.WithMaxRetries(\n        backoff.NewExponentialBackOff(), 5), ctx)\n    // Do a retry operation with a 500ms wait time and a maximum of 5 retries\n    // and return the result of the operation therein\n    var conn *sql.Conn\n    if err := backoff.Retry(func() error {\n        // Attempt to get the connection to the database\n        var err error\n        if conn, err = requester.conn.Conn(ctx); err != nil {\n            // We failed to get the connection; if we have a login error, an EOF or handshake\n            // failure then we'll attempt the connection again later so just return it and let\n            // the backoff code handle it\n            log.Printf(\"Conn failed, error: %v\", err)\n            if isLoginError(err, requester.serverName, requester.databaseName) {\n                return err\n            } else if strings.Contains(err.Error(), \"EOF\") {\n                return err\n            } else if strings.Contains(err.Error(), \"TLS Handshake failed\") {\n                return err\n            }\n            // Otherwise, we can't recover from the error so return it\n            return backoff.Permanent(err)\n        }\n        return nil\n    }, repeater); err != nil {\n        return nil, err\n    }\n    return conn, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67132918/get-registry-info-regarding-where-dependencies-are-coming-from",
    "body": "$ go get -v -x\n# get https://myinternalproxy.com/github.com/@v/list\n# get https://myinternalproxy.com/github.com/gin-gonic/gin/@v/list\n# get https://myinternalproxy.com/github.com/gin-gonic/@v/list\n# get https://myinternalproxy.com/github.com/stretchr/testify/require/@v/list\n# get https://myinternalproxy.com/github.com/stretchr/testify/assert/@v/list\n# get https://myinternalproxy.com/github.com/stretchr/testify/@v/list\n# get https://myinternalproxy.com/github.com/stretchr/@v/list\n# get https://myinternalproxy.com/github.com/stretchr/@v/list: 410 Gone (0.462s)\n# get https://myinternalproxy.com/github.com/gin-gonic/@v/list: 410 Gone (0.466s)\n# get https://myinternalproxy.com/github.com/@v/list: 410 Gone (0.466s)\n... much more logs"
  },
  {
    "url": "https://stackoverflow.com/questions/66992154/convert-eui64-to-eui48-or-macaddress",
    "body": "package main\nimport (\n    \"fmt\"\n    \"strconv\"\n    \"regexp\"\n)\nfunc main() {\n   var eui64 string = \"0221.86ff.feb5.6e10\"\n   fmt.Printf(\"%s\\n\", eui64)\n   var eui48 string = from_eui_64_to_48(eui64)\n   fmt.Printf(\"%s\\n\",eui48)\n}\nfunc from_eui_64_to_48(s string) string {\n    reg, err := regexp.Compile(\"[^a-fA-F0-9]+\") // keep only hex characters\n    if err != nil {\n        panic(err)\n    }\n    hexString := reg.ReplaceAllString(s, \"\")\n    n, err := strconv.ParseInt(hexString, 16, 64) // convert string to int64\n    if err != nil {\n        panic(err)\n    }\n    n ^= 0x0200000000000000 // toggle the 7th most significant bit of 64 bits integer\n    n = (n >> 12) | (n & 0xffffff) // keep 3 bytes from the left and 3 bytes from the right, clear 0xfffe\n    return fmt.Sprintf(\"%012x\",n) // return string\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66931877/handle-rest-requests-in-golang-grpc-server",
    "body": "func main() {\n\tlis, err := net.Listen(\"tcp\", \":6789\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n    // here we register and HTTP server listening on port 6789\n    // note that we do this in with gofunc so that the rest of this main function can execute - this probably isn't ideal\n\thttp.HandleFunc(\"/event\", Handle)\n\tgo http.Serve(lis, nil)\n    // now we set up GRPC\n\tgrpcServer := grpc.NewServer()\n    // this is a GRPC service defined in a proto file and then generated with protoc\n\tpipelineServer := Server{}\n\tpipeline.RegisterPipelinesServer(grpcServer, pipelineServer)\n\tif err := grpcServer.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %s\", err)\n\t}\n}\nfunc Handle(response http.ResponseWriter, request *http.Request) {\n\tlog.Infof(\"handling\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66789503/how-can-i-use-errors-is-on-an-error-created-by-errors-wrap",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\ntype MyCustomError struct {\n    Err   error\n}\nfunc (e MyCustomError) Error() string {\n\treturn \"something went wrong: \" + e.Err.Error()\n}\nfunc main() {\n\terr := myWrapper()\n\tptr := &MyCustomError{}\n\tprint(errors.As(err, ptr)) // prints \"true\"\n}\nfunc myWrapper() error {\n\terr := thirdPartyFunc()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"some additional context: %w\", MyCustomError{Err: err})\n\t}\n\treturn nil\n}\nfunc thirdPartyFunc() error {\n\treturn errors.New(\"this is the error I want to wrap\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66692862/how-do-i-pass-through-values-from-an-elasticsearch-document-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n)\ntype Product struct {\n\t//embed product to be able to pull the properties without\n\t//requiring a nested object in the json\n\tKnownFields\n\tOtherStuff json.RawMessage\n}\n//Custom unmarshaller\nfunc (p *Product) UnmarshalJSON(b []byte) error {\n\tvar k KnownFields\n\t//unmarshal the known fields\n   err := json.Unmarshal(b, &k)\n\tif err != nil {\n\t\treturn err\n\t}\n\tp.KnownFields = k\n\t//You can use json.RawMessage or map[string]interface\n\tp.OtherStuff = json.RawMessage(b)\n\treturn nil\n}\ntype KnownFields struct {\n\tName  string      `json:\"name\"`\n\tPrice json.Number `json:\"price\"`\n}\nconst JSON = `\n{\n    \"id\": \"ABC123\",\n    \"name\": \"Great Product\",\n    \"price\": 10.99,\n    \"custom_alternate_names\": [\"Great Product\"],\n    \"custom_sellers\": [{\n        \"id\": \"ABC123\",\n        \"name\": \"Great Product LLC\",\n        \"emails\": [\"great@stuff.com\"]\n    }]\n}`\nfunc main() {\n\tvar p Product\n\terr := json.Unmarshal([]byte(JSON), &p)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tlog.Printf(\"%v\", p)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66619848/gpg-public-key-validation",
    "body": "package main\nimport (\n        \"bytes\"\n        \"fmt\"\n        \"os\"\n        \"golang.org/x/crypto/openpgp\"\n)\nfunc main() {\n        r := bytes.NewReader([]byte(pubKey))\n        keys, err := openpgp.ReadArmoredKeyRing(r)\n        if err != nil {\n                fmt.Printf(\"Unable to read armored key ring: %v\\n\", err)\n                os.Exit(1)\n        }\n        for i, key := range keys {\n                fmt.Printf(\"Key #%d identities:\\n\", i + 1)\n                for name, _ := range key.Identities {\n                        fmt.Printf(\"\\t%s\\n\", name)\n                }\n        }\n}\nconst pubKey = `\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBGBNUNsBEADBys9wB8AKJRT02wgmcSsH8CmjyB7WOEnQn6OCjMvjdpGqCyko\niUYPWfx9mCJwJYHBJ9SoX4wHCmWXqmsAoxsUq5GgxE/+450GXjQh9Rh2pQdN0kEk\n153FQGtEdouVls9B3B+b6F84TzF7E9RwjxK36/7iECJ7AA6h1Ww8KLMt9TUmQn/Z\nfD2MvNXwyAT1gn/7M49qW+kBc/kh5rA8W9dZPbHIaiWkDDMo1qtZMt3XvdJa+Hux\ntFvFoT8cjdv9JV+00iKpgTX2b1+QzL5Qx3TaaR4iFgAAzEaJIfatzlloVPLeC37T\nDgTolQLDbWtWdIUvFYoVpx4NilwwAssHIeOgWA5/UGViJtpjKtQfwL0WnkJ+IqLt\n2pvtghM0oDO5ip0gP6hQgk3mUQPZcfBYDZjeOmAT+9PwYOFe1r31V9PX+XFxGpoD\nzXmphgwZl/9qJskHw5USQLGoyzgn0Fg8vqXG5AK5dxEIQEHhkZ5xD7zFxmmmU+y6\nOQvbvpdV47b1+XfUQV0GKLW/cb5FZkBWn6j6P7vXC47gYpPu+S2o4FxcoBp9MtrA\nynfrh7+vyM7nw4DUAlP4+Tva4/WNikwbhMSKA2LnjgnJps5bemwdqEJSDDCTPLPX\nhUsHDav/P0/W72ZxuEq0JYBskZXSjymtXLsLzmLMV09mhppglQcOVvDDdQARAQAB\ntB50ZXN0bWFuIDx0ZXN0bWFuQHRlc3R0ZXN0LmNvbT6JAlQEEwEIAD4WIQRBWFz2\n+2k8a+D58hHKpOJHohNm0AUCYE1Q2wIbAwUJB4YfZQULCQgHAgYVCgkICwIEFgID\nAQIeAQIXgAAKCRDKpOJHohNm0J+BD/9HY59ivHEXhgXCMVbT85LcNaOiCap38z6C\ny2hs8lq4QdQk2nNKwbckz0HMY6lfc3P905juv16tPfN8NliUQvaD2BD3gUWUywI3\nMPB7kMtjRuun1bfNkownS6Ulk3C6sUt3u+1SwArj9jEreehaqwCs8WmvHSW+CTYe\nigKxE6No7E1DAadDQCH78Jtw9X5iA6hRvUMYWfcmTEwHlqBN1kfmTIcChKLlWj2Z\n4irFYA0h9ZAXV5kkr0GeXH+5deQ+TNObTK6x7R1CGXOS/7aKa0NLyAXsk6r6C3b0\nO7qBPZpVqwy70L/CoumxMLOJuq4leHsIivqkLJFCzLNcBpoimAhd9TbTXuEWHKJ5\nz58QaiuWCuBOByF7BBrcPnxsNYMtsy6GvrU6vc3LH5Tv0/VoPJqDtcOckrGpNBud\nnLlRqBCLgyHtVc2eO0RV+QLkOx4C4lv/XmqM592c+7lSgFaU/Ey5hdVOCJtRNLMU\nsD+6olb/VVKjvxEVopRk1D9xK1g6Jids8KqLr2B2GDfHQFLtZNpcEDbGrRCe+XMT\n3/n3ExK7hWfvWRyOFIzac/Gb3QBvIaZvZmO9Q+2+8/aq4cLPg2TCvwhCiyvZG7sO\nQCHV4KnR6w7dZeOFyAJuBJC6OQ3KYwlsHVxrsMyawQEeQynCgngqcFRxCDORD7xh\nr65Ig6BkfLkCDQRgTVDbARAAxNP7a26OspmpV81KBEENG50UZHWHWR4Rmcrl/sPm\nDzosW+d5ZcNGZZwMnWoGvdptHtzg6jAxeY0788+G+jCaLHrpXngQ6SCtg/iJ//sO\nl27doeSK1PM8alh85pl35yW9d9wlJJMkC7PwHLezGW2nRSRLOyFklfG75z5jpp5X\nQKmqPAq+zMoSpKAwPHQEutbdNpUvEpQh1pcXSgalK1BlzJBdQh9XZzpwp8VNeuio\n7FTtJy979MqG5hISwBdkmF3g1UaltNpn1vdnnj1tu/uyePK+oakGrXa+9dC5RgiV\nJc0y2g8D2DLyA7cIj1Sxx6DgnxuqUYNvvwLLhSF2nSZF6mwHfQcPsN3efkQO6rvJ\nGExF0r4FR4Y899CB5Dd++oHQ9hDN2X3XYACi9/BBG/Z+um7/nYj1nCGAWDorlhsb\nK8Zz/Yt9gea430jxsee+iiv8G4hDGq0DuZJVnsrRBUCw0ywY8n/rKYufcLlzyWFh\nHi8Pw5fn35/b2LdG7K9YQJApMyes/nrZHAx0ZoUYBr0n/AvZksqCmps6aRLkcga3\n+fIDLwDn+iuBt5t7MYDEZBuZ1HJClJgIVzQXK5ol4+PufLZCnEVmFy71l6zS3m3T\nLAZUioRwtqGfzI7ESGAqemVyNGc26mQoiyJNgkhDlIQxfzbtTccq5E325PGpQwDN\n3AUAEQEAAYkCPAQYAQgAJhYhBEFYXPb7aTxr4PnyEcqk4keiE2bQBQJgTVDbAhsM\nBQkHhh9lAAoJEMqk4keiE2bQpLYP+wcXwq1YJdQ3V290FUV+ytvmmCeyBaa88D98\nEqzsFVn5sSzwjxszc2/NV0PLPuwo5EZ3oIlfQTRI7C/K2JRDHHz4+c+sbewcd+iR\nVU69GzWsjr8G2LwwTNBpvImPtwfvH0k3abTrzNRuk3dd2G0ItgFnke3vLicaGqJi\nb3g73tkvb5kvW6/9wweRJjmkU1Ql7GwDUZX36vFA1oU9NkUFomFoWo4xjk3/FpjO\nQwvr476uY+3eLchPnY0X1u/ikIPsx+JzFu8zLMoPLsHOTiRc01E36OQetKP3aZKE\nUv1mleFXS2/w3W8E5e+F6LyqXjdRNHBYnJQ8/VOZSviPQ8320t+HaWgNZupZtt8e\n6ks6yndvq3VgpblMeSJx/GPA/v0HfmQqUsULc/IDXDSWcs3F7bLR2cA/C0YTlWPo\n69n8N2p2gF4UF7T1qN7zqi9VU7uGMXCEsSZUbUotbIrmc4ckuGELq9ps8+c0uA05\nP4DyLh5cKUIA7P7kpbYL52LCHwWr9XlxWs3ZtlWzsiX2BqsQhqr6VDO+A27BCj6Z\nzfx4rra2qx63P3vCO6pmZRc625KNTHv59b5OOpMfTuvkuw7OuMQwql4n7lZLss6U\nsDjoSlKEyuz2LXvP4PYrWQUp9xbB+TnKIyIBWie4yEAefsmaHbA0lXd5CplFBQu7\npa0EbEfq\n=dMc+\n-----END PGP PUBLIC KEY BLOCK-----`"
  },
  {
    "url": "https://stackoverflow.com/questions/66607920/gorm-preload-how-to-use-a-custom-table-name",
    "body": "type CompanyFull struct {\n\tProducts     []*Product    `json:\"products\" gorm:\"many2many:company_products;joinForeignKey:ID\"`\n\tSubsidiaries []*Subsidiary `json:\"subsidiaries\" gorm:\"many2many:company_subsidiaries;joinForeignKey:ID\"`\n\tID           int           `json:\"ID,omitempty\"`\n}\nfunc (CompanyFull) TableName() string {\n\treturn \"companies\"\n}\nfunc main(){\n...\n  result := db.Preload(\"Subsidiaries\").Joins(\"LEFT JOIN company_products ON company_products.company_id = companies.id\").Where(\"company_products.product_id = ?\", ID).Find(&companies)\n  if result.Error != nil {\n    log.Println(result.Error)\n  } else {\n    log.Printf(\"%#v\", companies)\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/66497621/dynamic-programming-problem-extending-to-find-all-possible-paths-to-sum",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tfmt.Println(AllSum(20, []int{2, 10}))\n\tfmt.Println(AllSum(7, []int{5,4,3,7}))\n}\nfunc AllSum(ts int, nums []int) [][]int {\n\treturn allSum(ts, nums, nil)\n}\nfunc allSum(s int, nums []int, path []int) [][]int {\n\tif s < 0 {\n\t\treturn nil // No solution here\n\t}\n\tif s == 0 { // solution found\n\t\treturn [][]int{path}\n\t}\n\n\t// Copy the path to avoid editing other solutions\n\tp := make([]int, len(path))\n\tcopy(p, path)\n\n\tvar solutions [][]int\n\tfor _, n := range nums {\n\t\trc := allSum(s-n, nums, append(p, n))\n\t\tif rc != nil {\n\t\t\tsolutions = append(solutions, rc...)\n\t\t}\n\t}\n\treturn solutions\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66457712/can-a-raspberry-beacon-retrieve-any-data",
    "body": "B8:27:EB:1F:93:4D -68 02 01 06 11 06 82 75 25 D9 37 9D D7 8F 5F 4A F4 20 00 00 75 30\n71:5C:23:9D:BC:7F -68 02 01 1A 02 0A 0C 0B FF 4C 00 10 06 03 1A 3B D4 B2 EB\nB8:27:EB:1F:93:4D -68 02 01 06 11 06 82 75 25 D9 37 9D D7 8F 5F 4A F4 20 00 00 75 30\n4A:53:7F:64:71:EC -91 03 03 9F FE 17 16 9F FE 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n69:0D:FF:7B:75:65 -73 02 01 1A 02 0A 0C 0A FF 4C 00 10 05 03 1C 27 BB 63\n61:39:71:E9:1D:C9 -93 02 01 1A 02 0A 18 0A FF 4C 00 10 05 01 18 3B 24 12\nB8:27:EB:1F:93:4D -68 02 01 06 11 06 82 75 25 D9 37 9D D7 8F 5F 4A F4 20 00 00 75 30"
  },
  {
    "url": "https://stackoverflow.com/questions/66451920/terminate-server-processing-on-client-timeout",
    "body": "// main.go\npackage main\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\twg := &sync.WaitGroup{}\n\tsrvContext, srvCancel := context.WithCancel(context.Background())\n\tdefer srvCancel()\n\tsrv := http.Server{\n\t\tAddr: \":8000\",\n\t\tHandler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tlog.Printf(\"server: handler started\")\n\t\t\tselect {\n\t\t\tcase <-time.After(2 * time.Second):\n\t\t\t\tlog.Printf(\"server: completed long request\")\n\t\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t\tw.Write([]byte(\"OK\"))\n\t\t\tcase <-r.Context().Done():\n\t\t\t\tlog.Printf(\"server: client request canceled\")\n\t\t\t\tsrvCancel()\n\t\t\t\treturn\n\t\t\t}\n\t\t}),\n\t}\n\t// add a goroutine that watches for the server context to be canceled\n\t// as a signal that it is time to stop the HTTP server.\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t<-srvContext.Done()\n\t\tlog.Printf(\"server: performing server shutdown\")\n\t\t// optionally add a deadline context to avoid waiting too long\n\t\tif err := srv.Shutdown(context.TODO()); err != nil {\n\t\t\tlog.Printf(\"server: shutdown failed with context\")\n\t\t}\n\t}()\n\t// just simulate making the request after a brief delay\n\twg.Add(1)\n\tgo makeClientRequest(wg)\n\tif err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\tfmt.Fprintf(os.Stderr, \"Server failed listening with error: %v\\n\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"waiting for goroutines to finish\")\n\twg.Wait()\n\tlog.Printf(\"All exited!\")\n}\nfunc makeClientRequest(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\t// delay client request\n\ttime.Sleep(500 * time.Millisecond)\n\tlog.Printf(\"client: starting request\")\n\tctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)\n\tdefer cancel()\n\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, \"http://127.0.0.1:8000\", http.NoBody)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed making client request\")\n\t}\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tif errors.Is(err, context.DeadlineExceeded) {\n\t\t\tlog.Printf(\"client: deadline exceeded\")\n\t\t} else {\n\t\t\tlog.Printf(\"client: request error: %v\", err)\n\t\t}\n\t\treturn\n\t}\n\t// got a non-error response\n\tdefer resp.Body.Close()\n\tbody, _ := ioutil.ReadAll(resp.Body)\n\tlog.Printf(\"client: got response %d %s\", resp.StatusCode, string(body))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66126387/heroku-lost-geotrust-global-ca-root-certificate",
    "body": "const (\n\tGeoTrustCACert = \"<path to GeoTrust_Global_CA.pem>\"\n)\nfunc newCertPool(certPath string) (*x509.CertPool, error) {\n\trootCAs, _ := x509.SystemCertPool()\n\tif rootCAs == nil {\n\t\trootCAs = x509.NewCertPool()\n\t}\n\tcerts, err := ioutil.ReadFile(certPath)\n\tif err != nil {\n\t\treturn nil, errors.New(\"no certs appended, using system certs only\")\n\t}\n\tif ok := rootCAs.AppendCertsFromPEM(certs); !ok {\n\t\tlog.Println(\"no certs appended, using systems only certs\")\n\t}\n\treturn rootCAs, nil\n}\nfunc NewApns2ClientWithGeoTrustCA(certificate tls.Certificate) *apns2.Client {\n\trootCas, err := newCertPool(GeoTrustCACert)\n\tif err != nil {\n\t\treturn nil\n\t}\n\ttlsConfig := &tls.Config{\n\t\tRootCAs:      rootCas,\n\t\tCertificates: []tls.Certificate{certificate},\n\t}\n\tif len(certificate.Certificate) > 0 {\n\t\ttlsConfig.BuildNameToCertificate()\n\t}\n\ttransport := &http2.Transport{\n\t\tTLSClientConfig: tlsConfig,\n\t\tDialTLS:         apns2.DialTLS,\n\t}\n\treturn &apns2.Client{\n\t\tHTTPClient: &http.Client{\n\t\t\tTransport: transport,\n\t\t\tTimeout:   apns2.HTTPClientTimeout,\n\t\t},\n\t\tCertificate: certificate,\n\t\tHost:        apns2.DefaultHost,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66102629/how-to-create-in-golang-dynamic-bson-for-mongo-db-match",
    "body": "func AggregateToMongo(d constant.DateRange, c ...constant.Search) bson.M {\n\tdr := bson.M{}\n\tif d != (constant.DateRange{}) {\n\t\tdr = bson.M{\"execution_date\": bson.M{\n\t\t\t\"$gte\": d.From, \"$lte\": d.To},\n\t\t}\n\t}\n\tp := bson.M{}\n\tfor _, n := range c {\n\t\tif n.Params != \"\" {\n\t\t\tif n.ColumnName == \"client_id\" {\n\t\t\t\ti, err := strconv.ParseInt(n.Params, 10, 32)\n\t\t\t\tif err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tp = bson.M{n.ColumnName: i}\n\t\t\t} else {\n\t\t\t\tp = bson.M{n.ColumnName: n.Params}\n\t\t\t}\n\t\t}\n\t}\n\tfilter := bson.M{\n\t\t\"$match\": bson.M{\n\t\t\t\"$and\": []bson.M{dr, p},\n\t\t},\n\t}\n\treturn filter\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66098546/separate-lock-for-each-map-key",
    "body": "type Wrapper struct {\n\t*entityStateManager\n\tsync.Mutex\n}\ntype entityStateManagers struct {\n\tentities map[string]*Wrapper\n\tmainLock sync.Mutex\n}\nfunc (handler entityStateManagers) getStateManager(entityId string) (*entityStateManager, error) {\n\thandler.mainLock.Lock()\n\tval, ok := handler.entities[entityId]\n\tif !ok {\n\t\tval = &Wrapper{}\n\t\thandler.entities[entityId] = val\n\t}\n\tval.Lock()\n\thandler.mainLock.Unlock()\n\n\tval.entityStateManager = expensiveLoad(entityId)\n\tdefer val.Unlock()\n\treturn val.entityStateManager, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65924693/how-to-ut-upload-files",
    "body": "buf := &bytes.Buffer{}\nw := multipart.NewWriter(...)\n// add other required fields (operations, map) here\n// load file (you can do these directly I am emphasizing them\n// as variables so code below is more understandable\nfileKey := \"0\" // file key in 'map'\nfileName := \"file.xslx\" // file name\nfileContentType := \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\nfileContents, err := ioutil.ReadFile(\"./file.xlsx\")\n// ...\n// make multipart body\nh := make(textproto.MIMEHeader)\nh.Set(\"Content-Disposition\", fmt.Sprintf(`form-data; name=\"%s\"; filename=\"%s\"`, fileKey, fileName))\nh.Set(\"Content-Type\", fileContentType)\nff, err := bodyWriter.CreatePart(h)\n// ...\n_, err = ff.Write(fileContents)\n// ...\nerr = bodyWriter.Close()\n// ...\nreq, err := http.NewRequest(\"POST\", fmt.Sprintf(\"https://endpoint\"), buf)\n//..."
  },
  {
    "url": "https://stackoverflow.com/questions/65912978/how-can-i-get-the-client-ip-address-in-grpc-from-a-load-balancer-that-adds-x-rea",
    "body": "func (a *MyInterceptor) Unary() grpc.UnaryServerInterceptor {\n    return func(\n        ctx context.Context,\n        req interface{},\n        info *grpc.UnaryServerInfo,\n        handler grpc.UnaryHandler,\n    ) (interface{}, error) {\n        log.Debug(\"--> My interceptor: \" + info.FullMethod)\n\n        // How to get ip from ctx ?\n        var realIP string\n        m, ok := metadata.FromIncomingContext(ctx)\n        if ok {\n            realIP := md.Get(\"X-Real-IP\")\n        }\n        // do what you need with realIP\n        return handler(ctx, req)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65464240/aws-sdk-go-lambda-unit-testing",
    "body": "package main\nimport (\n\t\"os\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go/service/cognitoidentityprovider/cognitoidentityprovideriface\"\n)\ntype createUserEvent struct {\n\tEmailAddress string `json:\"email_address\"`\n}\ntype configuration struct {\n\tpoolId string\n\tidp    cognitoidentityprovideriface.CognitoIdentityProviderAPI\n}\ntype application struct {\n\tconfig configuration\n}\nfunc (app *application) createUser(event createUserEvent) error {\n\tinput := &cognitoidentityprovider.AdminCreateUserInput{\n\t\tUserPoolId:             aws.String(app.config.poolId),\n\t\tUsername:               aws.String(event.EmailAddress),\n\t\tDesiredDeliveryMediums: aws.StringSlice([]string{\"EMAIL\"}),\n\t\tForceAliasCreation:     aws.Bool(true),\n\t\tUserAttributes: []*cognitoidentityprovider.AttributeType{\n\t\t\t{\n\t\t\t\tName:  aws.String(\"email\"),\n\t\t\t\tValue: aws.String(event.EmailAddress),\n\t\t\t},\n\t\t},\n\t}\n\t_, err := app.config.idp.AdminCreateUser(input)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (app *application) handler(event createUserEvent) (events.APIGatewayProxyResponse, error) {\n\terr := app.createUser(event)\n\tif err != nil {\n\t\treturn events.APIGatewayProxyResponse{}, err\n\t}\n\treturn events.APIGatewayProxyResponse{}, nil\n}\nfunc main() {\n\tconfig := configuration{\n\t\tpoolId: os.Getenv(\"USER_POOL_ID\"),\n\t\tidp:    cognitoidentityprovider.New(session.Must(session.NewSession())),\n\t}\n\tapp := application{config: config}\n\tlambda.Start(app.handler)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65464240/aws-sdk-go-lambda-unit-testing",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/aws/aws-sdk-go/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go/service/cognitoidentityprovider/cognitoidentityprovideriface\"\n)\ntype mockAdminCreateUser struct {\n\tcognitoidentityprovideriface.CognitoIdentityProviderAPI\n\tResponse *cognitoidentityprovider.AdminCreateUserOutput\n\tError    error\n}\nfunc (d mockAdminCreateUser) AdminCreateUser(*cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {\n\treturn d.Response, d.Error\n}\nfunc TestCreateUser(t *testing.T) {\n\tt.Run(\"Successfully create user\", func(t *testing.T) {\n\t\tidpMock := mockAdminCreateUser{\n\t\t\tResponse: &cognitoidentityprovider.AdminCreateUserOutput{},\n\t\t\tError:    nil,\n\t\t}\n\t\tapp := application{config: configuration{\n\t\t\tpoolId: \"test\",\n\t\t\tidp:    idpMock,\n\t\t}}\n\t\terr := app.createUser(createUserEvent{EmailAddress: \"user@example.com\"})\n\t\tif err != nil {\n\t\t\tt.Fatal(\"User should have been created\")\n\t\t}\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65152939/how-do-i-stream-with-grpc-web-and-use-a-rest-api-on-the-same-port",
    "body": "package main\nlistener := net.Listen(\"tcp\", \":2289\")\nmultiplexer := cmux.New(listener)\ngrpcListener := multiplexer.Match(cmux.HTTP2())\nhttpListener := multiplexer.Match(cmux.HTTP1Fast())\ngrpcServer := grpc.Server()\nwrappedGrpc := grpcweb.WrapServer(grpcServer)\ngo func() {\n  httpServer := echo.New()\n  (&http.Server{\n      Handler: http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {\n        if strings.Contains(req.Header.Get(\"Access-Control-Request-Headers\"), \"x-grpc-web\") || req.Header.Get(\"x-grpc-web\") == \"1\" || req.Header.Get(\"Sec-Websocket-Protocol\") == \"grpc-websockets\" {\n          inst.API.GrpcWebServer.ServeHTTP(resp, req)\n        } else {\n          httpServer.ServeHTTP(resp, req)\n      }\n    }),\n  }).Serve(httpListener)\n}()\ngo func() {\n  grpcServer.Serve(grpcListener)\n}()\ngo func() {\n  multiplexer.Serve()\n}()"
  },
  {
    "url": "https://stackoverflow.com/questions/64913275/how-to-omit-names-of-outer-xml-elements",
    "body": "type Pack struct {\n\tXMLName struct{} `xml:\"package\"`\n\tPeople  []PersonWrapper\n}\ntype Person struct {\n\tXMLName  xml.Name `xml:\"dc:contributor\"`\n\tId       string   `xml:\"id,attr\"`\n\tName     string   `xml:\"-\"`\n\tSurname  string   `xml:\"-\"`\n\tFullName string   `xml:\",innerxml\"`\n}\ntype Meta struct {\n\tXMLName  xml.Name `xml:\"meta\"`\n\tRefines  string   `xml:\"refines,attr\"`\n\tProperty string   `xml:\"property,attr\"`\n\tScheme   string   `xml:\"scheme,attr,omitempty\"`\n\tValue    string   `xml:\",innerxml\"`\n}\ntype PersonWrapper struct {\n\tPerson Person `xml:\"dc:contributor\"`\n\tMetas  []Meta `xml:\"meta\"`\n}\nfunc (pw PersonWrapper) MarshalXML(e *xml.Encoder, start xml.StartElement) error {\n\tif err := e.Encode(pw.Person); err != nil {\n\t\treturn err\n\t}\n\tif err := e.Encode(pw.Metas); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64682913/how-to-connect-to-bitnami-cassandra-using-gocql-in-a-docker-compose-multi-contai",
    "body": "backend_1    | 2020/11/04 17:53:23 CreateSession: gocql: unable to create session: unable to discover protocol version: dial tcp 172.26.0.2:9042: connect: connection refused\nbackend_1    | 2020/11/04 17:53:24 CreateSession: gocql: unable to create session: unable to discover protocol version: dial tcp 172.26.0.2:9042: connect: connection refused\n.......\nbackend_1    | 2020/11/04 17:53:36 CreateSession: gocql: unable to create session: unable to discover protocol version: dial tcp 172.26.0.2:9042: connect: connection refused\nbackend_1    | 2020/11/04 17:53:37 Connected OK"
  },
  {
    "url": "https://stackoverflow.com/questions/64477419/antlr4-listener-subtree-check-condition",
    "body": "// In this example, the grammar is called `T.g4`\nclass WhileLastMoveListener extends TBaseListener {\n    private boolean insideWhileCondition = false;\n\n    @Override\n    public void enterWhile_condition(TParser.While_conditionContext ctx) {\n        this.insideWhileCondition = true;\n    }\n    @Override\n    public void exitWhile_condition(TParser.While_conditionContext ctx) {\n        this.insideWhileCondition = false;\n    }\n    @Override\n    public void enterF_lastmove(TParser.F_lastmoveContext ctx) {\n        if (this.insideWhileCondition) {\n            // Found a `f_lastmove` rule inside a while `while_condition`\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64439336/google-sheet-data-to-json",
    "body": "function doGet(){\n  // Open Google Sheet using ID\n  var ss = SpreadsheetApp.openById(\"1eLDCzOGyctqXgQmC5qULZ4thcNKsIOdKLJoYc762CTk\");\n  var sheet = ss.getSheetByName(\"Master\");\n  // Read all data rows from Google Sheet\n  const values = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();\n  // Converts data rows in json format\n  const result = JSON.stringify(values.map(([a,b]) => ({ProductId: a,ProductName:b,})));\n  // Returns Result\n  return ContentService.createTextOutput(result).setMimeType(ContentService.MimeType.JSON);\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64439336/google-sheet-data-to-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\ntype Product struct {\n\tProductId   uint   `json:\"ProductId\"`\n\tProductName string `json:\"ProductName\"`\n}\nfunc main() {\n\t// Read the returned response\n\turl := \"https://script.googleusercontent.com/macros/echo?user_content_key=WBSJPDNSN6X1FCYeXsR6TDaDval0vdvmSoMmXFhGbt5sfK0ia80Dp7kPD27GLpZbYz8vrwfDiUecI2oGMjEtgfL5o8Da25T1m5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnGb6k9xaGtOX6M1tIiG811CRpk9nXl8ZKS7UJTno1dvQXMe1kqfAj8WxsSkLor-EqzOmbnRGq-tk&lib=M0B6GXYh0EOYMkP7qr1Xy9xw8GuJxFqGH\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\t// Read the body of the response\n\thtmlData, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\t// print out\n\tfmt.Println(string(htmlData)) // The data is returned as []byte, so string required to display it correctly\n\t// Unmarshall the returned []byte into json\n\tvar products []Product\n\tjson.Unmarshal([]byte(htmlData), &products)\n\tfmt.Printf(\"id: %v, description: %s\", products[0].ProductId, products[0].ProductName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64256689/how-to-instrument-prometheus-gauge-using-opencensus",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\t\"contrib.go.opencensus.io/exporter/prometheus\"\n\t\"go.opencensus.io/stats\"\n\t\"go.opencensus.io/stats/view\"\n\t\"go.opencensus.io/tag\"\n)\nvar (\n\tMLatencyMs = stats.Float64(\"latency\", \"The latency in milliseconds\", \"ms\")\n)\nvar (\n\tKeyMethod, _ = tag.NewKey(\"method\")\n)\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\tview1 := &view.View{\n\t\tName:        \"dist\",\n\t\tMeasure:     MLatencyMs,\n\t\tDescription: \"The dist of the latencies\",\n\t\tTagKeys:     []tag.Key{KeyMethod},\n\t\tAggregation: view.Distribution(0, 10, 100, 1000, 10000, 100000),\n\t}\n\tview2 := &view.View{\n\t\tName:        \"last\",\n\t\tMeasure:     MLatencyMs,\n\t\tDescription: \"The last of the latencies\",\n\t\tTagKeys:     []tag.Key{KeyMethod},\n\t\tAggregation: view.LastValue(),\n\t}\n\tif err := view.Register(view1, view2); err != nil {\n\t\tlog.Fatalf(\"Failed to register the views: %v\", err)\n\t}\n\tpe, err := prometheus.NewExporter(prometheus.Options{\n\t\tNamespace: \"distlast\",\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create the Prometheus stats exporter: %v\", err)\n\t}\n\tgo func() {\n\t\tmux := http.NewServeMux()\n\t\tmux.Handle(\"/metrics\", pe)\n\t\tlog.Fatal(http.ListenAndServe(fmt.Sprintf(\":%s\", port), mux))\n\t}()\n\trand.Seed(time.Now().UnixNano())\n\tctx := context.Background()\n\tfor {\n\t\tn := rand.Intn(100)\n\t\tlog.Printf(\"[loop] n=%d\\n\", n)\n\t\tstats.Record(ctx, MLatencyMs.M(float64(time.Duration(n))))\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64256689/how-to-instrument-prometheus-gauge-using-opencensus",
    "body": "# HELP distlast_dist The dist of the latencies\n# TYPE distlast_dist histogram\ndistlast_dist_bucket{method=\"\",le=\"10\"} 1\ndistlast_dist_bucket{method=\"\",le=\"100\"} 10\ndistlast_dist_bucket{method=\"\",le=\"1000\"} 10\ndistlast_dist_bucket{method=\"\",le=\"10000\"} 10\ndistlast_dist_bucket{method=\"\",le=\"100000\"} 10\ndistlast_dist_bucket{method=\"\",le=\"+Inf\"} 10\ndistlast_dist_sum{method=\"\"} 463.00000000000006\ndistlast_dist_count{method=\"\"} 10\n# HELP distlast_last The last of the latencies\n# TYPE distlast_last gauge\ndistlast_last{method=\"\"} 8"
  },
  {
    "url": "https://stackoverflow.com/questions/64072565/testing-log-output-from-github-com-shopify-sarama",
    "body": "> go run main.go\n2020/09/25 16:58:26 output: [Sarama] 2020/09/25 16:58:26 Initializing new client\n[Sarama] 2020/09/25 16:58:26 ClientID is the default of 'sarama', you should consider setting it to something application-specific.\n[Sarama] 2020/09/25 16:58:26 ClientID is the default of 'sarama', you should consider setting it to something application-specific.\n[Sarama] 2020/09/25 16:58:26 client/metadata fetching metadata for all topics from broker localhost:9092\n[Sarama] 2020/09/25 16:58:26 Connected to broker at localhost:9092 (unregistered)\n[Sarama] 2020/09/25 16:58:26 client/brokers registered new broker #0 at 127.0.0.1:9092\n[Sarama] 2020/09/25 16:58:26 Successfully initialized new client"
  },
  {
    "url": "https://stackoverflow.com/questions/64001915/missing-data-hyperledger-fabric-chaincode",
    "body": "type receptionOlives struct {\n    VarieteOlive                    string `json:\"VarieteOlive\"` //Tunisie Sicile ...\n    Quantity                        string `json:\"quantity\"`\n    MaturiteOlives                  string `json:\"MaturiteOlives\"` //vert ou violet ou Noir\n    Daterecolte                     string `json:\"daterecolte\"`\n    Recoltemanuelleouclassique      string `json:\"recoltemanuelleouclassique\"`\n    Utilisationdesproduitsdabscission string `json:\"utilisationdesproduitsdabscission\"`\n    DateLivraison                   string `json:\"dateLivraison\"`\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63921892/cgo-undefined-reference-to-tiffgetfield",
    "body": "package main\n// #cgo LDFLAGS: -ltiff\n// #include \"tiffio.h\"\n// #include <stdlib.h>\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\nfunc main() {\n\tpath, perm := \"foo.tif\", \"w\"\n\t// Convert Go string to C char array. It will do malloc in C,\n\t// You must free these string if it no longer in use.\n\tcpath := C.CString(path)\n\tcperm := C.CString(perm)\n\t// Defer free the memory allocated by C.\n\tdefer func() {\n\t\tC.free(unsafe.Pointer(cpath))\n\t\tC.free(unsafe.Pointer(cperm))\n\t}()\n\ttif := C.TIFFOpen(cpath, cperm)\n\tif tif == nil {\n\t\tpanic(fmt.Errorf(\"cannot open %s\", path))\n\t}\n\tC.TIFFClose(tif)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63821301/http-put-request-body-from-a-file-in-golang-upload-fails-without-properly-setti",
    "body": "// /usr/lib/go/src/net/http/request.go:872\n\tif body != nil {\n\t\tswitch v := body.(type) {\n\t\tcase *bytes.Buffer:\n\t\t\treq.ContentLength = int64(v.Len())\n\t\t\tbuf := v.Bytes()\n\t\t\treq.GetBody = func() (io.ReadCloser, error) {\n\t\t\t\tr := bytes.NewReader(buf)\n\t\t\t\treturn ioutil.NopCloser(r), nil\n\t\t\t}\n\t\tcase *bytes.Reader:\n\t\t\treq.ContentLength = int64(v.Len())\n\t\t\tsnapshot := *v\n\t\t\treq.GetBody = func() (io.ReadCloser, error) {\n\t\t\t\tr := snapshot\n\t\t\t\treturn ioutil.NopCloser(&r), nil\n\t\t\t}\n\t\tcase *strings.Reader:\n\t\t\treq.ContentLength = int64(v.Len())\n\t\t\tsnapshot := *v\n\t\t\treq.GetBody = func() (io.ReadCloser, error) {\n\t\t\t\tr := snapshot\n\t\t\t\treturn ioutil.NopCloser(&r), nil\n\t\t\t}\n\t\tdefault:\n\t\t\t// This is where we'd set it to -1 (at least\n\t\t\t// if body != NoBody) to mean unknown, but\n\t\t\t// that broke people during the Go 1.8 testing\n\t\t\t// period. People depend on it being 0 I\n\t\t\t// guess. Maybe retry later. See Issue 18117.\n\t\t}\n\t\t// For client requests, Request.ContentLength of 0\n\t\t// means either actually 0, or unknown. The only way\n\t\t// to explicitly say that the ContentLength is zero is\n\t\t// to set the Body to nil. But turns out too much code\n\t\t// depends on NewRequest returning a non-nil Body,\n\t\t// so we use a well-known ReadCloser variable instead\n\t\t// and have the http package also treat that sentinel\n\t\t// variable to mean explicitly zero.\n\t\tif req.GetBody != nil && req.ContentLength == 0 {\n\t\t\treq.Body = NoBody\n\t\t\treq.GetBody = func() (io.ReadCloser, error) { return NoBody, nil }\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/63738154/how-do-i-get-the-else-message-to-get-printed-only-once",
    "body": "var found bool\nfor _, item := range apis.Items {\n\tif item.Name == apiName {\n\t\tfmt.Printf(\"API ID found: %+v \", item.Id)\n\t\tapi_id := item.Id\n\t\tcmd_2, err := exec.Command(\"aws\", \"apigateway\", \"get-export\", \"--rest-api-id\", api_id, \"--stage-name\", stageName, \"--export-type\", \"swagger\", \"/home/akshitha/Documents/\"+apiName+\".json\").Output()\n\t\tif err != nil {\n\t\t\tutils.HandleErrorAndExit(\"Error getting API swagger\", err)\n\t\t}\n\t\toutput := string(cmd_2[:])\n\t\tfmt.Println(output)\n\t\tfound = true\n\n\t\tbreak\n\t}\n}\nif !found {\n\tfmt.Println(\"Unable to fine an API with the name \" + apiName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63636454/golang-multipart-file-form-request",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"mime\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"net/textproto\"\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc main() {\n\tconst (\n\t\tdst   = \"https://api.mapbox.com/styles/v1/AcmeInc/Style_001/sprite\"\n\t\tfname = \"path/to/a/sprite/image.svg\"\n\t\ttoken = \"an_invalid_token\"\n\t)\n\terr := post(dst, fname, token)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\nfunc post(dst, fname, token string) error {\n\tu, err := url.Parse(dst)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to parse destination url: %w\", err)\n\t}\n\tform, err := makeRequestBody(fname)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to prepare request body: %w\", err)\n\t}\n\tq := u.Query()\n\tq.Set(\"access_token\", token)\n\tu.RawQuery = q.Encode()\n\thdr := make(http.Header)\n\thdr.Set(\"Content-Type\", form.contentType)\n\treq := http.Request{\n\t\tMethod:        \"POST\",\n\t\tURL:           u,\n\t\tHeader:        hdr,\n\t\tBody:          ioutil.NopCloser(form.body),\n\t\tContentLength: int64(form.contentLen),\n\t}\n\tresp, err := http.DefaultClient.Do(&req)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to perform http request: %w\", err)\n\t}\n\tdefer resp.Body.Close()\n\t_, _ = io.Copy(os.Stdout, resp.Body)\n\treturn nil\n}\ntype form struct {\n\tbody        *bytes.Buffer\n\tcontentType string\n\tcontentLen  int\n}\nfunc makeRequestBody(fname string) (form, error) {\n\tct, err := getImageContentType(fname)\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\n\t\t\t`failed to get content type for image file \"%s\": %w`,\n\t\t\tfname, err)\n\t}\n\tfd, err := os.Open(fname)\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\"failed to open file to upload: %w\", err)\n\t}\n\tdefer fd.Close()\n\tstat, err := fd.Stat()\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\"failed to query file info: %w\", err)\n\t}\n\thdr := make(textproto.MIMEHeader)\n\tcd := mime.FormatMediaType(\"form-data\", map[string]string{\n\t\t\"name\":     \"images\",\n\t\t\"filename\": fname,\n\t})\n\thdr.Set(\"Content-Disposition\", cd)\n\thdr.Set(\"Contnt-Type\", ct)\n\thdr.Set(\"Content-Length\", strconv.FormatInt(stat.Size(), 10))\n\tvar buf bytes.Buffer\n\tmw := multipart.NewWriter(&buf)\n\tpart, err := mw.CreatePart(hdr)\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\"failed to create new form part: %w\", err)\n\t}\n\tn, err := io.Copy(part, fd)\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\"failed to write form part: %w\", err)\n\t}\n\tif int64(n) != stat.Size() {\n\t\treturn form{}, fmt.Errorf(\"file size changed while writing: %s\", fd.Name())\n\t}\n\terr = mw.Close()\n\tif err != nil {\n\t\treturn form{}, fmt.Errorf(\"failed to prepare form: %w\", err)\n\t}\n\treturn form{\n\t\tbody:        &buf,\n\t\tcontentType: mw.FormDataContentType(),\n\t\tcontentLen:  buf.Len(),\n\t}, nil\n}\nvar imageContentTypes = map[string]string{\n\t\"png\":  \"image/png\",\n\t\"jpg\":  \"image/jpeg\",\n\t\"jpeg\": \"image/jpeg\",\n\t\"svg\":  \"image/svg+xml\",\n}\nfunc getImageContentType(fname string) (string, error) {\n\text := filepath.Ext(fname)\n\tif ext == \"\" {\n\t\treturn \"\", fmt.Errorf(\"file name has no extension: %s\", fname)\n\t}\n\text = strings.ToLower(ext[1:])\n\tct, found := imageContentTypes[ext]\n\tif !found {\n\t\treturn \"\", fmt.Errorf(\"unknown file name extension: %s\", ext)\n\t}\n\treturn ct, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63424365/why-mock-expectquery-return-is-without-arguments",
    "body": "func TestAddLike(t *testing.T) {\n    db, mock, err := sqlmock.New()\n    if err != nil {\n        t.Fatalf(\"an error '%s' was not expected when opening a stub database connection\", err)\n    }\n    defer db.Close()\n    rows := sqlmock.NewRows([]string{\"id\", \"title\", \"body\"}).\n        AddRow(1, \"post 1\", \"hello\").\n        AddRow(2, \"post 2\", \"world\")\n    mock.ExpectQuery(\"SELECT (.+) FROM testmock\").\n        WillReturnRows(rows)\n\n    AddLike() // <- Add the call to actual function here. Before mock.ExpectationsWereMet\n    if err := mock.ExpectationsWereMet(); err != nil {\n        t.Errorf(\"there were unfulfilled expectations: %s\", err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63050979/cursor-option-required",
    "body": "ctx, _ = context.WithTimeout(context.Background(), 2*time.Second)\nmatchStage := bson.D{\n\t\t{\"$match\", bson.D{}},\n\t}\nlookupStage := bson.D{\n\t\t{\"from\", \"\"},\n        {\"let\": bson.D{{}}},\n        {\"pipeline\": bson.A{}},\n        {\"as\": \"\"},\n\t}\naddFieldsStage := bson.D{\n\t\t{\"$addFields\", bson.D{}},\n\t}\ncursor, err := collection.Aggregate(\n\tctx,\n\tmongo.Pipeline{matchStage, lookupStage, addFieldsStage},\n\toptions.Aggregate().SetAllowDiskUse(true),  // Mongo-Aggregate options if any\n\t)\nif err != nil {\n\tpanic(err)\n}\nfor cursor.Next(ctx) {\n    var cursorResult bson.M\n    err := cursor.Decode(&cursorResult)  // I world recommend to decode it using a struct instead\n    if err != nil {\n\t    panic(err)\n    }\n    fmt.Printf(\"Decoded Cursor: %v\", cursorResult)\n}\nerr = cursor.Close(ctx)\nif err != nil {\n  panic(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62805770/defining-a-map-of-maps-of-slices-of-maps-with-assignment-to-nil-error-do-i-p",
    "body": "//Already have 'siteIDMap' created in above code not shown\n//Init map of Lat/Lng to site data\nlatLngMap := make(map[string]map[string][]map[string]string)\n// for every site in map\nfor k, v := range siteIDMap {\n    loc := v[\"loc\"]\n    lat := v[\"lat\"]\n    lng := v[\"lng\"]\n    name := v[\"name\"]\n    // initialize nested map for this lat if it was not already initialized\n    // by a previous iteration\n    _, ok := latLngMap[lat]\n    if !ok {\n        latLngMap[lat] = make(map[string][]map[string]string)\n        latLngMap[lat][lng] = make([]map[string]string, 1)\n    }\n    m := map[string]string{\"id\": k, \"lat\": lat, \"lng\": lng, \"loc\": loc, \"name\": name}\n    latFloor := strings.Split(lat, \".\")[0]\n    lngFloor := strings.Split(lng, \".\")[0]\n    fmt.Println(m, latFloor, lngFloor)\n    latLngMap[latFloor][lngFloor] = append(latLngMap[latFloor][lngFloor], m)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62804831/is-it-possible-to-filter-by-the-range-sort-key-in-dynamodb",
    "body": "result, err := db.Query(&dynamodb.QueryInput{\n    TableName:              aws.String(tableName),\n    KeyConditionExpression: aws.String(\"#A = :alias AND #E <= :expires_at\"),\n    ExpressionAttributeNames: map[string]*string{\n        \"#A\": aws.String(\"Alias\"),\n        \"#E\": aws.String(\"ExpiresAt\"),\n    },\n    ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{\n        \":alias\": {\n            S: aws.String(alias),\n        },\n        \":expires_at\": {\n            S: aws.String(time.Now().String()),\n        },\n    },\n    Limit: aws.Int64(1),\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/62699208/aggregating-list-of-a-specific-field-in-different-columns-using-mongodb",
    "body": "UID := \"id-1\"  // Change this variable to your `match` value\nmatchStage := bson.D{\n\t{\"$match\", bson.D{\n\t\t{\"$or\", bson.A{\n\t\t\tbson.D{{\"uid1\", UID}},\n\t\t\tbson.D{{\"uid2\", UID}},\n\t\t}},\n\t}},\n}\ngroupStage := bson.D{\n\t{\"$group\", bson.D{\n\t\t{\"_id\", nil},\n\t\t{\"uids1\", bson.D{\n\t\t\t{\"$addToSet\", \"$uid1\"},\n\t\t}},\n\t\t{\"uids2\", bson.D{\n\t\t\t{\"$addToSet\", \"$uid2\"},\n\t\t}},\n\t}},\n}\nprojectStage := bson.D{\n\t{\"$project\", bson.D{\n\t\t{\"uids\", bson.D{\n\t\t\t{\"$filter\", bson.D{\n\t\t\t\t{\"input\", bson.D{\n\t\t\t\t\t{\"$concatArrays\", bson.A{\"$uids1\", \"$uids2\"}},\n\t\t\t\t}},\n\t\t\t\t{\"as\", \"arrayElem\"},\n\t\t\t\t{\"cond\", bson.D{\n\t\t\t\t\t{\"$ne\", bson.A{\"$$arrayElem\", UID}},\n\t\t\t\t}},\n\t\t\t}},\n\t\t}},\n\t}},\n}\ncursor, err := collection.Aggregate(\n\tctx,\n\tmongo.Pipeline{matchStage, groupStage, projectStage},\n\toptions.Aggregate().SetAllowDiskUse(true),\n\t)\nif err != nil {\n\tpanic(err)\n}\nvar cursorResult []bson.M\nerr = cursor.All(ctx, &cursorResult)\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"Cursor Result: \", cursorResult[0][\"uids\"])"
  },
  {
    "url": "https://stackoverflow.com/questions/62585273/mongodb-aggregation-pipeline-with-setintersection",
    "body": "{\n                \"$group\": bson.M{\n                    \"_id\":       \"$follower\",\n                    \"followers\": bson.M{\"$push\": \"$userID\"},\n                },\n            },\n            {\n                \"$group\": bson.M{\n                    \"_id\":       null,\n                    \"combined\": bson.M{\"$push\": \"$followers\"},\n                },\n            },\n            {\n                \"$project\": bson.M{\n                    \"common\": bson.M{\"$setIntersection\": []interface{}{\n                       bson.M{\"$arrayElemAt\":[]interface{}{\"$combined\",0},\n                       bson.M{\"$arrayElemAt\":[]interface{}{\"$combined\",1}\n                    }},\n                },\n            },"
  },
  {
    "url": "https://stackoverflow.com/questions/62577943/join-two-table-in-postgresql-where-one-content-array-field-and-other-is-a-master",
    "body": "=# select * from fruit;\n fruitid | fruitname\n---------+-----------\n app     | apple\n ban     | banana\n grp     | grape\n ora     | orange\n(4 rows)\n=# select * from food;\n id |     fruit\n----+---------------\n  1 | {app,grp}\n  2 | {app,ban,grp}\n(2 rows)\n=# with expand as (\n  select id, unnest(fruit) as FruitId\n    from food\n), lookup as (\n   select e.id, f.FruitName\n     from expand e\n     join fruit f on f.FruitId = e.FruitId\n)\nselect id, array_agg(FruitName) as FruitNames\n  from lookup\n group by id;\n id |      fruitnames\n----+----------------------\n  2 | {apple,banana,grape}\n  1 | {apple,grape}\n(2 rows)"
  },
  {
    "url": "https://stackoverflow.com/questions/62162137/why-second-channel-not-receiving-data-from-previous-channel",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\nfunc failOnError(err error) {\n\tif err != nil {\n\t\tlog.Fatal(\"Error:\", err)\n\t\tpanic(err)\n\t}\n}\nfunc main() {\n\tread := make(chan Data)\n\tgo func(input_file string) {\n\t\tvar data Data\n\t\tfr, err := os.Open(input_file)\n\t\tfailOnError(err)\n\t\tdefer fr.Close()\n\t\tr := csv.NewReader(fr)\n\t\trows, err := r.ReadAll()\n\t\tfailOnError(err)\n\t\tdata.header = rows[0]\n\t\tfor _, row := range rows[1:] {\n\t\t\tdata.lines = append(data.lines, Person{\n\t\t\t\tFirstname: row[0],\n\t\t\t\tLastname:  row[1],\n\t\t\t\tAddress: &Address{\n\t\t\t\t\tCity:  row[2],\n\t\t\t\t\tState: row[3],\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t\tpeopleJson, _ := json.Marshal(data.lines)\n\t\tfmt.Println(string(peopleJson)) // This is working smoothly\n\t\tread <- data\n\t}(\"people.csv\")\n\tcsvOut, err := os.Create(\"resultsfile.csv\")\n\tif err != nil {\n\t\tlog.Fatal(\"Unable to open output\")\n\t}\n\tout := make(chan int)\n\tgo func() {\n\t\tdata := <-read\n\t\tprintln(\"data received\") // <-- Not show up\n\t\tw := csv.NewWriter(csvOut)\n\t\tdefer csvOut.Close()\n\t\t// handle header\n\t\tdata.header = append(data.header, \"score\")\n\t\tif err = w.Write(data.header); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\t/*\n\t\t   hanlde data\n\t\t*/\n\t\tw.Flush()\n\t\tout <- 0\n\t}()\n\t<-out\n\tprintln(\"done\")\n}\ntype Person struct {\n\tFirstname string   `json:\"firstname\"` // JSON annotation will allow for easy printing to JSON after it had been loaded\n\tLastname  string   `json:\"lastname\"`\n\tAddress   *Address `json:\"address,omitempty\"`\n}\ntype Address struct {\n\tCity  string `json:\"city\"`\n\tState string `json:\"state\"`\n}\ntype Data struct {\n\theader []string\n\tlines  []Person\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62035275/go-http-responsewriter-write-does-not-return-error-when-client-closed-connection",
    "body": "13:53:19 01.go:30: listening on port  :8008\n13:53:22 01.go:18: handling long-task\n13:53:23 01.go:16: client closed or server responded\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 512\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 513\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 514\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 515\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 516\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 517\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 518\n13:53:24 01.go:23: error when ResponseWriter Write:  write tcp 127.0.0.1:8008->127.0.0.1:57098: write: broken pipe 519"
  },
  {
    "url": "https://stackoverflow.com/questions/61873357/stop-looking-for-user-input-with-bufio-newreaderos-stdin",
    "body": "func startTimer(myTime *int) *time.Timer {\n\treturn time.NewTimer(time.Duration(*myTime) * time.Second)\n}\nfunc getInput(returnchan chan<- string, timer *time.Timer) {\n\tfor {\n\t\treader := bufio.NewReader(os.Stdin)    //Create reader\n\t\tgo checkTime(timer)\n\t\tinput, _ := reader.ReadString('\\n')    //Read from\n\t\treturnchan <- strings.TrimSpace(input) //Trim the input and send it\n\t}\n}\nfunc checkTime(timer *time.Timer) {\n\t<-timer.C\n\tfmt.Println(\"\\nYour quiz is over!!!\")\n    // print the final score\n\tos.Exit(1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61671872/get-duration-of-caf-audio-file-with-go-lang",
    "body": "func readCAF() {\n\tbuf := []byte{\n\t\t// file header\n\t\t'c', 'a', 'f', 'f', // file type\n\t\t0x0, 0x1, 0x0, 0x0, // file version, flags\n\t\t// audio description\n\t\t'd', 'e', 's', 'c', // chunk type\n\t\t0x0, 0x0, 0x0, 0x0,\n\t\t0x0, 0x0, 0x0, 0x20, // CAFAudioFormat size\n\t\t0x40, 0xe5, 0x88, 0x80,\n\t\t0x00, 0x00, 0x00, 0x00, // sample rate\n\t\t'l', 'p', 'c', 'm', // fmt id\n\t\t0x0, 0x0, 0x0, 0x0, // fmt flags\n\t\t0x0, 0x0, 0x0, 0x1, // bytes per packet\n\t\t0x0, 0x0, 0x0, 0x1, // frames per packet\n\t\t0x0, 0x0, 0x0, 0x2, // channels per frame\n\t\t0x0, 0x0, 0x0, 0x3, // bits per channel\n\t\t// audio data\n\t\t'd', 'a', 't', 'a', // chunk type\n\t\t0xff, 0xff, 0xff, 0xff,\n\t\t0xff, 0xff, 0xff, 0xff, // size of data section (-1 = til EOF)\n\t\t// actual audio packets (in theory, anyway)\n\t\t0x0,\n\t\t0x0,\n\t\t0x0,\n\t\t0x0,\n\t\t0x0,\n\t\t0x0,\n\t}\n\tfileSize := len(buf)\n\tbr := bufio.NewReader(bytes.NewBuffer(buf))\n\ttype cafHdr struct {\n\t\tTyp     [4]byte\n\t\tVersion uint16\n\t\t_       uint16\n\t}\n\ttype chunkHdr struct {\n\t\tTyp [4]byte\n\t\tSz  int64\n\t}\n\ttype audioDescription struct {\n\t\tFramesPerSec     float64\n\t\tFmtId            uint32\n\t\tFmtFlags         uint32\n\t\tBytesPerPacket   uint32\n\t\tFramesPerPacket  uint32\n\t\tChannelsPerFrame uint32\n\t\tBitsPerChannel   uint32\n\t}\n\ttype packetTable struct {\n\t\tNPackets, NValidFrames, NPrimingFr, NRemainingFr int64\n\t}\n\tconst FileHeaderSz = 8\n\tconst ChunkHeaderSz = 12\n\tconst AudioDescSz = 32\n\tconst PacketHdrSz = 24\n\tfileHdr := cafHdr{}\n\tif err := binary.Read(br, binary.BigEndian, &fileHdr); err != nil {\n\t\tpanic(err)\n\t}\n\tif fileHdr.Typ != [4]byte{'c', 'a', 'f', 'f'} || fileHdr.Version != 1 {\n\t\tpanic(\"unknown file format\")\n\t}\n\tremaining := int64(fileSize) - FileHeaderSz\n\taudioDesc := audioDescription{}\n\tpacketTab := packetTable{}\n\tvar audioDataSz int64\nreadChunks:\n\tfor {\n\t\thdr := chunkHdr{}\n\t\tif err := binary.Read(br, binary.BigEndian, &hdr); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tremaining -= ChunkHeaderSz\n\t\tswitch hdr.Typ {\n\t\tcase [4]byte{'d', 'e', 's', 'c'}: // audio description\n\t\t\tif err := binary.Read(br, binary.BigEndian, &audioDesc); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\thdr.Sz -= AudioDescSz\n\t\t\tremaining -= AudioDescSz\n\t\tcase [4]byte{'p', 'a', 'k', 't'}: // packet table\n\t\t\tif err := binary.Read(br, binary.BigEndian, &packetTab); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\thdr.Sz -= PacketHdrSz\n\t\t\tremaining -= PacketHdrSz\n\t\tcase [4]byte{'d', 'a', 't', 'a'}: // audio data\n\t\t\tif hdr.Sz > 0 {\n\t\t\t\taudioDataSz = hdr.Sz\n\t\t\t} else if hdr.Sz == -1 {\n\t\t\t\t// if needed, read to EOF to determine byte size\n\t\t\t\taudioDataSz = remaining\n\t\t\t\tbreak readChunks\n\t\t\t}\n\t\t}\n\t\tif hdr.Sz < 0 {\n\t\t\tpanic(\"invalid header size\")\n\t\t}\n\t\tremaining -= hdr.Sz\n\t\t// Skip to the next chunk. On 32 bit machines, Sz can overflow,\n\t\t// so you should check for that (or use Seek if you're reading a file).\n\t\tif n, err := br.Discard(int(hdr.Sz)); err != nil {\n\t\t\tif err == io.EOF && int64(n) == hdr.Sz {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpanic(err)\n\t\t}\n\t}\n\tvar seconds float64\n\t// If the data included a packet table, the frames determines duration.\n\tif packetTab.NValidFrames > 0 {\n\t\tseconds = float64(packetTab.NValidFrames) / audioDesc.FramesPerSec\n\t} else {\n\t\t// If there no packet table, it must have a constant packet size.\n\t\tif audioDesc.BytesPerPacket == 0 || audioDesc.FramesPerPacket == 0 {\n\t\t\tpanic(\"bad data\")\n\t\t}\n\t\tframesPerByte := float64(audioDesc.FramesPerPacket) / float64(audioDesc.BytesPerPacket)\n\t\tseconds = framesPerByte * float64(audioDataSz)\n\t}\n\tfmt.Printf(\"seconds: %f\\n\", seconds)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61437984/golang-error-while-gzipping-mongodb-find-querys-cursor-data-writing-to-a-fil",
    "body": "var cursor, _ = collection.Find(context.TODO(), filter)\ndefer cursor.Close(context.TODO())\n// prepare a buffer to hold gzipped data\nvar buffer bytes.Buffer\nvar gz = gzip.NewWriter(&buffer)\ndefer gz.Close()\nfor cursor.Next(context.TODO()) {\n    if _, err = io.WriteString(gz, cursor.Current.String()); err != nil {\n        // handle error somehow  ¯\\_(ツ)_/¯\n    }\n}\n// you can now use buffer as io.Reader\n// and it'll contain gzipped data for your serialized rows\n_, err = s3.Upload(&s3.UploadInput{\n    Bucket: aws.String(\"...\"),\n    Key:    aws.String(\"...\")),\n    Body:   &buffer,\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/61437984/golang-error-while-gzipping-mongodb-find-querys-cursor-data-writing-to-a-fil",
    "body": "var cursor, _ = collection.Find(context.TODO(), filter)\ndefer cursor.Close(context.TODO())\n// create pipe endpoints\nreader, writer := io.Pipe()\n// note: io.Pipe() returns a synchronous in-memory pipe\n// reads and writes block on one another\n// make sure to go through docs once.\n// now, since reads and writes on a pipe blocks\n// we must move to a background goroutine else\n// all our writes would block forever\ngo func() {\n\t// order of defer here is important\n\t// see: https://stackoverflow.com/a/24720120/6611700\n\t// make sure gzip stream is closed before the pipe\n\t// to ensure data is flushed properly\n\tdefer writer.Close()\n\tvar gz = gzip.NewWriter(writer)\n\tdefer gz.Close()\n\tfor cursor.Next(context.Background()) {\n\t\tif _, err = io.WriteString(gz, cursor.Current.String()); err != nil {\n            // handle error somehow  ¯\\_(ツ)_/¯\n\t\t}\n\t}\n}()\n// you can now use reader as io.Reader\n// and it'll contain gzipped data for your serialized rows\n_, err = s3.Upload(&s3.UploadInput{\n    Bucket: aws.String(\"...\"),\n    Key:    aws.String(\"...\")),\n    Body:   reader,\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/61254942/how-to-test-if-https-server-my-client-certficate-in-golang",
    "body": "...\n// Client wraps http.Client and has a callback for flagging a certificate request.\ntype client struct {\n\thttp.Client\n\tclientAutenticated bool\n}\n// SetClientAuthenticated\nfunc (c *client) SetClientAutenticated(auth bool) {\n\tc.clientAutenticated = auth\n}\n...\n// This prepares a tls config with customized GetClientCertificate\nfunc prepareTLSConfig(setAuth func(bool)) *tls.Config {\n\tcertPool := x509.NewCertPool()\n\terr := loadCertFiles(certPool, config.cacerts)\n\tif err != nil {\n\t\tlog.Fatalf(\"%s\", err)\n\t}\n\tcert, err := tls.LoadX509KeyPair(config.cert, config.key)\n\tif err != nil {\n\t\tlog.Fatalf(\"error loading key pair: %s\", err)\n\t}\n\ttlsConfig := &tls.Config{\n\t\t// Certificates:  []tls.Certificate{cert},\n\t\tRootCAs:              certPool,\n\t\tMinVersion:           config.tlsver,\n\t\tRenegotiation:        tls.RenegotiateOnceAsClient,\n\t\tGetClientCertificate: buildGetClientCertificate([]tls.Certificate{cert}, setAuth),\n\t}\n\treturn tlsConfig\n}\n// buildGetClientCertificate returns a closure that returns an verified client cert\n// or an error\nfunc buildGetClientCertificate(certs []tls.Certificate, setAuth func(bool))\n    func(*tls.CertificateRequestInfo) (*tls.Certificate, error) {\n\t// return as closure\n    return func(requestInfo *tls.CertificateRequestInfo) (*tls.Certificate, error) {\n\t\tlogCertificates(requestInfo.AcceptableCAs)\n\t\tsetAuth(false)\n\t\tlog.Printf(\"Client cert requested by server\")\n\t\tvar err error\n\t\tfor _, c := range certs {\n\t\t\tif err = requestInfo.SupportsCertificate(&c); err == nil {\n\t\t\t\tvar cert *x509.Certificate\n\t\t\t\tif c.Leaf != nil {\n\t\t\t\t\tcert = c.Leaf\n\t\t\t\t} else {\n\t\t\t\t\tcert, _ = x509.ParseCertificate(c.Certificate[0])\n\t\t\t\t}\n\t\t\t\tsubject := cert.Subject\n\t\t\t\tissuer := cert.Issuer\n\t\t\t\tlog.Printf(\"Client cert accepted\")\n\t\t\t\tlog.Printf(\"   s:/C=%v/ST=%v/L=%v/O=%v/OU=%v/CN=%s\", subject.Country,\n                    subject.Province, subject.Locality, subject.Organization,\n                    subject.OrganizationalUnit, subject.CommonName)\n\t\t\t\tlog.Printf(\"   i:/C=%v/ST=%v/L=%v/O=%v/OU=%v/CN=%s\", issuer.Country,\n                    issuer.Province, issuer.Locality, issuer.Organization,\n                    issuer.OrganizationalUnit, issuer.CommonName)\n                // Signal that a suitable CA has been found and therefore\n                // the client has been authenticated.\n\t\t\t\tsetAuth(true)\n\t\t\t\treturn &c, nil\n\t\t\t}\n\t\t\terr = fmt.Errorf(\"cert not supported: %w\", err)\n\t\t}\n\t\tlog.Print(\"Could not find suitable client cert for authentication\")\n\t\treturn nil, err\n\t}\n}\n...\n// logCertificates logs the acceptableCAs for client certification\nfunc logCertificates(acceptableCAs [][]byte) {\n\tlog.Printf(\"CA Names offered by server\")\n\tfor _, ca := range acceptableCAs {\n\t\tvar name pkix.RDNSequence\n\t\tif _, err := asn1.Unmarshal(ca, &name); err == nil {\n\t\t\tlog.Printf(\"   %s\", name.String()\t\t\t)\n\t\t}else {\n\t\t\tlog.Printf(\"error unmarshalling name: %s\", err)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60944772/processing-a-redis-queue-using-blpop-causes-a-race-condition-in-unit-tests",
    "body": "func TestProcessQueue(t *testing.T) {\n\tctx, cancel := context.WithCancel(context.Background())\n\texecutor := &CommandExecutorMock{\n\t\tExecuteFunc: func(string) error {\n\t\t\treturn nil\n\t\t},\n\t}\n\tdone := make(chan struct{})\n\tgo processQueue(ctx, done, executor)\n\trc := pool.Get()\n\tdefer rc.Close()\n\t_, err := rc.Do(\"RPUSH\", commandsQueue, \"foobar\")\n\trequire.NoError(t, err)\n\tcancel() // note this change right here\n\t<-done\n\tassert.Exactly(t, 1, len(executor.ExecuteCalls()))\n\tassert.Exactly(t, \"foobar\", executor.ExecuteCalls()[0].In1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60503942/how-to-test-for-validation-error-from-go-playground-validator",
    "body": "import (\n\t\"github.com/go-playground/locales/en\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n\t\"time\"\n)\nfunc TestStructIsValid(t *testing.T) {\n    /*\n    This section just sets up translators with defaults. You can write your own\n    per the specification to get the data the way you want.\n    */\n\tv := validator.New()\n\ten := en.New()\n\tuni := ut.New(en, en)\n\ttrans, _ := uni.GetTranslator(\"en\")\n\tinvalidItem := Item{\n\t\tCreatedAt:          time.Time{},\n\t\tUpdatedAt:          time.Time{},\n\t}\n\terr := v.Struct(invalidTemplate)\n\tassert.NotNil(t, err)\n\tassert.Error(t, err)\n\t//Cast to Validation Error and validate assumptions\n\tvalidationErr := err.(validator.ValidationErrors)\n\tfieldErrors := validationErr.Translate(trans)\n\tassert.Len(t, fieldErrors, 3)\n    //Check to see if the map contains a key of Template.Name\n    assert.Len(t, fieldErrors, 3)\n\trequire.Contains(t, fieldErrors, \"Template.Name\")\n\tif nameField, ok := fieldErrors[\"Template.Name\"]; ok {\n\t\t//Let's evaluate the error and make sure it's what we expect\n\t\tassert.Contains(t, nameField, \"required\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60277633/using-docker-sdk-for-loading-image-from-a-file",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"github.com/docker/docker/client\"\n\t\"golang.org/x/net/context\"\n)\nfunc main() {\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tinput := bytes.NewReader([]byte(\"dummy content\\n\"))\n\timageLoadResponse, err := cli.ImageLoad(context.Background(), input, true)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tbody, err := ioutil.ReadAll(imageLoadResponse.Body)\n\tfmt.Println(string(body))\n}\n//Output:\n// {\"errorDetail\":{\"message\":\"Error processing tar file(exit status 1): unexpected EOF\"},\"error\":\"Error processing tar file(exit status 1): unexpected EOF\"}"
  },
  {
    "url": "https://stackoverflow.com/questions/59905546/kafkaio-connector-apache-beam-transform-go-sdk-available",
    "body": "There presently isn't a Kafka transform for Go.\nThe Go SDK is still experimental, largely due to scalable IO support, which is why the Go SDK isn't represented in the built-in io page.\nThere's presently no way for an SDK user to write a Streaming source in the Go SDK, since there's no mechanism for a DoFn to \"self terminate\" bundles, such as to allow for scalability and windowing from streaming sources.\nHowever, SplittableDoFns are on their way, and will eventually be the solution for writing these.\nAt present, the Beam Go SDK IOs haven't been tested and vetted for production use. Until the initial SplittableDoFn support is added to the Go SDK, Batch transforms cannot split, and can't scale beyond a single worker thread. This batch version should land in the next few months, and the streaming version land a few months after that, after which a Kafka IO can be developed.\nI wish I had better news for you, but I can say progress is being made.\nRobert Burke"
  },
  {
    "url": "https://stackoverflow.com/questions/58714966/why-do-go-modules-fail-without-detailed-information-at-pulling-certain-correct",
    "body": "2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.438 calico_all_build INFO         go: downloading github.com/projectcalico/logrus v1.0.4-calico\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.440 calico_all_build INFO         go: downloading github.com/prometheus/client_golang v0.9.1\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.444 calico_all_build INFO         go: downloading github.com/docopt/docopt-go v0.0.0-20160216232012-784ddc588536\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.454 calico_all_build INFO         go: downloading k8s.io/client-go v12.0.0+incompatible\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.477 calico_all_build INFO         go: downloading k8s.io/apimachinery v0.0.0-20190612205821-1799e75a0719\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.504 calico_all_build INFO         go: downloading github.com/coreos/go-semver v0.3.0\n2019-11-06 11:46:46 gobuilds.Compile : 11:46:46.510 calico_all_build INFO         go: extracting github.com/projectcalico/logrus v1.0.4-calico"
  },
  {
    "url": "https://stackoverflow.com/questions/58471321/scan-a-file-from-multiple-points",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"text/scanner\"\n\t\"time\"\n)\nfunc main(){\n\tvar file [2]*os.File\n\tvar err error\n\tfile[0], err = os.Open(\"./abc.txt\")\n\tfile[1], err = os.Open(\"./abc.txt\")\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\tdefer file[0].Close()\n\tdefer file[1].Close()\n\tvar scanner [2]scanner.Scanner\n\tinChan := make(chan string)\n\tfor i := 0; i < 2; i++ {\n\t\tvar n int64 = (int64)(i) * 26\n\t\tfile[i].Seek(n, 0)\n\t\tscanner[i].Init(file[i])\n\t\tfmt.Println(scanner[0].Pos)\n\t\tgo parseLine(fmt.Sprintf(\"Scanner %v:\", i), &scanner[i], inChan)\n\t}\n\tfor msg := range inChan {\n\t\tfmt.Println(msg)\n\t}\n}\nfunc parseLine(name string, scanner *scanner.Scanner, out chan string) {\n\tfor i := 0; i < 26; i++ {\n\t\tout <- fmt.Sprintf(\"%s %c\", name, scanner.Next())\n\t}\n\ttime.Sleep(time.Second * 10)\n\tclose(out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58462402/load-data-files-across-different-tests-in-golang",
    "body": "func getRootPath() string {\n\tdir, err := os.Getwd()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Check if already in root directory (e.g. main.go)\n\tlastSlashIndex := strings.LastIndex(dir, \"/\")\n\tcName := dir[lastSlashIndex+1:]\n\tif cName == \"#root-folder-name#\" {\n\t\treturn dir\n\t}\n\t// Get parent directory\n\tparent := filepath.Dir(dir)\n\tlastSlashIndex = strings.LastIndex(parent, \"/\")\n\tpName := parent[lastSlashIndex+1:]\n\t// If not at root, continue getting parent\n\tfor pName != \"#root-folder-name#\" {\n\t\tparent = filepath.Dir(parent)\n\t\tlastSlashIndex = strings.LastIndex(parent, \"/\")\n\t\tpName = parent[lastSlashIndex+1:]\n\t}\n\treturn parent\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58459117/how-to-handle-video-and-image-upload-to-storage-servers",
    "body": "// Storer takes the source and stores its contents under path for further reading via\n// Retriever.\ntype Storer interface {\n\tStreamTo(path string, source io.Reader) (err error)\n}\n// Retriever takes a path and streams the file it has stored under path to w.\ntype Retriever interface {\n\tStreamFrom(path string, w io.Writer) (err error)\n}\n// Repository is a composite interface. It requires a\n// repository to accept andf provide streams of files\ntype Repository interface {\n\tStorer\n\tRetriever\n\tClose() error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58325207/how-to-use-zap-logger-with-go-kit",
    "body": "package main\nimport (\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n)\nfunc main() {\n\tcfg := zap.Config{\n\t\tEncoding:         \"json\",\n\t\tLevel:            zap.NewAtomicLevelAt(zapcore.DebugLevel),\n\t\tOutputPaths:      []string{\"stderr\"},\n\t\tErrorOutputPaths: []string{\"stderr\"},\n\t\tEncoderConfig: zapcore.EncoderConfig{\n\t\t\tMessageKey: \"message\",\n\t\t\tLevelKey:    \"level\",\n\t\t\tEncodeLevel: zapcore.CapitalLevelEncoder,\n\t\t\tTimeKey:    \"time\",\n\t\t\tEncodeTime: zapcore.ISO8601TimeEncoder,\n\t\t\tCallerKey:    \"caller\",\n\t\t\tEncodeCaller: zapcore.FullCallerEncoder,\n\t\t},\n\t}\n\tlogger, _ := cfg.Build()\n\tlogger.Info(\"Hello\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58320643/how-to-replace-some-xml-tags-in-text",
    "body": "package main\nimport (\n    \"encoding/xml\"\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"strings\"\n)\nfunc main() {\n    s := `Hello, <param value=\"username\"/>!`\n    d := xml.NewDecoder(strings.NewReader(s))\n    for {\n        t, err := d.Token()\n        if err == io.EOF {\n            break\n        }\n        if err != nil {\n            log.Fatal(err)\n        }\n        switch t := t.(type) {\n        case xml.CharData:\n            fmt.Print(string(t))\n        case xml.StartElement:\n            fmt.Print(\"Adam\")\n        }\n    }\n    fmt.Println(\"\")\n}\n// Output:\n// Hello, Adam!"
  },
  {
    "url": "https://stackoverflow.com/questions/58228559/how-to-handle-weird-api-flow-with-implicit-create-step-in-custom-terraform-provi",
    "body": "func defaultResourceConfiguration() *schema.Resource {\n\tdrc := resourceConfiguration()\n\tdrc.Create = resourceDefaultConfigurationCreate\n\tdrc.Delete = resourceDefaultConfigurationDelete\n\treturn drc\n}\nfunc resourceDefaultConfigurationCreate(d *schema.ResourceData, m interface{}) error {\n    // double check it exists and update the resource instead\n\treturn resourceConfigurationUpdate(d, m)\n}\nfunc resourceDefaultConfigurationDelete(d *schema.ResourceData, m interface{}) error {\n\tlog.Printf(\"[WARN] Cannot destroy Default Scope Configuration. Terraform will remove this resource from the state file, however resources may remain.\")\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56403366/test-an-error-response-in-a-method-thats-internal-to-a-struct",
    "body": "# example.go\npackage example\nimport \"fmt\"\ntype internalFooAPI interface {\n\tinternalBehavior(string) (string, error)\n}\ntype Foo struct {\n\tinternal internalFooAPI\n}\ntype internalFoo struct{}\nfunc NewFoo(internal internalFooAPI) Foo {\n\treturn Foo{\n\t\tinternal: internal,\n\t}\n}\nfunc (foo Foo) Start() (err error) {\n\tdata, err := foo.internal.internalBehavior(\"bar\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(data)\n\treturn err\n}\nfunc (foo internalFoo) internalBehavior(input string) (output string, err error) {\n\treturn output, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56403366/test-an-error-response-in-a-method-thats-internal-to-a-struct",
    "body": "# example_test.go\npackage example\nimport (\n\t\"testing\"\n\t\"github.com/pkg/errors\"\n)\ntype mockInternalFoo struct{}\ntype mockInternalFooWithErrors struct{}\nfunc (foo mockInternalFoo) internalBehavior(input string) (output string, err error) {\n\treturn output, err\n}\nfunc (foo mockInternalFooWithErrors) internalBehavior(input string) (output string, err error) {\n\treturn output, errors.New(\"big error\")\n}\nfunc TestStart(t *testing.T) {\n\ttdata := []struct {\n\t\ttestCase        string\n\t\texpectedAnError bool\n\t\tfoo             Foo\n\t}{\n\t\t{\n\t\t\ttestCase:        \"standard_case\",\n\t\t\texpectedAnError: false,\n\t\t\tfoo:             NewFoo(internalFoo{}),\n\t\t},\n\t\t{\n\t\t\ttestCase:        \"mock_case\",\n\t\t\texpectedAnError: false,\n\t\t\tfoo:             NewFoo(mockInternalFoo{}),\n\t\t},\n\t\t{\n\t\t\ttestCase:        \"error_case\",\n\t\t\texpectedAnError: true,\n\t\t\tfoo:             NewFoo(mockInternalFooWithErrors{}),\n\t\t},\n\t}\n\tfor _, test := range tdata {\n\t\tt.Run(test.testCase, func(t *testing.T) {\n\t\t\t// The function under test\n\t\t\terr := test.foo.Start()\n\t\t\t// Assertion 1\n\t\t\tif test.expectedAnError == false && err != nil {\n\t\t\t\tt.Error(err.Error())\n\t\t\t}\n\t\t\t// Assertion 2\n\t\t\tif test.expectedAnError == true && err == nil {\n\t\t\t\tt.Error(\"expected an error, but there was none!\")\n\t\t\t}\n\t\t})\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55760155/bleve-command-line-examples",
    "body": "#!/bin/sh\nset -x\nset -e\n# create a custom mapping\ncat > mapping.json << MAPPING\n{\n  \"types\": {\n    \"_default\": {\n      \"properties\": {\n        \"location\": {\n          \"properties\": {\n            \"state\": {\n              \"fields\": [\n                {\n                  \"name\": \"state\",\n                  \"type\": \"text\",\n                  \"analyzer\": \"keyword\",\n                  \"store\": true,\n                  \"index\": true,\n                  \"include_term_vectors\": true,\n                  \"include_in_all\": true\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\nMAPPING\nrm -fr test.bleve\n# create index\nbleve create ./test.bleve --mapping ./mapping.json\n# create JSON file to index\ncat > test.json <<DELIM\n{\n    \"name\": \"test\",\n    \"location\": {\n        \"address1\": \"777 TEST ROAD\",\n        \"address2\": \"\",\n        \"city\": \"HIGHLAND HEIGHTS\",\n        \"state\": \"IN\",\n        \"zip\": \"777777\",\n        \"countryCode\": \"\",\n        \"latitude\": 41.549536,\n        \"longitude\": -81.454717\n    }\n}\nDELIM\n# index test file\nbleve index test.bleve test.json\n# query for the file we indexed\nbleve query test.bleve location.state:IN"
  },
  {
    "url": "https://stackoverflow.com/questions/55288303/running-a-constant-number-of-goroutines",
    "body": "func main() {\n        var done = make(chan struct{}, routineAmt)\n        //loop forever\n        for i := 0; i < routineAmt; i++ {\n                // start a new one to check the next range:\n                go checkRange(done, rangeIndex, rangeIndex+rangeSize)\n                // increment the rangeIndex for the next routine which will start:\n                rangeIndex += rangeSize\n        }\n        for range done {\n                // start a new one to check the next range:\n                go checkRange(done, rangeIndex, rangeIndex+rangeSize)\n                // increment the rangeIndex for the next routine which will start:\n                rangeIndex += rangeSize\n        }\n}\n// Function to check a range of powers of two, whether they contain any power-of-two-digits\nfunc checkRange(done chan<- struct{}, from, to int64) {\n        // Loop through the range for powers of two, which do not contain any power-of-two-digits\n        for i := from; i < to; i++ {\n                num := big.NewInt(2)\n                num.Exp(num, big.NewInt(i), nil)\n                if !hasStringPowerOfTwo(num.String()) {\n                        log.Println(\"Found 2 ^\", i)\n                }\n        }\n        log.Printf(\"Checked range %d-%d\\n\", from, to)\n        // let our main go routine know we're done with this one\n        done <- struct{}{}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55279179/how-to-split-a-struct-in-golang-according-to-specific-values",
    "body": "package main\nimport \"fmt\"\ntype table []map[string]interface{}\nfunc (t table) sliceColumns(cols ...string) table {\n        // create our new resulting table\n        var newTable = make(table, len(t))\n        // loop through table and populate our newTable\n        for i, m := range t {\n                var n = make(map[string]interface{}, len(cols))\n                for _, col := range cols {\n                        if v, ok := m[col]; ok {\n                                n[col] = v\n                        }\n                }\n                newTable[i] = n\n        }\n        return newTable\n}\nfunc main() {\n        // define slice of Identification\n        var t = table{\n                {\n                        \"ID\":    \"1\",\n                        \"Phone\": 155555,\n                },\n                {\n                        \"ID\":    \"2\",\n                        \"Email\": \"3Email\",\n                },\n                {\n                        \"ID\":    \"3\",\n                        \"Email\": \"4Email\",\n                        \"Value\": \"aaaa\",\n                        \"Phone\": \"123\",\n                },\n        }\n        fmt.Println(t.sliceColumns(\"ID\", \"Phone\")) // [map[ID:1 Phone:155555] map[ID:2] map[ID:3 Phone:123]]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55207853/how-to-send-message-to-all-connections-in-pool",
    "body": "mu := new(sync.Mutex)\nvar eventChans []sse.Event\nrouter.GET(\"/api/addUser/event\", func(c *gin.Context) {\n    c.Header(\"Content-Type\", \"text/event-stream\")\n    c.Header(\"Access-Control-Allow-Origin\", \"*\")\n    c.Header(\"Access-Control-Allow-Headers\", \"access-control-allow-origin, access-control-allow-headers\")\n    // Add own channel to the pool.\n    events := make(chan sse.Event)\n    mu.Lock()\n    eventChans = append(eventChans, events)\n    mu.Unlock()\n    // Listen for the events.\n    for(event := range events) {\n        sse.Encode(c.Writer, event)\n    }\n})\nrouter.POST(\"/api/addUser\", func(c *gin.Context) {\n    mu.Lock()\n    for(_, events := range eventChans) {\n        events <- sse.Event{ ... }\n    }\n    mu.Unlock()\n    c.JSON(http.StatusOK, \"okay\")\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/55207853/how-to-send-message-to-all-connections-in-pool",
    "body": "cond := sync.NewCond(new(sync.Mutex))\nvar event *sse.Event\nrouter.GET(\"/api/addUser/event\", func(c *gin.Context) {\n    c.Header(\"Content-Type\", \"text/event-stream\")\n    c.Header(\"Access-Control-Allow-Origin\", \"*\")\n    c.Header(\"Access-Control-Allow-Headers\", \"access-control-allow-origin, access-control-allow-headers\")\n    for {\n        // Wait for event.\n        cond.L.Lock()\n        for(event == nil) {\n            cond.Wait()\n        }\n        sse.Encode(c.Writer, event)\n    }\n})\nrouter.POST(\"/api/addUser\", func(c *gin.Context) {\n    cond.L.Lock()\n    event = sse.Event{ ... }\n    cond.L.Unlock()\n    cond.Broadcast()\n    c.JSON(http.StatusOK, \"okay\")\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/55106146/golang-sdk-for-google-cloud-sql",
    "body": "type AclEntry\nfunc (s *AclEntry) MarshalJSON() ([]byte, error)\ntype ApiWarning\nfunc (s *ApiWarning) MarshalJSON() ([]byte, error)\ntype BackupConfiguration\nfunc (s *BackupConfiguration) MarshalJSON() ([]byte, error)\ntype BackupRun\nfunc (s *BackupRun) MarshalJSON() ([]byte, error)\ntype BackupRunsDeleteCall\nfunc (c *BackupRunsDeleteCall) Context(ctx context.Context) *BackupRunsDeleteCall\nfunc (c *BackupRunsDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *BackupRunsDeleteCall) Fields(s ...googleapi.Field) *BackupRunsDeleteCall\nfunc (c *BackupRunsDeleteCall) Header() http.Header\ntype BackupRunsGetCall\nfunc (c *BackupRunsGetCall) Context(ctx context.Context) *BackupRunsGetCall\nfunc (c *BackupRunsGetCall) Do(opts ...googleapi.CallOption) (*BackupRun, error)\nfunc (c *BackupRunsGetCall) Fields(s ...googleapi.Field) *BackupRunsGetCall\nfunc (c *BackupRunsGetCall) Header() http.Header\nfunc (c *BackupRunsGetCall) IfNoneMatch(entityTag string) *BackupRunsGetCall\ntype BackupRunsInsertCall\nfunc (c *BackupRunsInsertCall) Context(ctx context.Context) *BackupRunsInsertCall\nfunc (c *BackupRunsInsertCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *BackupRunsInsertCall) Fields(s ...googleapi.Field) *BackupRunsInsertCall\nfunc (c *BackupRunsInsertCall) Header() http.Header\ntype BackupRunsListCall\nfunc (c *BackupRunsListCall) Context(ctx context.Context) *BackupRunsListCall\nfunc (c *BackupRunsListCall) Do(opts ...googleapi.CallOption) (*BackupRunsListResponse, error)\nfunc (c *BackupRunsListCall) Fields(s ...googleapi.Field) *BackupRunsListCall\nfunc (c *BackupRunsListCall) Header() http.Header\nfunc (c *BackupRunsListCall) IfNoneMatch(entityTag string) *BackupRunsListCall\nfunc (c *BackupRunsListCall) MaxResults(maxResults int64) *BackupRunsListCall\nfunc (c *BackupRunsListCall) PageToken(pageToken string) *BackupRunsListCall\nfunc (c *BackupRunsListCall) Pages(ctx context.Context, f func(*BackupRunsListResponse) error) error\ntype BackupRunsListResponse\nfunc (s *BackupRunsListResponse) MarshalJSON() ([]byte, error)\ntype BackupRunsService\nfunc NewBackupRunsService(s *Service) *BackupRunsService\nfunc (r *BackupRunsService) Delete(project string, instance string, id int64) *BackupRunsDeleteCall\nfunc (r *BackupRunsService) Get(project string, instance string, id int64) *BackupRunsGetCall\nfunc (r *BackupRunsService) Insert(project string, instance string, backuprun *BackupRun) *BackupRunsInsertCall\nfunc (r *BackupRunsService) List(project string, instance string) *BackupRunsListCall\ntype BinLogCoordinates\nfunc (s *BinLogCoordinates) MarshalJSON() ([]byte, error)\ntype CloneContext\nfunc (s *CloneContext) MarshalJSON() ([]byte, error)\ntype Database\nfunc (s *Database) MarshalJSON() ([]byte, error)\ntype DatabaseFlags\nfunc (s *DatabaseFlags) MarshalJSON() ([]byte, error)\ntype DatabaseInstance\nfunc (s *DatabaseInstance) MarshalJSON() ([]byte, error)\ntype DatabaseInstanceFailoverReplica\nfunc (s *DatabaseInstanceFailoverReplica) MarshalJSON() ([]byte, error)\ntype DatabasesDeleteCall\nfunc (c *DatabasesDeleteCall) Context(ctx context.Context) *DatabasesDeleteCall\nfunc (c *DatabasesDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *DatabasesDeleteCall) Fields(s ...googleapi.Field) *DatabasesDeleteCall\nfunc (c *DatabasesDeleteCall) Header() http.Header\ntype DatabasesGetCall\nfunc (c *DatabasesGetCall) Context(ctx context.Context) *DatabasesGetCall\nfunc (c *DatabasesGetCall) Do(opts ...googleapi.CallOption) (*Database, error)\nfunc (c *DatabasesGetCall) Fields(s ...googleapi.Field) *DatabasesGetCall\nfunc (c *DatabasesGetCall) Header() http.Header\nfunc (c *DatabasesGetCall) IfNoneMatch(entityTag string) *DatabasesGetCall\ntype DatabasesInsertCall\nfunc (c *DatabasesInsertCall) Context(ctx context.Context) *DatabasesInsertCall\nfunc (c *DatabasesInsertCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *DatabasesInsertCall) Fields(s ...googleapi.Field) *DatabasesInsertCall\nfunc (c *DatabasesInsertCall) Header() http.Header\ntype DatabasesListCall\nfunc (c *DatabasesListCall) Context(ctx context.Context) *DatabasesListCall\nfunc (c *DatabasesListCall) Do(opts ...googleapi.CallOption) (*DatabasesListResponse, error)\nfunc (c *DatabasesListCall) Fields(s ...googleapi.Field) *DatabasesListCall\nfunc (c *DatabasesListCall) Header() http.Header\nfunc (c *DatabasesListCall) IfNoneMatch(entityTag string) *DatabasesListCall\ntype DatabasesListResponse\nfunc (s *DatabasesListResponse) MarshalJSON() ([]byte, error)\ntype DatabasesPatchCall\nfunc (c *DatabasesPatchCall) Context(ctx context.Context) *DatabasesPatchCall\nfunc (c *DatabasesPatchCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *DatabasesPatchCall) Fields(s ...googleapi.Field) *DatabasesPatchCall\nfunc (c *DatabasesPatchCall) Header() http.Header\ntype DatabasesService\nfunc NewDatabasesService(s *Service) *DatabasesService\nfunc (r *DatabasesService) Delete(project string, instance string, database string) *DatabasesDeleteCall\nfunc (r *DatabasesService) Get(project string, instance string, database string) *DatabasesGetCall\nfunc (r *DatabasesService) Insert(project string, instance string, database *Database) *DatabasesInsertCall\nfunc (r *DatabasesService) List(project string, instance string) *DatabasesListCall\nfunc (r *DatabasesService) Patch(project string, instance string, database string, database2 *Database) *DatabasesPatchCall\nfunc (r *DatabasesService) Update(project string, instance string, database string, database2 *Database) *DatabasesUpdateCall\ntype DatabasesUpdateCall\nfunc (c *DatabasesUpdateCall) Context(ctx context.Context) *DatabasesUpdateCall\nfunc (c *DatabasesUpdateCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *DatabasesUpdateCall) Fields(s ...googleapi.Field) *DatabasesUpdateCall\nfunc (c *DatabasesUpdateCall) Header() http.Header\ntype DemoteMasterConfiguration\nfunc (s *DemoteMasterConfiguration) MarshalJSON() ([]byte, error)\ntype DemoteMasterContext\nfunc (s *DemoteMasterContext) MarshalJSON() ([]byte, error)\ntype DemoteMasterMySqlReplicaConfiguration\nfunc (s *DemoteMasterMySqlReplicaConfiguration) MarshalJSON() ([]byte, error)\ntype ExportContext\nfunc (s *ExportContext) MarshalJSON() ([]byte, error)\ntype ExportContextCsvExportOptions\nfunc (s *ExportContextCsvExportOptions) MarshalJSON() ([]byte, error)\ntype ExportContextSqlExportOptions\nfunc (s *ExportContextSqlExportOptions) MarshalJSON() ([]byte, error)\ntype ExportContextSqlExportOptionsMysqlExportOptions\nfunc (s *ExportContextSqlExportOptionsMysqlExportOptions) MarshalJSON() ([]byte, error)\ntype FailoverContext\nfunc (s *FailoverContext) MarshalJSON() ([]byte, error)\ntype Flag\nfunc (s *Flag) MarshalJSON() ([]byte, error)\ntype FlagsListCall\nfunc (c *FlagsListCall) Context(ctx context.Context) *FlagsListCall\nfunc (c *FlagsListCall) DatabaseVersion(databaseVersion string) *FlagsListCall\nfunc (c *FlagsListCall) Do(opts ...googleapi.CallOption) (*FlagsListResponse, error)\nfunc (c *FlagsListCall) Fields(s ...googleapi.Field) *FlagsListCall\nfunc (c *FlagsListCall) Header() http.Header\nfunc (c *FlagsListCall) IfNoneMatch(entityTag string) *FlagsListCall\ntype FlagsListResponse\nfunc (s *FlagsListResponse) MarshalJSON() ([]byte, error)\ntype FlagsService\nfunc NewFlagsService(s *Service) *FlagsService\nfunc (r *FlagsService) List() *FlagsListCall\ntype ImportContext\nfunc (s *ImportContext) MarshalJSON() ([]byte, error)\ntype ImportContextCsvImportOptions\nfunc (s *ImportContextCsvImportOptions) MarshalJSON() ([]byte, error)\ntype InstancesAddServerCaCall\nfunc (c *InstancesAddServerCaCall) Context(ctx context.Context) *InstancesAddServerCaCall\nfunc (c *InstancesAddServerCaCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesAddServerCaCall) Fields(s ...googleapi.Field) *InstancesAddServerCaCall\nfunc (c *InstancesAddServerCaCall) Header() http.Header\ntype InstancesCloneCall\nfunc (c *InstancesCloneCall) Context(ctx context.Context) *InstancesCloneCall\nfunc (c *InstancesCloneCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesCloneCall) Fields(s ...googleapi.Field) *InstancesCloneCall\nfunc (c *InstancesCloneCall) Header() http.Header\ntype InstancesCloneRequest\nfunc (s *InstancesCloneRequest) MarshalJSON() ([]byte, error)\ntype InstancesDeleteCall\nfunc (c *InstancesDeleteCall) Context(ctx context.Context) *InstancesDeleteCall\nfunc (c *InstancesDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesDeleteCall) Fields(s ...googleapi.Field) *InstancesDeleteCall\nfunc (c *InstancesDeleteCall) Header() http.Header\ntype InstancesDemoteMasterCall\nfunc (c *InstancesDemoteMasterCall) Context(ctx context.Context) *InstancesDemoteMasterCall\nfunc (c *InstancesDemoteMasterCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesDemoteMasterCall) Fields(s ...googleapi.Field) *InstancesDemoteMasterCall\nfunc (c *InstancesDemoteMasterCall) Header() http.Header\ntype InstancesDemoteMasterRequest\nfunc (s *InstancesDemoteMasterRequest) MarshalJSON() ([]byte, error)\ntype InstancesExportCall\nfunc (c *InstancesExportCall) Context(ctx context.Context) *InstancesExportCall\nfunc (c *InstancesExportCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesExportCall) Fields(s ...googleapi.Field) *InstancesExportCall\nfunc (c *InstancesExportCall) Header() http.Header\ntype InstancesExportRequest\nfunc (s *InstancesExportRequest) MarshalJSON() ([]byte, error)\ntype InstancesFailoverCall\nfunc (c *InstancesFailoverCall) Context(ctx context.Context) *InstancesFailoverCall\nfunc (c *InstancesFailoverCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesFailoverCall) Fields(s ...googleapi.Field) *InstancesFailoverCall\nfunc (c *InstancesFailoverCall) Header() http.Header\ntype InstancesFailoverRequest\nfunc (s *InstancesFailoverRequest) MarshalJSON() ([]byte, error)\ntype InstancesGetCall\nfunc (c *InstancesGetCall) Context(ctx context.Context) *InstancesGetCall\nfunc (c *InstancesGetCall) Do(opts ...googleapi.CallOption) (*DatabaseInstance, error)\nfunc (c *InstancesGetCall) Fields(s ...googleapi.Field) *InstancesGetCall\nfunc (c *InstancesGetCall) Header() http.Header\nfunc (c *InstancesGetCall) IfNoneMatch(entityTag string) *InstancesGetCall\ntype InstancesImportCall\nfunc (c *InstancesImportCall) Context(ctx context.Context) *InstancesImportCall\nfunc (c *InstancesImportCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesImportCall) Fields(s ...googleapi.Field) *InstancesImportCall\nfunc (c *InstancesImportCall) Header() http.Header\ntype InstancesImportRequest\nfunc (s *InstancesImportRequest) MarshalJSON() ([]byte, error)\ntype InstancesInsertCall\nfunc (c *InstancesInsertCall) Context(ctx context.Context) *InstancesInsertCall\nfunc (c *InstancesInsertCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesInsertCall) Fields(s ...googleapi.Field) *InstancesInsertCall\nfunc (c *InstancesInsertCall) Header() http.Header\ntype InstancesListCall\nfunc (c *InstancesListCall) Context(ctx context.Context) *InstancesListCall\nfunc (c *InstancesListCall) Do(opts ...googleapi.CallOption) (*InstancesListResponse, error)\nfunc (c *InstancesListCall) Fields(s ...googleapi.Field) *InstancesListCall\nfunc (c *InstancesListCall) Filter(filter string) *InstancesListCall\nfunc (c *InstancesListCall) Header() http.Header\nfunc (c *InstancesListCall) IfNoneMatch(entityTag string) *InstancesListCall\nfunc (c *InstancesListCall) MaxResults(maxResults int64) *InstancesListCall\nfunc (c *InstancesListCall) PageToken(pageToken string) *InstancesListCall\nfunc (c *InstancesListCall) Pages(ctx context.Context, f func(*InstancesListResponse) error) error\ntype InstancesListResponse\nfunc (s *InstancesListResponse) MarshalJSON() ([]byte, error)\ntype InstancesListServerCasCall\nfunc (c *InstancesListServerCasCall) Context(ctx context.Context) *InstancesListServerCasCall\nfunc (c *InstancesListServerCasCall) Do(opts ...googleapi.CallOption) (*InstancesListServerCasResponse, error)\nfunc (c *InstancesListServerCasCall) Fields(s ...googleapi.Field) *InstancesListServerCasCall\nfunc (c *InstancesListServerCasCall) Header() http.Header\nfunc (c *InstancesListServerCasCall) IfNoneMatch(entityTag string) *InstancesListServerCasCall\ntype InstancesListServerCasResponse\nfunc (s *InstancesListServerCasResponse) MarshalJSON() ([]byte, error)\ntype InstancesPatchCall\nfunc (c *InstancesPatchCall) Context(ctx context.Context) *InstancesPatchCall\nfunc (c *InstancesPatchCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesPatchCall) Fields(s ...googleapi.Field) *InstancesPatchCall\nfunc (c *InstancesPatchCall) Header() http.Header\ntype InstancesPromoteReplicaCall\nfunc (c *InstancesPromoteReplicaCall) Context(ctx context.Context) *InstancesPromoteReplicaCall\nfunc (c *InstancesPromoteReplicaCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesPromoteReplicaCall) Fields(s ...googleapi.Field) *InstancesPromoteReplicaCall\nfunc (c *InstancesPromoteReplicaCall) Header() http.Header\ntype InstancesResetSslConfigCall\nfunc (c *InstancesResetSslConfigCall) Context(ctx context.Context) *InstancesResetSslConfigCall\nfunc (c *InstancesResetSslConfigCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesResetSslConfigCall) Fields(s ...googleapi.Field) *InstancesResetSslConfigCall\nfunc (c *InstancesResetSslConfigCall) Header() http.Header\ntype InstancesRestartCall\nfunc (c *InstancesRestartCall) Context(ctx context.Context) *InstancesRestartCall\nfunc (c *InstancesRestartCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesRestartCall) Fields(s ...googleapi.Field) *InstancesRestartCall\nfunc (c *InstancesRestartCall) Header() http.Header\ntype InstancesRestoreBackupCall\nfunc (c *InstancesRestoreBackupCall) Context(ctx context.Context) *InstancesRestoreBackupCall\nfunc (c *InstancesRestoreBackupCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesRestoreBackupCall) Fields(s ...googleapi.Field) *InstancesRestoreBackupCall\nfunc (c *InstancesRestoreBackupCall) Header() http.Header\ntype InstancesRestoreBackupRequest\nfunc (s *InstancesRestoreBackupRequest) MarshalJSON() ([]byte, error)\ntype InstancesRotateServerCaCall\nfunc (c *InstancesRotateServerCaCall) Context(ctx context.Context) *InstancesRotateServerCaCall\nfunc (c *InstancesRotateServerCaCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesRotateServerCaCall) Fields(s ...googleapi.Field) *InstancesRotateServerCaCall\nfunc (c *InstancesRotateServerCaCall) Header() http.Header\ntype InstancesRotateServerCaRequest\nfunc (s *InstancesRotateServerCaRequest) MarshalJSON() ([]byte, error)\ntype InstancesService\nfunc NewInstancesService(s *Service) *InstancesService\nfunc (r *InstancesService) AddServerCa(project string, instance string) *InstancesAddServerCaCall\nfunc (r *InstancesService) Clone(project string, instance string, instancesclonerequest *InstancesCloneRequest) *InstancesCloneCall\nfunc (r *InstancesService) Delete(project string, instance string) *InstancesDeleteCall\nfunc (r *InstancesService) DemoteMaster(project string, instance string, instancesdemotemasterrequest *InstancesDemoteMasterRequest) *InstancesDemoteMasterCall\nfunc (r *InstancesService) Export(project string, instance string, instancesexportrequest *InstancesExportRequest) *InstancesExportCall\nfunc (r *InstancesService) Failover(project string, instance string, instancesfailoverrequest *InstancesFailoverRequest) *InstancesFailoverCall\nfunc (r *InstancesService) Get(project string, instance string) *InstancesGetCall\nfunc (r *InstancesService) Import(project string, instance string, instancesimportrequest *InstancesImportRequest) *InstancesImportCall\nfunc (r *InstancesService) Insert(project string, databaseinstance *DatabaseInstance) *InstancesInsertCall\nfunc (r *InstancesService) List(project string) *InstancesListCall\nfunc (r *InstancesService) ListServerCas(project string, instance string) *InstancesListServerCasCall\nfunc (r *InstancesService) Patch(project string, instance string, databaseinstance *DatabaseInstance) *InstancesPatchCall\nfunc (r *InstancesService) PromoteReplica(project string, instance string) *InstancesPromoteReplicaCall\nfunc (r *InstancesService) ResetSslConfig(project string, instance string) *InstancesResetSslConfigCall\nfunc (r *InstancesService) Restart(project string, instance string) *InstancesRestartCall\nfunc (r *InstancesService) RestoreBackup(project string, instance string, instancesrestorebackuprequest *InstancesRestoreBackupRequest) *InstancesRestoreBackupCall\nfunc (r *InstancesService) RotateServerCa(project string, instance string, instancesrotateservercarequest *InstancesRotateServerCaRequest) *InstancesRotateServerCaCall\nfunc (r *InstancesService) StartReplica(project string, instance string) *InstancesStartReplicaCall\nfunc (r *InstancesService) StopReplica(project string, instance string) *InstancesStopReplicaCall\nfunc (r *InstancesService) TruncateLog(project string, instance string, instancestruncatelogrequest *InstancesTruncateLogRequest) *InstancesTruncateLogCall\nfunc (r *InstancesService) Update(project string, instance string, databaseinstance *DatabaseInstance) *InstancesUpdateCall\ntype InstancesStartReplicaCall\nfunc (c *InstancesStartReplicaCall) Context(ctx context.Context) *InstancesStartReplicaCall\nfunc (c *InstancesStartReplicaCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesStartReplicaCall) Fields(s ...googleapi.Field) *InstancesStartReplicaCall\nfunc (c *InstancesStartReplicaCall) Header() http.Header\ntype InstancesStopReplicaCall\nfunc (c *InstancesStopReplicaCall) Context(ctx context.Context) *InstancesStopReplicaCall\nfunc (c *InstancesStopReplicaCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesStopReplicaCall) Fields(s ...googleapi.Field) *InstancesStopReplicaCall\nfunc (c *InstancesStopReplicaCall) Header() http.Header\ntype InstancesTruncateLogCall\nfunc (c *InstancesTruncateLogCall) Context(ctx context.Context) *InstancesTruncateLogCall\nfunc (c *InstancesTruncateLogCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesTruncateLogCall) Fields(s ...googleapi.Field) *InstancesTruncateLogCall\nfunc (c *InstancesTruncateLogCall) Header() http.Header\ntype InstancesTruncateLogRequest\nfunc (s *InstancesTruncateLogRequest) MarshalJSON() ([]byte, error)\ntype InstancesUpdateCall\nfunc (c *InstancesUpdateCall) Context(ctx context.Context) *InstancesUpdateCall\nfunc (c *InstancesUpdateCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *InstancesUpdateCall) Fields(s ...googleapi.Field) *InstancesUpdateCall\nfunc (c *InstancesUpdateCall) Header() http.Header\ntype IpConfiguration\nfunc (s *IpConfiguration) MarshalJSON() ([]byte, error)\ntype IpMapping\nfunc (s *IpMapping) MarshalJSON() ([]byte, error)\ntype LocationPreference\nfunc (s *LocationPreference) MarshalJSON() ([]byte, error)\ntype MaintenanceWindow\nfunc (s *MaintenanceWindow) MarshalJSON() ([]byte, error)\ntype MySqlReplicaConfiguration\nfunc (s *MySqlReplicaConfiguration) MarshalJSON() ([]byte, error)\ntype OnPremisesConfiguration\nfunc (s *OnPremisesConfiguration) MarshalJSON() ([]byte, error)\ntype Operation\nfunc (s *Operation) MarshalJSON() ([]byte, error)\ntype OperationError\nfunc (s *OperationError) MarshalJSON() ([]byte, error)\ntype OperationErrors\nfunc (s *OperationErrors) MarshalJSON() ([]byte, error)\ntype OperationsGetCall\nfunc (c *OperationsGetCall) Context(ctx context.Context) *OperationsGetCall\nfunc (c *OperationsGetCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *OperationsGetCall) Fields(s ...googleapi.Field) *OperationsGetCall\nfunc (c *OperationsGetCall) Header() http.Header\nfunc (c *OperationsGetCall) IfNoneMatch(entityTag string) *OperationsGetCall\ntype OperationsListCall\nfunc (c *OperationsListCall) Context(ctx context.Context) *OperationsListCall\nfunc (c *OperationsListCall) Do(opts ...googleapi.CallOption) (*OperationsListResponse, error)\nfunc (c *OperationsListCall) Fields(s ...googleapi.Field) *OperationsListCall\nfunc (c *OperationsListCall) Header() http.Header\nfunc (c *OperationsListCall) IfNoneMatch(entityTag string) *OperationsListCall\nfunc (c *OperationsListCall) MaxResults(maxResults int64) *OperationsListCall\nfunc (c *OperationsListCall) PageToken(pageToken string) *OperationsListCall\nfunc (c *OperationsListCall) Pages(ctx context.Context, f func(*OperationsListResponse) error) error\ntype OperationsListResponse\nfunc (s *OperationsListResponse) MarshalJSON() ([]byte, error)\ntype OperationsService\nfunc NewOperationsService(s *Service) *OperationsService\nfunc (r *OperationsService) Get(project string, operation string) *OperationsGetCall\nfunc (r *OperationsService) List(project string, instance string) *OperationsListCall\ntype ReplicaConfiguration\nfunc (s *ReplicaConfiguration) MarshalJSON() ([]byte, error)\ntype RestoreBackupContext\nfunc (s *RestoreBackupContext) MarshalJSON() ([]byte, error)\ntype RotateServerCaContext\nfunc (s *RotateServerCaContext) MarshalJSON() ([]byte, error)\ntype Service\nfunc New(client *http.Client) (*Service, error)\ntype Settings\nfunc (s *Settings) MarshalJSON() ([]byte, error)\ntype SslCert\nfunc (s *SslCert) MarshalJSON() ([]byte, error)\ntype SslCertDetail\nfunc (s *SslCertDetail) MarshalJSON() ([]byte, error)\ntype SslCertsCreateEphemeralCall\nfunc (c *SslCertsCreateEphemeralCall) Context(ctx context.Context) *SslCertsCreateEphemeralCall\nfunc (c *SslCertsCreateEphemeralCall) Do(opts ...googleapi.CallOption) (*SslCert, error)\nfunc (c *SslCertsCreateEphemeralCall) Fields(s ...googleapi.Field) *SslCertsCreateEphemeralCall\nfunc (c *SslCertsCreateEphemeralCall) Header() http.Header\ntype SslCertsCreateEphemeralRequest\nfunc (s *SslCertsCreateEphemeralRequest) MarshalJSON() ([]byte, error)\ntype SslCertsDeleteCall\nfunc (c *SslCertsDeleteCall) Context(ctx context.Context) *SslCertsDeleteCall\nfunc (c *SslCertsDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *SslCertsDeleteCall) Fields(s ...googleapi.Field) *SslCertsDeleteCall\nfunc (c *SslCertsDeleteCall) Header() http.Header\ntype SslCertsGetCall\nfunc (c *SslCertsGetCall) Context(ctx context.Context) *SslCertsGetCall\nfunc (c *SslCertsGetCall) Do(opts ...googleapi.CallOption) (*SslCert, error)\nfunc (c *SslCertsGetCall) Fields(s ...googleapi.Field) *SslCertsGetCall\nfunc (c *SslCertsGetCall) Header() http.Header\nfunc (c *SslCertsGetCall) IfNoneMatch(entityTag string) *SslCertsGetCall\ntype SslCertsInsertCall\nfunc (c *SslCertsInsertCall) Context(ctx context.Context) *SslCertsInsertCall\nfunc (c *SslCertsInsertCall) Do(opts ...googleapi.CallOption) (*SslCertsInsertResponse, error)\nfunc (c *SslCertsInsertCall) Fields(s ...googleapi.Field) *SslCertsInsertCall\nfunc (c *SslCertsInsertCall) Header() http.Header\ntype SslCertsInsertRequest\nfunc (s *SslCertsInsertRequest) MarshalJSON() ([]byte, error)\ntype SslCertsInsertResponse\nfunc (s *SslCertsInsertResponse) MarshalJSON() ([]byte, error)\ntype SslCertsListCall\nfunc (c *SslCertsListCall) Context(ctx context.Context) *SslCertsListCall\nfunc (c *SslCertsListCall) Do(opts ...googleapi.CallOption) (*SslCertsListResponse, error)\nfunc (c *SslCertsListCall) Fields(s ...googleapi.Field) *SslCertsListCall\nfunc (c *SslCertsListCall) Header() http.Header\nfunc (c *SslCertsListCall) IfNoneMatch(entityTag string) *SslCertsListCall\ntype SslCertsListResponse\nfunc (s *SslCertsListResponse) MarshalJSON() ([]byte, error)\ntype SslCertsService\nfunc NewSslCertsService(s *Service) *SslCertsService\nfunc (r *SslCertsService) CreateEphemeral(project string, instance string, sslcertscreateephemeralrequest *SslCertsCreateEphemeralRequest) *SslCertsCreateEphemeralCall\nfunc (r *SslCertsService) Delete(project string, instance string, sha1Fingerprint string) *SslCertsDeleteCall\nfunc (r *SslCertsService) Get(project string, instance string, sha1Fingerprint string) *SslCertsGetCall\nfunc (r *SslCertsService) Insert(project string, instance string, sslcertsinsertrequest *SslCertsInsertRequest) *SslCertsInsertCall\nfunc (r *SslCertsService) List(project string, instance string) *SslCertsListCall\ntype Tier\nfunc (s *Tier) MarshalJSON() ([]byte, error)\ntype TiersListCall\nfunc (c *TiersListCall) Context(ctx context.Context) *TiersListCall\nfunc (c *TiersListCall) Do(opts ...googleapi.CallOption) (*TiersListResponse, error)\nfunc (c *TiersListCall) Fields(s ...googleapi.Field) *TiersListCall\nfunc (c *TiersListCall) Header() http.Header\nfunc (c *TiersListCall) IfNoneMatch(entityTag string) *TiersListCall\ntype TiersListResponse\nfunc (s *TiersListResponse) MarshalJSON() ([]byte, error)\ntype TiersService\nfunc NewTiersService(s *Service) *TiersService\nfunc (r *TiersService) List(project string) *TiersListCall\ntype TruncateLogContext\nfunc (s *TruncateLogContext) MarshalJSON() ([]byte, error)\ntype User\nfunc (s *User) MarshalJSON() ([]byte, error)\ntype UsersDeleteCall\nfunc (c *UsersDeleteCall) Context(ctx context.Context) *UsersDeleteCall\nfunc (c *UsersDeleteCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *UsersDeleteCall) Fields(s ...googleapi.Field) *UsersDeleteCall\nfunc (c *UsersDeleteCall) Header() http.Header\ntype UsersInsertCall\nfunc (c *UsersInsertCall) Context(ctx context.Context) *UsersInsertCall\nfunc (c *UsersInsertCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *UsersInsertCall) Fields(s ...googleapi.Field) *UsersInsertCall\nfunc (c *UsersInsertCall) Header() http.Header\ntype UsersListCall\nfunc (c *UsersListCall) Context(ctx context.Context) *UsersListCall\nfunc (c *UsersListCall) Do(opts ...googleapi.CallOption) (*UsersListResponse, error)\nfunc (c *UsersListCall) Fields(s ...googleapi.Field) *UsersListCall\nfunc (c *UsersListCall) Header() http.Header\nfunc (c *UsersListCall) IfNoneMatch(entityTag string) *UsersListCall\ntype UsersListResponse\nfunc (s *UsersListResponse) MarshalJSON() ([]byte, error)\ntype UsersService\nfunc NewUsersService(s *Service) *UsersService\nfunc (r *UsersService) Delete(project string, instance string, host string, name string) *UsersDeleteCall\nfunc (r *UsersService) Insert(project string, instance string, user *User) *UsersInsertCall\nfunc (r *UsersService) List(project string, instance string) *UsersListCall\nfunc (r *UsersService) Update(project string, instance string, name string, user *User) *UsersUpdateCall\ntype UsersUpdateCall\nfunc (c *UsersUpdateCall) Context(ctx context.Context) *UsersUpdateCall\nfunc (c *UsersUpdateCall) Do(opts ...googleapi.CallOption) (*Operation, error)\nfunc (c *UsersUpdateCall) Fields(s ...googleapi.Field) *UsersUpdateCall\nfunc (c *UsersUpdateCall) Header() http.Header\nfunc (c *UsersUpdateCall) Host(host string) *UsersUpdateCall"
  },
  {
    "url": "https://stackoverflow.com/questions/55080154/ports-not-being-published",
    "body": "package main\nimport (\n\tdocker \"github.com/fsouza/go-dockerclient\"\n)\nfunc main() {\n\tendpoint := \"unix:///var/run/docker.sock\"\n\tclient, err := docker.NewClient(endpoint)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcontainer, err := client.CreateContainer(docker.CreateContainerOptions{\n\t\tName:   \"my-container\",\n\t\tConfig: &docker.Config{Image: \"sameersbn/bind:9.11.3-20190113\"},\n\t        HostConfig: &docker.HostConfig{\n\t\t\tPortBindings: map[docker.Port][]docker.PortBinding{\n\t\t\t\t\"53/tcp\": {{HostIP: \"0.0.0.0\", HostPort: \"1053\"}},\n\t\t\t\t\"53/udp\": {{HostIP: \"0.0.0.0\", HostPort: \"1053\"}},\n\t\t\t},\n\t\t},\n\t},\n\t)\n\tclient.StartContainer(container.ID, nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54552516/golang-group-and-merge-by-value-in-goroutine",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\ntype input struct {\n\tID    int `json:\"id\"`\n\tName  string `json:\"name\"`\n\tImage img    `json:\"image\"`\n}\ntype output struct {\n\tID    int `json:\"id\"`\n\tName  string `json:\"name\"`\n\tImage []img  `json:\"image\"`\n}\ntype img struct {\n\tName string `json:\"name\"`\n}\nfunc main() {\n\tvar jsoninput = []byte(`\n\t[{\n\t\t\"id\": 10,\n\t\t\"name\": \"product 10\",\n\t\t\"image\": {\"name\": \"image 10a\"}\n\t}, {\n\t\t\"id\": 10,\n\t\t\t\"name\": \"product 10\",\n\t\t\t\"image\": {\"name\": \"image 10b\"}\n\t}, {\n\t\t\"id\": 11,\n\t\t\t\"name\": \"product 11\",\n\t\t\t\"image\": {\"name\": \"image 11a\"}\n\t}, {\n\t\t\"id\": 11,\n\t\t\t\"name\": \"product 11\",\n\t\t\t\"image\": {\"name\": \"image 11b\"}\n\t}, {\n\t\t\"id\": 11,\n\t\t\t\"name\": \"product 11\",\n\t\t\t\"image\": {\"name\": \"image 11c\"}\n\t}]`)\n\tvar inputs []input\n\terr := json.Unmarshal(jsoninput, &inputs)\n\tif err != nil {\n\t\tlog.Fatalln(\"could not Unmarshal:\", err)\n\t}\n\tvar outputlist = make(map[int]output)\n\tfor _, inp := range inputs {\n\t\toutputlist[inp.ID] = output{inp.ID, inp.Name, append(outputlist[inp.ID].Image, inp.Image)}\n\t}\n\tvar outputs []output\n\tfor _, outp := range outputlist{\n\t\toutputs = append(outputs,outp)\n\t}\n\tjsonoutput, err := json.Marshal(outputs)\n\tfmt.Println(string(jsonoutput))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54406712/mocking-bufio-scanner-input",
    "body": "type mockFile struct {\n\tCloseFunc  func() error\n\tReadFunc   func(p []byte) (int, error)\n\tReadAtFunc func(p []byte, off int64) (int, error)\n\tSeekFunc   func(offset int64, whence int) (int64, error)\n\tStatFunc   func() (os.FileInfo, error)\n}\nfunc (m *mockFile) Close() error {\n\treturn m.CloseFunc()\n}\nfunc (m *mockFile) Read(p []byte) (int, error) {\n\treturn m.ReadFunc(p)\n}\nfunc (m *mockFile) ReadAt(p []byte, off int64) (int, error) {\n\treturn m.ReadAtFunc(p, off)\n}\nfunc (m *mockFile) Seek(offset int64, whence int) (int64, error) {\n\treturn m.SeekFunc(offset, whence)\n}\nfunc (m *mockFile) Stat() (os.FileInfo, error) {\n\treturn m.StatFunc()\n}\n---\nreader := ioutil.NopCloser(strings.NewReader(\"some string, replace with bytes etc\"))\nfile := &mockFile{\n\tReadFunc: func(p []byte) (int, error) {\n\t\treturn reader.Read(p)\n\t},\n\tCloseFunc: func() error {\n\t\treturn nil\n\t},\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54258019/connecting-to-usbtmc-devices-via-usb-in-linux",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/gotmc/usbtmc\"\n\t_ \"github.com/gotmc/usbtmc/driver/google\"\n)\nvar (\n\tdebugLevel uint\n)\nfunc init() {\n\tconst (\n\t\tdefaultLevel = 1\n\t\tdebugUsage   = \"USB debug level\"\n\t)\n\tflag.UintVar(&debugLevel, \"debug\", defaultLevel, debugUsage)\n\tflag.UintVar(&debugLevel, \"d\", defaultLevel, debugUsage+\" (shorthand)\")\n}\nfunc main() {\n\t// Parse the config flags to determine the config JSON filename\n\tflag.Parse()\n\t// Create new USBTMC context and new device.\n\tstart := time.Now()\n\tctx, err := usbtmc.NewContext()\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating new USB context: %s\", err)\n\t}\n\tctx.SetDebugLevel(int(debugLevel))\n    mm, err := ctx.NewDevice(\"USB0::10893::4610::MY58130019::INSTR\")\n    // You could try the following instead:\n    // mm, err := ctx.NewDeviceByVIDPID(10893, 4610)\n\tif err != nil {\n\t\tlog.Fatalf(\"NewDevice error: %s\", err)\n\t}\n\tlog.Printf(\"%.2fs to create new device.\", time.Since(start).Seconds())\n\n    // Send a SCPI command to the multimeter.\n    mm.WriteString(\"*CLS\\n\")\n\t// Close the multimeter and USBTMC context and check for errors.\n\terr = mm.Close()\n\tif err != nil {\n\t\tlog.Printf(\"error closing mm: %s\", err)\n\t}\n\terr = ctx.Close()\n\tif err != nil {\n\t\tlog.Printf(\"Error closing context: %s\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54117528/what-better-way-to-implement-a-routine-that-verifies-and-performs-posts-in-socia",
    "body": "    package main\n\n    import (\n    \t\"fmt\"\n    \t\"log\"\n    \t\"net/http\"\n    \t\"sort\"\n    \t\"time\"\n    )\n\n    type posting struct {\n    \tcaption string\n    \tscheduledTo time.Time\n    }\n\n    const dateLayoutFormat  = \"02-01-2006 15:04:05\"\n\n    var botStatus = true\n    var indexPosting int\n    var tickerSchedule = time.NewTicker(1)\n    var posts = []posting{\n    \t{caption: \"item 1\", scheduledTo: time.Now().Add(5 * time.Second)},\n    \t{caption: \"item 2\", scheduledTo: time.Now().Add(25 * time.Second)},\n    }\n\n    func init() {\n    \tindexPosting = len(posts)\n    }\n\n    func main() {\n    \thttp.HandleFunc(\"/\", func (w http.ResponseWriter, r *http.Request) {\n    \t\tfmt.Fprint(w, \"Bem vindo ao bot\")\n    \t})\n\n    \thttp.HandleFunc(\"/stop\", func (w http.ResponseWriter, r *http.Request) {\n    \t\tfmt.Fprint(w, \"Parando o bot!\")\n    \t\tstopBot()\n    \t})\n\n    \thttp.HandleFunc(\"/start\", func (w http.ResponseWriter, r *http.Request) {\n    \t\tfmt.Fprint(w, \"Iniciando o bot!\")\n    \t\tstartBot()\n    \t})\n\n    \thttp.HandleFunc(\"/add\", func (w http.ResponseWriter, r *http.Request) {\n    \t\tt := time.Now().Add(5 * time.Second)\n    \t\tindexPosting++\n\n    \t\taddItemDB(posting{\n    \t\t\tcaption: fmt.Sprint(\"item \", indexPosting),\n    \t\t\tscheduledTo: t,\n    \t\t})\n\n    \t\tfmt.Fprint(w, \"Adicionando nova postagem \\nPróximo post será: \", t.Format(dateLayoutFormat))\n    \t})\n\n    \tif botStatus {\n    \t\tgo workerScheduled()\n    \t}\n\n    \tlog.Print(\"Inicnando server...\")\n    \tif err := http.ListenAndServe(\":9090\", nil); err != nil {\n    \t\tlog.Print(\"erro ao iniciar servidor => \", err)\n    \t}\n\n    }\n\n    func workerScheduled() {\n    \tfor {\n    \t\tlog.Print(\"listando as próximas postagens\")\n\n    \t\tpts := getNextPostsDB()\n    \t\tif len(pts) == 0 {\n    \t\t\tlog.Print(\"sem postagem agendada\")\n    \t\t\tbotStatus = false\n    \t\t\treturn\n    \t\t}\n\n    \t\tp1 := pts[0]\n\n    \t\tlog.Printf(\"Próxima postagem será: %s \\n\\n\", string(p1.scheduledTo.Format(dateLayoutFormat)))\n    \t\t<- updateTimer(p1.scheduledTo).C\n\n    \t\tif !botStatus {\n    \t\t\tlog.Print(\"postagem cancelado, bot status = parado\")\n    \t\t\treturn\n    \t\t}\n\n    \t\tif time.Until(p1.scheduledTo) > 1 * time.Second {\n    \t\t\tupdateTimer(p1.scheduledTo)\n    \t\t\tlog.Print(\"timer resetado\")\n    \t\t\tcontinue\n    \t\t}\n\n    \t\tpost(p1)\n    \t\tif len(pts) > 1 {\n    \t\t\tp2 := pts[1]\n    \t\t\tupdateTimer(p2.scheduledTo)\n    \t\t}\n    \t\tupdatePostedDB()\n    \t}\n    }\n\n    func updateTimer(t time.Time) *time.Ticker {\n    \ttickerSchedule = time.NewTicker(t.Sub(time.Now()))\n    \treturn tickerSchedule\n    }\n\n    func post(p posting) {\n    \tlog.Printf(\"'%s' postado com sucesso\", p.caption)\n    }\n\n    func addItemDB(p posting) {\n    \tposts = append(posts, p)\n    \tif botStatus {\n    \t\tnext := getNextPostDB()\n    \t\tupdateTimer(next.scheduledTo)\n    \t} else {\n    \t\tbotStatus = true\n    \t\tgo workerScheduled()\n    \t}\n    }\n\n    func getNextPostDB() posting {\n    \treturn getNextPostsDB()[0]\n    }\n\n    func getNextPostsDB() []posting {\n    \torderPostsList()\n    \tremovePostExpired()\n    \treturn posts\n    }\n\n    func removePostExpired() {\n    \tfor _, p := range posts {\n    \t\tif p.scheduledTo.Before(time.Now()) {\n    \t\t\tlog.Printf(\"removendo postagem expirada\")\n    \t\t\tremovePostByIndex(getIndexOf(p))\n    \t\t}\n    \t}\n    }\n\n    func removePostByIndex(i int) {\n    \tcopy(posts[i:], posts[i+1:])\n    \tposts = posts[:len(posts)-1]\n    }\n\n    func getIndexOf(post posting) int {\n    \tfor i, p := range posts {\n    \t\tif p.caption == post.caption {\n    \t\t\treturn i\n    \t\t}\n    \t}\n    \treturn -1\n    }\n\n    func updatePostedDB() {\n    \tremovePostByIndex(0)\n    }\n\n    func orderPostsList() {\n    \tsort.Slice(posts, func(i, j int) bool {\n    \t\treturn posts[i].scheduledTo.Before(posts[j].scheduledTo)\n    \t})\n    }\n\n    func startBot() {\n    \tif !botStatus {\n    \t\tlog.Printf(\"comando 'iniciar bot'\")\n    \t\tbotStatus = true\n    \t\tgo workerScheduled()\n    \t} else {\n    \t\tlog.Printf(\"comando 'iniciar bot' (já iniciado)\")\n    \t}\n    }\n\n    func stopBot() {\n    \tif botStatus {\n    \t\tlog.Printf(\"comando 'pausar bot'\")\n    \t\tbotStatus = false\n    \t\ttickerSchedule.Stop()\n    \t} else {\n    \t\tlog.Printf(\"comando 'pausar bot' (já pausado)\")\n    \t}\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/48126954/sending-multipart-request-with-curl-usign-golang",
    "body": "func SendMultipartRequest(uri string, params map[string]string, files []*multipart.FileHeader) (*http.Request, error) {\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\tfor i, _ := range files {\n\t\tfile, err := files[i].Open()\n\t\tdefer file.Close()\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\t//////////////////////////////////////////////////////\n\t\t// replace create CreateFormFile with this\n\t\th := make(textproto.MIMEHeader) // import \"net/textproto\"\n\t\th.Set(\"Content-Disposition\", fmt.Sprintf(`form-data; name=\"file\"; filename=\"%s\"`, files[i].Filename)\n\t\th.Set(\"Content-Type\", \"application/pdf\") // this is where you'll set your document type(s)\n\t\tfileWriter, err := form.CreatePart(h)\n\t\t///////////////////////////////////////////////////////\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tif _, err = io.Copy(fileWriter, file); err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t}\n\tfor key, val := range params {\n\t\t_ = writer.WriteField(key, val)\n\t}\n\terr := writer.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treq, err := http.NewRequest(\"POST\", uri, body)\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treq.Header.Set(\"Authorization\", \"Basic my_key\")\n\treturn req, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/31977860/how-to-load-dsa-publickey-using-go-stdlib",
    "body": "pubKeyPath := \"./pubKey.pem\"\npubKeyBytes, err := ioutil.ReadFile(pubKeyPath)\nif err != nil {\n   fmt.Println(\"Something went wrong when reading the file. Failed with\", err)\n}\npubBlock, _ := pem.Decode(pubKeyBytes)\n// This returns a *dsa.PublicKey, but your IDE might complain\n// that its not.\npubKey, err := x509.ParsePKIXPublicKey(pubBlock.Bytes)\n// So, type assert:\ndsaPubKey, ok := pubKey.(*dsa.PublicKey)\nif !ok {\n   fmt.Println(\"Failed to type assert\")\n}\n// Verify something with the Public key\ntype Person struct {\n  email  string\n}\n// Assuming that a similar instance of the struct was used for signing\nperson := Person{ email: \"hello@world.com\" }\npersonByteArray, _ := json.Marshal(person)\n// r and s are what you get after signing. Using it here to verify\nfmt.Println(dsa.Verify(dsaPubKey, personByteArray, r, s))"
  },
  {
    "url": "https://stackoverflow.com/questions/79402944/go-leetcode-time-limit-exceeded-on-graph-question-2493",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype bfsdata struct {\n\tColor int\n\tDepth int\n}\nfunc ProcessChildren(fadjlist [][]int, metadata []bfsdata, parent int, checked map[int]bool) bool {\n\tchildren := fadjlist[parent]\n\tmydata := metadata[parent]\n\tfor _, child := range children {\n\t\tif checked[child] {\n\t\t\tcontinue\n\t\t}\n\t\tchilddata := metadata[child]\n\t\tif childdata.Color == mydata.Color {\n\t\t\treturn false\n\t\t}\n\t\tmetadata[child].Color = -1 * mydata.Color\n\t\tmetadata[child].Depth = mydata.Depth + 1\n\t}\n\treturn true\n}\ntype ErrNotBipartite struct {\n\tparent int\n}\nfunc (e ErrNotBipartite) Error() string {\n\treturn fmt.Sprintf(\"Node %d connects to nodes in the same partition\", e.parent)\n}\nfunc bfs(fadjlist [][]int, root int, cache []int) (map[int]bool, int, error) {\n\tmetadata := make([]bfsdata, len(fadjlist))\n\tmetadata[root] = bfsdata{Color: -1, Depth: 0}\n\t// Root myself at the first node, start bfs\n\ttocheck := cache[0:0]\n\ttocheck = append(tocheck, root)\n\tmaxdepth := 0\n\tchecked := make(map[int]bool)\n\tfor len(tocheck) > 0 {\n\t\tcheckme := tocheck[0]\n\t\ttocheck = tocheck[1:]\n\t\tif checked[checkme] {\n\t\t\tcontinue\n\t\t}\n\t\tif !ProcessChildren(fadjlist, metadata, checkme, checked) {\n\t\t\treturn checked, -1, ErrNotBipartite{checkme}\n\t\t}\n\t\tmydata := metadata[checkme]\n\t\tif maxdepth < mydata.Depth {\n\t\t\tmaxdepth = mydata.Depth\n\t\t}\n\t\tnlist := fadjlist[checkme]\n\t\ttocheck = append(tocheck, nlist...)\n\t\tchecked[checkme] = true\n\t}\n\treturn checked, maxdepth, nil\n}\nfunc magnificentSets(n int, edges [][]int) int {\n\t// Construct graph\n\tg := make([][]int, n)\n\tfor _, e := range edges {\n\t\tsrc := e[0] - 1\n\t\tdst := e[1] - 1\n\t\tg[src] = append(g[src], dst)\n\t\tg[dst] = append(g[dst], src)\n\t}\n\ttotal_maxdepths := 0\n\ttocheck := make([]int, 0, 8)\n\tvisited := make(map[int]bool)\n\tfor v := range g {\n\t\tif visited[v] {\n\t\t\tcontinue\n\t\t}\n\t\tconnected_subgraph, depthatv, err := bfs(g, v, tocheck)\n\t\tif err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t\treturn -1\n\t\t}\n\t\t// Check this connected subgraph\n\t\tmaxdepth := depthatv\n\t\tfor v_prime := range connected_subgraph {\n\t\t\tif v_prime == v {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t_, depth_at_vprime, _ := bfs(g, v_prime, tocheck)\n\t\t\tif depth_at_vprime > maxdepth {\n\t\t\t\tmaxdepth = depth_at_vprime\n\t\t\t}\n\t\t}\n\t\t// Append the nodes we've already touched\n\t\tfor node := range connected_subgraph {\n\t\t\tvisited[node] = true\n\t\t}\n\t\ttotal_maxdepths += maxdepth + 1\n\t}\n\treturn total_maxdepths\n}\nfunc main() {\n\tnnodes := 6\n\tdata := [][]int{{1, 2}, {1, 4}, {1, 5}, {2, 6}, {2, 3}, {4, 6}}\n\tfmt.Println(\"Max depth of BFS tree: \", magnificentSets(nnodes, data))\n\tnnodes = 3\n\tdata = [][]int{{1, 2}, {2, 3}, {3, 1}}\n\tfmt.Println(\"Max depth of BFS tree: \", magnificentSets(nnodes, data))\n\tnnodes = 92\n\tdata = [][]int{{67, 29}, {13, 29}, {77, 29}, {36, 29}, {82, 29}, {54, 29}, {57, 29}, {53, 29}, {68, 29}, {26, 29}, {21, 29}, {46, 29}, {41, 29}, {45, 29}, {56, 29}, {88, 29}, {2, 29}, {7, 29}, {5, 29}, {16, 29}, {37, 29}, {50, 29}, {79, 29}, {91, 29}, {48, 29}, {87, 29}, {25, 29}, {80, 29}, {71, 29}, {9, 29}, {78, 29}, {33, 29}, {4, 29}, {44, 29}, {72, 29}, {65, 29}, {61, 29}}\n\tfmt.Println(\"Max depth of BFS tree: \", magnificentSets(nnodes, data))\n\t// [[67, 29], [13, 29], [77, 29], [36, 29], [82, 29], [54, 29], [57, 29], [53, 29], [68, 29], [26, 29], [21, 29], [46, 29], [41, 29], [45, 29], [56, 29], [88, 29], [2, 29], [7, 29], [5, 29], [16, 29], [37, 29], [50, 29], [79, 29], [91, 29], [48, 29], [87, 29], [25, 29], [80, 29], [71, 29], [9, 29], [78, 29], [33, 29], [4, 29], [44, 29], [72, 29], [65, 29], [61, 29]]\n\tnnodes = 30\n\tdata = [][]int{{1, 4}, {1, 5}, {1, 6}, {2, 4}, {2, 5}, {2, 6}, {3, 4}, {3, 5}, {3, 6}, {6, 7}, {7, 11}, {8, 11}, {8, 12}, {8, 13}, {9, 11}, {9, 12}, {9, 13}, {10, 11}, {10, 12}, {10, 13}}\n\tfmt.Println(\"Max depth of BFS tree: \", magnificentSets(nnodes, data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79386122/create-a-service-sas-for-a-blob-container-without-sdk",
    "body": "package main\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"net/url\"\n)\nfunc ComputeHmac256(message string, secret []byte) string {\n\th := hmac.New(sha256.New, secret)\n\th.Write([]byte(message))\n\treturn base64.StdEncoding.EncodeToString(h.Sum(nil))\n}\nconst accountKey = \"xxxxx\"\nvar signedPermissions = \"\"\nvar signedStart = \"\"\nvar signedExpiry = \"\"\nvar canonicalizedResource = \"/blob/<accountname>/<container name>\"\nvar signedIdentifier = \"demovenkat\" // Must match the identifier of the access policy\nvar signedIP = \"\"\nvar signedProtocol = \"https\"\nvar signedVersion = \"2021-08-06\"\nvar signedResource = \"c\" // 'c' for container-level SAS\nvar signedSnapshotTime = \"\"\nvar signedEncryptionScope = \"\"\nvar rscc = \"\"\nvar rscd = \"\"\nvar rsce = \"\"\nvar rscl = \"\"\nvar rsct = \"binary\"\nfunc main() {\n\t// Construct the string-to-sign\n\tmessage := fmt.Sprintf(\n\t\t\"%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\\n%s\",\n\t\tsignedPermissions,\n\t\tsignedStart,\n\t\tsignedExpiry,\n\t\tcanonicalizedResource,\n\t\tsignedIdentifier,\n\t\tsignedIP,\n\t\tsignedProtocol,\n\t\tsignedVersion,\n\t\tsignedResource,\n\t\tsignedSnapshotTime,\n\t\tsignedEncryptionScope,\n\t\trscc,\n\t\trscd,\n\t\trsce,\n\t\trscl,\n\t\trsct,\n\t)\n\t// Decode the storage account key\n\tsecret, err := base64.StdEncoding.DecodeString(accountKey)\n\tif err != nil {\n\t\tfmt.Println(\"Failed to decode account key:\", err)\n\t\treturn\n\t}\n\t// Compute the signature\n\tsig := ComputeHmac256(message, secret)\n\tescapedSig := url.QueryEscape(sig)\n\t// Construct the SAS token\n\tsignedString := fmt.Sprintf(\"si=%s&spr=%s&sv=%s&sr=%s&sig=%s&rsct=%s\", signedIdentifier, signedProtocol, signedVersion, signedResource, escapedSig, rsct)\n\tfmt.Println(signedString)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79349816/how-to-do-pagination-when-using-labelselector-list-pods",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log/slog\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/fields\"\n\t\"k8s.io/apimachinery/pkg/labels\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client/config\"\n)\nfunc main() {\n\tcfg, err := config.GetConfig()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tk8sClient, err := client.New(cfg, client.Options{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tctx := context.Background()\n\tpodList := &corev1.PodList{}\n\t// For want of an alternative...\n\tlabelSelector, err := labels.Parse(\"dog=freddie\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfieldSelector := fields.OneTermEqualSelector(\"status.phase\", \"Running\")\n\topts := &client.ListOptions{\n\t\tLabelSelector: labelSelector,\n\t\tFieldSelector: fieldSelector,\n\t\tLimit:         1,\n\t}\n\tfor {\n\t\tif err = k8sClient.List(ctx, podList, opts); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfor _, pod := range podList.Items {\n\t\t\tslog.Info(\"Pod\",\n\t\t\t\t\"name\", pod.Name,\n\t\t\t\t\"namespace\", pod.Namespace,\n\t\t\t)\n\t\t}\n\t\topts.Continue = podList.Continue\n\t\tif opts.Continue == \"\" {\n\t\t\tbreak\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79349366/how-to-integrate-azure-blobstorage-to-an-sftp-server-in-golang",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os/exec\"\n)\nfunc main() {\n\t// Prepare the SFTP command\n\tcmd := exec.Command(\"sftp\", \"<storage account name>.<local user name>@<storage account name>.blob.core.windows.net\")\n\t// The file to upload\n\tfile := \"xx\"\n\t// Send the `put` command using bytes.NewReader to wrap the byte slice into an io.Reader\n\tcmd.Stdin = bytes.NewReader([]byte(fmt.Sprintf(\"put %s\\n\", file)))\n\t// Execute the command and capture the output\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tfmt.Println(\"Error uploading file:\", err)\n\t\treturn\n\t}\n\t// Print the result of the file upload\n\tfmt.Println(\"File uploaded successfully:\")\n\tfmt.Println(string(output))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79290245/how-do-i-create-a-google-calendar-meet-event-using-a-service-account",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log/slog\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/google/uuid\"\n\t\"golang.org/x/oauth2/google\"\n\t\"google.golang.org/api/calendar/v3\"\n\t\"google.golang.org/api/option\"\n)\nfunc main() {\n\tscopes := []string{\n\t\tcalendar.CalendarScope,\n\t}\n\tkey := os.Getenv(\"KEY\")\n\tb, err := os.ReadFile(key)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tconfig, err := google.JWTConfigFromJSON(b, scopes...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsubject := os.Getenv(\"EMAIL\")\n\tconfig.Subject = subject\n\tctx := context.Background()\n\tclient := config.Client(ctx)\n\topts := []option.ClientOption{\n\t\toption.WithHTTPClient(client),\n\t}\n\tcalendarService, err := calendar.NewService(ctx, opts...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tstartDate := time.Now()\n\tduration := 60\n\tendDate := startDate.Add(time.Minute * time.Duration(duration))\n\theaderText := \"Stackoverflow: 79290245\"\n\tevent := &calendar.Event{\n\t\tSummary:     headerText,\n\t\tDescription: \"AutomateCreate\",\n\t\tStart: &calendar.EventDateTime{\n\t\t\tDateTime: startDate.Format(time.RFC3339),\n\t\t\tTimeZone: \"US/Pacific\",\n\t\t},\n\t\tEnd: &calendar.EventDateTime{\n\t\t\tDateTime: endDate.Format(time.RFC3339),\n\t\t\tTimeZone: \"US/Pacific\",\n\t\t},\n\t\tConferenceData: &calendar.ConferenceData{\n\t\t\tCreateRequest: &calendar.CreateConferenceRequest{\n\t\t\t\tConferenceSolutionKey: &calendar.ConferenceSolutionKey{\n\t\t\t\t\tType: \"hangoutsMeet\",\n\t\t\t\t},\n\t\t\t\tRequestId: uuid.New().String(),\n\t\t\t},\n\t\t},\n\t}\n\tresp, err := calendarService.Events.Insert(subject, event).ConferenceDataVersion(1).Do()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tslog.Info(\"Result\",\n\t\t\"summary\", resp.Summary,\n\t\t\"hangoutLink\", resp.HangoutLink)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79273230/why-is-running-a-query-with-boolean-group-by-not-working-with-gorps-selectrow",
    "body": "    COUNT(sales.id) AS total_sale_in_period,\n    CASE\n        WHEN product.production_date < '2024-01-01' THEN SUM(product.price)\n        ELSE 0\n    END AS product_shipped_last_year_total_price,\n    CASE\n        WHEN product.production_date BETWEEN '2024-01-01' AND '2024-07-01' THEN SUM(product.price)\n        ELSE 0\n    END AS product_shipped_first_semester_total_price,\n    CASE\n        WHEN product.production_date < '2024-01-01' THEN 'last_year'\n        WHEN product.production_date BETWEEN '2024-01-01' AND '2024-07-01' THEN 'first_semester'\n        ELSE 'other'\n    END AS production_date_group\nFROM product\nLEFT JOIN sales ON sales.product_id = product.id\nWHERE product.production_date BETWEEN '2024-01-01' AND '2024-07-01'\n   OR product.production_date < '2024-01-01'\nGROUP BY\n    CASE\n        WHEN product.production_date < '2024-01-01' THEN 'last_year'\n        WHEN product.production_date BETWEEN '2024-01-01' AND '2024-07-01' THEN 'first_semester'\n        ELSE 'other'\n    END;"
  },
  {
    "url": "https://stackoverflow.com/questions/79259186/how-can-i-set-gos-log-slog-to-send-to-multiple-outputs-console-file-and-in-d",
    "body": "type CopyHandler struct {\n\tmu *sync.Mutex\n\tout []slog.Handler // all the destinations\n}\nfunc NewCopyHandler(handlers ...slog.Handler) *CopyHandler {\n\th := &CopyHandler{out: handlers, mu: &sync.Mutex{}}\n\treturn h\n}\nfunc (h *CopyHandler) Enabled(ctx context.Context, level slog.Level) bool {\n    // leave the enable check to the underlying handlers\n\treturn true\n}\nfunc (h *CopyHandler) Handle(ctx context.Context, r slog.Record) error {\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tfor _, destHandler := range h.out {\n    err := destHandler.Handle(ctx, r)\n    if err != nil {\n      return err\n    }\n  }\n\treturn nil\n}\nfunc (h *CopyHandler) WithGroup(name string) slog.Handler {\n\t// call WithGroup on the underlying handlers\n    // we should not make modification the receiver, we return a copy\n    if name == \"\" {\n\t\treturn h\n\t}\n\th2:=*h\n\th2.out = make([]slog.Handler, len(h.out))\n\tfor i, h := range h.out {\n    h2.out[i] = h.WithGroup(name)\n  }\n  return &h2\n}\nfunc (h *CopyHandler) WithAttrs(attrs []slog.Attr) slog.Handler {\n    // call WithAttrs on the underlying handlers\n    // we should not make modification the receiver, we return a copy\n\tif (len(attrs) == 0) {\n       return h\n    }\n\th2 := *h\n\th2.out = make([]slog.Handler, len(h.out))\n\tfor i, h := range h.out {\n\t\th2.out[i] = h.WithAttrs(attrs)\n\t}\n\treturn &h2\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79256786/type-mismatch-in-go-generics-with-mixed-untyped-arguments",
    "body": "\t// in the following statement:\n\t// '10' and '10.2' are assigned a suitable type (float64) from this expression:\n\tfmt.Println(sum(10, 10.2))\n\t// Output:\n\t// Type of a:  float64\n\t// Type of b:  float64\n\t// 20.2\n\t// in the following 3 lines however:\n\t// '10' is given a type at 'x := 10' expression -> int\n\t// '10.2' is given a type at 'y := 10.2' expression -> float64\n\tx := 10\n\ty := 10.2\n\t// and the following line fails to compile:\n\t// fmt.Println(sum(x, y))\n\t// compilation error:\n\t// in call to sum, type float64 of y does not match inferred type int for T"
  },
  {
    "url": "https://stackoverflow.com/questions/79247553/signaturedoesnotmatch-the-request-signature-we-calculated-does-not-match-the-si",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\nfunc main() {\n\tbucketName := \"...\"\n\tctx := context.Background()\n\t// Using the SDK's default configuration, loading additional config\n\t// and credentials values from the environment variables, shared\n\t// credentials, and shared configuration files\n\tcfg, err := config.LoadDefaultConfig(ctx, config.WithRegion(\"us-east-01\"))\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to load SDK config, %v\", err)\n\t}\n\t// Using the Config value, create the S3 client\n\tsvc := s3.NewFromConfig(cfg)\n\t// Build the request with its input parameters\n\tresp, err := svc.ListObjectsV2(ctx, &s3.ListObjectsV2Input{\n\t\tBucket: aws.String(bucketName),\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to list objects, %v\", err)\n\t}\n\tfmt.Printf(\"Below is a list of Items under the bucket %s.\\n\", bucketName)\n\tfmt.Println(\"*********************************\")\n\tfor _, item := range resp.Contents {\n\t\tfmt.Println(\"Name:\", item.Key)\n\t\tfmt.Println(\"Last Modified:\", item.LastModified)\n\t\tfmt.Println(\"Size:\", item.Size)\n\t\tfmt.Println()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79242354/aes-gcm-256-partial-decryption",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/subtle\"\n\t\"encoding/hex\"\n\t\"fmt\"\n)\nfunc main() {\n\t// Derive counter\n\tkey := []byte(\"examplekey123456\")\n\tnonce := []byte(\"1234567890abcdef\")\n\taesCipher, _ := aes.NewCipher(key)\n\taesgcm, _ := GhashInit(aesCipher)\n\tcounter := aesgcm.GhashDeriveCounter(nonce)\n\tfmt.Println(\"Initial counter (reserved for tag), hex: \" + hex.EncodeToString(counter[:])) // reserved for tag\n\t// Derive tag (optional)\n\tciphertext, _ := hex.DecodeString(\"710869a3f0dd6e579e9797f7a4f3cb79dc757d0a8a5ba3190d778f44db5ff7b28e665593b61ad1b14fff65\")\n\taad := []byte(\"some additional authenticated data\")\n\ttag := aesgcm.GetAuthenticationTag(ciphertext, aad, counter[:])\n\tfmt.Println(\"Tag, hex: \" + hex.EncodeToString(tag))\n\t// Increment tag für decryption\n\tcounterInc(&counter)\n\tfmt.Println(\"Incremented counter (applied for encryption), hex: \" + hex.EncodeToString(counter[:])) // applied for encryption\n\t// Decrypt with ctr\n\tblock, _ := aes.NewCipher(key)\n\tplaintext := make([]byte, len(ciphertext))\n\tstream := cipher.NewCTR(block, counter[:])\n\tstream.XORKeyStream(plaintext, ciphertext)\n\tfmt.Println(\"Decrypted data using CTR: \" + string(plaintext))\n}\nconst (\n\tgcmBlockSize         = 16\n\tgcmStandardNonceSize = 12\n\tgcmTagSize           = 16\n)\nfunc GhashInit(cipher Block) (*gcm, error) {\n\tvar key [gcmBlockSize]byte\n\tcipher.Encrypt(key[:], key[:])\n\tg := &gcm{cipher: cipher}\n\tx := gcmFieldElement{\n\t\tBeUint64(key[:8]),\n\t\tBeUint64(key[8:]),\n\t}\n\tg.productTable[reverseBits(1)] = x\n\tfor i := 2; i < 16; i += 2 {\n\t\tg.productTable[reverseBits(i)] = gcmDouble(&g.productTable[reverseBits(i/2)])\n\t\tg.productTable[reverseBits(i+1)] = gcmAdd(&g.productTable[reverseBits(i)], &x)\n\t}\n\treturn g, nil\n}\nfunc (g *gcm) GhashDeriveCounter(nonce []byte) [16]byte {\n\tvar counter [gcmBlockSize]byte\n\tif len(nonce) == gcmStandardNonceSize {\n\t\tcopy(counter[:], nonce)\n\t\tcounter[gcmBlockSize-1] = 1\n\t} else {\n\t\tvar y gcmFieldElement\n\t\tg.update(&y, nonce)\n\t\ty.high ^= uint64(len(nonce)) * 8\n\t\tg.mul(&y)\n\t\tBePutUint64(counter[:8], y.low)\n\t\tBePutUint64(counter[8:], y.high)\n\t}\n\treturn counter\n}\nfunc (g *gcm) GetAuthenticationTag(ciphertext, additionalData []byte, counter []byte) []byte {\n\ttagMask := make([]byte, gcmBlockSize)\n\tg.cipher.Encrypt(tagMask, counter)\n\tvar y gcmFieldElement\n\tg.update(&y, additionalData)\n\tg.update(&y, ciphertext)\n\ty.low ^= uint64(len(additionalData)) * 8\n\ty.high ^= uint64(len(ciphertext)) * 8\n\tg.mul(&y)\n\ttag := make([]byte, gcmBlockSize)\n\tBePutUint64(tag, y.low)\n\tBePutUint64(tag[8:], y.high)\n\tsubtle.XORBytes(tag, tag, tagMask)\n\treturn tag\n}\nfunc counterInc(counterBlock *[gcmBlockSize]byte) {\n\tctr := counterBlock[len(counterBlock)-4:]\n\tBePutUint32(ctr, BeUint32(ctr)+1)\n}\ntype Block interface {\n\tEncrypt(dst, src []byte)\n}\ntype gcmFieldElement struct {\n\tlow, high uint64\n}\ntype gcm struct {\n\tcipher       Block\n\tproductTable [16]gcmFieldElement\n}\nfunc reverseBits(i int) int {\n\ti = ((i << 2) & 0xc) | ((i >> 2) & 0x3)\n\ti = ((i << 1) & 0xa) | ((i >> 1) & 0x5)\n\treturn i\n}\nvar gcmReductionTable = []uint16{\n\t0x0000, 0x1c20, 0x3840, 0x2460, 0x7080, 0x6ca0, 0x48c0, 0x54e0,\n\t0xe100, 0xfd20, 0xd940, 0xc560, 0x9180, 0x8da0, 0xa9c0, 0xb5e0,\n}\nfunc gcmAdd(x, y *gcmFieldElement) gcmFieldElement {\n\treturn gcmFieldElement{x.low ^ y.low, x.high ^ y.high}\n}\nfunc gcmDouble(x *gcmFieldElement) (double gcmFieldElement) {\n\tmsbSet := x.high&1 == 1\n\tdouble.high = x.high >> 1\n\tdouble.high |= x.low << 63\n\tdouble.low = x.low >> 1\n\tif msbSet {\n\t\tdouble.low ^= 0xe100000000000000\n\t}\n\treturn\n}\nfunc (g *gcm) mul(y *gcmFieldElement) {\n\tvar z gcmFieldElement\n\tfor i := 0; i < 2; i++ {\n\t\tword := y.high\n\t\tif i == 1 {\n\t\t\tword = y.low\n\t\t}\n\t\tfor j := 0; j < 64; j += 4 {\n\t\t\tmsw := z.high & 0xf\n\t\t\tz.high >>= 4\n\t\t\tz.high |= z.low << 60\n\t\t\tz.low >>= 4\n\t\t\tz.low ^= uint64(gcmReductionTable[msw]) << 48\n\t\t\tt := &g.productTable[word&0xf]\n\t\t\tz.low ^= t.low\n\t\t\tz.high ^= t.high\n\t\t\tword >>= 4\n\t\t}\n\t}\n\t*y = z\n}\nfunc (g *gcm) update(y *gcmFieldElement, data []byte) {\n\tfullBlocks := (len(data) >> 4) << 4\n\tg.updateBlocks(y, data[:fullBlocks])\n\tif len(data) != fullBlocks {\n\t\tvar partialBlock [gcmBlockSize]byte\n\t\tcopy(partialBlock[:], data[fullBlocks:])\n\t\tg.updateBlocks(y, partialBlock[:])\n\t}\n}\nfunc (g *gcm) updateBlocks(y *gcmFieldElement, blocks []byte) {\n\tfor len(blocks) > 0 {\n\t\ty.low ^= BeUint64(blocks)\n\t\ty.high ^= BeUint64(blocks[8:])\n\t\tg.mul(y)\n\t\tblocks = blocks[gcmBlockSize:]\n\t}\n}\nfunc BeUint32(b []byte) uint32 {\n\t_ = b[3]\n\treturn uint32(b[3]) | uint32(b[2])<<8 | uint32(b[1])<<16 | uint32(b[0])<<24\n}\nfunc BePutUint32(b []byte, v uint32) {\n\t_ = b[3]\n\tb[0] = byte(v >> 24)\n\tb[1] = byte(v >> 16)\n\tb[2] = byte(v >> 8)\n\tb[3] = byte(v)\n}\nfunc BeUint64(b []byte) uint64 {\n\t_ = b[7]\n\treturn uint64(b[7]) | uint64(b[6])<<8 | uint64(b[5])<<16 | uint64(b[4])<<24 |\n\t\tuint64(b[3])<<32 | uint64(b[2])<<40 | uint64(b[1])<<48 | uint64(b[0])<<56\n}\nfunc BePutUint64(b []byte, v uint64) {\n\t_ = b[7]\n\tb[0] = byte(v >> 56)\n\tb[1] = byte(v >> 48)\n\tb[2] = byte(v >> 40)\n\tb[3] = byte(v >> 32)\n\tb[4] = byte(v >> 24)\n\tb[5] = byte(v >> 16)\n\tb[6] = byte(v >> 8)\n\tb[7] = byte(v)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79241536/how-to-fix-goroutine-leaks-while-pipeline-cancellation",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"runtime\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 1200*time.Millisecond)\n\tdefer cancel()\n\tinput := generate(ctx, 1_000)\n\tmultiplied := process(ctx, 15, input, func(ctx context.Context, val int) (int, error) {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn 0, ctx.Err()\n\t\tcase <-time.After(time.Second):\n\t\t\treturn val * 2, nil\n\t\t}\n\t})\n\tincreased := process(ctx, 15, multiplied, func(_ context.Context, val int) (int, error) {\n\t\treturn val + 10, nil\n\t})\n\tfmt.Println(\"Result: \", sum(increased))                //  360 is ok\n\tfmt.Println(\"Num goroutine: \", runtime.NumGoroutine()) // 18 is too much\n}\nfunc generate(ctx context.Context, amount int) <-chan int {\n\tinput := make(chan int)\n\tgo func() {\n\t\tdefer close(input)\n\t\tfor i := 0; i < amount; i++ {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase input <- i:\n\t\t\t}\n\t\t}\n\t}()\n\treturn input\n}\nfunc sum(input <-chan int) int {\n\tresult := 0\n\tfor el := range input {\n\t\tresult += el\n\t}\n\treturn result\n}\nfunc process[T any, R any](ctx context.Context, workers int, input <-chan T, do func(context.Context, T) (R, error)) <-chan R {\n\twg := new(sync.WaitGroup)\n\tresult := make(chan R)\n\tfor i := 0; i < workers; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\tcase val, ok := <-input:\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tr, err := do(ctx, val)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tresult <- r\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\t}\n\tgo func() {\n\t\tdefer close(result)\n\t\twg.Wait()\n\t}()\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79204207/dynamic-struct-field-enumeration-and-attribute-parsing-in-go",
    "body": "type TagParser struct {\n\t// 1. use [] to collect all fields that have the same key\n\t// 2. use reflect.Value so that you can utilize f.Set()\n\ttags map[string][]reflect.Value\n}\nfunc ParseTags(tag string, data interface{}) map[string][]reflect.Value {\n\tvar p TagParser\n\tp.tags = make(map[string][]reflect.Value)\n\tp.parse(tag, reflect.ValueOf(data))\n\treturn p.tags\n}\nfunc (p *TagParser) parse(tag string, rv reflect.Value) {\n\tif rv.Kind() == reflect.Ptr {\n\t\trv = rv.Elem()\n\t}\n\tif rv.Kind() != reflect.Struct {\n\t\treturn\n\t}\n\trt := rv.Type()\n\tfor i := 0; i < rv.NumField(); i++ {\n\t\tf := rv.Field(i)\n\t\tif k := rt.Field(i).Tag.Get(tag); k != \"\" {\n\t\t\tp.tags[k] = append(p.tags[k], f)\n\t\t}\n\t\tp.parse(tag, f)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79181439/unable-to-execute-command-in-kubernetes-pod-container-via-golang-code",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\tv1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/kubernetes\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/tools/remotecommand\"\n\t\"k8s.io/kubectl/pkg/scheme\"\n)\nfunc executeCommandInPod(kubeconfigPath, pod, namespace, command string) (string, string, error) {\n\t// Build kubeconfig from the provided path\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfigPath)\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to build kubeconfig: %v\", err)\n\t}\n\t// Create a new clientset based on the provided kubeconfig\n\tclientset, err := kubernetes.NewForConfig(config)\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to create clientset: %v\", err)\n\t}\n\t// Get the pod's name and namespace\n\tpodName := pod\n\tpodNamespace := namespace\n\t// Build the command to be executed in the pod\n\tcmd := []string{\"sh\", \"-c\", command}\n\t// Execute the command in the pod\n\treq := clientset.CoreV1().RESTClient().Post().\n\t\tResource(\"pods\").\n\t\tName(podName).\n\t\tNamespace(podNamespace).\n\t\tSubResource(\"exec\").\n\t\tVersionedParams(&v1.PodExecOptions{\n\t\t\tCommand: cmd,\n\t\t\tStdin:   false,\n\t\t\tStdout:  true,\n\t\t\tStderr:  true,\n\t\t\tTTY:     false,\n\t\t}, scheme.ParameterCodec)\n\texecutor, err := remotecommand.NewSPDYExecutor(config, \"POST\", req.URL())\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to create executor: %v\", err)\n\t}\n\tvar stdout, stderr bytes.Buffer\n\terr = executor.Stream(remotecommand.StreamOptions{\n\t\tStdout: &stdout,\n\t\tStderr: &stderr,\n\t\tTty:    false,\n\t})\n\tif err != nil {\n\t\treturn \"\", \"\", fmt.Errorf(\"failed to execute command in pod: %v\", err)\n\t}\n\treturn stdout.String(), stderr.String(), nil\n}\nfunc main() {\n\tstdout, stderr, err := executeCommandInPod(\"/tmp/config\", \"nginx-0\", \"default\", \"ls /\")\n\tfmt.Println(stdout, stderr, err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79163908/azure-function-in-golang-how-to-get-subscription-id",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n\tmessage := \"This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.\\n\"\n\tname := r.URL.Query().Get(\"name\")\n\tif name != \"\" {\n\t\tmessage = fmt.Sprintf(\"Hello, %s. This HTTP triggered function executed successfully.\\n\", name)\n\t}\n\tfmt.Fprint(w, message)\n}\nfunc printSubscriptions(ctx context.Context) {\n\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to obtain credential: %v\", err)\n\t}\n\tsubClient, err := armsubscriptions.NewClient(cred, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create subscriptions client: %v\", err)\n\t}\n\tpager := subClient.NewListPager(nil)\n\tfor pager.More() {\n\t\tpage, err := pager.NextPage(ctx)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to retrieve subscription page: %v\", err)\n\t\t}\n\t\tfor _, subscription := range page.Value {\n\t\t\tfmt.Printf(\"Subscription ID: %s\\n\", *subscription.SubscriptionID)\n\t\t\tfmt.Printf(\"Subscription Name: %s\\n\", *subscription.DisplayName)\n\t\t}\n\t}\n}\nfunc main() {\n\tctx := context.Background()\n\tfmt.Println(\"Fetching Azure Subscriptions:\")\n\tprintSubscriptions(ctx)\n\tlistenAddr := \":8080\"\n\tif val, ok := os.LookupEnv(\"FUNCTIONS_CUSTOMHANDLER_PORT\"); ok {\n\t\tlistenAddr = \":\" + val\n\t}\n\thttp.HandleFunc(\"/api/HttpExample\", helloHandler)\n\tlog.Printf(\"About to listen on %s. Go to http://127.0.0.1%s/\", listenAddr, listenAddr)\n\tlog.Fatal(http.ListenAndServe(listenAddr, nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79119634/go-gin-framework-cors-error-for-gin-router-group",
    "body": "func (app *application) CORSMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", app.config.allowOrigin)\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS, GET, PUT, DELETE\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79090537/how-do-you-flatten-a-slice-of-arrays-without-extra-allocation",
    "body": "import \"unsafe\"\nfunc convert(sliceOfArrays [][4]byte) []byte {\n\t// create an *unsafe.ArbitraryType, specifically *[4]byte, from the original slice's backing array\n\tsliceData := unsafe.SliceData(sliceOfArrays)\n\t// convert to an unsafe.Pointer; this is necessary to allow the next step to be possible\n\tpointer := unsafe.Pointer(sliceData)\n\t// convert to a *byte\n\t// NOTE this is a pointer to a single byte, not a slice of bytes\n\t// from the documentation: \"unsafe.Pointer can be converted to a pointer value of any type\"\n\tbytePointer := (*byte)(pointer)\n\t// calculate how many total elements (bytes, in this case) will be in the resulting slice\n\t// in this case, this is just 4 * len(sliceOfArrays) / 1\n\tlength := int(unsafe.Sizeof([4]byte{})) * len(sliceOfArrays) / int(unsafe.Sizeof(byte(0)))\n\t// more generally, this formula is:\n\t// numberOfResultingElements = sizeOfOriginalElement * numberOfOriginalElements / sizeOfResultingElement\n\t// unsafe.Slice creates a new slice of bytes\n\t// the backing array of this slice starts at the memory location of `bytePointer`\n\t// the slice has both length and capacity of `length`\n\treturn unsafe.Slice(bytePointer, length)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79056575/eof-error-in-azure-communication-services-email-api-post-request",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"time\"\n)\nfunc main() {\n\tfmt.Println(\"Azure Communication Services - Sign an HTTP request Tutorial\")\n\tresourceEndpoint := \"https://AzureCommunicationServiceName.communication.azure.com(or)EndpointOfCommunicationService\"\n\trequestURI := fmt.Sprintf(\"%s/emails:send?api-version=2023-03-31\", resourceEndpoint)\n\tbody := map[string]interface{}{\n\t\t\"headers\": map[string]string{\n\t\t\t\"ClientCorrelationId\":    \"123\",\n\t\t\t\"ClientCustomHeaderName\": \"ClientCustomHeaderValue\",\n\t\t},\n\t\t\"senderAddress\": \"DoNotReply@2d.azurecomm.net\",\n\t\t\"content\": map[string]interface{}{\n\t\t\t\"subject\":   \"An exciting offer especially for you!\",\n\t\t\t\"plainText\": \"This exciting offer was created especially for you, our most loyal customer.\",\n\t\t\t\"html\":      \"<html><head><title>Exciting offer!</title></head><body><h1>This exciting offer was created especially for you, our most loyal customer.</h1></body></html>\",\n\t\t},\n\t\t\"recipients\": map[string]interface{}{\n\t\t\t\"to\": []map[string]string{\n\t\t\t\t{\"address\": \"YourGmailName@gmail.com\", \"displayName\": \"sampath\"},\n\t\t\t},\n\t\t\t\"cc\":  []interface{}{},\n\t\t\t\"bcc\": []interface{}{},\n\t\t},\n\t\t\"attachments\": []map[string]interface{}{\n\t\t\t{\n\t\t\t\t\"name\":            \"MyAttachment.pdf\",\n\t\t\t\t\"contentType\":     \"application/pdf\",\n\t\t\t\t\"contentInBase64\": \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\",\n\t\t\t},\n\t\t},\n\t\t\"replyTo\": []map[string]string{\n\t\t\t{\"address\": \"pujarisampath80@gmail.com\", \"displayName\": \"sampath\"},\n\t\t},\n\t\t\"userEngagementTrackingDisabled\": true,\n\t}\n\tserializedBody, err := json.Marshal(body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdate := time.Now().UTC().Format(http.TimeFormat)\n\tfmt.Printf(\"x-ms-date: %s\\n\", date)\n\thost := \"sampath56ravi.unitedstates.communication.azure.com\"\n\tcontentHash := computeContentHash(serializedBody)\n\tfmt.Printf(\"x-ms-content-sha256: %s\\n\", contentHash)\n\tstringToSign := fmt.Sprintf(\"POST\\n/emails:send?api-version=2023-03-31\\n%s;%s;%s\", date, host, contentHash)\n\tfmt.Printf(\"String to Sign: %s\\n\", stringToSign)\n\tsecret := \"<AzureCommunicationAccesskey>\"\n\tsignature := computeSignature(stringToSign, secret)\n\tauthorizationHeader := fmt.Sprintf(\"HMAC-SHA256 SignedHeaders=x-ms-date;host;x-ms-content-sha256&Signature=%s\", signature)\n\tfmt.Printf(\"Authorization Header: %s\\n\", authorizationHeader)\n\treq, err := http.NewRequest(http.MethodPost, requestURI, bytes.NewBuffer(serializedBody))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Add(\"x-ms-date\", date)\n\treq.Header.Add(\"x-ms-content-sha256\", contentHash)\n\treq.Header.Add(\"Authorization\", authorizationHeader)\n\treq.Header.Add(\"Content-Type\", \"application/json\")\n\tclient := &http.Client{}\n\tresponse, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer response.Body.Close()\n\tresponseBody, err := ioutil.ReadAll(response.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"Response Status: %s\\n\", response.Status)\n\tfmt.Printf(\"Response Body: %s\\n\", string(responseBody))\n}\nfunc computeContentHash(content []byte) string {\n\thasher := sha256.New()\n\thasher.Write(content)\n\thashedBytes := hasher.Sum(nil)\n\treturn base64.StdEncoding.EncodeToString(hashedBytes)\n}\nfunc computeSignature(stringToSign, secret string) string {\n\tkey, _ := base64.StdEncoding.DecodeString(secret)\n\th := hmac.New(sha256.New, key)\n\th.Write([]byte(stringToSign))\n\thashedBytes := h.Sum(nil)\n\treturn base64.StdEncoding.EncodeToString(hashedBytes)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78943255/htmx-get-request-within-form-includes-select-element-name-attribute-in-query-str",
    "body": "<div x-data=\"{ selectedServerInstance: '' }\">\n    <h2>User Priviledges</h2>\n    <form\n    hx-post=\"/submitUserPriviledgesForm\"\n    hx-trigger=\"submit\"\n    hx-target=\"#user-priviledge-container\"\n    hx-swap=\"innerHTML\">\n        <div>\n            <label for=\"username\">Username:</label>\n            <input type=\"text\" id=\"username\" name=\"username\">\n        </div>\n        <div>\n            <label for=\"server-instance\" class=\"block text-gray-700\">Server Instance: <span>(Optional)</span></label>\n            <select id=\"server-instance\" name=\"server-instance\"\n            x-model=\"selectedServerInstance\"\n            hx-get=\"/getDatabases\"\n            hx-trigger=\"change\"\n            hx-target=\"#database-list-container\"\n            hx-swap=\"innerHTML\">\n                <option value=\"\">Select a server instance.</option>\n                {{range .}}\n                <option value=\"{{.ServerName}}\">{{.ServerName}}</option>\n                {{end}}\n            </select>\n        </div>\n        <div x-cloak x-show=\"selectedServerInstance\">\n            <label for=\"database-name\">Database: <span>(Optional)</span></label>\n            <select id=\"database-list-container\" name=\"database-name\"></select>\n        </div>\n        <div>\n            <label for=\"skip-object-permission\">Skip Object Permission:</label>\n            <input type=\"checkbox\" id=\"skip-object-permission\" name=\"skip-object-permission\">\n        </div>\n        <div>\n            <button type=\"submit\">Submit</button>\n        </div>\n    </form>\n</div>\n<div>\n    <div id=\"user-priviledge-container\"></div>\n</div>"
  },
  {
    "url": "https://stackoverflow.com/questions/78917880/how-can-i-test-file-system-outputs-in-a-docker-container-using-go-when-bind-volu",
    "body": "func NewContainerUnderTest() ContainerUnderTest {\n\treturn ContainerUnderTest{\n\t\timage:   determineDockerImageToUse(),\n\t\tcmd:     []string{},\n\t\tctx:     context.Background(),\n\t\tvolumes: []string{},\n\t}\n}\n//...\n// CreateContainer configures and creates a container but does not start it. All config must be done\n// here. To add volumes, use the `AddVolume` method.\nfunc (c *ContainerUnderTest) CreateContainer() {\n\tc.req = testcontainers.ContainerRequest{\n\t\tImage:      c.image,\n\t\tCmd:        c.cmd,\n\t\tWaitingFor: wait.ForExit(),\n\t\tHostConfigModifier: func(hostConfig *container.HostConfig) {\n\t\t\thostConfig.Binds = c.volumes\n\t\t},\n\t}\n}\n// AddVolume add a configuration to mount a volume to the container request. The pathOnHost is\n// mounted as source folder on the host and as target folder in the container keeping the paths\n// the same.\nfunc (c *ContainerUnderTest) AddVolume(pathOnHost string) error {\n\tmount := pathOnHost + \":\" + pathOnHost\n\tc.volumes = append(c.volumes, mount)\n\treturn nil\n}\n// ...\ncut = NewContainerUnderTest()\ncut.CreateContainer()\ncut.MountVolume(pathOnHost)"
  },
  {
    "url": "https://stackoverflow.com/questions/78915725/trying-to-detach-disks-from-a-vm-using-golang-api-in-azure",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute\"\n)\ntype AzureEnvInfo struct {\n\tSubscriptionID  string\n\tResourceGrpName string\n\tVMName          string\n}\nfunc DetachAllDataDisks(azureEnvInfo AzureEnvInfo, cred *azidentity.DefaultAzureCredential) error {\n\tctx := context.Background()\n\tvmClient, err := armcompute.NewVirtualMachinesClient(azureEnvInfo.SubscriptionID, cred, nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create VM client: %v\", err)\n\t}\n\tvm, err := vmClient.Get(ctx, azureEnvInfo.ResourceGrpName, azureEnvInfo.VMName, nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get VM: %w\", err)\n\t}\n\tfor _, disk := range vm.Properties.StorageProfile.DataDisks {\n\t\tif disk.Name != nil {\n\t\t\tfmt.Printf(\"Detaching Disk: %s from VM: %s\\n\", *disk.Name, azureEnvInfo.VMName)\n\t\t}\n\t}\n\tvm.Properties.StorageProfile.DataDisks = []*armcompute.DataDisk{}\n\tDataDisks\n\tvmUpdate := armcompute.VirtualMachineUpdate{\n\t\tProperties: &armcompute.VirtualMachineProperties{\n\t\t\tStorageProfile: &armcompute.StorageProfile{\n\t\t\t\tDataDisks: vm.Properties.StorageProfile.DataDisks,\n\t\t\t},\n\t\t},\n\t}\n\tpoller, err := vmClient.BeginUpdate(ctx, azureEnvInfo.ResourceGrpName, azureEnvInfo.VMName, vmUpdate, nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to begin VM update: %v\", err)\n\t}\n\t_, err = poller.PollUntilDone(ctx, nil)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to update VM: %v\", err)\n\t}\n\tfmt.Println(\"All data disks detached successfully.\")\n\treturn nil\n}\nfunc main() {\n\tazureEnvInfo := AzureEnvInfo{\n\t\tSubscriptionID:  \"158xxxxxxxxxxxxxxxxxx-4d98-95c5-f21815dd048f\",\n\t\tResourceGrpName: \"Venkat\",\n\t\tVMName:          \"VenkatVM\",\n\t}\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to obtain a credential: %v\", err)\n\t}\n\terr = DetachAllDataDisks(azureEnvInfo, cred)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to detach all data disks: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78888328/mongo-atlas-search-find-by-one-of-two-fields",
    "body": "func buildSearch(locale string, searchTerm string, index string) bson.D {\n\tvar arrayFilter = addLocaleFilter(locale)\n\taddTextFilters(&arrayFilter, searchTerm)\n\tsearch := bson.D{\n\t\t{\n\t\t\tKey: \"$search\", Value: bson.M{\n\t\t\t\t\"index\": index,\n\t\t\t\t\"compound\": bson.M{\n\t\t\t\t\t\"must\": arrayFilter,\n\t\t\t\t},\n\t\t\t\t\"count\": bson.D{\n\t\t\t\t\t{Key: \"type\", Value: \"total\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn search\n}\nfunc addTextFilters(arrayFilter *bson.A, text string) {\n\tif text != \"\" {\n\t\ttextFilters :=\n\t\t\tbson.A{\n\t\t\t\taddAutocompleteFilterWithBoost(text, \"name\", NameScore),\n\t\t\t\taddTextFilterWithBoost(text, \"resourceId\", ResourceIdScore),\n\t\t\t}\n\t\t*arrayFilter = append(*arrayFilter, bson.D{\n\t\t\t{Key: \"compound\",\n\t\t\t\tValue: bson.M{\n\t\t\t\t\t\"should\": textFilters,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t}\n}\nfunc addTextFilterWithBoost(term string, path string, score int) bson.D {\n\treturn bson.D{\n\t\t{Key: \"text\", Value: bson.D{\n\t\t\t{Key: \"path\", Value: bson.A{path}},\n\t\t\t{Key: \"query\", Value: term},\n\t\t\t{Key: \"score\", Value: bson.D{\n\t\t\t\t{Key: \"boost\", Value: bson.D{\n\t\t\t\t\t{Key: \"value\", Value: score},\n\t\t\t\t}},\n\t\t\t}},\n\t\t}},\n\t}\n}\nfunc addAutocompleteFilterWithBoost(term string, path string, score int) bson.D {\n\treturn bson.D{\n\t\t{Key: \"autocomplete\", Value: bson.D{\n\t\t\t{Key: \"path\", Value: path},\n\t\t\t{Key: \"query\", Value: term},\n\t\t\t{Key: \"score\", Value: bson.D{\n\t\t\t\t{Key: \"boost\", Value: bson.D{\n\t\t\t\t\t{Key: \"value\", Value: score},\n\t\t\t\t}},\n\t\t\t}},\n\t\t}},\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78871491/go-type-assertion-to-detect-other-types-of-maps",
    "body": "func f(arguments ...any) error {\n\tfor _, a := range arguments {\n\t\tt := reflect.TypeOf(a)\n\t\tswitch t.Kind() {\n\t\tcase reflect.String:\n\t\t\t// do stuff with a string\n\t\tcase reflect.Int:\n\t\t\t// do stuff with an int\n\t\tcase reflect.Map:\n\t\t\tswitch k, v := t.Key().Kind(), t.Elem().Kind(); {\n\t\t\tcase k == reflect.String && v == reflect.String:\n\t\t\t\t// do stuff with this type of map\n\t\t\tcase k == reflect.String && v == reflect.Int:\n\t\t\t\treturn fmt.Errorf(\"This is not an acceptable map type\")\n\t\t\t\t// and so forth for other types of maps\n\t\t\t}\n\t\tdefault:\n\t\t\t// I want the default to handle native handling for what happens next\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78838931/substitute-a-matching-pair-of-single-quotes-with-a-matching-pair-of-double-quote",
    "body": "func transformQuotes(input string) string {\n\tvar result strings.Builder\n\tinSingleQuote := false\n\tstartIndex := 0\n\tfor i, r := range input {\n\t\tswitch r {\n\t\tcase '\\'':\n\t\t\tif inSingleQuote {\n\t\t\t\t// Closing a single-quoted section\n\t\t\t\tresult.WriteString(`\"`)\n\t\t\t\tinnerContent := input[startIndex+1 : i]\n\t\t\t\t// Replace inner double quotes with single quotes\n\t\t\t\tresult.WriteString(strings.ReplaceAll(innerContent, `\"`, `'`))\n\t\t\t\tresult.WriteString(`\"`)\n\t\t\t\tinSingleQuote = false\n\t\t\t\tstartIndex = i + 1\n\t\t\t} else {\n\t\t\t\t// Opening a single-quoted section\n\t\t\t\tinSingleQuote = true\n\t\t\t\t// Add everything up to this point, not handled inside single quotes\n\t\t\t\tresult.WriteString(input[startIndex:i])\n\t\t\t\tstartIndex = i\n\t\t\t}\n\t\t}\n\t}\n\t// Append any remaining part of the string\n\tif startIndex < len(input) {\n\t\tresult.WriteString(input[startIndex:])\n\t}\n\treturn result.String()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78801062/why-goroutine-delay-sometimes-is-it-caused-by-gc-how-do-i-profile-time-cost",
    "body": "func main() {\n\tstat := [10000]int{}\n\tp := &stat\n\tfor i := 0; i < 10000; i++ {\n\t\tgo func() {\n\t\t\ttestWaitRoutine(p, i)\n\t\t}()\n\t}\n\ttime.Sleep(5 * time.Second)\n\t// time.Sleep(10 * time.Second)\n\tcount := 0\n\tfor i, v := range p {\n\t\tif v > 1 {\n\t\t\tfmt.Printf(\"i: %d, value: %d\\n\", i, v)\n\t\t\tcount++\n\t\t}\n\t}\n\tprintln(\"count: \", count)\n}\nfunc testWaitRoutine(stats *[10000]int, index int) {\n\tchannl := make(chan int, 2)\n\tgo func() {\n\t\tchannl <- time.Now().Nanosecond()\n\t\ttime.Sleep(3 * time.Second)\n\t\tchannl <- time.Now().Nanosecond()\n\t}()\n\t_, secondTime := <-channl, <-channl\n\tnowTime := time.Now().Nanosecond()\n\trst2 := nowTime - secondTime\n\tif rst2 > 3_000 {\n\t\t// fmt.Println(rst2)\n\t\t(*stats)[index] = rst2\n\t} else {\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78718135/trigger-server-sent-event-every-2-seconds-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/rs/cors\"\n)\nfunc main() {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, _ *http.Request) {\n\t\tw.Write([]byte(`<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>SSE</title>\n  </head>\n  <body>\n    SSE running\n    <script>\n    const event = new EventSource(\"http://localhost:6969/sse\");\n    event.onmessage = () =>{\n        console.log(\"this dude is slow\");\n    };\n    </script>\n  </body>\n</html>\n`))\n\t})\n\tmux.HandleFunc(\"/sse\", handleSse)\n\tc := cors.New(cors.Options{\n\t\tAllowedOrigins: []string{\"*\"},\n\t\tAllowedMethods: []string{http.MethodGet, http.MethodPost,\n\t\t\thttp.MethodDelete, http.MethodPut},\n\t\tAllowCredentials: true,\n\t})\n\thandler := c.Handler(mux)\n\tlog.Fatal(http.ListenAndServe(\":6969\", handler))\n}\nfunc handleSse(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-type\", \"text/event-stream\")\n\tw.Header().Set(\"Cache-Control\", \"no-cache\")\n\tw.Header().Set(\"Connection\", \"keep-alive\")\n\tw.WriteHeader(http.StatusOK)\n\tf, ok := w.(http.Flusher)\n\tif !ok {\n\t\thttp.Error(w, \"SSE not supported , IE6 bruh\",\n\t\t\thttp.StatusBadRequest)\n\t\treturn\n\t}\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Fprintln(w, \"retry: 10000\") // This means that after the connection drops the browser will wait 10 seconds before reconnecting\n\t\tfmt.Fprintf(w, \"data:%v\\n\\n\", \"Sorry\")\n\t\tf.Flush()\n\t\ttime.Sleep(1 * time.Second) // This means a message will be sent every second (until 10 have been sent when the connection will drop)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78706599/how-to-set-up-a-simple-git-server",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/cgi\"\n\t\"os\"\n\t\"os/exec\"\n)\n// Run a Git server using the \"smart\" HTTP Git protocol\n// Run with the env variable GIT_PROJECT_ROOT pointing to a folder containing\n// Git repos you want to serve\nfunc main() {\n\treposRoot := os.Getenv(\"GIT_PROJECT_ROOT\")\n\tif reposRoot == \"\" {\n\t\tlog.Fatal(\"GIT_PROJECT_ROOT env variable not set\")\n\t}\n\tgitPath, err := exec.LookPath(\"git\")\n\tif err != nil {\n\t\tlog.Fatalf(\"cannot find git: %v\", err)\n\t}\n\tlog.Printf(\"using git at %q\", gitPath)\n\tgitHandler := &cgi.Handler{\n\t\tPath: gitPath,\n\t\tArgs: []string{\"http-backend\"},\n\t\tEnv: []string{\n\t\t\tfmt.Sprintf(\"GIT_PROJECT_ROOT=%s\", reposRoot),\n\t\t\t\"GIT_HTTP_EXPORT_ALL=true\",\n\t\t},\n\t}\n\tlog.Fatal(http.ListenAndServe(\":8080\", gitHandler))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78701328/libwebp-undefined-symbols-for-architecture-arm64-sharpyuvconvert",
    "body": "diff --git a/iosbuild.sh b/iosbuild.sh\nindex cd3a24c..d0fb557 100755\n--- a/iosbuild.sh\n+++ b/iosbuild.sh\n@@ -41,6 +41,7 @@\n readonly DECTARGETDIR=\"${TOPDIR}/WebPDecoder.framework\"\n readonly MUXTARGETDIR=\"${TOPDIR}/WebPMux.framework\"\n readonly DEMUXTARGETDIR=\"${TOPDIR}/WebPDemux.framework\"\n+readonly SHARPYUVTARGETDIR=\"${TOPDIR}/SharpYuv.framework\"\n readonly DEVELOPER=$(xcode-select --print-path)\n readonly PLATFORMSROOT=\"${DEVELOPER}/Platforms\"\n readonly LIPO=$(xcrun -sdk iphoneos${SDK} -find lipo)\n@@ -63,7 +64,8 @@\n echo \"iOS SDK Version: ${SDK}\"\n\n if [[ -e \"${BUILDDIR}\" || -e \"${TARGETDIR}\" || -e \"${DECTARGETDIR}\" \\\n-      || -e \"${MUXTARGETDIR}\" || -e \"${DEMUXTARGETDIR}\" ]]; then\n+      || -e \"${MUXTARGETDIR}\" || -e \"${DEMUXTARGETDIR}\" \\\n+      || -e \"${SHARPYUVTARGETDIR}\" ]]; then\n   cat << EOF\n WARNING: The following directories will be deleted:\n WARNING:   ${BUILDDIR}\n@@ -71,14 +73,16 @@\n WARNING:   ${DECTARGETDIR}\n WARNING:   ${MUXTARGETDIR}\n WARNING:   ${DEMUXTARGETDIR}\n+WARNING:   ${SHARPYUVTARGETDIR}\n WARNING: The build will continue in 5 seconds...\n EOF\n   sleep 5\n fi\n rm -rf ${BUILDDIR} ${TARGETDIR} ${DECTARGETDIR} \\\n-    ${MUXTARGETDIR} ${DEMUXTARGETDIR}\n+    ${MUXTARGETDIR} ${DEMUXTARGETDIR} ${SHARPYUVTARGETDIR}\n mkdir -p ${BUILDDIR} ${TARGETDIR}/Headers/ ${DECTARGETDIR}/Headers/ \\\n-    ${MUXTARGETDIR}/Headers/ ${DEMUXTARGETDIR}/Headers/\n+    ${MUXTARGETDIR}/Headers/ ${DEMUXTARGETDIR}/Headers/ \\\n+    ${SHARPYUVTARGETDIR}/Headers/\n\n if [[ ! -e ${SRCDIR}/configure ]]; then\n   if ! (cd ${SRCDIR} && sh autogen.sh); then\n@@ -134,13 +138,14 @@\n   set +x\n\n   # Build only the libraries, skip the examples.\n-  make V=0 -C sharpyuv\n+  make V=0 -C sharpyuv install\n   make V=0 -C src install\n\n   LIBLIST+=\" ${ROOTDIR}/lib/libwebp.a\"\n   DECLIBLIST+=\" ${ROOTDIR}/lib/libwebpdecoder.a\"\n   MUXLIBLIST+=\" ${ROOTDIR}/lib/libwebpmux.a\"\n   DEMUXLIBLIST+=\" ${ROOTDIR}/lib/libwebpdemux.a\"\n+  SHARPYUVLIBLIST+=\" ${ROOTDIR}/lib/libsharpyuv.a\"\n\n   make clean\n\n@@ -165,4 +170,9 @@\n     ${DEMUXTARGETDIR}/Headers/\n ${LIPO} -create ${DEMUXLIBLIST} -output ${DEMUXTARGETDIR}/WebPDemux\n\n+echo \"SHARPYUVLIBLIST = ${SHARPYUVLIBLIST}\"\n+cp -a ${SRCDIR}/sharpyuv/{sharpyuv,sharpyuv_csp}.h \\\n+    ${SHARPYUVTARGETDIR}/Headers/\n+${LIPO} -create ${SHARPYUVLIBLIST} -output ${SHARPYUVTARGETDIR}/SharpYuv\n+\n echo  \"SUCCESS\"\ndiff --git a/xcframeworkbuild.sh b/xcframeworkbuild.sh\nindex 8d484c2..14b987d 100755\n--- a/xcframeworkbuild.sh\n+++ b/xcframeworkbuild.sh\n@@ -69,6 +69,7 @@\n readonly DECTARGETDIR=\"${TOPDIR}/WebPDecoder.xcframework\"\n readonly MUXTARGETDIR=\"${TOPDIR}/WebPMux.xcframework\"\n readonly DEMUXTARGETDIR=\"${TOPDIR}/WebPDemux.xcframework\"\n+readonly SHARPYUVTARGETDIR=\"${TOPDIR}/SharpYuv.xcframework\"\n readonly DEVELOPER=$(xcode-select --print-path)\n readonly DEVROOT=\"${DEVELOPER}/Toolchains/XcodeDefault.xctoolchain\"\n readonly PLATFORMSROOT=\"${DEVELOPER}/Platforms\"\n@@ -94,8 +95,15 @@\n   local subdir\n   for d in $(find \"$1\" -path \"*/Headers\"); do\n     subdir=\"$d/$framework_name\"\n-    mkdir \"$subdir\"\n-    mv \"$d/\"*.h \"$subdir\"\n+    if [[ -d \"$subdir\" ]]; then\n+      # SharpYuv will have a sharpyuv subdirectory. macOS is case insensitive,\n+      # but for consistency with the other frameworks, rename the directory to\n+      # match the case of the framework name.\n+      mv \"$(echo ${subdir} | tr 'A-Z' 'a-z')\" \"$subdir\"\n+    else\n+      mkdir \"$subdir\"\n+      mv \"$d/\"*.h \"$subdir\"\n+    fi\n   done\n }\n\n@@ -104,7 +112,8 @@\n echo \"MacOS SDK Version: ${SDK[$MACOS]}\"\n\n if [[ -e \"${BUILDDIR}\" || -e \"${TARGETDIR}\" || -e \"${DECTARGETDIR}\" \\\n-      || -e \"${MUXTARGETDIR}\" || -e \"${DEMUXTARGETDIR}\" ]]; then\n+      || -e \"${MUXTARGETDIR}\" || -e \"${DEMUXTARGETDIR}\" \\\n+      || -e \"${SHARPYUVTARGETDIR}\" ]]; then\n   cat << EOF\n WARNING: The following directories will be deleted:\n WARNING:   ${BUILDDIR}\n@@ -112,12 +121,13 @@\n WARNING:   ${DECTARGETDIR}\n WARNING:   ${MUXTARGETDIR}\n WARNING:   ${DEMUXTARGETDIR}\n+WARNING:   ${SHARPYUVTARGETDIR}\n WARNING: The build will continue in 5 seconds...\n EOF\n   sleep 5\n fi\n rm -rf ${BUILDDIR} ${TARGETDIR} ${DECTARGETDIR} \\\n-  ${MUXTARGETDIR} ${DEMUXTARGETDIR}\n+  ${MUXTARGETDIR} ${DEMUXTARGETDIR} ${SHARPYUVTARGETDIR}\n\n if [[ ! -e ${SRCDIR}/configure ]]; then\n   if ! (cd ${SRCDIR} && sh autogen.sh); then\n@@ -137,6 +147,7 @@\n   DECLIBLIST=()\n   MUXLIBLIST=()\n   DEMUXLIBLIST=()\n+  SHARPYUVLIBLIST=()\n\n   for PLATFORM in ${PLATFORMS[$i]}; do\n     ROOTDIR=\"${BUILDDIR}/${PLATFORM}\"\n@@ -187,23 +198,26 @@\n     set +x\n\n     # Build only the libraries, skip the examples.\n-    make V=0 -C sharpyuv\n+    make V=0 -C sharpyuv install\n     make V=0 -C src install\n\n     LIBLIST+=(\"${ROOTDIR}/lib/libwebp.a\")\n     DECLIBLIST+=(\"${ROOTDIR}/lib/libwebpdecoder.a\")\n     MUXLIBLIST+=(\"${ROOTDIR}/lib/libwebpmux.a\")\n     DEMUXLIBLIST+=(\"${ROOTDIR}/lib/libwebpdemux.a\")\n+    SHARPYUVLIBLIST+=(\"${ROOTDIR}/lib/libsharpyuv.a\")\n     # xcodebuild requires a directory for the -headers option, these will match\n     # for all builds.\n     make -C src install-data DESTDIR=\"${ROOTDIR}/lib-headers\"\n     make -C src install-commonHEADERS DESTDIR=\"${ROOTDIR}/dec-headers\"\n     make -C src/demux install-data DESTDIR=\"${ROOTDIR}/demux-headers\"\n     make -C src/mux install-data DESTDIR=\"${ROOTDIR}/mux-headers\"\n+    make -C sharpyuv install-data DESTDIR=\"${ROOTDIR}/sharpyuv-headers\"\n     LIB_HEADERS=\"${ROOTDIR}/lib-headers/${ROOTDIR}/include/webp\"\n     DEC_HEADERS=\"${ROOTDIR}/dec-headers/${ROOTDIR}/include/webp\"\n     DEMUX_HEADERS=\"${ROOTDIR}/demux-headers/${ROOTDIR}/include/webp\"\n     MUX_HEADERS=\"${ROOTDIR}/mux-headers/${ROOTDIR}/include/webp\"\n+    SHARPYUV_HEADERS=\"${ROOTDIR}/sharpyuv-headers/${ROOTDIR}/include/webp\"\n\n     make distclean\n\n@@ -220,16 +234,20 @@\n   target_declib=\"${target_dir}/$(basename ${DECLIBLIST[0]})\"\n   target_demuxlib=\"${target_dir}/$(basename ${DEMUXLIBLIST[0]})\"\n   target_muxlib=\"${target_dir}/$(basename ${MUXLIBLIST[0]})\"\n+  target_sharpyuvlib=\"${target_dir}/$(basename ${SHARPYUVLIBLIST[0]})\"\n\n   mkdir -p \"${target_dir}\"\n   ${LIPO} -create ${LIBLIST[@]} -output \"${target_lib}\"\n   ${LIPO} -create ${DECLIBLIST[@]} -output \"${target_declib}\"\n   ${LIPO} -create ${DEMUXLIBLIST[@]} -output \"${target_demuxlib}\"\n   ${LIPO} -create ${MUXLIBLIST[@]} -output \"${target_muxlib}\"\n+  ${LIPO} -create ${SHARPYUVLIBLIST[@]} -output \"${target_sharpyuvlib}\"\n   FAT_LIBLIST+=(-library \"${target_lib}\" -headers \"${LIB_HEADERS}\")\n   FAT_DECLIBLIST+=(-library \"${target_declib}\" -headers \"${DEC_HEADERS}\")\n   FAT_DEMUXLIBLIST+=(-library \"${target_demuxlib}\" -headers \"${DEMUX_HEADERS}\")\n   FAT_MUXLIBLIST+=(-library \"${target_muxlib}\" -headers \"${MUX_HEADERS}\")\n+  FAT_SHARPYUVLIBLIST+=(-library \"${target_sharpyuvlib}\")\n+  FAT_SHARPYUVLIBLIST+=(-headers \"${SHARPYUV_HEADERS}\")\n done\n\n # lipo will not put archives with the same architecture (e.g., x86_64\n@@ -246,10 +264,13 @@\n   -output ${DEMUXTARGETDIR}\n xcodebuild -create-xcframework \"${FAT_MUXLIBLIST[@]}\" \\\n   -output ${MUXTARGETDIR}\n+xcodebuild -create-xcframework \"${FAT_SHARPYUVLIBLIST[@]}\" \\\n+  -output ${SHARPYUVTARGETDIR}\n update_headers_path \"${TARGETDIR}\"\n update_headers_path \"${DECTARGETDIR}\"\n update_headers_path \"${DEMUXTARGETDIR}\"\n update_headers_path \"${MUXTARGETDIR}\"\n+update_headers_path \"${SHARPYUVTARGETDIR}\"\n set +x\n\n echo  \"SUCCESS\""
  },
  {
    "url": "https://stackoverflow.com/questions/78652575/how-to-implement-ordered-fan-in-proper-message-passing-for-my-language",
    "body": "func fanIn(inputs []<-chan OutputPayload) <-chan OutputPayload {\n\tresult := make(chan OutputPayload)\n\t// Listen to input channels in separate goroutines\n\tinputWg := sync.WaitGroup{}\n\tfor inputIndex := range inputs {\n\t\tinputWg.Add(1)\n\t\tgo func(index int) {\n\t\t\tdefer inputWg.Done()\n\t\t\tfor data := range inputs[index] {\n\t\t\t\t// Send the data to the output\n\t\t\t\tresult <- data\n\t\t\t}\n\t\t}(inputIndex)\n\t}\n\t// When all input channels are closed, close the fan in ch\n\tgo func() {\n\t\tinputWg.Wait()\n\t\tclose(result)\n\t}()\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78652575/how-to-implement-ordered-fan-in-proper-message-passing-for-my-language",
    "body": "// Read inputs from input channel, output them to the output channel\n// bufsize is the max number of messages in flight.\nfunc order(input <-chan OutputPayload, bufsize int) <-chan OutputPayload {\n\tresult := make(chan OutputPayload)\n\tqueue := SortQueue{} // implementation below\n\tgo func() {\n\t\tdefer close(result)\n\t\tfor data := range input {\n\t\t\t// Add new item to the queue\n\t\t\theap.Push(&queue, data)\n\t\t\t// If the queue grew enough, pop\n\t\t\tfor len(queue) >= bufsize {\n\t\t\t\tresult <- heap.Pop(&queue).(OutputPayload)\n\t\t\t}\n\t\t}\n\t\tfor len(queue) > 0 {\n\t\t\tresult <- heap.Pop(&queue).(OutputPayload)\n\t\t}\n\t}()\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78631941/containerd-client-soci-snapshotter-http-server-gave-http-response-to-https-c",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"github.com/containerd/containerd/remotes/docker\"\n\t\"github.com/containerd/containerd/remotes/docker/config\"\n)\nfunc main() {\n\tctx := context.Background()\n\thosts := []struct {\n\t\tname  string\n\t\thosts docker.RegistryHosts\n\t}{\n\t\t{name: \"ConfigureHosts with TLS\", hosts: config.ConfigureHosts(ctx, config.HostOptions{\n\t\t\tDefaultScheme: \"http\",\n\t\t\tDefaultTLS: &tls.Config{\n\t\t\t\tInsecureSkipVerify: true,\n\t\t\t},\n\t\t})},\n\t\t{name: \"ConfigureHosts without TLS\", hosts: config.ConfigureHosts(ctx, config.HostOptions{\n\t\t\tDefaultScheme: \"http\",\n\t\t})},\n\t\t{name: \"ConfigureDefaultRegistries\", hosts: docker.ConfigureDefaultRegistries(\n\t\t\tdocker.WithPlainHTTP(func(string) (bool, error) { return true, nil }),\n\t\t)},\n\t}\n\thost := \"localhost:5000\"\n\tfor _, config := range hosts {\n\t\tfmt.Printf(\"%s:\\n\", config.name)\n\t\tif registryHosts, err := config.hosts(host); err == nil {\n\t\t\tfor _, registryHost := range registryHosts {\n\t\t\t\tfmt.Printf(\"- %s//:%s\\n\", registryHost.Scheme, registryHost.Host)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78611764/mysql-data-cannot-be-queried-using-go-gorm",
    "body": "+--------------------------+------------+\n| Variable_name            | Value      |\n+--------------------------+------------+\n| Aborted_clients          | 0          |\n| Aborted_connects         | 0          |\n| Bytes_received           | 155372598  |\n| Bytes_sent               | 1176560426 |\n| Connections              | 30023      |\n| Created_tmp_disk_tables  | 0          |\n| Created_tmp_tables       | 8340       |\n| Created_tmp_files        | 60         |\n...\n| Open_tables              | 1          |\n| Open_files               | 2          |\n| Open_streams             | 0          |\n| Opened_tables            | 44600      |\n| Questions                | 2026873    |\n...\n| Table_locks_immediate    | 1920382    |\n| Table_locks_waited       | 0          |\n| Threads_cached           | 0          |\n| Threads_created          | 30022      |\n| Threads_connected        | 1          |\n| Threads_running          | 1          |\n| Uptime                   | 80380      |\n+--------------------------+------------+"
  },
  {
    "url": "https://stackoverflow.com/questions/78589877/templ-error-parsing-style-attribute-of-html-element",
    "body": "// view helper\nfunc EventTemplate(event types.Event) string {\n\tstr := \"<li class=\\\"\" + GetEventClass(event) + \"\\\" style=\\\"\" + GetEventStyle(event) + \"\\\">\\n\"\n\tstr += \"  <a href=\\\"#\\\" class=\\\"group absolute inset-1 flex flex-col overflow-y-auto rounded-lg bg-blue-50 p-2 text-xs leading-5 hover:bg-blue-100\\\">\\n\"\n\tstr += \"    <p class=\\\"order-1 font-semibold text-blue-700\\\">\" + event.Title + \"</p>\\n\"\n\tstr += \"    <p class=\\\"text-blue-500 group-hover:text-blue-700\\\"><time datetime=\\\"\" + event.StartDate.Format(time.RFC3339) + \"\\\">\" + event.StartDate.Format(time.Kitchen) + \"</time></p>\\n\"\n\tstr += \"  </a>\\n\"\n\tstr += \"</li>\\n\"\n\treturn str\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78589438/404-not-working-with-react-app-on-golang-server",
    "body": "//go:embed dist/*\nvar distFS embed.FS\nfunc main() {\n\tr := mux.NewRouter()\n\t// Create a subdirectory in the embedded file system\n\tsubFS, err := fs.Sub(distFS, \"dist\")\n\tif err != nil {\n\t\tfmt.Println(\"Failed to locate embedded files:\", err)\n\t\treturn\n\t}\n\t// Serve static files and index.html for frontend routes\n\tr.PathPrefix(\"/\").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfilePath := path.Clean(r.URL.Path)\n\t\tif filePath == \"/\" {\n\t\t\tfilePath = \"index.html\"\n\t\t} else {\n\t\t\tfilePath = strings.TrimPrefix(filePath, \"/\")\n\t\t}\n\t\tfile, err := subFS.Open(filePath)\n\t\tif os.IsNotExist(err) || filePath == \"index.html\" {\n\t\t\thttp.ServeFile(w, r, \"dist/index.html\")\n\t\t\treturn\n\t\t} else if err != nil {\n\t\t\thttp.Error(w, \"Internal Server Error\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\t\thttp.FileServer(http.FS(subFS)).ServeHTTP(w, r)\n\t})\n\thandler := config.CORS.Handler(r)\n\tport := \":8080\"\n\tfmt.Println(\"Server started on \" + port)\n\thttp.Handle(\"/\", handler)\n\thttp.ListenAndServe(port, nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78579085/how-to-connect-to-h2-database-through-tcp-using-h2go-package",
    "body": "volumes:\n  data:\n    driver: local\nservices:\n  postgres:\n    image: postgres:latest\n    ports:\n      - 7899:5432\n    volumes:\n      - data:/var/lib/postgresql/data\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"${USERNAME:-test}\"]\n      interval: 1m30s\n      timeout: 30s\n      retries: 5\n      start_period: 30s\n      start_interval: 5s\n    environment:\n      POSTGRES_DB: NEWDB1\n      POSTGRES_USER: ${USERNAME:-test}\n      POSTGRES_PASSWORD: ${PASSWORD:-test}\n  app:\n    depends_on:\n      postgres:\n        condition: service_healthy\n    image: app:latest\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command:\n      - \"-host=postgres\"\n      - \"-port=5432\"\n      - \"-username=${USERNAME:-test}\"\n      - \"-password=${PASSWORD:-test}\""
  },
  {
    "url": "https://stackoverflow.com/questions/78579085/how-to-connect-to-h2-database-through-tcp-using-h2go-package",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/jmoiron/sqlx\"\n\t_ \"github.com/lib/pq\"\n)\nvar (\n\thost     string\n\tport     int\n\tdbname   string\n\tusername string\n\tpassword string\n)\nfunc init() {\n\tflag.StringVar(&host, \"host\", \"localhost\", \"host\")\n\tflag.IntVar(&port, \"port\", 7899, \"port\")\n\tflag.StringVar(&dbname, \"dbname\", \"NEWDB1\", \"dbname\")\n\tflag.StringVar(&username, \"username\", \"\", \"username\")\n\tflag.StringVar(&password, \"password\", \"\", \"password\")\n}\nfunc main() {\n\tflag.Parse()\n\tlog.Println(\"started\")\n\tconnectionData := fmt.Sprintf(\"postgres://%v:%v@%v:%v/%v?sslmode=disable\", username, password, host, port, dbname)\n\tconn, err := sqlx.Open(\"postgres\", connectionData)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"connected to database\")\n\tif err = conn.Ping(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"ping\")\n\tif err = conn.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"close\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78579085/how-to-connect-to-h2-database-through-tcp-using-h2go-package",
    "body": "postgres-1  | 2024-06-09 14:42:28.775 UTC [40] FATAL:  identifier too long at character 72\npostgres-1  | 2024-06-09 14:42:28.775 UTC [40] DETAIL:  Identifier must be less than 64 characters.\npostgres-1  | 2024-06-09 14:42:28.775 UTC [40] STATEMENT:\npostgres-1  |   UPDATE pg_class   SET relacl = (SELECT array_agg(a.acl) FROM  (SELECT E'=r/\"242440313243303331324a282975402148443041534a4430448fcaad801291b2a314895c683585be5263a6d9852473771474dff653f1c278d6\"' as acl   UNION SELECT unnest(pg_catalog.acldefault(    CASE WHEN relkind = 'S' THEN 's'          ELSE 'r' END::\"char\",10::oid)) ) as a)   WHERE relkind IN ('r', 'v', 'm', 'S')  AND relacl IS NULL;\npostgres-1  |\npostgres-1  | child process exited with exit code 1"
  },
  {
    "url": "https://stackoverflow.com/questions/78566118/serve-static-files-within-go-using-chi-router",
    "body": "func main() {\n    router := chi.NewRouter()\n    router.Get(\"/\", indexHandler)\n    router.Get(\"/showExternalProfile\", showExternalProfileHandler)\n    router.Post(\"/project_request\", projectRequestHandler)\n    router.Post(\"/downloadExternalProfile\", downloadExternalProfileHandler)\n    router.Post(\"/aigenerateProfile\", aibeautifyHandler)\n    router.Post(\"/project_clear\", clearHandler)\n\t// Create a route along /assets that will serve contents from\n\t// the ./assets/ folder.\n\tworkDir, _ := os.Getwd()\n\tfilesDir := http.Dir(filepath.Join(workDir, \"assets\"))\n\tFileServer(router, \"/assets\", filesDir)\n    http.ListenAndServe(\":8000\", router)\n}\n// FileServer conveniently sets up a http.FileServer handler to serve\n// static files from a http.FileSystem.\nfunc FileServer(r chi.Router, path string, root http.FileSystem) {\n\tif strings.ContainsAny(path, \"{}*\") {\n\t\tpanic(\"FileServer does not permit any URL parameters.\")\n\t}\n\tif path != \"/\" && path[len(path)-1] != '/' {\n\t\tr.Get(path, http.RedirectHandler(path+\"/\", 301).ServeHTTP)\n\t\tpath += \"/\"\n\t}\n\tpath += \"*\"\n\tr.Get(path, func(w http.ResponseWriter, r *http.Request) {\n\t\trctx := chi.RouteContext(r.Context())\n\t\tpathPrefix := strings.TrimSuffix(rctx.RoutePattern(), \"/*\")\n\t\tfs := http.StripPrefix(pathPrefix, http.FileServer(root))\n\t\tfs.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78562915/why-its-reported-proto-cannot-parse-invalid-wire-format-data-when-using-proto",
    "body": "package main\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\tpb \"github.com/foo/stackoverflow/78562915/record_proto\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n\t\"google.golang.org/protobuf/proto\"\n)\nfunc ptr[T string | uint64](val T) *T {\n\treturn &val\n}\nfunc main() {\n\ta := &pb.A{\n\t\tName: ptr(\"name\"),\n\t\tId:   ptr(uint64(1)),\n\t\tSex:  ptr(\"sex\"),\n\t\tAttachment: []*pb.AMailAttachment{\n\t\t\t{\n\t\t\t\tAttachMd5: ptr(\"attach_md5\"),\n\t\t\t\tMimeType:  ptr(\"mime_type\"),\n\t\t\t\tName:      ptr(\"name\"),\n\t\t\t},\n\t\t},\n\t}\n\tb, err := proto.Marshal(a)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\torigin := base64.StdEncoding.EncodeToString(b)\n\ttarget := new(pb.ASendVersion)\n\tdecodeBytes, err := base64.StdEncoding.DecodeString(origin)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfmt.Println(string(decodeBytes))\n\terr = proto.Unmarshal(decodeBytes, target)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tj, err := protojson.Marshal(target)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tfmt.Println(string(j))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78559849/establish-ssl-tls-connection-to-aws-rds-mysql-with-golang-docker",
    "body": "package services\nimport (\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"sync\"\n\tmysqlDriver \"github.com/go-sql-driver/mysql\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n\t\"onestop.com/requests/internal/controllers\"\n\t\"onestop.com/requests/internal/repositories\"\n)\ntype dbCredentials struct {\n\tPassword             string\n\tDbname               string\n\tEngine               string\n\tPort                 int\n\tDbInstanceIdentifier string\n\tHost                 string\n\tUsername             string\n}\ntype ControllerService struct {\n\tDb       *gorm.DB\n}\nfunc InitializeKernel() *ControllerService {\n\tdbHOST := os.Getenv(\"DB_HOST\")\n\tdbNAME := os.Getenv(\"DB_DBNAME\")\n\tdbCREDENTIALS := os.Getenv(\"DB_CREDENTIALS\")\n\tvar dbCred dbCredentials\n\terr := json.Unmarshal([]byte(dbCREDENTIALS), &dbCred)\n\tif err != nil {\n\t\tlog.Fatal(\"could not parse db credentials from env\")\n\t}\n\trootCertPool := x509.NewCertPool()\n\tglobPem, err := os.ReadFile(\"./internal/certificates/global-bundle.pem\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif ok := rootCertPool.AppendCertsFromPEM(globPem); !ok {\n\t\tlog.Fatal(\"Failed to append global PEM.\")\n\t}\n\tmysqlDriver.RegisterTLSConfig(\"custom\", &tls.Config{\n\t\tRootCAs: rootCertPool,\n\t})\n\ttlsOpt := \"custom\"\n\t// change TLS option for local development\n\tif dbHOST == \"host.docker.internal\" {\n\t\ttlsOpt = \"skip-verify\"\n\t}\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s:3306)/%s?charset=utf8mb4&parseTime=True&tls=%s&loc=Local\", dbCred.Username, dbCred.Password, dbHOST, dbNAME, tlsOpt)\n\tcustomDb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tdb, err := gorm.Open(mysql.New(mysql.Config{\n\t\tConn: customDb,\n\t}), &gorm.Config{})\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\treturn &ControllerService{Db: db}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78559349/converting-xtea-implementation-from-js-to-go",
    "body": "func decrypt(k [4]uint32, block []byte) []byte {\n\ty := uint32(block[0])<<24 | uint32(block[1])<<16 | uint32(block[2])<<8 | uint32(block[3])\n\tz := uint32(block[4])<<24 | uint32(block[5])<<16 | uint32(block[6])<<8 | uint32(block[7])\n\tconst (\n\t\trounds        = 32\n\t\tdelta  uint32 = 0x9E3779B9\n\t)\n\tsum := delta\n\tsum *= rounds\n\tfor i := 0; i < rounds; i++ {\n\t\tz -= (y<<4 ^ y>>5 + y) ^ (sum + k[sum>>11&3])\n\t\tsum -= delta\n\t\ty -= (z<<4 ^ z>>5 + z) ^ (sum + k[sum&3])\n\t}\n\tend := make([]byte, 8)\n\tend[0] = byte(y >> 24)\n\tend[1] = byte(y >> 16)\n\tend[2] = byte(y >> 8)\n\tend[3] = byte(y)\n\tend[4] = byte(z >> 24)\n\tend[5] = byte(z >> 16)\n\tend[6] = byte(z >> 8)\n\tend[7] = byte(z)\n\treturn end\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78551124/generate-templ-go-through-go-instead-of-the-cli",
    "body": "// import \"github.com/a-h/templ/cmd/templ/generatecmd\"\nfunc GenerateTemplate(filename string) (bytes.Buffer, error) {\n\tvar buf bytes.Buffer\n\tr, w, pipeErr := os.Pipe()\n\tif pipeErr != nil {\n\t\treturn buf, pipeErr\n\t}\n\told := os.Stdout\n\tos.Stdout = w // intercept everything to stdout\n\tgenErr := generatecmd.NewGenerate(slog.Default(), generatecmd.Arguments{\n\t\tFileName: filename,\n\t\tToStdout: true,\n\t}).Run(context.Background())\n\tw.Close()\n\tdefer r.Close()\n\tos.Stdout = old // restore stdout\n\tif genErr != nil {\n\t\treturn buf, genErr\n\t}\n\tio.Copy(&buf, r)\n\treturn buf, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78541401/gorm-append-in-association-mode-fails-my-validation-checks-even-when-both-the-ob",
    "body": "func AddFollower(w http.ResponseWriter, r *http.Request) {\n\tid, parseIDErr := strconv.ParseUint(mux.Vars(r)[\"id\"], 10, 64)\n\tfollower_id, parseFollowerIDErr := strconv.ParseUint(mux.Vars(r)[\"follower_id\"], 10, 64)\n\t//These 2 instances must be fully populated before the append operation\n    var user models.User\n\tvar follower models.User\n\tif parseIDErr != nil || parseFollowerIDErr != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\treturn\n\t}\n\ttx := database.DB.Begin()\n    //Find the user\n\tif err := tx.First(&user, id).Error; err != nil {\n\t\tutilities.HandleDBError(err, r.URL.String(), w, \"user\")\n\t\treturn\n\t}\n\n    // Find the follower\n\tif err := tx.First(&follower, follower_id).Error; err != nil {\n\t\tutilities.HandleDBError(err, r.URL.String(), w, \"user\")\n\t\treturn\n\t}\n    // Here the validation shouldn't fire since all fields are populated\n\tif err := tx.\n\t\tModel(&user).\n\t\tAssociation(\"Followers\").\n\t\tAppend(&follower); err != nil {\n\t\ttx.Rollback()\n\t\tutilities.HandleDBError(err, r.URL.String(), w, \"user\")\n\t\treturn\n\t}\n\tif err := tx.Commit().Error; err != nil {\n\t\tutilities.HandleDBError(err, r.URL.String(), w, \"user\")\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusCreated)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78451227/downloading-blobs-from-azure-and-unzipping-them-troubleshooting-code-go",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/Azure/azure-sdk-for-go/sdk/storage/azblob\"\n)\nfunc main() {\n\tconst (\n\t\tconnectionString = \"<connection_string>\"\n\t\tcontainerName    = \"sample-container\"\n\t\tblobName         = \"ExifToolWrapper-master.zip\"\n\t\tdownloadFile     = \"ExifToolWrapper-master.zip\"\n\t)\n\t// Create a client with the provided connection string\n\tclient, err := azblob.NewClientFromConnectionString(connectionString, nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating client:\", err)\n\t\treturn\n\t}\n\t// Create or open a local file where we can download the blob\n\tfile, err := os.Create(downloadFile)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating downloaded file:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\t// Download the blob\n\t_, err = client.DownloadFile(context.TODO(), containerName, blobName, file, nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error downloading file:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"Blob downloaded successfully!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78451227/downloading-blobs-from-azure-and-unzipping-them-troubleshooting-code-go",
    "body": "package main\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\nfunc unzipSource(source, destination string) error {\n\t// 1. Open the zip file\n\treader, err := zip.OpenReader(source)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer reader.Close()\n\t// 2. Get the absolute destination path\n\tdestination, err = filepath.Abs(destination)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// 3. Iterate over zip files inside the archive and unzip each of them\n\tfor _, f := range reader.File {\n\t\terr := unzipFile(f, destination)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\nfunc unzipFile(f *zip.File, destination string) error {\n\t// 4. Check if file paths are not vulnerable to Zip Slip\n\tfilePath := filepath.Join(destination, f.Name)\n\tif !strings.HasPrefix(filePath, filepath.Clean(destination)+string(os.PathSeparator)) {\n\t\treturn fmt.Errorf(\"invalid file path: %s\", filePath)\n\t}\n\t// 5. Create directory tree\n\tif f.FileInfo().IsDir() {\n\t\tif err := os.MkdirAll(filePath, os.ModePerm); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\tif err := os.MkdirAll(filepath.Dir(filePath), os.ModePerm); err != nil {\n\t\treturn err\n\t}\n\t// 6. Create a destination file for unzipped content\n\tdestinationFile, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer destinationFile.Close()\n\t// 7. Unzip the content of a file and copy it to the destination file\n\tzippedFile, err := f.Open()\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer zippedFile.Close()\n\tif _, err := io.Copy(destinationFile, zippedFile); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n\tzipFilePath := \"C:\\\\Users\\\\ExifToolWrapper-master.zip\"\n\tdestinationDir := \"C:\\\\Users\\\\folder\\\\env\"\n\terr := unzipSource(zipFilePath, destinationDir)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78361251/how-to-update-slice-or-array-of-struct-in-batches-with-gorm",
    "body": "import (\n    \"gorm.io/gorm\"\n\t\"gorm.io/gorm/clause\"\n    //...\n)\n// Let's fetch some random users and modify them\nvar users []*model.User\ntx := DB.Model(&User{}).Limit(5).Find(&users)\nif tx.Error != nil {\n\tpanic(tx.Error)\n}\nfor _, u := range users {\n\tu.Name = u.Name + \" updated\"\n}\n// Create rows for VALUES list\nvalues := make([]clause.Expr, 0, len(users))\nfor _, u := range users {\n\tvalues = append(values, gorm.Expr(\"(?::bigint, ?, ?::integer)\", u.ID, u.Name, u.Age))\n}\n// Create the expression that will contain all the rows\n// Because \"values\" is a slice, Gorm will join them with commas\n// Prevent Gorm from adding parenthesis so it will generate the correct\n// syntax: \"VALUES (...),(...),(...)\"\nvaluesExpr := gorm.Expr(\"?\", values)\nvaluesExpr.WithoutParentheses = true\ntx = DB.Exec(\n\t\"UPDATE users SET name = tmp.name, age = tmp.age, updated_at = NOW() FROM (VALUES ?) tmp(id,name,age) WHERE users.id = tmp.id\",\n\tvaluesExpr,\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/78358372/how-to-efficiently-communicate-client-dependencies-in-asynq",
    "body": "tsks := tasks.Tasks{\n  Clients: &tasks.Clients{\n    Db:       dbClient,\n    Redis:    redisClient,\n    Tracking: tkClient,\n    Mailer:   mailClient,\n    Asynq:    asynqClient,\n  },\n}\ntsk, err := tsks.NewPing(\"pong\")\nif err != nil {\n  fmt.Printf(\"%s\", err)\n  panic(err)\n}\n_, err = asynqClient.Enqueue(tsk)\nif err != nil {\n  fmt.Printf(\"%s\", err)\n  panic(err)\n}\n// NOTE : this should eventually be separated from the client\nasynqServer := asynq.NewServer(\n  asynq.RedisClientOpt{\n    Addr:     os.Getenv(\"REDIS_ENDPOINT\"),\n    DB:       0, // will use the default one\n    Password: os.Getenv(\"REDIS_PASSWORD\"),\n  },\n  asynq.Config{Concurrency: 10},\n)\nmux := asynq.NewServeMux()\nmux.HandleFunc(tasks.TypePing, tsks.HandlePing)\ngo asynqServer.Run(mux)"
  },
  {
    "url": "https://stackoverflow.com/questions/78344895/golang-cosmosdb-gremlin-connection",
    "body": "c#\nstatic async Task Main(string[] args)\n{\n    string hostname = \"<account_name>.gremlin.cosmos.azure.com\";\n    int port = 443;\n    string primaryKey = \"*****\";\n    string database = \"newdb\";\n    string collection = \"newgraph\";\n    var gremlinServer = new GremlinServer(\n        hostname,\n        port,\n        true,\n        $\"/dbs/{database}/colls/{collection}\",\n        primaryKey\n    );\n    var gremlinClient = new GremlinClient(\n        gremlinServer,\n        new GraphSON2Reader(),\n        new GraphSON2Writer(),\n        mimeType: \"application/vnd.gremlin-v2.0+json\"\n    );\n    string gremlinQuery = \"g.V()\";\n    var results = await gremlinClient.SubmitAsync<Dictionary<string, object>>(gremlinQuery);\n    foreach (var result in results)\n    {\n        Console.WriteLine($\"Vertex ID: {result[\"id\"]}, Label: {result[\"label\"]}\");\n        var properties = result[\"properties\"] as Dictionary<string, object>;\n        if (properties != null)\n        {\n            foreach (var property in properties)\n            {\n                var propertyName = property.Key;\n                var propertyValue = property.Value;\n                if (propertyValue is Dictionary<string, object> innerDict)\n                {\n                    Console.WriteLine($\"Property Name: {propertyName}, Value (Dictionary):\");\n                    foreach (var kvp in innerDict)\n                    {\n                        Console.WriteLine($\"Inner Key: {kvp.Key}, Inner Value: {kvp.Value}\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine($\"Property Name: {propertyName}, Value: {propertyValue}\");\n                }\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"No properties found for this vertex.\");\n        }\n        Console.WriteLine();\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78340268/redis-go-client-database-integration",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"github.com/alicebob/miniredis/v2\"\n\t\"github.com/redis/go-redis/v9\"\n)\nfunc main() {\n\tmockRedis, _ := miniredis.Run()\n\tredisClient := redis.NewClient(&redis.Options{\n\t\tAddr: mockRedis.Addr(),\n\t\tDB:   0,\n\t})\n\tlog.Printf(\"MockRedis Addr: %s\\n\", mockRedis.Addr())\n\tresult, err := redisClient.Ping(context.Background()).Result()\n\tif err != nil {\n\t\tlog.Printf(\"Failed to connect to Redis: %v\", err)\n\t} else {\n\t\tlog.Printf(\"Succeeded to connect to Redis: %v\\n\", result)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78329848/why-cant-the-get-handler-function-be-reached-with-the-new-advanced-routing-in-g",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc main() {\n\tprefix := \"/users\"\n\tuserMux := http.NewServeMux()\n\tuserMux.HandleFunc(\"GET /register/\", registerGet)\n\tuserMux.HandleFunc(\"GET /register2/\", registerGet)\n\tuserMux.HandleFunc(\"POST /register/\", registerPost)\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/users/{pathname...}\", http.StripPrefix(prefix, userMux))\n\tlog.Fatal(http.ListenAndServe(\":12345\", mux))\n}\nfunc registerGet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, r.Method, \"I'm here\", r.RequestURI)\n}\nfunc registerPost(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintln(w, r.Method, \"I'm here\", r.RequestURI)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78322968/get-updated-values-for-nested-fields-in-firestore-document",
    "body": "func parseFirestoreDocument(value *firestoredata.Document) map[string]interface{} {\n\tif value == nil {\n\t\treturn nil\n\t}\n\tfields := value.GetFields()\n\tif fields == nil {\n\t\treturn nil\n\t}\n\tresult := make(map[string]interface{})\n\tfor k, v := range fields {\n\t\tresult[k] = parseValue(v)\n\t}\n\treturn result\n}\nfunc parseValue(value *firestoredata.Value) interface{} {\n\tif value == nil {\n\t\treturn nil\n\t}\n\tswitch value.ValueType.(type) {\n\tcase *firestoredata.Value_NullValue:\n\t\treturn nil\n\tcase *firestoredata.Value_BooleanValue:\n\t\treturn value.GetBooleanValue()\n\tcase *firestoredata.Value_IntegerValue:\n\t\treturn value.GetIntegerValue()\n\tcase *firestoredata.Value_DoubleValue:\n\t\treturn value.GetDoubleValue()\n\tcase *firestoredata.Value_StringValue:\n\t\treturn value.GetStringValue()\n\tcase *firestoredata.Value_TimestampValue:\n\t\treturn value.GetTimestampValue()\n\tcase *firestoredata.Value_GeoPointValue:\n\t\treturn value.GetGeoPointValue()\n\tcase *firestoredata.Value_BytesValue:\n\t\treturn value.GetBytesValue()\n\tcase *firestoredata.Value_ReferenceValue:\n\t\treturn value.GetReferenceValue()\n\tcase *firestoredata.Value_ArrayValue:\n\t\treturn parseArray(value.GetArrayValue())\n\tcase *firestoredata.Value_MapValue:\n\t\treturn parseMap(value.GetMapValue())\n\tdefault:\n\t\treturn nil\n\t}\n}\nfunc parseMap(value *firestoredata.MapValue) interface{} {\n\tif value == nil {\n\t\treturn nil\n\t}\n\tfields := value.GetFields()\n\tif fields == nil {\n\t\treturn nil\n\t}\n\tresult := make(map[string]interface{})\n\tfor k, v := range fields {\n\t\tresult[k] = parseValue(v)\n\t}\n\treturn result\n}\nfunc parseArray(value *firestoredata.ArrayValue) interface{} {\n\tif value == nil {\n\t\treturn nil\n\t}\n\tvalues := value.GetValues()\n\tif values == nil {\n\t\treturn nil\n\t}\n\tresult := make([]interface{}, len(values))\n\tfor i, v := range values {\n\t\tresult[i] = parseValue(v)\n\t}\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78314046/how-to-render-templ-inside-an-another-templ-file",
    "body": "package views\ntempl Navbar( )  {\n<nav class=\"bg-white border-gray-200 dark:bg-gray-900\">\n  <div class=\"max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4\">\n    <a href=\"https://flowbite.com/\" class=\"flex items-center space-x-3 rtl:space-x-reverse\">\n        <img src=\"https://flowbite.com/docs/images/logo.svg\" class=\"h-8\" alt=\"Flowbite Logo\" />\n        <span class=\"self-center text-2xl font-semibold whitespace-nowrap dark:text-white\">Title</span>\n    </a>\n    <button data-collapse-toggle=\"navbar-default\" type=\"button\" class=\"inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600\" aria-controls=\"navbar-default\" aria-expanded=\"false\">\n        <span class=\"sr-only\">Open main menu</span>\n        <svg class=\"w-5 h-5\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 17 14\">\n            <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M1 1h15M1 7h15M1 13h15\"/>\n        </svg>\n    </button>\n    <div class=\"hidden w-full md:block md:w-auto\" id=\"navbar-default\">\n      <ul class=\"font-medium flex flex-col p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700\">\n        <li>\n          <a href=\"#\" class=\"block py-2 px-3 text-white bg-blue-700 rounded md:bg-transparent md:text-blue-700 md:p-0 dark:text-white md:dark:text-blue-500\" aria-current=\"page\">Home</a>\n        </li>\n        <li>\n          <a href=\"#\" class=\"block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent\">Encode</a>\n        </li>\n        <li>\n          <a href=\"#\" class=\"block py-2 px-3 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent\">Decode</a>\n        </li>\n\n      </ul>\n    </div>\n  </div>\n</nav>\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78293062/golang-one-legged-oauth1",
    "body": "package main\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha1\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"time\"\n)\nfunc main() {\n\tconsumerKey := \"yourkeyhere\"\n\tconsumerSecret := \"yoursecrethere\"\n\turi := \"https://youruri.com/api\"\n\tnow := time.Now().Unix()\n\tnowStr := strconv.FormatInt(int64(now), 10)\n\t// spec says nonce is supposed to be unique per request\n\tnonce := \"aAbBcCDd98765axb9\"\n\tform := url.Values{}\n\tform.Set(\"oauth_consumer_key\", consumerKey)\n\tform.Set(\"oauth_nonce\", nonce)\n\tform.Set(\"oauth_signature_method\", \"HMAC-SHA1\")\n\tform.Set(\"oauth_timestamp\", nowStr)\n\tform.Set(\"oauth_version\", \"1.0\")\n\t// The first part of my baseString is POST because I'm doing a POST\n\t// If yours is a GET, then you'd replace it with GET\n\tbaseString := fmt.Sprintf(\"POST&%s&%s\", url.QueryEscape(uri), url.QueryEscape(form.Encode()))\n\t// spec says the key for the signature should be secret + \"&\" + token,\n    // but if you don't have a token then it's just secret + \"&\"\n\tsig := getSignature(baseString, consumerSecret+\"&\")\n\tform.Set(\"oauth_signature\", sig)\n    // if you're doing a GET request, then you wouldn't use the PostForm method\n\tresp, err := http.PostForm(uri, form)\n\tcheck(err)\n\tdefer resp.Body.Close()\n\tbody, _ := io.ReadAll(resp.Body)\n\tlog.Printf(\"%d\\n%s\", resp.StatusCode, body)\n}\nfunc getSignature(input, key string) string {\n\tkey_for_sign := []byte(key)\n\th := hmac.New(sha1.New, key_for_sign)\n\th.Write([]byte(input))\n\treturn base64.StdEncoding.EncodeToString(h.Sum(nil))\n}\nfunc check(err error) {\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78259501/can-anyone-suggest-some-way-to-mock-a-google-cloud-speech-v2-grpc-speech-client",
    "body": "package client\nimport (\n    \"context\"\n    \"testing\"\n    \"github.com/xhd2015/xgo/runtime/mock\"\n)\ntype mockClient struct {\n    *Client\n}\nfunc (c *mockClient) Recognize(ctx context.Context,req *speechpb.RecognizeRequest) (*speechpb.RecognizeResponse,error){\n     return &speechpb.RecognizeResponse{}, nil\n}\nfunc TestRecognize(t *testing.T){\n     ctx := context.TODO()\n     mock.Patch(GSTTClient, func() *Client {\n          return &mockClient{}\n     })\n     resp,err := Recognize(ctx, &speechpb.RecognizeRequest{ text:\"some text\"})\n     if err!=nil {\n         t.Fatal(err)\n     }\n     if resp!= \"some result\" {\n        t.Fatalf(\"expect result to be 'some result', actual: %s\",resp)\n     }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78159181/how-to-create-an-event-handler-which-can-access-to-structure-values",
    "body": "type Controller interface {\n\tHandle(value int)\n}\n// ************** Manager **************\ntype Manager struct {\n\tcontrollers []Controller\n}\nfunc NewManager() *Manager {\n\treturn &Manager{\n\t\tcontrollers: []Controller{},\n\t}\n}\nfunc (m *Manager) AddController(c Controller) {\n\tm.controllers = append(m.controllers, c)\n}\nfunc (m *Manager) Start() {\n\tgo func() {\n\t\ti := 0\n\t\tfor {\n\t\t\tfor _, controller := range m.controllers {\n\t\t\t\tcontroller.Handle(i)\n\t\t\t}\n\t\t\ti++\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}()\n}\n// ************** Controller 1 **************\ntype C1 struct {\n\tval int\n}\nfunc NewC1(val int) *C1 {\n\treturn &C1{\n\t\tval: val,\n\t}\n}\nfunc (c *C1) Handle(value int) {\n\tfmt.Printf(\"C1 with value: %d, handling: %d\\n\", c.val, value)\n}\n// ************** Controller 2 **************\ntype C2 struct {\n\tval string\n}\nfunc (c *C2) Handle(value int) {\n\tfmt.Printf(\"C2 with value: %s, handling: %d\\n\", c.val, value)\n}\nfunc NewC2(val string) *C2 {\n\treturn &C2{\n\t\tval: val,\n\t}\n}\nfunc main() {\n\tc1 := NewC1(10)\n\tc2 := NewC2(\"Hello\")\n\ta := NewManager()\n\ta.AddController(c1)\n\ta.AddController(c2)\n\ta.Start()\n\tfor {\n\t\tfmt.Printf(\"Main.run\\n\")\n\t\ttime.Sleep(time.Second)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78084823/unable-to-display-buttons-using-slack-go-actions",
    "body": "func handleIsArticleGood(command slack.SlashCommand, client *slack.Client) error {\n\tattachment := slack.Attachment{\n\t\tPretext:    \"pretext\",\n\t\tFallback:   \"We don't currently support your client\",\n\t\tCallbackID: \"accept_or_reject\",\n\t\tColor:      \"#3AA3E3\",\n\t\tActions: []slack.AttachmentAction{\n\t\t\tslack.AttachmentAction{\n\t\t\t\tName:  \"accept\",\n\t\t\t\tText:  \"Accept\",\n\t\t\t\tType:  \"button\",\n\t\t\t\tValue: \"accept\",\n\t\t\t},\n\t\t\tslack.AttachmentAction{\n\t\t\t\tName:  \"reject\",\n\t\t\t\tText:  \"Reject\",\n\t\t\t\tType:  \"button\",\n\t\t\t\tValue: \"reject\",\n\t\t\t\tStyle: \"danger\",\n\t\t\t},\n\t\t},\n\t}\n\t_, _, err := client.PostMessage(command.ChannelID, slack.MsgOptionAttachments(attachment))\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to post message: %w\", err)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78076900/kafka-consumer-not-pausing-when-needed",
    "body": "func main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tappConfig, err := mdmcore.GetConfigurations(\"./config/config.toml\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error getting configurations: %v\", err)\n\t}\n\ttopicConfiguration := item.ReadTopic(appConfig, someTopic, false) // false = will get reader configuration\n\tconsumer, err := adapter.SetupKafkaConsumer(ctx, topicConfiguration)\n\tif err != nil {\n\t\tlog.Fatalf(\"error creating Kafka consumer: %v\", err)\n\t}\n\tdefer consumer.Close()\n\tkafkaReader, err := adapter.NewKafkaAdapter(ctx, consumer, someTopic)\n\tif err != nil {\n\t\tlog.Fatalf(\"error creating Kafka adapter: %v\", err)\n\t}\n\trepo, err := bootstrap.NewRepositories(appConfig)\n\tif err != nil {\n\t\tlog.Fatalf(\"error creating a repository for my-topic flow: %v\", err)\n\t}\n\tdataManager := models.NewGormDataManager(repo.Db)\n\tmessageService := service.NewMessageService(kafkaReader, dataManager)\n\tsignalChannel := make(chan os.Signal, 1)\n\tsignal.Notify(signalChannel, os.Interrupt, syscall.SIGTERM)\n\tgo func() {\n\t\t<-signalChannel\n\t\tcancel()\n\t}()\n\tc := cron.New()\n\tc.AddFunc(\"59 23 * * *\", func() {\n\t\tmessageService.Subscribe(ctx, someTopic)\n\t})\n\tc.AddFunc(\"30 2 * * *\", func() {\n\t\tmessageService.Unsubscribe(ctx)\n\t})\n\tc.Start()\n\tmessageService.StartConsuming(ctx, someTopic)\n\t<-ctx.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78003733/can-i-use-surrogate-fields-in-bson",
    "body": "type geojson struct {\n\tType        string    `bson:\"type\"`\n\tCoordinates []float64 `bson:\"coordinates\"`\n}\nfunc (g Geolocation) MarshalBSON() ([]byte, error) {\n\tmarshalled, err := bson.Marshal(geojson{\"Point\", []float64{g.Longitude, g.Latitude}})\n\treturn marshalled, err\n}\nfunc (g *Geolocation) UnmarshalBSON(data []byte) error {\n\tunmarshalled := geojson{}\n\terr := bson.Unmarshal(data, &unmarshalled)\n\tif err != nil {\n\t\treturn err\n\t}\n\tg.Latitude = unmarshalled.Coordinates[1]\n\tg.Longitude = unmarshalled.Coordinates[0]\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77976594/how-to-fix-an-error-when-calling-the-getrawinputdeviceinfa-windows-api-function",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n// defining an imitation RAWINPUTDEVICELIST\ntype rawInputDeviceList struct {\n\tDeviceHandle uintptr\n\tType         uint32\n}\nconst RIDI_DEVICENAME uint32 = 0x20000007\nvar (\n\tuser32                     = syscall.NewLazyDLL(\"user32.dll\")\n\tgetRawInputDeviceListProc  = user32.NewProc(\"GetRawInputDeviceList\")\n\tgetRawInputDeviceInfoWProc = user32.NewProc(\"GetRawInputDeviceInfoW\")\n)\nfunc main() {\n\tlog.SetFlags(0)\n\tsize := uint32(unsafe.Sizeof(rawInputDeviceList{}))\n\tvar devCount uint32\n\tif err := getRawInputDeviceList(nil, &devCount, size); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif devCount == 0 {\n\t\tlog.Fatal(\"no devices\")\n\t}\n\tdevices := make([]rawInputDeviceList, devCount)\n\tif err := getRawInputDeviceList(&devices[0], &devCount, size); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tconst RIDI_DEVICENAME uint32 = 0x20000007\n\tfor di := range devices {\n\t\tvar devName [256]uint16\n\t\tsize := uint32(unsafe.Sizeof(devName))\n\t\tsizeOK, err := getRawInputDeviceInfo(\n\t\t\tdevices[di].DeviceHandle,\n\t\t\tRIDI_DEVICENAME,\n\t\t\tunsafe.Pointer(&devName[0]),\n\t\t\t&size,\n\t\t)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif !sizeOK {\n\t\t\tlog.Fatalf(\"insufficient size; want %d\\n\", size)\n\t\t}\n\t\tfmt.Println(syscall.UTF16ToString(devName[:size]))\n\t}\n}\nfunc getRawInputDeviceList(\n\trawInputDeviceList *rawInputDeviceList,\n\tnumDevices *uint32,\n\tsize uint32,\n) error {\n\tr1, _, err := getRawInputDeviceListProc.Call(\n\t\tuintptr(unsafe.Pointer(rawInputDeviceList)),\n\t\tuintptr(unsafe.Pointer(numDevices)),\n\t\tuintptr(size))\n\tif r1 == uintptr(^uint32(0)) {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc getRawInputDeviceInfo(\n\tdeviceHandle uintptr,\n\tuiCommand uint32,\n\tpData unsafe.Pointer,\n\tsize *uint32,\n) (bool, error) {\n\tr1, _, err := getRawInputDeviceInfoWProc.Call(\n\t\tuintptr(deviceHandle),\n\t\tuintptr(uiCommand),\n\t\tuintptr(pData),\n\t\tuintptr(unsafe.Pointer(size)))\n\tif err != syscall.Errno(0) {\n\t\treturn true, err\n\t}\n\treturn r1 > 0, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77961618/golang-pass-fiber-context-to-reqular-context-for-graphql",
    "body": "// FindValue enables support for values residing either directly in the given context or in the wrapped fiber UserValues hidden by the fiber Adaptor conversion.\nfunc FindValue(ctx context.Context, key any) (value any) {\n\tif value = ctx.Value(key); value == nil {\n\t\tvalue = getUserCtxFromFiberRequestCtx(ctx).Value(key)\n\t}\n\treturn value\n}\n// getUserCtxFromFiberRequestCtx allows to access util-server specific context values for contexts which come from the fiber Adaptor.\n// This method returns either the hidden user context in case it's a proper Adaptor, context or otherwise just the incoming adaptor.\nfunc getUserCtxFromFiberRequestCtx(ctx context.Context) (extracted context.Context) {\n\tif localUserCtx := ctx.Value(\"__local_user_context__\"); localUserCtx != nil {\n\t\tif localUsrCtxCast, ok := localUserCtx.(context.Context); ok {\n\t\t\treturn localUsrCtxCast\n\t\t}\n\t}\n\treturn ctx\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77959947/azblob-containerclient-undefiend-after-azblob-sdk-for-go-migrated-to-v1",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/url\"\n\t\"strings\"\n\t\"github.com/Azure/azure-storage-blob-go/azblob\"\n)\nfunc main() {\n\n\taccountName, accountKey := accountInfo()\n\n\tcredential, err := azblob.NewSharedKeyCredential(accountName, accountKey)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tu, _ := url.Parse(fmt.Sprintf(\"https://%s.blob.core.windows.net\", accountName))\n\n\tserviceURL := azblob.NewServiceURL(*u, azblob.NewPipeline(credential, azblob.PipelineOptions{}))\n\n\tctx := context.Background()\n\n\tcontainerURL := serviceURL.NewContainerURL(\"sampathpujari1\")\n\n\t_, err = containerURL.Create(ctx, azblob.Metadata{}, azblob.PublicAccessNone)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tblobURL := containerURL.NewBlockBlobURL(\"HelloWorld.txt\")\n\n\tdata := \"Hello World!\"\n\t_, err = blobURL.Upload(ctx, strings.NewReader(data), azblob.BlobHTTPHeaders{ContentType: \"text/plain\"}, azblob.Metadata{}, azblob.BlobAccessConditions{}, azblob.DefaultAccessTier, nil, azblob.ClientProvidedKeyOptions{}, azblob.ImmutabilityPolicyOptions{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tget, err := blobURL.Download(ctx, 0, azblob.CountToEnd, azblob.BlobAccessConditions{}, false, azblob.ClientProvidedKeyOptions{})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar downloadedData strings.Builder\n\t_, err = io.Copy(&downloadedData, get.Body(azblob.RetryReaderOptions{}))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif data != downloadedData.String() {\n\t\tlog.Fatal(\"downloaded data doesn't match uploaded data\")\n\t}\n\n\tfor marker := (azblob.Marker{}); marker.NotDone(); {\n\n\t\tlistBlob, err := containerURL.ListBlobsFlatSegment(ctx, marker, azblob.ListBlobsSegmentOptions{})\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tmarker = listBlob.NextMarker\n\n\t\tfor _, blobInfo := range listBlob.Segment.BlobItems {\n\t\t\tfmt.Println(\"Blob name: \" + blobInfo.Name)\n\t\t}\n\t}\n\t// Delete the blob we created earlier.\n\t//_, err = blobURL.Delete(ctx, azblob.DeleteSnapshotsOptionNone, azblob.BlobAccessConditions{})\n\t//if err != nil {\n\t//log.Fatal(err)\n\t//}\n\t// Delete the container we created earlier.\n\t//_, err = containerURL.Delete(ctx, azblob.ContainerAccessConditions{})\n\t//if err != nil {\n\t//log.Fatal(err)\n\t//}\n}\nfunc accountInfo() (string, string) {\n\t// Replace with your actual storage account name and key\n\treturn \"your-storage-account-name\", \"your-storage-account-key\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77957416/pass-common-data-to-html-templates-using-gin-middleware-golang",
    "body": "func CategoriesMiddleware() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        categories := db.GetCategories()\n        c.Set(\"categories\", categories)\n        c.Next()\n    }\n}\nfunc main() {\n    r := gin.Default()\n    // Use the middleware for all routes\n    r.Use(CategoriesMiddleware())\n    r.GET(\"/\", func(c *gin.Context) {\n        // Access categories from context\n        categories := c.MustGet(\"categories\").([]string)\n        // Render your template\n        c.HTML(200, \"page.html\", gin.H{\"categories\": categories})\n    })\n    r.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77859616/application-insights-sdk-for-go-is-not-sending-availability-test-results",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/microsoft/ApplicationInsights-Go/appinsights\"\n\t\"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts\"\n\t\"time\"\n)\nfunc main() {\n\t// Initialize Application Insights client\n\tappInsClient := appinsights.NewTelemetryClient(\"YOUR_INSTRUMENTATION_KEY\")\n\t// Run some operations or generate telemetry items\n\tfor i := 1; i <= 5; i++ {\n\t\t// Simulate some telemetry\n\t\ttelemetryItem := contracts.NewTraceTelemetry(fmt.Sprintf(\"Telemetry message %d\", i))\n\t\tappInsClient.Track(telemetryItem)\n\t}\n\t// Flush the telemetry channel\n\tappInsClient.Channel.Flush()\n\t// Introduce a short delay (e.g., 1 second) before closing\n\ttime.Sleep(1 * time.Second)\n\t// Close the telemetry channel\n\tcloseTimeout := 5 * time.Second\n\tresultChannel := appInsClient.Channel.Close(closeTimeout)\n\t// Wait for the result channel to be closed\n\tselect {\n\tcase <-resultChannel:\n\t\tfmt.Println(\"Telemetry items sent successfully.\")\n\tcase <-time.After(closeTimeout):\n\t\tfmt.Println(\"Timeout: Telemetry items may not have been sent.\")\n\t}\n\t// Optionally, add a sleep to ensure the telemetry is sent before exiting\n\ttime.Sleep(2 * time.Second)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77823566/how-to-merge-go-templates-without-render",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"text/template\"\n\t\"text/template/parse\"\n)\nconst t1Text = `instance_db_address: {{ .MYSQL_ADDRESS }}\ninstance_db_port: {{ .MYSQL_PORT }}\nimagePullSecrets: {{ .IMAGE_PULL_SECRET }}\nresources:\n  requests:\n    memory: \"1Gi\"\n    cpu: \"512m\"\n  limits:\n    memory: \"1Gi\"\n    cpu: \"1000m\"\n`\nconst t2Text = `instance_db_address: {{ .MYSQL_ADDRESS2 }}\ninstance_db_port: {{ .MYSQL_PORT2 }}\n`\nfunc merge(dst, src *template.Template) error {\n\tdstNodes := dst.Tree.Root.Nodes\n\ta1, p1, err := findAddrAndPortNodes(dstNodes)\n\tif err != nil {\n\t\treturn err\n\t}\n\tsrcNodes := src.Tree.Root.Nodes\n\ta2, p2, err := findAddrAndPortNodes(srcNodes)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdstNodes[a1] = srcNodes[a2]\n\tdstNodes[p1] = srcNodes[p2]\n\treturn nil\n}\nfunc findAddrAndPortNodes(nodes []parse.Node) (\n\taddrIndex int, portIndex int, err error) {\n\ttype curNode struct {\n\t\ttext         string\n\t\tnodeIndexPtr *int\n\t}\n\tconst (\n\t\tmodeText = iota\n\t\tmodeAction\n\t)\n\ttoLocate := map[string]*int{\n\t\t\"instance_db_address:\": &addrIndex,\n\t\t\"instance_db_port:\":    &portIndex,\n\t}\n\tvar cur curNode\n\tmode := modeText\nNODE_LOOP:\n\tfor ix, n := range nodes {\n\t\tswitch mode {\n\t\tcase modeText:\n\t\t\ttn, ok := n.(*parse.TextNode)\n\t\t\tif !ok {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tnodeText := strings.TrimSpace(string(tn.Text))\n\t\t\tfor text, dst := range toLocate {\n\t\t\t\tif nodeText != text {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tcur.text = text\n\t\t\t\tcur.nodeIndexPtr = dst\n\t\t\t\tmode = modeAction\n\t\t\t\tcontinue NODE_LOOP\n\t\t\t}\n\t\tcase modeAction:\n\t\t\t_, ok := n.(*parse.ActionNode)\n\t\t\tif !ok {\n\t\t\t\treturn 0, 0, fmt.Errorf(\n\t\t\t\t\t\"unexpected node type: %T for %q\", n, cur.text)\n\t\t\t}\n\t\t\t*cur.nodeIndexPtr = ix\n\t\t\tdelete(toLocate, cur.text)\n\t\t\tif len(toLocate) == 0 {\n\t\t\t\tbreak NODE_LOOP\n\t\t\t}\n\t\t\tmode = modeText\n\t\t\tcontinue\n\t\t}\n\t}\n\tif len(toLocate) != 0 {\n\t\treturn 0, 0, errors.New(\"failed to locate all nodes\")\n\t}\n\treturn\n}\nfunc main() {\n\tt1 := template.New(\"v1\")\n\tt1, err := t1.Parse(t1Text)\n\tif err != nil {\n\t\tlog.Fatalln(\"failed to parse 1st template:\", err)\n\t}\n\tt2 := template.New(\"v2\")\n\tt2, err = t2.Parse(t2Text)\n\tif err != nil {\n\t\tlog.Fatalln(\"failed to parse 2nd template:\", err)\n\t}\n\tctx := map[string]string{\n\t\t\"IMAGE_PULL_SECRET\": \"whatever\",\n\t\t\"MYSQL_ADDRESS\":     \"orig_addr\",\n\t\t\"MYSQL_PORT\":        \"orig_port\",\n\t\t\"MYSQL_ADDRESS2\":    \"new_addr\",\n\t\t\"MYSQL_PORT2\":       \"new_port\",\n\t}\n\terr = t1.Execute(os.Stdout, ctx)\n\tif err != nil {\n\t\tlog.Fatalln(\"failed to execute 1st template:\", err)\n\t}\n\tfmt.Println(strings.Repeat(\"-\", 80))\n\terr = merge(t1, t2)\n\tif err != nil {\n\t\tlog.Fatalln(\"failed to merge:\", err)\n\t}\n\terr = t1.Execute(os.Stdout, ctx)\n\tif err != nil {\n\t\tlog.Fatal(\"failed to execute modified template:\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77823566/how-to-merge-go-templates-without-render",
    "body": "func FormatAppValueYaml(s string) (map[string]interface{}, error) {\n\tvar builder bytes.Buffer\n\tfor _, v := range s {\n\t\tif SpecialChar(v) {\n\t\t\tbuilder.WriteRune('\\\\')\n\t\t}\n\t\tbuilder.WriteRune(v)\n\t}\n\tmp := make(map[string]interface{})\n\terr := yaml.Unmarshal(builder.Bytes(), &mp)\n\treturn mp, err\n}\nfunc ResetAppValuesYaml(s string) string {\n\tvar builder strings.Builder\n\tl := len(s)\n\tfor i := 0; i < l; i++ {\n\t\tif i+1 < l && s[i] == '\\\\' && SpecialChar(rune(s[i+1])) {\n\t\t\tcontinue\n\t\t}\n\t\tbuilder.WriteRune(rune(s[i]))\n\t}\n\treturn builder.String()\n}\nfunc SpecialChar(c rune) bool {\n\treturn c == '\\'' || c == '\"' || c == '{' || c == '}' || c == '[' || c == ']'\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77811326/aws-account-api-listregions-function-requires-region-to-be-set-in-the-session",
    "body": "2024-01-14 09:35:40,990 - MainThread - botocore.credentials - DEBUG - Looking for credentials via: env\n2024-01-14 09:35:40,991 - MainThread - botocore.credentials - INFO - Found credentials in environment variables.\n2024-01-14 09:35:40,993 - MainThread - botocore.loaders - DEBUG - Loading JSON file: /usr/local/aws-cli/v2/2.15.10/dist/awscli/botocore/data/endpoints.json\n2024-01-14 09:35:41,026 - MainThread - botocore.hooks - DEBUG - Event choose-service-name: calling handler <function handle_service_name_alias at 0x7f5fe5f76160>\n2024-01-14 09:35:41,061 - MainThread - botocore.loaders - DEBUG - Loading JSON file: /usr/local/aws-cli/v2/2.15.10/dist/awscli/botocore/data/account/2021-02-01/endpoint-rule-set-1.json\n2024-01-14 09:35:41,062 - MainThread - botocore.loaders - DEBUG - Loading JSON file: /usr/local/aws-cli/v2/2.15.10/dist/awscli/botocore/data/partitions.json\n2024-01-14 09:35:41,063 - MainThread - botocore.hooks - DEBUG - Event creating-client-class.account: calling handler <function add_generate_presigned_url at 0x7f5fe63c0180>\n2024-01-14 09:35:41,074 - MainThread - botocore.configprovider - DEBUG - Looking for endpoint for account via: environment_service\n2024-01-14 09:35:41,074 - MainThread - botocore.configprovider - DEBUG - Looking for endpoint for account via: environment_global\n2024-01-14 09:35:41,074 - MainThread - botocore.configprovider - DEBUG - Looking for endpoint for account via: config_service\n2024-01-14 09:35:41,074 - MainThread - botocore.configprovider - DEBUG - Looking for endpoint for account via: config_global\n2024-01-14 09:35:41,074 - MainThread - botocore.configprovider - DEBUG - No configured endpoint found.\n2024-01-14 09:35:41,076 - MainThread - botocore.endpoint - DEBUG - Setting account timeout as (60, 60)\n2024-01-14 09:35:41,088 - MainThread - botocore.regions - DEBUG - Calling endpoint provider with parameters: {'Region': 'aws-global', 'UseDualStack': False, 'UseFIPS': False}\n2024-01-14 09:35:41,089 - MainThread - botocore.regions - DEBUG - Endpoint provider result: https://account.us-east-1.amazonaws.com"
  },
  {
    "url": "https://stackoverflow.com/questions/77798587/what-can-i-to-cancel-the-gorm-where",
    "body": "// Original query\nquery := resources.DB.Where(\"alarm_log.data_time >= ? and alarm_log.data_time < ? and alarm_policy.id = ? \", timeRangeInfo.StartTimeFormat, timeRangeInfo.EndTimeFormat, input.PolicyId)\nif input.ObjectIds != nil && len(input.ObjectIds) != 0 {\n    query = query.Where(\"object.id in ?\", input.ObjectIds)\n}\n// Create a copy of the original query\nsql := query\n// Main query execution\nif err := sql.Where(searchQuery).\n    Limit(input.PageSize).\n    Offset((input.Current - 1) * input.PageSize).\n    Find(&list).Error; err != nil && !errorx.Is(err, gorm.ErrRecordNotFound) {\n    return nil, errors.WithMessagef(err, \"Alarm_log_list's alarm_policy get list error\")\n}\n// Count query with 'label = '1''\nif err := query.Where(\"alarm_log.label = '1'\").Limit(-1).Offset(-1).Count(&effectiveNum).Error; err != nil {\n    return nil, errors.WithMessagef(err, \"Alarm_log_list's alarm_policy get  effectiveNum count error\")\n}\n// Count query with 'label = '0''\nif err := sql.Where(\"alarm_log.label = '0'\").Limit(-1).Offset(-1).Count(&uneffectiveNum).Error; err != nil {\n    return nil, errors.WithMessagef(err, \"Alarm_log_list's alarm_policy get  uneffectiveNum count error\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77797725/save-files-on-golang-server-from-client-through-websocket",
    "body": "conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\nif err != nil {\n    fmt.Println(\"Error upgrading to WebSocket:\", err)\n    return\n}\ndefer conn.Close()\nfor i := 0; i < len(questionaires); i++ {\n    questionaire := questionaires[i].msg\n    if i == 0 {\n        // send initial message to frontend\n        sendServerMessageToClient(conn, questionaire)\n    }\n    messageType, msg, err := conn.ReadMessage()\n    if err != nil || err == io.EOF {\n        break\n    }\n    response := \"\"\n    if messageType == websocket.BinaryMessage {\n        // Save file only if it's a binary message\n        fileName := fmt.Sprintf(\"answer%d.wav\", i)\n        file, err := os.Create(fileName)\n        if err != nil {\n            fmt.Println(err)\n        }\n        _, err = file.Write(msg)\n        if err != nil {\n            fmt.Println(err)\n        }\n        // Close the file after writing\n        file.Close()\n        // Handle the saved file and call the speech-to-text API\n        // ...\n        response = \"yes\" // Assume the response is \"yes\"\n    }\n    switch response {\n    case \"yes\":\n        if i+1 < len(questionaires) {\n            sendServerMessageToClient(conn, questionaires[i+1].msg)\n        } else {\n            sendServerMessageToClient(conn, \"end\")\n            return\n        }\n    case \"no\":\n        sendServerMessage(conn, \"Exiting\")\n        return\n    default:\n        // Handle other cases if needed\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77797725/save-files-on-golang-server-from-client-through-websocket",
    "body": "conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)\nif err != nil {\n    fmt.Println(\"Error upgrading to WebSocket:\", err)\n    return\n}\ndefer conn.Close()\nfor i := 0; ; i++ {\n    questionaire:= questionaires[i].msg //a couple of questions to be sent to client\n    if i == 0 {\n        // send initial message to frontend\n        sendServerMessageToClient(conn, questionaire)\n    } else {\n        messageType, msg, err := conn.ReadMessage()\n        if err != nil || err == io.EOF {\n            fmt.Println(err) // this line here logs the websocket error\n            break\n        }\n        response = \"\"\n        if messageType == websocket.BinaryMessage {\n            // if this blocks of code here is removed, it works, otherwise restarts the websocket connection\n            go FileSaveFunc(i)\n            // til here\n           // handle the saved file and call to speech to text api\n\n           response = \"yes\" //assumed the response is \"yes\"\n        }\n        switch response {\n        case \"yes\":\n            if i < len(questionaires) {\n                sendServerMessageToClient(conn, questionaire)\n            } else {\n                sendServerMessageToClient(conn, \"end\")\n                return\n            }\n        case \"no\":\n            sendServerMessage(conn, \"Exiting\")\n            return\n        default:\n            i--\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77772264/golang-unable-to-send-the-email-with-attachment",
    "body": "m := mail.NewMessage()\n\tm.SetHeader(\"From\", emailDetails.From)\n\tm.SetHeader(\"To\", emailDetails.To...)\n\tm.SetHeader(\"Subject\", emailDetails.Subject)\n\tif emailDetails.BodyHTML != \"\" {\n\t\tm.SetBody(\"text/html\", emailDetails.BodyHTML)\n\t} else {\n\t\tm.SetBody(\"text/plain\", emailDetails.BodyPlain)\n\t}\n\tif emailDetails.AttachmentName != \"\" && len(emailDetails.AttachmentData) > 0 {\n\t\tm.Attach(emailDetails.AttachmentName, mail.SetCopyFunc(func(writer io.Writer) error {\n\t\t\t_, err := writer.Write(emailDetails.AttachmentData)\n\t\t\treturn err\n\t\t}))\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/77726613/golang-text-template-sequence-range",
    "body": "package main\nimport (\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\nconst tplDef = `\n        {{ range $index, $val := .MyList }}\n        <tr>\n            <td>{{ $index | incr }}</td>\n            <td>{{ $val.Name }}</td>\n        </tr>\n        {{ end }}\n`\nfunc main() {\n\ttpl := template.New(\"index\")\n\ttpl.Funcs(map[string]interface{}{\n\t\t\"incr\": func(i int) int {\n\t\t\treturn i + 1\n\t\t},\n\t})\n\t_, err := tpl.Parse(tplDef)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttype T struct {\n\t\tName string\n\t}\n\ttype Whatever struct {\n\t\tMyList []T\n\t}\n\tw := Whatever{\n\t\tMyList: []T{\n\t\t\t{Name: \"foo\"},\n\t\t\t{Name: \"bar\"},\n\t\t\t{Name: \"baz\"},\n\t\t},\n\t}\n\terr = tpl.Execute(os.Stdout, w)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77720223/how-to-set-priority-of-a-processthat-gets-inherited-by-os-threads-in-golang-fo",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"syscall\"\n)\nfunc main() {\n\tpid := os.Getpid()\n\tfmt.Printf(\"Current Process ID: %d\\n\", pid)\n\tprio, err := syscall.Getpriority(syscall.PRIO_PROCESS, pid)\n\tif err != nil {\n\t\tfmt.Println(\"Error getting process priority:\", err)\n\t}\n\tfmt.Println(\"Original priority:\", prio)\n\tif err := syscall.Setpriority(syscall.PRIO_PROCESS, pid, 10); err != nil {\n\t\tfmt.Println(\"Error setting process priority:\", err)\n\t}\n\tprio, err = syscall.Getpriority(syscall.PRIO_PROCESS, pid)\n\tif err != nil {\n\t\tfmt.Println(\"Error getting process priority:\", err)\n\t}\n\tfmt.Println(\"New priority:\", prio)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77695559/how-to-organize-parallel-processing-excluding-tasks-with-the-same-tag",
    "body": "package main\nimport (\n\t\"sync\"\n\t\"log\"\n)\ntype Route[T any] struct {\n\tInput  chan []T\n\tOutput chan T\n\tWorker func(<-chan T, *sync.WaitGroup)\n}\nfunc (r *Route[T]) Accept(wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor inputs := range r.Input {\n\t\tfor _, input := range inputs {\n\t\t\tr.Output <- input\n\t\t}\n\t}\n\tclose(r.Output)\n}\nfunc (cr *Route[T]) enqueue(messages []T, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tcr.Input <- messages\n}\nfunc (r *Route[T]) Start(wg *sync.WaitGroup) *Route[T] {\n\twg.Add(2)\n\tgo r.Accept(wg)\n\tgo r.Worker(r.Output, wg)\n\treturn r\n}\nfunc (r *Route[T]) Close() {\n\tclose(r.Input)\n}\ntype Router[T any] struct {\n\tsync.Mutex\n\troutes map[string]*Route[T]\n\twg     sync.WaitGroup\n\trouters_wg sync.WaitGroup\n\troutemaker func(tag string)*Route[T]\n}\nfunc (cr *Router[_]) Close() {\n\tfor _, r := range cr.routes {\n\t\tr.Close()\n\t}\n}\nfunc (cr *Router[_]) Wait() {\n\tcr.routers_wg.Wait()\n\tcr.wg.Wait()\n}\nfunc (cr *Router[T]) Route(tag string, messages []T, wg *sync.WaitGroup) {\n\tcr.Lock()\n\tdefer cr.Unlock()\n\tfor m, r := range cr.routes {\n\t\tif m == tag {\n\t\t\tgo r.enqueue(messages, wg)\n\t\t\treturn\n\t\t}\n\t}\n\tnew_route := cr.routemaker(tag).Start(&cr.routers_wg)\n\tcr.routes[tag] = new_route\n\tgo new_route.enqueue(messages, wg)\n}\ntype worker[T any] interface {\n\tWork(<-chan T)\n}\ntype collateWork[T any] struct {\n\twork []T\n\ttag string\n}\nfunc (cw *collateWork[T]) Work(c <-chan T, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor w := range c {\n\t\tcw.work = append(cw.work, w)\n\t}\n\tlog.Printf(\"Worker '%s' collation: %v\", cw.tag, cw.work)\n}\nfunc main() {\n\tvar routes = Router[int]{\n\t\troutes: make(map[string]*Route[int]),\n\t\troutemaker: func(tag string) *Route[int] {\n\t\t\treturn &Route[int]{\n\t\t\t\tInput:  make(chan []int, 30),\n\t\t\t\tOutput: make(chan int, 30),\n\t\t\t\tWorker: (&collateWork[int]{tag: tag}).Work,\n\t\t\t}\n\t\t},\n\t}\n\tvar router_waits sync.WaitGroup\n\trouter_waits.Add(6)\n\tgo routes.Route(\"a\", []int{1, 2, 3, 4, 5, 6, 7}, &router_waits)\n\tgo routes.Route(\"b\", []int{10, 20, 30, 40, 50, 60, 70}, &router_waits)\n\tgo routes.Route(\"a\", []int{8, 9, 10, 11, 12, 13, 14, 15}, &router_waits)\n\tgo routes.Route(\"b\", []int{100, 200, 300, 400, 500, 600, 700}, &router_waits)\n\tgo routes.Route(\"c\", []int{1000, 2000, 3000, 4000, 5000, 6000, 7000}, &router_waits)\n\tgo routes.Route(\"c\", []int{8000, 9000 }, &router_waits)\n\trouter_waits.Wait()\n\troutes.Close()\n\troutes.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77681390/empty-server-response-from-restful-docker-service",
    "body": "services:\n  go_container:\n    container_name: go_container\n    environment:\n      - DATABASE_USER=${DATABASE_USER}\n      - DATABASE_PASSWORD=${DATABASE_PASSWORD}\n      - DATABASE_NAME=${DATABASE_NAME}\n      - DATABASE_HOST=${DATABASE_HOST}\n      - DATABASE_PORT=${DATABASE_PORT}\n      - API_KEY=${API_KEY}\n    build: .\n    ports:\n     - 8080:8080\n    volumes:\n      - .:/src\n    command: go run cmd/app/main.go -b 0.0.0.0\n    depends_on:\n      postgres_container:\n        condition: service_healthy\n    restart: on-failure\n    tty: true\n    networks:\n      - weather\n  postgres_container:\n    container_name: postgres_container\n    user: postgres\n    image: postgres:latest\n    restart: always\n    environment:\n      - POSTGRES_USER=${DATABASE_USER}\n      - POSTGRES_DB=${DATABASE_NAME}\n      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}\n    ports:\n      - 5432:5432\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./sql/create.sql:/docker-entrypoint-initdb.d/create.sql\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready\", \"-U\", \"${DATABASE_USER}\"]\n    networks:\n      - weather\nvolumes:\n  db_data: {}\nnetworks:\n  weather:\n    driver: bridge"
  },
  {
    "url": "https://stackoverflow.com/questions/77628733/golang-filter-protobuf-struct-fields-by-fieldmask",
    "body": "package main\nimport (\n\tstructpb \"github.com/golang/protobuf/ptypes/struct\"\n\t\"github.com/mennanov/fmutils\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nfunc main() {\n\tjsonString := `{\n                        \"field_a\": true,\n                        \"field_b\": {\n                            \"sub_field_b\": 99\n                        }\n                    }`\n\tmyPbStruct := &structpb.Struct{}\n\tprotojson.Unmarshal([]byte(jsonString), myPbStruct)\n\tfmutils.Filter(myPbStruct, []string{\"fields.field_a\"})\n\t// myPbStruct retains only 'field_a' after this step\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77600825/accessing-updated-request-in-wrapped-middleware",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n)\n// Details here: https://cs.opensource.google/go/go/+/refs/tags/go1.21.4:src/context/context.go;l=140-147\ntype key int\nvar logInfoKey key\n// You'd likely want this struct + context functions in a separate package\n// to avoid later import cycles\ntype LogInfo struct {\n\tAuth   *Auth\n\tMethod string\n\tPath   string\n}\ntype Auth struct {\n\tFoo string\n}\nfunc NewContext(ctx context.Context, info *LogInfo) context.Context {\n\treturn context.WithValue(ctx, logInfoKey, info)\n}\nfunc FromContext(ctx context.Context) (*LogInfo, bool) {\n\tu, ok := ctx.Value(logInfoKey).(*LogInfo)\n\treturn u, ok\n}\nfunc main() {\n\tctx := context.Background()\n\tli := &LogInfo{Method: \"GET\", Path: \"/\"}\n\tlog.Printf(\"--> %s %s\", li.Method, li.Path)\n\tctx = NewContext(ctx, li)\n\tdownstream(ctx)\n\tlog.Printf(\"--> Auth: %s\", li.Auth.Foo)\n}\nfunc downstream(ctx context.Context) {\n\tli, ok := FromContext(ctx)\n\tif ok {\n\t\tli.Auth = &Auth{Foo: \"bar\"}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77600825/accessing-updated-request-in-wrapped-middleware",
    "body": "func main() {\n\tctx := context.Background()\n\t// Assuming you have a 'logging' package that either returns the current\n\t// logger or creates and returns a new one\n\tlog := logging.FromContext(ctx)\n\tlog = log.With(\n\t\tzap.String(\"method\", \"GET\"),\n\t\tzap.String(\"path\", \"/\"),\n\t)\n\tlog.Info(\"received request\")\n\tctx = logging.NewContext(ctx, log)\n\tdownstream(ctx)\n}\nfunc downstream(ctx context.Context) {\n\t// No need for conditional checking in downstream callers - if the logger\n\t// was never set upstream we'll get a fresh one here\n\tlog := logging.FromContext(ctx)\n\tlog = log.With(zap.String(\"auth_name\", \"foo\"))\n\tlog.Info(\"user logged in\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77575468/how-can-i-authenticate-to-gcp-using-a-service-account-key-that-was-uploaded-not",
    "body": "{\n    \"type\": \"service_account\",\n    \"project_id\": \"my-project\",\n    \"private_key_id\": \"<the key ID returned by the upload api (last parameter of the 'name' uri)>\",\n    \"private_key\": \"<Your generated private_key.pem>\",\n    \"client_email\": \"<service account email>\",\n    \"client_id\": \"<oauth2ClientId found with this command  gcloud iam service-accounts describe <service account email>>\",\n    \"auth_uri\": \"<let it unchanged>\",\n    \"token_uri\": \"<let it unchanged>\",\n    \"auth_provider_x509_cert_url\": \"<let it unchanged>\",\n    \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/ + <service account email with @ replaced by %40>\",\n    \"universe_domain\": \"googleapis.com\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77485705/golang-elasticsearch-typedclient-aggregation-how-to-loop-over-results",
    "body": "func GetServices(env string) (Services, error) {\n    var result Services\n    var err error\n    es, err := elasticsearch.NewTypedClient(cfg)\n    if err != nil {\n        return Services{}, fmt.Errorf(\"error creating the client: %s\", err)\n    }\n    res, err := es.Search().\n        Index(env).\n        Aggregations(map[string]types.Aggregations{\n            \"services\": {\n                Terms: &types.TermsAggregation{\n                    Field: some.String(\"serviceName.keyword\"),\n                },\n            },\n        }).\n        Size(0).\n        Do(context.Background())\n    if err != nil {\n        return Services{}, fmt.Errorf(\"error runnning search query: %s\", err)\n    }\n    aggregation := res.Aggregations[\"services\"]\n    servicesAgg, ok := aggregation.(*types.StringTermsAggregate)\n\tif !ok {\n\t\treturn nil, errors.New(\"incorrect aggregation type\")\n\t}\n\n    buckets, ok := servicesAgg.Bucket([]types.StringTermsBucket)\n\tif !ok {\n\t\treturn nil, errors.New(\"incorrect aggregation buckets type\")\n\t}\n    for _, bucket := range buckets {\n    \tkey, ok := item.Key.(string)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n      // Do something with key\n    }\n    return result, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77477785/how-to-config-public-route-and-auth-route-in-grpc-gateway",
    "body": "// run starts the HTTP server and sets up a custom gRPC-gateway route.\n// It registers the gRPC server endpoint and a custom POST route (\"/auth\").\nfunc run() error {\n\t// Create a background context and cancel function for graceful shutdown\n\tctx := context.Background()\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\t// Create a gRPC-gateway multiplexer\n\tmux := runtime.NewServeMux()\n\t// Register gRPC server endpoint with insecure transport credentials\n\topts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}\n\terr := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux, *grpcServerEndpoint, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Handle custom POST route (\"/auth\")\n\terr = mux.HandlePath(\"POST\", \"/auth\", func(w http.ResponseWriter, r *http.Request, pathParams map[string]string) {\n\t\t// Create a map with the desired data\n\t\tresponseData := map[string]string{\n\t\t\t\"data\": \"something\",\n\t\t}\n\t\t// Convert the map to a JSON string\n\t\tresp, err := json.Marshal(responseData)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error encoding JSON\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\t// Set the Content-Type header to application/json\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t// Write the JSON response to the response writer\n\t\tw.Write(resp)\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Start HTTP server (and proxy calls to gRPC server endpoint)\n\treturn http.ListenAndServe(\":8081\", mux)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77472282/how-can-i-change-the-response-code-of-an-http-request-using-middleware",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"net/http\"\n\t\"strings\"\n\t\"github.com/go-chi/chi/v5\"\n)\ntype CustomResponseWriter struct {\n\thttp.ResponseWriter\n\tBuf                *bytes.Buffer\n\tOriginalStatusCode int\n\tWroteHeader        bool\n\talways200          bool\n}\nfunc NewCustomResponseWriter(w http.ResponseWriter, always200 bool) *CustomResponseWriter {\n\treturn &CustomResponseWriter{\n\t\tResponseWriter: w,\n\t\tBuf:            new(bytes.Buffer),\n\t\talways200:      always200,\n\t}\n}\nfunc (c *CustomResponseWriter) WriteHeader(code int) {\n\tc.OriginalStatusCode = code\n\tif c.always200 {\n\t\tcode = http.StatusOK\n\t}\n\tc.ResponseWriter.WriteHeader(code)\n}\nfunc (c *CustomResponseWriter) Write(b []byte) (int, error) {\n\treturn c.Buf.Write(b)\n}\nfunc HeaderFilterMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\talways200 := r.URL.Query().Get(\"_always200\")\n\t\tcrw := NewCustomResponseWriter(w, strings.EqualFold(always200, \"true\"))\n\t\tnext.ServeHTTP(crw, r)\n\t})\n}\nfunc main() {\n\tr := chi.NewRouter()\n\tr.Use(HeaderFilterMiddleware)\n\tr.Get(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"welcome\"))\n\t})\n\thttp.ListenAndServe(\":3000\", r)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77464151/optional-extra-info-in-golang-model",
    "body": "package main\nimport \"fmt\"\ntype Wall struct {\n\tSize      int\n\tStructure string\n}\ntype Category[Spec any] struct {\n\tID       uint\n\tTitle    string\n\tProducts []*Product[Spec]\n}\nfunc (s Category[Spec]) Dump() {\n\tfmt.Printf(\"%+v\\n(\", s)\n\tfor id := range s.Products {\n\t\ts.Products[id].Dump()\n\t}\n}\ntype Product[Spec any] struct {\n\tID         uint\n\tName       string\n\tCategoryID uint\n\tDocuments  []*Document[Spec]\n}\nfunc (p Product[Spec]) Dump() {\n\tfmt.Printf(\"%+v\\n(\", p)\n\tfor id := range p.Documents {\n\t\tfmt.Printf(\"%+v\\n(\", p.Documents[id])\n\t}\n}\ntype Document[Spec any] struct {\n\tSpec      Spec\n\tID        uint\n\tTitle     string\n\tMimeType  string\n\tUrl       string\n\tProductID uint\n}\nfunc main() {\n\twall := Category[Wall]{\n\t\tID:    1,\n\t\tTitle: \"a\",\n\t\tProducts: []*Product[Wall]{{\n\t\t\tID:         1,\n\t\t\tName:       \"b\",\n\t\t\tCategoryID: 1,\n\t\t\tDocuments: []*Document[Wall]{{\n\t\t\t\tSpec: Wall{\n\t\t\t\t\tSize:      12,\n\t\t\t\t\tStructure: \"c\",\n\t\t\t\t},\n\t\t\t\tID:        1,\n\t\t\t\tTitle:     \"d\",\n\t\t\t\tMimeType:  \"e\",\n\t\t\t\tUrl:       \"https://f.com\",\n\t\t\t\tProductID: 1,\n\t\t\t}},\n\t\t}},\n\t}\n\twall.Dump()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77456039/error-getting-the-body-with-middleware-in-golang",
    "body": "func Persons(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"entering persons end point\")\n    // Reset the request body so it can be read again\n    rawRequestBody, err := ioutil.ReadAll(r.Body)\n    if err != nil {\n        http.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n        return\n    }\n    r.Body = ioutil.NopCloser(bytes.NewBuffer(rawRequestBody))\n    var requestBody RequestBody\n    err = json.NewDecoder(r.Body).Decode(&requestBody)\n    if err != nil {\n        http.Error(w, \"Error decoding the request body\", http.StatusBadRequest)\n        return\n    }\n    fmt.Printf(\"Cuerpo de la petición: %+v\\n\", requestBody)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77452299/how-set-a-go-function-as-a-callback-function-to-net-aot",
    "body": "package main\n/*\nextern int sum(int, int);\n//static inline void CallMyFunction(int a, int b) {\n//    sum(a, b);\n//}\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"reflect\"\n    \"syscall\"\n    \"unsafe\"\n)\n// Export sum\nfunc sum(a, b C.int) C.int {\n    res := a + b\n    fmt.Println(a, \"+\", b , \"=\", res )\n    return res\n}\nfunc main() {\n    fmt.Println(\"Hello, Go C#\")\n    var input string\n    fmt.Scanln(&input)\n    fmt.Println(input)\n    //C.CallMyFunction(3, 4)\n    var aValue int32 = int32(3)\n    var bValue int32 = int32(4)\n    var a uintptr = uintptr(aValue)\n    var b uintptr = uintptr(bValue)\n    f := C.sum\n    ptrValue := reflect.ValueOf(f)\n    ptr := unsafe.Pointer(ptrValue.Pointer())\n    addr := uintptr(ptr)\n    fmt.Printf(\"Func Addr: %v\\n\", addr)\n    maindll := syscall.NewLazyDLL(\"CSharp_Go.dll\")\n    //maindll := syscall.NewLazyDLL(\"Cpp_Go.dll\")\n    setAddFunc := maindll.NewProc(\"SetAddFunc\")\n    add := maindll.NewProc(\"Add\")\n    r1, r2, err := setAddFunc.Call(addr)\n    fmt.Println(r1, r2, err)\n    r1, r2, err = add.Call(a, b)\n    fmt.Println(r1, r2, err)\n    fmt.Scanln(&input)\n    fmt.Println(input)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77405271/golang-gorm-and-gin-unable-to-create-object-with-association",
    "body": "{\"data\":{\"ID\":1,\"CreatedAt\":\"2023-11-02T13:37:24.052228+08:00\",\"UpdatedAt\":\"2023-11-02T13:37:24.052228+08:00\",\"DeletedAt\":null,\"name\":\"airplane simulation\",\"description\":\"airplane simulation for everybody, childrens to adults.\",\"pricemounth\":{\"ID\":1,\"CreatedAt\":\"2023-11-02T13:37:24.054792+08:00\",\"UpdatedAt\":\"2023-11-02T13:37:24.054792+08:00\",\"DeletedAt\":null,\"price\":4.99,\"description\":\"pay for a mounth to access on irplane simulation for everybody, childrens to adults.\"},\"priceyear\":{\"ID\":1,\"CreatedAt\":\"2023-11-02T13:37:24.056352+08:00\",\"UpdatedAt\":\"2023-11-02T13:37:24.056352+08:00\",\"DeletedAt\":null,\"price\":44.99,\"description\":\"pay for a year to access on irplane simulation for everybody, childrens to adults.\"},\"category\":{\"ID\":1,\"CreatedAt\":\"2023-11-02T13:37:24.056585+08:00\",\"UpdatedAt\":\"2023-11-02T13:37:24.056585+08:00\",\"DeletedAt\":null,\"title\":\"Airplane\",\"description\":\"Information cataegorized on airplane.\"}}}%"
  },
  {
    "url": "https://stackoverflow.com/questions/77322628/how-can-i-prevent-dofile-calls-in-an-threaded-environment-with-gopher-lua",
    "body": "package action\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"sync\"\n\tlua \"github.com/yuin/gopher-lua\"\n\t\"github.com/yuin/gopher-lua/parse\"\n)\nvar Actions chan *Action\ntype Action struct {\n\tRepeating  bool\n\tScriptPath string\n\tClientIP   string\n\tClientPort string\n\tClientNet  string\n\tUsername   string\n\tPassword   string\n\tProtocol   string\n}\nfunc (a *Action) ToLuaTable() *lua.LTable {\n\ttab := &lua.LTable{}\n\ttab.RawSet(lua.LString(\"Repeating\"), lua.LBool(a.Repeating))\n\ttab.RawSet(lua.LString(\"ClientIP\"), lua.LString(a.ClientIP))\n\ttab.RawSet(lua.LString(\"ClientPort\"), lua.LString(a.ClientPort))\n\ttab.RawSet(lua.LString(\"ClientNet\"), lua.LString(a.ClientNet))\n\ttab.RawSet(lua.LString(\"Username\"), lua.LString(a.Username))\n\ttab.RawSet(lua.LString(\"Password\"), lua.LString(a.Password))\n\ttab.RawSet(lua.LString(\"Protocol\"), lua.LString(a.Protocol))\n\treturn tab\n}\n// I borrow it from https://github.com/yuin/gopher-lua?tab=readme-ov-file#sharing-lua-byte-code-between-lstates\n// ============================\n// ============================\n// CompileLua reads the passed lua file from disk and compiles it.\nfunc CompileLua(filePath string) (*lua.FunctionProto, error) {\n\tfile, err := os.Open(filePath)\n\tdefer file.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treader := bufio.NewReader(file)\n\tchunk, err := parse.Parse(reader, filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tproto, err := lua.Compile(chunk, filePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn proto, nil\n}\n// ============================\n// ============================\nfunc DoCompiledProto(L *lua.LState, proto *lua.FunctionProto, a *Action) error {\n\tlFunc := L.NewFunctionFromProto(proto)\n\tL.Push(lFunc)\n\ttab := a.ToLuaTable()\n\tL.Push(tab)\n\treturn L.PCall(1, lua.MultRet, nil)\n}\nvar luaProtos sync.Map\nfunc Worker(ctx context.Context) {\n\tvar a *Action\n\tActions = make(chan *Action)\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tbreak\n\t\tcase a = <-Actions:\n\t\t\tfunc() {\n\t\t\t\tL := lua.NewState()\n\t\t\t\tdefer L.Close()\n\t\t\t\t// Run FunctionProto if it cached\n\t\t\t\tif proto, ok := luaProtos.Load(a.ScriptPath); ok {\n\t\t\t\t\tif err := DoCompiledProto(L, proto.(*lua.FunctionProto), a); err != nil {\n\t\t\t\t\t\tlog.Print(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Compile and cache FunctionProto if cache miss\n\t\t\t\t\tif newProto, err := CompileLua(a.ScriptPath); err != nil {\n\t\t\t\t\t\tlog.Print(err)\n\t\t\t\t\t\treturn\n\t\t\t\t\t} else {\n\t\t\t\t\t\tluaProtos.Store(a.ScriptPath, newProto)\n\t\t\t\t\t\t// Run FunctionProto\n\t\t\t\t\t\tif err := DoCompiledProto(L, newProto, a); err != nil {\n\t\t\t\t\t\t\tlog.Print(err)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77322628/how-can-i-prevent-dofile-calls-in-an-threaded-environment-with-gopher-lua",
    "body": "-- first index of args contains the \"action\" table\nlocal args = {...}\nlocal action = args[1]\nprint(\"IP=\"       .. (action.ClientIP and action.ClientIP        or \"nil\"))\nprint(\"Port=\"     .. (action.ClientPort and action.ClientPort    or \"nil\"))\nprint(\"Net=\"      .. (action.ClientNet and action.ClientNet      or \"nil\"))\nprint(\"Username=\" .. (action.Username and action.Username        or \"nil\"))\nprint(\"Password=\" .. (action.Password and action.Password        or \"nil\"))\nprint(\"Protocol=\" .. (action.Protocol and action.Protocol        or \"nil\"))\nif action.Repeating == true then\n    print(\"Action is repeating\")\nend"
  },
  {
    "url": "https://stackoverflow.com/questions/77260712/ddd-different-aggregates-of-the-same-domain-model-per-usecase-is-there-a-way",
    "body": "public enum OrderStatus { Pending, Declined, Confirmed };\npublic class Order\n{\n  public OrderStatus Status { get; init; }\n  public string Value { get; init; }\n  public void Decline() => SetStatus(OrderStatus.Declined);\n  public void Confirm() => SetStatus(OrderStatus.Confirmed);\n  private void SetStatus(OrderStatus value)\n  {\n    // Business rule is valid for all use cases of the context\n    if (Status != OrderStatus.Pending)\n    {\n      throw new InvalidOperationException();\n    }\n    Status = value;\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77236436/getting-the-default-browser-runnning-on-a-windows-system",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"syscall\"\n\t\"unsafe\"\n)\nfunc openKey(keyName string) (handle syscall.Handle, err error) {\n\tkeyNameU16 := syscall.StringToUTF16(keyName)\n\terr = syscall.RegOpenKeyEx(syscall.HKEY_CURRENT_USER,\n\t\t&keyNameU16[0], 0, syscall.KEY_QUERY_VALUE, &handle)\n\treturn\n}\nfunc readStringValue(hKey syscall.Handle, valueName string) (string, error) {\n\tvalNameU16 := syscall.StringToUTF16(valueName)\n\tconst defaultBufLen = 256\n\tvalueU16 := make([]uint16, defaultBufLen)\n\tvalueLen := uint32(len(valueU16) * 2)\n\tfor {\n\t\terr := syscall.RegQueryValueEx(hKey, &valNameU16[0], nil, nil,\n\t\t\t(*byte)(unsafe.Pointer(&valueU16[0])), &valueLen)\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\t\tif err != syscall.ERROR_MORE_DATA {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif valueLen%2 != 0 || int(valueLen/2) < len(valueU16) {\n\t\t\treturn \"\", fmt.Errorf(\"invalid output value length: %d\", valueLen)\n\t\t}\n\t\tvalueU16 = make([]uint16, valueLen/2)\n\t\tcontinue\n\t}\n\treturn syscall.UTF16ToString(valueU16[:valueLen/2]), nil\n}\nfunc main() {\n\tlog.SetFlags(0)\n\thKey, err := openKey(`SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer syscall.RegCloseKey(hKey)\n\ts, err := readStringValue(hKey, `Desktop`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(s)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77214029/this-version-of-1-is-not-compatible-error",
    "body": "aix/ppc64        freebsd/amd64   linux/mipsle   openbsd/386\n   android/386      freebsd/arm     linux/ppc64    openbsd/amd64\n   android/amd64    illumos/amd64   linux/ppc64le  openbsd/arm\n   android/arm      js/wasm         linux/s390x    openbsd/arm64\n   android/arm64    linux/386       nacl/386       plan9/386\n   darwin/386       linux/amd64     nacl/amd64p32  plan9/amd64\n   darwin/amd64     linux/arm       nacl/arm       plan9/arm\n   darwin/arm       linux/arm64     netbsd/386     solaris/amd64\n   darwin/arm64     linux/mips      netbsd/amd64   windows/386\n   dragonfly/amd64  linux/mips64    netbsd/arm     windows/amd64\n   freebsd/386      linux/mips64le  netbsd/arm64   windows/arm\n\n3. Choose which system is yours and change accordingly as per your system. Set the GOARCH values by running following in powershell as administrator:"
  },
  {
    "url": "https://stackoverflow.com/questions/77182487/merge-two-map-hierarchies-from-yaml-files-preserving-all-the-keys",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n)\nconst data1 = `---\nenv: test1\ntemplate:\n  app:\n    database:\n      name: oracle\n      foo: whatever\n`\nconst data2 = `---\nenv: test2\ntemplate:\n  app:\n    some_stuff: [1, 2, 3, 4]\n    database:\n      version : 12\n      foo: 42\n`\ntype T struct {\n\tEnv  string         `yaml:\"env\"`\n\tTmpl map[string]any `yaml:\"template\"`\n}\nfunc mergeMapsRecursively(dst, src map[string]any) map[string]any {\n\tres := make(map[string]any)\n\tfor dstKey, dstVal := range dst {\n\t\tsrcVal, exists := src[dstKey]\n\t\tif !exists {\n\t\t\tres[dstKey] = dstVal\n\t\t\tcontinue\n\t\t}\n\t\tdstValMap, dstValIsMap := dstVal.(map[string]any)\n\t\tsrcValMap, srcValIsMap := srcVal.(map[string]any)\n\t\tif dstValIsMap && srcValIsMap {\n\t\t\tres[dstKey] = mergeMapsRecursively(dstValMap, srcValMap)\n\t\t} else {\n\t\t\tres[dstKey] = srcVal\n\t\t}\n\t}\n\tfor srcKey, srcVal := range src {\n\t\tif _, exists := dst[srcKey]; !exists {\n\t\t\tres[srcKey] = srcVal\n\t\t}\n\t}\n\treturn res\n}\nfunc main() {\n\tvar a, b T\n\tif err := yaml.Unmarshal([]byte(data1), &a); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := yaml.Unmarshal([]byte(data2), &b); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v\\n%#v\\n%#v\\n\", a.Tmpl, b.Tmpl, mergeMapsRecursively(a.Tmpl, b.Tmpl))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77098618/failed-to-parse-date-on-unmarshalling",
    "body": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tdata := `{\"timestamp\": \"2023-08-30T04:03:31.3313066\"}`\n\te := MyStuff{}\n\tjson.Unmarshal([]byte(data), &e)\n\tfmt.Printf(\"%v\\n\", e.Timestamp.timeStamp)\n}\ntype MyStuff struct {\n\tTimestamp eventTime\n}\ntype eventTime struct {\n\ttimeStamp time.Time\n}\nfunc (m *eventTime) UnmarshalJSON(data []byte) error {\n\t// Ignore null, like in the main JSON package.\n\tif string(data) == \"null\" || string(data) == `\"\"` {\n\t\treturn nil\n\t}\n\t// Fractional seconds are handled implicitly by Parse.\n\ttt, err := time.Parse(`\"2006-01-02T15:04:05\"`, string(data))\n\t*m = eventTime{tt}\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77089860/i-need-to-take-this-sql-query-to-a-query-with-gorm",
    "body": "type Collection struct {\n    ID              int64\n    Title           string\n    PublicationDate time.Time\n    Groups          []Group `gorm:\"foreignKey:CollectionID\"`\n    CreatedAt       time.Time\n    UpdatedAt       time.Time\n    CreatedBy       uint\n    UpdatedBy       uint\n}\ntype Group struct {\n    ID          int64\n    Title       string\n    Price       float64\n    Description string\n    Items       []Item `gorm:\"foreignKey:GroupID\"`\n    CreatedAt   time.Time\n    UpdatedAt   time.Time\n    CreatedBy   uint\n    UpdatedBy   uint\n}\ntype Item struct {\n    ID        int64\n    Size      string\n    Color     string\n    Quantity  int\n    Images    []string\n    CreatedAt time.Time\n    UpdatedAt time.Time\n    CreatedBy uint\n    UpdatedBy uint\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76929351/getting-error-unknown-shorthand-flag-o-in-o-in-a-cli-project-with-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/spf13/cobra\"\n)\nfunc main() {\n\tvar file, dir, format *string\n\trootCmd := &cobra.Command{\n\t\tUse:   \"Convertica\",\n\t\tShort: \"Convertica is a file format converter\",\n\t}\n\tconvCmd := &cobra.Command{\n\t\tUse:   \"conv\",\n\t\tShort: \"Convert file format\",\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tfmt.Printf(\"flags:\\n\\t%v\\n\\t%v\\n\\t%v\\n\", *file, *dir, *format)\n\t\t},\n\t}\n\tfile = convCmd.Flags().StringP(\"file\", \"c\", \"\", \"The directory of the file to be compressed\")\n\tdir = convCmd.Flags().StringP(\"dir\", \"o\", \"\", \"The directory of the converted file\")\n\tformat = convCmd.Flags().StringP(\"format\", \"f\", \"\", \"Format of the new file\")\n\trootCmd.AddCommand(convCmd)\n\tif err := rootCmd.Execute(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76907108/is-there-an-api-or-method-for-querying-the-first-and-last-data-in-this-project",
    "body": "func (query *Query) First() (object interface{}, err error) {\n\terr = query.box.ObjectBox.RunInReadTx(func() error {\n\t\tvar data *C.void\n\t\tvar dataSize C.size_t\n\t\tif err := query.check(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar dataPtr = unsafe.Pointer(data)\n\t\tvar rc = C.obx_query_find_first(query.cQuery, &dataPtr , &dataSize)\n\t\tif rc == 0 {\n\t\t\tvar bytes []byte\n\t\t\tcVoidPtrToByteSlice(dataPtr, int(dataSize), &bytes)\n\t\t\tobject, err = query.box.entity.binding.Load(query.box.ObjectBox, bytes)\n\t\t\treturn err\n\t\t} else if rc == C.OBX_NOT_FOUND {\n\t\t\tobject = nil\n\t\t\treturn nil\n\t\t} else {\n\t\t\tobject = nil\n\t\t\treturn createError()\n\t\t}\n\t})\n\treturn object, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76906873/is-there-a-configuration-free-way-to-distribute-a-private-go-cli",
    "body": "name: Release MyBinaryName\non:\n  release:\n    types: [created]\njobs:\n  releases-matrix:\n    name: Release Go Binary\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        goos: [linux]\n        goarch: [amd64]\n    steps:\n      - uses: actions/checkout@v2\n      - uses: wangyoucao577/go-release-action@v1.16\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          goos: ${{ matrix.goos }}\n          goarch: ${{ matrix.goarch }}\n          project_path: \".\"\n          binary_name: \"MyBinaryName\"\n          ldflags: \"-s -w\"\n          extra_files: LICENSE README.md"
  },
  {
    "url": "https://stackoverflow.com/questions/76842642/golang-unmarshal-various-toml-config-using-go-toml-v2",
    "body": "package main\nimport (\n  \"fmt\"\n  \"os\"\n  toml \"github.com/pelletier/go-toml/v2\"\n  \"k8s.io/utils/strings/slices\"\n)\nfunc main() {\n  data := make(map[string]interface{})\n  content, err := os.ReadFile(\"data.toml\")\n  if err != nil {\n    panic(err)\n  }\n  if err := toml.Unmarshal(content, &data); err != nil {\n    panic(err)\n  }\n  for k, v := range data {\n    if slices.Contains([]string{\"url\", \"api_key\", \"cluster\"}, k) {\n      // it's a known string value\n      fmt.Printf(\"Got %s = %s\\n\", k, v)\n    } else {\n      // it's an unknown key so value is a map\n      fmt.Printf(\"Got dashboard %s:\\n\", k)\n      x := v.(map[string]interface{})\n      for kk, vv := range x {\n        fmt.Printf(\"  %s: %v\\n\", kk, vv)\n      }\n      // we can also ask for specific items if we know the keys\n      fmt.Printf(\"dashboard id is %s\\n\", v.(map[string]interface{})[\"dashboard\"])\n      fmt.Printf(\"panel id is %d\\n\", v.(map[string]interface{})[\"panel\"])\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76842642/golang-unmarshal-various-toml-config-using-go-toml-v2",
    "body": "package main\nimport (\n  \"fmt\"\n  \"os\"\n  toml \"github.com/pelletier/go-toml/v2\"\n  \"k8s.io/utils/strings/slices\"\n)\ntype (\n  Dashboard struct {\n    Dashboard string\n    Panel     int\n  }\n)\nfunc main() {\n  data := make(map[string]interface{})\n  content, err := os.ReadFile(\"data.toml\")\n  if err != nil {\n    panic(err)\n  }\n  if err := toml.Unmarshal(content, &data); err != nil {\n    panic(err)\n  }\n  for k, v := range data {\n    if slices.Contains([]string{\"url\", \"api_key\", \"cluster\"}, k) {\n      // it's a known string value\n      fmt.Printf(\"Got %s = %s\\n\", k, v)\n    } else {\n      // it's an unknown key so value is a map\n      dashboard := Dashboard{}\n      tomlStr, err := toml.Marshal(v)\n      if err != nil {\n        panic(err)\n      }\n      if err := toml.Unmarshal(tomlStr, &dashboard); err != nil {\n        panic(err)\n      }\n      fmt.Printf(\"Got dashboard %s: %+v\\n\", k, dashboard)\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76793264/how-could-i-implement-this-enum-from-rust-in-golang",
    "body": "package main\nimport \"fmt\"\ntype WebEvent interface{}\ntype SomeWebEvent struct {\n\tsomePayload string\n}\ntype AnotherWebEvent struct {\n\tanotherPayload int\n}\nfunc main() {\n\tevents := []WebEvent{\n\t\tSomeWebEvent{\n\t\t\tsomePayload: \"hello world\",\n\t\t},\n\t\tAnotherWebEvent{\n\t\t\tanotherPayload: 42,\n\t\t},\n\t}\n\tfor _, event := range events {\n\t\tswitch unwrappedEvent := event.(type) {\n\t\tcase SomeWebEvent:\n\t\t\tfmt.Printf(\"Received SomeWebEvent with Payload %v\\n\", unwrappedEvent.somePayload)\n\t\tcase AnotherWebEvent:\n\t\t\tfmt.Printf(\"Received AnotherWebEvent with Payload %v\\n\", unwrappedEvent.anotherPayload)\n\t\tdefault:\n\t\t\tpanic(\"Unexpected Type\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76768141/duplicate-data-issue-when-storing-json-messages-in-azure-storage-queue-using-azu",
    "body": "func function1(c *gin.Context) {\n    log.Printf(\"Start enqueueMessage\")\n    payload := map[string]string{\n        \"myQueueItem\": \"aaa\",\n    }\n    payloadBytes, err := json.Marshal(payload)\n    if err != nil {\n        log.Fatal(\"Error marshaling JSON: \", err)\n    }\n    base64BodyString := base64.StdEncoding.EncodeToString(payloadBytes)\n    _url, err := url.Parse(fmt.Sprintf(\"https://%s.queue.core.windows.net/%s\", accountName, queueName))\n    if err != nil {\n        log.Fatal(\"Error parsing url: \", err)\n    }\n    credential, err := azqueue.NewSharedKeyCredential(accountName, accountKey)\n    if err != nil {\n        log.Fatal(\"Error creating shared key credential: \", err)\n    }\n    queueUrl := azqueue.NewQueueURL(*_url, azqueue.NewPipeline(credential, azqueue.PipelineOptions{}))\n    ctx := context.TODO()\n    messageUrl := queueUrl.NewMessagesURL()\n    _, err = messageUrl.Enqueue(ctx, base64BodyString, 0, 0)\n    if err != nil {\n        log.Fatal(\"Error enqueueing message: \", err)\n    }\n    log.Printf(\"Message enqueued successfully\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76717511/how-could-i-pause-resume-processing-from-inside-my-goroutine",
    "body": "func counter(startFrom int, multiplyBy int, quit, pause <-chan bool, last *int) {\n\tfor {\n\t\tfor x := startFrom; x < 100; x++ {\n\t\t\ttime.Sleep(time.Millisecond * 1000)\n\t\t\tselect {\n\t\t\tcase <-quit:\n\t\t\t\tfmt.Printf(\"counter stopped\")\n\t\t\t\treturn\n\t\t\tcase msg := <-pause:\n\t\t\t\tif msg == true {\n\t\t\t\t\tfmt.Printf(\"counter paused\")\n\t\t\t\tpause_loop:\n\t\t\t\t\tfor {\n\t\t\t\t\t\tselect {\n\t\t\t\t\t\tcase msg := <-pause:\n\t\t\t\t\t\t\tif msg == false {\n\t\t\t\t\t\t\t\tfmt.Printf(\"counter resumed\")\n\t\t\t\t\t\t\t\tbreak pause_loop\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase <-quit:\n\t\t\t\t\t\t\tfmt.Printf(\"counter stopped\")\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tresult := x * multiplyBy\n\t\t\t\t*last = result\n\t\t\t\tfmt.Printf(\"%d\", result)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76717511/how-could-i-pause-resume-processing-from-inside-my-goroutine",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"sync/atomic\"\n\t\"time\"\n)\nfunc main() {\n\tfmt.Println(\"starting...\")\n\treader := bufio.NewReader(os.Stdin)\n\tpaused := make(chan bool)\n\tquit := make(chan bool)\n\tvar last int64 = 1\n\tfor {\n\t\ttext, _ := reader.ReadString('\\n')\n\t\ttext = strings.Replace(text, \"\\n\", \"\", -1)\n\t\tfmt.Printf(\"entered: %s\\n\", text)\n\t\tswitch {\n\t\tcase text == \"start\":\n\t\t\tfmt.Println(\"starting\")\n\t\t\t// create new goroutine\n\t\t\tgo counter(last, 1, paused, quit, &last)\n\t\tcase text == \"pause\":\n\t\t\tfmt.Println(\"pausing\")\n\t\t\tpaused <- true\n\t\tcase text == \"resume\":\n\t\t\tfmt.Println(\"resuming\")\n\t\t\tpaused <- false\n\t\tcase text == \"stop\":\n\t\t\tfmt.Println(\"stopping\")\n\t\t\tquit <- true\n\t\t}\n\t\tfmt.Printf(\"last is %v\", last)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76717511/how-could-i-pause-resume-processing-from-inside-my-goroutine",
    "body": "func counter(\n\tstartFrom, multiplyBy int64,\n\tpaused, quit <-chan bool,\n\tlast *int64,\n) {\n\tvar pause bool\n\t// if startFrom higher 100\n\t// loop exit and function end\n\tfor startFrom < 100 {\n\t\tselect {\n\t\t// get signal pause\n\t\tcase p, ok := <-paused:\n\t\t\t// check signal is ok?\n\t\t\tif ok {\n\t\t\t\tpause = p\n\t\t\t}\n\t\tcase <-quit:\n\t\t\tfmt.Printf(\"counter stopped\")\n\t\t\treturn\n\t\t// sleep 1s if not get data\n\t\t// from any channels\n\t\t// if get new data from channels\n\t\t// time restarted\n\t\t// and started again\n\t\tcase <-time.After(time.Millisecond * 1000):\n\t\t\t// if not pause work\n\t\t\tif !pause {\n\t\t\t\tresult := startFrom * multiplyBy\n\t\t\t\t// use swap atomic\n\t\t\t\t// if many goroutine runs\n\t\t\t\t// don't get problem!\n\t\t\t\tatomic.SwapInt64(last, result)\n\t\t\t\tstartFrom++\n\t\t\t\tfmt.Printf(\"%d\", result)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76681056/why-i-keep-getting-timeout-with-gen-tcp-in-elixir",
    "body": "package main\nimport (\n\t\"io\"\n\t\"log\"\n\t\"net\"\n\t\"os\"\n)\nconst SockAddr = \"/tmp/ipc_test.sock\"\nfunc echoServer(c net.Conn) {\n\tlog.Printf(\"Client connected [%s]\", c.RemoteAddr().Network())\n\tio.Copy(c, c)\n\tc.Close()\n}\nfunc main() {\n\tif err := os.RemoveAll(SockAddr); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tl, err := net.Listen(\"unix\", SockAddr)\n\tif err != nil {\n\t\tlog.Fatal(\"listen error:\", err)\n\t}\n\tdefer l.Close()\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tlog.Fatal(\"accept error:\", err)\n\t\t}\n\t\tgo echoServer(conn)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76658281/migrating-go-pg-to-bun-how-to-have-general-query-in-bun",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/uptrace/bun\"\n\t\"github.com/uptrace/bun/extra/bundebug\"\n\t\"github.com/uptrace/bun/extra/bunpostgres\"\n)\ntype User struct {\n\tID   int64\n\tName string\n}\ntype QueryBuilder struct {\n\tquery *bun.SelectQuery\n}\nfunc NewQueryBuilder() *QueryBuilder {\n\treturn &QueryBuilder{\n\t\tquery: bun.NewSelectQuery(),\n\t}\n}\nfunc (qb *QueryBuilder) WithBaseCondition() *QueryBuilder {\n\tqb.query.Where(\"TRUE = TRUE\")\n\treturn qb\n}\nfunc (qb *QueryBuilder) SelectName() *QueryBuilder {\n\tqb.query.ColumnExpr(\"name\")\n\treturn qb\n}\nfunc (qb *QueryBuilder) UpdateName(newName string) *QueryBuilder {\n\tqb.query.Set(\"name = ?\", newName)\n\treturn qb\n}\nfunc (qb *QueryBuilder) WhereID(id int64) *QueryBuilder {\n\tqb.query.Where(\"id = ?\", id)\n\treturn qb\n}\nfunc main() {\n\tctx := context.Background()\n\tdb := bun.NewDB(bunpostgres.NewDriver(bunpostgres.WithDSN(\"postgres://postgres@localhost:5432/play\")), bun.DefaultLogger)\n\tdb.AddQueryHook(bundebug.NewQueryHook(bundebug.WithVerbose()))\n\tvar name string\n\tquery := NewQueryBuilder().WithBaseCondition()\n\tcaseLogic := false // comes from some business logic\n\tif caseLogic { // two different sql logics using same base query\n\t\terr := query.SelectName().WhereID(1).Scan(ctx, &name)\n\t\therr(err)\n\t\tfmt.Println(\"name 1:\", name)\n\t} else {\n\t\t_, err := query.UpdateName(\"newname\").WhereID(2).Returning(\"name\").Update(ctx, &name)\n\t\therr(err)\n\t\tfmt.Println(\"name 2:\", name)\n\t}\n}\nfunc herr(err error) { // handle error func\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76658281/migrating-go-pg-to-bun-how-to-have-general-query-in-bun",
    "body": "package main\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"github.com/uptrace/bun\"\n\t\"github.com/uptrace/bun/dialect/pgdialect\"\n\t\"github.com/uptrace/bun/driver/pgdriver\"\n\t\"github.com/uptrace/bun/extra/bundebug\"\n)\ntype User struct {\n\tID   int64\n\tName string\n}\nfunc main() {\n\tdb := setup()\n\tctx := context.Background()\n\tvar err error\n\tvar name string\n\tcommonQuery := func(q bun.QueryBuilder) bun.QueryBuilder {\n\t\treturn q.Where(\"TRUE = TRUE\") // some general sql logic\n\t}\n\tcaseLogic := true // comes from some business logic\n\tif caseLogic { // two different sql logics using same base query\n\t\terr = db.NewSelect().Model(&User{}).Column(\"name\").ApplyQueryBuilder(commonQuery).Where(\"id = 1\").Scan(ctx, &name)\n\t\therr(err)\n\t\tfmt.Println(\"name 1:\", name)\n\t} else {\n\t\t_, err = db.NewUpdate().Model(&User{}).Set(\"name = 'newname'\").ApplyQueryBuilder(commonQuery).Where(\"id = 2\").Returning(\"name\").Exec(ctx, &name)\n\t\therr(err)\n\t\tfmt.Println(\"name 2:\", name)\n\t}\n}\nfunc setup() *bun.DB {\n\tconst dsn = \"postgres://postgres:@localhost:5432/play?sslmode=disable\"\n\tsqldb := sql.OpenDB(pgdriver.NewConnector(pgdriver.WithDSN(dsn)))\n\tdb := bun.NewDB(sqldb, pgdialect.New())\n\tdb.AddQueryHook(bundebug.NewQueryHook(bundebug.WithVerbose(true)))\n\treturn db\n}\nfunc herr(e error) { // handle error func\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76657805/iterate-over-element-array-value-using-golang-jsonparser",
    "body": "import \"encoding/json\"\nimport \"fmt\"\njsonString := `\"resource_changes\": [\n    {\n      \"address\": \"azurerm_application_insights.main\",\n      \"mode\": \"managed\",\n      \"type\": \"azurerm_application_insights\",\n      \"name\": \"main\",\n      \"provider_name\": \"registry.terraform.io/hashicorp/azurerm\",\n      \"change\": {\n        \"actions\": [\"update\"],\n      }\n    }\n  ]`\nm := map[string]any{}\njson.Unmarshal([]byte(jsonString), &m)\nrc := m[\"resource_changes\"].([]any)\nfirst := rc[0].(map[string]any)\nchange := first[\"change\"].(map[string]any)\nfmt.Println(change)"
  },
  {
    "url": "https://stackoverflow.com/questions/76657437/using-regrexmatch-in-mongodb-aggregate-in-golang-project",
    "body": "import (\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n)\naddFields := bson.D{\n\tbson.E{Key: \"$addFields\", Value: bson.D{\n\t\t{Key: \"errorMsg\", Value: bson.D{\n\t\t\t{Key: \"$cond\", Value: bson.A{\n\t\t\t\tbson.D{\n\t\t\t\t\t{Key: \"$regexMatch\", Value: bson.D{\n\t\t\t\t\t\t{Key: \"input\", Value: \"$errorMsg\"},\n\t\t\t\t\t\t{Key: \"regex\", Value: primitive.Regex{Pattern: \"Authorization is a duplicate\"}},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\t\"Authorization is a duplicate\",\n\t\t\t\tbson.D{\n\t\t\t\t\t{Key: \"$cond\", Value: bson.A{\n\t\t\t\t\t\tbson.D{\n\t\t\t\t\t\t\t{Key: \"$regexMatch\", Value: bson.D{\n\t\t\t\t\t\t\t\t{Key: \"input\", Value: \"$errorMsg\"},\n\t\t\t\t\t\t\t\t{Key: \"regex\", Value: primitive.Regex{Pattern: \"authorizationNbr\"}},\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"authorizationNbr\",\n\t\t\t\t\t\tbson.D{\n\t\t\t\t\t\t\t{Key: \"$cond\", Value: bson.A{\n\t\t\t\t\t\t\t\tbson.D{\n\t\t\t\t\t\t\t\t\t{Key: \"$regexMatch\", Value: bson.D{\n\t\t\t\t\t\t\t\t\t\t{Key: \"input\", Value: \"$errorMsg\"},\n\t\t\t\t\t\t\t\t\t\t{Key: \"regex\", Value: primitive.Regex{Pattern: \"[Uu]nable to update, apologies\"}},\n\t\t\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"Unable to update\",\n\t\t\t\t\t\t\t\t\"$errorMsg\",\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t},\n\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t}},\n\t\t}},\n\t}},\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76612562/how-to-stop-the-go-diameter-server",
    "body": "e, err := sctp.MakeSCTPAddr(\"sctp4\", config.localEndpoint)\n\tl, err = sctp.ListenSCTP(\"sctp4\", syscall.SOCK_STREAM,\n\t\te,\n\t\t&sctp.SCTPInitMsg{\n\t\t\tNumOutStreams:  uint16(10),\n\t\t\tMaxInStreams:   uint16(10),\n\t\t\tMaxAttempts:    3,\n\t\t\tMaxInitTimeout: 5,\n\t\t},\n\t)\n    defer l.Close()\n    l.(*sctp.SCTPListener).SetNonblock()\n\n    for {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tp.logger.Info(\"exiting...\")\n\t\t\treturn\n\t\tdefault:\n\t\t\tconn, err := l.Accept()\n\t\t\tif err != nil {\n\t\t\t\tswitch v := err.(type) {\n\t\t\t\tcase syscall.Errno:\n\t\t\t\t\tif v == 11 {\n\t\t\t\t\t\t// handle EAGAIN error, typical error for non-blocking sockets\n\t\t\t\t\t\ttime.Sleep(50 * time.Millisecond)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgo handleClient(conn)\n\t\t\t}\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76601557/go-build-remove-information",
    "body": "// ApplyRewrites returns the filename for file in the given directory,\n// as rewritten by the rewrites argument.\n//\n// The rewrites argument is a ;-separated list of rewrites.\n// Each rewrite is of the form \"prefix\" or \"prefix=>replace\",\n// where prefix must match a leading sequence of path elements\n// and is either removed entirely or replaced by the replacement.\nfunc ApplyRewrites(file, rewrites string) (string, bool) {\n\tstart := 0\n\tfor i := 0; i <= len(rewrites); i++ {\n\t\tif i == len(rewrites) || rewrites[i] == ';' {\n\t\t\tif new, ok := applyRewrite(file, rewrites[start:i]); ok {\n\t\t\t\treturn new, true\n\t\t\t}\n\t\t\tstart = i + 1\n\t\t}\n\t}\n\treturn file, false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76590755/cast-any-to-slice-of-base-type",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n)\ntype Base struct{ ID string }\nfunc (b Base) GetBase() Base {\n\treturn b\n}\ntype RecordA struct {\n\tBase\n\tA string\n}\ntype RecordB struct {\n\tBase\n\tB string\n}\ntype RecordC struct {\n\tBase\n\tC string\n}\ntype RecordD struct {\n\tD string\n}\nfunc (r RecordD) GetBase() Base {\n\treturn Base{ID: r.D}\n}\ntype baseGetter interface {\n\tGetBase() Base\n}\nfunc ToBaseSlice(arg any) ([]Base, error) {\n\tswitch v := arg.(type) {\n\tcase []any:\n\t\tvar out []Base\n\t\tfor _, i := range v {\n\t\t\tif g, ok := i.(baseGetter); ok {\n\t\t\t\tout = append(out, g.GetBase())\n\t\t\t}\n\t\t}\n\t\tif len(out) == 0 {\n\t\t\treturn nil, fmt.Errorf(\"no element can be convert to Base\")\n\t\t}\n\t\treturn out, nil\n\tcase baseGetter:\n\t\treturn []Base{v.GetBase()}, nil\n\t}\n\treturn nil, fmt.Errorf(\"can not convert to []Base\")\n}\nfunc main() {\n\tout, err := ToBaseSlice([]any{\n\t\tRecordA{Base: Base{ID: \"A\"}},\n\t\tRecordB{Base: Base{ID: \"B\"}},\n\t\tRecordC{Base: Base{ID: \"C\"}},\n\t\tRecordD{D: \"D\"},\n\t})\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\tlog.Println(out)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76558428/what-parameters-can-we-specify-along-with-its-acceptable-options-in-corswithcon",
    "body": "CORSConfig struct {\n    // Skipper defines a function to skip middleware.\n    Skipper Skipper\n\n    // AllowOrigin defines a list of origins that may access the resource.\n    // Optional. Default value []string{\"*\"}.\n    AllowOrigins []string `yaml:\"allow_origins\"`\n\n    // AllowOriginFunc is a custom function to validate the origin. It takes the\n    // origin as an argument and returns true if allowed or false otherwise. If\n    // an error is returned, it is returned by the handler. If this option is\n    // set, AllowOrigins is ignored.\n    // Optional.\n    AllowOriginFunc func(origin string) (bool, error) `yaml:\"allow_origin_func\"`\n\n    // AllowMethods defines a list methods allowed when accessing the resource.\n    // This is used in response to a preflight request.\n    // Optional. Default value DefaultCORSConfig.AllowMethods.\n    AllowMethods []string `yaml:\"allow_methods\"`\n\n    // AllowHeaders defines a list of request headers that can be used when\n    // making the actual request. This is in response to a preflight request.\n    // Optional. Default value []string{}.\n    AllowHeaders []string `yaml:\"allow_headers\"`\n\n    // AllowCredentials indicates whether or not the response to the request\n    // can be exposed when the credentials flag is true. When used as part of\n    // a response to a preflight request, this indicates whether or not the\n    // actual request can be made using credentials.\n    // Optional. Default value false.\n    AllowCredentials bool `yaml:\"allow_credentials\"`\n\n    // ExposeHeaders defines a whitelist headers that clients are allowed to\n    // access.\n    // Optional. Default value []string{}.\n    ExposeHeaders []string `yaml:\"expose_headers\"`\n\n    // MaxAge indicates how long (in seconds) the results of a preflight request\n    // can be cached.\n    // Optional. Default value 0.\n    MaxAge int `yaml:\"max_age\"`\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/76558428/what-parameters-can-we-specify-along-with-its-acceptable-options-in-corswithcon",
    "body": "app := echo.New()\n\tapp.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n\t\tAllowOrigins: []string{\"http://127.0.0.1:5173\", \"wails://wails.localhost:34115\", \"http://127.0.0.1:5174\"},\n\t\t// AllowOrigins:     []string{\"*\"},\n\t\tAllowHeaders:     []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAccessControlAllowOrigin, echo.HeaderAccessControlAllowCredentials, echo.HeaderAccessControlAllowHeaders, echo.HeaderAccessControlAllowMethods, echo.HeaderAccessControlExposeHeaders, echo.HeaderAccessControlMaxAge, echo.HeaderAccessControlRequestHeaders, echo.HeaderAccessControlRequestMethod, echo.HeaderAuthorization, echo.HeaderContentLength, echo.HeaderContentSecurityPolicy, echo.HeaderContentType, echo.HeaderCookie, echo.HeaderLastModified, echo.HeaderLocation, echo.HeaderOrigin, echo.HeaderServer, echo.HeaderSetCookie, echo.HeaderStrictTransportSecurity, echo.HeaderUpgrade, echo.HeaderVary, echo.HeaderWWWAuthenticate, echo.HeaderXContentTypeOptions, echo.HeaderXCSRFToken, echo.HeaderXFrameOptions, echo.HeaderXRequestID, echo.HeaderXRequestedWith, echo.HeaderXForwardedFor, echo.HeaderXForwardedProto, echo.HeaderXRealIP, echo.HeaderXCSRFToken},\n\t\tAllowCredentials: true,\n\t\t// ExposeHeaders:    []string{\"*\"},\n\t\tExposeHeaders: []string{echo.HeaderOrigin, echo.HeaderContentType, echo.HeaderAccept, echo.HeaderAccessControlAllowOrigin, echo.HeaderAccessControlAllowCredentials, echo.HeaderAccessControlAllowHeaders, echo.HeaderAccessControlAllowMethods, echo.HeaderAccessControlExposeHeaders, echo.HeaderAccessControlMaxAge, echo.HeaderAccessControlRequestHeaders, echo.HeaderAccessControlRequestMethod, echo.HeaderAuthorization, echo.HeaderContentLength, echo.HeaderContentSecurityPolicy, echo.HeaderContentType, echo.HeaderCookie, echo.HeaderLastModified, echo.HeaderLocation, echo.HeaderOrigin, echo.HeaderServer, echo.HeaderSetCookie, echo.HeaderStrictTransportSecurity, echo.HeaderUpgrade, echo.HeaderVary, echo.HeaderWWWAuthenticate, echo.HeaderXContentTypeOptions, echo.HeaderXCSRFToken, echo.HeaderXFrameOptions, echo.HeaderXRequestID, echo.HeaderXRequestedWith, echo.HeaderXForwardedFor, echo.HeaderXForwardedProto, echo.HeaderXRealIP, echo.HeaderXCSRFToken, \"X-User-Id\", \"X-User-Email\", \"X-User-Name\", \"X-User-Role\", \"X-User-Permissions\", \"X-User-Groups\", \"X-User-Scopes\", \"X-User-Sub\", \"X-Set-Cookie\", \"X-Set-Cookie-Expires\", \"X-Set-Cookie-Max-Age\", \"X-Set-Cookie-Path\", \"X-Set-Cookie-Domain\", \"X-Set-Cookie-Secure\", \"X-Set-Cookie-HttpOnly\", \"X-Set-Cookie-SameSite\", \"X-Set-Cookie-Raw\"},\n\t\tAllowMethods:  []string{echo.GET, echo.HEAD, echo.PUT, echo.PATCH, echo.POST, echo.DELETE},\n\t}))"
  },
  {
    "url": "https://stackoverflow.com/questions/76511398/unexpected-no-such-host-error-when-closing-reopening-mysql-connection-in-go",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\ntype card struct {\n\tId   int\n\tName string\n}\nfunc addCardTest(sql *sql.DB, card card) error {\n\tres, err := sql.Exec(`INSERT INTO cards (name) VALUES (?)`, card.Name)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"err while inserting a card: %v\", err)\n\t}\n\tlastId, err := res.LastInsertId()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"err while getting the last ID: %v\", err)\n\t}\n\tfmt.Println(\"inserted card with id:\", lastId)\n\treturn nil\n}\nfunc listCardsTest(sql *sql.DB) ([]card, error) {\n\trows, err := sql.Query(\"select id, name from cards\")\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"err while getting cards: %v\", err)\n\t}\n\tdefer rows.Close()\n\tvar currentCard card\n\tres := make([]card, 0)\n\tfor rows.Next() {\n\t\tif err := rows.Scan(&currentCard.Id, &currentCard.Name); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"err while scanning a row: %v\", err)\n\t\t}\n\t\tres = append(res, currentCard)\n\t}\n\treturn res, nil\n}\nfunc main() {\n\tdsn := \"root:root@tcp(127.0.0.1:3306)/card\"\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer db.Close()\n\tif err := addCardTest(db, card{Name: \"lorem ipsum\"}); err != nil {\n\t\tpanic(err)\n\t}\n\tif err := addCardTest(db, card{Name: \"second card\"}); err != nil {\n\t\tpanic(err)\n\t}\n\tcards, err := listCardsTest(db)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range cards {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76497376/foreign-key-construction-and-population-with-gorm",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype Atom struct {\n\tID        uint `gorm:\"primaryKey;autoIncrement;\"`\n\tGoal      string\n\tSolution  string\n\tMethod    string\n\tOwnerID   int\n\tOwnerType string\n}\ntype Idea struct {\n\tgorm.Model\n\tAtom Atom `gorm:\"polymorphic:Owner;\"`\n}\ntype Task struct {\n\tgorm.Model\n\tAtom Atom `gorm:\"polymorphic:Owner;\"`\n}\ntype Todo struct {\n\tgorm.Model\n\tAtom Atom `gorm:\"polymorphic:Owner;\"`\n}\nfunc main() {\n\tdsn := \"host=localhost port=54322 user=postgres password=postgres dbname=postgres sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Atom{}, &Idea{}, &Task{}, &Todo{})\n\tdb.Create(&Idea{\n\t\tAtom: Atom{\n\t\t\tGoal:     \"make blackboard app\",\n\t\t\tSolution: \"use go\",\n\t\t\tMethod:   \"write code\",\n\t\t},\n\t})\n\tdb.Create(&Task{\n\t\tAtom: Atom{\n\t\t\tGoal:     \"second atom\",\n\t\t\tSolution: \"lorem\",\n\t\t\tMethod:   \"test code\",\n\t\t},\n\t})\n\tdb.Create(&Todo{\n\t\tAtom: Atom{\n\t\t\tGoal:     \"make whiteboard app\",\n\t\t\tSolution: \"use rust\",\n\t\t\tMethod:   \"debug code\",\n\t\t},\n\t})\n\t// code to get the last atom\n\tvar atom Atom\n\tif err := db.Model(&Atom{}).Last(&atom).Error; err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(atom)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76461704/how-do-i-write-multiple-times-to-an-http-stream-to-a-browser-and-have-each-write",
    "body": "package main\nimport (\n\t\"time\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc Demo(c *gin.Context) {\n\t// better to use c.HTML() method\n\tc.Writer.Header().Set(\"Content-Type\", \"text/html\")\n\tc.Writer.Write([]byte(\"Hello\"))\n\tc.Writer.Write([]byte(\"<script>performance.mark('start')</script>\"))\n\tc.Writer.Flush()\n\ttime.Sleep(time.Second)\n\tc.Writer.Write([]byte(\"<script>performance.mark('end')</script>\"))\n\tc.Writer.Write([]byte(\"<script>performance.measure('Time between', 'start', 'end')</script>\"))\n}\nfunc main() {\n\tgin.SetMode(gin.DebugMode)\n\tr := gin.Default()\n\tr.GET(\"/demo\", Demo)\n\tr.Run(\":8000\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76461179/what-is-blocking-my-function-call-in-go-with-pgx",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx/v5\"\n)\ntype Todo struct {\n\tId   int\n\tName string\n}\nfunc main() {\n\tconn, err := pgx.Connect(context.Background(), \"postgres://postgres:postgres@localhost:54322/postgres\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer conn.Close(context.Background())\n\tvar todo Todo\n\trow := conn.QueryRow(context.Background(), \"select id, name from todos where id = $1\", 2)\n\t// row := conn.QueryRow(context.Background(), \"select id, name from todos where id = $1\", 3) // \"3\" not found\n\tif err := row.Scan(&todo.Id, &todo.Name); err != nil {\n\t\tif err == pgx.ErrNoRows {\n\t\t\tfmt.Println(\"record not found\")\n\t\t\treturn\n\t\t}\n\t\tpanic(err)\n\t}\n\tfmt.Println(todo)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76461179/what-is-blocking-my-function-call-in-go-with-pgx",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/jackc/pgx\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n)\ntype Todo struct {\n\tId   int\n\tName string\n}\nfunc main() {\n\tpool, err := pgxpool.New(context.Background(), \"postgres://postgres:postgres@localhost:54322/postgres\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer pool.Close()\n\tvar todo Todo\n\trow := pool.QueryRow(context.Background(), \"select id, name from todos where id = $1\", 2)\n\t// row := conn.QueryRow(context.Background(), \"select id, name from todos where id = $1\", 3) // \"3\" not found\n\tif err := row.Scan(&todo.Id, &todo.Name); err != nil {\n\t\tif err == pgx.ErrNoRows {\n\t\t\tfmt.Println(\"record not found\")\n\t\t\treturn\n\t\t}\n\t\tpanic(err)\n\t}\n\tfmt.Println(todo)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76455500/generating-subject-name-from-a-x509-certificate-in-string-format",
    "body": "package main\nimport (\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"encoding/pem\"\n\t\"fmt\"\n)\nfunc toString(name pkix.Name) string {\n\ts := name.ToRDNSequence().String()\n\t// List the extra attributes that should be added.\n\tattributeTypeNames := map[string]string{\n\t\t\"2.5.4.43\": \"initials\",\n\t\t\"2.5.4.46\": \"dnQualifier\",\n\t}\n\tfor typ, typeName := range attributeTypeNames {\n\t\tfor _, atv := range name.Names {\n\t\t\toidString := atv.Type.String()\n\t\t\tif oidString == typ {\n\t\t\t\t// To keep this demo simple, I just call fmt.Sprint to get the string.\n\t\t\t\t// Maybe you want to escape some of the characters.\n\t\t\t\t// See https://github.com/golang/go/blob/1db23771afc7b9b259e926db35602ecf5047ae23/src/crypto/x509/pkix/pkix.go#L67-L86\n\t\t\t\ts += \",\" + typeName + \"=\" + fmt.Sprint(atv.Value)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn s\n}\nfunc main() {\n\tblock, _ := pem.Decode([]byte(cert))\n\tcertificate, err := x509.ParseCertificate(block.Bytes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(certificate.Subject.String())\n\tfmt.Println()\n\tfmt.Println(certificate.Subject.ToRDNSequence().String())\n\tfmt.Println()\n\tfmt.Println(toString(certificate.Subject))\n}\nvar cert = `-----BEGIN CERTIFICATE-----\nMIIGvDCCBKSgAwIBAgIUPmInkYCv6nQgGfHrQ1sj/y/4gykwDQYJKoZIhvcNAQEL\nBQAwgfsxGzAZBgNVBAMMEnNlY3VyZS5leGFtcGxlLmNvbTELMAkGA1UEBhMCWFgx\nETAPBgNVBAcMCEZ1biBMYW5kMSgwJgYDVQQKDB9NeUNvIExMQyBMVEQgSU5DIChk\nLmIuYS4gT3VyQ28pMRIwEAYDVQQLDAlTU0wgRGVwdC4xCzAJBgNVBAgMAllZMSQw\nIgYJKoZIhvcNAQkBFhVzc2wtYWRtaW5AZXhhbXBsZS5jb20xETAPBgNVBCkMCEpv\naG4gRG9lMQwwCgYDVQQEDANEb2UxDTALBgNVBCoMBEpvaG4xDDAKBgNVBCsMA0pY\nRDENMAsGA1UELhMEc29tZTAeFw0yMzA2MTIxNDI2MzhaFw0yNDA2MTExNDI2Mzha\nMIH7MRswGQYDVQQDDBJzZWN1cmUuZXhhbXBsZS5jb20xCzAJBgNVBAYTAlhYMREw\nDwYDVQQHDAhGdW4gTGFuZDEoMCYGA1UECgwfTXlDbyBMTEMgTFREIElOQyAoZC5i\nLmEuIE91ckNvKTESMBAGA1UECwwJU1NMIERlcHQuMQswCQYDVQQIDAJZWTEkMCIG\nCSqGSIb3DQEJARYVc3NsLWFkbWluQGV4YW1wbGUuY29tMREwDwYDVQQpDAhKb2hu\nIERvZTEMMAoGA1UEBAwDRG9lMQ0wCwYDVQQqDARKb2huMQwwCgYDVQQrDANKWEQx\nDTALBgNVBC4TBHNvbWUwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDL\ni0xuep6R94LF5yn0Lqni2QlJTF4yiUApwspH1g6jUTLDCr5F70BkaxagzNzKXssb\nrgu+zwvIPHu1KiLNX1yoUHfdzDx0ECmaYW22ZET4P8F88slNmhQuxIXjYpOPo+2B\nHZ8U1bY7ojDCcw94JHMHbug07wHIu8Y54wijgjV3xwNvGaOrJtXs3cSuBMldFKi7\nS9gFgvQpOkQpbbl+v37vbVkzgS3BW4LF7apYQe9Q63Q2HeLd8/aAbATUJhGn1bzS\ntruvDa9FkKtDLVkN6furAecCDC+EaOnpsxwImP/D01wUkofOjywmBGbm7a/bpBY0\nuXYQwMKXzTQUxd8MdaEV89Oao4ijuo8Q50+9XeHtB/q4tDhZJjW5K6XxqFXatRQa\n/xmN8FmitVDDIRXqAz4TTVPDeQXnUdh3rETZbgOQzy4mqcGzv723TdbfZLgIQNiF\n1aTJUeOtmbl7JUj/1QuLrpb+/AYzGQrG0XLpjR3h1esseBN1ts8eLVK5Z6ekP5ur\nrjLv3Z2QQ1vsN/NGNqKVIyepPwj1wGxkKmaZ3D6i3GixQpmklno2WdorWf/M+opu\nc5+bL8Nhpc0HIROdi8VnkBj5MIMQaZwFnFhq1vVeIhKZXfEUEE8y1r7Ju/MO5Qd1\nZ6WATO77VCQd2g1xgqdJy7hrZGvMx/M9rRHqe57GYQIDAQABozYwNDATBgNVHSUE\nDDAKBggrBgEFBQcDATAdBgNVHQ4EFgQU8wIFQBHUFEsMbDSbJClj4ZhCyNEwDQYJ\nKoZIhvcNAQELBQADggIBAFx4qApmwKzD6juOfCDMdxyNJZLgYu0VtOSJAoR5vcK8\nQk/rHpQMg/j+eoikjy+Xyh72wUovP25Z2c99gyeYX3VE2TtsqQ9uhz5EeoNvi4H5\nEm68s5hWpyWWo2U5fSvcoFmPbEFT/VTuvt+jczPXVrzZ3a9ZBwKAPIvOcLp5Y9iK\nsLzrkBVosAFAnFeffk/kyoOtrNoE/AhPEZUa8EfKrLh4GGp8NzzcJAMwwaoqkf3O\nHUFIZYaeNjA6sM37Id3EQwvsRtWKRrDkci6NQcpf0TpVxwAZiST2+tyImbuHACQ7\nqc1VHUl9OYAbHgjKgvhQsXxuYboBQAOxDvMjUEAPDzgzflJlpArI7AAO1VAMfT1/\n+4ULiO1p9egkqDtZuU4GrVBWo1PfTJ/alP2O/B/fNECeVLpHnlAst+FRldYmRnSZ\nR3Uv47PzpUKA1+zIVmPkK0kWjCB1xdfiCPJ0t9Uc7BMUeYRxKf9zyTBf9IQzlfNl\n1lRxdOD7/TF/GjlWbtIeI8gWI38fiMhy6iAwl2EPK1GzQ3Wep0km/lx6OL5dGMrr\n2SBcZeCqhzvB7YA7K28IFf2Wma9TXl/NBdhw57/7bCLkbeVANiWGvuQROGGRmlXG\nZ1xP51mTHl8BL2ZN+Q4X7XjVFVXBeTFWxA8B9vLHo1QkdZCdrGzt5jEbpM5ZgJ5k\n-----END CERTIFICATE-----`"
  },
  {
    "url": "https://stackoverflow.com/questions/76445819/querying-dynamodb-date-field-with-given-specific-date",
    "body": "svc := dynamodb.New(sess)\n\tiso8601Day := time.Now().AddDate(0, 0, -7).Format(\"2006-01-02\")\n\tinput := &dynamodb.ScanInput{\n\t\tTableName: aws.String(\"YourTableName\"), // Replace with your table name\n\t\tFilterExpression: aws.String(\"createdAt > :date\"),\n\t\tExpressionAttributeValues: map[string]*dynamodb.AttributeValue{\n\t\t\t\":date\": {\n\t\t\t\tS: aws.String(iso8601Day),\n\t\t\t},\n\t\t},\n\t}\n\tresult, err := svc.Scan(input)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, item := range result.Items {\n\t\tattributeValues, err := dynamodbattribute.UnmarshalMap(item)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(attributeValues)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/76445328/how-to-create-a-method-what-takes-a-generic-slice-where-that-slice-of-type-x-str",
    "body": "type Food struct {\n    name string\n    price float64\n}\ntype Cloth {\n    name string\n    price int\n}\ntype Amount interface {\n    int | float64\n}\ntype Item interface {\n    Cloth | Food\n}\nfunc AddItemsAlt[T Item, A Amount](objects []T, getUnit func(obj T) A) A {\n    sum := A(0)\n    for _, obj := range objects {\n        sum += getUnit(obj)\n    }\n    return sum\n}\nfunc main() {\n    var check = []Food {{\"Pizza\", 6.23}, {\"Hamburgesa\", 7.99}, {\"Tacos\", 4.34}}\n    var cart = []Cloth {{\"Player\", 6}, {\"Pants\", 8}, {\"Tacos de Futbol\", 10}}\n    check := AddItems(check, func(obj Food) float64 {\n        return obj.price\n    })\n    cartTotal := AddItems(cart, func(obj Cloth) int {\n        return obj.price\n    })\n    fmt.Printf(\"The total for the shopping cart is:\\t%v\\n\", cartTotal)\n    fmt.Printf(\"The total for the check is:\\t%.4f\\n\", check)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76414518/how-to-develop-and-add-individual-pages-which-will-together-form-a-pdf-document",
    "body": "package main\nimport (\n\t\"os\"\n\t\"strings\"\n\twkhtml \"github.com/SebastiaanKlippert/go-wkhtmltopdf\"\n)\nvar html = `\n<html>\n  <head>\n    <style>\n      .page {\n        page-break-before: always;\n        font-size: 20pt;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"page\">Hello</div>\n    <div class=\"page\">World</div>\n  </body>\n</html>\n`\nfunc main() {\n\tpdfg, err := wkhtml.NewPDFGenerator()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpage := wkhtml.NewPageReader(strings.NewReader(html))\n\t// The header/footer are provided standalone.\n\tpage.HeaderCenter.Set(\"[page]\")\n\tpage.HeaderLine.Set(true)\n\tpage.FooterHTML.Set(\"footer.html\")\n\t// the following parameters are passed to footer.html in the query.\n\tpage.Replace.Set(\"hello\", \"world\")\n\tpage.Replace.Set(\"my_id\", \"123457789\")\n\tpdfg.AddPage(page)\n\tpdfg.MarginTop.Set(10)\n\tpdfg.MarginBottom.Set(10)\n\terr = pdfg.Create()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = os.WriteFile(\"temp.pdf\", pdfg.Bytes(), 0o644)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76414518/how-to-develop-and-add-individual-pages-which-will-together-form-a-pdf-document",
    "body": "<!DOCTYPE html>\n<html>\n  <head>\n    <script>\n      function subst() {\n        var vars = {};\n        var query_strings_from_url = document.location.search\n          .substring(1)\n          .split('&');\n        for (var query_string in query_strings_from_url) {\n          if (query_strings_from_url.hasOwnProperty(query_string)) {\n            var temp_var = query_strings_from_url[query_string].split('=', 2);\n            vars[temp_var[0]] = decodeURI(temp_var[1]);\n          }\n        }\n        var css_selector_classes = [\n          // these values are provided by wkhtmltopdf.\n          'page',\n          'frompage',\n          'topage',\n          'webpage',\n          'section',\n          'subsection',\n          'date',\n          'isodate',\n          'time',\n          'title',\n          'doctitle',\n          'sitepage',\n          'sitepages',\n          // these values are provided by the \"replace\" option.\n          'hello',\n          'my_id',\n        ];\n        for (var css_class in css_selector_classes) {\n          if (css_selector_classes.hasOwnProperty(css_class)) {\n            var element = document.getElementsByClassName(\n              css_selector_classes[css_class]\n            );\n            for (var j = 0; j < element.length; ++j) {\n              element[j].textContent = vars[css_selector_classes[css_class]];\n            }\n          }\n        }\n      }\n    </script>\n  </head>\n  <body style=\"border: 0; margin: 0\" onload=\"subst()\">\n    <table style=\"border-top: 1px solid black; width: 100%\">\n      <tr>\n        <td class=\"section\"></td>\n        <td class=\"hello\"></td>\n        <td class=\"my_id\"></td>\n        <td style=\"text-align: right\">\n          Page <span class=\"page\"></span> of <span class=\"topage\"></span>\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>"
  },
  {
    "url": "https://stackoverflow.com/questions/76369138/how-can-i-combine-multiple-lambda-functions-into-one-handler-for-different-cogni",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\ntype event struct {\n\tType string          `json:\"type\"`\n\tData json.RawMessage `json:\"data\"`\n}\ntype CognitoEventUserPoolsPreSignup struct{}\ntype CognitoEventUserPoolsCustomMessage struct{}\nfunc getData[T CognitoEventUserPoolsPreSignup | CognitoEventUserPoolsCustomMessage](data json.RawMessage) (T, error) {\n\tvar d T\n\terr := json.Unmarshal(data, &d)\n\treturn d, err\n}\nfunc handler(e event) (any, error) {\n\tswitch e.Type {\n\tcase \"pre-signup\":\n\t\tdata, err := getData[CognitoEventUserPoolsPreSignup](e.Data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn presignup(data)\n\tcase \"custom-message\":\n\t\tdata, err := getData[CognitoEventUserPoolsCustomMessage](e.Data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn customMessage(data)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"unknown event type: %s\", e.Type)\n\t}\n}\nfunc presignup(data CognitoEventUserPoolsPreSignup) (CognitoEventUserPoolsPreSignup, error) {\n\treturn data, nil\n}\nfunc customMessage(data CognitoEventUserPoolsCustomMessage) (CognitoEventUserPoolsCustomMessage, error) {\n\treturn data, nil\n}\nfunc main() {\n\tlambda.Start(handler)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76367585/how-to-run-go-colly-in-parallel-mode-with-depth-of-1-and-multiple-links",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/gocolly/colly/v2\"\n\t\"github.com/gocolly/colly/v2/queue\"\n)\nfunc main() {\n\tc := colly.NewCollector(\n\t\tcolly.MaxDepth(1),\n\t)\n\t// spider(c, db, city)\n\t// registers functions to be executed\n\tq, _ := queue.New(\n\t\t20,\n\t\t&queue.InMemoryQueueStorage{MaxSize: 10000},\n\t)\n\t// rows, err := db.Query(\"SELECT id, link FROM cities_table\")\n\tcities := []string{}\n\tfor _, city := range cities {\n\t\t// extensions.RandomUserAgent(c)\n\t\t// call q.AddRequest to add a request with User-Agent header if you need it.\n\t\t// baseURL := ThroughProxy(city)\n\t\tbaseURL := city\n\t\tif err := q.AddURL(baseURL); err != nil {\n\t\t\tfmt.Printf(\"failed to add URL: %s\\n%v\", baseURL, err)\n\t\t}\n\t}\n\terr := q.Run(c)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to run: %s\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76361260/manage-mutiple-os-commands-across-apis-need-to-start-stop-on-user-request",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/utils\"\n)\ntype manager struct {\n\twg sync.WaitGroup\n\tmu   sync.Mutex\n\tjobs map[string]context.CancelFunc\n}\nfunc newManger() *manager {\n\treturn &manager{\n\t\tjobs: make(map[string]context.CancelFunc),\n\t}\n}\nfunc (m *manager) startJob(ctx context.Context, id string) {\n\tlog.Println(\"start job:\", id)\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tif _, ok := m.jobs[id]; ok {\n\t\treturn\n\t}\n\tctx, cancel := context.WithCancel(ctx)\n\tcmd := exec.CommandContext(ctx, \"./do.sh\", id)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tm.wg.Add(1)\n\tgo func() {\n\t\tdefer m.wg.Done()\n\t\terr := cmd.Run()\n\t\tlog.Printf(\"job: %s done. error: %v\", id, err)\n\t\tm.mu.Lock()\n\t\tdefer m.mu.Unlock()\n\t\tdelete(m.jobs, id)\n\t}()\n\tm.jobs[id] = cancel\n}\nfunc (m *manager) stopJob(id string) {\n\tlog.Println(\"stop job:\", id)\n\tm.mu.Lock()\n\tdefer m.mu.Unlock()\n\tif cancel, ok := m.jobs[id]; ok {\n\t\tcancel()\n\t\treturn\n\t}\n}\nfunc main() {\n\tctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer stop()\n\tm := newManger()\n\tapp := fiber.New()\n\tapp.Post(\"/start/:id\", func(c *fiber.Ctx) error {\n\t\tid := utils.CopyString(c.Params(\"id\"))\n\t\tif id == \"\" {\n\t\t\treturn nil\n\t\t}\n\t\tm.startJob(ctx, id)\n\t\treturn nil\n\t})\n\tapp.Post(\"/stop/:id\", func(c *fiber.Ctx) error {\n\t\tid := utils.CopyString(c.Params(\"id\", \"\"))\n\t\tif id == \"\" {\n\t\t\treturn nil\n\t\t}\n\t\tm.stopJob(id)\n\t\treturn nil\n\t})\n\tgo func() {\n\t\terr := app.Listen(\":3000\")\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}()\n\t<-ctx.Done()\n\t_ = app.Shutdown()\n\tm.wg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76350044/what-could-be-causing-c-html-to-not-work-in-getquizcontroller-of-gin-router",
    "body": "    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Login-Form</title>\n    </head>\n    <body>\n    <h1>Login-Form</h1>\n        <form action=\"/authentication/Login\" method=\"post\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email\"><br>\n            <label for=\"password\">Password</label>\n            <input type=\"text\" id=\"password\" name=\"password\"><br>\n            <input type=\"submit\" value=\"submit\">\n        </form>\n        <h1></h1>\n    </body>\n    </html><h1>Show quizz</h1>"
  },
  {
    "url": "https://stackoverflow.com/questions/76338574/how-to-remove-extern-functions-in-c-and-be-able-to-use-them-from-golang",
    "body": "#ifndef CLIBRARY_H\n#define CLIBRARY_H\n#include <stddef.h>\n#include \"../lib/clipper2c/clipper2c.h\"\ntypedef double (*callbackfunc) (\n    uintptr_t h, ClipperPath64 *path, ClipperPathD *path_normals,\n                    size_t curr_idx, size_t prev_idx);\ndouble delta_callback(\n    uintptr_t h,\n    ClipperPath64 *path, ClipperPathD *path_normals,\n    size_t curr_idx, size_t prev_idx);\nextern double goDeltaCallback64(uintptr_t h, ClipperPath64 *path,\n                                ClipperPathD *path_normals, size_t curr_idx,\n                                size_t prev_idx);\n#endif"
  },
  {
    "url": "https://stackoverflow.com/questions/76291550/how-can-i-forward-a-message-in-go-msgraph-sdk-go-and-include-cc-and-or-bcc-recip",
    "body": "func forwardMessage(id string, toRecipients []models.Recipientable, ccRecipients []models.Recipientable, bccRecipients []models.Recipientable) (success bool) {\n    var err error\n    var message models.Messageable\n\tvar newID string\n    var requestBody = users.NewItemMailFoldersItemMessagesItemForwardPostRequestBody()\n\trequestBody.SetToRecipients(toRecipients)\n    message, err = pClient.Users().ByUserId(cpMailbox).Messages().ByMessageId(id).CreateForward().Post(context.Background(), requestBody, nil)\n    if err != nil {\n        fmt.Println(getOdataErrorV1(err).Error())\n        return false\n    }\n\tnewID = *message.GetId()\n\n\tmessage = models.NewMessage()\n    message.SetToRecipients(toRecipients)\n    if len(ccRecipients) > 0 {\n        message.SetCcRecipients(ccRecipients)\n    }\n    if len(bccRecipients) > 0 {\n        message.SetBccRecipients(bccRecipients)\n    }\n    _, err = pClient.Users().ByUserId(cpMailbox).Messages().ByMessageId(newID).Patch(context.Background(), message, nil)\n    if err != nil {\n        fmt.Println(getOdataErrorV1(err).Error())\n        return false\n    }\n    err = pClient.Users().ByUserId(cpMailbox).Messages().ByMessageId(newID).Send().Post(context.Background(), nil)\n    if err != nil {\n        fmt.Println(getOdataErrorV1(err).Error())\n        return false\n    }\n    return true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76246698/custom-unmarshalbson-failing-to-load-data-correctly-in-mongo-go-driver",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n)\ntype MyData struct {\n\tX int    `bson:\"x\"`\n\tY string `bson:\"y\"`\n}\nfunc (d *MyData) UnmarshalBSON(data []byte) error {\n\ttype Alias MyData\n\taux := (*Alias)(d)\n\tif err := bson.Unmarshal(data, &aux); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n\tbuf, err := bson.Marshal(MyData{X: 1, Y: \"abc\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar d MyData\n\tif err := bson.Unmarshal(buf, &d); err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v\\n\", d)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76246698/custom-unmarshalbson-failing-to-load-data-correctly-in-mongo-go-driver",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype MyData struct {\n\tX int\n\tY string\n}\nfunc main() {\n\ttype Alias MyData\n\taux := &struct {\n\t\t*Alias\n\t}{\n\t\tAlias: (*Alias)(&MyData{}),\n\t}\n\tv := reflect.ValueOf(*aux)\n\tt := v.Type()\n\t// bson.Unmarshal is implemented to list the fields like this:\n\tfmt.Println(\"List the fields of the type:\")\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tf := t.Field(i)\n\t\tfmt.Printf(\"\\tfield %d: %s\\n\", i+1, f.Name)\n\t}\n\t// We can use \"FieldByName\" to see the promoted fields.\n\t// But it's not feasible to implemented an unmarshaler with \"FieldByName\".\n\tfmt.Printf(\"\\nFind fields with FieldByName:\\n\")\n\tfor _, fieldName := range []string{\"Alias\", \"X\", \"Y\"} {\n\t\tif f, ok := t.FieldByName(fieldName); ok {\n\t\t\tfmt.Printf(\"\\tFound: %s\\n\", f.Name)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76230953/how-to-create-websocket-api-on-aws-with-api-gateway-and-go-sdk",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/apigatewayv2\"\n)\nfunc main() {\n\tsess := session.Must(session.NewSession(&aws.Config{\n\t\tRegion: aws.String(\"us-east-1\"),\n\t},\n\t))\n\tapises := apigatewayv2.New(sess)\n\tdata, err := apises.CreateApi(&apigatewayv2.CreateApiInput{\n\t\tName:         aws.String(\"test-api\"),\n\t\tProtocolType: aws.String(apigatewayv2.ProtocolTypeWebsocket),\n\t\t// ...\n\t})\n\tif err != nil {\n\t\tfmt.Println(data)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76207798/post-binary-data-application-octet-stream",
    "body": "func main() {\n\tr := http.NewServeMux()\n\tr.HandleFunc(\"/example\", HandleFile)\n\tsrv := http.Server{\n\t\tAddr:    \":8000\",\n\t\tHandler: r,\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t}\n\t}()\n\tfile, err := os.Open(\"file.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer file.Close()\n\treq, err := http.NewRequest(http.MethodPost, \"http://localhost:8000/example\", file)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Content-Type\", \"application/octet-stream\")\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDisableCompression: true,\n\t\t},\n\t}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer res.Body.Close()\n\tdata, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(data))\n\tsrv.Shutdown(context.Background())\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76187306/add-example-for-go-swagger-ref-array-and-map-model",
    "body": "// SO testing by JS\npackage main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype MyArray struct {\n\tItems []string `json:\"items\"`\n}\ntype MyArraySchema struct { // Defining a schema for MyArray + example\n\tType    string   `json:\"type\"`\n\tItems   []string `json:\"items\"`\n\tExample []string `json:\"example\"`\n}\ntype MyResponse struct {\n\tMyTestArray MyArray `json:\"MyTestArray\"`\n}\ntype MyResponseSchema struct { // Define a schema for MyResponse + example\n\tType       string `json:\"type\"`\n\tProperties struct {\n\t\tMyTestArray MyArraySchema `json:\"MyTestArray\"`\n\t} `json:\"properties\"`\n\tExample struct {\n\t\tMyTestArray []string `json:\"MyTestArray\"`\n\t} `json:\"example\"`\n}\nfunc main() {\n\t// fmt.Println(\"Hello, Namaste!\")\n\tmyArray := MyArray{\n\t\tItems: []string{\"Is\", \"This\", \"A\", \"Test\", \"Or\", \"Am\", \"I\", \"Serialized\", \"?\"},\n\t}\n\tmyResponse := MyResponse{\n\t\tMyTestArray: myArray,\n\t}\n\tmyResponseJSON, err := json.Marshal(myResponse)\n\tif err != nil {\n\t\tfmt.Println(\"Error marshaling MyResponse to JSON:\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(myResponseJSON))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76171837/terraform-plugin-framework-multiple-backend-clients",
    "body": "// ConfigureResponse represents a response to a\n// ConfigureRequest. An instance of this response struct is supplied as\n// an argument to the provider's Configure function, in which the provider\n// should set values on the ConfigureResponse as appropriate.\ntype ConfigureResponse struct {\n\t// DataSourceData is provider-defined data, clients, etc. that is passed\n\t// to [datasource.ConfigureRequest.ProviderData] for each DataSource type\n\t// that implements the Configure method.\n\tDataSourceData any\n\t// Diagnostics report errors or warnings related to configuring the\n\t// provider. An empty slice indicates success, with no warnings or\n\t// errors generated.\n\tDiagnostics diag.Diagnostics\n\t// ResourceData is provider-defined data, clients, etc. that is passed\n\t// to [resource.ConfigureRequest.ProviderData] for each Resource type\n\t// that implements the Configure method.\n\tResourceData any\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76154076/execute-multiple-templates-conditionally",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"text/template\"\n\t\"github.com/julienschmidt/httprouter\"\n)\nfunc BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\tuser, password, hasAuth := r.BasicAuth()\n\t\tif hasAuth && user == requiredUser && password == requiredPassword {\n\t\t\th(w, r, ps)\n\t\t} else {\n\t\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=Restricted\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t}\n\t}\n}\nfunc Anonymous(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\terr := tmpl.Execute(w, map[string]string{\"Name\": \"Anonymous\"})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\nfunc Admin(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\terr := tmpl.Execute(w, map[string]string{\"Name\": \"Admin\"})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\nvar (\n\ttmpl     *template.Template\n\ttmplOnce sync.Once\n)\nfunc main() {\n\tuser := \"admin\"\n\tpass := \"1234\"\n\ttmplOnce.Do(func() {\n\t\ttmpl = template.Must(template.ParseFiles(\"index.html\", \"admin.html\"))\n\t})\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Anonymous)\n\trouter.GET(\"/admin/\", BasicAuth(Admin, user, pass))\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76151624/long-running-task-return-handler-function-and-continue-executing-code-in-gorout",
    "body": "package main\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\t\"github.com/labstack/echo/v4\"\n)\ntype handler struct {\n\tch chan string\n}\nfunc (h *handler) upload(c echo.Context) error {\n\t// do some job to initialize filePath\n\tfilePath := \"file path to the uploaded file\"\n\t// send filePath to the chan, another goroutine will read from the chan\n\t// and process it. The time-consuming task is processed in that goroutine.\n\th.ch <- filePath\n\t// This handler func returns immediately so the client does not need to wait.\n\treturn c.String(http.StatusAccepted, \"Successfully Annotated the file\")\n}\nfunc doSomethingForEveryLong(filePath string) {\n\ttime.Sleep(10 * time.Second)\n}\nfunc main() {\n\t// Choose the chan size according to your need.\n\tch := make(chan string, 10)\n\th := &handler{ch: ch}\n\te := echo.New()\n\te.POST(\"/upload\", h.upload)\n\tgo func() {\n\t\terr := e.Start(\":1323\")\n\t\t// Close the chan once e.Start returns.\n\t\tclose(ch)\n\t\tif err != http.ErrServerClosed {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}()\n\tctx, _ := signal.NotifyContext(context.Background(),\n\t\tos.Interrupt,\n\t\tsyscall.SIGTERM,\n\t)\n\t// This goroutine listens for the signals and shutdown the echo server.\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tshutDownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\t\tdefer cancel()\n\t\tif err := e.Shutdown(shutDownCtx); err != nil {\n\t\t\te.Logger.Error(err)\n\t\t}\n\t}()\n\t// Reads from the chan and processes the time-consuming tasks.\n\t// The chan will be closed when the echo server is shutdown.\n\tfor filePath := range ch {\n\t\tdoSomethingForEveryLong(filePath)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76128765/is-it-possible-to-mock-an-interface-which-includes-two-functions-without-any-re",
    "body": "package srcFunctions\nimport (\n\tmock_srcFunctions \"stackoverflow/srcFunctions/mock\"\n\t\"testing\"\n\tgomock \"github.com/golang/mock/gomock\"\n)\nfunc Foo(cf ClassFunctions) {\n\tcf.FunctionOne()\n\tcf.FunctionTwo()\n}\nfunc TestClassFunctions(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tclassFunctionsMock := mock_srcFunctions.NewMockClassFunctions(ctrl)\n\t// catching first function\n\tclassFunctionsMock.EXPECT().FunctionOne()\n\t// catching second function\n\tclassFunctionsMock.EXPECT().FunctionTwo()\n\tFoo(classFunctionsMock)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76111924/retrieving-item-count-per-date-on-mongodb-aggregate",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)\n\tdefer cancel()\n\tclient, err := mongo.Connect(ctx, options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcoll := client.Database(\"baz\").Collection(\"cakeSales\")\n\tmatchStage := bson.D{\n\t\t{\"$match\", bson.D{\n\t\t\t{\"$and\", []bson.D{\n\t\t\t\t{{\"time\", bson.D{\n\t\t\t\t\t{\"$gte\", time.Date(2019, 6, 1, 0, 0, 0, 0, time.UTC)},\n\t\t\t\t}}},\n\t\t\t\t{{\"time\", bson.D{\n\t\t\t\t\t{\"$lte\", time.Date(2021, 2, 1, 0, 0, 0, 0, time.UTC)},\n\t\t\t\t}}},\n\t\t\t}},\n\t\t}},\n\t}\n\tgroupStage := bson.D{\n\t\t{\"$group\", bson.D{\n\t\t\t{\"_id\", bson.D{\n\t\t\t\t{\"$dateToString\", bson.D{\n\t\t\t\t\t{\"date\", \"$time\"},\n\t\t\t\t\t{\"format\", \"%m-%d-%Y\"},\n\t\t\t\t}},\n\t\t\t}},\n\t\t\t{\"count\", bson.D{\n\t\t\t\t{\"$sum\", 1},\n\t\t\t}},\n\t\t}},\n\t}\n\tprojectStage := bson.D{\n\t\t{\"$project\", bson.D{\n\t\t\t{\"_id\", 0},\n\t\t\t{\"time\", \"$_id\"},\n\t\t\t{\"count\", \"$count\"},\n\t\t}},\n\t}\n\tcursor, err := coll.Aggregate(context.TODO(),\n\t\tmongo.Pipeline{matchStage, groupStage, projectStage})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar results []bson.M\n\tif err = cursor.All(context.TODO(), &results); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, result := range results {\n\t\tfmt.Printf(\n\t\t\t\"time: %s count: %v\\n\",\n\t\t\tresult[\"time\"],\n\t\t\tresult[\"count\"])\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76103857/go-package-is-installed-when-i-instsall-aws-sam-cli",
    "body": "$ mkdir check-image && cd check-image\n$ docker save -o go-image.tar golang:1.18.4-alpine3.16\n$ tar xvf go-image.tar\n$ tree\n.\n├── 00179bf748629c3484345111d5de49224b12ff9b2d1883ae14e1f17b14e9f7b8\n│   ├── json\n│   ├── layer.tar\n│   └── VERSION\n├── 0831657d5ac7ff942f3425dab50e05cf8c74656d5353a989eb5ce91b8cdf2af9\n│   ├── json\n│   ├── layer.tar\n│   └── VERSION\n├── 4b29fa21f075df9e359b67f428cbf1f57d92a74a27b97de9a2af031e2bd145aa\n│   ├── json\n│   ├── layer.tar\n│   └── VERSION\n├── 4e306bbd9ffb25249738ad9a165c09a7433b72e450a771234d457cd6fd377b16\n│   ├── json\n│   ├── layer.tar\n│   └── VERSION\n├── 759ab1463be285f7f2c9a5a817cc0b1fdc5352e38be51d8cc0895b0c29a547de.json\n├── c759d8dd0dbd2e3d7a81f911e75aab009e10e26abbc3d8c6b86cf4b1f43a6b58\n│   ├── json\n│   ├── layer.tar\n│   └── VERSION\n├── go-image.tar\n├── manifest.json\n└── repositories\n$ i=1 && jq -r '.[] | .Layers[] | .' manifest.json | while read -r layer; do echo \"layer $i: $layer\" && ((i++)) && tar tvf $layer | grep -E '/go$'; done\nlayer 1: c759d8dd0dbd2e3d7a81f911e75aab009e10e26abbc3d8c6b86cf4b1f43a6b58/layer.tar\nlayer 2: 4b29fa21f075df9e359b67f428cbf1f57d92a74a27b97de9a2af031e2bd145aa/layer.tar\nlayer 3: 0831657d5ac7ff942f3425dab50e05cf8c74656d5353a989eb5ce91b8cdf2af9/layer.tar\nlayer 4: 00179bf748629c3484345111d5de49224b12ff9b2d1883ae14e1f17b14e9f7b8/layer.tar\n-rwxr-xr-x 0/0        14546854 2022-07-19 07:00 usr/local/go/bin/go\nlayer 5: 4e306bbd9ffb25249738ad9a165c09a7433b72e450a771234d457cd6fd377b16/layer.tar\n$ jq '.history | map(select(.empty_layer|not)) as $layers | $layers | range(length) | {layer: (.+1)} + $layers[.]' ?????????*.json\n{\n  \"layer\": 1,\n  \"created\": \"2022-07-18T21:00:15.800417218Z\",\n  \"created_by\": \"/bin/sh -c #(nop) ADD file:a2648378045615c3785c752423b1afc8dc1c2b213393344f4d0ca17e7255c1cb in / \"\n}\n{\n  \"layer\": 2,\n  \"created\": \"2022-07-18T22:56:26.275665468Z\",\n  \"created_by\": \"/bin/sh -c apk add --no-cache ca-certificates\"\n}\n{\n  \"layer\": 3,\n  \"created\": \"2022-07-18T22:56:26.911341435Z\",\n  \"created_by\": \"/bin/sh -c [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf\"\n}\n{\n  \"layer\": 4,\n  \"created\": \"2022-07-18T23:00:06.068412151Z\",\n  \"created_by\": \"/bin/sh -c set -eux; \\tapk add --no-cache --virtual .fetch-deps gnupg; \\tarch=\\\"$(apk --print-arch)\\\"; \\turl=; \\tcase \\\"$arch\\\" in \\t\\t'x86_64') \\t\\t\\texport GOAMD64='v1' GOARCH='amd64' GOOS='linux'; \\t\\t\\t;; \\t\\t'armhf') \\t\\t\\texport GOARCH='arm' GOARM='6' GOOS='linux'; \\t\\t\\t;; \\t\\t'armv7') \\t\\t\\texport GOARCH='arm' GOARM='7' GOOS='linux'; \\t\\t\\t;; \\t\\t'aarch64') \\t\\t\\texport GOARCH='arm64' GOOS='linux'; \\t\\t\\t;; \\t\\t'x86') \\t\\t\\texport GO386='softfloat' GOARCH='386' GOOS='linux'; \\t\\t\\t;; \\t\\t'ppc64le') \\t\\t\\texport GOARCH='ppc64le' GOOS='linux'; \\t\\t\\t;; \\t\\t's390x') \\t\\t\\texport GOARCH='s390x' GOOS='linux'; \\t\\t\\t;; \\t\\t*) echo >&2 \\\"error: unsupported architecture '$arch' (likely packaging update needed)\\\"; exit 1 ;; \\tesac; \\tbuild=; \\tif [ -z \\\"$url\\\" ]; then \\t\\tbuild=1; \\t\\turl='https://dl.google.com/go/go1.18.4.src.tar.gz'; \\t\\tsha256='4525aa6b0e3cecb57845f4060a7075aafc9ab752bb7b6b4cf8a212d43078e1e4'; \\tfi; \\t\\twget -O go.tgz.asc \\\"$url.asc\\\"; \\twget -O go.tgz \\\"$url\\\"; \\techo \\\"$sha256 *go.tgz\\\" | sha256sum -c -; \\t\\tGNUPGHOME=\\\"$(mktemp -d)\\\"; export GNUPGHOME; \\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796'; \\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys '2F52 8D36 D67B 69ED F998  D857 78BD 6547 3CB3 BD13'; \\tgpg --batch --verify go.tgz.asc go.tgz; \\tgpgconf --kill all; \\trm -rf \\\"$GNUPGHOME\\\" go.tgz.asc; \\t\\ttar -C /usr/local -xzf go.tgz; \\trm go.tgz; \\t\\tif [ -n \\\"$build\\\" ]; then \\t\\tapk add --no-cache --virtual .build-deps \\t\\t\\tbash \\t\\t\\tgcc \\t\\t\\tgo \\t\\t\\tmusl-dev \\t\\t; \\t\\t\\t\\texport GOCACHE='/tmp/gocache'; \\t\\t\\t\\t( \\t\\t\\tcd /usr/local/go/src; \\t\\t\\texport GOROOT_BOOTSTRAP=\\\"$(go env GOROOT)\\\" GOHOSTOS=\\\"$GOOS\\\" GOHOSTARCH=\\\"$GOARCH\\\"; \\t\\t\\t./make.bash; \\t\\t); \\t\\t\\t\\tapk del --no-network .build-deps; \\t\\t\\t\\trm -rf \\t\\t\\t/usr/local/go/pkg/*/cmd \\t\\t\\t/usr/local/go/pkg/bootstrap \\t\\t\\t/usr/local/go/pkg/obj \\t\\t\\t/usr/local/go/pkg/tool/*/api \\t\\t\\t/usr/local/go/pkg/tool/*/go_bootstrap \\t\\t\\t/usr/local/go/src/cmd/dist/dist \\t\\t\\t\\\"$GOCACHE\\\" \\t\\t; \\tfi; \\t\\tapk del --no-network .fetch-deps; \\t\\tgo version\"\n}\n{\n  \"layer\": 5,\n  \"created\": \"2022-07-18T23:00:07.911497908Z\",\n  \"created_by\": \"/bin/sh -c mkdir -p \\\"$GOPATH/src\\\" \\\"$GOPATH/bin\\\" && chmod -R 777 \\\"$GOPATH\\\"\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76098182/go-redis-connection-to-amazon-elastic-redis-cluter",
    "body": "import (\n    \"context\"\n\t\"crypto/tls\"\n\tredisClient \"github.com/redis/go-redis/v9\"\n\t\"strings\"\n    \"fmt\"\n)\n// URL example: redis://username:password@host:port\nopt, err := redisClient.ParseURL(${URL})\nif err != nil {\n    panic(err)\n}\n// Remove username to avoid error: ERR wrong number of arguments for 'auth' command when using redis cloud\n// Root cause: Redis before 6.0.0 does not support username in URL\n// Reference: https://github.com/redis/go-redis/issues/1343\nopt.Username = \"\"\nopt.ClientName = ${ClientName}\nopt.DB = ${DB}\nopt.PoolSize = ${ConnectionPoolSize}\nopt.MinIdleConns = ${ConnectionMinimumIdleSize}\n// Set TLS config for redis cloud\nif !strings.Contains(${URL}, \"localhost\") {\n\topt.TLSConfig = &tls.Config{\n\t\tMinVersion: tls.VersionTLS12,\n\t}\n}\nrdb = redisClient.NewClient(opt)\n// Test connection\n_, err = rdb.Ping(context.Background()).Result()\nif err != nil {\n\tpanic(err)\n}\nfmt.Println(\"Successfully\")"
  },
  {
    "url": "https://stackoverflow.com/questions/76077996/post-relations-stuck-in-sending-request",
    "body": "---TRANSACTION 64, ACTIVE 5 sec inserting\nmysql tables in use 1, locked 1\nLOCK WAIT 3 lock struct(s), heap size 1128, 1 row lock(s), undo log entries 1\nMariaDB thread id 10, OS thread handle 140285377406528, query id 171 172.17.0.1 root Update\ninsert into student_hobbies(student_id, hobby_id) values(?,?)\n------- TRX HAS BEEN WAITING 4891799 ns FOR THIS LOCK TO BE GRANTED:\nRECORD LOCKS space id 6 page no 3 n bits 8 index PRIMARY of table `student_api_go`.`students` trx id 64 lock mode S locks rec but not gap waiting"
  },
  {
    "url": "https://stackoverflow.com/questions/76060944/how-to-add-replication-factor-to-a-topic",
    "body": "// Create a new AdminClient.\n\t// AdminClient can also be instantiated using an existing\n\t// Producer or Consumer instance, see NewAdminClientFromProducer and\n\t// NewAdminClientFromConsumer.\n\ta, err := kafka.NewAdminClient(&kafka.ConfigMap{\"bootstrap.servers\": bootstrapServers})\n...\n\tresults, err := a.CreateTopics(\n\t\tctx,\n\t\t// Multiple topics can be created simultaneously\n\t\t// by providing more TopicSpecification structs here.\n\t\t[]kafka.TopicSpecification{{\n\t\t\tTopic:             topic,\n\t\t\tNumPartitions:     numParts,\n\t\t\tReplicationFactor: replicationFactor}},\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/75916117/go-lang-tpm2-library-pcr-extend-pcr-read-inconsistency",
    "body": "package main\nimport (\n\t\"crypto/sha256\"\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/google/go-tpm-tools/simulator\"\n\t\"github.com/google/go-tpm/tpm2\"\n\t\"github.com/google/go-tpm/tpmutil\"\n)\nfunc main() {\n\t// Initialize the TPM simulator.\n\tsim, err := simulator.Get()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialize sim: %v\", err)\n\t}\n\tdefer func() {\n\t\terr := sim.Close()\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to close sim: %v\", err)\n\t\t}\n\t}()\n\t// Extend a value into PCR 16.\n\tpcrIndex := 16\n\tpcr := tpmutil.Handle(pcrIndex)\n\toldPCRValue, err := tpm2.ReadPCR(sim, pcrIndex, tpm2.AlgSHA256)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to read original PCR: %v\", err)\n\t}\n\thash := []byte{180, 62, 62, 60, 193, 42, 73, 38, 4, 48, 163, 67, 240, 116, 35, 151, 125, 172, 172, 200, 140, 175, 141, 215, 94, 181, 12, 165, 44, 146, 178, 188}\n\terr = tpm2.PCRExtend(sim, pcr, tpm2.AlgSHA256, hash, \"\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to extend PCR: %v\", err)\n\t}\n\tpcrValue, err := tpm2.ReadPCR(sim, pcrIndex, tpm2.AlgSHA256)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to read PCR: %v\", err)\n\t}\n\tfinalPCR := sha256.Sum256(append(oldPCRValue, hash...))\n\t// Compare the hash with the value read from the PCR.\n\tif fmt.Sprintf(\"%x\", finalPCR) == fmt.Sprintf(\"%x\", pcrValue) {\n\t\tfmt.Println(\"PCR value matches the extended value.\")\n\t} else {\n\t\tfmt.Println(\"PCR value does not match the extended value.\")\n\t\tfmt.Printf(\"Expected: %x\\n\", finalPCR)\n\t\tfmt.Printf(\"Actual:   %x\\n\", pcrValue)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75894298/how-to-change-selenium-webdriver-headers-after-running-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/tebeka/selenium\"\n\t\"github.com/tebeka/selenium/chrome\"\n)\nfunc main() {\n\tcaps := selenium.Capabilities{\"browserName\": \"chrome\"}\n\tcaps.AddChrome(chrome.Capabilities{\n\t\t// See the list of Chromium Command Line Switches:\n\t\t// https://peter.sh/experiments/chromium-command-line-switches/\n\t\tArgs: []string{\n\t\t\t// set the User-Agent string with the command line switch --user-agent\n\t\t\t\"--user-agent=my custom User-Agent\",\n\t\t\t// set the languages with the command line switch --accept-lang\n\t\t\t\"--accept-lang=zh-CN,zh\",\n\t\t\t\"--disable-extensions\",\n\t\t\t\"--disable-plugins\",\n\t\t},\n\t\tPrefs: map[string]interface{}{\n\t\t\t// The purpose is to show that the names listed in the following file works:\n\t\t\t// https://source.chromium.org/chromium/chromium/src/+/main:chrome/common/pref_names.cc\n\t\t\t\"enable_do_not_track\": true,\n\t\t},\n\t})\n\twd, err := selenium.NewRemote(caps, fmt.Sprintf(\"http://localhost:%d/wd/hub\", 4444))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer wd.Quit()\n\tif err := wd.Get(\"https://httpbin.org/headers\"); err != nil {\n\t\tpanic(err)\n\t}\n\tpre, err := wd.FindElement(selenium.ByCSSSelector, \"pre\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcontent, err := pre.Text()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(content)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75894298/how-to-change-selenium-webdriver-headers-after-running-in-golang",
    "body": "{\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"zh-CN,zh;q=0.9\",\n    \"Dnt\": \"1\",\n    \"Host\": \"httpbin.org\",\n    \"Sec-Ch-Ua\": \"\\\"Google Chrome\\\";v=\\\"111\\\", \\\"Not(A:Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"111\\\"\",\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n    \"Sec-Fetch-Dest\": \"document\",\n    \"Sec-Fetch-Mode\": \"navigate\",\n    \"Sec-Fetch-Site\": \"none\",\n    \"Sec-Fetch-User\": \"?1\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"my custom User-Agent\",\n    \"X-Amzn-Trace-Id\": \"Root=1-64268e31-1b3b2f18211c1b2b11862032\"\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75894298/how-to-change-selenium-webdriver-headers-after-running-in-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/chromedp/cdproto/emulation\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\topts := append(chromedp.DefaultExecAllocatorOptions[:],\n\t\tchromedp.Flag(\"headless\", \"new\"),\n\t\tchromedp.UserAgent(\"my custom User-Agent\"),\n\t\tchromedp.Flag(\"accept-lang\", \"zh-CN,zh\"),\n\t)\n\tctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)\n\tdefer cancel()\n\tctx, cancel = chromedp.NewContext(ctx)\n\tdefer cancel()\n\tvar content string\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"https://httpbin.org/headers\"),\n\t\tchromedp.Text(\"pre\", &content, chromedp.ByQuery),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tfmt.Println(content)\n\t\t\treturn nil\n\t\t}),\n\t\t// Change the User-Agent and Accept-Language headers.\n\t\temulation.SetUserAgentOverride(\"my custom User-Agent 2\").\n\t\t\tWithAcceptLanguage(\"th-TH,th\"),\n\t\tchromedp.Navigate(\"https://httpbin.org/headers\"),\n\t\tchromedp.Text(\"pre\", &content, chromedp.ByQuery),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tfmt.Println(content)\n\t\t\treturn nil\n\t\t}),\n\t); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75894298/how-to-change-selenium-webdriver-headers-after-running-in-golang",
    "body": "{\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"zh-CN,zh;q=0.9\",\n    \"Host\": \"httpbin.org\",\n    \"Sec-Ch-Ua\": \"\\\"Google Chrome\\\";v=\\\"111\\\", \\\"Not(A:Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"111\\\"\",\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": \"\\\"Linux\\\"\",\n    \"Sec-Fetch-Dest\": \"document\",\n    \"Sec-Fetch-Mode\": \"navigate\",\n    \"Sec-Fetch-Site\": \"none\",\n    \"Sec-Fetch-User\": \"?1\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"my custom User-Agent\",\n    \"X-Amzn-Trace-Id\": \"Root=1-64269a20-5b8b73b145ce666314897f1f\"\n  }\n}\n{\n  \"headers\": {\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"Accept-Language\": \"th-TH,th;q=0.9\",\n    \"Cache-Control\": \"max-age=0\",\n    \"Host\": \"httpbin.org\",\n    \"Sec-Fetch-Dest\": \"document\",\n    \"Sec-Fetch-Mode\": \"navigate\",\n    \"Sec-Fetch-Site\": \"none\",\n    \"Sec-Fetch-User\": \"?1\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n    \"User-Agent\": \"my custom User-Agent 2\",\n    \"X-Amzn-Trace-Id\": \"Root=1-64269a20-291bad6143d5f1dc687b92d4\"\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75860468/updating-an-array-within-mongdbo-document-golang",
    "body": "func (e *EventServiceImpl) UpdateTask(eventid *string, task *models.Task) error {\n\tfilter := bson.M{\"eventid\": eventid, \"task\": bson.M{\"$elemMatch\": bson.M{\"tasktitle\": task.TaskTitle}}}\n\tupdate := bson.M{\"$set\": bson.M{\"task.$.initialbudget\": task.InitalBudget, \"task.$.suppid\": task.Supplier, \"task.$.agreedprice\": task.AgreedPrice, \"task.$.iscomplete\": task.IsComplete}}\n\tresult, err := e.eventcollection.UpdateOne(e.ctx, filter, update)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif result.MatchedCount != 1 {\n\t\treturn errors.New(\"No matched document found to update\")\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75842389/go-getter-and-context-deadline-exceeded",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"time\"\n\tgetter \"github.com/hashicorp/go-getter/v2\"\n)\nfunc main() {\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte{'a'})\n\t\ttime.Sleep(31 * time.Second)\n\t\tw.Write([]byte{'b'})\n\t}))\n\tdefer ts.Close()\n\tctx := context.Background()\n\treq := &getter.Request{\n\t\tSrc:     ts.URL,\n\t\tDst:     \"data.txt\",\n\t\tPwd:     \"./\",\n\t\tGetMode: getter.ModeAny,\n\t}\n\tclient := &getter.Client{\n\t\tGetters: []getter.Getter{\n\t\t\t&getter.HttpGetter{\n\t\t\t\tNetrc:                 true,\n\t\t\t\tXTerraformGetDisabled: true,\n\t\t\t\tHeadFirstTimeout:      10 * time.Second,\n\t\t\t\t// Set the ReadTimeout to a reasonable value for the huge file.\n\t\t\t\tReadTimeout: 60 * time.Second,\n\t\t\t},\n\t\t},\n\t}\n\tlog.Println(\"begin downloading\")\n\t_, err := client.Get(ctx, req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(\"done!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75813433/rabbitmq-client-stuck-into-loop-golang",
    "body": "func (rmq *Client) handleClientReconnect() {\n    defer rmq.secretWatcher.Close()\n    for {\n        select {\n        case event, ok := <-rmq.secretWatcher.Events:\n            if !ok {\n                return\n            }\n            if event.Has(fsnotify.Remove) || event.Has(fsnotify.Write) {\n                ilog.Info(event.Name)\n            }\n        case err, ok := <-rmq.secretWatcher.Errors:\n            if !ok {\n                return\n            }\n            ilog.Errorf(\"Error in watcher: %v\", err)\n        case <-rmq.done:\n            return\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75796939/how-to-redirect-and-render-page-in-the-same-function",
    "body": "func handleLogin(w http.ResponseWriter, r *http.Request) {\n    switch r.Method {\n    case http.MethodGet:\n        t := template.Must(template.ParseFiles(\"login.html\"))\n        if err := t.Execute(w, nil); err != nil {\n            http.Error(w, err.Error(), http.StatusInternalServerError)\n        }\n    case http.MethodPost:\n        // parse login input from request's body\n        // check login input against data in db\n        // on success redirect\n        http.Redirect(w, r, \"/\", http.StatusSeeOther)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75761792/how-to-add-interface-to-non-local-struct-in-golang",
    "body": "type row struct {\n  Date *timestamppb.Timestamp\n  // ... more fields here\n}\nfunc Query() ([]row, error) {\n    rows, err := s.db.Query(...)\n  if err != nil {\n    return nil, err\n  }\n  defer rows.Close()\n  var rows []row\n  for rows.Next() {\n    type aux struct {\n      Date time.Time\n      // ... more fields here\n    }\n    var value aux\n    if err := rows.Scan(&value); err != nil {\n      return nil, err\n    }\n    rows = append(rows, row{\n      Date: timestamppb.New(value.Date),\n      // ... more fields here\n    }\n  }\n  return rows, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75755490/metamask-vault-decryptor-in-golang",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"golang.org/x/crypto/pbkdf2\"\n)\ntype Payload struct {\n\tData string `json:\"data\"`\n\tSalt string `json:\"salt\"`\n\tIv   string `json:\"iv\"`\n}\ntype Vault struct {\n\tType string `json:\"type\"`\n\tData struct {\n\t\tMnemonic         []byte `json:\"mnemonic\"`\n\t\tNumberOfAccounts int    `json:\"numberOfAccounts\"`\n\t\tHDPath           string `json:\"hdPath\"`\n\t} `json:\"data\"`\n}\nvar wallet = []byte(`{\"data\":\"rERJJccSBNfPzRHk32JxDQkpwV7bnMk3PULFnQz8DjKkGiFfmW81ED4dJAG0HHGfIy294AnJYxr7MG9IsVgS0bPD6yVBsfqw40mcsNuBIQLmNXcsw+zCxCnjbqGy2zf5pzvdt76mb4CHtTc7A2UhjApjWaiptR/rxosjkjHUrms0g5kGjr1gWzyZKwI/7u846WUQRRa1PNFX+qnQXWcCAXtjqIJrf762d5+a4rB8bCW3awHHkQm8kroH6PgiX3mYiRZUbDGUSD0DKIZCfHRj6BsndimeNYB0VfX82x0yzoS9D0fagOg1/ETn9cYNplIWT8L39Z9PBxueOOzfcRnQV/SEMozqiHk2SUC0Y1HhoXk4/L1WKF9pJdrCklP6zKaf7RTlXTFqOYkueEf/LGlPQ8MWeq4Nm1zADgJwWiSVWx5Jl6UrOvxNLTd0C4ZPFdunVVPkzYjzBVLgOYrE3udhWF+wqfJQZ6BXu8N5Y1bdoZEtKJ+SPuc+aVBd5Esz0q+mY/WIJswO5laY\",\"iv\":\"xPb05MBtb23xPtfWxgCLzQ==\",\"salt\":\"ggTRTywqaFJGxYAj73woAkA6mkjkY6q779u63DKLr3g=\"}`)\nfunc main() {\n\tvar payload Payload\n\tjson.Unmarshal(wallet, &payload)\n\tiv, _ := base64.StdEncoding.DecodeString(payload.Iv)\n\tsalt, _ := base64.StdEncoding.DecodeString(payload.Salt)\n\tdata, _ := base64.StdEncoding.DecodeString(payload.Data)\n\tpassword := \"tester123\"\n\tkey := pbkdf2.Key([]byte(password), salt, 10000, 32, sha256.New)\n\tblock, _ := aes.NewCipher(key)\n\t// In MetaMask's vault-decryptor, the nonce (initialization vector) size is fixed at 16 bytes.\n\tgcm, _ := cipher.NewGCMWithNonceSize(block, len(iv))\n\tplaintext, err := gcm.Open(nil, iv, data, nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar vault []Vault\n\tjson.Unmarshal(plaintext, &vault)\n\tfmt.Println(string(vault[0].Data.Mnemonic))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75752690/testing-golang-microservices-with-postman",
    "body": "func Authenticate(w http.ResponseWriter,  a AuthPayload){\n    jsonData,_:=json.Marshal(a)\n    log.Printf(\"got jsonm data as %s\",jsonData)\n    request,err := http.NewRequest(\"POST\", \"http://authentication-service:8081/authenticateuser\",bytes.NewBuffer(jsonData))\n    if err!=nil {\n        log.Printf(\"Broker service couldnt connect to the auth service, %s\",err)\n        w.WriteHeader(http.StatusInternalServerError)\n        return\n    }\n    client:=&http.Client{}\n    response, err := client.Do(request)\n    if err!=nil{\n        log.Printf(\"Broker service client error: , %s\",err)\n        w.WriteHeader(http.StatusInternalServerError)\n        return\n    }\n    defer response.Body.Close()\n    if response.StatusCode == http.StatusUnauthorized{\n        log.Println(\"Invalid credentials\")\n        w.WriteHeader(http.StatusUnauthorized)\n        return\n    }\n    if response.StatusCode != http.StatusOK{\n        log.Println(\"Error authenticating user error code \",response.StatusCode)\n        w.WriteHeader(response.StatusCode)\n        return\n    }\n    var jsonFromAuthService jsonResponse\n    err=json.NewDecoder(response.Body).Decode(&jsonFromAuthService)\n    if err!=nil{\n        log.Printf(\"Error decoding json from auth service: , %s\",err)\n        w.WriteHeader(response.StatusInternalServerError)\n        return\n    }\n    var payload =jsonResponse{Error: false,Message: \"User Authenticated\",Data:jsonFromAuthService.Data}\n    json.Marshal(payload)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75723207/how-to-execute-mssql-stored-procedure-and-take-a-result-in-gorm",
    "body": "package postgres\nimport (\n    \"gorm.io/driver/sqlserver\"\n    \"gorm.io/gorm\"\n)\ntype Product struct {\n    gorm.Model\n    Code  string\n    Price uint\n}\nfunc Main() {\n    dsn := \"sqlserver://sa:12345678@localhost:1433?database=gorm\"\n    db, err := gorm.Open(sqlserver.Open(dsn), &gorm.Config{})\n    if err != nil {\n        panic(\"failed to connect database\")\n    }\n    // Migrate the schema.\n    db.AutoMigrate(&Product{})\n    // Create.\n    db.Create(&Product{Code: \"D42\", Price: 100})\n    // Read.\n    var product Product\n    db.First(&product, 1)                 // Find product with integer primary key.\n    db.First(&product, \"code = ?\", \"D42\") // Find product with code D42.\n    // Update - update product's price to 200.\n    db.Model(&product).Update(\"Price\", 200)\n    // Update - update multiple fields.\n    db.Model(&product).Updates(Product{Price: 200, Code: \"F42\"}) // non-zero fields.\n    db.Model(&product).Updates(map[string]interface{}{\"Price\": 200, \"Code\": \"F42\"})\n    // Delete - delete product.\n    db.Delete(&product, 1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75678405/golang-r-cookies-not-returning-any-cookies-even-though-there-are-request-cooki",
    "body": "func HasSessionAlready(res http.ResponseWriter, req *http.Request, inputtedUser Manager) error {\n\tdb, err := connector.ConnectDB() // connecting to database, this is a function i made\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tdefer connector.CloseDB(db)\n\tvar sessionID string\n\t// Check if there is a session cookie, if so login the user\n\t// If the cookie is set, verify the session\n\t// session := store.Get()\n\tvar user string\n\tsession, err := store.Get(req, \"session\")\n\tif err != nil || session.Values[\"authenticated\"] == nil {\n\t\tlog.Println(\"Unable to get session: \", err)\n\t\treturn errors.New(\"couldn't find a user with the session id specified. Redirect to login\")\n\t}\n\tsessionID = session.Values[\"sessionId\"].(string)\n\tlog.Println(\"Session ID: \", sessionID)\n\terr = db.QueryRow(`SELECT \"username\" FROM \"teammanager\" WHERE sessionid=$1`, sessionID).Scan(&user)\n\tif err != nil {\n\t\tlog.Println(\"Error checking session: \", err)\n\t}\n\tif user != \"\" {\n\t\tlog.Printf(\"User %s logged in with session ID %s. Redirect to dashboard\", user, sessionID)\n\t\treturn nil\n\t}\n\treturn errors.New(\"couldn't find a user with the session id specified. Redirect to login\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75632615/go-loop-over-elements-and-insert-into-mongodb",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n\t\"log\"\n\t\"time\"\n)\ntype Element struct {\n\tName    string `json:\"name\" bson:\"name\"`\n\tSurname string `json:\"surname\" bson:\"surname\"`\n}\ntype ParsedText struct {\n\tName      string    `json:\"name\" bson:\"name\"`\n\tSurname   string    `json:\"surname\" bson:\"surname\"`\n\tCreateAt  time.Time `json:\"created_at\" bson:\"created_at\"`\n\tUpdatedAt time.Time `json:\"updated_at\" bson:\"updated_at\"`\n}\ntype DBTxt struct {\n\tId        primitive.ObjectID `json:\"id\" bson:\"_id\"`\n\tName      string             `json:\"name\" bson:\"name\"`\n\tSurname   string             `json:\"surname\" bson:\"surname\"`\n\tCreateAt  time.Time          `json:\"created_at\" bson:\"created_at\"`\n\tUpdatedAt time.Time          `json:\"updated_at\" bson:\"updated_at\"`\n}\nfunc CreateTxt(ctx context.Context, collection *mongo.Collection, text *ParsedText) (*DBTxt, error) {\n\tres, err := collection.InsertOne(context.TODO(), text)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tvar newTxt *DBTxt\n\tquery := bson.M{\"_id\": res.InsertedID}\n\tif err = collection.FindOne(ctx, query).Decode(&newTxt); err != nil {\n\t\treturn nil, err\n\t}\n\treturn newTxt, nil\n}\nfunc parse() ([]Element, error) {\n\treturn []Element{\n\t\t{Name: \"C.J.\", Surname: \"Cherryh\"},\n\t\t{Name: \"George\", Surname: \"Orwell\"},\n\t}, nil\n}\nfunc main() {\n\tctx := context.TODO()\n\tclient, err := mongo.Connect(ctx, options.Client().ApplyURI(\"mongodb://localhost:27017\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer client.Disconnect(ctx)\n\tcollection := client.Database(\"db\").Collection(\"elements\")\n\tdataSlice, err := parse()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, el := range dataSlice {\n\t\tdoc := ParsedText{\n\t\t\tel.Name,\n\t\t\tel.Surname,\n\t\t\ttime.Now(),\n\t\t\ttime.Now(),\n\t\t}\n\t\tdbTxt, err := CreateTxt(ctx, collection, &doc)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"result: %v\\n\", dbTxt)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75627768/how-to-call-deferred-functions-on-sigint-handling-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"syscall\"\n)\nfunc main() {\n\tstop := false\n\tsignal_chan := make(chan os.Signal, 1)\n\tsignal.Notify(signal_chan, syscall.SIGINT)\n\tgo func() {\n\t\t<- signal_chan\n\t\tfmt.Println(\"SIGINT received, stopping\")\n\t\tstop = true\n\t}()\n\tfmt.Println(\"step 1\")\n\tdefer defer1()\n\texec.Command(\"sleep\", \"2\").Run()\n\tif ! stop {\n\t\tfmt.Println(\"step 2\")\n\t\tdefer defer2()\n\t\texec.Command(\"sleep\", \"60\").Run()\n\t}\n\tif ! stop {\n\t\tfmt.Println(\"step 3\")\n\t\tdefer defer3()\n\t\texec.Command(\"sleep\", \"2\").Run()\n\t}\n\tfmt.Println(\"the end\")\n}\nfunc defer1() {\n\tfmt.Println(\"defer 1\")\n\texec.Command(\"sleep\", \"2\").Run()\n}\nfunc defer2() {\n\tfmt.Println(\"defer 2\")\n\texec.Command(\"sleep\", \"2\").Run()\n}\nfunc defer3() {\n\tfmt.Println(\"defer 3\")\n\texec.Command(\"sleep\", \"2\").Run()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75624560/appending-to-an-existing-list-via-http-request",
    "body": "func addLine(c echo.Context) error {\n    checklistLock.Lock()\n    defer checklistLock.Unlock()\n    id, err := strconv.Atoi(c.Param(\"id\"))\n    if err != nil {\n        return err\n    }\n    // do not deref *Checklist\n    cl, ok := checklists[id]\n    if !ok {\n        return echo.ErrNotFound\n    }\n    // use same structure as the expected JSON\n    var input struct { Lines []string `json:\"lines\"` }\n    // always pass a pointer to c.Bind\n    if err := c.Bind(&input); err != nil {\n        return err\n    }\n    // do not overwrite previously written lines, use append\n    cl.Lines = append(cl.Lines, input.Lines...)\n    return c.JSON(http.StatusOK, cl)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75613761/sum-operation-on-array-of-objects-of-different-types-in-mongodb",
    "body": "db.collection.aggregate([\n  {\n    \"$addFields\": { //copy field sections\n      \"tmpSections\": \"$sections\"\n    }\n  },\n  {\n    \"$unwind\": \"$tmpSections\" //Deconstructs section copy\n  },\n  {\n    \"$group\": {\n      \"_id\": \"$_id\",\n      \"departmen\": { // if the deparment have multiple keys, change $first => $push\n        \"$first\": \"$tmpSections.categoryData.department\"\n      },\n      \"location\": { // if the location have multiple keys, change $first => $push\n        \"$first\": \"$sections.categoryData.location\"\n      },\n      \"totalSalary\": {\n        \"$sum\": \"$tmpSections.categoryData.salary.amount\" // sum total per _id\n      }\n    }\n  }\n])"
  },
  {
    "url": "https://stackoverflow.com/questions/75611452/how-to-make-connection-between-2-separate-transactions-in-golang",
    "body": "func insert(db *sqlx.DB) error {\n\t// Start the transaction.\n\ttx, err := db.Beginx()\n\tif err != nil {\n\t\treturn err\n\t}\n\tvar aId int\n\t// The returned id is stored in the variable \"aId\".\n\tif err := tx.Get(&aId, \"INSERT INTO a DEFAULT VALUES RETURNING id\"); err != nil {\n\t\ttx.Rollback()\n\t\treturn err\n\t}\n\tvar bId int\n\t// Use the insert id from table A.\n\tif err := tx.Get(&bId, \"INSERT INTO b (a_id) VALUES ($1) RETURNING id\", aId); err != nil {\n\t\t// In case of an error, rollback the transaction, this is the case where the A entry\n\t\t// is automatically removed as well.\n\t\ttx.Rollback()\n\t\treturn err\n\t}\n\t// Else commit the transaction.\n\tif err := tx.Commit(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75565247/get-stacktrace-when-context-context-is-canceled-by-http-timeouthandler",
    "body": "import (\n    // ...\n    \"runtime/debug\"\n    // ...\n)\nfunc internal_error(w http.ResponseWriter, err error) int {\n    log.Printf(\"ERROR: %s [[[%s]]]\", err, debug.Stack())\n    status := 500\n    w.WriteHeader(status)\n    w.Write([]byte(`<html>\n    <head><title>Internal Server Error</title></head>\n    <body><h1>Internal Server Error (500)</h1></body></html>`))\n    return status\n}\nfunc handle_something(w http.ResponseWriter, r *http.Request) {\n    // ...\n    payload, err := select_from_some_table(r.Context(), arg0)\n    if err != nil {\n        internal_error(w, err)\n        return\n    }\n    // ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75493433/filling-a-struct-based-on-substring-matches-within-a-loop",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\ntype Config struct {\n\tOperation string\n\tStop      string\n\tStart     string\n\tFile      string\n}\nfunc main() {\n\tlist := []string{\"op:count\", \"start:quick\", \"stop:the\", \"file:/tmp/file1.txt\"}\n\tfmt.Println(list)\n\tvar c Config\n\tfor _, v := range list {\n\t\tif strings.HasPrefix(v, \"op:\") {\n\t\t\tsubList := strings.SplitAfterN(v, \":\", 2)\n\t\t\tc.Operation = subList[1]\n\t\t} else if strings.Contains(v, \"stop:\") {\n\t\t\tsubList := strings.SplitAfterN(v, \":\", 2)\n\t\t\tc.Stop = subList[1]\n\t\t} else if strings.Contains(v, \"start:\") {\n\t\t\tsubList := strings.SplitAfterN(v, \":\", 2)\n\t\t\tc.Start = subList[1]\n\t\t} else if strings.Contains(v, \"file:\") {\n\t\t\tsubList := strings.SplitAfterN(v, \":\", 2)\n\t\t\tc.File = subList[1]\n\t\t}\n\t}\n\tfmt.Println(c) // {count the  quick /tmp/file1.txt}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75491892/graceful-shutdown-inn-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"html\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n)\nfunc main() {\n\tfmt.Println(\"starting up\")\n\tquit := make(chan os.Signal, 1)\n\tsignal.Notify(quit, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\n\tsignal.Notify(quit, syscall.SIGHUP, syscall.SIGQUIT)\n\tsignal.Notify(quit, syscall.SIGILL, syscall.SIGTRAP)\n\tsignal.Notify(quit, syscall.SIGABRT, syscall.SIGBUS, syscall.SIGFPE)\n\tserver := &http.Server{\n\t\tAddr: \":8080\",\n\t}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello, %q\", html.EscapeString(r.URL.Path))\n\t})\n\tdown := make(chan struct{})\n\tgo func() {\n\t\tdefer close(down)\n\t\terr := server.ListenAndServe()\n\t\tfmt.Println(\"shutting down: \", err)\n\t}()\n\tgo func() {\n\t\tfmt.Println(\"before <- quit\")\n\t\tsyscall.Kill(syscall.Getpid(), syscall.SIGTERM)\n\t\tfmt.Println(\"after signal sent\")\n\t\t<-quit\n\t\tfmt.Println(\"after signal received\")\n\t\tserver.Shutdown(context.Background())\n\t}()\n\t<-down\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75438927/tensorflow-go-how-to-port-python-querie",
    "body": "import (\n  tf \"github.com/galeone/tensorflow/tensorflow/go\"\n  tg \"github.com/galeone/tfgo\"\n)\nfunc main() {\n  model := tg.LoadModel(\"../krot-classifier\", []string{\"serve\"}, nil)\n  start := time.Now()\n  fakeInput, _ := tf.NewTensor([][]float32{{1}})\n  //fakeString, _ := tf.NewTensor([][]string{{\"127.0.0\"}})\n  results := model.Exec([]tf.Output{\n    model.Op(\"StatefulPartitionedCall\", 0),\n  }, map[tf.Output]*tf.Tensor{\n    model.Op(\"serving_default_b\", 0): fakeInput,\n    model.Op(\"serving_default_c\", 0): fakeInput,\n    model.Op(\"serving_default_d\", 0): fakeInput,\n  })\n  \tpredictions := results[0]\n\tpred := predictions.Value().([][]float32)\n\tprob := sigmoid(float64(pred[0][0]))\n\tfmt.Printf(\"%.1f percent probability\\n\", (100 * prob))\n}\nfunc sigmoid(x float64) float64 {\n\treturn 1 / (1 + math.Exp(x*(-1)))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75425575/gorm-return-list-of-list-of-results-or-map-of-results-with-group-by-id",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype modelExample struct {\n\tTaskId int\n\tName   string\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&modelExample{})\n\t// here you should populate the database with some data\n\t// querying\n\tres := make(map[int][]modelExample, 0)\n\trows, err := db.Table(\"model_examples\").Select(\"task_id, name\").Rows()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer rows.Close()\n\t// scanning\n\tfor rows.Next() {\n\t\tvar taskId int\n\t\tvar name string\n\t\trows.Scan(&taskId, &name)\n\t\tif _, isFound := res[taskId]; !isFound {\n\t\t\tres[taskId] = []modelExample{{taskId, name}}\n\t\t\tcontinue\n\t\t}\n\t\tres[taskId] = append(res[taskId], modelExample{taskId, name})\n\t}\n\t// always good idea to check for errors when scanning\n\tif err = rows.Err(); err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, v := range res {\n\t\tfmt.Println(v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75381085/dynamodbevent-produces-attribute-value-json",
    "body": "// AttributesToJSON attempts to convert a mapping of DynamoDB attribute values to a properly-formatted JSON string\nfunc AttributesToJSON(attrs map[string]events.DynamoDBAttributeValue) ([]byte, error) {\n\t// Attempt to map the DynamoDB attribute value mapping to a map[string]interface{}\n\t// If this fails then return an error\n\tkeys := make([]string, 0)\n\tmapping, err := toJSONInner(attrs, keys...)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Attempt to convert this mapping to JSON and return the result\n\treturn json.Marshal(mapping)\n}\n// Helper function that converts a struct to JSON field-mapping\nfunc toJSONInner(attrs map[string]events.DynamoDBAttributeValue, keys ...string) (map[string]interface{}, error) {\n\tjsonStr := make(map[string]interface{})\n\tfor key, attr := range attrs {\n\t\t// Attempt to convert the field to a JSON mapping; if this fails then return an error\n\t\tcasted, err := toJSONField(attr, append(keys, key)...)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// Set the field to its associated key in our mapping\n\t\tjsonStr[key] = casted\n\t}\n\treturn jsonStr, nil\n}\n// Helper function that converts a specific DynamoDB attribute value to its JSON value equivalent\nfunc toJSONField(attr events.DynamoDBAttributeValue, keys ...string) (interface{}, error) {\n\tattrType := attr.DataType()\n\tswitch attrType {\n\tcase events.DataTypeBinary:\n\t\treturn attr.Binary(), nil\n\tcase events.DataTypeBinarySet:\n\t\treturn attr.BinarySet(), nil\n\tcase events.DataTypeBoolean:\n\t\treturn attr.Boolean(), nil\n\tcase events.DataTypeList:\n\t\t// Get the list of items from the attribute value\n\t\tlist := attr.List()\n\t\t// Attempt to convert each item in the list to a JSON mapping\n\t\tdata := make([]interface{}, len(list))\n\t\tfor i, item := range list {\n\t\t\t// Attempt to map the field to a JSON mapping; if this fails then return an error\n\t\t\tcasted, err := toJSONField(item, keys...)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\t// Set the value at this index to the mapping we generated\n\t\t\tdata[i] = casted\n\t\t}\n\t\t// Return the list we created\n\t\treturn data, nil\n\tcase events.DataTypeMap:\n\t\treturn toJSONInner(attr.Map(), keys...)\n\tcase events.DataTypeNull:\n\t\treturn nil, nil\n\tcase events.DataTypeNumber:\n\t\treturn attr.Number(), nil\n\tcase events.DataTypeNumberSet:\n\t\treturn attr.NumberSet(), nil\n\tcase events.DataTypeString:\n\t\treturn attr.String(), nil\n\tcase events.DataTypeStringSet:\n\t\treturn attr.StringSet(), nil\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"Attribute at %s had unknown attribute type of %d\",\n\t\t\tstrings.Join(keys, \".\"), attrType)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75366482/unmarshal-soap-message-with-go",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\ntype Message interface{}\ntype EnvelopeResponse struct {\n\tXMLName xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Envelope\"`\n\tBody    Body\n}\ntype Body struct {\n\tXMLName                        xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Body\"`\n\tGetHostNumberOfEntriesResponse GetHostNumberOfEntriesResponse\n\tFault                          *Fault  `xml:\",omitempty\"`\n\tContent                        Message `xml:\",omitempty\"`\n\tSOAPBodyContentType            string  `xml:\"-\"`\n}\ntype Fault struct {\n\tXMLName xml.Name `xml:\"http://schemas.xmlsoap.org/soap/envelope/ Fault\"`\n\tCode    string   `xml:\"faultcode,omitempty\"`\n\tString  string   `xml:\"faultstring,omitempty\"`\n\tActor   string   `xml:\"faultactor,omitempty\"`\n\tDetail  string   `xml:\"detail,omitempty\"`\n}\ntype GetHostNumberOfEntriesResponse struct {\n\tXMLName                xml.Name `xml:\"urn:dslforum-org:service:Hosts:1 GetHostNumberOfEntriesResponse\"`\n\tNewHostNumberOfEntries int64    `xml:\"NewHostNumberOfEntries\"`\n}\nfunc GetContent(rawXml []byte) *EnvelopeResponse {\n\tenvelope := EnvelopeResponse{}\n\txml.Unmarshal(rawXml, &envelope)\n\treturn &envelope\n}\nfunc main() {\n\tb := []byte(`\n<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n\t<s:Body>\n\t\t<u:GetHostNumberOfEntriesResponse xmlns:u=\"urn:dslforum-org:service:Hosts:1\">\n\t\t\t<NewHostNumberOfEntries>47</NewHostNumberOfEntries>\n\t\t</u:GetHostNumberOfEntriesResponse>\n\t</s:Body>\n</s:Envelope>\n`)\n\tenvelope := GetContent(b)\n\tfmt.Println(envelope)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75365177/best-behavior-on-error-during-multipart-stream",
    "body": "func csvHandler(w http.ResponseWriter, r *http.Request) {\n\trows, err := db.QueryContext(r.Context(), q)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tvar list []*result\n\tfor rows.Next() {\n\n\t\tres := &result{}\n\t\tif err := rows.Scan(res); err != nil {\n\t\t\t// <-- location 2\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tlist = append(list, res)\n\t}\n\tcsvEnc := csv.NewWriter(w)\n\tfor _, res := range list {\n\t\terr =\tcsvEnc.Write(convertToStringSlice(res)...)\n\t}\n\n\tif err != nil {\n\t\t// <-- location 3\n\t\t// handle response writing error\n\t\treturn\n\t}\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75309661/how-to-connect-with-mongodb-in-go-using-atlas",
    "body": "package main\nimport (\n    \"context\"\n    \"fmt\"\n    \"os\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\nvar username = \"<username>\"\nvar host1 = \"<atlas host>\"  // of the form foo.mongodb.net\nfunc main() {\n    ctx := context.TODO()\n    pw, ok := os.LookupEnv(\"MONGO_PW\")\n    if !ok {\n        fmt.Println(\"error: unable to find MONGO_PW in the environment\")\n        os.Exit(1)\n    }\n    mongoURI := fmt.Sprintf(\"mongodb+srv://%s:%s@%s\", username, pw, host1)\n    fmt.Println(\"connection string is:\", mongoURI)\n    // Set client options and connect\n    clientOptions := options.Client().ApplyURI(mongoURI)\n    client, err := mongo.Connect(ctx, clientOptions)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n    err = client.Ping(ctx, nil)\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n    fmt.Println(\"Connected to MongoDB!\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75305728/flutter-app-can-send-to-udp-server-in-a-docker-container-but-cant-receive-data",
    "body": "final socket = await RawDatagramSocket.bind(InternetAddress.anyIPv4, 0).onError((error, stackTrace) => throw error asSocketException);\n\nfinal server = InternetAddress(\"10.0.2.2\");\nfinal port = 8080;\nfinal data = [\n  deviceInfoData.deviceId,\n  DateTime.now().toUtc().toString()\n];\nDateTime current = DateTime.now();\nlate DateTime responseTime;\nsocket.send(data.toString().codeUnits, server, port);\nString serverOut = \"\";\nsocket.listen((event) {\n  final datagram = socket.receive();\n  if (datagram != null) {\n    // print(\"Data sent to server: ${datagram.data}\");\n    String message = String.fromCharCodes(datagram.data);\n    serverOut = message.split(\"]\").last;\n    log(message);\n  }\n},\nonDone: () => socket.close(),\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/75292088/is-there-an-example-to-build-a-antlr4-grammar-parser-for-oracle-pl-sql-with-the",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/antlr/antlr4/runtime/Go/antlr\"\n\t\"os\"\n\t\"your-path-to-generated-parser/parser\"\n)\n// Define a custom listener that implements the PlSqlListener interface\ntype PlSqlListener struct {\n\t*parser.BasePlSqlListener\n}\nfunc (l *PlSqlListener) EnterSql_statement(ctx *parser.Sql_statementContext) {\n\t// Your implementation to handle SQL statements\n}\nfunc (l *PlSqlListener) EnterPlsql_block(ctx *parser.Plsql_blockContext) {\n\t// Your implementation to handle PL/SQL blocks\n}\nfunc main() {\n\t// Create the input stream\n\tinput := antlr.NewInputStream(\"DECLARE\\nBEGIN\\nDBMS_OUTPUT.PUT_LINE('Hello World');\\nEND;\")\n\t// Create the lexer\n\tlexer := parser.NewPlSqlLexer(input)\n\tstream := antlr.NewCommonTokenStream(lexer, 0)\n\t// Create the parser\n\tp := parser.NewPlSqlParser(stream)\n\t// Start the parse tree\n\ttree := p.Compilation_unit()\n\t// Create the custom listener and attach it to the parse tree\n\tlistener := &PlSqlListener{}\n\tantlr.ParseTreeWalkerDefault.Walk(listener, tree)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75287988/golang-selenium-check-if-the-element-disappears",
    "body": "package main\nimport (\n\t\"time\"\n\t\"github.com/tebeka/selenium\"\n)\nfunc main() {\n\t// Connect to a running instance of Selenium WebDriver\n\twebDriver, err := selenium.NewRemote(selenium.Capabilities{\n\t\t\"browserName\": \"chrome\",\n\t}, \"http://localhost:4444/wd/hub\")\n\tif err != nil {\n\t\tprintln(err)\n\t\treturn\n\t}\n\tdefer webDriver.Quit()\n\t// Load a webpage\n\twebDriver.Get(\"https://www.example.com\")\n\t// Find the element you want to check for\n\telement, err := webDriver.FindElement(selenium.ByID, \"element_id\")\n\tif err != nil {\n\t\tprintln(\"Element not found\")\n\t\treturn\n\t}\n\t// Use a loop with a timeout to check if the element is still present\n\ttimeout := time.After(5 * time.Second)\n\tfor {\n\t\tselect {\n\t\tcase <-timeout:\n\t\t\tprintln(\"Timeout reached, element may have disappeared\")\n\t\t\treturn\n\t\tdefault:\n\t\t\t_, err := webDriver.FindElement(selenium.ByID, \"element_id\")\n\t\t\tif err != nil {\n\t\t\t\tprintln(\"Element has disappeared\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75283519/how-to-assign-modified-value-of-nested-struct-using-reflection-to-struct",
    "body": "func renameTags(p any, m map[string]string) any {\n    rv := reflect.ValueOf(p)\n    re := rv.Elem()\n    rt := rv.Elem().Type()\n    fields := make([]reflect.StructField, rt.NumField())\n    for i := range fields {\n        f := rt.Field(i) // Book i == 0\n        if f.Type.Kind() == reflect.Struct && f.Type.Name() == \"Book\" {\n            fields2 := make([]reflect.StructField, f.Type.NumField()) // f == Book\n            for j := 0; j < f.Type.NumField(); j++ {\n                subField := f.Type.Field(j)\n                tag := subField.Tag.Get(\"json\")\n                if v, ok := m[tag]; ok {\n                    subField.Tag = reflect.StructTag(`json:\"` + v + `\"`)\n                }\n                fields2[j] = subField // change structure of Book\n            }\n            newStruct := reflect.New(reflect.StructOf(fields2))\n            re.Field(i).Set(newStruct)\n        }\n        fields[i] = f\n    }\n    st := reflect.StructOf(fields)\n    return rv.Convert(reflect.PtrTo(st)).Interface()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75269710/sending-images-to-a-whatsapp-number-with-twilio",
    "body": "// Download the helper library from https://www.twilio.com/docs/go/install\npackage main\nimport (\n\t\"fmt\"\n\t\"github.com/twilio/twilio-go\"\n\tapi \"github.com/twilio/twilio-go/rest/api/v2010\"\n)\nfunc main() {\n\t// Find your Account SID and Auth Token at twilio.com/console\n\t// and set the environment variables. See http://twil.io/secure\n\tclient := twilio.NewRestClient()\n\tparams := &api.CreateMessageParams{}\n\tparams.SetBody(\"This is the ship that made the Kessel Run in fourteen parsecs?\")\n\tparams.SetFrom(\"+15017122661\")\n\tparams.SetMediaUrl([]string{\"https://c1.staticflickr.com/3/2899/14341091933_1e92e62d12_b.jpg\"})\n\tparams.SetTo(\"+15558675310\")\n\tresp, err := client.Api.CreateMessage(params)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t} else {\n\t\tif resp.Sid != nil {\n\t\t\tfmt.Println(*resp.Sid)\n\t\t} else {\n\t\t\tfmt.Println(resp.Sid)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75259792/json-unmarshall-not-working-on-golang-proto",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"this/ex\"\n\t\"github.com/golang/protobuf/jsonpb\"\n)\nfunc main() {\n\td := `{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZCRXFDSnFER21hMUxLZUtoZUVxcSJ9.eyJpc3MiOiJodHRwczovL2Rldi0xY3p5M3Vpa21pNjJ0dWN4LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw0OTAiLCJhdWQiOiJhdXRoLXNlcnZpY2Ui...\",\n  \"scope\": \"read:sample\",\n  \"expires_in\": 86400,\n  \"token_type\": \"Bearer\"\n}`\n\tvar pr ex.Token\n\tif err := jsonpb.UnmarshalString(d, &pr); err != nil {\n\t\tlog.Fatalf(\"failed to unmarshal json: %v\", err)\n\t}\n\tf := &jsonpb.Marshaler{\n\t\tIndent: \"  \",\n\t}\n\tfmt.Println(f.MarshalToString(&pr))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75259792/json-unmarshall-not-working-on-golang-proto",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"this/ex\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nfunc main() {\n\td := []byte(`{\n  \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZCRXFDSnFER21hMUxLZUtoZUVxcSJ9.eyJpc3MiOiJodHRwczovL2Rldi0xY3p5M3Vpa21pNjJ0dWN4LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw0OTAiLCJhdWQiOiJhdXRoLXNlcnZpY2Ui...\",\n  \"scope\": \"read:sample\",\n  \"expires_in\": 86400,\n  \"token_type\": \"Bearer\"\n}`)\n\tvar pr ex.Token\n\tif err := protojson.Unmarshal(d, &pr); err != nil {\n\t\tlog.Fatalf(\"failed to unmarshal json: %v\", err)\n\t}\n\tfmt.Println(protojson.Format(&pr))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75259792/json-unmarshall-not-working-on-golang-proto",
    "body": "$ go mod tidy\n$ go run main_jsonpb.go\n{\n  \"accessToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZCRXFDSnFER21hMUxLZUtoZUVxcSJ9.eyJpc3MiOiJodHRwczovL2Rldi0xY3p5M3Vpa21pNjJ0dWN4LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw0OTAiLCJhdWQiOiJhdXRoLXNlcnZpY2Ui...\",\n  \"scope\": \"read:sample\",\n  \"expiresIn\": 86400,\n  \"tokenType\": \"Bearer\"\n} <nil>\n$ go run main_protojson.go\n{\n  \"accessToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImZCRXFDSnFER21hMUxLZUtoZUVxcSJ9.eyJpc3MiOiJodHRwczovL2Rldi0xY3p5M3Vpa21pNjJ0dWN4LnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw0OTAiLCJhdWQiOiJhdXRoLXNlcnZpY2Ui...\",\n  \"scope\": \"read:sample\",\n  \"expiresIn\": 86400,\n  \"tokenType\": \"Bearer\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75225110/unable-to-evaluate-functions-in-go-debugging-using-delve",
    "body": "$ dlv debug main.go                                                                                                                                        36s 00:36:33\nType 'help' for list of commands.\n(dlv) c main.main\nBreakpoint 1 set at 0x49cbc6 for main.main() ./main.go:7\n> main.main() ./main.go:7 (hits goroutine(1):1 total:1) (PC: 0x49cbc6)\n     2:\n     3:\timport (\n     4:\t\t\"fmt\"\n     5:\t)\n     6:\n=>   7:\tfunc main() {\n     8:\t\tfmt.Println(\"Hello world!\")\n     9:\t}\n    10:\n    11:\tvar _ = test()\n    12:\tfunc test() string {\n(dlv) n\n> main.main() ./main.go:8 (PC: 0x49cbd4)\n     3:\timport (\n     4:\t\t\"fmt\"\n     5:\t)\n     6:\n     7:\tfunc main() {\n=>   8:\t\tfmt.Println(\"Hello world!\")\n     9:\t}\n    10:\n    11:\tvar _ = test()\n    12:\tfunc test() string {\n    13:\t\treturn \"test\"\n(dlv) call test()\n> main.main() ./main.go:8 (PC: 0x49cbd4)\nValues returned:\n\t~r0: \"test\""
  },
  {
    "url": "https://stackoverflow.com/questions/75210323/unbale-to-capturing-packets-with-high-precision-time-stamp-with-go-packet",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/google/gopacket/pcap\"\n)\nfunc main() {\n\tinactive, err := pcap.NewInactiveHandle(\"device0\")\n\tif err != nil {\n\t\tlog.Fatalf(\"could not create: %v\", err)\n\t}\n\tdefer inactive.CleanUp()\n\t// Configure the inactive handle:\n\t// inactive.SetSnapLen\n\t// inactive.SetPromisc\n\t// inactive.SetTimeout\n\tif t, err := pcap.TimestampSourceFromString(\"adapter_unsynced\"); err != nil {\n\t\tlog.Fatalf(\"Supported timestamp types: %v\", inactive.SupportedTimestamps())\n\t} else if err := inactive.SetTimestampSource(t); err != nil {\n\t\tlog.Fatalf(\"Supported timestamp types: %v\", inactive.SupportedTimestamps())\n\t}\n\thandle, err := inactive.Activate()\n\tif err != nil {\n\t\tlog.Fatal(\"PCAP Activate error:\", err)\n\t}\n\tdefer handle.Close()\n\t// use the handle ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75193452/event-data-from-smart-contract-parsing-issue-with-go-ethereum",
    "body": "for {\n        select {\n        case err := <-sub.Err():\n            log.Fatal(err)\n        case vLog := <-logs:\n            fmt.Printf(\"Log Block Number: %d\\n\", vLog.BlockNumber)\n            fmt.Printf(\"Log Index: %d\\n\", vLog.Index)\n            event := make(map[string]interface{})\n            err := contractAbi.UnpackIntoMap(event, \"PairCreated\", vLog.Data)\n            if err != nil {\n                log.Fatal(err)\n            }\n            fmt.Println(event)\n            token1 := common.HexToAddress(vLog.Topics[1].Hex())\n            token2 := common.HexToAddress(vLog.Topics[2].Hex())\n        }\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/75169620/problem-unit-test-create-movie-to-database",
    "body": "package services\nimport (\n\t\"errors\"\n\t\"testifymock/repo\"\n)\ntype TeamService struct {\n\tTR TeamRepoInterface\n}\nfunc NewTeamService(repo TeamRepoInterface) *TeamService {\n\treturn &TeamService{\n\t\tTR: repo,\n\t}\n}\ntype TeamRepoInterface interface {\n\tGetByID(id int) (repo.Team, error)\n\tUpdate(team repo.Team) error\n}\nfunc (ts *TeamService) Update(team *repo.Team) error {\n\tt, err := ts.TR.GetByID(team.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif t.TeamOwnerID != team.TeamOwnerID {\n\t\treturn errors.New(\"forbidden\")\n\t}\n\treturn ts.TR.Update(*team)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75169620/problem-unit-test-create-movie-to-database",
    "body": "package services\nimport (\n\t\"errors\"\n\t\"testing\"\n\t\"testifymock/repo\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/mock\"\n)\n// 1. declare the mock struct\ntype teamRepoMock struct {\n\tmock.Mock\n}\n// 2. implement the interface\nfunc (m *teamRepoMock) GetByID(id int) (repo.Team, error) {\n\targs := m.Called(id)\n\treturn args.Get(0).(repo.Team), args.Error(1)\n}\nfunc (m *teamRepoMock) Update(team repo.Team) error {\n\targs := m.Called(team)\n\treturn args.Error(0)\n}\nfunc TestUpdate(t *testing.T) {\n\tt.Run(\"GoodUpdate\", func(t *testing.T) {\n\t\t// 3. instantiate/setup mock\n\t\trepoMock := new(teamRepoMock)\n\t\trepoMock.On(\"GetByID\", 1).Return(repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}, nil).Times(1)\n\t\trepoMock.On(\"Update\", repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}).Return(nil).Times(1)\n\t\tsut := NewTeamService(repoMock)\n\t\terr := sut.Update(&repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"})\n\t\t// 4. check that all expectations were met on the mock\n\t\tassert.Nil(t, err)\n\t\tassert.True(t, repoMock.AssertExpectations(t))\n\t})\n\tt.Run(\"BadUpdate\", func(t *testing.T) {\n\t\t// 3. instantiate/setup mock\n\t\trepoMock := new(teamRepoMock)\n\t\trepoMock.On(\"GetByID\", 1).Return(repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}, nil).Times(1)\n\t\trepoMock.On(\"Update\", repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"}).Return(errors.New(\"some error while updating\")).Times(1)\n\t\tsut := NewTeamService(repoMock)\n\t\terr := sut.Update(&repo.Team{ID: 1, TeamOwnerID: 1, Name: \"test\"})\n\t\t// 4. check that all expectations were met on the mock\n\t\tassert.Equal(t, \"some error while updating\", err.Error())\n\t\tassert.True(t, repoMock.AssertExpectations(t))\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75126166/getsession-in-gin-contrib-sessions-returning-nil-of-token",
    "body": "func Cors() gin.HandlerFunc {\nreturn func(c *gin.Context) {\n\t\tmethod := c.Request.Method\n\t\torigin := c.GetHeader(\"Origin\")\n\t\tc.Header(\"Access-Control-Allow-Origin\", origin)                                                                                                                          // 注意这一行，不能配置为通配符“*”号\n\t\tc.Header(\"Access-Control-Allow-Credentials\", \"true\")                                                                                                                     // 注意这一行，必须设定为 true\n\t\tc.Header(\"Access-Control-Allow-Headers\", \"Access-Control-Allow-Headers,Cookie, Origin, X-Requested-With, Content-Type, Accept, Authorization, Token, Timestamp, UserId\") // 我们自定义的header字段都需要在这里声明\n\t\tc.Header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS,DELETE,PUT\")\n\t\tc.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type,cache-control\")\n\n\t\tif method == \"OPTIONS\" {\n\t\t\t//c.AbortWithStatus(http.StatusNoContent)\n\t\t\tc.AbortWithStatus(http.StatusOK)\n\t\t}\n\n\t\tc.Next()\n\t}\n}\nrouter := gin.New()\nrouter.Use(middleware.Cors())"
  },
  {
    "url": "https://stackoverflow.com/questions/75093798/when-the-first-stage-is-array-how-to-handle-with-go-simplejson",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype MyData []struct {\n\tSha    string `json:\"sha\"`\n\tNodeID string `json:\"node_id\"`\n\tCommit struct {\n\t\tAuthor struct {\n\t\t\tName string `json:\"name\"`\n\t\t} `json:\"author\"`\n\t\tCommitter struct {\n\t\t\tName string `json:\"name\"`\n\t\t} `json:\"committer\"`\n\t\tMessage string `json:\"message\"`\n\t\tTree    struct {\n\t\t\tSha string `json:\"sha\"`\n\t\t\tURL string `json:\"url\"`\n\t\t} `json:\"tree\"`\n\t\tURL          string `json:\"url\"`\n\t\tCommentCount int    `json:\"comment_count\"`\n\t\tVerification struct {\n\t\t\tVerified  bool        `json:\"verified\"`\n\t\t\tReason    string      `json:\"reason\"`\n\t\t\tSignature interface{} `json:\"signature\"`\n\t\t\tPayload   interface{} `json:\"payload\"`\n\t\t} `json:\"verification\"`\n\t} `json:\"commit\"`\n\tURL         string `json:\"url\"`\n\tHTMLURL     string `json:\"html_url\"`\n\tCommentsURL string `json:\"comments_url\"`\n\tAuthor      struct {\n\t\tLogin      string `json:\"login\"`\n\t\tID         string `json:\"id\"`\n\t\tNodeID     string `json:\"node_id\"`\n\t\tAvatarURL  string `json:\"avatar_url\"`\n\t\tGravatarID string `json:\"gravatar_id\"`\n\t\tType       string `json:\"type\"`\n\t\tSiteAdmin  bool   `json:\"site_admin\"`\n\t} `json:\"author\"`\n\tCommitter struct {\n\t\tLogin string `json:\"login\"`\n\t\tID    string `json:\"id\"`\n\t} `json:\"committer\"`\n\tParents []struct {\n\t\tSha     string `json:\"sha\"`\n\t\tURL     string `json:\"url\"`\n\t\tHTMLURL string `json:\"html_url\"`\n\t} `json:\"parents\"`\n}\nfunc main() {\n\tmy_json_data := `[\n  {\n    \"sha\": \"eb08dc1940e073a5c40d8b53a5fd58760fde8f27\",\n    \"node_id\": \"C_kwDOHb9FrtoAKGViMDhkYzE5NDBlMDczYTVjNDBkOGI1M2E1ZmQ1ODc2MGZkZThmMjc\",\n    \"commit\": {\n      \"author\": {\n        \"name\": \"xxxx\"\n      },\n      \"committer\": {\n        \"name\": \"xxxxx\"\n      },\n      \"message\": \"update DownLoad_Stitch_ACM.py\",\n      \"tree\": {\n        \"sha\": \"a30aab98319846f0e86da4a39ec05786e04c0a4f\",\n        \"url\": \"xxxxx\"\n      },\n      \"url\": \"xxxxx\",\n      \"comment_count\": 0,\n      \"verification\": {\n        \"verified\": false,\n        \"reason\": \"unsigned\",\n        \"signature\": null,\n        \"payload\": null\n      }\n    },\n    \"url\": \"xxxxx\",\n    \"html_url\": \"xxxxx\",\n    \"comments_url\": \"xxxxx\",\n    \"author\": {\n      \"login\": \"xxxxx\",\n      \"id\": \"xxxxx\",\n      \"node_id\": \"U_kgDOBkuicQ\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/105620081?v=4\",\n      \"gravatar_id\": \"\",\n      \"type\": \"User\",\n      \"site_admin\": false\n    },\n    \"committer\": {\n      \"login\": \"xxxxx\",\n      \"id\": \"xxxxx\"\n    },\n    \"parents\": [\n      {\n        \"sha\": \"cf867ec9dc4b904c466d9ad4b9338616d1213a06\",\n        \"url\": \"xxxxx\",\n        \"html_url\": \"xxxxx\"\n      }\n    ]\n  }]`\n\tvar data MyData\n\terr := json.Unmarshal([]byte(my_json_data), &data)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"data --> sha: \", data[0].Sha)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75053444/how-to-get-fixed-day-in-each-month-in-a-year-with-golang",
    "body": "func getLastDayOfMonth(t time.Time) time.Time {\n\tlastDayOfMonth := time.Date(t.Year(), t.Month()+1, 1, 0, 0, 0, -1, time.UTC)\n\treturn lastDayOfMonth\n}\nfunc formatSlices(dates []string) []string {\n\tvar formattedDates []string\n\tfor _, date := range dates {\n\t\tdateSlice := strings.Split(date, \"-\")\n\t\trawDate, err := time.Parse(\"2006-01-02\", dateSlice[0]+\"-\"+dateSlice[1]+\"-01\")\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tlastDayOfMonth := getLastDayOfMonth(rawDate)\n\t\tnewDate := date\n\t\trawDay, err := strconv.Atoi(dateSlice[2])\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t}\n\t\tif lastDayOfMonth.Day() < rawDay {\n\t\t\tnewDate = dateSlice[0] + \"-\" + dateSlice[1] + \"-\" + strconv.FormatInt(int64(lastDayOfMonth.Day()), 10)\n\t\t}\n\t\tformattedDates = append(formattedDates, newDate)\n\t}\n\treturn formattedDates\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75035034/how-to-test-the-function-which-runs-the-server",
    "body": "func TestServer_Run(t *testing.T) {\n\tl, err := net.Listen(\"tcp\", \"localhost:3000\")\n\trequire.NoError(t, err)\n\tr := http.NewServeMux()\n\tr.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t_, _ = w.Write([]byte(\"Hello!\"))\n\t})\n\tserver := &http.Server{Handler: r}\n\tdefer server.Close()\n\tgo func() {\n\t\tif err := server.Serve(l); err != http.ErrServerClosed {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\tres, err := http.Get(\"http://localhost:3000\")\n\trequire.NoError(t, err)\n\tbody, err := io.ReadAll(res.Body)\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"Hello!\", string(body))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75017571/how-to-print-each-digit-of-the-number-different-from-the-one-that-precedes-it",
    "body": "// unique removes sequences of repeated digits from non-negative x,\n// returning only \"sequentially unique\" digits:\n// 12→12, 122→12, 1001→101, 35565→3565.\n//\n// Negative x yields -1.\nfunc unique(x int) int {\n\tswitch {\n\tcase x < 0:\n\t\treturn -1\n\tcase x <= 10:\n\t\treturn x\n\t}\n\t// -- Split x into its digits\n\tvar (\n\t\tmag     int   // the magnitude of x\n\t\tnDigits int   // the number of digits in x\n\t\tdigits  []int // the digits of x\n\t)\n\tmag = int(math.Floor(math.Log10(float64(x))))\n\tnDigits = mag + 1\n\t// work from right-to-left to preserve place-holding zeroes\n\tdigits = make([]int, nDigits)\n\tfor i := nDigits - 1; i >= 0; i-- {\n\t\tdigits[i] = x % 10\n\t\tx /= 10\n\t}\n\t// -- Build new, \"sequentially unique\", x from left-to-right\n\tvar prevDigit, newX int\n\tfor _, digit := range digits {\n\t\tif digit != prevDigit {\n\t\t\tnewX = newX*10 + digit\n\t\t}\n\t\tprevDigit = digit\n\t}\n\treturn newX\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75008968/receiving-an-empty-or-filled-map-although-its-filled-for-sure",
    "body": "// NewIgmpHandler creates an instance of IgmpHandler.\nfunc NewIgmpHandler() IgmpHandler {\n\treturn IgmpHandler{\n\t\tgroupMemberStore: make(map[groupMemberId]*groupMember),\n\t}\n}\n// OR\n// NewIgmpHandler creates an instance of IgmpHandler.\nfunc NewIgmpHandler(groupMemberStore map[groupMemberId]*groupMember) IgmpHandler {\n\treturn IgmpHandler{\n\t\tgroupMemberStore: groupMemberStore,\n\t}\n}\n// Add adds a group member to the map.\nfunc (ih *IgmpHandler) Add(gid groupMemberId, gMem *groupMember) {\n\n    ih.mapMutex.Lock()\n\tdefer ih.mapMutex.Unlock()\n\n    // Add new element to the map here. When you are updating the map, you\n    // should take the write lock and It prevents others to read the map.\n}\n// GetGroup returns igmpca.Group by group Id.\nfunc (ih *IgmpHandler) GetGroup(ctx context.Context, groupId uint32) *igmpca.Group {\n    ih.mapMutex.RLock()\n\tdefer ih.mapMutex.RUnlock()\n\tgroup := &igmpca.Group{}\n\n    for gid, gMem := range ih.groupMemberStore {\n\t\t...\n\t}\n\t...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74998983/unmarshal-time-in-custom-format-without-any-escape-to-heap-go1-19",
    "body": "var errInvalid = errors.New(\"invalid\")\nfunc parseTimestamp(s string) (time.Time, error) {\n    if len(s) != 16 || s[2] != '-' || s[5] != '-' || s[10] != ' ' || s[13] != ':' {\n        return time.Time{}, errInvalid\n    }\n    var errAtoi error\n    atoi := func(num string) int {\n        n, err := strconv.Atoi(num)\n        if errAtoi == nil {\n            errAtoi = err\n        }\n        return n\n    }\n    day := atoi(s[:2])\n    month := time.Month(atoi(s[3:5]))\n    year := atoi(s[6:10])\n    hour := atoi(s[11:13])\n    minute := atoi(s[14:16])\n    if errAtoi != nil {\n        return time.Time{}, errAtoi\n    }\n    return time.Date(year, month, day, hour, minute, 0, 0, time.UTC), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74982507/nats-client-an-error-occurred-during-encode-or-decode-operation",
    "body": "package main\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/nats-io/nats-server/v2/server\"\n\t\"github.com/nats-io/nats.go\"\n)\nfunc main() {\n\tvar (\n\t\thost           string\n\t\tport           int\n\t\tcertFile       string\n\t\tkeyFile        string\n\t\tclientCertFile string\n\t\tclientKeyFile  string\n\t\tcaFile         string\n\t)\n\tflag.StringVar(&host, \"host\", \"localhost\", \"Client connection host/IP.\")\n\tflag.IntVar(&port, \"port\", 4222, \"Client connection port.\")\n\tflag.StringVar(&certFile, \"tls.cert.server\", \"cert.pem\", \"TLS cert file.\")\n\tflag.StringVar(&keyFile, \"tls.key.server\", \"key.pem\", \"TLS key file.\")\n\tflag.StringVar(&caFile, \"tls.ca\", \"ca.pem\", \"TLS CA file.\")\n\tflag.StringVar(&clientCertFile, \"tls.cert.client\", \"client-cert.pem\", \" Client TLS cert file.\")\n\tflag.StringVar(&clientKeyFile, \"tls.key.client\", \"client-key.pem\", \"Client TLS key file.\")\n\tflag.Parse()\n\tserverTlsConfig, err := server.GenTLSConfig(&server.TLSConfigOpts{\n\t\tCertFile: certFile,\n\t\tKeyFile:  keyFile,\n\t\tCaFile:   caFile,\n\t\tVerify:   true,\n\t\tTimeout:  2,\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"tls config: %v\", err)\n\t}\n\t// Setup the embedded server options.\n\topts := server.Options{\n\t\tHost:      host,\n\t\tPort:      port,\n\t\tTLSConfig: serverTlsConfig,\n\t}\n\t// Initialize a new server with the options.\n\tns, err := server.NewServer(&opts)\n\tif err != nil {\n\t\tlog.Fatalf(\"server init: %v\", err)\n\t}\n\t// Start the server.\n\tgo ns.Start()\n\tdefer ns.Shutdown()\n    // Allow the server to startup before creating the connection.\n\ttime.Sleep(time.Second)\n\t// Create a client connection.\n\tnc, err := nats.Connect(\n\t\tfmt.Sprintf(\"tls://%s:%d\", host, port),\n\t\tnats.RootCAs(caFile),\n\t\tnats.ClientCert(clientCertFile, clientKeyFile),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"client connect: %v\", err)\n\t}\n\tdefer nc.Drain()\n\t// Setup a basic subscription, publish, and print it.\n\tsub, _ := nc.SubscribeSync(\"hello\")\n\tdefer sub.Drain()\n\tnc.Publish(\"hello\", []byte(\"world\"))\n\tmsg, _ := sub.NextMsg(time.Second)\n\tfmt.Println(string(msg.Data))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74978621/convert-gif-image-into-base64-in-go",
    "body": "import (\n    \"bytes\"\n    \"encoding/base64\"\n    \"io\"\n    \"os\"\n)\nfunc EncodePath(path string) ([]byte, error) {\n    data, err := os.ReadFile(path)\n    if err != nil {\n        return nil, err\n    }\n    output := make([]byte, base64.StdEncoding.EncodedLen(len(data)))\n    base64.StdEncoding.Encode(output, data)\n    return output, nil\n}\nfunc EncodeReader(rd io.Reader) ([]byte, error) {\n    var b bytes.Buffer\n    enc := base64.NewEncoder(base64.StdEncoding, &b)\n    if _, err := io.Copy(enc, rd); err != nil {\n        return nil, err\n    }\n    if err := enc.Close(); err != nil {\n        return nil, err\n    }\n    return b.Bytes(), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74950269/global-variable-concurrent-use-for-write-once-read-many-usecase",
    "body": "func GetClusterName() (string, error) {\n    // Take read lock to see if 'clusterName' is filled.\n    clusterName.Lock()\n    defer clusterName.Unlock()\n    if clusterName.clusterName == \"\" {\n        return getClusterName()\n    }\n    return clusterName.clusterName, nil\n}\nfunc getClusterName() (string, error) {\n    // See if previous writer has already filled this. Just return if already filled.\n    if clusterName.clusterName != \"\" {\n        return clusterName.clusterName, nil\n    }\n    // Only 1 writer will ever reach here.\n    var err error\n    clusterName.clusterName, err = fetchClusterName()\n    if err != nil {\n        return \"\", err\n    }\n    return clusterName.clusterName, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74950269/global-variable-concurrent-use-for-write-once-read-many-usecase",
    "body": "type LockSetter interface {\n\tLock()\n\tUnlock()\n\tSet(value string)\n\tGet() string\n\tFetch() (string, error)\n}\ntype LockSetVariable struct {\n\tlock       *sync.Mutex\n\tmyVariable string\n}\nfunc (l *LockSetVariable) Lock() {\n\tl.lock.Lock()\n}\nfunc (l *LockSetVariable) Unlock() {\n\tl.lock.Unlock()\n}\nfunc (l *LockSetVariable) Set(value string) {\n\tl.myVariable = value\n}\nfunc (l *LockSetVariable) Get() string {\n\treturn l.myVariable\n}\nfunc (l *LockSetVariable) Fetch() (string, error) {\n\tnow := time.Now()\n\tl.myVariable = now.Format(\"2006\")\n\treturn \"\", nil\n}\nfunc GetValue(param LockSetter) (string, error) {\n\tparam.Lock()\n\tdefer param.Unlock()\n\n\tv := param.Get()\n\tif v == \"\" {\n\t\tnewV, err := param.Fetch()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\n\t\tparam.Set(newV)\n\t}\n\n\treturn v, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74830594/created-compose-project-not-listed-when-using-docker-compose-package-in-go",
    "body": "func (s *service) create(ctx context.Context) {\n\tyamlFilePath := \"/home/ubuntu/junk/wp/docker-compose.yml\"\n\toptions, err := cli.NewProjectOptions(\n\t\t[]string{yamlFilePath},\n\t\tcli.WithResolvedPaths(true),\n\t\tcli.WithOsEnv,\n\t\tcli.WithDotEnv,\n\t\tcli.WithConfigFileEnv,\n\t\tcli.WithDefaultConfigPath,\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tproject, err := cli.ProjectFromOptions(options)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor i, s := range project.Services {\n\t\ts.CustomLabels = map[string]string{\n\t\t\tapi.ProjectLabel:     project.Name,\n\t\t\tapi.ServiceLabel:     s.Name,\n\t\t\tapi.VersionLabel:     api.ComposeVersion,\n\t\t\tapi.WorkingDirLabel:  project.WorkingDir,\n\t\t\tapi.ConfigFilesLabel: strings.Join(project.ComposeFiles, \",\"),\n\t\t\tapi.OneoffLabel:      \"False\", // default, will be overridden by `run` command\n\t\t}\n\t\tif options.EnvFile != \"\" {\n\t\t\ts.CustomLabels[api.EnvironmentFileLabel] = options.EnvFile\n\t\t}\n\t\tproject.Services[i] = s\n\t}\n\tif err := s.apiService.Create(ctx, project, api.CreateOptions{}); err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74828613/cookie-set-on-krakend",
    "body": "{\n  \"version\": 3,\n  \"plugin\": {\n    \"pattern\": \".so\",\n    \"folder\": \".\"\n  },\n  \"endpoints\": [\n    {\n      \"endpoint\": \"/v1/get-server-cookie\",\n      \"output_encoding\": \"no-op\",\n      \"backend\": [\n        {\n          \"encoding\": \"no-op\",\n          \"host\": [\n            \"http://dummy.restapiexample.com\"\n          ],\n          \"url_pattern\": \"/api/v1/employees\",\n          \"extra_config\": {\n            \"plugin/http-client\": {\n              \"name\": \"aci-http-client-plugin\"\n            }\n          }\n        }\n      ]\n    }\n  ]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74746667/s3-sdk-for-golang-putbucketlifecycleconfiguration-error-error-setting-lifecycle",
    "body": "&s3.LifecycleRule{\n\t\t\t\t\tID: aws.String(\"retention-daily\"),\n\t\t\t\t\tFilter: &s3.LifecycleRuleFilter{\n\t\t\t\t\t\tAnd: &s3.LifecycleRuleAndOperator{\n\t\t\t\t\t\t\tObjectSizeGreaterThan: aws.Int64(30720),\n\t\t\t\t\t\t\tTags: []*s3.Tag{&s3.Tag{\n\t\t\t\t\t\t\t\tKey:   aws.String(\"retention-type-daily\"),\n\t\t\t\t\t\t\t\tValue: aws.String(\"true\"),\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTransitions: []*s3.Transition{\n\t\t\t\t\t\t&s3.Transition{\n\t\t\t\t\t\t\tDays:         aws.Int64(3),\n\t\t\t\t\t\t\tStorageClass: aws.String(s3.TransitionStorageClassDeepArchive),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tStatus: aws.String(s3.ExpirationStatusEnabled),\n\t\t\t\t},"
  },
  {
    "url": "https://stackoverflow.com/questions/74738091/client-go-var-set-from-function-which-returns-empty-interface-cant-seem-to-use",
    "body": "} else {\n\t\tobj := obj.(*v1.Secret)   // <=== this is the \"magic\" line\n\t\tannotations := obj.ObjectMeta.Annotations\n\t\tsyncEnabled := annotations[operatorName+\"/sync-enabled\"]\n\t\tcmEnabled := annotations[operatorName+\"/acm-enabled\"]\n\t\tsmEnabled := annotations[operatorName+\"/asm-enabled\"]\n\t\tklog.Infof(\"add/update? %#v\", obj)\n\t\t// Note that you also have to check the uid if you have a local controlled resource, which\n\t\t// is dependent on the actual instance, to detect that a Secret was recreated with the same name\n\t\tklog.Infof(\"Sync/Add/Update for Secret %s\", obj.(*v1.Secret).GetName())\n\t\t//\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74719037/how-to-generate-an-rsa-public-private-key-pair-for-cloudfront",
    "body": "#!/usr/bin/env ruby\nrequire 'rubygems'\nrequire 'aws-sdk-cloudfront'\nrequire 'openssl'\nkey = OpenSSL::PKey::RSA.new 2048\nopen 'private_key.pem', 'w' do |io| io.write key.to_pem end\nopen 'public_key.pem', 'w' do |io| io.write key.public_key.to_pem end\ncloudfront_public_content = File.read('public_key.pem')\ncloudfront_client = Aws::CloudFront::Client.new()\ncloudfront_public_key_resp = cloudfront_client.create_public_key({\n  public_key_config: {\n    caller_reference: \"test-key-ruby\",\n    name: \"test-ruby-key\",\n    encoded_key: cloudfront_public_content,\n    comment: \"string\",\n  },\n})\np cloudfront_public_key_resp.public_key.id"
  },
  {
    "url": "https://stackoverflow.com/questions/74716437/comparing-two-files-in-go-and-any-new-lines-get-copied-to-a-new-file",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\nvar m = map[string]bool{}\nfunc Compare() {\n\t// open the first document\n\tfile1, _ := os.Open(\"Links_New.txt\")\n\tdefer file1.Close()\n\t// open the second document\n\tfile2, _ := os.Open(\"Links_Old.txt\")\n\tdefer file2.Close()\n\t// create scanners for both documents\n\tr1 := bufio.NewReader(file1)\n\t// initialize a counter for the number of New lines\n\tNewLines := 0\n\t// loop through each line in the first file\n\tfor {\n\t\tline, _, c := r1.ReadLine()\n\t\tm[string(line)] = true\n\t\tif c == io.EOF {\n\t\t\tbreak\n\t\t}\n\t}\n\tr2 := bufio.NewReader(file2)\n\tfor {\n\t\tline, _, c := r2.ReadLine()\n\t\tif !m[string(line)] {\n\t\t\tNewLines++\n\t\t\tfmt.Printf(\"%s\\n\", line)\n\t\t}\n\t\tif c == io.EOF {\n\t\t\tbreak\n\t\t}\n\t}\n\t// print the number of new lines\n\tfmt.Println(\"\\n\\n Number of new lines:\", NewLines)\n}\nfunc main() {\n\tCompare()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74692580/mapstructure-tags-not-used-by-viper-when-writing-to-yaml",
    "body": "type config {\n    Contexts       map[string]Context `yaml:\"contexts\"`\n    CurrentContext string             `yaml:\"current-context\"`\n    Tokens         []Token            `yaml:\"tokens\"`\n}\ntype Context struct {\n    Endpoint         string   `yaml:\"endpoint,omitempty\"`\n    Token            string   `yaml:\"token,omitempty\"`\n    Platform         string   `yaml:\"platform\"`\n    Components       []string `yaml:\"components,omitempty\"`\n    Channel          string   `yaml:\"channel,omitempty\"`\n    Version          string   `yaml:\"version,omitempty\"`\n    EnforcedProvider string   `yaml:\"enforced-provider,omitempty\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74675281/fetch-data-from-html-by-net-html",
    "body": "func getCounts(respBody io.Reader) (counts []string, err error) {\n\tz := html.NewTokenizer(respBody)\n\tfor {\n\t\tif z.Next() == html.ErrorToken {\n\t\t\tif err := z.Err(); err != io.EOF {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t\tt := z.Token()\n\t\tif t.Type == html.StartTagToken && t.Data == \"div\" {\n\t\t\tfor _, a := range t.Attr {\n\t\t\t\tif a.Key == \"class\" && a.Val == \"profile-data__count-number\" {\n\t\t\t\t\tif z.Next() == html.TextToken {\n\t\t\t\t\t\tcounts = append(counts, z.Token().Data)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn counts, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74666643/how-to-handle-insert-on-conflict-in-a-has-many-association-in-gorm-create-error",
    "body": "package main\nimport (\n\t\"gorm.io/driver/postgres\"\n\t\"gorm.io/gorm\"\n)\ntype User struct {\n\tId    int\n\tName  string `gorm:\"uniqueIndex:idx_name\"`\n\tPosts []Post\n}\ntype Post struct {\n\tId     int\n\tTitle  string `gorm:\"uniqueIndex:idx_title\"`\n\tUserId int\n}\nfunc main() {\n\tdsn := \"host=localhost user=postgres password=postgres dbname=postgres port=5432 sslmode=disable\"\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdb.AutoMigrate(&Post{})\n\tdb.AutoMigrate(&User{})\n\tdb.Create(&User{\n\t\tName: \"john doe\",\n\t\tPosts: []Post{\n\t\t\t{Title: \"first\"},\n\t\t\t{Title: \"second\"}, // to generate an error change to \"first\"\n\t\t},\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74649202/golang-libvirt-guest-agent-not-available",
    "body": "type qemuStatusResponse struct {\n\tReturn struct {\n\t\tExitcode int    `json:\"exitcode,omitempty\"`\n\t\tOutData  string `json:\"out-data,omitempty\"`\n\t\tExited   bool   `json:\"exited,omitempty\"`\n\t\tErrData  string `json:\"err-data,omitempty\"`\n\t} `json:\"return,omitempty\"`\n}\nfunc (l *LibvirtInstance) waitForCompletion(ctx context.Context, pid int, domain *libvirt.Domain) (response *qemuStatusResponse, err error) {\n\tresponse = &qemuStatusResponse{}\n\tticker := time.NewTicker(500 * time.Millisecond)\n\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tresult, err := domain.QemuAgentCommand(\n\t\t\t\tfmt.Sprintf(`\n\t\t\t\t{\n\t\t\t\t\t\"execute\": \"guest-exec-status\",\n\t\t\t\t\t\"arguments\": {\n\t\t\t\t\t\t\"pid\": %d\n\t\t\t\t\t}\n\t\t\t\t\t}`, pid),\n\t\t\t\tlibvirt.DOMAIN_QEMU_AGENT_COMMAND_BLOCK, 0)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif err := json.Unmarshal([]byte(result), response); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif response.Return.Exited {\n\t\t\t\treturn response, nil\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, ctx.Err()\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74640513/how-to-convert-hbitmap-to-image-image",
    "body": "rect := image.Rect(0, 0, 1920, 1080)\nimg := image.NewRGBA(rect)\nrc := w32.GetClientRect(hwnd)\n\tif rc != nil {\n\t\twidth := int(rc.Right) - int(rc.Left)\n\t\theight := int(rc.Bottom) - int(rc.Top)\n\t\thwndwin := win.HWND(hwnd)\n\t\thdc := win.GetDC(hwndwin)\n\t\tif hdc == 0 {\n\t\t\tpanic(\"GetDC failed\")\n\t\t}\n\t\tdefer win.ReleaseDC(hwndwin, hdc)\n\t\tmemory_device := win.CreateCompatibleDC(hdc)\n\t\tif memory_device == 0 {\n\t\t\tpanic(\"CreateCompatibleDC failed\")\n\t\t}\n\t\tdefer win.DeleteDC(memory_device)\n\t\tbitmap := win.CreateCompatibleBitmap(hdc, int32(width), int32(height))\n\t\tif bitmap == 0 {\n\t\t\tpanic(\"CreateCompatibleBitmap failed\")\n\t\t}\n\t\tdefer win.DeleteObject(win.HGDIOBJ(bitmap))\n\t\tvar header win.BITMAPINFOHEADER\n\t\theader.BiSize = uint32(unsafe.Sizeof(header))\n\t\theader.BiPlanes = 1\n\t\theader.BiBitCount = 32\n\t\theader.BiWidth = int32(width)\n\t\theader.BiHeight = int32(-height)\n\t\theader.BiCompression = win.BI_RGB\n\t\theader.BiSizeImage = 0\n\t\t// GetDIBits balks at using Go memory on some systems. The MSDN example uses GlobalAlloc\n\t\t// https://docs.microsoft.com/en-gb/windows/desktop/gdi/capturing-an-image\n\t\tbitmapDataSize := uintptr(((int64(width)*int64(header.BiBitCount) + 31) / 32) * 4 * int64(height))\n\t\thmem := win.GlobalAlloc(win.GMEM_MOVEABLE, bitmapDataSize)\n\t\tdefer win.GlobalFree(hmem)\n\t\tmemptr := win.GlobalLock(hmem)\n\t\tdefer win.GlobalUnlock(hmem)\n\t\told := win.SelectObject(memory_device, win.HGDIOBJ(bitmap))\n\t\tif old == 0 {\n\t\t\tpanic(\"SelectObject failed\")\n\t\t}\n\t\tdefer win.SelectObject(memory_device, old)\n\t\tif !win.BitBlt(memory_device, 0, 0, int32(width), int32(height), hdc, int32(0), int32(0), win.SRCCOPY) {\n\t\t\tpanic(\"BitBlt failed\")\n\t\t}\n\t\tif win.GetDIBits(hdc, bitmap, 0, uint32(height), (*uint8)(memptr), (*win.BITMAPINFO)(unsafe.Pointer(&header)), win.DIB_RGB_COLORS) == 0 {\n\t\t\tpanic(\"GetDIBits failed\")\n\t\t}\n\t\ti := 0\n\t\tsrc := uintptr(memptr)\n\t\tfor y := 0; y < height; y++ {\n\t\t\tfor x := 0; x < width; x++ {\n\t\t\t\tv0 := *(*uint8)(unsafe.Pointer(src))\n\t\t\t\tv1 := *(*uint8)(unsafe.Pointer(src + 1))\n\t\t\t\tv2 := *(*uint8)(unsafe.Pointer(src + 2))\n\t\t\t\t// BGRA => RGBA, and set A to 255\n\t\t\t\timg.Pix[i], img.Pix[i+1], img.Pix[i+2], img.Pix[i+3] = v2, v1, v0, 255\n\t\t\t\ti += 4\n\t\t\t\tsrc += 4\n\t\t\t}\n\t\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/74599727/when-signing-a-certificate-authority-key-identifier-is-copied-to-skid",
    "body": "func addAuthorityKeyIdentifier(c *openssl.Certificate) error {\n\tvar ctx C.X509V3_CTX\n\tC.X509V3_set_ctx(&ctx, nil, nil, nil, nil, 0)\n\t// this is ugly and very unsafe!\n\tcx509 := *(**C.X509)(unsafe.Pointer(c))\n\tcx509Issuer := cx509\n\tif c.Issuer != nil {\n\t\tcx509Issuer = *(**C.X509)(unsafe.Pointer(c.Issuer))\n\t}\n\tctx.issuer_cert = cx509Issuer\n\tcExtName := C.CString(\"authorityKeyIdentifier\")\n\tdefer C.free(unsafe.Pointer(cExtName))\n\tcExtValue := C.CString(\"keyid:always,issuer:always\")\n\tdefer C.free(unsafe.Pointer(cExtValue))\n\textension := C.X509V3_EXT_nconf(nil, &ctx, cExtName, cExtValue)\n\tif extension == nil {\n\t\treturn errors.New(\"failed to set 'authorityKeyIdentifier' extension\")\n\t}\n\tdefer C.X509_EXTENSION_free(extension)\n\taddResult := C.X509_add_ext(cx509, extension, -1)\n\tif addResult == 0 {\n\t\treturn errors.New(\"failed to set 'authorityKeyIdentifier' extension\")\n\t}\n\treturn nil\n}\nfunc addSKIDExtension(c *openssl.Certificate) error {\n\tvar ctx C.X509V3_CTX\n\tC.X509V3_set_ctx(&ctx, nil, nil, nil, nil, 0)\n\n\t// this is ugly and very unsafe!\n\tcx509 := *(**C.X509)(unsafe.Pointer(c))\n\t_ = cx509\n\tctx.subject_cert = cx509\n\t_ = ctx\n\tcExtName := C.CString(\"subjectKeyIdentifier\")\n\tdefer C.free(unsafe.Pointer(cExtName))\n\tcExtValue := C.CString(\"hash\")\n\tdefer C.free(unsafe.Pointer(cExtValue))\n\textension := C.X509V3_EXT_nconf(nil, &ctx, cExtName, cExtValue)\n\tif extension == nil {\n\t\treturn errors.New(\"failed to set 'subjectKeyIdentifier' extension\")\n\t}\n\tdefer C.X509_EXTENSION_free(extension)\n\t// adding itself as a subject\n\taddResult := C.X509_add_ext(cx509, extension, -1)\n\tif addResult == 0 {\n\t\treturn errors.New(\"failed to set 'subjectKeyIdentifier' extension\")\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74546101/how-to-update-an-array-object-in-dynamodb-golang",
    "body": "package main\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb\"\n\t\"github.com/aws/aws-sdk-go-v2/service/dynamodb/types\"\n)\nfunc main() {\n\tcfg, _ := GetAwsConfig()\n\tdynaClient := dynamodb.NewFromConfig(*cfg)\n\t// create table\n\tdynaClient.CreateTable(context.TODO(), &dynamodb.CreateTableInput{\n\t\tTableName: aws.String(\"colors\"),\n\t\tAttributeDefinitions: []types.AttributeDefinition{\n\t\t\t{\n\t\t\t\tAttributeName: aws.String(\"user\"),\n\t\t\t\tAttributeType: types.ScalarAttributeTypeS,\n\t\t\t},\n\t\t},\n\t\tKeySchema: []types.KeySchemaElement{\n\t\t\t{\n\t\t\t\tAttributeName: aws.String(\"user\"),\n\t\t\t\tKeyType:       types.KeyTypeHash,\n\t\t\t},\n\t\t},\n\t\tBillingMode: types.BillingModePayPerRequest,\n\t})\n\tdefer func() {\n\t\tdynaClient.DeleteTable(context.TODO(), &dynamodb.DeleteTableInput{\n\t\t\tTableName: aws.String(\"colors\"),\n\t\t})\n\t}()\n\t// load table\n\tdynaClient.PutItem(context.TODO(), &dynamodb.PutItemInput{\n\t\tTableName: aws.String(\"colors\"),\n\t\tItem: map[string]types.AttributeValue{\n\t\t\t\"user\":   &types.AttributeValueMemberS{Value: \"user1\"},\n\t\t\t\"colors\": &types.AttributeValueMemberS{Value: `[\"red\",\"green\",\"blue\"]`},\n\t\t},\n\t})\n\t// read colors\n\tvar colors []string\n\tvar colorString string\n\tres, _ := dynaClient.GetItem(context.TODO(), &dynamodb.GetItemInput{\n\t\tTableName: aws.String(\"colors\"),\n\t\tKey: map[string]types.AttributeValue{\n\t\t\t\"user\": &types.AttributeValueMemberS{Value: \"user1\"},\n\t\t},\n\t})\n\tattributevalue.Unmarshal(res.Item[\"colors\"], &colorString)\n\tjson.Unmarshal([]byte(colorString), &colors)\n\tfor k, v := range colors {\n\t\tfmt.Printf(\"k: %d\\tv: %q\\n\", k, v)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74454887/go-why-does-this-singular-goroutine-deadlock-when-using-a-waitgroup-while-uplo",
    "body": "  {\n   \"args\": {},\n   \"data\": \"\",\n   \"files\": {\n     \"file\": \"aaaaaaaaaa\\n\"\n   },\n   \"form\": {},\n   \"headers\": {\n-    \"Accept\": \"*/*\",\n-    \"Content-Length\": \"197\",\n-    \"Content-Type\": \"multipart/form-data; boundary=------------------------bd4a81e725230fa6\",\n+    \"Accept-Encoding\": \"gzip\",\n+    \"Content-Type\": \"multipart/form-data; boundary=2d4e7969789ed6ef6ff3e7b815db3aa040fd3994a34fbaedec85240dc5af\",\n     \"Host\": \"httpbin.org\",\n-    \"User-Agent\": \"curl/7.81.0\",\n-    \"X-Amzn-Trace-Id\": \"Root=1-63747739-2c1dab1b122b7e3a4db8ca79\"\n+    \"Transfer-Encoding\": \"chunked\",\n+    \"User-Agent\": \"Go-http-client/2.0\",\n+    \"X-Amzn-Trace-Id\": \"Root=1-63747872-2fbc85f81c6dde7e5b2091c4\"\n   },\n   \"json\": null,\n   \"origin\": \"47.242.15.156\",\n   \"url\": \"https://httpbin.org/post\"\n }"
  },
  {
    "url": "https://stackoverflow.com/questions/74454887/go-why-does-this-singular-goroutine-deadlock-when-using-a-waitgroup-while-uplo",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"strings\"\n)\nfunc main() {\n\tsource := strings.NewReader(strings.Repeat(\"a\", 1<<21))\n\tbuf := new(bytes.Buffer)\n\tmultipart := multipart.NewWriter(buf)\n\tpart, err := multipart.CreateFormFile(\"file\", \"test.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif _, err := io.Copy(part, source); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tmultipart.Close()\n\treq, err := http.NewRequest(http.MethodPost, \"https://api.anonfiles.com/upload\", buf)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treq.Header.Add(\"Content-Type\", multipart.FormDataContentType())\n\t// The following line is not required because the http client will set it\n\t// because the request body is a bytes.Buffer.\n\t// req.ContentLength = int64(buf.Len())\n\tclient := http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(string(body))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74437010/golang-switch-type-based-on-string-key-in-map",
    "body": "package main\nimport \"fmt\"\ntype RequestType interface {\n\tType() string // an interface with Type as a function\n}\n\ntype ParamsRequest struct {\n\tParam1 string\n\tParam2 string\n}\nfunc (p ParamsRequest) Type() string { // different Type() logic for different Request types\n\treturn fmt.Sprintf(\"%s,%s\", p.Param1, p.Param2)\n}\n\ntype OtherRequest struct {\n\tParam3 string\n\tParam4 string\n}\nfunc (o OtherRequest) Type() string {\n\treturn fmt.Sprintf(\"%s,%s\", o.Param3, o.Param4)\n}\nfunc main() {\n\tvar requestTypes = map[string]RequestType{\n\t\t\"base\": ParamsRequest{Param1: \"hi\", Param2: \"bye\"}, //error here (Cannot use ParamsRequest as the type RequestType)\n\t\t\"base2\": OtherRequest{},\n\t}\n\tmyFunction(requestTypes[\"base\"].Type())\n}\nfunc myFunction(paramTypeString string) {\n\tfmt.Printf(\"%s\\ndont know ...\\n\", paramTypeString)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74388429/panic-send-on-a-closed-channel-when-running-go-routine-in-foor-loop",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"sync\"\n)\ntype SearchResult struct {\n    line       string\n    lineNumber int\n}\ntype Display struct {\n    filePath string\n    SearchResult\n}\nvar wg sync.WaitGroup\nfunc (d Display) PrettyPrint() {\n    fmt.Printf(\"Line Number: %v\\nFilePath: %v\\nLine: %v\\n\\n\", d.lineNumber, d.filePath, d.line)\n}\nfunc searchLine(pattern string, line string, lineNumber int) (SearchResult, bool) {\n    if strings.Contains(line, pattern) {\n        return SearchResult{lineNumber: lineNumber + 1, line: line}, true\n    }\n    return SearchResult{}, false\n}\nfunc splitIntoLines(file string) []string {\n    lines := strings.Split(file, \"\\n\")\n    return lines\n}\nfunc fileFromPath(path string) string {\n    fileContent, err := ioutil.ReadFile(path)\n    if err != nil {\n        log.Fatal(err)\n    }\n    return string(fileContent)\n}\nfunc getRecursiveFilePaths(inputDir string) []string {\n    var paths []string\n    err := filepath.Walk(inputDir, func(path string, info fs.FileInfo, err error) error {\n        if err != nil {\n            fmt.Printf(\"prevent panic by handling failure accessing a path %q: %v\\n\", path, err)\n            return err\n        }\n        if !info.IsDir() {\n            paths = append(paths, path)\n        }\n        return nil\n    })\n    if err != nil {\n        fmt.Printf(\"Error walking the path %q: %v\\n\", inputDir, err)\n    }\n    return paths\n}\nfunc searchPaths(paths []string, pattern string) chan Display {\n    out := make(chan Display)\n    for _, path := range paths {\n        wg.Add(1)\n        go func(p string, w *sync.WaitGroup) { // as path var is changing value in the loop, it's better to provide it as a argument in goroutine\n            defer w.Done()\n            for _, display := range searchFile(p, pattern) {\n                out <- display\n            }\n        }(path, &wg)\n    }\n    return out\n}\nfunc searchFile(path string, pattern string) []Display {\n    var out []Display\n    input := fileFromPath(path)\n    lines := splitIntoLines(input)\n    for index, line := range lines {\n        if searchResult, ok := searchLine(pattern, line, index); ok {\n            out = append(out, Display{path, searchResult})\n        }\n    }\n    return out\n}\nfunc main() {\n    pattern := os.Args[1]\n    dirPath := os.Args[2]\n    paths := getRecursiveFilePaths(dirPath)\n    out := searchPaths(paths, pattern)\n\tgo func(){\n\t\twg.Wait() // waiting before closing the channel\n\t\tclose(out)\n\t}()\n\n\tcount := 0\n    for d := range out {\n\t\tfmt.Println(count)\n        d.PrettyPrint()\n\t\tcount += 1\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74354823/go-colly-returning-a-string-instead-of-a-slice-of-strings",
    "body": "package scraper\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/gocolly/colly\"\n\t\"github.com/gocolly/colly/extensions\"\n)\ntype Product struct {\n\tname      string\n\tfullPrice string\n\turl       string\n}\npackage scraper\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"github.com/gocolly/colly\"\n\t\"github.com/gocolly/colly/extensions\"\n)\ntype Product struct {\n\tname      string\n\tfullPrice string\n\turl       string\n}\nfunc Scraper(url string) []Product {\n\tproducts := make([]Product, 0)\n\tc := colly.NewCollector()\n\tcolly.AllowedDomains(\"www.brasiltronic.com.br\")\n\tc.OnHTML(\"ul.row\", func(e *colly.HTMLElement) {\n\t\te.ForEach(\"div.inner\", func(i int, h *colly.HTMLElement) {\n\t\t\tname := h.ChildText(\"div > div.information > h3.name.no-medium.no-tablet\")\n\t\t\tfullPrice := h.ChildText(\"strong.sale-price > span:nth-child(1)\")\n\t\t\treplacer := strings.NewReplacer(\"R$\", \"\", \",\", \".\")\n\t\t\tfullPrice = replacer.Replace(fullPrice)\n\t\t\turl = h.ChildAttr(\"div > div.information > a\", \"href\")\n\t\t\tproducts = append(products, Product{name: name, fullPrice: fullPrice, url: url})\n\t\t})\n\t})\n\tc.OnError(func(r *colly.Response, err error) {\n\t\tfmt.Println(\"Request URL:\", r.Request.URL, \"failed with response:\", r.Request, \"\\nError:\", err)\n\t})\n\t// Uses a random User-Agent in each request\n\textensions.RandomUserAgent(c)\n\tc.Visit(url)\n\treturn products\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74354823/go-colly-returning-a-string-instead-of-a-slice-of-strings",
    "body": "[{Fone de Ouvido Profissional AKG K92 com fio - Preto e Dourado  359.10 /fone-de-ouvido-profissional-akg-k92-com-fio-preto-e-dourado-p1331225} {Microfone de lapela JBL com fone de ouvido CSLM20  94.50 /microfone-de-lapela-jbl-com-fone-de-ouvido-cslm20-p1331251} {Fone de Ouvido Samson SR350 Over-ear Estéreo Preto  159.30 /fone-de-ouvido-over-ear-samson-sr350-estereo-preto-p1331708} {Fone de Ouvido Sennheiser CX100 Branco  159.30 /fone-de-ouvido-in-ear-int\nra-auricular-sennheiser-cx100-branco-p1330663} {Fone de Ouvido Audio-Technica ATH-M20xBT sem Fio com Bluetooth Preto  699.30 /fone-de-ouvido-sem-fio-audio-technica-ath-m20xbt-com-bluetooth-preto-p1331720} {Fone de Ouvido Sennheis\ner HD100 com fio (Preto)  269.10 /fone-de-ouvido-sennheiser-hd100-preto-headphone-stereo-on-ear-com-fio-p1330153} {Fone de Ouvido Sennheiser HD400S com fio (Preto)  519.30 /fone-de-ouvido-sennheiser-hd400s-com-fio-cor-preto-p1330\n112} {Fone de Ouvido Audio-Technica ATH-M40x Profissional para Monitoração com fio - Preto  879.30 /fone-de-ouvido-audio-technica-ath-m40x-profissional-para-monitoracao-com-fio-preto-p1330999} {Fone de Ouvido Audio-Technica ATH-M\n20x Profissional para Monitoração com fio - Preto  419.40 /fone-de-ouvido-audio-technica-ath-m20x-profissional-para-monitoracao-com-fio-preto-p1330997} {Fone de Ouvido Audio-Technica ATH-M30x Profissional para Monitoração com fio\n - Preto  619.20 /fone-de-ouvido-audio-technica-ath-m30x-profissional-para-monitoracao-com-fio-preto-p1330998} {Fone de Ouvido Audio-Technica ATH-AVC400 extra-auricualres SonicPro com fio - Preto  373.50 /fone-de-ouvido-audio-tec\nhnica-ath-avc400-extra-auricualres-sonicpro-com-fio-preto-p1330994} {Fone de Ouvido Audio-Technica ATH-M50x Profissional para Monitoração com fio - Preto  1.219.50 /fone-de-ouvido-audio-technica-ath-m50x-profissional-para-monitor\nacao-com-fio-preto-p1331000} {Toca Discos Audio-Technica AT-LP60XHP-GM Automático Belt-Drive com Fone de Ouvido ATH-250AV ...  1.399.50 /toca-discos-automatico-audio-technica-at-lp60xhp-belt-drive-com-fone-de-ouvido-ath-250av-gra\nfite-p1331501} {Fone de Ouvido Sem Fio Sennheiser RS2000 - Preto  1.479.60 /fone-de-ouvido-sem-fio-sennheiser-rs2000-preto-p1331279} {Fone de Ouvido Profissional AKG K361-BT Dobrável - Preto  769.50 /fone-de-ouvido-profissional-a\nkg-k361-bt-dobravel-preto-p1331228} {Kit Microfone Samson C01U Pro PodCasting Pack SAC01UPROPK  1.599.30 /kit-microfone-podcasting-samson-c01u-pro-pack-sac01upropk-p1331661} {Fone De Ouvido Profissional AKG K371-BT com Bluetooth\n- Preto  1.009.80 /fone-de-ouvido-profissional-akg-k371-bt-com-bluetooth-preto-p1331231} {Headset Audio-Technica ATH-101USB Single-Ear com fio USB - Preto  219.60 /headset-audio-technica-ath-101usb-single-ear-com-fio-usb-preto-p1\n331030} {Fone de Ouvido Audio-Technica ATH-R70x Profissional de referência abertos com fio - Preto  2.559.60 /fone-de-ouvido-audio-technica-ath-r70x-profissional-de-referencia-abertos-com-fio-preto-p1330975} {Kit Microfone Estudi\no Zoom ZUM-2 PMP com Headphone e tripé de mesa  1.129.50 /kit-microfone-estudio-zoom-zum-2-pmp-com-headphone-e-tripe-de-mesa-p1331536} {Headset Audio-Technica ATH-102USB Dual-Ear com fio USB - Preto  224.10 /headset-audio-technic\na-ath-102usb-dual-ear-com-fio-usb-preto-p1331028} {Fones de ouvido de monitoramento Sennheiser IE 40 PRO Clear intra-auricular  759.60 /fone-de-ouvido-de-monitoramento-sennheiser-ie-40-pro-clear-intra-auricular-p1330695} {Headset\n Gamer Audio-Technica ATH-G1WL Premium para Jogos Wireless - Preto  1.649.70 /headset-gamer-audio-technica-ath-g1wl-premium-para-jogos-wireless-preto-p1330996} {Microfone Samson Q9U Cardióide XLR/USB  1.619.10 /microfone-samson-q\n9u-cardioide-xlr-usb-p1331659}]"
  },
  {
    "url": "https://stackoverflow.com/questions/74320577/binary-encoding-decoding-file-in-golang-gives-different-checksum",
    "body": "import \"encoding/binary\"\n// You need a consistent byte order for reading and writing multi-byte data types\nconst order = binary.LittleEndian\nvar dataToWrite = []byte{ ... ... ... }\nvar err error\n// To write a recoverable array of varying length\nvar w io.Writer\n// First, encode the length of data that will be written\nerr = binary.Write(w, order, int64(len(dataToWrite)))\n// Check error\nerr = binary.Write(w, order, dataToWrite)\n// Check error\n// To read a variable length array\nvar r io.Reader\nvar dataLen int64\n// First, we need to know the length of data to be read\nerr = binary.Read(r, order, &dataLen)\n// Check error\n// Allocate a slice to hold the expected amount of data\ndataReadIn := make([]byte, dataLen)\nerr = binary.Read(r, order, dataReadIn)\n// Check error"
  },
  {
    "url": "https://stackoverflow.com/questions/74318787/pgx-copyfrom-with-where-condition",
    "body": "func TestConnCopyFrom(t *testing.T) {\n\tt.Parallel()\n\tpgConn, err := pgconn.Connect(context.Background(), os.Getenv(\"PGX_TEST_DATABASE\"))\n\trequire.NoError(t, err)\n\tdefer closeConn(t, pgConn)\n\tif pgConn.ParameterStatus(\"crdb_version\") != \"\" {\n\t\tt.Skip(\"Server does not fully support COPY FROM (https://www.cockroachlabs.com/docs/v20.2/copy-from.html)\")\n\t}\n\t_, err = pgConn.Exec(context.Background(), `create temporary table foo(\n\t\ta int4,\n\t\tb varchar\n\t)`).ReadAll()\n\trequire.NoError(t, err)\n\tsrcBuf := &bytes.Buffer{}\n\tinputRows := [][][]byte{}\n\tfor i := 0; i < 1000; i++ {\n\t\ta := strconv.Itoa(i)\n\t\tb := \"foo \" + a + \" bar\"\n\t\tinputRows = append(inputRows, [][]byte{[]byte(a), []byte(b)})\n\t\t_, err = srcBuf.Write([]byte(fmt.Sprintf(\"%s,\\\"%s\\\"\\n\", a, b)))\n\t\trequire.NoError(t, err)\n\t}\n\tct, err := pgConn.CopyFrom(context.Background(), srcBuf, \"COPY foo FROM STDIN WITH (FORMAT csv)\")\n\trequire.NoError(t, err)\n\tassert.Equal(t, int64(len(inputRows)), ct.RowsAffected())\n\tresult := pgConn.ExecParams(context.Background(), \"select * from foo\", nil, nil, nil, nil).Read()\n\trequire.NoError(t, result.Err)\n\tassert.Equal(t, inputRows, result.Rows)\n\tensureConnValid(t, pgConn)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74299267/create-zip-with-java-program-and-while-unzip-using-golang-getting-issue-as-zli",
    "body": "public static byte[] createZipForLicenses(String string) throws IOException {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ZipOutputStream zipOutputStream = new ZipOutputStream(out);\n    zipOutputStream.setLevel(Deflater.DEFAULT_COMPRESSION);\n    if (string != null && string.length() > 0) {\n        ZipEntry zipEntry = new ZipEntry(\"data\");\n        zipOutputStream.putNextEntry(zipEntry);\n        zipOutputStream.write(string.getBytes(\"UTF-8\"));\n        zipOutputStream.closeEntry();\n    }\n    zipOutputStream.close();\n    return out.toByteArray();\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74299267/create-zip-with-java-program-and-while-unzip-using-golang-getting-issue-as-zli",
    "body": "(PK0506) End of Central directory record\n========================================\n    - location:                                     116 (0x00000074) bytes\n    - size:                                         22 bytes\n    part number of this part (0000):                1\n    part number of start of central dir (0000):     1\n    number of entries in central dir in this part:  1\n    total number of entries in central dir:         1\n    size of central dir:                            50 (0x00000032) bytes\n    relative offset of central dir:                 66 (0x00000042) bytes\n    zipfile comment length:                         0 bytes\n(PK0102) Central directory\n==========================\n    - location:                                     66 (0x00000042) bytes\n    - size:                                         54 bytes\n    total entries:                                  1\n#1 (PK0102) [UTF-8] data\n------------------------\n    - location:                                     66 (0x00000042) bytes\n    - size:                                         50 bytes\n    part number of this part (0000):                1\n    relative offset of local header:                0 (0x00000000) bytes\n    version made by operating system (00):          MS-DOS, OS/2, NT FAT\n    version made by zip software (20):              2.0\n    operat. system version needed to extract (00):  MS-DOS, OS/2, NT FAT\n    unzip software version needed to extract (20):  2.0\n    general purpose bit flag (0x0808) (bit 15..0):  0000.1000 0000.1000\n      file security status  (bit 0):                not encrypted\n      data descriptor       (bit 3):                yes\n      strong encryption     (bit 6):                no\n      UTF-8 names          (bit 11):                yes\n    compression method (08):                        deflated\n      compression sub-type (deflation):             normal\n    file last modified on (0x5563 0x542A):          2022-11-03 10:33:20\n    32-bit CRC value:                               0x373555E7\n    compressed size:                                16 bytes\n    uncompressed size:                              14 bytes\n    length of filename:                             4\n                                                    UTF-8\n    64 61 74 61                                     data\n    length of file comment:                         0 bytes\n    internal file attributes:                       0x0000\n      apparent file type:                           binary\n    external file attributes:                       0x00000000\n      WINDOWS   (0x00):                             none\n      POSIX (0x000000):                             ?---------\n(PK0304) ZIP entries\n====================\n    total entries:                                  1\n#1 (PK0304) [UTF-8] data\n------------------------\n    - location:                                     0 (0x00000000) bytes\n    - size:                                         34 bytes\n    operat. system version needed to extract (00):  MS-DOS, OS/2, NT FAT\n    unzip software version needed to extract (20):  2.0\n    general purpose bit flag (0x0808) (bit 15..0):  0000.1000 0000.1000\n      file security status  (bit 0):                not encrypted\n      data descriptor       (bit 3):                yes\n      strong encryption     (bit 6):                no\n      UTF-8 names          (bit 11):                yes\n    compression method (08):                        deflated\n      compression sub-type (deflation):             normal\n    file last modified on (0x5563 0x542A):          2022-11-03 10:33:20\n    32-bit CRC value:                               0x00000000\n    compressed size:                                0 bytes\n    uncompressed size:                              0 bytes\n    length of filename:                             4\n                                                    UTF-8\n    64 61 74 61                                     data\n#1 (PK0708) Data descriptor\n---------------------------\n    - location:                                     50 (0x00000032) bytes\n    - size:                                         16 bytes\n    32-bit CRC value:                               0x373555E7\n    compressed size:                                16 bytes\n    uncompressed size:                              14 bytes"
  },
  {
    "url": "https://stackoverflow.com/questions/74284328/how-to-perform-precission-deviding-in-golang-equal-to-bigdecimal-devidebigdecim",
    "body": "@Test\nvoid test() {\n    BigDecimal a = BigDecimal.valueOf(125999999.99999999533706329657434253022074699401855468750000000000);\n    BigDecimal b = BigDecimal.valueOf(5600000.0000000005329070518200751394033432006835937500000000000);\n    BigDecimal resultA = a.divide(new BigDecimal(365), MathContext.DECIMAL32);\n    System.out.println(resultA); // resultA is 345205.5\n    BigDecimal resultB = b.divide(new BigDecimal(365), MathContext.DECIMAL32);\n    System.out.println(resultB); // resultB is 15342.47\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74284328/how-to-perform-precission-deviding-in-golang-equal-to-bigdecimal-devidebigdecim",
    "body": "func TestXxx(t *testing.T) {\n\ta := decimal.NewFromFloat(125999999.99999999533706329657434253022074699401855468750000000000)\n\tb := decimal.NewFromFloat(5600000.0000000005329070518200751394033432006835937500000000000)\n\tresultAWithPrec1 := a.DivRound(decimal.NewFromInt(365), 1)\n\tfmt.Printf(\"%v\\n\", resultAWithPrec1.String()) // result is 345205.5 (Correct)\n\tresultBWithPrec1 := b.DivRound(decimal.NewFromInt(365), 1)\n\tfmt.Printf(\"%v\\n\", resultBWithPrec1.String()) // result is 15342.5 (Incorrect)\n\tresultAWithPrec2 := a.DivRound(decimal.NewFromInt(365), 2)\n\tfmt.Printf(\"%v\\n\", resultAWithPrec2.String()) // result is 345205.48 (Incorrect)\n\tresultBWithPrec2 := b.DivRound(decimal.NewFromInt(365), 2)\n\tfmt.Printf(\"%v\\n\", resultBWithPrec2.String()) // result is 15342.47 (Correct)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74262263/scheduler-worker-cluster-without-port-forwarding",
    "body": "syntax = \"proto3\";\nimport \"google/protobuf/empty.proto\";\nservice Scheduler {\n    rpc GetJobs(GetJobsRequest) returns (stream GetJobsResponse) {}\n    rpc ReportWorkerStatus(stream ReportWorkerStatusRequest) returns (google.protobuf.Empty) {}\n    rpc ReportJobStatus(stream JobStatus) returns (stream JobAction) {}\n}\nenum JobType {\n    JOB_TYPE_UNSPECIFIED = 0;\n    JOB_TYPE_CONSOLE = 1;\n    JOB_TYPE_EXEC = 2;\n}\nmessage GetJobsRequest {\n    // List of job types this worker is willing to accept.\n    repeated JobType types = 1;\n}\nmessage GetJobsResponse {\n    string jobId = 0;\n    JobType type = 1;\n    string fileName = 2;\n    bytes fileContent = 3;\n    // etc.\n}\nmessage ReportWorkerStatusRequest {\n    float cpuLoad = 0;\n    uint64 availableDiskSpace = 1;\n    uint64 availableMemory = 2;\n    // etc.\n    // List of filenames or file hashes, or whatever else you need to precisely\n    // report the presence of files.\n    repeated string haveFiles = 2;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74253836/split-data-inside-parenthesis-to-named-groups-using-regex-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nfunc myRegx(s string) (n string, o []string, v []string) {\n\tregx := regexp.MustCompile(`(\\S+) \\(([>=<]+)\\s+([\\d\\.]*)(,\\s+([>=<]+)\\s+([\\d.]+))?\\)`)\n\tb := regx.FindStringSubmatch(s)\n\tn = b[1]\n\tif len(b) < 4 {\n\t\to = append(o, b[2])\n\t\tv = append(v, b[3])\n\t} else {\n\t\to = append(o, b[2])\n\t\tv = append(v, b[3])\n\t\to = append(o, b[5])\n\t\tv = append(v, b[6])\n\t}\n\treturn n, o, v\n}\nfunc main() {\n\tn, o, v := myRegx(\"b (>= 1.1, < 2.0)\")\n\tfmt.Printf(\"n: %v o:%v v:%v\\n\", n, o, v)\n\tn, o, v = myRegx(\"a (>= 1.1)\")\n\tfmt.Printf(\"n: %v o:%v v:%v\\n\", n, o, v)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74242032/go-regex-to-search-for-jira-during-clause-which-contains-escaped-quotes",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nvar duringRegex *regexp.Regexp\nfunc init() {\n\tduringRegex = regexp.MustCompile(`during.*\\(\"\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\",.*\"\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\"\\)|during.*\\(startOfMonth\\(\\),.*now\\(\\)\\)`)\n}\nfunc main() {\n\tjqlDuringBeginningOfMonthToEndOfMonth := \"project = SWB AND status changed from \\\"In Regression\\\" to (Done) during (\\\"2022-09-01\\\", \\\"2022-09-30\\\")\"\n\tjqlDuringStartOfMonthToNow := \"project = SWB AND status changed from \\\"In Regression\\\" to (Done) during (startOfMonth(), now())\"\n\tfmt.Printf(\"result: %s\", duringRegex.FindAllString(jqlDuringBeginningOfMonthToEndOfMonth, -1))\n\tfmt.Println()\n\tfmt.Printf(\"result: %s\", duringRegex.FindAllString(jqlDuringStartOfMonthToNow, -1))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74153891/how-do-you-compute-a-curseforge-api-fingerprint-for-a-wow-retail-addon",
    "body": "func isWhiteSpace(b byte) bool {\n\treturn b == '\\t' || b == '\\n' || b == '\\r' || b == ' '\n}\nfunc computeCurseForgeFingerprintNormalizedLength(buf *bytes.Buffer) int {\n\tvar len_no_whitespace int = 0\n\tbytes := buf.Bytes()\n\tfor i := 0; i < buf.Len(); i++ {\n\t\tchar := bytes[i]\n\t\tif !isWhiteSpace(char) {\n\t\t\tlen_no_whitespace++\n\t\t}\n\t}\n\treturn len_no_whitespace\n}\n// https://github.com/meza/curseforge-fingerprint/blob/b15012c026c56ca89fad90f8cf9a8e140616e2c0/src/addon/fingerprint.cpp#L36-L90\nfunc CalculateCurseForgeFingerprint(buf *bytes.Buffer) uint32 {\n\tconst multiplex = 1540483477\n\tlen := buf.Len()\n\tbytes := buf.Bytes()\n\tvar num1 uint32 = uint32(computeCurseForgeFingerprintNormalizedLength(buf))\n\tvar num2 uint32 = 1 ^ num1\n\tvar num3 uint32 = 0\n\tvar num4 uint32 = 0\n\tfor i := 0; i < len; i++ {\n\t\tb := bytes[i]\n\t\tif !isWhiteSpace(b) {\n\t\t\tnum3 |= uint32(b) << num4\n\t\t\tnum4 += 8\n\t\t\tif num4 == 32 {\n\t\t\t\tvar num6 uint32 = num3 * multiplex\n\t\t\t\tvar num7 uint32 = (num6 ^ num6>>24) * multiplex\n\t\t\t\tnum2 = num2*multiplex ^ num7\n\t\t\t\tnum3 = 0\n\t\t\t\tnum4 = 0\n\t\t\t}\n\t\t}\n\t}\n\tif num4 > 0 {\n\t\tnum2 = (num2 ^ num3) * multiplex\n\t}\n\tnum6 := (num2 ^ num2>>13) * multiplex\n\treturn num6 ^ num6>>15\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74031563/convert-ioctl-call-in-golang",
    "body": "const (\n\tIocNrBits           = 8\n\tIocTypeBits         = 8\n\tIocSizeBits         = 14\n\tIocNrShift          = 0\n\tIocRead     uintptr = 2\n\tIocWrite    uintptr = 2\n)\nconst (\n\tIocTypeShift = IocNrShift + IocNrBits\n\tIocSizeShift = IocTypeShift + IocTypeBits\n\tIocDirshift  = IocSizeShift + IocSizeBits\n)\nfunc IOC(dir, t, nr, size uintptr) uintptr {\n\treturn (dir << IocDirshift) |\n\t\t(t << IocTypeShift) |\n\t\t(nr << IocNrShift) |\n\t\t(size << IocSizeShift)\n}\nfunc IOWR(t, nr, size uintptr) uintptr {\n\treturn IOC(IocRead|IocWrite, t, nr, size)\n}\nfunc NVME_URING_CMD_IO() uintptr {\n\treturn IOWR('N', 0x80, 32)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74024866/how-to-deal-with-back-pressure-in-go-grpc",
    "body": "// NumStreamWorkers returns a ServerOption that sets the number of worker\n// goroutines that should be used to process incoming streams. Setting this to\n// zero (default) will disable workers and spawn a new goroutine for each\n// stream.\n//\n// # Experimental\n//\n// Notice: This API is EXPERIMENTAL and may be changed or removed in a\n// later release.\nfunc NumStreamWorkers(numServerWorkers uint32) ServerOption {\n\t// TODO: If/when this API gets stabilized (i.e. stream workers become the\n\t// only way streams are processed), change the behavior of the zero value to\n\t// a sane default. Preliminary experiments suggest that a value equal to the\n\t// number of CPUs available is most performant; requires thorough testing.\n\treturn newFuncServerOption(func(o *serverOptions) {\n\t\to.numServerWorkers = numServerWorkers\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74002279/iterating-over-methods-in-interface-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"reflect\"\n\t\"strings\"\n\t\"github.com/google/uuid\"\n)\nfunc main() {\n\tpipedTenantUUIDs := \"8df030a1-a057-4f53-a011-a2b1cff673a1|8df030a1-a057-4f53-a011-a2b1cff673a1\"\n\tso, responseCode, err := createTenantSearch(pipedTenantUUIDs)\n\tif err != nil {\n\t\tlog.Println(err, responseCode)\n\t}\n\tt := reflect.TypeOf(&so).Elem()\n\tv := reflect.ValueOf(&so).Elem()\n\tfor i := 0; i < t.NumMethod(); i++ {\n\t\tmethod := t.Method(i)\n\t\tif strings.HasPrefix(method.Name, \"Get\") {\n\t\t\tlog.Println(method.Name)\n\t\t\twhereVal := v.MethodByName(method.Name).Call(nil)\n\t\t\tlog.Println(whereVal[0])\n\t\t}\n\t}\n}\ntype iTenantSearch interface {\n\tmapTenantUUID(pipedString string) error\n\tGetTenantUUIDQueryInString() string\n}\ntype tenantSearch struct {\n\ttenantUUID []uuid.UUID\n}\nfunc (ts *tenantSearch) mapTenantUUID(pipedString string) error {\n\tsplitString := strings.Split(pipedString, \"|\")\n\tfor i := 0; i < len(splitString); i++ {\n\t\tparsedUUID, err := uuid.Parse(splitString[i])\n\t\tif err != nil {\n\t\t\tts.tenantUUID = []uuid.UUID{}\n\t\t\treturn fmt.Errorf(\"tenant uuid failed to parse: %s\", err)\n\t\t}\n\t\tts.tenantUUID = append(ts.tenantUUID, parsedUUID)\n\t}\n\treturn nil\n}\nfunc (ts *tenantSearch) GetTenantUUIDQueryInString() string {\n\tinString := \"\"\n\tif ts.tenantUUID != nil {\n\t\tinString = inString + `(tenant_uuid IN (`\n\t\tfor i, s := range ts.tenantUUID {\n\t\t\tif i == (len(ts.tenantUUID) - 1) {\n\t\t\t\tinString = inString + `UUID_TO_BIN('` + s.String() + `')`\n\t\t\t} else {\n\t\t\t\tinString = inString + `UUID_TO_BIN('` + s.String() + `'),`\n\t\t\t}\n\t\t}\n\t\tinString = inString + `))`\n\t}\n\treturn inString\n}\nfunc createTenantSearch(tenantUUIDs string) (iTenantSearch, int, error) {\n\tvar tso tenantSearch\n\terr := tso.mapTenantUUID(tenantUUIDs)\n\tif err != nil {\n\t\treturn nil, 400, err\n\t}\n\treturn &tso, 200, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73904960/how-to-get-inner-html-or-just-text-of-a-tag",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"strings\"\n\t\"golang.org/x/net/html\"\n)\nfunc main() {\n\ts := `\n    <a href=\"http://example.com/1\">Go to <b>example</b> 1</a>\n    <p>Some para text</p>\n    <a href=\"http://example.com/2\">Go to <b>example</b> 2</a>\n    `\n\tdoc, _ := html.Parse(strings.NewReader(s))\n\tvar nAnchor *html.Node\n\tvar sTxt string\n\tvar bufInnerHtml bytes.Buffer\n\tw := io.Writer(&bufInnerHtml)\n\tvar f func(*html.Node)\n\tf = func(n *html.Node) {\n\t\tif n.Type == html.ElementNode && n.Data == \"a\" {\n\t\t\tnAnchor = n\n\t\t}\n\t\tif nAnchor != nil {\n\t\t\tif n != nAnchor { // don't write the a tag and its attributes\n\t\t\t\thtml.Render(w, n)\n\t\t\t}\n\t\t\tif n.Type == html.TextNode {\n\t\t\t\tsTxt += n.Data\n\t\t\t}\n\t\t}\n\t\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\t\tf(c)\n\t\t}\n\t\tif n == nAnchor {\n\t\t\tfmt.Println(\"Text:\", sTxt)\n\t\t\tfmt.Println(\"InnerHTML:\", bufInnerHtml.String())\n\t\t\tsTxt = \"\"\n\t\t\tbufInnerHtml.Reset()\n\t\t\tnAnchor = nil\n\t\t}\n\t}\n\tf(doc)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73870312/create-dynamic-query-for-postgresql-in-golang-with-mapstringinterface-input",
    "body": "func prepareInsert(table string, params map[string]interface{}) string {\n\tcolumns := len(params)\n\tfieldSlice := make([]string, 0, columns)\n\tfor field, _ := range params {\n\t\tfieldSlice = append(fieldSlice, field)\n\t}\n\tfields := strings.Join(fieldSlice, \",\")\n\tplaceholders := prepareQueryPlaceholders(1, columns)\n\treturn fmt.Sprintf(`INSERT INTO %s (%s) VALUES (%s) RETURNING %s`, table, fields, placeholders, fields)\n}\nfunc prepareQueryPlaceholders(start, quantity int) string {\n\tplaceholders := make([]string, 0, quantity)\n\tend := start + quantity\n\tfor i := start; i < end; i++ {\n\t\tplaceholders = append(placeholders, strings.Join([]string{\"$\", strconv.Itoa(i)}, \"\"))\n\t}\n\treturn strings.Join(placeholders, \",\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73815724/how-to-build-classes-protobuf-protoc-from-a-go-based-project-cortex",
    "body": "git clone https://github.com/cortexproject/cortex.git\ncd cortex/pkg/cortexpb\ngo get\ngo mod vendor\ncd ../..  # Root of the cloned cortex project\nmkdir python\n# Don't forget to include the vendor directory\nprotoc -I=vendor -I=pkg --python_out=python pkg/cortexpb/cortex.proto\n# You may need to compile others from vendor to get the python module working\nprotoc -I=vendor --python_out=python vendor/github.com/gogo/protobuf/gogoproto/gogo.proto\n# Populate missing __init__.py files\nfind python -type d -exec touch {}/__init__.py ';'"
  },
  {
    "url": "https://stackoverflow.com/questions/73752481/unable-to-create-a-handler-that-responds-with-error-in-go-to-cause-a-retry",
    "body": "func DefaultRetryPolicy() func(ctx context.Context, resp *http.Response, err error) (bool, error) {\n\treturn func(ctx context.Context, resp *http.Response, err error) (bool, error) {\n\t\t// do not retry on context.Canceled or context.DeadlineExceeded\n\t\t//fmt.Printf(\"jkajsuiohsd %v\\n\", ctx.Err())\n\t\tif ctx.Err() != nil {\n\t\t\treturn false, ctx.Err()\n\t\t}\n\t\tif err != nil {\n\t\t\tif v, ok := err.(*url.Error); ok {\n\t\t\t\t// Don't retry if the error was due to too many redirects.\n\t\t\t\tif redirectsErrorRegex.MatchString(v.Error()) {\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\t\t\t\t// Don't retry if the error was due to an invalid protocol scheme.\n\t\t\t\tif schemeErrorRegex.MatchString(v.Error()) {\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\t\t\t\t// Don't retry if the error was due to TLS cert verification failure.\n\t\t\t\tif _, ok := v.Err.(x509.UnknownAuthorityError); ok {\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The error is likely recoverable so retry.\n\t\t\treturn true, nil\n\t\t}\n        //EXPECT HANDLING BASED ON STATUS CODES, BUT ABSENT\n\t\treturn false, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73752481/unable-to-create-a-handler-that-responds-with-error-in-go-to-cause-a-retry",
    "body": "func baseRetryPolicy(resp *http.Response, err error) (bool, error) {\n\tif err != nil {\n\t\tif v, ok := err.(*url.Error); ok {\n\t\t\t// Don't retry if the error was due to too many redirects.\n\t\t\tif redirectsErrorRe.MatchString(v.Error()) {\n\t\t\t\treturn false, v\n\t\t\t}\n\t\t\t// Don't retry if the error was due to an invalid protocol scheme.\n\t\t\tif schemeErrorRe.MatchString(v.Error()) {\n\t\t\t\treturn false, v\n\t\t\t}\n\t\t\t// Don't retry if the error was due to TLS cert verification failure.\n\t\t\tif notTrustedErrorRe.MatchString(v.Error()) {\n\t\t\t\treturn false, v\n\t\t\t}\n\t\t\tif _, ok := v.Err.(x509.UnknownAuthorityError); ok {\n\t\t\t\treturn false, v\n\t\t\t}\n\t\t}\n\t\t// The error is likely recoverable so retry.\n\t\treturn true, nil\n\t}\n\t// 429 Too Many Requests is recoverable. Sometimes the server puts\n\t// a Retry-After response header to indicate when the server is\n\t// available to start processing request from client.\n\tif resp.StatusCode == http.StatusTooManyRequests {\n\t\treturn true, nil\n\t}\n\t// Check the response code. We retry on 500-range responses to allow\n\t// the server time to recover, as 500's are typically not permanent\n\t// errors and may relate to outages on the server side. This will catch\n\t// invalid response codes as well, like 0 and 999.\n    //THIS PART HERE FLAGS RETRIES ON STATUS CODES!\n\tif resp.StatusCode == 0 || (resp.StatusCode >= 500 && resp.StatusCode != http.StatusNotImplemented) {\n\t\treturn true, fmt.Errorf(\"unexpected HTTP status %s\", resp.Status)\n\t}\n\treturn false, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73752481/unable-to-create-a-handler-that-responds-with-error-in-go-to-cause-a-retry",
    "body": "func TestCreateToolsClient(t *testing.T) {\n\tts := httptest.NewServer(http.HandlerFunc(InternalServerErrorHandler))\n\tdefer ts.Close()\n\trequest, err := retryablehttp.NewRequest(http.MethodGet, ts.URL, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar options retryablehttp.Options\n\toptions.RetryWaitMin = 10 * time.Millisecond\n\toptions.RetryWaitMax = 50 * time.Millisecond\n\toptions.RetryMax = 6\n\toptions.Timeout = 60 * time.Second\n\t//options.Timeout = 30000 * time.Millisecond\n\tretryableClient := retryablehttp.NewClient(options)\n\tretryCount := -1\n\t// to verify from stdout if the # of retry actually is getting counted\n\tretryableClient.RequestLogHook = func(req *http.Request, retryNumber int) {\n\t\tretryCount = retryNumber\n\t\tlog.Println(\"Retrying\")\n\t}\n\t// A regular expression to match the error returned by net/http when the\n\t// configured number of redirects is exhausted. This error isn't typed\n\t// specifically so we resort to matching on the error string.\n\tredirectsErrorRe := regexp.MustCompile(`stopped after \\d+ redirects\\z`)\n\t// A regular expression to match the error returned by net/http when the\n\t// scheme specified in the URL is invalid. This error isn't typed\n\t// specifically so we resort to matching on the error string.\n\tschemeErrorRe := regexp.MustCompile(`unsupported protocol scheme`)\n\t// A regular expression to match the error returned by net/http when the\n\t// TLS certificate is not trusted. This error isn't typed\n\t// specifically so we resort to matching on the error string.\n\tnotTrustedErrorRe := regexp.MustCompile(`certificate is not trusted`)\n\tretryableClient.CheckRetry = func(_ context.Context, resp *http.Response, err error) (bool, error) {\n\t\tif err != nil {\n\t\t\tif v, ok := err.(*url.Error); ok {\n\t\t\t\t// Don't retry if the error was due to too many redirects.\n\t\t\t\tif redirectsErrorRe.MatchString(v.Error()) {\n\t\t\t\t\treturn false, v\n\t\t\t\t}\n\t\t\t\t// Don't retry if the error was due to an invalid protocol scheme.\n\t\t\t\tif schemeErrorRe.MatchString(v.Error()) {\n\t\t\t\t\treturn false, v\n\t\t\t\t}\n\t\t\t\t// Don't retry if the error was due to TLS cert verification failure.\n\t\t\t\tif notTrustedErrorRe.MatchString(v.Error()) {\n\t\t\t\t\treturn false, v\n\t\t\t\t}\n\t\t\t\tif _, ok := v.Err.(x509.UnknownAuthorityError); ok {\n\t\t\t\t\treturn false, v\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The error is likely recoverable so retry.\n\t\t\treturn true, nil\n\t\t}\n\t\t// 429 Too Many Requests is recoverable. Sometimes the server puts\n\t\t// a Retry-After response header to indicate when the server is\n\t\t// available to start processing request from client.\n\t\tif resp.StatusCode == http.StatusTooManyRequests {\n\t\t\treturn true, nil\n\t\t}\n\t\t// Check the response code. We retry on 500-range responses to allow\n\t\t// the server time to recover, as 500's are typically not permanent\n\t\t// errors and may relate to outages on the server side. This will catch\n\t\t// invalid response codes as well, like 0 and 999.\n\t\tif resp.StatusCode == 0 || (resp.StatusCode >= 500 && resp.StatusCode != http.StatusNotImplemented) {\n\t\t\treturn true, fmt.Errorf(\"unexpected HTTP status %s\", resp.Status)\n\t\t}\n\t\treturn false, nil\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/73739582/golang-exec-command-output-empty",
    "body": "package ncftp\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\ntype NcFtpPut struct {\n\tlogdir    string\n\tloginCfg  string\n\tremotPath string\n\tlocalPath string\n\tdebugFile string\n}\nfunc NewNcFtpPut(logdir, loginCfg, remotPath, localPath string) *NcFtpPut {\n\treturn &NcFtpPut{\n\t\tlogdir:    logdir,\n\t\tloginCfg:  loginCfg,\n\t\tremotPath: remotPath,\n\t\tlocalPath: localPath,\n\t}\n}\nfunc (n *NcFtpPut) Run() error {\n\tn.buildDebugFile()\n\targs := n.buildArgs()\n\tif err := n.execCmd(args[0], args[1:]...); err != nil {\n\t\treturn err\n\t}\n\tif err := n.analisysDebugFile(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (n *NcFtpPut) buildArgs() []string {\n\targs := []string{\"ncftpput\", \"-R\"}\n\targs = append(args, \"-f\")\n\targs = append(args, n.loginCfg)\n\targs = append(args, \"-d\")\n\targs = append(args, n.debugFile)\n\targs = append(args, n.remotPath)\n\targs = append(args, n.localPath)\n\treturn args\n}\nfunc (n *NcFtpPut) buildDebugFile() {\n\tn.debugFile = filepath.Join(n.logdir, \"ftp.log\")\n\tos.Remove(n.debugFile)\n}\nfunc (n *NcFtpPut) execCmd(cmdName string, args ...string) error {\n\tcmd := exec.Command(cmdName, args...)\n\tstdOut, err := cmd.CombinedOutput()\n\terrOut := hasOutput(stdOut)\n\tif err != nil {\n\t\tif errOut != nil {\n\t\t\treturn fmt.Errorf(\"%s:%s\", err, errOut)\n\t\t}\n\t\treturn err\n\t}\n\tif errOut != nil {\n\t\treturn errOut\n\t}\n\treturn nil\n}\nfunc hasOutput(stdOut []byte) error {\n\tif stdOut != nil {\n\t\treturn errors.New(string(stdOut))\n\t}\n\treturn nil\n}\nfunc (n *NcFtpPut) analisysDebugFile() error {\n\tbuf, err := ioutil.ReadFile(n.debugFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tret := string(buf)\n\tif strings.Contains(ret, \"Operation successful\") {\n\t\treturn nil\n\t}\n\treturn errors.New(\"error pls read ftplog file\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73707595/how-to-upload-and-parse-multiple-files-to-a-golang-api-behind-api-gateway-runnin",
    "body": "const uploadLimitBytes = 50000000 // 50 megabytes\ntype UploadResponse struct {\n\tConcat string\n}\nfunc UploadSessionsLambda(_ context.Context, lambdaReq events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\tcontentType := lambdaReq.Headers[\"Content-Type\"]\n\tif contentType == \"\" {\n\t\treturn HandleHTTPError(http.StatusBadRequest, fmt.Errorf(\"request contained no Content-Type header\"))\n\t}\n\t_, params, err := mime.ParseMediaType(contentType)\n\tif err != nil {\n\t\treturn HandleHTTPError(http.StatusBadRequest, err)\n\t}\n\tboundary := params[\"boundary\"]\n\tif boundary == \"\" {\n\t\treturn HandleHTTPError(http.StatusBadRequest, fmt.Errorf(\"request contained no boundary value to parse from Content-Type headers\"))\n\t}\n\tstringReader := strings.NewReader(lambdaReq.Body)\n\tmultipartReader := multipart.NewReader(stringReader, boundary)\n\tform, err := multipartReader.ReadForm(uploadLimitBytes)\n\tif err != nil {\n\t\treturn HandleHTTPError(http.StatusBadRequest, err)\n\t}\n\tvar sb strings.Builder\n\tfor currentFileName := range form.File {\n\t\t// anonymous file handler func allows for calling defer .Close()\n\t\thttpStatus, handlerErr := func(fileName string) (int, error) {\n\t\t\tcurrentFileHeader := form.File[currentFileName][0]\n\t\t\tcurrentFile, openErr := currentFileHeader.Open()\n\t\t\tif openErr != nil {\n\t\t\t\treturn http.StatusInternalServerError, openErr\n\t\t\t}\n\t\t\tdefer currentFile.Close() // figure out how to trap this error\n\t\t\tbufferedReader := bufio.NewReader(currentFile)\n\t\t\tfor {\n\t\t\t\tline, _, readLineErr := bufferedReader.ReadLine()\n\t\t\t\tif readLineErr == io.EOF {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tsb.Write(line)\n\t\t\t}\n\t\t\treturn http.StatusOK, nil\n\t\t}(currentFileName)\n\t\tif handlerErr != nil {\n\t\t\treturn HandleHTTPError(httpStatus, handlerErr)\n\t\t}\n\t}\n\treturn MarshalSuccess(&UploadResponse{Concat: sb.String()})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73707595/how-to-upload-and-parse-multiple-files-to-a-golang-api-behind-api-gateway-runnin",
    "body": "func HandleHTTPError(httpStatus int, err error) (events.APIGatewayProxyResponse, error) {\n\thttpErr := HTTPError{\n\t\tStatus:  httpStatus,\n\t\tMessage: err.Error(),\n\t}\n\tif httpErr.Status >= 500 && !ExposeServerErrors {\n\t\thttpErr.Message = http.StatusText(httpErr.Status)\n\t}\n\treturn MarshalResponse(httpErr.Status, nil, httpErr)\n}\nfunc MarshalSuccess(data interface{}) (events.APIGatewayProxyResponse, error) {\n\treturn MarshalResponse(http.StatusOK, nil, data)\n}\n// MarshalResponse generated an events.APIGatewayProxyResponse object that can\n// be directly returned via the lambda's handler function. It receives an HTTP\n// status code for the response, a map of HTTP headers (can be empty or nil),\n// and a value (probably a struct) representing the response body. This value\n// will be marshaled to JSON (currently without base 64 encoding).\nfunc MarshalResponse(httpStatus int, headers map[string]string, data interface{}) (\n\tevents.APIGatewayProxyResponse,\n\terror,\n) {\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\thttpStatus = http.StatusInternalServerError\n\t\tb = []byte(`{\"code\":500,\"message\":\"the server has encountered an unexpected error\"}`)\n\t}\n\tif headers == nil {\n\t\theaders = make(map[string]string)\n\t}\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      httpStatus,\n\t\tIsBase64Encoded: false,\n\t\tHeaders:         headers,\n\t\tBody:            string(b),\n\t}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73677807/getting-error-when-inserting-a-row-on-amazon-keyspaces-using-the-gocql-driver",
    "body": "func main() {\n\t//Determine Contact Point\n\tcontactPoint := fmt.Sprintf(\"cassandra.%s.amazonaws.com\", awsRegion)\n\tfmt.Println(\"Using Contact Point \", contactPoint)\n\t// Configure Cluster\n\tcluster := gocql.NewCluster(contactPoint)\n\tcluster.Port = 9142\n\tcluster.NumConns = 4\n\tawsAuth := sigv4.NewAwsAuthenticator()\n\tcluster.Authenticator = awsAuth\n\t//Retry Policy\n\tamazonKeyspacesRetry := &AmazonKeyspacesExponentialBackoffRetryPolicy{Max: 100 * time.Millisecond , Min: 10 * time.Millisecond, NumRetries: 20}\n\tcluster.RetryPolicy = amazonKeyspacesRetry\n\tamazonKeyspacesConnectionObserver, _ := NewAmazonKeyspacesObserver()\n\tcluster.ConnectObserver = amazonKeyspacesConnectionObserver\n\t// Configure Connection TrustStore for TLS\n\tcluster.SslOpts = &gocql.SslOptions{\n\t\tCaPath: \"certs/sf-class2-root.crt\",\n\t\tEnableHostVerification: false,\n\t}\n\tcluster.Consistency = gocql.LocalQuorum\n\tcluster.DisableInitialHostLookup = false\n\tcassandraSession, err := cluster.CreateSession()\n\tif err != nil {\n\t\tfmt.Println(\"Cassandra Session Creation Error - \", err)\n\t\tos.Exit(-2)\n\t}\n\tdefer cassandraSession.Close()\n\t// Perform Query\n\tvar keyspaceName string\n\titer := cassandraSession.Query(\"SELECT keyspace_name FROM system_schema.keyspaces;\").Iter()\n\tdefer iter.Close()\n\tfor iter.Scan(&keyspaceName) {\n\t\tfmt.Println(\"keyspace_name : \", keyspaceName)\n\t}\n\tif err := iter.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73598756/cant-mount-volume-in-docker-compose-right",
    "body": "version: '3.8'\nservices:\n  docker-parser:\n    depends_on:\n      - roach\n    build:\n      context: .\n    container_name: parser\n    hostname: parser\n    networks:\n      - mynet\n    ports:\n      - 80:8080\n    volumes:\n      - assets:/data\n    environment:\n      - PGUSER=${PGUSER:-totoro}\n      - PGPASSWORD=${PGPASSWORD:?database password not set}\n      - PGHOST=${PGHOST:-db}\n      - PGPORT=${PGPORT:-26257}\n      - PGDATABASE=${PGDATABASE-mydb}\n    deploy:\n      restart_policy:\n        condition: on-failure\n  roach:\n    image: cockroachdb/cockroach:latest-v20.1\n    container_name: roach\n    hostname: db\n    networks:\n      - mynet\n    ports:\n      - 26257:26257\n      - 8080:8080\n    volumes:\n      - roach:/db\n    command: start-single-node --insecure\nvolumes:\n  assets:\n  roach:\nnetworks:\n  mynet:\n    driver: bridge"
  },
  {
    "url": "https://stackoverflow.com/questions/73583430/why-are-there-different-results-when-using-regular-expressions-when-executing-co",
    "body": "cmd := exec.Command(\"cmd.exe\", \"/C\", \"tasklist\", \"|\", \"findstr\", \"/R\", \"/I\", \"cmd.exe\")\noutput, _ := cmd.Output()\nfmt.Println(string(output))\n//***************************************************************************//\ncmd1 := exec.Command(\"cmd.exe\", \"/C\", \"tasklist\")\ncmd2 := exec.Command(\"findstr\", \"/R\", \"/I\", \"\\\\<cmd.exe\\\\>\")\ncmd2.Stdin, _ = cmd1.StdoutPipe()\ncmd1.Start()\ndata, _ := cmd2.Output()\ncmd1.Wait()\nfmt.Println(string(data))\nresult:\nResult of regular expression not used\ncmd.exe                       5188 Console                    1      6,184 K\ncmdcmd.exe                    1260 Console                    1      4,980 K\nResults of using regular expressions\ncmd.exe                       5188 Console                    1      6,184 K"
  },
  {
    "url": "https://stackoverflow.com/questions/73514820/go-json-manipulation",
    "body": "func (c Collection) GetSales(filter, types string) []Sale {\n    const url = \"https://api.com/\"\n    req, err := http.NewRequest(\"POST\", url, requestBody)\n    if err != nil {\n        panic(err)\n    }\n\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer res.Body.Close()\n    content, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        panic(err)\n    }\n    var resultJson Data\n    err = json.Unmarshal(content, &resultJson)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"%+v\\n\", resultJson)\n    return resultJson.Activity.Activities.Sales\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73419744/serve-image-file-from-github-graph-ql-api-using-golang",
    "body": "func GetMediaFile(req *events.APIGatewayProxyRequest, ac *ActionContext) (events.APIGatewayProxyResponse, error) {\n\tres := events.APIGatewayProxyResponse{StatusCode: 500}\n\tpathPieces := strings.Split(req.Path, \"/\")\n\tsiteName := pathPieces[1]\n\tfile, _ := url.QueryUnescape(pathPieces[3]) // pathPieces[2]\n\tlog.Print(\"requested media site: \" + siteName)\n\tlog.Print(\"requested media file: \" + file)\n\t// buf := aws.NewWriteAtBuffer([]byte{})\n\t// downloader := s3manager.NewDownloader(ac.Session)\n\t/*_, err := downloader.Download(buf, &s3.GetObjectInput{\n\t\tBucket: aws.String(ac.BucketName),\n\t\tKey:    aws.String(\"media/\" + file),\n\t})\n\tif err != nil {\n\t\treturn res, err\n\t}*/\n\text := strings.Split(pathPieces[len(pathPieces)-1], \".\")\n\tcontentType := mime.TypeByExtension(ext[len(ext)-1])\n\tif ext[len(ext)-1] == \"md\" {\n\t\tcontentType = \"text/markdown\"\n\t}\n\tsuffix := \"\"\n\tif os.Getenv(\"GITHUB_BRANCH\") == \"master\" {\n\t\tsuffix = \"-prod\"\n\t}\n\towner := \"rollthecloudinc\"\n\trepo := siteName + \"-objects\" + suffix\n\tvar q struct {\n\t\tRepository struct {\n\t\t\tObject struct {\n\t\t\t\tObjectFragment struct {\n\t\t\t\t\tOid githubv4.GitObjectID\n\t\t\t\t} `graphql:\"... on Blob\"`\n\t\t\t} `graphql:\"object(expression: $exp)\"`\n\t\t} `graphql:\"repository(owner: $owner, name: $name)\"`\n\t}\n\tqVars := map[string]interface{}{\n\t\t\"exp\":   githubv4.String(os.Getenv(\"GITHUB_BRANCH\") + \":media/\" + file),\n\t\t\"owner\": githubv4.String(owner),\n\t\t\"name\":  githubv4.String(repo),\n\t}\n\terr := ac.GithubV4Client.Query(context.Background(), &q, qVars)\n\tif err != nil {\n\t\tlog.Print(\"Github latest file failure.\")\n\t\tlog.Panic(err)\n\t}\n\toid := q.Repository.Object.ObjectFragment.Oid\n\tlog.Print(\"Github file object id \" + oid)\n\tblob, _, err := ac.GithubRestClient.Git.GetBlob(context.Background(), owner, repo, string(oid))\n\tif err != nil {\n\t\tlog.Print(\"Github get blob failure.\")\n\t\tlog.Panic(err)\n\t}\n\tres.StatusCode = 200\n\tres.Headers = map[string]string{\n\t\t\"Content-Type\": contentType,\n\t}\n\tres.Body = blob.GetContent()\n\tres.IsBase64Encoded = true\n\treturn res, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73411883/get-new-lines-of-syslog-to-my-custom-programdaemon",
    "body": "package main\nimport (\n\t\"log\"\n\t\"github.com/fsnotify/fsnotify\"\n)\nfunc main() {\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event, ok := <-watcher.Events:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Println(\"event:\", event)\n\t\t\tcase err, ok := <-watcher.Errors:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Println(\"error:\", err)\n\t\t\t}\n\t\t}\n\t}()\n\t// Add a path.\n\terr = watcher.Add(\"/var/log\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Block main goroutine forever.\n\t<-make(chan struct{})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73323435/partial-update-a-structure-with-echo-and-gorm",
    "body": "type UserId struct {\n    Id int64 `param:\"id\" json:\"id\"`\n}\ntype User struct {\n    Email     string    `json:\"email,omitempty\"`\n    Password  string    `json:\"password,omitempty\"`\n    Username  string    `json:\"username,omitempty\"`\n    // CreatedAt time.Time `json:\"created_at,omitempty\"`\n    // UpdatedAt time.Time `json:\"updated_at,omitempty\"`\n}\ntype User struct {\n    gorm.Model\n    ID       int64  `gorm:\"primary_key\"`\n    Email    string `gorm:\"type:varchar(128);unique;not null\"`\n    Username string `gorm:\"type:varchar(64);unique;not null\"`\n    Password string `gorm:\"type:varchar(64);not null\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73323435/partial-update-a-structure-with-echo-and-gorm",
    "body": "func updateUser(c echo.Context) error {\n    cc := c.(*myproject.ConfigContext)\n    var err error\n    userId := new(interfaces.UserId)\n    userId.Id, err = strconv.ParseInt(cc.Param(\"id\"), 10, 64)\n    if err != nil {\n        return err\n    }\n    newInfoUser := new(interfaces.User)\n    err = cc.Bind(newInfoUser)\n    if err != nil {\n        return err\n    }\n    db, err := cc.ConnectDB()\n    if err != nil {\n        return err\n    }\n    err = db.AutoMigrate(&models.User{})\n    if err != nil {\n        return err\n    }\n    r := db.Model(&models.User{}).Where(\"id = ?\", userId.Id).Updates(newInfoUser)\n    if r.Error != nil {\n        return cc.NoContent(http.StatusNotFound)\n    }\n    return cc.JSON(200, \"\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73312764/cloud-storage-cant-manage-files-in-production-oauth2-cannot-fetch-token",
    "body": "# BUILD STAGE\nFROM golang:1.18.5-alpine3.16 as build\nENV CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\nWORKDIR /go/src/ms-gcp\nCOPY . .\nRUN go build cmd/ms-gcp/main.go\n# PROD STAGE\nFROM alpine:3.15.6\n# CERT PACKAGES\nRUN apk add --no-cache ca-certificates && update-ca-certificates\n# TIME ZONE FOR CHILE-SANTIAGO\nRUN apk update\nRUN apk add tzdata\nRUN cp /usr/share/zoneinfo/Chile/Continental /etc/localtime\nENV TZ America/Santiago\nRUN echo \"America/Santiago\" >  /etc/timezone\n# GLIBC\nRUN apk --no-cache add ca-certificates wget && \\\n    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \\\n    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-2.35-r0.apk && \\\n    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-bin-2.35-r0.apk && \\\n    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.35-r0/glibc-i18n-2.35-r0.apk && \\\n    apk add glibc-bin-2.35-r0.apk glibc-i18n-2.35-r0.apk glibc-2.35-r0.apk\nCOPY ./locale.md /locale.md\nRUN cat locale.md | xargs -i /usr/glibc-compat/bin/localedef -i {} -f UTF-8 {}.UTF-8\nENV LANG=cl_ES.UTF-8 \\\n    LANGUAGE=cl_ES.UTF-8\nCOPY --from=build /go/src/ms-gcp/main .\nCMD [\"./main\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/73132325/grpc-gateway-how-to-deal-with-non-json-request-body",
    "body": "package marshaler\nimport (\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"reflect\"\n\t\"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n\t\"google.golang.org/genproto/googleapis/api/httpbody\"\n)\ntype XMLMarshaler struct {\n\truntime.Marshaler\n}\nfunc (x XMLMarshaler) ContentType(_ interface{}) string {\n\treturn \"application/xml\"\n}\nfunc (x XMLMarshaler) Marshal(v interface{}) ([]byte, error) {\n\tlog.Println(\"xml marshal\")\n\tlog.Printf(\"param: %+v\", v)\n\t// return xml.Marshal(v)\n\tif httpBody, ok := v.(*httpbody.HttpBody); ok {\n\t\treturn httpBody.Data, nil\n\t}\n\treturn x.Marshaler.Marshal(v)\n}\nfunc (x XMLMarshaler) NewDecoder(r io.Reader) runtime.Decoder {\n\tlog.Println(\"xml new decoder\")\n\treturn runtime.DecoderFunc(func(p interface{}) error {\n\t\tbuffer, err := ioutil.ReadAll(r)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpType := reflect.TypeOf(p)\n\t\tif pType.Kind() == reflect.Ptr {\n\t\t\tv := reflect.Indirect(reflect.ValueOf(p))\n\t\t\tif v.Kind() == reflect.String {\n\t\t\t\tv.Set(reflect.ValueOf(string(buffer)))\n\t\t\t\treturn nil\n\t\t\t}\n\t\t}\n\t\treturn errors.New(\"value type error\")\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73132325/grpc-gateway-how-to-deal-with-non-json-request-body",
    "body": "func run() error {\n\tctx := context.Background()\n\tctx, cancel := context.WithCancel(ctx)\n\tdefer cancel()\n\t// Register gRPC server endpoint\n\t// Note: Make sure the gRPC server is running properly and accessible\n\tmux := runtime.NewServeMux(\n\t\truntime.WithMarshalerOption(\"application/xml\", marshaler.XMLMarshaler{}),\n\t)\n\topts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}\n\terr := gw.RegisterBotServiceHandlerFromEndpoint(ctx, mux, *grpcServerEndpoint, opts)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Start HTTP server (and proxy calls to gRPC server endpoint)\n\treturn http.ListenAndServe(\":8080\", mux)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73101963/go-sql-driver-causing-maria-db-cpu-utilization-very-high",
    "body": "result, err := db.Prepare(`select concat(p.firstName, ' ', p.middle, ' ', p.lastName, ' ', p.forthName)\nas fullname,gender,bID,married,barcode,comment,address,if(p2.phone is null, 0, p2.phone)\nas phone,rName,occupation,weight,height,cast(Birthdate as date) as Birthdate\nfrom profile p\nleft join (select phID, pID, phone from phonefix group by pID) p2 on p.pID = p2.pID\nleft join (select pID, weight, height from bmifix group by pID) B on p.pID = B.pID, religion r\nwhere r.rgID = p.rgID and p.pID = ? `)"
  },
  {
    "url": "https://stackoverflow.com/questions/73039596/mongodb-update-many-array-elements-by-index-with-different-data",
    "body": "db.branch.aggregate([\n  {\n    \"$replaceWith\": {\n      \"$setField\": {\n        input: \"$$ROOT\",\n        \"field\": \"branch_trans\",\n        \"value\": {\n          \"$concatArrays\": [\n            {\n              $slice: [\n                \"$branch_trans\",\n                0,\n                1\n              ]\n            },\n            [\n              {\n                \"branch_id\": \"branchId456\",\n                \"op\": \"op1\"\n              },\n              {\n                \"branch_id\": \"branchId789\",\n                \"op\": \"op2\"\n              }\n            ]\n          ]\n        }\n      }\n    }\n  }\n])"
  },
  {
    "url": "https://stackoverflow.com/questions/72975345/start-cronjob-at-specific-epoch-time-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc main() {\n\ttime.Sleep(300 * time.Millisecond) // So we don't start cron too near the second boundary\n\tc := cron.New()\n\tc.Schedule(CustomConstantDelaySchedule{time.Second}, cron.FuncJob(func() {\n\t\tfmt.Println(time.Now().UnixNano())\n\t}))\n\tc.Start()\n\ttime.Sleep(time.Second * 5)\n}\n// CustomConstantDelaySchedule is a copy of the libraries ConstantDelaySchedule with the rounding removed\ntype CustomConstantDelaySchedule struct {\n\tDelay time.Duration\n}\n// Next returns the next time this should be run.\nfunc (schedule CustomConstantDelaySchedule) Next(t time.Time) time.Time {\n\treturn t.Add(schedule.Delay)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72975345/start-cronjob-at-specific-epoch-time-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/robfig/cron/v3\"\n)\nfunc main() {\n\ttime.Sleep(300 * time.Millisecond) // So we don't start cron too nead the second boundary\n\tc := cron.New()\n\tc.Schedule(CustomConstantDelaySchedule{Delay: time.Second}, cron.FuncJob(func() {\n\t\tfmt.Println(time.Now().UnixNano())\n\t}))\n\tc.Start()\n\ttime.Sleep(time.Second * 5)\n}\n// CustomConstantDelaySchedule is a copy of the libraries ConstantDelaySchedule with the rounding removed\n// Note that because this stored the last time it cannot be reused!\ntype CustomConstantDelaySchedule struct {\n\tDelay      time.Duration\n\tlastTarget time.Time\n}\n// Next returns the next time this should be run.\nfunc (schedule CustomConstantDelaySchedule) Next(t time.Time) time.Time {\n\tif schedule.lastTarget.IsZero() {\n\t\tschedule.lastTarget = t.Add(schedule.Delay)\n\t} else {\n\t\tschedule.lastTarget = schedule.lastTarget.Add(schedule.Delay)\n\t}\n\treturn schedule.lastTarget\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72969962/get-prometheus-metric-properties",
    "body": "package main\nimport (\n\t\"testing\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\tdto \"github.com/prometheus/client_model/go\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\nvar requestDuration = prometheus.NewHistogramVec(prometheus.HistogramOpts{\n\tName:    \"example_request_duration_seconds\",\n\tHelp:    \"Histogram for the runtime of a simple example function.\",\n\tBuckets: prometheus.LinearBuckets(0.01, 0.01, 10),\n}, []string{\"label1\"})\nfunc TestMetrics(t *testing.T) {\n\treg := prometheus.NewPedanticRegistry()\n\terr := reg.Register(requestDuration)\n\trequire.NoError(t, err)\n\t// The built-in collectors must observe at least one values before they\n\t// are exported.\n\t//\n\t// This With call implicitly verifies that your labels are as expected.\n\t// If your program setup initializes metrics you can omit this and verify\n\t// labels directly as demonstrated below. Initializing metrics is best\n\t// practice; see\n\t// https://prometheus.io/docs/practices/instrumentation/#avoid-missing-metrics).\n\trequestDuration.With(prometheus.Labels{\"label1\": \"foo\"}).Observe(0)\n\tmetrics, err := reg.Gather()\n\trequire.NoError(t, err)\n\trequire.Len(t, metrics, 1)\n\tassert.Equal(t, dto.MetricType_HISTOGRAM, metrics[0].GetType())\n\tassert.Equal(t, \"example_request_duration_seconds\", metrics[0].GetName())\n\tassert.Equal(t, \"Histogram for the runtime of a simple example function.\", metrics[0].GetHelp())\n\t// Label verification only required if Observe call above can be omitted.\n\tlabels := metrics[0].GetMetric()[0].GetLabel()\n\trequire.Len(t, labels, 1)\n\tassert.Equal(t, \"label1\", labels[0].GetName())\n\tbuckets := metrics[0].GetMetric()[0].GetHistogram().GetBucket()\n\trequire.Len(t, buckets, 10)\n\tassert.InDelta(t, 0.01, buckets[0].GetUpperBound(), 1e-6)\n\tassert.InDelta(t, 0.02, buckets[1].GetUpperBound(), 1e-6)\n\t// ...\n\tassert.InDelta(t, 0.09, buckets[8].GetUpperBound(), 1e-6)\n\tassert.InDelta(t, 0.10, buckets[9].GetUpperBound(), 1e-6)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72919310/how-to-minimize-duplicate-code-in-go-mux-when-always-trying-to-return-same-respo",
    "body": "type Responder struct {\n\tEncoder Encoder\n\tBefore BeforeFunc\n\tAfter AfterFunc\n\tOnError OnErrorFunc\n}\nfunc (r *Responder) writeResponse(w http.ResponseWriter, v interface{}, status int) {\n\tif r.Before != nil {\n\t\tstatus, v = r.Before(w, v, status)\n\t}\n\tencoder := JSON\n\tif r.Encoder != nil {\n\t\tencoder = r.Encoder\n\t}\n\tw.Header().Set(\"Content-Type\", encoder.ContentType())\n\tw.WriteHeader(status)\n\tif err := encoder.Encode(w, v); err != nil {\n\t\tif r.OnError != nil {\n\t\t\tr.OnError(err)\n\t\t}\n\t}\n\tif r.After != nil {\n\t\tr.After(v, status)\n\t}\n}\nfunc (r *Responder) Ok(w http.ResponseWriter, v interface{}) {\n\tr.writeResponse(w, v, http.StatusOK)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72902950/using-golangs-ssh-package-to-act-as-a-server-how-do-i-write-to-stdout",
    "body": "// provide pipes for two-way communication with the server\nfunc setupIo(session *ssh.Session) (io.WriteCloser, chan []byte, chan []byte) {\n\tstdout, err := session.StdoutPipe()\n\tExpect(err).To(BeNil())\n\tstderr, err := session.StderrPipe()\n\tExpect(err).To(BeNil())\n\tstdin, err := session.StdinPipe()\n\tExpect(err).To(BeNil())\n\tstdoutChan := make(chan []byte)\n\tstderrChan := make(chan []byte)\n\tgo readPipe(stdout, stdoutChan)\n\tgo readPipe(stderr, stderrChan)\n\treturn stdin, stdoutChan, stderrChan\n}\nfunc readPipe(pipe io.Reader, outputChan chan []byte) {\n\tb := make([]byte, 100)\n\tfor {\n\t\tif n, err := pipe.Read(b); err != nil {\n\t\t\treturn\n\t\t} else if n > 0 {\n\t\t\toutputChan <- b[:n]\n\t\t}\n\t}\n}\n// later in the test...\n_, stdoutChan, _ := setupIo(session)\noutput := <-stderrChan\n// make assertions about output\n// ..."
  },
  {
    "url": "https://stackoverflow.com/questions/72806901/golang-profiling-package-with-text-output",
    "body": "func startCpuProfile() {\n\tcpuProfile, err := os.Create(\"cpu_profile\")\n\tif err != nil {\n\t\tlog.Println(\"could not create CPU profile: \", err)\n\t}\n\tdefer cpuProfile.Close()\n\tif err := pprof.StartCPUProfile(cpuProfile); err != nil {\n\t\tlog.Println(\"could not start CPU profile: \", err)\n\t}\n}\nfunc generateProfileBundle() {\n\tts := time.Now().Format(\"2006-01-02_15:04:05\")\n\theapProfile, err := os.Create(\"heap_profile_\" + ts)\n\tif err != nil {\n\t\tlog.Println(\"could not create memory profile: \", err)\n\t}\n\tdefer heapProfile.Close()\n\truntime.GC()\n\tif err := pprof.WriteHeapProfile(heapProfile); err != nil {\n\t\tlog.Println(\"could not write memory profile: \", err)\n\t}\n\tpprof.StopCPUProfile()\n\tsvc := s3.New(session.New())\n\tcpuFile, err := os.Open(\"cpu_profile\")\n\t_, err = svc.PutObject(&s3.PutObjectInput{\n\t\tBucket: aws.String(\"service_profile_bucket\"),\n\t\tKey:    aws.String(\"cpu_profile_\" + ts),\n\t\tBody:   cpuFile,\n\t})\n\t_, err = svc.PutObject(&s3.PutObjectInput{\n\t\tBucket: aws.String(\"service_profile_bucket\"),\n\t\tKey:    aws.String(\"heap_profile_\" + ts),\n\t\tBody:   heapProfile,\n\t})\n\tos.Remove(\"cpu_profile\")\n\tos.Remove(\"heap_profile_\" + ts)\n\tstartCpuProfile()\n}\nfunc main() {\n\t// Start CPU Profile at start up\n\tstartCpuProfile()\n\t// Every 15 minutes dump a heap profile, restart the CPU profile and upload to S3\n\tticker := time.Tick(time.Minute * 15)\n\tgo func() {\n\t\tfor _ = range ticker {\n\t\t\tgenerateProfileBundle()\n\t\t}\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72788065/golang-rcp-call-hanging",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"time\"\n)\ntype MusicProject struct {\n\tId             string\n\tCreatedTime    time.Time\n\tLastEditedTime time.Time\n\tTitle          string\n\tYear           int\n\tStatus         string\n\tDescription    string\n\tChoirRollup    string\n}\ntype Application struct {\n}\nfunc (app *Application) GetMusicProjectById(id string, model *MusicProject) error {\n\t*model = MusicProject{\n\t\tId:             id,\n\t\tCreatedTime:    time.Now(),\n\t\tLastEditedTime: time.Now(),\n\t\tTitle:          \"Test Project\",\n\t\tYear:           2020,\n\t\tStatus:         \"Completed\",\n\t\tDescription:    \"Short project Description\",\n\t\tChoirRollup:    \"Best Choir\",\n\t}\n\treturn nil\n}\nfunc main() {\n\tconst port = 5002\n\tif err := rpc.Register(new(Application)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// start the rpc server\n\tlog.Println(\"Starting server on port:\", port)\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\":%d\", port))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trpc.Accept(l)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72788065/golang-rcp-call-hanging",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net/rpc\"\n\t\"time\"\n)\ntype MusicProject struct {\n\tId             string\n\tCreatedTime    time.Time\n\tLastEditedTime time.Time\n\tTitle          string\n\tYear           int\n\tStatus         string\n\tDescription    string\n\tChoirRollup    string\n}\nfunc main() {\n\tdial, err := rpc.Dial(\"tcp\", \"localhost:5002\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tprojectID := \"some_id_123\"\n\tvar musicProject MusicProject\n\terr = dial.Call(\"Application.GetMusicProjectById\", projectID, &musicProject)\n\tif err != nil {\n\t\tlog.Fatal(\"error:\", err)\n\t}\n\tlog.Println(musicProject)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72768134/getting-different-results-with-bindvars-in-db-query",
    "body": "type Log struct {\n\t\tID   int64\n\t\tName string\n\t}\n\tdb, _ := sql.Open(\"mysql\", \"root:passwd@tcp(127.0.0.1:3306)/log\")\n\trows, err := db.Query(\"SELECT * FROM logs ORDER BY log_id DESC LIMIT ?,? \", 1, 3)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tdefer rows.Close()\n\tvar values []Log\n\tfmt.Println(\"Reading data:\")\n\tfor rows.Next() {\n\t\tvar log Log\n\t\terr = rows.Scan(&log.ID, &log.Name)\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tcontinue // you need to handle error\n\t\t}\n\t\tvalues = append(values, log)\n\t}\n\tfmt.Println(values)"
  },
  {
    "url": "https://stackoverflow.com/questions/72766471/how-to-use-go-with-mongodb-for-group",
    "body": "users := []string{\"curry\", \"kd\", \"james\"}\n\tpipe := mongo.Pipeline{\n\t\t{\n\t\t\t{Key: \"$match\", Value: bson.D{{Key: \"userId\", Value: bson.M{\"$in\": users}}}},\n\t\t},\n\t\t{\n\t\t\t// must before $group\n\t\t\t{Key: \"$sort\", Value: bson.D{{Key: \"height\", Value: -1}}},\n\t\t},\n\t\t{\n\t\t\t{Key: \"$group\",\n\t\t\t\tValue: bson.D{\n\t\t\t\t\t{Key: \"_id\", Value: \"$userId\"},\n\t\t\t\t\t{Key: \"height\", Value: bson.D{{Key: \"$first\", Value: \"$height\"}}},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t//don't work !!!!!.the height is not the largest\n\t\t//{\n\t\t//\t{Key: \"$sort\", Value: bson.D{{Key: \"height\", Value: -1}}},\n\t\t//},\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/72700603/extracting-js-objects-from-pdf-files-using-pdfcpu-library",
    "body": "poppler\\22.02>pdfinfo -js 5T2lz\nI/O Error: Couldn't open file '5T2lz': No error.\npoppler\\22.02>pdfinfo -js ACFrOgAYzyVpaYkP3s966uMLaUX_Hom772FkCVBh0ISIVWlRKHPfuao1GbVDBiwPxr90Gw-xMFeSv1SJLp_yKPFVHFv57n2HtyPuweOe0BWwe_me5CR7bwOku8Mi2QvOfw0hpoIUt0XRc62R4Hxp.pdf\nSyntax Warning: Illegal URI-type link\nSyntax Warning: Illegal URI-type link\nSyntax Warning: Illegal URI-type link\nSyntax Warning: Illegal URI-type link\nSyntax Warning: Illegal URI-type link\npoppler\\22.02>pdfinfo -js odd.pdf\nSyntax Warning: May not be a PDF file (continuing anyway)\nSyntax Error (30): Illegal character ')'\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't read xref table\npoppler\\22.02>pdfinfo -js runme.pdf\nName Dictionary \"AScript\":\napp.alert({\ncMsg: \"Gotcha! Try again!\",\ncTitle: \"Acme Testing Service\"\n});\npoppler\\22.02>pdfinfo -js \"..\\..\\imm1294ea Copy.pdf\"\nName Dictionary \"!ADBE::0100_VersChkStrings\":\nif (typeof(this.ADBE) == \"undefined\")\n   this.ADBE = new Object();\nADBE.LANGUAGE = \"ENU\";\nADBE.Viewer_string_Title = \"Adobe Acrobat\";\nADBE.Viewer_string_Update_Desc = \"Adobe Interactive Forms Update\";\nADBE.Viewer_string_Update_Reader_Desc = \"Adobe Reader 7.0.5\";\nADBE.Reader_string_Need_New_Version_Msg = \"This PDF file requires a newer version of Adobe Reader. Press OK to download the latest version or see your system administrator.\";\nADBE.Viewer_Form_string_Reader_601 = \"This PDF form requires a newer version of Adobe Reader.....blah blah blah\npoppler\\22.02>pdfinfo -js \"..\\..\\\"???\"???(????).pdf\"\nI/O Error: Couldn't open file '..\\..\"??????(????).pdf': No error.\npoppler\\22.02>pdfinfo -js \"..\\..\\xss Copy.pdf\"\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't read xref table"
  },
  {
    "url": "https://stackoverflow.com/questions/72599694/when-i-use-golang-call-the-contract-method-how-can-i-confirm-this-trx-status",
    "body": "func waitForReceipt(c *ethclient.Client, hash, addr string) (*types.Receipt, error) {\n\tquery := ethereum.FilterQuery{\n\t\tAddresses: []common.Address{addr},\n\t}\n\tvar ch = make(chan types.Log)\n\tsub, err := c.SubscribeFilterLogs(ctx, query, ch) // subscribe to all logs for addr\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor confirmed := false; !confirmed;  { // wait for confirmation on blockchain\n\t\tselect {\n\t\tcase err := <-sub.Err():\n\t\t\treturn nil, err\n\t\tcase vLog := <-ch:\n\t\t\tif vLog.TxHash.Hex() == hash {\n\t\t\t\tconfirmed = true\n\t\t\t}\n\t\t}\n\t}\n\treturn c.TransactionReceipt(ctx, hash) // call for receipt\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72584769/websocket-closed-very-quickly",
    "body": "package main\nimport (\n    \"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/websocket\"\n)\nfunc echo(w http.ResponseWriter, r *http.Request) {\n\tconn, err := websocket.Upgrade(w, r, w.Header(), 1024, 1024)\n\tif err != nil {\n\t\thttp.Error(w, \"Could not open websocket connection\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tfor {\n\t\tmessType, message, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"read:\", err)\n\t\t\tbreak\n\t\t}\n\t\tlog.Printf(\"recv: %s\", message)\n\t\terr = conn.WriteMessage(messType, message)\n\t\tif err != nil {\n\t\t\tlog.Println(\"write:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}\nfunc main() {\n\thttp.HandleFunc(\"/\", echo)\n\tif err := http.ListenAndServe(\":1234\", nil); err != nil {\n\t\tlog.Fatal(\"ListenAndServe:\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72583642/zooming-mjpeg-in-object",
    "body": "// Package mjpeg implements a simple MJPEG streamer.\n//\n// Stream objects implement the http.Handler interface, allowing to use them with the net/http package like so:\n//\tstream = mjpeg.NewStream()\n//\thttp.Handle(\"/camera\", stream)\n// Then push new JPEG frames to the connected clients using stream.UpdateJPEG().\npackage mjpeg\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"image\"\n\tj \"image/jpeg\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n\t\"time\"\n\t\"golang.org/x/image/draw\"\n)\n// Stream represents a single video feed.\ntype Stream struct {\n\tm             map[chan []byte]bool\n\tframe         []byte\n\tlock          sync.Mutex\n\tFrameInterval time.Duration\n}\nconst boundaryWord = \"MJPEGBOUNDARY\"\nconst headerf = \"\\r\\n\" +\n\t\"--\" + boundaryWord + \"\\r\\n\" +\n\t\"Content-Type: image/jpeg\\r\\n\" +\n\t\"Content-Length: %d\\r\\n\" +\n\t\"X-Timestamp: 0.000000\\r\\n\" +\n\t\"\\r\\n\"\n// ServeHTTP responds to HTTP requests with the MJPEG stream, implementing the http.Handler interface.\nfunc (s *Stream) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tlog.Println(\"Stream:\", r.RemoteAddr, \"connected\")\n\tw.Header().Add(\"Content-Type\", \"multipart/x-mixed-replace;boundary=\"+boundaryWord)\n\tc := make(chan []byte)\n\ts.lock.Lock()\n\ts.m[c] = true\n\ts.lock.Unlock()\n\tfor {\n\t\ttime.Sleep(s.FrameInterval)\n\t\tb := <-c\n\t\t_, err := w.Write(b)\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\ts.lock.Lock()\n\tdelete(s.m, c)\n\ts.lock.Unlock()\n\tlog.Println(\"Stream:\", r.RemoteAddr, \"disconnected\")\n}\n// UpdateJPEG pushes a new JPEG frame onto the clients.\nfunc (s *Stream) UpdateJPEG(jpeg []byte) {\n\theader := fmt.Sprintf(headerf, len(jpeg))\n\tif len(s.frame) < len(jpeg)+len(header) {\n\t\ts.frame = make([]byte, (len(jpeg)+len(header))*2)\n\t}\n\t// Decode the image (from PNG to image.Image):\n\tsrc, _ := j.Decode(bytes.NewReader(jpeg))\n\t// Set the expected size that you want:\n\tdst := image.NewRGBA(image.Rect(0, 0, src.Bounds().Max.X/3, src.Bounds().Max.Y/3))\n\t// Resize:\n\tdraw.NearestNeighbor.Scale(dst, dst.Rect, src, src.Bounds(), draw.Over, nil)\n\tbuf := new(bytes.Buffer)\n\t// Encode to `buf`:\n\tj.Encode(buf, dst, nil)\n\tcopy(s.frame, header)\n\t//\tcopy(s.frame[len(header):], jpeg)\n\tcopy(s.frame[len(header):], buf.Bytes())\n\ts.lock.Lock()\n\tfor c := range s.m {\n\t\t// Select to skip streams which are sleeping to drop frames.\n\t\t// This might need more thought.\n\t\tselect {\n\t\tcase c <- s.frame:\n\t\tdefault:\n\t\t}\n\t}\n\ts.lock.Unlock()\n}\n// NewStream initializes and returns a new Stream.\nfunc NewStream() *Stream {\n\treturn &Stream{\n\t\tm:             make(map[chan []byte]bool),\n\t\tframe:         make([]byte, len(headerf)),\n\t\tFrameInterval: 50 * time.Millisecond,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72581254/golang-aws-cdk-autoscaling-undefined-types",
    "body": "// AutoScaling based on memory and cpu usage\n\t\tscalabletargetPub := pubService.AutoScaleTaskCount(&awsapplicationautoscaling.EnableScalingProps{\n\t\t\tMinCapacity: &apps.ApplicationVpc.ECS.AppMktNodeCountMin,\n\t\t\tMaxCapacity: &apps.ApplicationVpc.ECS.AppMktNodeCountMax,\n\t\t})\n\t\tscalabletargetPub.ScaleOnMemoryUtilization(jsii.String(\"Memory_threshold\"), &ecs.MemoryUtilizationScalingProps{\n\t\t\tTargetUtilizationPercent: &apps.ApplicationVpc.ECS.AppMemoryUtilizationThresholdPercent,\n\t\t})\n\t\tscalabletargetPub.ScaleOnCpuUtilization(jsii.String(\"Cpu_threshold\"), &ecs.CpuUtilizationScalingProps{\n\t\t\tTargetUtilizationPercent: &apps.ApplicationVpc.ECS.AppCPUUtilizationThresholdPercent,\n\t\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/72510894/how-to-get-a-list-of-available-joystick-ids-in-go",
    "body": "package gamepad\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"github.com/0xcafed00d/joystick\"\n)\nconst MAX_GAMEPAD = 8\ntype Gamepad struct {\n\tlast_buttons uint32\n\tlast_axes    []int\n\tjoystick     joystick.Joystick\n}\nvar gamepads [MAX_GAMEPAD]Gamepad\nfunc gamepadUpdate(num int) {\n\tgamepad := gamepads[num]\n\tif joystick := gamepad.joystick; joystick != nil {\n\t\tstate, err := joystick.Read()\n\t\tif err == nil {\n\t\t\tbuttons := state.Buttons\n\t\t\tif gamepad.last_buttons != buttons {\n\t\t\t\tfmt.Println(state.Buttons)\n\t\t\t\tgamepads[num].last_buttons = buttons\n\t\t\t}\n\t\t} else { // dropped\n\t\t\tgamepads[num].last_buttons = 0\n\t\t\tgamepads[num].joystick = nil // to avoid reading\n\t\t\tfmt.Println(num, \" Lost...\")\n\t\t}\n\t}\n}\nfunc checkNewGamepads() {\n\tfor {\n\t\tfor num, gamepad := range gamepads {\n\t\t\tif gamepad.joystick == nil {\n\t\t\t\tjs, err := joystick.Open(num)\n\t\t\t\tif err == nil {\n\t\t\t\t\t_, err := js.Read()\n\t\t\t\t\tif err == nil {\n\t\t\t\t\t\tgamepads[num].joystick = js\n\t\t\t\t\t\tgamepads[num].last_buttons = 0\n\t\t\t\t\t\tfmt.Println(\"Opened gamepad \", num)\n\t\t\t\t\t\tfmt.Println(\"  Name: \", js.Name())\n\t\t\t\t\t\tfmt.Println(\"  # buttons : \", js.ButtonCount())\n\t\t\t\t\t\tfmt.Println(\"  # axes : \", js.AxisCount())\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// else do nothing since we already have a handle\n\t\t}\n\t\ttime.Sleep(time.Second / 2) // check 2 times a second for new joysticks\n\t}\n}\nfunc CheckChanged() {\n\tgo checkNewGamepads() // runs until application exits\n\tfor {\n\t\t// fmt.Print(\".\")\n\t\tgamepadUpdate(0)\n\t\tgamepadUpdate(1)\n\t\ttime.Sleep(time.Second / 60) // 60 times a second\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72473312/getting-error-while-fetching-certificate-from-windows-certificate-store-in-golan",
    "body": "\tfmt.Println(\"open cert store\")\n\t// Open the local cert store. Provider generally shouldn't matter, so use Software which is ubiquitous. See comments in getHostKey.\n\tstore, err := certtostore.OpenWinCertStore(certtostore.ProviderMSSoftware, \"\", []string{\"localhost\"}, nil, false)\n\n\tif err != nil {\n\t\tfmt.Errorf(\"OpenWinCertStore: %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Println(\"get cert from cert store\")\n\t// Obtain the first cert matching all of container/issuers/intermediates in the store.\n\t// This function is indifferent to the provider the store was opened with, as the store lists certs\n\t// from all providers.\n\tcrt, context, err := store.CertWithContext()\n\tif err != nil {\n\t\tfmt.Println(\"failed to get cert from cert store. \", err)\n\t\treturn\n\t}\n\n\tif crt == nil {\n\t\tfmt.Println(\"no cert\")\n\t\treturn\n\t}\n\tfmt.Println(\"get key from cert\")\n\t// Obtain the private key from the cert. This *should* work regardless of provider because\n\t// the key is directly linked to the certificate.\n\tkey, err := store.CertKey(context)\n\tif err != nil {\n\t\tfmt.Printf(\"private key not found in %s, %s\", store.ProvName, err)\n\t\treturn\n\t}\n\tif key == nil {\n\t\tfmt.Println(\"no key\")\n\t\treturn\n\t}\n\tfmt.Printf(\"find cert '%s' with private key in container '%s', algo '%s'\\n\", crt.Subject, key.Container, key.AlgorithmGroup)"
  },
  {
    "url": "https://stackoverflow.com/questions/72194979/golang-gorm-reference-two-columns-to-same-table-problem-with-insert",
    "body": "type AuthItem struct {\n    ID          uint   `gorm:\"primaryKey; column:id\" json:\"id\"`\n    Name        string `gorm:\"primaryKey; not null; type:varchar(64); column:name\" json:\"name\"`\n    ItemType    int64  `gorm:\"type:smallint; not null; column:item_type\" json:\"item_type\"`\n    Description string `gorm:\"size:255; column:description\" json:\"description\"`\n    AuthRelations []AuthItem `gorm:\"many2many:auth_relations; foreignKey:ID; joinForeignKey:Parent; References:ID; joinReferences:Child; constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72194979/golang-gorm-reference-two-columns-to-same-table-problem-with-insert",
    "body": "type AuthItem struct {\n    ID          uint   `gorm:\"primaryKey; column:id\" json:\"id\"`\n    Name        string `gorm:\"primaryKey; not null; type:varchar(64); column:name\" json:\"name\"`\n    ItemType    int64  `gorm:\"type:smallint; not null; column:item_type\" json:\"item_type\"`\n    Description string `gorm:\"size:255; column:description\" json:\"description\"`\n    Parent *uint `gorm:\"column: parent;\" json:\"parent\"`\n    AuthRelations []AuthItem `gorm:\"foreignKey:Parent\"; constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72134316/parse-content-disposition-header-in-go",
    "body": "func TestGetFile(t *testing.T) {\n...\n    cid := \"some string\"\n    // requestfile() creates, executes, and returns an httptest.ResponseRecorder to the requestFile endpoint\n    reqfileRespRecorder := requestfile()\n    disp := reqfileRespRecorder.Header().Get(\"Content-Disposition\")\n\tline := strings.Split(disp, \"=\")\n\tfilename := line[1]\n\tfmt.Println(\"filename: \", filename)\n    // createTmpFile creates a new file out of the contents recieved in requestfile()\n    filePath := \"/tmp/temp.xyz\"\n    file := createTmpFile(reqfileRespRecorder , filePath)\n    // CreateWriter() - writes file contents to body of multipart.Writer\n    w, body := createWriter(file)\n...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72126128/how-to-fetch-blob-from-azure",
    "body": "func getBlobClient(account, container, object string) (*azblob.BlockBlobClient, error) {\n\taccountKey, ok := os.LookupEnv(\"AZURE_STORAGE_ACCOUNT_KEY\")\n\tif !ok {\n\t\treturn nil, errors.New(\"AZURE_STORAGE_ACCOUNT_KEY could not be found\")\n\t}\n\tcredential, err := azblob.NewSharedKeyCredential(account, accountKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\taccountPath := fmt.Sprintf(\"https://%s.blob.core.windows.net/\", account)\n\tserviceClient, err := azblob.NewServiceClientWithSharedKey(accountPath, credential, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcontainerClient, err := serviceClient.NewContainerClient(container)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tblobClient, err := containerClient.NewBlockBlobClient(object)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn blobClient, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72041632/redis-dump-and-restore-via-a-file-in-golang",
    "body": "client := redis.NewClient(&redis.Options{\n\t\tAddr: \"127.0.0.1:6379\",\n\t})\n\tdump := client.Dump(context.Background(), \"key1\")\n\tif !utf8.ValidString(dump.Val()) {\n\t\tfmt.Println(\"Not valid utf8 string\")\n\t}\n\tfmt.Println(\"before=\", []byte(dump.Val())) // [0 6 118 97 108 117 101 49 9 0 62 13 21 118 249 113 49 233]\n\tb, err := json.Marshal(dump.Val())\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"marshal: %w\", err))\n\t}\n\tvar str string\n\tif err = json.Unmarshal(b, &str); err != nil {\n\t\tpanic(fmt.Errorf(\"unmarshal: %w\", err))\n\t}\n\tfmt.Println(\"after=\", []byte(str)) // [0 6 118 97 108 117 101 49 9 0 62 13 21 118 239 191 189 113 49 239 191 189]\n\tclient.Restore(context.Background(), \"key2\", 0, str)"
  },
  {
    "url": "https://stackoverflow.com/questions/72030242/testing-and-mocking-pubsub-subscription-and-channel-in-golang",
    "body": "type MockClient struct {\n}\ntype MockSubscription struct {\n}\nfunc (mc MockClient) Subscription(sub string) {\n\treturn MockSubscription{}\n}\nfunc (ms MockSubscription) Receive(ctx context.Context,f func(context.Context, *pubsub.Message)) error {\n\t/* create the message you're mocking you're receviing here */\n\t/* you might have to mock the message struct and its interface if you want to validate that it has be ACKed */\n\tmsg := new(pubsub.Message)\n\tf(ctx, msg)\n\t// return an error or not i'll be returning nil for now\n\treturn nil\n}\nfunc TestConsume(t *testing.T) {\n\t// create channels\n\ttestChan := make(chan string, 100)\n\tservice := Service{messageChannel: testChan, Client: MockClient{}}\n\tsending := service.messageChannel\n\tsending <- \"Test message\"\n\tt.Run(\"Test when consume runs a message is sent via channel\", func(t *testing.T) {\n\t\t\tservice.Consume() // run the function so you can test it\n\t\t\tgot := <-sending\n\t\t\twant := \"Test message\"\n\t\t\tif want != got {\n\t\t\t\t\tt.Fatalf(\"wanted %v, got %v\", want, got)\n\t\t\t}\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71947767/updating-multiple-columns-with-different-values-for-multiple-rows-in-one-query",
    "body": "delimiter //\ndrop procedure if exists insert_from_array//\ncreate procedure insert_from_array()\nbegin\ndeclare c_row_id int;\ndeclare c_id int;\ndeclare c_val1 int;\ndeclare c_val2 int;\ndeclare fin bool default false;\ndeclare c0 cursor for select row_id from t;\ndeclare c1 cursor for select id from a_id;\ndeclare c2 cursor for select val1 from a_val1;\ndeclare c3 cursor for select val2 from a_val2;\ndeclare continue handler for not found set fin=true;\nopen c0;\nopen c1;\nopen c2;\nopen c3;\nlp:loop\n\tfetch  c0 into c_row_id;\n\tfetch  c1 into c_id;\n\tfetch  c2 into c_val1;\n\tfetch c3 into c_val2;\n\tif fin=true then\n\t\tleave lp;\n\tend if;\n\tupdate t set id=c_id,val1=c_val1,val2=c_val2 where row_id=c_row_id;\nend loop lp;\nend//\ncall insert_from_array//"
  },
  {
    "url": "https://stackoverflow.com/questions/71903750/set-base-path-for-follow-up-http-request",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\nfunc hello(w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello1\\n\")\n}\nfunc main() {\n\tfs := http.FileServer(http.Dir(\"./page/static\"))\n\thttp.Handle(\"/page/styles/\", http.StripPrefix(\"/page/styles/\", fs))\n\tpage_fs := http.FileServer(http.Dir(\"./page\"))\n\thttp.Handle(\"/page/\", http.StripPrefix(\"/page/\", page_fs))\n\thttp.HandleFunc(\"/hello\", hello)\n\tlog.Println(\"Listening on :3000...\")\n\terr := http.ListenAndServe(\":3000\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71857665/golang-request-body-keep-giving-eof-error",
    "body": "func insertUser(w http.ResponseWriter, r *http.Request) {\n  type User struct {\n    Uemail string `json:\"uEmail\"`\n    Upass string `json:\"uPass\"`\n  }\n  var u User\n  if r.Method == \"POST\" {\n    if r.Header.Get(\"Content-Type\") != \"\" {\n      value, _ := header.ParseValueAndParams(r.Header, \"Content-Type\")\n      if value != \"application/json\" {\n          msg := \"Content-Type header is not application/json\"\n          json.NewEncoder(w).Encode(Errormessage{msg});\n          return\n      }\n    }\n    // CODE CHANGED HERE\n    body, err := ioutil.ReadAll(r.Body)\n    defer r.Body.Close()\n    if err != nil {\n        // handle error\n        return\n    }\n    err = json.Unmarshal(body, &u)\n    if err != nil {\n        // handle error\n        return\n    }\n    // CHANGED TILL HERE\n    var uEmail string = u.Uemail\n    var uPass string = u.Upass\n\n    fmt.Println(\"User Namess :\", uEmail)\n    fmt.Println(\"User Password :\", uPass)\n    w.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n    w.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71811175/how-to-redirect-os-stdout-to-io-multiwriter-in-go",
    "body": "func Test_Interactive(t *testing.T) {\n\tvar tests = []struct {\n\t\tfile string\n\t}{\n\t\t{\"Test_Client.py\"},\n\t}\n\tfor tc, tt := range tests {\n\t\tfmt.Println(\"---------------------------------\")\n\t\tfmt.Printf(\"Test %d, Test Client:%v\\n\", tc+1, tt.file)\n\t\tfmt.Println(\"---------------------------------\")\n\t\t// Define external program\n\t\tclient := exec.Command(\"python3\", tt.file)\n\t\t// Define log file\n\t\tlogfile, err := os.Create(tt.file + \".log\")\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer logfile.Close()\n\t\tout := os.Stdout\n\t\tdefer func() { os.Stdout = out }() // Restore original Stdout\n\t\tin := os.Stdin\n\t\tdefer func() { os.Stdin = in }() // Restore original Stdin\n\t\t// Create pipe connect os.Stdout to client.Stdin\n\t\tgr, gw, _ := os.Pipe()\n\t\t// Connect os.Stdout to writer side of pipe\n\t\tos.Stdout = gw\n\t\t// Create MultiWriter to write to logfile and os.Stdout at the same time\n\t\tgmw := io.MultiWriter(out, logfile)\n\t\t// Create a tee reader read from reader side of the pipe and flow to the MultiWriter\n\t\t// Repleace the cmd.Stdin with TeeReader\n\t\tclient.Stdin = io.TeeReader(gr, gmw)\n\t\t// Create a pipe to connect client.Stdout to os.Stdin\n\t\tcr, cw, _ := os.Pipe()\n\t\t// Create MultWriter to client stdout\n\t\tcmw := io.MultiWriter(cw, logfile, out)\n\t\tclient.Stdout = cmw\n\t\t// Connect os stdin to another end of the pipe\n\t\tos.Stdin = cr\n\t\t// Start Client\n\t\tclient.Start()\n\t\t// Start main\n\t\tmain()\n\t\t// Check Testing program error\n\t\tif err := client.Process.Release(); err != nil {\n\t\t\tif exiterr, ok := err.(*exec.ExitError); ok {\n\t\t\t\tif status, ok := exiterr.Sys().(syscall.WaitStatus); ok {\n\t\t\t\t\tlog.Printf(\"Exit Status: %d\", status.ExitStatus())\n\t\t\t\t\tt.Errorf(\"Tester return error\\n\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.Fatalf(\"cmd.Wait: %v\", err)\n\t\t\t\tt.Errorf(\"Tester return error\\n\")\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71625904/how-to-insert-package-txt-into-scripts-object-of-package-json-file",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"strings\"\n)\nfunc main() {\n\tdemo()\n}\nfunc demo() {\n\t// getting .txt file content\n\ttxtByte, err := ioutil.ReadFile(\"./package.txt\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttxtString := string(txtByte)\n\t// getting main lines to append\n\ttxtLines := getMainLines(txtString)\n\t// getting .json file content\n\tjsonByte, err := ioutil.ReadFile(\"./package.json\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tjsonString := string(jsonByte)\n\t// getting index of where the main lines will be append on .json file\n\tindexOfAppend := getIndex(jsonString, `\"scripts\": {`)\n\t// merging\n\tfinalString := merge(jsonString, indexOfAppend, txtLines)\n\tfmt.Println(finalString)\n}\nfunc getMainLines(txtString string) string {\n\t// eleminating `\"scripts\": {` part from .txt file\n\ttxtString = strings.TrimSpace(strings.TrimPrefix(txtString, `\"scripts\": {`))\n\t// eleminating `}` part from .txt file\n\ttxtString = strings.TrimSpace(strings.TrimSuffix(txtString, `}`))\n\t// finally return main lines\n\treturn txtString\n}\nfunc getIndex(jsonString, subStr string) int {\n\t// identifying index of where to append\n\tindex := strings.Index(jsonString, subStr)\n\tif index == -1 {\n\t\tfmt.Println(\"invalid sub-string\")\n\t}\n\t// index is the value of first char of subStr\n\t// so adding the length upto `{`\n\treturn index + 12 //  `\"scripts\": {` -->  have 12 chars\n}\nfunc merge(jsonString string, indexOfAppend int, txtLines string) string {\n\t// newStr is consist of 3 part\n\t// first: content of .json file upto `\"scripts\": {`\n\t// second: content of main lines\n\t// thirs: last content of .json file\n\tnewStr := jsonString[:indexOfAppend] + txtLines + jsonString[indexOfAppend:]\n\treturn newStr\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71620262/golang-get-the-pointer-to-a-struct-using-reflection",
    "body": "package main\nimport (\n    \"reflect\"\n    \"fmt\"\n)\ntype foo struct {\n    A    *bar\n    data []int8\n}\ntype bar struct {\n    B       *foo\n    ptrData *[]float64\n}\nfunc main() {\n    dataLen := 32\n    refData := make([]float64, dataLen)\n\n    // allocate here, now value has a pointer\n    fooObj := &foo{data: make([]int8, dataLen)}\n    barObj := bar{\n        B:       fooObj,\n        ptrData: &refData,\n    }\n    fooObj.A = &barObj\n    fooVal := reflect.ValueOf(fooObj)\n    fmt.Println(fooVal.Pointer()) // succeeds\n    // More analysis code after this\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71620262/golang-get-the-pointer-to-a-struct-using-reflection",
    "body": "package main\nimport \"reflect\"\nimport \"fmt\"\nfunc main() {\n    val := new(int)\n    slice := []int{}\n    local := 10\n    fn := func() {}\n    fmt.Println(PointerOf(val))\n    fmt.Println(PointerOf(slice))\n    fmt.Println(PointerOf(&local))\n    fmt.Println(PointerOf(fn))\n    fmt.Println(PointerOf(3))\n}\nfunc PointerOf(value any) (p uintptr, ok bool) {\n    rValue := reflect.ValueOf(value)\n\n    if(rValue.Kind() == reflect.Pointer || rValue.Kind() == reflect.Slice || rValue.Kind() == reflect.Func) {\n        return rValue.Pointer(), true\n    }\n    if(rValue.CanAddr()) {\n        return rValue.Addr().Pointer(), true\n    }\n    return\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71611436/not-printing-series-of-variable-in-golang",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\nvar reader = bufio.NewReader(os.Stdin)\nfunc main() {\n\tfirstName := getUserData(\"Enter First Name: \")\n\tlastName := getUserData(\"Enter Last Name: \")\n\tbirthdate := getUserData(\"Enter Date of Birth: \")\n\tcreated := time.Now()\n\tfmt.Println(firstName, lastName, birthdate, created) //will print all\n\tfmt.Println(firstName)                               // prints firstName\n\tfmt.Println(lastName)                                // prints lastName\n\tfmt.Println(birthdate)                               // prints birthdate\n\tfmt.Println(created)                                 // prints created\n}\nfunc getUserData(promptText string) string {\n\tfmt.Print(promptText)\n\tuserInput, _ := reader.ReadString('\\n')\n\tcleanedInput := strings.TrimSpace(userInput)\n\treturn cleanedInput\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71530942/how-to-re-establish-grpc-bidirectional-stream-if-internet-connection-is-down",
    "body": "for {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn\n\tcase <-reconnectCh:\n\t\tif client.Conn.GetState() != connectivity.Ready && *isConnectedWebSocket {\n\t\t\tif o.waitUntilReady(client, isConnectedWebSocket, ctx) {\n\t\t\t\terr := o.generateNewProcessOrderStream(client, ctx)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlogger.Logger.Error(\"failed to establish stream connection to grpc server ...\")\n\t\t\t\t}\n\t\t\t\t// re-listening server side streaming\n\t\t\t\tgo o.listenProcessOrderServerSide(client, reconnectCh, ctx, isConnectedWebSocket)\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71455163/rethinkdb-r-dblist-gives-blank-object-in-return",
    "body": "func main() {\n\trdbOpts := r.ConnectOpts{\n\t\tAddress: \"localhost:28015\",\n\t}\n\trconn, err := r.Connect(rdbOpts)\n\tcheckError(err)\n\tres, err := r.DBList().Run(rconn)\n\tcheckError(err)\n\tprintObj(res)\n\tvar row []interface{}\n\terr2 := res.All(&row)\n\tif err2 == r.ErrEmptyResult {\n\t\t// row not found\n\t}\n\tif err2 != nil {\n\t\t// error\n\t}\n\tif row != nil {\n\t\tjsonData, _ := json.Marshal(row)\n\t\tfmt.Println(\"total number of rows:\", len(row))\n\t\tfmt.Println(\"row map obj:\", row)\n\t\tfmt.Println(\"row JSON output:\", string(jsonData))\n\t} else {\n\t\tfmt.Println(\"No rows returned\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71448961/i-can-not-understand-why-sudoku-does-not-fill",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"unicode/utf8\"\n)\nfunc printGrid(grid [9][9]rune) {\n\tfor i := range grid {\n\t\tfor j := range grid {\n\t\t\tPrintRune(grid[i][j])\n\t\t\tPrintRune(' ')\n\t\t}\n\t\tPrintRune('\\n')\n\t}\n}\nfunc isSafe(grid *[9][9]rune, row int, col int, num rune) bool {\n\tfor x := 0; x < len(grid); x++ {\n\t\tif grid[row][x] == num || grid[x][col] == num {\n\t\t\treturn false\n\t\t}\n\t}\n\tstartRow := row - row%3\n\tstartCol := col - col%3\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tif grid[i+startRow][j+startCol] == num {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nfunc Sudoku(grid *[9][9]rune, row int, col int) bool {\n\tif col == 9 && row == 8 {\n\t\treturn true\n\t}\n\tif col == 9 {\n\t\trow++\n\t\tcol = 0\n\t}\n\tif grid[row][col] > '0' {\n\t\treturn Sudoku(grid, row, col+1)\n\t}\n\tfor num := '1'; num <= '9'; num++ {\n\t\tif isSafe(grid, row, col, num) {\n\t\t\tgrid[row][col] = num\n\t\t\tif Sudoku(grid, row, col+1) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\tgrid[row][col] = '0'\n\t}\n\treturn false\n}\nfunc PrintRune(r rune) error {\n\tl := utf8.RuneLen(r)\n\tif l == -1 {\n\t\treturn errors.New(\"The rune is not a valid value to encode in UTF-8\")\n\t}\n\tp := make([]byte, l)\n\tutf8.EncodeRune(p, r)\n\t_, err := os.Stdout.Write(p)\n\treturn err\n}\nfunc main() {\n\t//args := os.Args[1:]\n\targs := []string{\n\t\t\"2...7....\",\n\t\t\"...1.2734\",\n\t\t\"467..8..9\",\n\t\t\"...91...8\",\n\t\t\".1..87...\",\n\t\t\".862541.7\",\n\t\t\"..834..2.\",\n\t\t\"94..2.85.\",\n\t\t\"65..9.4..\"}\n\tvar grid [9][9]rune\n\tif len(args) == 9 {\n\t\tfor i := 0; i < len(args[i])-1; i++ {\n\t\t\tfor j, s := range []rune(args[i]) {\n\t\t\t\tif s >= '1' && s <= '9' {\n\t\t\t\t\tgrid[i][j] = s\n\t\t\t\t} else {\n\t\t\t\t\tgrid[i][j] = '0'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintGrid(grid)\n\t\tfmt.Printf(\"\\n---------\\n\")\n\t\tif Sudoku(&grid, 0, 0) {\n\t\t\tprintGrid(grid)\n\t\t}\n\t} else {\n\t\tfor _, s := range \"Error\" {\n\t\t\tPrintRune(s)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71415030/how-can-i-auto-generate-inputs-tf-and-outputs-tf-variables-when-working-with-ter",
    "body": "#!/usr/bin/env bash\nset -o pipefail\n_hcledit=$(which hcledit)\nfor tf_file in $(ls *.tf); do\n    cat $tf_file | $_hcledit block list | while read line; do\n        block_type=\"${line%%.*}\"\n        line=\"${line#*.}\"\n        case $block_type in\n            locals|output|variable|data) continue; break ;;\n            module)\n                output_name=$line\n                output_description=\"Module '$output_name' attributes\"\n                output_value=\"$block_type.$output_name\"\n                ;;\n            resource)\n                label_kind=\"${line%.*}\"\n                label_name=\"${line#*.}\"\n                output_name=\"${label_kind}_${label_name//[\\-]/_}\"\n                output_description=\"Resource '$label_kind.$label_name' attributes\"\n                output_value=\"$label_kind.$label_name\"\n                ;;\n        esac\n\n        cat <<-EOT\noutput \"$output_name\" {\n    description = \"$output_description\"\n    value       = $output_value\n}\nEOT\n    done\ndone"
  },
  {
    "url": "https://stackoverflow.com/questions/71258244/merging-2-slices-from-a-method-into-a-map",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tcities, prices := citiesAndPrices()\n\ttowns := groupSlices(cities, prices)\n\tfmt.Println()\n\ttotal := 0\n\tfor c, p := range towns {\n\t\tfmt.Println(c, p)\n\t\ttotal += len(p)\n\t}\n\tfmt.Println()\n\tfmt.Println(\"total must 200, found :\", total) // total must be 200\n}\nfunc citiesAndPrices() ([]string, []int) {\n\tcityChoices := []string{\"Berlin\", \"Moscow\", \"Chicago\", \"Tokyo\", \"London\"}\n\tdataPointCount := 100\n\tcities := make([]string, dataPointCount)\n\tprices := make([]int, dataPointCount)\n\tfor i := range cities {\n\t\tcities[i] = cityChoices[rand.Intn(len(cityChoices))]\n\t\tprices[i] = rand.Intn(100)\n\t}\n\tfmt.Println(\"inside citiesAndPrices func\")\n\tfmt.Println(cities)\n\tfmt.Println(prices)\n\tfmt.Println(\"done run citiesAndPrices func\\n\")\n\treturn cities, prices\n}\nfunc groupSlices(c1 []string, p1 []int) map[string][]int {\n\tc2, p2 := citiesAndPrices()\n\ttowns := make(map[string][]int)\n\tfor i, t := range c1 {\n\t\t// this is for cities1 and price1\n\t\tif towns[t] == nil {\n\t\t\ttowns[t] = make([]int, 0)\n\t\t}\n\t\ttowns[t] = append(towns[t], p1[i])\n\t\t// this is for cities2 and price2\n\t\tif towns[c2[i]] == nil {\n\t\t\ttowns[c2[i]] = make([]int, 0)\n\t\t}\n\t\ttowns[c2[i]] = append(towns[c2[i]], p2[i])\n\t}\n\treturn towns\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71242354/how-to-create-a-cookie-session-that-will-be-available-in-different-functions",
    "body": "func main() {\n    client := login(\"test\", \"test\")\n    client.DoSomething()\n    client.DoSomethingElse()\n}\ntype WebClient struct {\n    client *http.Client\n    cookies []*http.Cookie\n}\nfunc NewWebClient(email, password string) (*WebClient) {\n    var cookies []*http.Cookie\n    loginLink := \"https://oskelly.ru/api/v2/account/rawauth\"\n    jar, _ := cookiejar.New(nil)\n    client := http.Client{Jar: jar}\n    resp, _ := client.PostForm(\n        loginLink,\n        url.Values{ \"rawEmail\": email,\n                    \"rawPassword\": password,\n                  })\n    body, _ := ioutil.ReadAll(resp.Body)\n    cookies = resp.Cookies()\n    return &WebClient{\n                       client: &client,\n                       cookies: cookie,\n                     }\n}\nfunc (c *WebClient) DoSomething() {\n    // you can access the client and cookies you created earlier from here\n    fmt.Printf(\"%+v\\n\", c.cookies)\n}\nfunc (c *WebClient) DoSomethingElse() {\n    // you can access the client and cookies you created earlier from here\n    fmt.Printf(\"%+v\\n\", c.cookies)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71184772/handling-a-disabled-azure-key-vault-secret-using-go-azure-sdk",
    "body": "\tresponse, err := sm.client.GetSecret(ctx, fmt.Sprintf(azureVaultURLFmt, sm.azureVaultName), secretID, \"\")\n\tif err != nil {\n\t\t// We can ignore some errors\n\t\tif de, ok := err.(autorest.DetailedError); ok {\n\t\t\tif re, ok := de.Original.(*azure.RequestError); ok {\n\t\t\t\tif re.ServiceError.Code == \"SecretNotFound\" {\n\t\t\t\t\t// Secret not existing is fine, as that means we will create a new secret\n\t\t\t\t\treturn []byte{}, nil\n\t\t\t\t} else if code, ok := re.ServiceError.InnerError[\"code\"].(string); ok && code == \"SecretDisabled\" {\n\t\t\t\t\t// Disabled secret also fine, as it means we will create a new version of the secret\n\t\t\t\t\treturn []byte{}, nil\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn []byte{}, err\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/71105918/how-to-use-gcp-signed-url-with-custom-headers-in-go",
    "body": "import (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\t\"cloud.google.com/go/storage\"\n\t\"github.com/dkbyo/go-stringhttpheader\"\n)\ntype Headers struct {\n\tGoogleMetaReference string `header:\"x-goog-meta-reference\"`\n}\nfunc GenerateSignedURL(bucket string, key string, expiration time.Time,\n) (string, error) {\n\tctx := context.Background()\n\tgcsClient, err := storage.NewClient(ctx)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"storage.NewClient: %v\", err)\n\t}\n\tdefer gcsClient.Close()\n\theaders := Headers{\n\t\tGoogleMetaReference: \"xxx\",\n\t}\n\tfmt.Print(stringhttpheader.Encode(headers))\n\tstringheaders, _ := stringhttpheader.Encode(headers)\n\t//storage.SignedURL()\n\topts := &storage.SignedURLOptions{\n\t\tScheme:      storage.SigningSchemeV4,\n\t\tMethod:      \"PUT\",\n\t\tContentType: \"text/csv\",\n\t\tHeaders:     stringheaders,\n\t\tExpires:     expiration,\n\t}\n\turl, err := gcsClient.Bucket(bucket).SignedURL(key, opts)\n\tif err != nil {\n\t\tlog.WithContext(ctx).Warn(\"Failed to generate a GCS signed URL\")\n\t\treturn \"\", err\n\t}\n\treturn url, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71097866/golang-redis-websocket-handler",
    "body": "func TestSocket() fiber.Handler {\n    socket := websocket.New(func(c *websocket.Conn) {\n\t\tvar redisClient = redis.NewClient(&redis.Options{  //  <--  use local redisClient var\n\t\t\tAddr: \"localhost:6379\",\n\t\t})\n        go deliverMessages(c)\n        var (\n            msg []byte\n            err error\n        )\n\t\tdefer func() {\n\t\t\tredisClient.Close()             // <-- then close, when websocket connection close\n\t\t\tquitSubscribeGoRutine <- true   // <-- change true, when websocket connection close\n\t    }()\n        for {\n            if _, msg, err = c.ReadMessage(); err != nil {\n                log.Println(\"read:\", err)\n...\nfunc deliverMessages(c *websocket.Conn) {\n    subscriber := redisClient.Subscribe(ctx, \"chat\")\n    user := User{}\n\tfor {\n\t\tselect {\n\t\tcase <-quitSubscribeGoRutine:        //  <-- exit goroutine, when channel is true\n\t\t\t\treturn\n\t\tdefault:\n            msg, err := subscriber.ReceiveMessage(ctx)   //  <-- exit goroutine, when redisClient close\n            if err != nil {\n                log.Println(\"subscriber:\", err)\n                break               //  <-- use break instead of panic\n            }\n            if err := json.Unmarshal([]byte(msg.Payload), &user); err != nil {\n                log.Println(\"Unmarshal:\", err)\n                panic(err)\n            }\n            text := []byte(fmt.Sprintf(\"{\\\"name\\\":\\\"%s\\\", \\\"email\\\":\\\"%s\\\"}\", user.Name, user.Email))\n            if err = c.WriteMessage(websocket.TextMessage, text); err != nil {\n                log.Println(\"write:\", err)\n                break\n            }\n\t\t}\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71088810/go-test-input-and-output-from-file",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc check(e error) {\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\nfunc ReadFromFile(path string) []float64 {\n\tdat, err := os.ReadFile(path) // read file contents\n\tcheck(err)\n\tstringArr := strings.Split(string(dat),\" \")\n\tvar numbers []float64\n\tfor _, arg := range stringArr {\n\t\tif n, err := strconv.ParseFloat(arg, 64); err == nil {\n\t\t\tnumbers = append(numbers, n)\n\t\t}\n\t}\n\treturn numbers // return file contents in required format (in this case []float64)\n}\nfunc WriteFile(data string) error{\n\terr := os.WriteFile(\"output.txt\", []byte(data), 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main(){\n\tvar n, m, a float64\n\tnumbers := ReadFromFile(\"input.txt\")\n\tfmt.Println(numbers)\n\tn = numbers[0]\n\tm = numbers[1]\n\ta = numbers[2]\n\ta_in_n_ceil := uint64(math.Ceil(n / a))\n\ta_in_m_ceil := uint64(math.Ceil(m / a))\n\ta_in_n_and_m := a_in_n_ceil * a_in_m_ceil\n\tfmt.Println(a_in_n_and_m) // print to console\n\terr = WriteFile(fmt.Sprint(a_in_n_and_m)) // write output to a file\n    if err != nil {\n       fmt.Println(\"Error in file write : \", err)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71053747/optimizing-for-update-only-files-of-size-4-20kb-on-restricted-nvme-aws-disks-lo",
    "body": "1  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     2  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     3  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     4  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     5  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     6  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     7  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     8  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n     9  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n    10  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n    11  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\n    12  model name      : Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz"
  },
  {
    "url": "https://stackoverflow.com/questions/71053747/optimizing-for-update-only-files-of-size-4-20kb-on-restricted-nvme-aws-disks-lo",
    "body": "% dd if=/dev/zero of=./zeros.dat bs=4096 count=262144\n262144+0 records in\n262144+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 2.67881 s, 401 MB/s\n% dd if=/dev/zero of=./zeros.dat bs=4096 count=262144 conv=fdatasync\n262144+0 records in\n262144+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 1.02852 s, 1.0 GB/s\n% dd if=/dev/zero of=./zeros.dat bs=4096 count=262144 conv=fsync\n262144+0 records in\n262144+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 0.875749 s, 1.2 GB/s"
  },
  {
    "url": "https://stackoverflow.com/questions/70947283/execute-multiple-independent-jobs-continuously",
    "body": "type job struct {\n\tid     int\n\tresult chan error\n}\nfunc newJob(id int) job {\n\treturn job{\n\t\tid:     id,\n\t\tresult: make(chan error, 1),\n\t}\n}\ntype service struct {\n\tpending chan job\n\tconsumerLimit  int\n\trepeatInterval time.Duration\n\tisClosed chan struct{}\n\tshutdown chan chan error\n}\nfunc newService(repeatInterval time.Duration, consumerLimit int, pendingChannelSize int) *service {\n\ts := &service{\n\t\tpending:        make(chan job, pendingChannelSize),\n\t\tconsumerLimit:  consumerLimit,\n\t\trepeatInterval: repeatInterval,\n\t\tisClosed:       make(chan struct{}, consumerLimit),\n\t\tshutdown:       make(chan chan error),\n\t}\n\tfor i := 0; i < s.consumerLimit; i++ {\n\t\tgo s.consumer()\n\t}\n\treturn s\n}\nfunc (s *service) do(ctx context.Context, job job) error {\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\tcase s.pending <- job:\n\t\treturn <-job.result\n\tcase <-s.isClosed:\n\t\treturn errors.New(\"service has been shut down\")\n\t}\n}\nfunc (s *service) consumer() {\n\tfor {\n\t\tselect {\n\t\tcase j := <-s.pending:\n\t\t\t//Simulate working process\n\t\t\ttime.Sleep(time.Duration(rand.Intn(200)) + 200)\n\t\t\tj.result <- nil\n\t\t\tfmt.Println(fmt.Sprintf(\"job %v is done\", j.id))\n\t\t\tgo func() {\n\t\t\t\t//Repeat after a time\n\t\t\t\ttime.Sleep(s.repeatInterval)\n\t\t\t\tctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n\t\t\t\tdefer cancel()\n\t\t\t\tif err := s.do(ctx, newJob(j.id)); err != nil {\n\t\t\t\t\tfmt.Println(fmt.Errorf(\"failed to send job to repeat: %v\", err))\n\t\t\t\t}\n\t\t\t}()\n\t\tcase result := <-s.shutdown:\n\t\t\tresult <- nil\n\t\t\treturn\n\t\t}\n\t}\n}\nfunc (s *service) close() error {\n\tresult := make(chan error, 1)\n\tfor i := 0; i < s.consumerLimit; i++ {\n\t\ts.shutdown <- result\n\t}\n\tclose(s.isClosed)\n\treturn <-result\n}\nfunc main() {\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\tservice := newService(time.Second, 5, 1000)\n\t//Assign jobs\n\tfor i := 1; i < 10; i++ {\n\t\tgo func(i int) {\n\t\t\tif err := service.do(context.Background(), newJob(i)); err != nil {\n\t\t\t\tfmt.Println(fmt.Errorf(\"failed to send job: %v\", err))\n\t\t\t}\n\t\t}(i)\n\t}\n\tselect {\n\tcase <-interrupt:\n\t\tswitch err := service.close(); err {\n\t\tcase nil:\n\t\t\tfmt.Println(\"service has been shutdown successfully\")\n\t\tdefault:\n\t\t\tfmt.Println(fmt.Errorf(\"failed to graceful shut down service: %w\", err))\n\t\t}\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70947283/execute-multiple-independent-jobs-continuously",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\ntype Jobs struct {\n\tID string\n\t// or anything you want to add\n}\nfunc main() {\n\tjobs := make(Jobs)\n\tvar wg sync.WaitGroup\n\tnumWorker := 16\n\tfor i := 0; i < numWorker; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tworker(jobs)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\ttasks := []Jobs{}\n\t// inset your task here\n\tfor _, i := range tasks {\n\t\tjobs <- i\n\t}\n\tclose(jobs)\n\twg.Wait()\n}\nfunc worker(jobs chan Jobs) {\n\tfor job := range jobs {\n\t\t// do whatever you want to do\n\t\tdoSomething(job)\n\t}\n}\nfunc doSomething(job Jobs) {\n\tfmt.Println(job)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70802021/calling-opcua-node-attributes-returns-eof-error",
    "body": "browseChildren := func(refType uint32) error {\n\t\trefs, err := n.ReferencedNodes(refType, ua.BrowseDirectionForward, ua.NodeClassAll, true)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"references: %d: %s\", refType, err)\n\t\t}\n\t\tfmt.Printf(\"found %d child refs\\n\", len(refs))\n\t\tfor _, rn := range refs {\n\t\t\trefNodeID := ua.MustParseNodeID(rn.ID.String())\n\t\t\trefNode := c.Node(refNodeID) // parse the referenced nodes before usage\n\t\t\terr := browse(c, refNode)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"browse children: %s\", err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Found a Node: %s\\n\", refNode.ID.String())\n\t\t}\n\t\treturn nil\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/70769569/how-to-list-pods-which-are-associated-with-persistent-volume-claim-using-client",
    "body": "// Set namespace\nvar namespace = \"default\"\n// Get pods list\npodList, _ := clientset.CoreV1().Pods(namespace).List(context.TODO(), metav1.ListOptions{})\n// Create new pod list\npodsWithPVC := &corev1.PodList{}\n// Filter pods to check if PVC exists, if yes append to the list\nfor _, pod := range podList.Items {\n        for _, volume := range pod.Spec.Volumes {\n                if volume.PersistentVolumeClaim != nil {\n                        podsWithPVC.Items = append(podsWithPVC.Items, pod)\n                        fmt.Println(\"Pod Name: \" + pod.GetName())\n                        fmt.Println(\"PVC Name: \" + volume.PersistentVolumeClaim.ClaimName)\n                }\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70769569/how-to-list-pods-which-are-associated-with-persistent-volume-claim-using-client",
    "body": "package main\nimport (\n        \"context\"\n        \"flag\"\n        \"fmt\"\n        \"path/filepath\"\n        corev1 \"k8s.io/api/core/v1\"\n        metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n        \"k8s.io/client-go/kubernetes\"\n        \"k8s.io/client-go/tools/clientcmd\"\n        \"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n        var kubeconfig *string\n        if home := homedir.HomeDir(); home != \"\" {\n                kubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n        } else {\n                kubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n        }\n        flag.Parse()\n        config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n        if err != nil {\n                panic(err)\n        }\n        clientset, err := kubernetes.NewForConfig(config)\n        if err != nil {\n                panic(err)\n        }\n        // Set namespace\n        var namespace = \"default\"\n        // Get pods list\n        podList, _ := clientset.CoreV1().Pods(namespace).List(context.TODO(), metav1.ListOptions{})\n        // Create new pod list\n        podsWithPVC := &corev1.PodList{}\n        // Filter pods to check if PVC exists, if yes append to the list\n        for _, pod := range podList.Items {\n                for _, volume := range pod.Spec.Volumes {\n                        if volume.PersistentVolumeClaim != nil {\n                                podsWithPVC.Items = append(podsWithPVC.Items, pod)\n                                fmt.Println(\"Pod Name: \" + pod.GetName())\n                                fmt.Println(\"PVC Name: \" + volume.PersistentVolumeClaim.ClaimName)\n                        }\n                }\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70763502/golang-template-json-to-yml-format",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype Service struct {\n\tName    string                 `json:\"name\"`\n\tHosts   []Host                 `json:\"hosts\"`\n\tConfigs map[string]interface{} `json:\"configs\"`\n}\ntype Host struct {\n\tHostName         string                 `json:\"host_name\"`\n\tCustomHostConfig map[string]interface{} `json:\"config\"`\n}\nvar services []Service\n// create some sample data similar to what you show\nfunc init() {\n\tvar zk Service\n\tzk.Name = \"zookeeper\"\n\tzk.Configs = map[string]interface{}{\n\t\t\"zookeeper_user\":  \"custom-user\",\n\t\t\"zookeeper_group\": \"custom-group\",\n\t}\n\tzk.Hosts = []Host{\n\t\t{\"ip-172-31-34-246.us-east-2.compute.internal\",\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"zookeeper_id\": 2,\n\t\t\t}},\n\t\t{\"ip-172-31-37-15.us-east-2.compute.internal\",\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"zookeeper_id\": 3,\n\t\t\t}},\n\t}\n\tservices = []Service{zk}\n}\nfunc main() {\n\tout := make(map[string]interface{})\n\tfor _, service := range services {\n\t\tvar hosts = make(map[string]interface{})\n\t\tfor _, host := range service.Hosts {\n\t\t\thosts[host.HostName] = host.CustomHostConfig\n\t\t}\n\t\tout[service.Name] = map[string]interface{}{\n\t\t\t\"hosts\":   hosts,\n\t\t\t\"configs\": service.Configs,\n\t\t}\n\t}\n\tbytes, err := yaml.Marshal(out)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(bytes))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70658523/go-unable-to-unmarshal-json-value",
    "body": "// for parsing jsonb coming from db query\ntype Result struct {\n\tId \t\t\tint\n\tExpertise \tjson.RawMessage // change\n\tLanguages \tjson.RawMessage // change\n}\n// the database query itself\ne, _ := json.Marshal(filters.Expertise)\nl, _ := json.Marshal(filters.Languages)\nrow := r.db.QueryRow(`\n\t\tINSERT INTO filters (user_id, expertise, languages)\n\t\tVALUES ($1, $2, $3)\n\t\tON CONFLICT (user_id) DO\n\t\tUPDATE SET expertise=$2, languages=$3\n\t\tRETURNING id, expertise, languages;\n\t`, userid, e, l)\nvar res Result\nerr := row.Scan(&res.Id, &res.Expertise, &res.Languages) // scanning to result\nif err != nil {\n\t\tfmt.Println(\"Unable to create a new filter ==>\", err)\n\t\treturn nil, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70526099/go-pubsub-without-mutexes",
    "body": "package notif\nimport (\n\t\"context\"\n\t\"sync\"\n\t\"time\"\n\t\"unsafe\"\n)\ntype Client struct {\n\trecv   chan interface{}\n\tch     *Channel\n\to      sync.Once\n\tctx    context.Context\n\tcancel context.CancelFunc\n}\n// will be nil if this client is write-only\nfunc (c *Client) Listen() <-chan interface{} {\n\treturn c.recv\n}\nfunc (c *Client) Close() {\n\tselect {\n\tcase <-c.ctx.Done():\n\tcase c.ch.unsubscribe <- c:\n\t}\n}\nfunc (c *Client) Done() <-chan struct{} {\n\treturn c.ctx.Done()\n}\nfunc (c *Client) doClose() {\n\tc.o.Do(func() {\n\t\tc.cancel()\n\t\tif c.recv != nil {\n\t\t\tclose(c.recv)\n\t\t}\n\t})\n}\nfunc (c *Client) send(msg interface{}) {\n\t// write-only clients will not handle any messages\n\tif c.recv == nil {\n\t\treturn\n\t}\n\tt := time.NewTimer(c.ch.sc)\n\tselect {\n\tcase <-c.ctx.Done():\n\tcase c.recv <- msg:\n\tcase <-t.C:\n\t\t// time out/slow consumer, close the connection\n\t\tc.Close()\n\t}\n}\nfunc (c *Client) Broadcast(payload interface{}) bool {\n\tselect {\n\tcase <-c.ctx.Done():\n\t\treturn false\n\tdefault:\n\t\tc.ch.Broadcast() <- &envelope{Message: payload, Sender: uintptr(unsafe.Pointer(c))}\n\t\treturn true\n\t}\n}\ntype envelope struct {\n\tMessage interface{}\n\tSender  uintptr\n}\n// leech is channel-blocking so goroutine should be called internally to make it non-blocking\n// this is to ensure proper order of leeched messages.\nfunc NewChannel(ctx context.Context, name string, slowConsumer time.Duration, emptyCh chan string, leech func(interface{})) *Channel {\n\treturn &Channel{\n\t\tname:        name,\n\t\tingres:      make(chan interface{}, 1000),\n\t\tsubscribe:   make(chan *Client, 1000),\n\t\tunsubscribe: make(chan *Client, 1000),\n\t\taud:         make(map[*Client]struct{}, 1000),\n\t\tctx:         ctx,\n\t\tsc:          slowConsumer,\n\t\tempty:       emptyCh,\n\t\tleech:       leech,\n\t}\n}\ntype Channel struct {\n\tname        string\n\tingres      chan interface{}\n\tsubscribe   chan *Client\n\tunsubscribe chan *Client\n\taud         map[*Client]struct{}\n\tctx         context.Context\n\tsc          time.Duration\n\tempty       chan string\n\tleech       func(interface{})\n}\nfunc (ch *Channel) Id() string {\n\treturn ch.name\n}\n// subscription is read-write by default. by providing \"writeOnly=true\", it can be switched into write-only mode\n// in which case the client will not be disconnected for being slow reader.\nfunc (ch *Channel) Subscribe(writeOnly ...bool) *Client {\n\tc := &Client{\n\t\tch: ch,\n\t}\n\tif len(writeOnly) == 0 || writeOnly[0] == false {\n\t\tc.recv = make(chan interface{})\n\t}\n\tc.ctx, c.cancel = context.WithCancel(ch.ctx)\n\tch.subscribe <- c\n\treturn c\n}\nfunc (ch *Channel) Broadcast() chan<- interface{} {\n\treturn ch.ingres\n}\n// returns once context is cancelled\nfunc (ch *Channel) Start() {\n\tfor {\n\t\tselect {\n\t\tcase <-ch.ctx.Done():\n\t\t\tfor cl := range ch.aud {\n\t\t\t\tdelete(ch.aud, cl)\n\t\t\t\tcl.doClose()\n\t\t\t}\n\t\t\treturn\n\t\tcase cl := <-ch.subscribe:\n\t\t\tch.aud[cl] = struct{}{}\n\t\tcase cl := <-ch.unsubscribe:\n\t\t\tdelete(ch.aud, cl)\n\t\t\tcl.doClose()\n\t\t\tif len(ch.aud) == 0 {\n\t\t\t\tch.signalEmpty()\n\t\t\t}\n\t\tcase msg := <-ch.ingres:\n\t\t\te, ok := msg.(*envelope)\n\t\t\tif ok {\n\t\t\t\tmsg = e.Message\n\t\t\t}\n\t\t\tfor cl := range ch.aud {\n\t\t\t\tif ok == false || uintptr(unsafe.Pointer(cl)) != e.Sender {\n\t\t\t\t\tgo cl.send(e.Message)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ch.leech != nil {\n\t\t\t\tch.leech(msg)\n\t\t\t}\n\t\t}\n\t}\n}\nfunc (ch *Channel) signalEmpty() {\n\tif ch.empty == nil {\n\t\treturn\n\t}\n\tselect {\n\tcase ch.empty <- ch.name:\n\tdefault:\n\t}\n}\ntype subscribeRequest struct {\n\tname string\n\trecv chan *Client\n\two   bool\n}\ntype broadcastRequest struct {\n\tname string\n\trecv chan *Channel\n}\ntype brokeredChannel struct {\n\tch     *Channel\n\tcancel context.CancelFunc\n}\ntype brokerLeech interface {\n\tMatch(string) func(interface{})\n}\nfunc NewBroker(ctx context.Context, slowConsumer time.Duration, leech brokerLeech) *Broker {\n\treturn &Broker{\n\t\tchans:     make(map[string]*brokeredChannel, 100),\n\t\tsubscribe: make(chan *subscribeRequest, 10),\n\t\tbroadcast: make(chan *broadcastRequest, 10),\n\t\tctx:       ctx,\n\t\tsc:        slowConsumer,\n\t\tempty:     make(chan string, 10),\n\t\tleech:     leech,\n\t}\n}\ntype Broker struct {\n\tchans     map[string]*brokeredChannel\n\tsubscribe chan *subscribeRequest\n\tbroadcast chan *broadcastRequest\n\tctx       context.Context\n\tsc        time.Duration\n\tempty     chan string\n\tleech     brokerLeech\n}\n// returns once context is cancelled\nfunc (b *Broker) Start() {\n\tfor {\n\t\tselect {\n\t\tcase <-b.ctx.Done():\n\t\t\treturn\n\t\tcase req := <-b.subscribe:\n\t\t\tch, ok := b.chans[req.name]\n\t\t\tif ok == false {\n\t\t\t\tctx, cancel := context.WithCancel(b.ctx)\n\t\t\t\tvar l func(interface{})\n\t\t\t\tif b.leech != nil {\n\t\t\t\t\tl = b.leech.Match(req.name)\n\t\t\t\t}\n\t\t\t\tch = &brokeredChannel{\n\t\t\t\t\tch:     NewChannel(ctx, req.name, b.sc, b.empty, l),\n\t\t\t\t\tcancel: cancel,\n\t\t\t\t}\n\t\t\t\tb.chans[req.name] = ch\n\t\t\t\tgo ch.ch.Start()\n\t\t\t}\n\t\t\treq.recv <- ch.ch.Subscribe(req.wo)\n\t\tcase req := <-b.broadcast:\n\t\t\tch, ok := b.chans[req.name]\n\t\t\tif ok == false {\n\t\t\t\tctx, cancel := context.WithCancel(b.ctx)\n\t\t\t\tvar l func(interface{})\n\t\t\t\tif b.leech != nil {\n\t\t\t\t\tl = b.leech.Match(req.name)\n\t\t\t\t}\n\t\t\t\tch = &brokeredChannel{\n\t\t\t\t\tch:     NewChannel(ctx, req.name, b.sc, b.empty, l),\n\t\t\t\t\tcancel: cancel,\n\t\t\t\t}\n\t\t\t\tb.chans[req.name] = ch\n\t\t\t\tgo ch.ch.Start()\n\t\t\t}\n\t\t\treq.recv <- ch.ch\n\t\tcase name := <-b.empty:\n\t\t\tif ch, ok := b.chans[name]; ok {\n\t\t\t\tch.cancel()\n\t\t\t\tdelete(b.chans, name)\n\t\t\t}\n\t\t}\n\t}\n}\n// subscription is read-write by default. by providing \"writeOnly=true\", it can be switched into write-only mode\n// in which case the client will not be disconnected for being slow reader.\nfunc (b *Broker) Subscribe(name string, writeOnly ...bool) *Client {\n\treq := &subscribeRequest{\n\t\tname: name,\n\t\trecv: make(chan *Client),\n\t\two:   len(writeOnly) > 0 && writeOnly[0] == true,\n\t}\n\tb.subscribe <- req\n\tc := <-req.recv\n\tclose(req.recv)\n\treturn c\n}\nfunc (b *Broker) Broadcast(name string) chan<- interface{} {\n\treq := &broadcastRequest{name: name, recv: make(chan *Channel)}\n\tb.broadcast <- req\n\tch := <-req.recv\n\tclose(req.recv)\n\treturn ch.ingres\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70515906/how-to-filter-struct-with-struct",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Repo struct {\n\tKey         string `json:\"key\"`\n\tType        string `json:\"type\"`\n\tPackageType string `json:\"packageType\"`\n}\nvar someDatas = []Repo{\n\t{\n\t\tKey:         \"test\",\n\t\tType:        \"test\",\n\t\tPackageType: \"test\",\n\t},\n\t{\n\t\tKey:         \"test1\",\n\t\tType:        \"test1\",\n\t\tPackageType: \"test1\",\n\t},\n\t{\n\t\tKey:         \"test\",\n\t\tType:        \"LOCAL\",\n\t\tPackageType: \"test23\",\n\t},\n}\nfunc getWantedRepos(conf map[string]interface{}) []Repo {\n\tvar returned []Repo\n\tfor _, val := range someDatas {\n\t\tflag := true\n\t\tfor k := range conf {\n\t\t\tif !reflect.DeepEqual(reflect.ValueOf(val).FieldByName(k).Interface(), conf[k]) {\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif flag {\n\t\t\treturned = append(returned, val)\n\t\t}\n\t}\n\treturn returned\n}\nfunc main() {\n\tvar repos []Repo\n\trepos = getWantedRepos(map[string]interface{}{\n\t\t\"Key\": \"test\",\n\t})\n\tfmt.Println(\"1 ============================\")\n\tfmt.Printf(\"%+v\\n\", repos)\n\trepos = getWantedRepos(map[string]interface{}{\n\t\t\"Type\": \"LOCAL\",\n\t})\n\tfmt.Println(\"2 ============================\")\n\tfmt.Printf(\"%+v\\n\", repos)\n\trepos = getWantedRepos(map[string]interface{}{\n\t\t\"Type\":        \"LOCAL\",\n\t\t\"PackageType\": \"test23\",\n\t})\n\tfmt.Println(\"3 ============================\")\n\tfmt.Printf(\"%+v\\n\", repos)\n\trepos = getWantedRepos(map[string]interface{}{\n\t\t\"Type\":        \"LOCAL\",\n\t\t\"PackageType\": \"NONE\",\n\t})\n\tfmt.Println(\"4 ============================\")\n\tfmt.Printf(\"%+v\\n\", repos)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70394381/how-to-fetch-data-from-another-api-with-body-raw-json",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\ntype OdooRequest struct {\n\tResult struct {\n\t\tStatus   int `json:\"status\"`\n\t\tResponse []struct {\n\t\t\tServiceID           int    `json:\"service_id\"`\n\t\t\tServiceName         string `json:\"service_name\"`\n\t\t\tServiceCategoryID   int    `json:\"service_category_id\"`\n\t\t\tServiceCategoryName string `json:\"service_category_name\"`\n\t\t\tServiceTypeID       int    `json:\"service_type_id\"`\n\t\t\tServiceTypeName     string `json:\"service_type_name\"`\n\t\t\tCreateDate          string `json:\"create_date\"`\n\t\t} `json:\"response\"`\n\t\tMessage string `json:\"message\"`\n\t} `json:\"result\"`\n}\nfunc main() {\n\tif err := run(); err != nil {\n\t\tpanic(err)\n\t}\n}\nfunc run() error {\n\tresp, err := http.Post(\n\t\t\"ADD_URL_HERE\",\n\t\t\"application/json\",\n\t\tbytes.NewBufferString(`{\"jsonrpc\": \"2.0\",\"params\": {}}`),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\tvar odooResp OdooRequest\n\tif err := json.NewDecoder(resp.Body).Decode(&odooResp); err != nil {\n\t\treturn err\n\t}\n\tfor _, rec := range odooResp.Result.Response {\n\t\tfmt.Println(rec.ServiceName)\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70254976/query-a-docker-registry-hub-docker-com-using-go-docker-client-without-docker-d",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"github.com/containers/image/v5/image\"\n\t\"github.com/containers/image/v5/transports/alltransports\"\n\t\"github.com/containers/image/v5/types\"\n\timgspecv1 \"github.com/opencontainers/image-spec/specs-go/v1\"\n)\nfunc main() {\n\tctx := context.Background()\n\tsysCtx := types.SystemContext{OSChoice: \"linux\", ArchitectureChoice: \"amd64\"}\n\timgName := \"docker://jupyter/scipy-notebook\"\n\timg, err := alltransports.ParseImageName(imgName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsrc, err := img.NewImageSource(ctx, &sysCtx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer src.Close()\n\tunparseImg := image.UnparsedInstance(src, nil)\n\timgParsed, err := image.FromUnparsedImage(ctx, &sysCtx, unparseImg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tconfigBlob, err := imgParsed.ConfigBlob(ctx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\timgSpec := imgspecv1.Image{}\n\terr = json.Unmarshal(configBlob, &imgSpec)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"%+v\\n\", imgSpec.Config)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70185866/react-native-native-module-looping-call-until-crash-on-ios",
    "body": "@objc(SwiftNativeGrpcClient) class SwiftNativeGrpcClient: NSObject {\n  // ...\n  @objc func swiftGetGrpcTest(\n    _ resolve: RCTPromiseResolveBlock,\n    rejecter reject: RCTPromiseRejectBlock\n  ) {\n    if (self.secureGrpcChannel == nil) {\n      self.createSecureChannel()\n    }\n    let grpcServiceClient = Service_ServiceName(channel: self.secureGrpcChannel!)\n    defer {\n        // close the channel when the method exits\n        try? grpcServiceClient.channel.close().wait()\n    }\n    let testRequest: Service_TestRequest = Service_TestRequest()\n    // Service_TestResponse should contain a String:\n    // \"gRPC response success\"\n    let testResponse: Service_TestResponse\n    let testCall = grpcServiceClient.getTest(testRequest)\n    do {\n        try testResponse = testCall.response.wait()\n        print(testResponse)\n        resolve(getInfoResponse)\n    } catch {        ​\n      ​print(\"RPC method failed \\(error)\")\n      reject(\"0\",\"RPC method failed: \\(error)\", nil)\n      ​return\n    ​}\n    // update the last call time to ensure this isn't being called\n    // more than once per second\n  }\n  // ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70025812/go-lang-how-to-build-command-line-menu-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"github.com/dixonwille/wmenu\"\n)\ntype userInput struct {\n\toption wmenu.Opt\n}\nfunc (u *userInput) optFunc(option wmenu.Opt) error {\n\tu.option = option\n\treturn nil\n}\nfunc createMenu(p string, m []string, u *userInput) {\n\tmenu := wmenu.NewMenu(p)\n\tmenu.ChangeReaderWriter(os.Stdin, os.Stdout, os.Stderr)\n\tfor i, m := range m {\n\t\tmenu.Option(m, i, false, u.optFunc)\n\t}\n\terr := menu.Run()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc main() {\n\tprompt := \"Select a Fruit\"\n\tmenuitems := []string{\"Apple\", \"Orange\", \"Mango\"}\n\tu := &userInput{}\n\tcreateMenu(prompt, menuitems, u)\n\tfmt.Println(\"\")\n\tfmt.Println(\"Option chosen: \", u.option.ID, u.option.Text)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69953328/golang-render-new-template-on-button-press",
    "body": "{{ define \"home\" }}\n<head xmlns=\"http://www.w3.org/1999/html\">\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" href=\"/assets/home.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n    <title>Home - Match Maker</title>\n</head>\n<body>\n<!-- Button to open the modal login form -->\n<button onclick=\"document.getElementById('id01').style.display='block'\" class=\"addPlayer\">Add Player</button>\n<button onclick=\"generateGames()\">Generate Games</button>\n</br>\n{{ template \"displayPlayer\" .}}\n</br>\n<!-- The Modal -->\n<div id=\"id01\" class=\"modal\">\n    <form class=\"modal-content animate\" action=\"/\" method=\"post\" onsubmit=\"return onSubmit(event);\">\n        <div class=\"imgcontainer\">\n            <span onclick=\"document.getElementById('id01').style.display='none'\" class=\"close\" title=\"Close Modal\">&times;</span>\n            <img src=\"/assets/be.png\" alt=\"Avatar\" class=\"avatar\">\n        </div>\n        <div class=\"container\">\n            <label for=\"fname\" style=\"align-content: center\"><b>First Name</b></label>\n            <input type=\"text\" placeholder=\"John\" name=\"firstName\" required>\n            <label for=\"lname\" style=\"align-content: center\"><b>Last Name</b></label>\n            <input type=\"text\" placeholder=\"Smith\" name=\"lastName\" required>\n        </div>\n        <div class=\"container\">\n            Select Gender:\n            </br>\n            <label>\n                <input type=\"radio\" name=\"gender\" value=\"male\" required>Male\n            </label>\n            </br>\n            <label>\n                <input type=\"radio\" name=\"gender\" value=\"female\">Female\n            </label>\n        </div>\n        <div class=\"container\" style=\"background-color:#f1f1f1; text-align: center\">\n            <button type=\"button\" onclick=\"document.getElementById('id01').style.display='none'\" class=\"modelButtons\">\n                Cancel\n            </button>\n            <button id=\"subbtn\" type=\"submit\" class=\"modelButtons\">Submit\n            </button>\n        </div>\n    </form>\n    <div>\n      <table id=\"players\"></table>\n    </div>\n</div>\n<script src=\"/assets/home.js\"></script>\n<script>\n    // Get the modal\n    var modal = document.getElementById('id01');\n    // When the user clicks anywhere outside of the modal, close it\n    window.onclick = function (event) {\n        if (event.target == modal) {\n            modal.style.display = \"none\";\n        }\n    }\n</script>\n</body>\n</html>\n{{ end }}"
  },
  {
    "url": "https://stackoverflow.com/questions/69953328/golang-render-new-template-on-button-press",
    "body": "var players = document.querySelector('#players');\nfunction onSubmit(evt) {\n  evt.preventDefault()\n  let form = evt.target;\n  let formData = new FormData(form);\n  let fname = formData.get('firstName');\n  let lname = formData.get('lastName');\n  let gender = formData.get('gender');\n  if (fname != \"\" || lname != \"\" || gender != \"\") {\n    $.ajax({\n        url: '/addPlayer',\n        method: 'post',\n      data: formData,\n      processData: false,\n      contentType: false,\n        success: (d) => {\n          console.log(\"Player Added\", d);\n          players.innerHTML += d;\n          form.reset();\n        },\n        error: (d) => {\n            console.log(\"An error occurred. Please try again\");\n        }\n    });\n  }\n  return false;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69841825/error-while-trying-to-list-folders-inside-a-gcp-organisation",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\tcloudresourcemanager \"google.golang.org/api/cloudresourcemanager/v3\"\n)\nfunc main() {\n\tctx := context.Background()\n\tsvc, err := cloudresourcemanager.NewService(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfoldersService := cloudresourcemanager.NewFoldersService(svc)\n\tfoldersListCall := foldersService.List()\n\tfoldersListCall.Parent(\"organizations/<MY-ORG-ID>\")\n\tresp, err := foldersListCall.Do()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, fld := range resp.Folders {\n\t\tfmt.Println(fld.DisplayName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69634319/how-to-post-request-in-chromedp-simulate-a-form",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"github.com/chromedp/cdproto/runtime\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\tjs := `\nasync function postData(url = '', data = {}) {\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n  return response.text();\n}; postData('/post', {answer: 69634319})\n\t`\n\tvar response string\n\tif err := chromedp.Run(ctx,\n\t\tchromedp.Navigate(\"https://httpbin.org/cookies/set?name=test\"),\n\t\tchromedp.Evaluate(js, &response, func(ep *runtime.EvaluateParams) *runtime.EvaluateParams {\n\t\t\treturn ep.WithAwaitPromise(true)\n\t\t}),\n\t); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Println(response)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69298986/how-to-connect-to-mongodb-via-ssl-using-crt-file-in-go",
    "body": "import (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t// \"github.com/globalsign/mgo\"\n\tmgo \"go.mongodb.org/mongo-driver/mongo\"\n\tmongoOptions \"go.mongodb.org/mongo-driver/mongo/options\"\n)\nfunc InitMongo() (error) {\n\n\tconnStr := os.Getenv(\"MONGODB_CONN_STR\")\n\tdbName := os.Getenv(\"MONGODB_DATABASE\")\n\tclientOpts := mongoOptions.Client().ApplyURI(connStr)\n\tif err := clientOpts.Validate(); err != nil {\n\t\tlog.Print(\"unable to parse url\")\n\t\tlog.Fatal(err)\n\t}\n\tclient, err := mgo.Connect(context.TODO(), clientOpts)\n\tif err != nil {\n\t\tlog.Print(\"unable to connect into database\")\n\t\tlog.Fatal(err)\n\t}\n\tif err := client.Ping(context.TODO(), nil); err != nil {\n\t\tlog.Print(\"database ping failed\")\n\t\tlog.Fatal(err)\n\t}\n\t//client.Database(dbName)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69273869/how-to-edit-only-some-fields-in-the-database-instead-of-all",
    "body": "func (repository Users) UpdateUserInfo(userID uint64, user User) error {\n\tfields := make([]string, 0)\n\tvalues := make([]string, 0)\n\tif user.Name != \"\" {\n\t\tvalues = append(values, user.Name)\n\t\tfields = append(fields, \"name = ?\")\n\t}\n\tif user.CPF != \"\" {\n\t\tvalues = append(values, user.CPF)\n\t\tfields = append(fields, \"cpf = ?\")\n\t}\n\tif user.Email != \"\" {\n\t\tvalues = append(values, user.Email)\n\t\tfields = append(fields, \"email = ?\")\n\t}\n\tif user.Password != \"\" {\n\t\tvalues = append(values, user.Password)\n\t\tfields = append(fields, \"password = ?\")\n\t}\n\tif user.City != \"\" {\n\t\tvalues = append(values, user.City)\n\t\tfields = append(fields, \"city = ?\")\n\t}\n\tif user.State != \"\" {\n\t\tvalues = append(values, user.State)\n\t\tfields = append(fields, \"state = ?\")\n\t}\n\tif len(fields) != 0 {\n\t\treturn errors.New(\"no fields to update\")\n\t}\n\tupdateString := fmt.Sprintf(\"UPDATE user SET %s WHERE id = ?\", strings.Join(fields, \",\"))\n\tstmt, err := repository.db.Prepare(updateString)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer stmt.Close()\n\tif _, err := stmt.Exec(values...,userID); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69215808/unmarshal-different-json-messages-with-a-common-type-field-in-go",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strings\"\n)\ntype IdentitySuccess struct {\n\tType     string   `json:\"type\"`\n\tIdentity string   `json:\"identity,omitempty\"`\n\tApproved string   `json:\"approved,omitempty\"`\n\tRooms    []string `json:\"rooms,omitempty\"`\n\tRoomid   string   `json:\"roomid,omitempty\"`\n}\nfunc Process(data []byte) (IdentitySuccess, error) {\n\tvar r IdentitySuccess\n\terr := json.Unmarshal(data, &r)\n\treturn r, err\n}\nfunc main() {\n\tjsonData :=\n\t\t`{\"type\" : \"newidentity\", \"identity\" : \"Adel\"}\n\t     {\"type\" : \"newidentity\", \"approved\" : \"true\"}\n\t\t {\"type\" : \"roomlist\",\"rooms\" : [\"MainHall-s1\", \"MainHall-s2\", \"jokes\"]}\n\t\t {\"type\" : \"createroom\", \"roomid\" : \"jokes\"}`\n\t// Because you are taking \\n as a seperator and all of this is coming in one response\n\tjsons := strings.Split(jsonData, \"\\n\")\n\tfor _, json := range jsons {\n\t\tidentity, err := Process([]byte(json))\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t// Custom handlers will be applied here on the basis of the struct values\n\t\tif identity.Type == \"newidentity\" && identity.Identity != \"\" {\n\t\t\tfmt.Printf(\"Got type= %v, with identity = %v\\n\", identity.Type, identity.Identity)\n\t\t} else if identity.Type == \"newidentity\" && identity.Approved != \"\" {\n\t\t\tfmt.Printf(\"Got type= %v, with approved status = %v\\n\", identity.Type, identity.Approved)\n\t\t} else if identity.Type == \"roomlist\" {\n\t\t\tfmt.Printf(\"Got type= %v, with rooms = %v\\n\", identity.Type, identity.Rooms)\n\t\t} else if identity.Type == \"createroom\" {\n\t\t\tfmt.Printf(\"Got type= %v, with roomid = %v\\n\", identity.Type, identity.Roomid)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68759997/how-to-print-n-integers-using-odd-and-even-thread",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc printOddNumber(chOdd chan int, chEven chan int, wg *sync.WaitGroup, cnt int) {\n\tdefer wg.Done()\n\tfor {\n\t\tnum := <-chOdd\n\t\tif num == cnt {\n\t\t\tchEven <- num\n\t\t\treturn\n\t\t}\n\t\tfmt.Printf(\"Odd Number:%d\\n\", num)\n\t\tnum++\n\t\tchEven <- num\n\t}\n}\nfunc printEvenNumber(chEven chan int, chOdd chan int, wg *sync.WaitGroup, cnt int) {\n\tdefer wg.Done()\n\tnum := 1\n\tchOdd <- num\n\tfor {\n\t\tnum := <-chEven\n\t\tfmt.Printf(\"Even Number:%d\\n\", num)\n\t\tif num == cnt {\n\t\t\tchOdd <- num\n\t\t\treturn\n\t\t}\n\t\tnum++\n\t\tchOdd <- num\n\t}\n}\nfunc main() {\n\tchOdd := make(chan int, 1)\n\tchEven := make(chan int, 1)\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\tcnt := 20\n\tgo printOddNumber(chOdd, chEven, &wg, cnt)\n\tgo printEvenNumber(chEven, chOdd, &wg, cnt)\n\twg.Wait()\n\tclose(chOdd)\n\tclose(chEven)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68759997/how-to-print-n-integers-using-odd-and-even-thread",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"sync/atomic\"\n)\nfunc main() {\n\tvar done int32\n\tsyncChannel := make(chan bool) // unbuffered channel.\n\twg := new(sync.WaitGroup)\n\twg.Add(2)\n\tgo func() {\n\t\t// prints even numbers.\n\t\tdefer wg.Done()\n\t\tfor i := 0; i < 50; i += 2 {\n\t\t\t<-syncChannel\n\t\t\tfmt.Printf(\"Even: %d\\n\", i)\n\t\t\tsyncChannel <- true\n\t\t}\n\t\tatomic.StoreInt32(&done, 1)\n\t}()\n\tsyncChannel <- true\n\tgo func() {\n\t\t// prints odd numbers.\n\t\tdefer wg.Done()\n\t\tfor i := 1; i < 50; i += 2 {\n\t\t\t<-syncChannel\n\t\t\tfmt.Printf(\"Odd:%d\\n\", i)\n\t\t\tif atomic.LoadInt32(&done) != 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsyncChannel <- true\n\t\t}\n\t}()\n\twg.Wait()\n\tclose(syncChannel)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68759608/computing-complexity-of-an-anagram-finder-implementation",
    "body": "-- main.go --\npackage main\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n)\nfunc main() {\n\tinput := []string{\"tan\", \"nat\", \"⌘\", \"日本語\", \"語日本\"}\n\tfreq := map[rune]int{}\n\tfor _, word := range input {\n\t\tx, err := hashWord(word, freq)\n\t\tfmt.Println(word, \"=>\", x, \"err=\", err)\n\t}\n}\nfunc groupAnagramsUsingSort(s []string, tmp map[string][]string, out [][]string) [][]string {\n\tfor k := range tmp {\n\t\tdelete(tmp, k)\n\t}\n\tfor i := 0; i < len(out); i++ {\n\t\tout[i] = out[i][:0]\n\t}\n\tout = out[:0]\n\tfor _, v := range s {\n\t\tx := strings.Split(v, \"\")\n\t\tsort.Strings(x)\n\t\tanagram := strings.Join(x, \"\")\n\t\titems, ok := tmp[anagram]\n\t\tif ok {\n\t\t\titems = append(items, v)\n\t\t\ttmp[anagram] = items\n\t\t\tcontinue\n\t\t}\n\t\ttmp[anagram] = []string{v}\n\t}\n\tfor key := range tmp {\n\t\tout = append(out, tmp[key])\n\t}\n\treturn out\n}\nfunc groupAnagramsUsingHash(s []string, tmp map[int][]string, out [][]string) [][]string {\n\tfor k := range tmp {\n\t\tdelete(tmp, k)\n\t}\n\tfor i := 0; i < len(out); i++ {\n\t\tout[i] = out[i][:0]\n\t}\n\tout = out[:0]\n\tfreq := map[rune]int{}\n\tfor _, v := range s {\n\t\thash, _ := hashWord(v, freq)\n\t\titems, ok := tmp[hash]\n\t\tif ok {\n\t\t\titems = append(items, v)\n\t\t\ttmp[hash] = items\n\t\t\tcontinue\n\t\t}\n\t\ttmp[hash] = []string{v}\n\t}\n\tfor key := range tmp {\n\t\tout = append(out, tmp[key])\n\t}\n\treturn out\n}\nvar primes = []int{2, 41, 37, 47, 3, 67, 71, 23, 5, 101, 61, 17, 19, 13, 31, 43, 97, 29, 11, 7, 73, 83, 79, 89, 59, 53}\nvar ErrNonASCII = fmt.Errorf(\"non ascii letter detected\")\nfunc getFrequencyMap(word string, freq map[rune]int) (map[rune]int, error) {\n\tfor k := range freq {\n\t\tdelete(freq, k)\n\t}\n\tfor _, r := range word {\n\t\tif r-97 < 0 || int(r-97) > len(primes) {\n\t\t\treturn nil, ErrNonASCII\n\t\t}\n\t\tx := freq[r]\n\t\tfreq[r] = x + 1\n\t}\n\treturn freq, nil\n}\nfunc hashWord(word string, freq map[rune]int) (int, error) {\n\tvar err error\n\tfreq, err = getFrequencyMap(word, freq)\n\tif err != nil {\n\t\treturn -1, err\n\t}\n\tproduct := 1\n\tfor letter, r := range freq {\n\t\tproduct = product * primes[letter-97]\n\t\tfor e := 1; e < r; e++ {\n\t\t\tproduct = product * product\n\t\t}\n\t}\n\treturn product, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68759608/computing-complexity-of-an-anagram-finder-implementation",
    "body": "-- main_test.go --\npackage main\nimport (\n\t\"reflect\"\n\t\"sort\"\n\t\"testing\"\n)\ntype expectation struct {\n\tinput []string\n\twant  [][]string\n}\nvar expectations = []expectation{\n\texpectation{\n\t\tinput: []string{\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"},\n\t\twant: [][]string{\n\t\t\t[]string{\"ate\", \"eat\", \"tea\"},\n\t\t\t[]string{\"bat\"},\n\t\t\t[]string{\"nat\", \"tan\"},\n\t\t},\n\t},\n\texpectation{\n\t\tinput: []string{\"eaft\", \"tea\", \"taen\", \"ate\", \"nate\", \"batf\"},\n\t\twant: [][]string{\n\t\t\t[]string{\"batf\"},\n\t\t\t[]string{\"eaft\"},\n\t\t\t[]string{\"tea\", \"ate\"},\n\t\t\t[]string{\"taen\", \"nate\"},\n\t\t},\n\t},\n\texpectation{\n\t\tinput: []string{\"\"},\n\t\twant: [][]string{\n\t\t\t[]string{\"\"},\n\t\t},\n\t},\n\texpectation{\n\t\tinput: []string{\"a\"},\n\t\twant: [][]string{\n\t\t\t[]string{\"a\"},\n\t\t},\n\t},\n}\nfunc TestUsingSort(t *testing.T) {\n\ttmp := map[string][]string{}\n\tout := [][]string{}\n\tfor _, expectation := range expectations {\n\t\tout = groupAnagramsUsingSort(expectation.input, tmp, out)\n\t\tif len(out) != len(expectation.want) {\n\t\t\tt.Fatalf(\"unexpected output,\\nwanted=%#v\\ngot   =%#v\\n\", expectation.want, out)\n\t\t}\n\t\tfor i := 0; i < len(out); i++ {\n\t\t\tsort.Strings(out[i])\n\t\t\tsort.Strings(expectation.want[i])\n\t\t}\n\t\tsort.Slice(out, func(i int, j int) bool {\n\t\t\treturn len(out[i]) < len(out[j])\n\t\t})\n\t\tsort.Slice(expectation.want, func(i int, j int) bool {\n\t\t\treturn len(expectation.want[i]) < len(expectation.want[j])\n\t\t})\n\t\tsort.Slice(out, func(i int, j int) bool {\n\t\t\treturn (len(out[i]) > 0 &&\n\t\t\t\tlen(out[j]) > 0 &&\n\t\t\t\tout[i][0] < out[j][0])\n\t\t})\n\t\tsort.Slice(expectation.want, func(i int, j int) bool {\n\t\t\treturn (len(expectation.want[i]) > 0 &&\n\t\t\t\tlen(expectation.want[j]) > 0 &&\n\t\t\t\texpectation.want[i][0] < expectation.want[j][0])\n\t\t})\n\t\tfor i := 0; i < len(out); i++ {\n\t\t\tif !reflect.DeepEqual(out[i], expectation.want[i]) {\n\t\t\t\tt.Fatalf(\"unexpected output,\\nwanted=%#v\\ngot   =%#v\\n\", expectation.want, out)\n\t\t\t}\n\t\t}\n\t}\n}\nfunc TestUsingHash(t *testing.T) {\n\ttmp := map[int][]string{}\n\tout := [][]string{}\n\tfor _, expectation := range expectations {\n\t\tout = groupAnagramsUsingHash(expectation.input, tmp, out)\n\t\tif len(out) != len(expectation.want) {\n\t\t\tt.Fatalf(\"unexpected output,\\nwanted=%#v\\ngot   =%#v\\n\", expectation.want, out)\n\t\t}\n\t\tfor i := 0; i < len(out); i++ {\n\t\t\tsort.Strings(out[i])\n\t\t\tsort.Strings(expectation.want[i])\n\t\t}\n\t\tsort.Slice(out, func(i int, j int) bool {\n\t\t\treturn len(out[i]) < len(out[j])\n\t\t})\n\t\tsort.Slice(expectation.want, func(i int, j int) bool {\n\t\t\treturn len(expectation.want[i]) < len(expectation.want[j])\n\t\t})\n\t\tsort.Slice(out, func(i int, j int) bool {\n\t\t\treturn (len(out[i]) > 0 &&\n\t\t\t\tlen(out[j]) > 0 &&\n\t\t\t\tout[i][0] < out[j][0])\n\t\t})\n\t\tsort.Slice(expectation.want, func(i int, j int) bool {\n\t\t\treturn (len(expectation.want[i]) > 0 &&\n\t\t\t\tlen(expectation.want[j]) > 0 &&\n\t\t\t\texpectation.want[i][0] < expectation.want[j][0])\n\t\t})\n\t\tfor i := 0; i < len(out); i++ {\n\t\t\tif !reflect.DeepEqual(out[i], expectation.want[i]) {\n\t\t\t\tt.Fatalf(\"unexpected output,\\nwanted=%#v\\ngot   =%#v\\n\", expectation.want, out)\n\t\t\t}\n\t\t}\n\t}\n}\nfunc BenchmarkUsingSort(b *testing.B) {\n\ttmp := map[string][]string{}\n\tout := [][]string{}\n\tb.ResetTimer()\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\tfor _, expectation := range expectations {\n\t\t\tout = groupAnagramsUsingSort(expectation.input, tmp, out)\n\t\t\t_ = out\n\t\t}\n\t}\n}\nfunc BenchmarkUsingHash(b *testing.B) {\n\ttmp := map[int][]string{}\n\tout := [][]string{}\n\tb.ResetTimer()\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\tfor _, expectation := range expectations {\n\t\t\tout = groupAnagramsUsingHash(expectation.input, tmp, out)\n\t\t\t_ = out\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68715220/does-goroutine-go-back-into-waiting-mode-if-they-cannot-acquire-lock-after-getti",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nvar lock = new(sync.Mutex)\nvar lock2 = new(sync.Mutex)\nfunc main() {\n\twg := new(sync.WaitGroup)\n\tfor i := 0; i < 3; i++ {\n\t\ti := i\n\t\twg.Add(1)\n\t\tgo test(wg, i)\n\t}\n\twg.Wait()\n}\nfunc test(wg *sync.WaitGroup, i int) {\n\tdefer wg.Done()\n\tfmt.Printf(\"waiting for lock 1 at G%d\\n\", i)\n\tt := time.Now().UnixNano()\n\tlock.Lock()\n\tfmt.Printf(\"acquired lock 1 at G%d after %d nano secs \\n\\n\", i, time.Now().UnixNano()-t)\n\tlock.Unlock()\n\tfmt.Printf(\"waiting for lock 2 at G%d\\n\", i)\n\tt = time.Now().UnixNano()\n\tlock2.Lock()\n\ttime.Sleep(time.Second)\n\tfmt.Printf(\"acquired lock 2 at G%d after %d nano secs \\n\", i, time.Now().UnixNano()-t)\n\tlock2.Unlock()\n\tfmt.Printf(\"Done at G%d\\n\\n\", i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68342891/zip-a-directory-and-not-have-the-result-saved-in-file-system",
    "body": "func addZipFileToReq(zipped []byte)  (*http.Request, error){\n\tbody := bytes.NewBuffer(nil)\n\twriter := multipart.NewWriter(body)\n\tpart, err := writer.CreateFormFile(`fileField`, `filename`)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t_, err = part.Write(zipped)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = writer.Close()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr, err := http.NewRequest(http.MethodPost, \"https://example.com\", body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tr.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\treturn r, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68342891/zip-a-directory-and-not-have-the-result-saved-in-file-system",
    "body": "func ZipDir(dir string, w io.Writer) error {\n\tzw := zip.NewWriter(w)\n\tdefer zw.Close()\n\treturn filepath.Walk(dir, func(path string, fi os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !fi.Mode().IsRegular() {\n\t\t\treturn nil\n\t\t}\n\t\theader, err := zip.FileInfoHeader(fi)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\theader.Name = path\n\t\theader.Method = zip.Deflate\n\t\tw, err := zw.CreateHeader(header)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tf, err := os.Open(path)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer f.Close()\n\t\tif _, err := io.Copy(w, f); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68169901/retrieving-github-secrets-with-spaces-from-golang-script",
    "body": "func main() {\n   var t *testing.T\n   serverURL := os.Getenv(\"SERVER_URL\")\n   MyTestFunction(t, serverURL)\n}\nfunc MyTestFunction(t *testing.T, serverURL string) {\n\ttype SpeckleLogin struct {\n\t\ttoken string\n\t}\n\tmethod := \"GET\"\n    // The encoded token is read from github secrets\n\tb64EncodeJwt := os.Getenv(\"USER_JWT_ENCODE\")\n\t// fmt.Println(\"The encode JWT is:\", b64EncodeJwt)\n\t// The encoded read token is decoded\n    b64DecodeJwt, _ := b64.StdEncoding.DecodeString(b64EncodeJwt)\n\t// fmt.Println(\"JWT Decoded\", string(b64DecodeJwt))\n    // fmt.Println()\n\n\theaders := map[string][]string{\n\t\t\"Content-Type\": []string{\"application/json, text/plain, */*\"},\n\n        // The content of the token already decoded is included in the headers slice of strings.\n\t\t\"Authorization\": []string{(string(b64DecodeJwt))},\n\t}\n\tjsonLogin := []byte(fmt.Sprintf(`{\n\t\t\"email\":\"%s\",\n\t\t\"password\": \"%s\"\n\t}`, os.Getenv(\"USER_EMAIL\"), os.Getenv(\"USER_PASSWORD\")))\n\n    // The HTTP request is created\n\treqLogin, errReq := http.NewRequest(method, serverURL+\"/api/accounts\", bytes.NewBuffer(jsonLogin))\n    // The headers are added to the HTTP request\n\treqLogin.Header = headers\n    if errReq != nil {\n\t\tmessageReq := fmt.Sprintf(\"Error GET login request: %s\", errReq.Error())\n\t\tt.Fatal(messageReq)\n\t}\n\tclientLogin := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tTLSClientConfig: &tls.Config{\n\t\t\t\tInsecureSkipVerify: true,\n\t\t\t},\n\t\t},\n\t}\n\t// Sending the request\n\trespLogin, errResp := clientLogin.Do(reqLogin)\n\tif errResp != nil {\n\t\tmessageResp := fmt.Sprintf(\"Error GET login response: %s\", errResp.Error())\n\t\tt.Fatal(messageResp)\n\t}\n\tdefer respLogin.Body.Close()\n\tbody, _ := ioutil.ReadAll(respLogin.Body)\n\t// fmt.Println(\"BODY IS:\")\n  \t// fmt.Println(string(body))\n\tvar speckleLogin map[string]interface{}\n\tif err := json.Unmarshal([]byte(body), &speckleLogin); err != nil {\n\t\tt.Fatal(\"Could not unmarshal json\")\n\t}\n\t// We take the API token from the response\n\tdata := speckleLogin[\"resource\"].(map[string]interface{})[\"apitoken\"]\n\tif speckleToken, ok := data.(string); ok {\n        // Here we assert the token is not empty\n\t\tassert.NotEmpty(t, speckleToken)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68169901/retrieving-github-secrets-with-spaces-from-golang-script",
    "body": "name: Preview_Workflow\non:\n  pull_request:\n    branches:\n    - master\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n    - name: 'Checkout GitHub Action'\n      uses: actions/checkout@master\n    - name: Install terraform\n      uses: hashicorp/setup-terraform@v1\n      with:\n        terraform_version: 0.13.5\n        terraform_wrapper: false\n    - name: 'Terraform Version'\n      shell: bash\n      run: |\n        terraform version\n    - name: 'Login via Azure CLI'\n      uses: azure/login@v1\n      with:\n        creds: ${{ secrets.AZURE_CREDENTIALS }}\n    - name: 'Setup Go'\n      id: go\n      uses: actions/setup-go@v2\n      with:\n        go-version: '^1.16.5'\n    - name: 'Run Terratest'\n      id: terratest\n      run: |\n        cd tests\n        go get -u github.com/Azure/azure-storage-blob-go/azblob\n        go get -u github.com/gruntwork-io/terratest/modules/terraform\n        go get -u github.com/stretchr/testify/assert\n        // executing the test\n        go test\n      env:\n        SERVER_URL: \"https://my-service-application-url\"\n        USER_EMAIL: ${{ secrets.USER_EMAIL }}\n        USER_PASSWORD: ${{ secrets.USER_PASSWORD }}\n        USER_JWT_ENCODE: ${{ secrets.USER_JWT_ENCODE }}\n        # I am using these other ones to connect to azure.\n        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}\n        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}\n        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}\n        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}\n    - name: Azure logout\n      run: |\n        az logout"
  },
  {
    "url": "https://stackoverflow.com/questions/67816077/custom-unmarshall-to-a-type-than-input-out-different-type",
    "body": "func (i *Info) UnmarshalJSON(data []byte) error {\n\tvar raw interface{}\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn err\n\t}\n\tswitch r := raw.(type) {\n\tcase []interface{}:\n\tcase bool:\n\t\tif r {\n\t\t\treturn errors.New(\"unexpected true, must be array or false\")\n\t\t}\n\t\treturn nil\n\tdefault:\n\t\treturn fmt.Errorf(\"unexpected type %T, must be array or false\", r)\n\t}\n\tvar v []json.RawMessage\n\tif err := json.Unmarshal(data, &v); err != nil {\n\t\treturn err\n\t}\n\tif len(v) != 2 {\n\t\treturn fmt.Errorf(\"unexpected length %d, must be 2\", len(v))\n\t}\n\tif err := json.Unmarshal(v[0], &i.ID); err != nil {\n\t\treturn err\n\t}\n\tif err := json.Unmarshal(v[1], &i.DisplayName); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67815467/how-to-batch-insert-and-get-results-by-sqlx-in-postgres",
    "body": "var queryString = `INSERT INTO \"quiz_answer_details\" (\n\t\"quiz_answer_id\"\n\t, \"question_id\"\n\t, \"type\"\n\t, \"choices\"\n\t, \"content\"\n) VALUES ` // `\n// 5 = the number of columns you want to insert per row\nparams := make([]interface{}, len(ins)*5)\nfor i, v := range ins {\n\tpos := i * 5\n    // aggregate all fields into a single slice\n\tparams[pos+0] = v.QuizAnswerID\n\tparams[pos+1] = v.QuestionID\n\tparams[pos+2] = v.Type\n\tparams[pos+3] = pq.Array(v.Choices)\n\tparams[pos+4] = v.Content\n    // construct the ($N, $N, ...) lists for the VALUES clause\n\tqueryString += `($` + strconv.Itoa(pos+0) +\n\t\t`, $` + strconv.Itoa(pos+1) +\n\t\t`, $` + strconv.Itoa(pos+2) +\n\t\t`, $` + strconv.Itoa(pos+3) +\n\t\t`, $` + strconv.Itoa(pos+4) +\n\t\t`),`\n}\nqueryString = queryString[:len(queryString)-1] // drop the last comma\nqueryString += ` RETURNING *`\nrows, err := db.QueryContext(ctx, queryString, params...)\nif err != nil {\n\treturn err\n}\ndefer rows.Close()\ni := 0\nfor rows.Next() {\n\terr := rows.Scan(\n\t\t// NOTE: since you're using \"RETURNING *\" you need to\n\t\t// provide fields for every column that will be returned,\n\t\t// and you need to make sure that the fields are in the\n\t\t// same order in which their corresponding columns are\n\t\t// declared in the table.\n\t\t//\n\t\t// NOTE: postgres, AFAIK, does NOT GUARANTEE that the returned\n\t\t// rows will be in the same order in which they were inserted,\n\t\t// therefore the contents of the input slice may be in a\n\t\t// different order after scanning is done.\n\t\t&ins[i].QuizAnswerID,\n\t\t&ins[i].QuestionID,\n\t\t&ins[i].Type,\n\t\tpq.Array(&ins[i].Choices),\n\t\t&ins[i].Content,\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\ti += 1\n}\nreturn rows.Err()"
  },
  {
    "url": "https://stackoverflow.com/questions/67799788/writing-multi-line-string-to-yaml-file-using-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"gopkg.in/yaml.v2\"\n)\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\ne:  |\n    [SERVICE]\n        Flush         1\n        Log_Level     info\n        Daemon        off\n    @INCLUDE input-kubernetes.conf\n    @INCLUDE filter-kubernetes.conf\n    @INCLUDE output-kafka.conf\n`\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n\tA string\n\tB struct {\n\t\tRenamedC int   `yaml:\"c\"`\n\t\tD        []int `yaml:\",flow\"`\n\t}\n\tE string\n}\nfunc main() {\n\tt := T{}\n\terr := yaml.Unmarshal([]byte(data), &t)\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\", err)\n\t}\n\tfmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n\td, err := yaml.Marshal(&t)\n\tif err != nil {\n\t\tlog.Fatalf(\"error: %v\", err)\n\t}\n\tfmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67699952/search-for-file-in-go-using-filepath",
    "body": "func example() {\n\tvar files []*os.File\n\terr := filepath.Walk(\"uploads\", findFile(fileId, &files))\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n}\nfunc findFile(fileId string, files *[]*os.File) func(path string, info os.FileInfo, err error) error {\n\treturn func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !info.IsDir() && isFileMatching(info.Name(), fileId) {\n\t\t\tfile, err := os.Open(path)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\t*files = append(*files, file)\n\t\t}\n\t\treturn nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66982240/is-there-a-way-to-parallelise-time-sleep-but-keeping-the-effective-execution-tim",
    "body": "type job struct {\n\tquery string\n\tidle  time.Time\n}\n...\n    var reference time.Time\n\tstart := time.Now()\n\tfor {\n\t\tq := p.GetNext()\n\t\tif q == (query.Query{}) {\n\t\t\ts.Stop()\n\t\t\tbreak\n\t\t}\n\t\tdb.logger.Tracef(\"query: %s\", q.Query)\n\t\tr.queries++\n\t\ts.Suffix = \" queries replayed: \" + strconv.Itoa(r.queries)\n\t\t// We need a reference time\n\t\tif firstPass {\n\t\t\tfirstPass = false\n\t\t\treference = q.Time\n\t\t}\n\t\tvar j job\n\t\tdelta := q.Time.Sub(reference)\n\t\tj.idle = start.Add(delta)\n\t\tj.query = q.Query\n\t\tdb.logger.Tracef(\"next sleeping time: %s\", j.idle)\n\t\tjobs <- j\n\t}\n...\nfunc (db database) worker(jobs chan job, errors chan error, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\tfor {\n\t\tj, ok := <-jobs\n\t\tif !ok {\n\t\t\tdb.logger.Trace(\"channel closed, worker exiting\")\n\t\t\treturn\n\t\t}\n\t\tsleep := time.Until(j.idle)\n\t\tif sleep > 0 {\n\t\t\ttime.Sleep(sleep)\n\t\t}\n\t\trows, err := db.drv.Query(j.query)\n\t\tif err != nil {\n\t\t\terrors <- err\n\t\t\tdb.logger.Debugf(\"failed to execute query:\\n%s\\nerror: %s\", j.query, err)\n\t\t}\n\t\tif rows != nil {\n\t\t\trows.Close()\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66932604/golang-cgi-apache-login-session-management",
    "body": "package main\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/cgi\"\n\t\"os\"\n\t\"github.com/gorilla/sessions\"\n)\nfunc main() {\n\t// Use Serve function with an anonymous function, you can also  use instances\n\t// of http.Handler. The function does not need to be an anonymous function, it\n\t// just has to match the HandlerFunc signature\n\terr := cgi.Serve(http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n\t\t// Get the session auth key from a trusted source,\n\t\t// in this example an env var is used. You can use any mechanism you want\n\t\t// so long that you don't generate it from within this program\n\t\tkey, _ := hex.DecodeString(os.Getenv(\"SESSION_AUTH_KEY\"))\n\t\tstore := sessions.NewCookieStore(key)\n\t\t// Get a session from the store if any\n\t\tsess, err := store.Get(r, \"mysess\")\n\t\tif err != nil {\n\t\t\tio.WriteString(rw, fmt.Sprintf(\"error reading cookies: %v\", err))\n\t\t\treturn\n\t\t}\n\t\tif sess.IsNew {\n\t\t\tsess.Values[\"val\"] = 1\n\t\t\t//Save your store before writing anything to the client\n\t\t\tif err := sess.Save(r, rw); err != nil {\n\t\t\t\tio.WriteString(rw, \"error writing sesion\")\n\t\t\t} else {\n\t\t\t\tio.WriteString(rw, \"new session\")\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t\t//Write session values to validate that your session is working\n\t\tio.WriteString(rw, \"Values:\")\n\t\tfor name, value := range sess.Values {\n\t\t\tio.WriteString(rw, fmt.Sprintf(\"name: %s, val: %v\", name, value))\n\t\t}\n\t}))\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error :%v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66612619/trying-to-submit-html-form-data-to-excel",
    "body": "func main() {\n\tf, err := excelize.OpenFile(\"./Book99.xlsx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsheetName := f.GetSheetName(0)\n\t// Set cell A1 to Wrap\n\tstyle, err := f.NewStyle(&excelize.Style{\n\t\tAlignment: &excelize.Alignment{\n\t\t\tWrapText: true,\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := f.SetCellStyle(\"Sheet1\", \"A1\", \"A1\", style); err != nil {\n\t\tpanic(err)\n\t}\n\t// Get cell value, add new name and save\n\tv, err := f.GetCellValue(sheetName, \"a1\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%x\\n\", v) // Output as hex so you can see how the line break is encoded\n\terr = f.SetCellValue(sheetName, \"a1\", v + \"\\n\" + \"Joe Bloggs\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = f.SaveAs(\"./Book99.xlsx\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66612619/trying-to-submit-html-form-data-to-excel",
    "body": "func datasubmit(w http.ResponseWriter, req *http.Request) {\n\tnm := req.FormValue(\"name\")\n\tge := req.FormValue(\"gender\")\n\tag := req.FormValue(\"age\")\n\tsliNm := strings.Split(nm, \";\") // creating slice if \";\" occur then it treat as another element of slice\n\tvar final string // again creating string to fill \"\\n\"\n\tfor _, v := range sliNm {\n\t\tfinal += v\n\t\tfinal = final + \"\\n\"\n\t}\n\tfmt.Println(final)\n\tvar data = M{\"Name\": final, \"GENDER\": ge, \"AGE\": ag} // data as map\n\ttpl.ExecuteTemplate(w, \"index.gohtml\", data)\n\tf, err := excelize.OpenFile(\"./Book99.xlsx\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tsheetName := f.GetSheetName(0)\n\n\t// Set cell A1 to Wrapp\n\tstyle, err := f.NewStyle(&excelize.Style{\n\t\tAlignment: &excelize.Alignment{\n\t\t\tWrapText: true,\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(sheetName)\n\trows, err := f.GetRows(sheetName)\n\trlast := len(rows)\n\tfmt.Println(rows)\n\tfmt.Println(rlast)\n\tf.SetCellStyle(sheetName, fmt.Sprintf(\"A%d\", rlast+1), fmt.Sprintf(\"A%d\", rlast+1), style) // setting cell style for newly creating cell with every iteration\n\tfmt.Println(data[\"Name\"])\n\tf.SetCellValue(sheetName, fmt.Sprintf(\"A%d\", rlast+1), data[\"Name\"])\n\tf.SetCellValue(sheetName, fmt.Sprintf(\"B%d\", rlast+1), data[\"GENDER\"])\n\tf.SetCellValue(sheetName, fmt.Sprintf(\"C%d\", rlast+1), data[\"AGE\"])\n\terr = f.SaveAs(\"./Book99.xlsx\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66517793/cancelling-function-by-user-action-html-template",
    "body": "// Settings Type ...\ntype Settings struct {\n\tEnabled bool\n\tStop chan struct{}\n}\nvar settings Settings\ntype Template struct {\n\ttemplates *template.Template\n}\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n\treturn t.templates.ExecuteTemplate(w, name, data)\n}\nfunc toggleEnable(c echo.Context) error {\n\tif settings.Enabled {\n\t\tsettings.Enabled = false\n\t\tclose(settings.Stop)\n\t} else {\n\t\tsettings.Enabled = true\n\t\tsettings.Stop = make(chan struct{})\n\t\tgo Sum(settings.Stop)\n\t}\n\treturn c.Redirect(http.StatusTemporaryRedirect, c.Request().Header.Get(\"Referer\"))\n}\nfunc Sum(stop chan struct{}) {\n\tsum := 0\n\tfor i := 1; i < 50; i++ {\n\t\tsum += i\n\t\tfmt.Println(sum)\n\t\tselect {\n\t\tcase <-stop:\n\t\t\tfmt.Println(\"stopped\")\n\t\t\treturn\n\t\tcase <-time.After(3 * time.Second):\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66300890/getting-error-while-removing-the-element-from-queue",
    "body": "func (t *bt) topview() {\n\tif t.root == nil {\n\t\treturn\n\t}\n\tqu := list.New()\n\ttopview := make(map[int]*tree)\n\tqu.PushBack(top{t.root, 0})\n\ttopview[qu.Front().Value.(top).hd] = qu.Front().Value.(top).node\n\t//fmt.Println(sample.Value.(top).hd)\n\tfmt.Println(\"top view\")\n\tfor qu.Len() > 0 {\n\t\tsample := qu.Front()\n\t\tqu.Remove(qu.Front())\n\t\tfor key := range topview {\n\t\t\tif key != sample.Value.(top).hd {\n\t\t\t\ttopview[sample.Value.(top).hd] = sample.Value.(top).node\n\t\t\t}\n\t\t}\n\t\tif sample.Value.(top).node.left != nil {\n\t\t\tqu.PushBack(top{sample.Value.(top).node.left, sample.Value.(top).hd - 1})\n\t\t}\n\t\tif sample.Value.(top).node.right != nil {\n\t\t\tqu.PushBack(top{sample.Value.(top).node.right, sample.Value.(top).hd + 1})\n\t\t}\n\t}\n\tfor _, value := range topview {\n\t\tfmt.Println(value.data)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66195093/could-someone-explain-the-term-invariants-in-mutex-locking",
    "body": "package main\nimport (\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\t/// valid code\n\tmut := sync.Mutex{} // mutex has to e used on both ends\n\tsharedState := 0\n\tgo func() {\n\t\t//mut := mut // this is invalid operation, it creates copy of a lock, so locking one does not affect another\n\t\tfor i := 0; i < 100000; i++ {\n\t\t\tmut.Lock()\n\t\t\t// if lock is not present one routine can modify data while other is reading, in that moment\n\t\t\t// datarace happens\n\t\t\tsharedState = sharedState + 1\n\t\t\tmut.Unlock()\n\t\t}\n\t}()\n\t// not locking on either side is also invalid and panic will happen\n\tfor i := 0; i < 100000; i++ {\n\t\tmut.Lock()\n\t\tsharedState = sharedState + 1\n\t\tmut.Unlock()\n\t}\n\ttime.Sleep(time.Second) // this is just simplification, to make sure all routines finished we usually use wait group or channels\n\tif sharedState != 200000 {\n\t\tpanic(\"this will never happen\")\n\t}\n\t/// invalid code\n\tsharedState = 0\n\tgo func() {\n\t\tfor i := 0; i < 100000; i++ {\n\t\t\t// lock is not present on both sides, locking just one side has no effect\n\t\t\tsharedState = sharedState + 1\n\t\t}\n\t}()\n\t// not locking on either side is also invalid and panic will happen\n\tfor i := 0; i < 100000; i++ {\n\t\tmut.Lock()\n\t\tsharedState = sharedState + 1\n\t\tmut.Unlock()\n\t}\n\ttime.Sleep(time.Second)\n\tif sharedState == 200000 {\n\t\tpanic(\"there is very little chance this panic will happen, newer assume it will\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65772266/get-last-n-files-in-directory-sorted-by-timestamp-without-listing-all-files",
    "body": "\tmaxFiles := 5\n\tbatch := 100 // optimize to find good balance\n\tdir, err := os.Open(path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tvar files []os.FileInfo\n\tfor {\n\t\tfs, err := dir.Readdir(batch)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t\tbreak\n\t\t}\n\t\tfor _, fileInfo := range fs {\n\t\t\tvar lastFile os.FileInfo\n\t\t\tif maxFiles <= len(files) {\n\t\t\t\tlastFile = files[len(files)-1]\n\t\t\t}\n\t\t\tif lastFile != nil && fileInfo.ModTime().After(lastFile.ModTime()) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfiles = append(files, fileInfo)\n\t\t\tsort.Slice(files, func(i, j int) bool {\n\t\t\t\treturn files[i].ModTime().Before(files[j].ModTime())\n\t\t\t})\n\t\t\tif maxFiles < len(files) {\n\t\t\t\tfiles = files[:maxFiles]\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/65768861/read-and-merge-two-yaml-files-dynamically-and-or-recursively",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"gopkg.in/yaml.v3\"\n\t\"os\"\n)\nvar input1 = []byte(`\na: b\nc:\n  d: e\n`)\nvar input2 = []byte(`\nc:\n  f: g\nh: i\n`)\nfunc nodesEqual(l, r *yaml.Node) bool {\n\tif l.Kind == yaml.ScalarNode && r.Kind == yaml.ScalarNode {\n\t\treturn l.Value == r.Value\n\t}\n\tpanic(\"equals on non-scalars not implemented!\")\n}\nfunc recursiveMerge(from, into *yaml.Node) error {\n\tif from.Kind != into.Kind {\n\t\treturn errors.New(\"cannot merge nodes of different kinds\")\n\t}\n\tswitch from.Kind {\n\tcase yaml.MappingNode:\n\t\tfor i := 0; i < len(from.Content); i += 2 {\n\t\t\tfound := false\n\t\t\tfor j := 0; j < len(into.Content); j += 2 {\n\t\t\t\tif nodesEqual(from.Content[i], into.Content[j]) {\n\t\t\t\t\tfound = true\n\t\t\t\t\tif err := recursiveMerge(from.Content[i+1], into.Content[j+1]); err != nil {\n\t\t\t\t\t\treturn errors.New(\"at key \"+from.Content[i].Value+\": \"+err.Error())\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !found {\n\t\t\t\tinto.Content = append(into.Content, from.Content[i:i+2]...)\n\t\t\t}\n\t\t}\n\tcase yaml.SequenceNode:\n\t\tinto.Content = append(into.Content, from.Content...)\n\tcase yaml.DocumentNode:\n\t\trecursiveMerge(from.Content[0], into.Content[0])\n\tdefault:\n\t\treturn errors.New(\"can only merge mapping and sequence nodes\")\n\t}\n\treturn nil\n}\nfunc main() {\n\tvar v1, v2 yaml.Node\n\tyaml.Unmarshal(input1, &v1)\n\tyaml.Unmarshal(input2, &v2)\n\tif err := recursiveMerge(&v1, &v2); err != nil {\n\t\tpanic(err)\n\t}\n\te := yaml.NewEncoder(os.Stdout)\n\te.Encode(&v2)\n\te.Close()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65760528/how-to-determine-version-of-a-golang-module-through-its-source-code",
    "body": "module github.com/hashicorp/consul\ngo 1.13\nreplace github.com/hashicorp/consul/api => ./api 👈🏻 replace ➡️ consul/api v1.8.0\nreplace github.com/hashicorp/consul/sdk => ./sdk 👈🏻 replace ➡️ consul/sdk v0.7.0\nreplace launchpad.net/gocheck => github.com/go-check/check v0.0.0-20140225173054-eb6ee6f84d0a\nrequire (\n\tgithub.com/Microsoft/go-winio v0.4.3 // indirect\n\tgithub.com/NYTimes/gziphandler v1.0.1\n\tgithub.com/armon/circbuf v0.0.0-20150827004946-bbbad097214e\n\tgithub.com/armon/go-metrics v0.3.6\n\tgithub.com/armon/go-radix v1.0.0\n\tgithub.com/aws/aws-sdk-go v1.25.41\n\tgithub.com/coredns/coredns v1.1.2\n\tgithub.com/coreos/go-oidc v2.1.0+incompatible\n\tgithub.com/digitalocean/godo v1.10.0 // indirect\n\tgithub.com/docker/go-connections v0.3.0\n\tgithub.com/elazarl/go-bindata-assetfs v0.0.0-20160803192304-e1a2a7ec64b0\n\tgithub.com/envoyproxy/go-control-plane v0.9.5\n\tgithub.com/frankban/quicktest v1.11.0 // indirect\n\tgithub.com/gogo/protobuf v1.2.2-0.20190723190241-65acae22fc9d\n\tgithub.com/golang/protobuf v1.3.5\n\tgithub.com/google/go-cmp v0.5.2\n\tgithub.com/google/go-querystring v1.0.0 // indirect\n\tgithub.com/google/gofuzz v1.2.0\n\tgithub.com/google/tcpproxy v0.0.0-20180808230851-dfa16c61dad2\n\tgithub.com/hashicorp/consul/api v1.8.0 👈🏻 replace\n\tgithub.com/hashicorp/consul/sdk v0.7.0 👈🏻 replace\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/65760528/how-to-determine-version-of-a-golang-module-through-its-source-code",
    "body": "{\n        \"Path\": \"github.com/hashicorp/consul\",\n        \"Main\": true,\n        \"Dir\": \"/Users/a18388871/GoProjects/consul\",\n        \"GoMod\": \"/Users/a18388871/GoProjects/consul/go.mod\",\n        \"GoVersion\": \"1.13\"\n}\n...\n{\n        \"Path\": \"github.com/grpc-ecosystem/grpc-gateway\",\n        \"Version\": \"v1.9.0\",\n        \"Time\": \"2019-05-14T09:07:28Z\",\n        \"Update\": {\n                \"Path\": \"github.com/grpc-ecosystem/grpc-gateway\",\n                \"Version\": \"v1.16.0\",\n                \"Time\": \"2020-10-28T10:29:51Z\"\n        },\n        \"Indirect\": true,\n        \"Dir\": \"/Users/a18388871/go/pkg/mod/github.com/grpc-ecosystem/grpc-gateway@v1.9.0\",\n        \"GoMod\": \"/Users/a18388871/go/pkg/mod/cache/download/github.com/grpc-ecosystem/grpc-gateway/@v/v1.9.0.mod\"\n}\n{\n        \"Path\": \"github.com/hashicorp/consul/api\",\n        \"Version\": \"v1.8.0\",\n        \"Replace\": { 👈🏻. Replace field describes the replacement module, and its Dir field is set to the replacement's source code\n                \"Path\": \"./api\",\n                \"Dir\": \"/Users/a18388871/GoProjects/consul/api\",\n                \"GoMod\": \"/Users/a18388871/GoProjects/consul/api/go.mod\",\n                \"GoVersion\": \"1.12\"\n        },\n        \"Update\": { 👈🏻' The -u flag adds information about available upgrades'\n                \"Path\": \"github.com/hashicorp/consul/api\",\n                \"Version\": \"v1.8.1\",\n                \"Time\": \"2020-12-10T20:49:49Z\"\n        },\n        \"Dir\": \"/Users/a18388871/GoProjects/consul/api\",\n        \"GoMod\": \"/Users/a18388871/GoProjects/consul/api/go.mod\",\n        \"GoVersion\": \"1.12\"\n}\n..."
  },
  {
    "url": "https://stackoverflow.com/questions/65707881/is-there-a-way-i-could-declare-my-preloads-in-a-less-error-prone-way",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype StructA struct {}\ntype StructB struct {}\ntype StructC struct {}\nfunc GetTypeName(data interface{}) string {\n\tif data == nil {\n\t\treturn \"\"\n\t}\n\n\trefVal := reflect.TypeOf(data)\n\n\tif refVal.Kind() != reflect.Struct {\n\t\treturn \"\"\n\t}\n\n\treturn refVal.Name();\n}\nfunc main() {\n\tfmt.Printf(\"%T\\n\", StructA{})\n\tfmt.Printf(\"%#v\\n\", StructB{})\n\tfmt.Println(GetTypeName(StructC{}))\n\tfmt.Println(GetTypeName(StructB{}))\n\tfmt.Println(GetTypeName(StructA{}))\n\tfmt.Println(GetTypeName(\"ABC\"))\n\tfmt.Println(GetTypeName(nil))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65465510/finding-types-embedding-another-type-using-x-tools-go-packages",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"go/types\"\n\t\"os\"\n\t\"strings\"\n\t\"golang.org/x/tools/go/packages\"\n)\nfunc main() {\n\tinputFile := os.Getenv(\"GOFILE\")\n\tcwd, err := os.Getwd()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(inputFile)\n\tfmt.Println(cwd)\n\tcfg := &packages.Config{\n\t\t// Mode:       packages.NeedName | packages.NeedFiles | packages.NeedSyntax | packages.LoadTypes,\n\t\tMode:       packages.NeedSyntax | packages.LoadTypes,\n\t}\n\tpkgs, err := packages.Load(cfg, cwd)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"load: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tif packages.PrintErrors(pkgs) > 0 {\n\t\tos.Exit(1)\n\t}\n\tfor _, pkg := range pkgs {\n\t\t// qual := types.RelativeTo(pkg.Types)\n\t\tscope := pkg.Types.Scope()\n\t\tfor _, name := range scope.Names() {\n\t\t\tobj := scope.Lookup(name)\n\t\t\tif obj != nil && obj.Type() != nil && obj.Type().Underlying() != nil {\n\t\t\t\t// obj is types.Named,\n\t\t\t\t// obj.Type() is types.TypeName\n\t\t\t\t// obj.Type().Underlying() exposes the types.Struct which\n\t\t\t\t// gives access to the desired types.Var.Embedded()\n\t\t\t\tst, ok := obj.Type().Underlying().(*types.Struct)\n\t\t\t\tif !ok {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfor i := 0; i < st.NumFields(); i++ {\n\t\t\t\t\tf := st.Field(i)\n\t\t\t\t\tif f.Embedded() && strings.HasSuffix(f.Type().String(), \"log.Logger\") {\n\t\t\t\t\t\tfmt.Printf(\"%#v\\n\", f)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64895834/query-max-date-in-elasticsearch",
    "body": "ctx := context.Background()\ntermQuery := elastic.NewMatchAllQuery()\nagg := elastic.NewMaxAggregation().Field(\"le_nested.last_updated\")\nsr, err := elastic.Client.Search(\"your_index\").Query(termQuery).Aggregation(\"max_date\", agg).Do(ctx)\nif err != nil {\n\tm := fmt.Sprint(\"Error getting getting last updated data\", err)\n\tfmt.Println(m)\n}\nmax, found := sr.Aggregations.MaxBucket(\"max_date\")\nif !found {\n\tm := fmt.Sprint(\"max_date aggregation not found\", err)\n\tfmt.Println(m)\n}\nfmt.Println(\"MAX DATE\", max.ValueAsString)\ntm := int64(*max.Value) / 1000\nmu := time.Unix(tm, 0)\nfmt.Println(\"DATE\", mu)"
  },
  {
    "url": "https://stackoverflow.com/questions/64769540/how-can-i-open-a-sound-file-loaded-in-memory-with-libsndfile",
    "body": "package main\n// #cgo CFLAGS: -Wall -O3 -Iinclude\n// #cgo LDFLAGS: -O3 -L. -llibsndfile-1 -lopenal32\n/*\n\t#include \"extras.h\"\n\t#include \"sndfile.h\"\n\t#include \"stdlib.h\"\n\t#include \"AL/al.h\"\n\t#include \"AL/alc.h\"\n\t#include \"AL/alext.h\"\n*/\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n\t\"io/ioutil\"\n\t\"bytes\"\n\t\"time\"\n\t\"os\"\n\t\"./oal\"\n)\ntype MyData struct {\n\tMyBytes\t\t*bytes.Reader\n\tCount\t\tint64\n}\nfunc main() {\nfullFileByte, err := ioutil.ReadFile(os.Args[1]); errHandler(err)\n\treader := bytes.NewReader(fullFileByte)\n\t// file info (Channels, frames, seekable etc...)\n\tvar myInfo Info\n\tdata := &MyData{MyBytes: reader, Count: 0}\n\tgetLen :=  func() int64 {\n\t\tl := data.MyBytes.Len()\n\t\tprintln(\"Lenght:\", l)\n\t\treturn int64(l)\n\t\t}\n\tvRead := func(o []byte) int64 {\n\t\t//println(\"Read:\", data.Count)\n\t\ti, _ := data.MyBytes.Read(o) // ; errHandler(err)\n\t\tdata.Count += int64(i)\n\t\treturn int64(i)\n\t}\nseek := func(offset int64, whence int) int64 {\n\t\tprintln(\"Seek:\", data.Count)\n\t\tgoWhence := whence\n\t\tdata.Count, _ = data.MyBytes.Seek(offset, goWhence) // ; errHandler(err)\n\t\treturn data.Count\n\t}\ntell := func() int64 {\n\t\tprintln(\"Tell: \", data.Count)\n\t\treturn data.Count\n\t}\nglobVB.GetFileLen = getLen\n\tglobVB.Read = vRead\n\tglobVB.Seek = seek\nglobVB.Tell = tell\n\tf := OpenVirtual(ModeRead, &myInfo)\n\tfmt.Println(\"Channel:\", myInfo.Channels, \"\\nFrames:\", myInfo.Frames, \"\\nFormat:\", myInfo.Format, \"\\nSections:\", myInfo.Sections, \"\\nSample Rate:\", myInfo.Samplerate, \"\\nSeekable:\", myInfo.Seekable)\n\ts := Source{}\n\ts.Create(uint32(C.CreateVirtualBuffer(f.SFile, *myInfo.fromGoToCInfo())))\n\t\ts.Play()\n\tfor {\n\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n}\nfunc OpenVirtual(mode FMode, info* Info) File { // File\nWe're tricking the libsndfile. It's actually unnecessary code.\n\tvar vb *C.VirtualCallbacks\n\tvar file File\n\t// Go → C\n\tcInfo := info.fromGoToCInfo()\n\tcVirtualIO := C.NewVirtualIO()\n\tfile.SFile = C.sf_open_virtual(cVirtualIO, C.int(mode), cInfo, (unsafe.Pointer)(vb))\n\tif file.SFile == nil {\n\t\tpanic(C.GoString(C.sf_strerror(file.SFile)))\n\t}\n\t*info = fromCToGo(cInfo)\n\treturn file\n}\ntype File struct {\n\tSFile*\t\tC.SNDFILE\n}\ntype Info struct {\n\tFrames\t\tint64\n\tSamplerate\t\tint\n\tChannels\t\tint\n\tFormat\t\tint\n\tSections\t\tint\n\tSeekable\t\tint\n}\nfunc (s Info) fromGoToCInfo() *C.SF_INFO {\n\tval := new(C.SF_INFO)\n\tval.frames = C.sf_count_t(s.Frames)\n\t\tval.samplerate = C.int(s.Samplerate)\n\tval.channels = C.int(s.Channels)\n\tval.format = C.int(s.Format)\n\tval.sections = C.int(s.Sections)\n\tval.seekable = C.int(s.Seekable)\n\treturn val\n}\ntype SFile C.SNDFILE\nfunc fromCToGo(info* C.SF_INFO) Info {\n\tval := Info{}\n\tval.Frames = int64(info.frames)\n\tval.Samplerate = int(info.samplerate)\n\tval.Channels = int(info.channels)\n\tval.Format = int(info.format)\n\tval.Sections = int(info.sections)\n\tval.Seekable = int(info.seekable)\n\treturn val\n}\n// File modes: read, write and readwrite\ntype FMode int\nconst (\n\tModeRead\t\tFMode = C.SFM_READ\n\tModeWrite\t\tFMode = C.SFM_WRITE\n\tModeReadWrite\t\tFMode = C.SFM_RDWR\n)\nfunc errHandler(e error) {\nif e != nil {\n\t\tpanic(e)\n}\n}\nfunc init() {\n\tdevice, err := oal.OpenDevice(\"\")\n\terrHandler(err)\n\tctx, err := oal.CreateContext(device, nil)\n\terrHandler(err)\n\toal.MakeContextCurrent(ctx)\n}\ntype TGetFileLen func() int64\ntype TVioSeek func(offset int64, whence int) int64\ntype TVioRead func(o []byte) int64\ntype TVioWrite func( ptr unsafe.Pointer, count int64, user_data unsafe.Pointer)\ntype TVioTell func() int64\ntype SVirtualIO struct {\n\tGetFileLen\t\tTGetFileLen\n\tSeek\t\tTVioSeek\n\tRead\t\tTVioRead\n\tWrite\t\tTVioWrite\n\tTell\t\tTVioTell\n\t// Data\t\tinterface{}\n}\nvar globVB  SVirtualIO\n//export goVirtualRead\nfunc goVirtualRead(buffPtr unsafe.Pointer, count int64, data unsafe.Pointer) int64 {\n\tbyteBuff := (*[1 << 31]byte) (buffPtr)[0:count]\n\treturn globVB.Read(byteBuff)\n\t}\n//export goGetLen\nfunc goGetLen(userData unsafe.Pointer) int64 {\n\treturn globVB.GetFileLen()\n}\n//export goVirtualSeek\nfunc goVirtualSeek(offset int64,  whence int, userData unsafe.Pointer) int64 {\n\treturn globVB.Seek(offset, whence)\n}\n//export goVirtualTell\nfunc goVirtualTell(userData unsafe.Pointer) int64 {\n\n\treturn globVB.Tell()\n}\ntype Source struct {\n\tSource\t\tC.ALuint\n\tBuffer\t\tC.ALuint\n}\nfunc (s Source) Delete() {\n\tC.alDeleteSources(1, &s.Source)\n\tC.alDeleteBuffers(1, &s.Buffer)\n}\nfunc (s* Source) Create(b uint32) {\n\t\tvar source C.ALuint\n\tvar buffer C.ALuint = C.ALuint(b)\n\tsource = 0\n\tC.alGenSources(1, &source)\n\tC.alSourcei(source, C.AL_BUFFER, C.ALint(buffer))\n\ts.Source = source\n\ts.Buffer = buffer\n}\nfunc (s Source) Play() {\n\t\tC.alSourcePlay(s.Source)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64769540/how-can-i-open-a-sound-file-loaded-in-memory-with-libsndfile",
    "body": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include \"extras.h\"\n#include \"_cgo_export.h\"\n\t#include \"sndfile.h\"\n#include \"AL/al.h\"\n#include \"AL/alc.h\"\n\tsf_count_t\n\tvirtualRead(void *ptr, sf_count_t count, void *userData) {\n\t\treturn goVirtualRead(ptr, count, userData);\n\t}\n\tsf_count_t\n\tvirtualGetFileLen(void *udata) {\n\t\treturn goGetLen(udata);\n\t}\n\tsf_count_t\nvirtualSeek(sf_count_t offset, int whence, void *user_data) {\n\treturn goVirtualSeek(offset, whence, user_data);\n}\nsf_count_t\n\tvirtualTell(void *userData) {\n\t\treturn goVirtualTell(userData);\n}\nSF_VIRTUAL_IO*\nNewVirtualIO() {\n\tstatic SF_VIRTUAL_IO sndVirtualIO;\n\tsndVirtualIO.read = virtualRead;\n\tsndVirtualIO.get_filelen  = virtualGetFileLen;\n\tsndVirtualIO.seek = virtualSeek;\n\tsndVirtualIO.tell = virtualTell;\n// \tsndVirtualIO.write= virtualWrite;\n\treturn &sndVirtualIO;\n}\nALuint\nCreateVirtualBuffer(SNDFILE *file, SF_INFO info) {\n\tALenum err, format;\n\tALuint buffer;\n\tSNDFILE *sndfile;\n\tSF_INFO sfinfo;\n\tsfinfo = info;\n\tshort *membuf;\n\tsf_count_t num_frames;\n\tALsizei num_bytes;\n\tsndfile = file;\n\tif(!sndfile)  {\n\t\treturn 0;\n\t}\n\tif(sfinfo.channels == 1)\n\t\tformat = AL_FORMAT_MONO16;\n\telse if(sfinfo.channels == 2)\n\t\tformat = AL_FORMAT_STEREO16;\n\telse {\n\t\tsf_close(sndfile);\n\t\treturn 0;\n\t}\n\tmembuf = malloc((size_t)(sfinfo.frames * sfinfo.channels) * sizeof(short));\n\tnum_frames = sf_readf_short(sndfile, membuf, sfinfo.frames);\n\tif(num_frames < 1)\n\t{\n\t\tfree(membuf);\n\t\tsf_close(sndfile);\n\t\treturn 0;\n\t}\n\tnum_bytes = (ALsizei)(num_frames * sfinfo.channels) * (ALsizei)sizeof(short);\n\tbuffer = 0;\n\talGenBuffers(1, &buffer);\n\talBufferData(buffer, format, membuf, num_bytes, sfinfo.samplerate);\n\tfree(membuf);\n\tsf_close(sndfile);\n\terr = alGetError();\n\tif(err != AL_NO_ERROR) {\n\t\tif(buffer && alIsBuffer(buffer))\n\t\t\talDeleteBuffers(1, &buffer);\n\t\treturn 0;\n\t}\n\treturn buffer;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64769540/how-can-i-open-a-sound-file-loaded-in-memory-with-libsndfile",
    "body": "#ifndef EXTRAS_H\n#define EXTRAS_H\n#include \"sndfile.h\"\n#include \"AL/al.h\"\n#include \"AL/alc.h\"\n// **redundant code. Because NULL is not accepted. :)\ntypedef sf_count_t (*goreadfunc)(void* sf_count_t, void*);\nstruct VirtualCallbacks {\n\tgoreadfunc\t\tvRead;\n\tsf_vio_get_filelen\t\tvGetFileLen;\n\tsf_vio_seek\t\tvSeek;\n\tsf_vio_write\t\tvWrite;\n};\ntypedef struct VirtualCallbacks VirtualCallbacks;\nsf_count_t goVirtualRead(void *ptr, sf_count_t count, void *user_data);\nSF_VIRTUAL_IO*\nNewVirtualIO(void);\nALuint\nCreateVirtualBuffer(SNDFILE *file, SF_INFO info);\n#endif"
  },
  {
    "url": "https://stackoverflow.com/questions/64638937/how-to-cleanly-stop-goroutines-internally-on-error",
    "body": "// for code simplicity\nfunc doSendACKImpl(conn net.Conn) error {\n\tif err := _send_ack(conn, \"string1\\n\"); err != nil {\n\t\treturn err\n\t}\n\tif err := _send_ack(conn, \"string2\\n\"); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n\tl, err := net.Listen(CONN_TYPE, CONN_HOST+\":\"+ CONN_PORT)\n\tfor {\n\t\t// Listen for an incoming connection.\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting: \", err.Error())\n\t\t\tos.Exit(1)\n\t\t}\n        // can change to self defined ResponseType, here use error for demo\n\t\tworkRes := make(chan error, 1)\n\t\tgo func() {\n            // return write back to channel\n\t\t\tworkRes <- doSendACKImpl(conn)\n\t\t}()\n\t\tselect {\n        // read result back\n\t\tcase resError := <-workRes:\n\t\t\tfmt.Printf(\"meet error %s\", resError)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64638937/how-to-cleanly-stop-goroutines-internally-on-error",
    "body": "func main() {\n\tl, _ := net.Listen(CONN_TYPE, CONN_HOST+\":\"+CONN_PORT)\n\t// more result buffer size\n\tconst workSize int = 100\n\t// can change to self defined ResponseType, here use error for demo\n\tworkResBuffer := make(chan error, workSize)\n\t// goroutine collect result\n\tgo func() {\n\t\t// get all result from worker responses\n\t\tfor resError := range workResBuffer {\n\t\t\tfmt.Printf(\"meet error %s\", resError)\n\t\t}\n\t}()\n\tfor {\n\t\t// Listen for an incoming connection.\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting: \", err.Error())\n\t\t\tos.Exit(1)\n\t\t}\n\t\t// TODO: limit the goroutine number\n\t\tgo func() {\n\t\t\t// return write back to channel\n\t\t\tworkResBuffer <- doSendACKImpl(conn)\n\t\t}()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64522524/how-to-connect-golang-in-gitlab-to-mongodb-container-in-gitlab-ci",
    "body": "version: '3'\nservices:\n    database:\n        image:  'mongo:latest'\n        container_name: '${APP_NAME}-mongodb-test'\n        environment:\n            MONGO_INITDB_ROOT_USERNAME: usernametest\n            MONGO_INITDB_ROOT_PASSWORD: passwordtest\n            MONGO_INITDB_DATABASE: databasetest\n        command: mongod\n        ports:\n            - '27018:27017'\n        restart: always\n        volumes:\n            - ./resources/mongo-initdb.js:/docker-entrypoint-initdb.d/mongo-initdb.js\n        networks:\n            - codetify-net-test\nnetworks:\n    codetify-net-test"
  },
  {
    "url": "https://stackoverflow.com/questions/63889480/content-type-is-not-being-set-when-submitting-form",
    "body": "<form action=\"/api/submitPost/\" method=\"POST\" enctype=\"multipart/form-data\">\n    <div class=\"form-check\">\n        <input type=\"checkbox\" name=\"rules\" class=\"form-check-input\" id=\"rulesCheck1\" value=\"1\">\n        <label class=\"form-check-label\" for=\"rulesCheck1\">\n            I have read the <a href=\"/rules\">rules</a>\n        </label>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"text\" name=\"subject\" class=\"form-control\" id=\"subjectInput\" placeholder=\"Subject\">\n    </div>\n    <div class=\"form-group\">\n        <input type=\"text\" name=\"body\" class=\"form-control\" id=\"bodyInput\" placeholder=\"Body\">\n    </div>\n    <div class=\"form-group-sm justify-content-between\">\n        <input type=\"file\" name=\"file\" class=\"file\" id=\"fileInput\" data-browse-on-zone-click=\"true\">\n        <input type=\"hidden\" name=\"boardName\" value=\"{{ .board }}\">\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </div>\n</form>"
  },
  {
    "url": "https://stackoverflow.com/questions/63457401/nested-errgroup-inside-bunch-of-goroutines",
    "body": "// Keep entity statuses\nstatuses:=make([]Status,len(entity))\nfor i, link := range entity {\n   statuses[i].Entity=link\n   wg.Add(1)\n   go func(i index) {\n      defer wg.Done()\n      ctx, cancel:=context.WithCancel(context.Background())\n      defer cancel()\n      // Error collector\n      status:=make(chan error)\n      defer close(status)\n      go func() {\n         for st:=range status {\n             if st!=nil {\n                cancel()  // Stop all calls\n                // store first error\n                if statuses[i].Err==nil {\n                   statuses[i].Err=st\n                }\n             }\n         }\n      }()\n      innerWg:=sync.WaitGroup{}\n      innerWg.Add(1)\n      go func() {\n         defer innerWg.Done()\n         status<- makeHttpCall(ctx)\n      }()\n      innerWg.Add(1)\n      go func() {\n         defer innerWg.Done()\n         status<- makeHttpCall(ctx)\n      }()\n      ...\n      innerWg.Wait()\n   }(i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63446466/variables-assigned-in-chromedp-actionfunc-cannot-be-inputted-by-sendkeys",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"time\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tctx, cancel := chromedp.NewContext(\n\t\tcontext.Background(),\n\t\tchromedp.WithLogf(log.Printf),\n\t)\n\tdefer cancel()\n\tctx, cancel = context.WithTimeout(ctx, 15*time.Second)\n\tdefer cancel()\n\tvar value string = \"apple\"\n\tvar buf0 []byte\n\tvar buf1 []byte\n\terr := chromedp.Run(ctx, chromedp.Tasks{\n\t\tchromedp.Navigate(`https://stackoverflow.com/users/login`),\n\t\tchromedp.WaitVisible(`//*[@id=\"submit-button\"]`),\n\t\tchromedp.CaptureScreenshot(&buf0),\n\t\tchromedp.SendKeys(`//*[@id=\"email\"]`, value),\n\t\tchromedp.CaptureScreenshot(&buf1),\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Print(value)\n\tioutil.WriteFile(\"./capture0.png\", buf0, 0644)\n\tioutil.WriteFile(\"./capture1.png\", buf1, 0644)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63003656/how-to-read-from-subset-of-channels",
    "body": "func NextMessage(wantChannels []string) int64 {\n\t// create select array with dynamic size\n\tcases := make([]reflect.SelectCase, len(wantChannels) + 1)\n\t// insert default value so it can be waiting\n\tcases[0] = reflect.SelectCase{Dir: reflect.SelectDefault}\n\tfor i, wantChan := range wantChannels {\n\t\tfmt.Printf(\"want from Chan %s\\n\", wantChan)\n\t\tcases[i+1] = reflect.SelectCase{Dir: reflect.SelectRecv, Chan: reflect.ValueOf(myChan[wantChan])}\n\t}\n\tfor {\n\t\tindex, value, _ := reflect.Select(cases)\n\t\tif index == 0 {\n\t\t\tfmt.Printf(\"%+v waiting for 2 seconds before checking again\\n\", wantChannels)\n\t\t\t<-time.After(2 * time.Second)\n\t\t} else {\n\t\t\treturn value.Int()\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62160792/check-if-a-method-type-matches-a-function-type",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Fn func(context.Context)\ntype testStruct struct{}\nfunc (*testStruct) DoSomething(context.Context)           {}\nfunc (*testStruct) DoSomethingElse([]byte)                {}\nfunc (*testStruct) DoSomethingElse2(context.Context) error { return nil }\nfunc main() {\n\tstructType := reflect.ValueOf(&testStruct{})\n\tfor i := 0; i < structType.NumMethod(); i++ {\n\t\tfmt.Println(\"======================\")\n\t\tmethod := structType.Method(i)\n\t\t// compare method and Fn\n\t\tif method.Type().ConvertibleTo(reflect.TypeOf((Fn)(nil))) {\n\t\t\tfmt.Println(\"function of correct type\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62160792/check-if-a-method-type-matches-a-function-type",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Fn func(context.Context)\ntype testStruct struct{}\nfunc (*testStruct) DoSomething(context.Context) {}\nfunc (*testStruct) DoSomethingElse([]byte)      {}\nfunc main() {\n\tstructType := reflect.TypeOf(&testStruct{})\n\trctx := reflect.TypeOf(new(context.Context)).Elem()\n\tfor i := 0; i < structType.NumMethod(); i++ {\n\t\tfmt.Println(\"======================\")\n\t\tmethod := structType.Method(i)\n\t\tfmt.Println(method.Name)\n\t\tfmt.Println(method.Type.String())\n\t\tif method.Type.NumIn() != 2 {\n\t\t\tfmt.Println(\"wrong number of inputs, expected 1\")\n\t\t\tcontinue\n\t\t}\n\t\tif method.Type.In(1) != rctx {\n\t\t\tfmt.Println(\"input of wrong type, expected context.Context\")\n\t\t\tcontinue\n\t\t}\n\t\tif method.Type.NumOut() != 0 {\n\t\t\tfmt.Println(\"wrong number of outputs, expected 0\")\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"%v is a function of correct type\\n\", method.Name)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62143454/golang-postgres-syntax-error-in-if-else-statement",
    "body": "UPDATE userdata\nSET age = $1,\nweight = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(weight, weight[array_upper(weight, 1)], $2)\nELSE array_append(weight, $2) END,\ndeadlift = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(deadlift, deadlift[array_upper(deadlift, 1)], $3)\nELSE array_append(deadlift, $3) END,\nsquat = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(squat, squat[array_upper(squat, 1)], $4)\nELSE array_append(squat, $4) END,\nbench = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(bench, bench[array_upper(bench, 1)], $5)\nELSE array_append(bench, $5) END,\noverhead = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(overhead, overhead[array_upper(overhead, 1)], $6)\nELSE array_append(overhead, $6) END,\ndate = CASE WHEN date[array_upper(date,1)] = $7 THEN array_replace(date, date[array_upper(date, 1)], $7)\nELSE array_append(date, $7) END\nWHERE email = $8;"
  },
  {
    "url": "https://stackoverflow.com/questions/62035606/how-to-stub-method-called-in-another-method-in-same-struct",
    "body": "package connector_test\nimport (\n\t\"fmt\"\n\t\"testing\"\n\tconnector \"github.com/mrdulin/golang/src/stackoverflow/62035606\"\n\t\"github.com/stretchr/testify/mock\"\n\t\"github.com/stretchr/testify/require\"\n)\ntype MockedDB struct {\n\tmock.Mock\n}\nfunc (db *MockedDB) Ping() error {\n\targs := db.Called()\n\treturn args.Error(0)\n}\nfunc TestConnector_Pool(t *testing.T) {\n\tt.Run(\"should verifies connection to the database is still alive\", func(t *testing.T) {\n\t\ttestDB := new(MockedDB)\n\t\tc := connector.Connector{DB: testDB}\n\t\ttestDB.On(\"Ping\").Return(nil)\n\t\tpool, err := c.Pool()\n\t\trequire.Nil(t, err, nil)\n\t\trequire.Equal(t, 1, pool)\n\t})\n\tt.Run(\"should return error if connection to the database is not alive\", func(t *testing.T) {\n\t\ttestDB := new(MockedDB)\n\t\tc := connector.Connector{DB: testDB}\n\t\ttestDB.On(\"Ping\").Return(fmt.Errorf(\"network\"))\n\t\tpool, err := c.Pool()\n\t\trequire.Error(t, err, \"network\")\n\t\trequire.Nil(t, pool)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62035606/how-to-stub-method-called-in-another-method-in-same-struct",
    "body": "=== RUN   TestConnector_Pool\n=== RUN   TestConnector_Pool/should_verifies_connection_to_the_database_is_still_alive\nsuccess logic\n=== RUN   TestConnector_Pool/should_return_error_if_connection_to_the_database_is_not_alive\nerror handle logic\n--- PASS: TestConnector_Pool (0.00s)\n    --- PASS: TestConnector_Pool/should_verifies_connection_to_the_database_is_still_alive (0.00s)\n    --- PASS: TestConnector_Pool/should_return_error_if_connection_to_the_database_is_not_alive (0.00s)\nPASS\ncoverage: 100.0% of statements\nok      github.com/mrdulin/golang/src/stackoverflow/62035606    0.364s"
  },
  {
    "url": "https://stackoverflow.com/questions/61915917/why-is-goroutine-starving",
    "body": "# command-line-arguments\n\"\".main STEXT size=80 args=0x0 locals=0x18\n\t0x0000 00000 (preempt.go:7)\tTEXT\t\"\".main(SB), ABIInternal, $24-0\n\t0x0000 00000 (preempt.go:7)\tMOVQ\t(TLS), CX\n\t0x0009 00009 (preempt.go:7)\tCMPQ\tSP, 16(CX)\n\t0x000d 00013 (preempt.go:7)\tJLS\t73\n\t0x000f 00015 (preempt.go:7)\tSUBQ\t$24, SP\n\t0x0013 00019 (preempt.go:7)\tMOVQ\tBP, 16(SP)\n\t0x0018 00024 (preempt.go:7)\tLEAQ\t16(SP), BP\n\t0x001d 00029 (preempt.go:7)\tFUNCDATA\t$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n\t0x001d 00029 (preempt.go:7)\tFUNCDATA\t$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n\t0x001d 00029 (preempt.go:7)\tFUNCDATA\t$2, gclocals·9fb7f0986f647f17cb53dda1484e0f7a(SB)\n\t0x001d 00029 (preempt.go:8)\tPCDATA\t$0, $0\n\t0x001d 00029 (preempt.go:8)\tPCDATA\t$1, $0\n\t0x001d 00029 (preempt.go:8)\tMOVQ\t$1, (SP)\n\t0x0025 00037 (preempt.go:8)\tCALL\truntime.GOMAXPROCS(SB)\n\t0x002a 00042 (preempt.go:9)\tMOVL\t$0, (SP)\n\t0x0031 00049 (preempt.go:9)\tPCDATA\t$0, $1\n\t0x0031 00049 (preempt.go:9)\tLEAQ\t\"\".main.func1·f(SB), AX\n\t0x0038 00056 (preempt.go:9)\tPCDATA\t$0, $0\n\t0x0038 00056 (preempt.go:9)\tMOVQ\tAX, 8(SP)\n\t0x003d 00061 (preempt.go:9)\tCALL\truntime.newproc(SB)\n\t0x0042 00066 (preempt.go:13)\tCALL\t\"\".Test(SB)\n\t0x0047 00071 (preempt.go:13)\tJMP\t66\n\t0x0049 00073 (preempt.go:13)\tNOP\n\t0x0049 00073 (preempt.go:7)\tPCDATA\t$1, $-1\n\t0x0049 00073 (preempt.go:7)\tPCDATA\t$0, $-1\n\t0x0049 00073 (preempt.go:7)\tCALL\truntime.morestack_noctxt(SB)\n\t0x004e 00078 (preempt.go:7)\tJMP\t0\n<…>\n\"\".Test STEXT nosplit size=17 args=0x0 locals=0x0\n\t0x0000 00000 (preempt.go:17)\tTEXT\t\"\".Test(SB), NOSPLIT|ABIInternal, $0-0\n\t0x0000 00000 (preempt.go:17)\tFUNCDATA\t$0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n\t0x0000 00000 (preempt.go:17)\tFUNCDATA\t$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n\t0x0000 00000 (preempt.go:17)\tFUNCDATA\t$2, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n\t0x0000 00000 (preempt.go:17)\tPCDATA\t$0, $0\n\t0x0000 00000 (preempt.go:17)\tPCDATA\t$1, $0\n\t0x0000 00000 (preempt.go:17)\tMOVL\t$1, AX\n\t0x0005 00005 (preempt.go:20)\tJMP\t10\n\t0x0007 00007 (preempt.go:21)\tINCQ\tAX\n\t0x000a 00010 (preempt.go:22)\tCMPQ\tAX, $9\n\t0x000e 00014 (preempt.go:22)\tJNE\t7\n\t0x0010 00016 (<unknown line number>)\tPCDATA\t$0, $-2\n\t0x0010 00016 (<unknown line number>)\tPCDATA\t$1, $-2\n\t0x0010 00016 (<unknown line number>)\tRET\n<…>"
  },
  {
    "url": "https://stackoverflow.com/questions/61802731/how-to-sort-csv-data-based-on-date-column-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sort\"\n\t\"time\"\n)\ntype CSV [][]string\n// Determine if one CSV line at index i comes before the line at index j.\nfunc (data CSV) Less(i, j int) bool {\n\tdateColumnIndex := 0\n\tdate1 := data[i][dateColumnIndex]\n\tdate2 := data[j][dateColumnIndex]\n\ttimeT1, _ := time.Parse(\"01022006\", date1)\n\ttimeT2, _ := time.Parse(\"01022006\", date2)\n\treturn timeT1.Before(timeT2)\n}\n// Other functions required for sort.Sort.\nfunc (data CSV) Len() int {\n\treturn len(data)\n}\nfunc (data CSV) Swap(i, j int) {\n\tdata[i], data[j] = data[j], data[i]\n}\nfunc main() {\n\tdata := [][]string{\n\t\t[]string{\"05111985\", \"0.33\", \"0.34\", \"0.33\"},\n\t\t[]string{\"11051999\", \"1.60\", \"1.65\", \"1.56\"},\n\t\t[]string{\"12021986\", \"0.43\", \"0.43\", \"0.42\"},\n\t}\n    // Sort the data in place using the methods above.\n\tsort.Sort(CSV(data))\n\tfmt.Println(data)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61668117/go-colly-how-can-i-get-html-title-in-c-onresponse-so-i-can-fill-the-struct",
    "body": "fun  main(){\n....\n\twebpage := WebPage{} //Is this a right way to declare a mutable struct?\n    c.OnRequest(func(r *colly.Request) { // url\n\t\twebpage.Url = r.URL.String() // Is this the right way to mutate?\n\t})\n\tc.OnResponse(func(r *colly.Response) { //get body\n\t\tpageCount++\n\t\tlog.Println(fmt.Sprintf(\"%d  DONE Visiting : %s\", pageCount, webpage.Url))\n\t})\n\tc.OnHTML(\"head title\", func(e *colly.HTMLElement) { // Title\n\t\twebpage.Title = e.Text\n\t})\n\tc.OnHTML(\"html body\", func(e *colly.HTMLElement) { // Body / content\n\t\twebpage.Content = e.Text  // Can url title body be misrepresented in multithread scenario?\n\t})\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) { // href , callback\n\t\tlink := e.Attr(\"href\")\n\t\te.Request.Visit(link)\n\t})\n\tc.OnError(func(r *colly.Response, err error) { // Set error handler\n\t\tlog.Println(\"Request URL:\", r.Request.URL, \"failed with response:\", r, \"\\nError:\", err)\n\t})\n\tc.OnScraped(func(r *colly.Response) { // DONE\n\t\tenc := json.NewEncoder(os.Stdout)\n\t\tenc.SetIndent(\"\", \"  \")\n\t\tenc.Encode(webpage)\n\t})"
  },
  {
    "url": "https://stackoverflow.com/questions/61615219/load-test-dropwizard-endpoint",
    "body": "const (\n\tnumJobs    int = 5000000\n\tnumWorkers int = 150\n)\nfunc worker(id int, jobs <-chan int, results chan<- bool) {\n\tfor j := range jobs {\n\t\tfmt.Printf(\"Processing Job No : %v\\n\", j)\n\t\thttpclients.HitHelloWorldService()\n\t\tresults <- true\n\t}\n}\nfunc main() {\n\tfmt.Println(\"Hello !! Starting with go-client to benchmark dropwizard endpoints\")\n\tjobs := make(chan int, numJobs)\n\tresults := make(chan bool, numJobs)\n\tfor w := 1; w < numWorkers; w++ {\n\t\tgo worker(w, jobs, results)\n\t}\n\tfor j := 1; j <= numJobs; j++ {\n\t\tjobs <- j\n\t}\n\tclose(jobs)\n\tfor a := 1; a <= numJobs; a++ {\n\t\t<-results\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61536139/how-to-show-output-of-command-in-stdout-stderr-while-also-saving-the-output-into",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n)\nfunc main() {\n\tprout, pwout := io.Pipe()\n\tprerr, pwerr := io.Pipe()\n\tcmd := exec.Command(\"sh\", \"-c\", \"echo this is stdout; echo 1>&2 this is stderr\")\n\tcmd.Stdout = pwout\n\tcmd.Stderr = pwerr\n\ttout := io.TeeReader(prout, os.Stdout)\n\tterr := io.TeeReader(prerr, os.Stderr)\n\tif err := cmd.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tvar bout, berr bytes.Buffer\n\tgo func() {\n\t\tif _, err := io.Copy(&bout, tout); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\tgo func() {\n\t\tif _, err := io.Copy(&berr, terr); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n\tif err := cmd.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"buffered out %s\", bout.String())\n\tfmt.Printf(\"buffered err %s\", berr.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61473436/how-to-search-for-documents-in-mongodb-using-golang-mongodb-driver-where-the-val",
    "body": "// I'm not sure what is your struct, so I use bson.Raw for this example\n// but you can parse into your struct in the loop.\n\tresultQuery := make([]bson.Raw, 0)\n// you can use bson.M if you like,\n// filter := bson.M{\"key\": bson.M{\"$in\": MY_SLICE_OF_STRING}}\n\tfilter := bson.D{\n\t\t{\n\t\t\tKey: \"key\",\n\t\t\tValue: bson.E{\n\t\t\t\tKey:   \"$in\",\n\t\t\t\tValue: MY_SLICE_OF_STRING,\n\t\t\t},\n\t\t},\n\t}\n\tctx := context.background()\n\tcursor, err := collection.Find(ctx, filter)\n\tif err != nil {\n\t\t//Handle your error.\n\t}\n\tif err == nil {\n\t\t// you should put defer function to close your cursor,\n\t\tdefer func() {\n\t\t\tcursor.Close(ctx)\n\t\t}()\n\t\tfor cursor.Next(ctx) {\n\t\t\tresultQuery = append(resultQuery, cursor.Current)\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/61407070/is-it-possible-to-pass-a-slice-of-a-struct-as-an-interface-to-a-method",
    "body": "func (v1 *ApiV1) retrieve(tableName string, fieldName string, name string) ([]interface{}, int) {\n\t// create var to hold the http status\n\tvar httpStatus int = http.StatusOK\n\tvar result []interface{}\n\t// determine if a name has been passed\n\tif name == \"\" {\n\t\tv1.app.DB.Find(result)\n\t} else {\n\t\t// look for the name in the database\n\t\tv1.app.DB.Table(tableName).Where(fieldName+\" = ?\", name).Order(\"id DESC\").First(&result)\n\t\t// if the name cannot be found then set the status to 404\n\t\tif len(result) == 0 {\n\t\t\thttpStatus = http.StatusNotFound\n\t\t}\n\t}\n\treturn result, httpStatus\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61276832/convert-string-from-go-to-python-list",
    "body": "import metaffi # get metaffi-api package from PIP\n# load Go runtime plugin\nruntime = metaffi.metaffi_runtime.MetaFFIRuntime('go')\nruntime.load_runtime_plugin()\n# load module\nsplit_module = runtime.load_module('SplitStrings_MetaFFIGuest.so')\n# load function\n# define return type, you don't have to predefine the dimensions, but it can improve performance.\nret_type = [metaffi.metaffi_types.metaffi_type_info(metaffi.metaffi_types.MetaFFITypes.metaffi_string8_array_type, dims=1)]\n# define parameters type\nparams_type = [metaffi.metaffi_types.metaffi_type_info(metaffi.metaffi_types.MetaFFITypes.metaffi_string8_type)]\n\n# load the function\nsplit_strings_by_comma = split_module.load_entity('callable=SplitStringByComma', params_type, ret_type)\n# use it\nres = split_strings_by_comma('one,two,three')"
  },
  {
    "url": "https://stackoverflow.com/questions/61197332/how-to-set-a-timeout-to-a-rabbitmq-rpc-request",
    "body": "func caller() {\n    // the caller can create a context with the desired timeout\n\tctx, cancel := context.WithTimeout(context.Background(), 2 * time.Second)\n\tdefer cancel()\n    doRPC(ctx)\n}\nfunc doRPC(ctx context.Context) ([]byte, error) {\n    // ...RPC setup code\n    for {\n\t\tselect {\n\t\tcase msg := <-msgs: // msgs is of type <-chan amqp.Delivery\n\t\t\tif msg.CorrelationId == correlationID {\n\t\t\t\treturn msg.Body, nil\n\t\t\t}\n\t\tcase <-ctx.Done():\n\t\t\treturn nil, errors.New(\"waiting for RPC response timed out or was cancelled\")\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61092035/how-to-unmarhal-json-into-dynamodb-attributevalue",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-sdk-go/service/dynamodb\"\n)\nfunc main() {\n\tdata := []byte(`[\n        {\n            \"M\": {\n                \"Capacity\": {\n                    \"S\": \"7\"\n                },\n                \"Energy\": {\n                    \"S\": \"A+\"\n                }\n            }\n        },\n        {\n            \"M\": {\n                \"Capacity\": {\n                    \"S\": \"7\"\n                },\n                \"Energy\": {\n                    \"S\": \"A++\"\n                }\n            }\n        },\n        {\n            \"M\": {\n                \"Capacity\": {\n                    \"S\": \"7\"\n                },\n                \"Energy\": {\n                    \"S\": \"A+++\"\n                }\n            }\n        }\n    ]`)\n\td := []map[string]map[string]*dynamodb.AttributeValue{}\n\tjson.Unmarshal(data, &d)\n\tfor _, mp := range d {\n        expressionAttributeValues := mp[\"M\"]\n\t\t// you can use expressionAttributeValues as ExpressionAttributeValues in UpdateItemInput to UpdateItem\n\t\tcapacity := expressionAttributeValues[\"Capacity\"]\n\t\tenergy := expressionAttributeValues[\"Energy\"]\n\t\tfmt.Printf(\"%+v\", capacity)\n\t\tfmt.Printf(\"%+v\", energy)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61022482/is-it-possible-to-set-to-map-when-key-contains-dot",
    "body": "updateItemInput := dynamodb.UpdateItemInput{\n\t\tTableName: aws.String(tableName),\n\t\tKey: map[string]*dynamodb.AttributeValue{\n\t\t\t\"pk\": {\n\t\t\t\tS: aws.String(\"test\"),\n\t\t\t},\n\t\t},\n\t\tUpdateExpression:          aws.String(\"SET #0.#1 = :0\"),\n\t\tExpressionAttributeNames:  map[string]*string {\n\t\t\t\"#0\": aws.String(\"mymap\"),\n\t\t\t\"#1\": aws.String(\"vitaly.zdanevich\"),\n\t\t  },\n\t\tExpressionAttributeValues: map[string]*dynamodb.AttributeValue{\n\t\t\t\":0\": {\n\t\t\t\tBOOL: aws.Bool(true),\n\t\t\t},\n\t\t},\n\t}\n\tfmt.Printf(\"%#v\\n\", updateItemInput)\n\tdynamodbClient.UpdateItem(&updateItemInput)"
  },
  {
    "url": "https://stackoverflow.com/questions/60260248/how-can-i-get-a-c-variable-from-cgo",
    "body": "package main\n/*\n#cgo LDFLAGS: -lgdi32\n#include <stdio.h>\n#include <stdlib.h>\n#include <malloc.h>\n#include <windows.h>\nHDC *hdcArr;\nint count;\nBOOL CALLBACK EnumProc(HMONITOR hMonitor, HDC hdcMonitor, LPRECT lprcMonitor, LPARAM dwData) {\n\tint i;\n    for (i = 0; i < (_msize(hdcArr) / sizeof(HDC)); i++) {\n        if (hdcArr[i] == NULL) {\n            hdcArr[i] = CreateCompatibleDC(hdcMonitor);\n            break;\n        }\n    }\n    return TRUE;\n}\nvoid Init() {\n    count = GetSystemMetrics(SM_CMONITORS);\n    hdcArr = (HDC*)malloc(sizeof(HDC) * count);\n    memset(hdcArr, 0, sizeof(HDC) * count);\n}\n*/\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"unsafe\"\n\t\"github.com/JamesHovious/w32\"\n)\nfunc main() {\n\tC.Init()\n\thdc := w32.GetDC(0)\n\tw32.EnumDisplayMonitors(hdc, nil, reflect.ValueOf(C.EnumProc).Pointer(), 0)\n\tw32.ReleaseDC(0, hdc)\n\tt := unsafe.Slice(C.hdcArr, C.count)\n\tfor _, dc := range t {\n\t\tcx := w32.GetDeviceCaps(dc, w32.HORZRES)\n\t\tfmt.Println(cx)\n\t\tw32.DeleteDC(dc)\n\t}\n\tC.free(unsafe.Pointer(C.hdcArr))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60072372/filtering-values-out-of-a-bson-m-in-golang",
    "body": "[\n    map[\n        _id:ObjectIdHex(\"4de39d42ke9fc601db635618\")\n        host:test.server.lan\n        installed:\n        [\n            map[\n                arch:all\n                homepage:\n                name:adduser\n                status:ii\n                vendor:\n                version:3.118\n            ]\n            map[\n                arch:all\n                homepage:\n                name:adwaita-icon-theme\n                status:ii\n                vendor:\n                version:3.30.1-1\n            ]\n            map[\n                arch:all\n                homepage:\n                name:ampua-watchdog\n                status:ii\n                vendor:\n                version:2.2.2~ui10\n            ]\n            ..."
  },
  {
    "url": "https://stackoverflow.com/questions/60072372/filtering-values-out-of-a-bson-m-in-golang",
    "body": "[\n    {\n        \"_id\":ObjectIdHex(\"4de39d42ke9fc601db635618\"),\n        \"host\":\"test.server.lan\",\n        \"installed\":\n        [\n            {\n                \"arch\":\"all\",\n                \"homepage\":\"\",\n                \"name\":\"adduser\",\n                \"status\":\"ii\",\n                \"vendor\":\"\",\n                \"version\":\"3.118\"\n            },\n            {\n                \"arch\":\"all\",\n                \"homepage\":\"\",\n                \"name\":\"adwaita-icon-theme\",\n                \"status\":\"ii\",\n                \"vendor\":\"\",\n                \"version\":\"3.30.1-1\"\n            },\n            {\n                \"arch\":\"all\",\n                \"homepage\":\"\",\n                \"name\":\"ampua-watchdog\",\n                \"status\":\"ii\",\n                \"vendor\":\"\",\n                \"version\":\"2.2.2~ui10\"\n            },\n            ..."
  },
  {
    "url": "https://stackoverflow.com/questions/59989003/golang-icmp-packet-sending",
    "body": "// SerializeTo writes the serialized form of this layer into the\n// SerializationBuffer, implementing gopacket.SerializableLayer.\n// See the docs for gopacket.SerializableLayer for more info.\nfunc (i *ICMPv4) SerializeTo(b gopacket.SerializeBuffer, opts gopacket.SerializeOptions) error {\n\tbytes, err := b.PrependBytes(len(i.Payload)+8)//8)\n\tif err != nil {\n\t\treturn err\n\t}\n\ti.TypeCode.SerializeTo(bytes)\n\tbinary.BigEndian.PutUint16(bytes[4:], i.Id)\n\tbinary.BigEndian.PutUint16(bytes[6:], i.Seq)\n\tstartIndex := 8\n\tfor _, element := range i.Payload {\n\t\tbytes[startIndex] = byte(uint16(element))\n\t\tstartIndex+= 1\n\t}\n\tif opts.ComputeChecksums {\n\t\tbytes[2] = 0\n\t\tbytes[3] = 0\n\t\ti.Checksum = tcpipChecksum(b.Bytes(), 0)\n\t}\n\tbinary.BigEndian.PutUint16(bytes[2:], i.Checksum)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59796019/how-to-parse-yaml-file-and-create-child-objects-from-parent-struct-inheritance",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"gopkg.in/yaml.v3\"\n)\ntype CarShop struct {\n\tCars []Car\n}\ntype Car interface {\n\tID() string\n}\ntype BMW struct {\n\tIDVal string `yaml:\"id\"`\n\tA     string `yaml:\"a\"`\n}\nfunc (bmw *BMW) ID() string {\n\treturn bmw.IDVal\n}\ntype Mercedes struct {\n\tIDVal string `yaml:\"id\"`\n\tB     string `yaml:\"b\"`\n}\nfunc (merc *Mercedes) ID() string {\n\treturn merc.IDVal\n}\ntype tmpCarShop []map[string]yaml.Node\nfunc (cs *CarShop) UnmarshalYAML(value *yaml.Node) error {\n\tvar tmp tmpCarShop\n\tif err := value.Decode(&tmp); err != nil {\n\t\treturn err\n\t}\n\tcars := make([]Car, 0, len(tmp))\n\tfor i := range tmp {\n\t\tfor kind, raw := range tmp[i] {\n\t\t\tswitch kind {\n\t\t\tcase \"Mercedes\":\n\t\t\t\tm := &Mercedes{}\n\t\t\t\tif err := raw.Decode(m); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tcars = append(cars, m)\n\t\t\tcase \"BMW\":\n\t\t\t\tb := &BMW{}\n\t\t\t\tif err := raw.Decode(b); err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tcars = append(cars, b)\n\t\t\tdefault:\n\t\t\t\treturn errors.New(\"unknown car type: \" + kind)\n\t\t\t}\n\t\t}\n\t}\n\tcs.Cars = cars\n\treturn nil\n}\nfunc main() {\n\tinput := []byte(`\n- BMW:\n    id: \"BMW\"\n    a: \"a\"\n- Mercedes:\n    id: \"Mercedes\"\n    b: \"b\"\n`)\n\tvar shop CarShop\n\tif err := yaml.Unmarshal(input, &shop); err != nil {\n\t\tpanic(err)\n\t}\n\tfor i := range shop.Cars {\n\t\tfmt.Printf(\"ID: %s\\n\", shop.Cars[i].ID())\n\t\tswitch c := shop.Cars[i].(type) {\n\t\tcase *Mercedes:\n\t\t\tfmt.Printf(\"Type: Mercedes\\nA: %s\\n\", c.B)\n\t\tcase *BMW:\n\t\t\tfmt.Printf(\"Type: BMW\\nB: %s\\n\", c.A)\n\t\t}\n\t\tfmt.Println(\"---\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59496488/why-i-use-golang-module-and-import-a-module-that-is-not-opted-in-module-but-go",
    "body": "func (r *codeRepo) legacyGoMod(rev, dir string) []byte {\n\t// We used to try to build a go.mod reflecting pre-existing\n\t// package management metadata files, but the conversion\n\t// was inherently imperfect (because those files don't have\n\t// exactly the same semantics as go.mod) and, when done\n\t// for dependencies in the middle of a build, impossible to\n\t// correct. So we stopped.\n\t// Return a fake go.mod that simply declares the module path.\n\treturn []byte(fmt.Sprintf(\"module %s\\n\", modfile.AutoQuote(r.modPath)))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59338416/unmarshal-a-nested-json-without-a-key",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"encoding/json\"\n)\nvar data = []byte(`{\n    \"error\": [],\n    \"result\": {\n        \"LINKUSD\": {\n            \"asks\": [\n                [\"2.049720\", \"183.556\", 1576323009],\n                [\"2.049750\", \"555.125\", 1576323009],\n                [\"2.049760\", \"393.580\", 1576323008],\n                [\"2.049980\", \"206.514\", 1576322995]\n            ],\n            \"bids\": [\n                [\"2.043800\", \"20.691\", 1576322350],\n                [\"2.039080\", \"755.396\", 1576323007],\n                [\"2.036960\", \"214.621\", 1576323006],\n                [\"2.036930\", \"700.792\", 1576322987]\n            ]\n        }\n    }\n}`)\ntype Response struct {\n\tError  []interface{}          `json:\"error\"`\n\tResult map[string]Order `json:\"result\"`\n}\ntype Order struct {\n\tAsks []BitfinexOrder `json:\"asks\"`\n\tBids []BitfinexOrder `json:\"bids\"`\n}\ntype BitfinexOrder struct {\n\tPrice     string\n\tVolume    string\n\tTimestamp time.Time\n}\n// UnmarshalJSON decode a BifinexOrder.\nfunc (b *BitfinexOrder) UnmarshalJSON(data []byte) error {\n\tvar packedData []json.Number\n\terr := json.Unmarshal(data, &packedData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tb.Price = packedData[0].String()\n\tb.Volume = packedData[1].String()\n\tt, err := packedData[2].Int64()\n\tif err != nil {\n\t\treturn err\n\t}\n\tb.Timestamp = time.Unix(t, 0)\n\treturn nil\n}\nfunc main() {\n\tres := &Response{}\n\tif err := json.Unmarshal(data, res); err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor key, value := range res.Result {\n\t\tfmt.Println(key)\n\t\tfor i, ask := range value.Asks {\n\t\t\tfmt.Printf(\"Asks[%d] = %#v\\n\", i, ask)\n\t\t}\n\t\tfor i, bid := range value.Bids {\n\t\t\tfmt.Printf(\"Bids[%d] = %#v\\n\", i, bid)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59301807/marshal-json-field-in-database-to-struct-using-pop",
    "body": "// Tree tall tree with many fruit\ntype Tree struct {\n    ID uuid.UUID `json:\"id\" db:\"id\"`\n    Name string `json:\"name\" db:\"name\"`\n    Fruit []Fruit `json:\"fruit\" db:\"fruit\"`\n}\n// Fruit fruit found on a tree\ntype Fruit struct {\n    ID int `json:\"id\"`\n    Name string `json:\"name\"`\n}\n// Creates a splice of Fruit\ntype Fruits []Fruit\n// Value implements the driver.Valuer interface\nfunc (f Fruits) Value() (driver.Value, error) {\n    return json.Marshal(of)\n}\n// Scan implements the sql.Scanner interface\nfunc (f * Fruits) Scan(value interface{}) error {\n    var data = []byte(value.([]uint8))\n    return json.Unmarshal(data, &f)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59009805/appending-nested-struct-from-mongo-collection-cursor",
    "body": "func GetInitiativesFromDB(d *database.MongoDB, cid string) (response InitiativeResponse, err error) {\n    filter := bson.M{\"cid\": cid}\n    cur, err := d.Database.Collection(INITIATIVECOLLECTION).Find(context.Background(), filter, options.Find())\n    fmt.Printf(\"%#v\", cur)\n    if err != nil {\n        return response, errors.ErrorResponse{\"No initiatives were found\", 404}\n    }\n    for cur.Next(context.Background()) {\n        var initiative Initiative\n        err := cur.Decode(&initiative)\n        if err != nil {\n            return response, errors.ErrorResponse{\"No initiatives were found\", 404}\n        }\n        response.Payload = append(response.Payload, initiative)\n        fmt.Printf(\"%#v\", response.Payload)\n    }\n    if err := cur.Err(); err != nil {\n        return response, errors.ErrorResponse{\"No initiatives were found\", 404}\n    }\n    _ = cur.Close(context.Background())\n    return response, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58869372/encoding-executable-in-go-and-decoding-in-javascript-is-not-working",
    "body": "function b64ToUint6(nChr) {\n  return nChr > 64 && nChr < 91\n    ? nChr - 65\n    : nChr > 96 && nChr < 123\n    ? nChr - 71\n    : nChr > 47 && nChr < 58\n    ? nChr + 4\n    : nChr === 43\n    ? 62\n    : nChr === 47\n    ? 63\n    : 0;\n}\nfunction base64DecToArr(sBase64, nBlockSize) {\n  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\\+\\/]/g, \"\"),\n    nInLen = sB64Enc.length,\n    nOutLen = nBlockSize\n      ? Math.ceil(((nInLen * 3 + 1) >>> 2) / nBlockSize) * nBlockSize\n      : (nInLen * 3 + 1) >>> 2,\n    aBytes = new Uint8Array(nOutLen);\n  for (\n    var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0;\n    nInIdx < nInLen;\n    nInIdx++\n  ) {\n    nMod4 = nInIdx & 3;\n    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << (18 - 6 * nMod4);\n    if (nMod4 === 3 || nInLen - nInIdx === 1) {\n      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n        aBytes[nOutIdx] = (nUint24 >>> ((16 >>> nMod3) & 24)) & 255;\n      }\n      nUint24 = 0;\n    }\n  }\n  return aBytes;\n}\nlet decodedBytes = base64DecToArr(\"bytes to decode\");\nfs.writeFileSync(\n    \"/destination/to/save/file\",\n    decodedBytes\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/58778683/lookup-a-tag-by-field-symbol-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\nfunc main() {\n\ttype MyStruct struct {\n\t\tFoo string `tag:\"val\"`\n\t}\n\tentity := MyStruct{}\n\ttagVal := getTag(&entity, &entity.Foo)\n\tfmt.Println(tagVal) // val\n}\nfunc getTag(structPtr, fieldPtr interface{}) string {\n\tsf, ok := structFieldByValPtr(structPtr, fieldPtr)\n\tif !ok {\n\t\treturn \"\"\n\t}\n\treturn sf.Tag.Get(\"tag\")\n}\nfunc structFieldByValPtr(structPtr, fieldPtr interface{}) (reflect.StructField, bool) {\n\tv := reflect.Indirect(reflect.ValueOf(structPtr))\n\tt := v.Type()\n\tfor i := 0; i < v.NumField(); i++ {\n\t\tfv := v.Field(i)\n\t\tft := t.Field(i)\n\t\tif fv.Addr().Interface() == fieldPtr {\n\t\t\treturn ft, true\n\t\t}\n\t\tif ft.Anonymous {\n\t\t\tsf, ok := structFieldByValPtr(fv.Addr().Interface(), fieldPtr)\n\t\t\tif ok {\n\t\t\t\treturn sf, true\n\t\t\t}\n\t\t}\n\t}\n\treturn reflect.StructField{}, false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58465672/difficulty-accessing-nested-c-union-member-in-go",
    "body": "type bigStruct struct {\n\tinstance unsafe.Pointer\n}\nfunc (bs *bigStruct) fa() int {\n\treturn int(*(*C.int)(bs.instance))\n}\nfunc (bs *bigStruct) memberToAccess() uint32 {\n\t// C.sizeof_int refers to sizeof(enum_x)\n\treturn uint32(*(*C.uint32_t)(unsafe.Pointer(uintptr(bs.instance) + C.sizeof_int)))\n}\nfunc (bs *bigStruct) an() *C.smallStruct_t {\n\treturn (*C.smallStruct_t)(unsafe.Pointer(uintptr(bs.instance) + C.sizeof_int))\n}\nfunc (bs *bigStruct) an_u() []byte {\n\t// cgo having same thought about and takes smallStruct_t.u as array\n\treturn (*C.smallStruct_t)(unsafe.Pointer(uintptr(bs.instance) + C.sizeof_int)).u[:]\n}\nfunc (bs *bigStruct) next_field_after_un_t() *Type {\n\treturn (*Type)(unsafe.Pointer(uintptr(bs.instance) + C.sizeof_int + C.sizeof_smallStruct_t))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58143555/how-to-mock-cursor-with-mongo-go-driver",
    "body": "type MongoCollection interface {\n\tFind(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (MongoCursor, error)\n\tFindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) MongoDecoder\n    Aggregate(ctx context.Context, pipeline interface{}, opts ...*options.AggregateOptions) (MongoCursor, error)\n}\ntype MongoDecoder interface {\n\tDecodeBytes() (bson.Raw, error)\n\tDecode(val interface{}) error\n\tErr() error\n}\ntype MongoCursor interface {\n\tDecode(val interface{}) error\n\tErr() error\n\tNext(ctx context.Context) bool\n\tClose(ctx context.Context) error\n\tID() int64\n\tCurrent() bson.Raw\n}\ntype mongoCursor struct {\n\tmongo.Cursor\n}\nfunc (m *mongoCursor) Current() bson.Raw {\n\treturn m.Cursor.Current\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57725309/embed-go-struct-into-another-struct-in-gorm",
    "body": "import (\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n\t\"strings\"\n)\n// Value converts RequestParams to a map\nfunc (reqParams RequestParams) Value() (driver.Value, error) {\n\treqMap, err := reqParams.ToMap()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn reqMap.ForceJSON(), nil\n}\n// Scan converts value to RequestParams\nfunc (reqParams *RequestParams) Scan(value interface{}) error {\n\t// set empty struct by default\n\t*reqParams = RequestParams{}\n\tif value == nil {\n\t\treturn nil\n\t}\n\tif s, ok := value.([]byte); ok {\n\t\td := json.NewDecoder(strings.NewReader(string(s)))\n\t\td.UseNumber()\n\t\trp := &RequestParams{}\n\t\tif err := d.Decode(rp); err == nil {\n\t\t\t*reqParams = *rp\n\t\t}\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57645059/how-to-pass-struct-type-to-module-functions",
    "body": "package main\nimport \"... .../code/types\"\nfunc handlerTest(w http.ResponseWriter, r *http.Request) {\n    log.Println(\"INFO: /test was requested...\")\n    dbapi.Test(&AppConfig)\n}\nfunc main() {\n    http.HandleFunc(\"/test\", handlerTest)\n    AppConfig = ReadConfig()\n    log.Fatal(http.ListenAndServe(AppConfig.ApiPort, nil))\n}\nvar AppConfig = types.Configuration{}\nfunc ReadConfig() types.Configuration {\n    err := gonfig.GetConf(\"./config.development.json\", &AppConfig)\n    if err != nil {\n        fmt.Println(\"ERROR: Config konnte nicht geladen werden: \",     err.Error())\n    }\n    return AppConfig\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56725750/is-there-any-way-to-skip-go-build-if-the-binary-already-the-latest-build",
    "body": "#!/usr/bin/env bash\n# speedup go build/run by reusing local build artifact when nothing has changed\n#\n# usage: go-fast.sh <regular go run args>\n#\n# - speed up `go build` by only building when files have changed\n# - speed up `go run` by using pre-built binary\n# somehow stored and fresh strings can't be compared unless we encode them\nbash_encode () {\n  esc=${1@Q}\n  echo \"${esc:2:-1}\"\n}\ncache=/tmp/go-fast$(pwd | tr '/' '-')-build\ncurrent=$(find pkg cmd go.mod go.sum -type f -print0 | sort -z | xargs -0 md5sum | md5sum)\nprev=$(cat $cache)\nif [[ $(bash_encode $current) != $(bash_encode $prev) ]]; then\n  echo \"go build -o main cmd/main.go\"\n  go build -o main cmd/main.go\n  echo $current > $cache\nfi\nexec ./main \"$@\""
  },
  {
    "url": "https://stackoverflow.com/questions/56029508/listenandservertls-keeps-failing-with-error-failed-to-find-any-pem-data-in-cert",
    "body": "var srv http.Server\nsrv.Handler = yourHandler\nsrv.Addr = \":443\"\n// Load cert files\nchainBytes, err := ioutil.ReadFile(\"gd_bundle-g2-g1.crt\") // GoDaddy chain\nif err != nil {\n\tlog.Fatal(err)\n}\ncertBytes, err := ioutil.ReadFile(\"server.crt\") // Your server cert\nif err != nil {\n\tlog.Fatal(err)\n}\nkeyBytes, err := ioutil.ReadFile(\"server.key\") // Your server key\nif err != nil {\n\tlog.Fatal(err)\n}\n// Concatenate chain and cert\nb := bytes.NewBuffer(certBytes)\nb.Write([]byte(\"\\n\"))\nb.Write(chainBytes)\n// Setup TLS\ncert, err := tls.X509KeyPair(b.Bytes(), keyBytes)\nif err != nil {\n\tlog.Fatal(err)\n}\ncfg := &tls.Config{\n\tCertificates: []tls.Certificate{cert},\n}\nsrv.TLSConfig = cfg\n// Start server\nerr = srv.ListenAndServeTLS(\"\", \"\")\nif err != nil {\n\tlog.Fatal(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55718603/golang-docker-library-mounting-host-directory-volumes",
    "body": "2019/04/16 20:53:18 Creating client\n2019/04/16 20:53:18              Image: ubuntu:18.04\n2019/04/16 20:53:18          Host Path: /home/user/go/src/test\n2019/04/16 20:53:18     Container Path: /host_files\n2019/04/16 20:53:18 Creating container\n2019/04/16 20:53:18 Starting container\n2019/04/16 20:53:19 Waiting for container to exit\n2019/04/16 20:53:19 Container exited normally!\n2019/04/16 20:53:19 Should be done!\n2019/04/16 20:53:19 Container output:\ntotal XXXX\ndrwxr-xr-x  7 1000 1000     4096 Apr 17 03:51 .\ndrwxr-xr-x 34 root root     4096 Apr 17 03:53 ..\n-rw-r--r--  1 1000 1000    10390 Apr 16 12:16 Gopkg.lock\n-rw-r--r--  1 1000 1000     1021 Apr 16 12:16 Gopkg.toml\n-rwxr-xr-x  1 1000 1000 12433827 Apr 17 03:53 container\n-rw-r--r--  1 1000 1000     2421 Apr 17 03:51 container.go\n2019/04/16 20:53:19 Cleaning up"
  },
  {
    "url": "https://stackoverflow.com/questions/55641752/recording-and-seeking-to-csv-file-positions-in-golang",
    "body": "//set up some vars and readers to record position and length of each line\ntype Record struct {\n    Pos int64\n    Len int\n}\nrecords := make([]Record,1)\nvar buf bytes.Buffer\nvar pos int64\nfile,_ := Open(\"stuff.csv\")\ntr := io.TeeReader(file, &buf)\ncr := csv.NewReader(tr)\n//read first row and get things started\ndata,_ := cr.Read()\ndostuff(data)\n//length of current row determines position of next\nlineBytes,_ := buf.ReadBytes('\\n')\nlength := len(lineBytes)\npos += int64(length)\nrecords[0].Len = length\nrecords = append(records, Record{ Pos: pos })\nfor i:=1;;i++ {\n    //read csv data\n    data,err = c.Read()\n    if err != nil {break}\n    dostuff(data)\n    //record length and position\n    lineBytes,_ = buf.ReadBytes('\\n')\n    lenth = len(lineBytes)\n    pos += int64(length)\n    records[i].Len = length\n    records = append(records, Record{ Pos: pos })\n}\n//prepare individual line reader\nline := make([]byte,1000)\nlineReader := bytes.NewReader(line)\n//read random lines from file\nfor {\n    i := someLineNumber()\n    //use original file reader to fill byte slice with line\n    file.ReadAt(line[:records[i].Len], records[i].Pos)\n    //need new lineParser to start at beginning every time\n    lineReader.Seek(0,0)\n    lineParser := csv.NewReader(lineReader)\n    data,_ = lineParser.Read()\n    doStuff(data)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55340599/how-to-handle-buffered-read-write-streams-to-peers-in-golang-using-libp2p",
    "body": "func sendMsg(rw *bufio.ReadWriter, id int64, content []byte) error {\n        // allocate our slice of bytes with the correct size 4 + size of the message + 1\n        msg := make([]byte, 4 + len(content) + 1)\n        // write id\n        binary.LittleEndian.PutUint64(msg, uint64(id))\n\n        // add content to msg\n        copy(msg[13:], content)\n\n        // add new line at the end\n        msg[len(msg)-1] = '\\n'\n\n        // write msg to stream\n\t\t_, err = rw.Write(msg)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error writing to buffer\")\n\t\t\treturn err\n\t\t}\n\t\terr = rw.Flush()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error flushing buffer\")\n\t\t\treturn err\n\t\t}\n        return nil\n}\nfunc readMsg(rw *bufio.ReadWriter) {\n\tfor {\n        // read bytes until new line\n\t\tmsg, err := rw.ReadBytes('\\n')\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error reading from buffer\")\n\t\t\tcontinue\n\t\t}\n        // get the id\n        id := int64(binary.LittleEndian.Uint64(msg[0:8]))\n        // get the content, last index is len(msg)-1 to remove the new line char\n        content := string(msg[8:len(msg)-1])\n\t\tif content != \"\" {\n            // we print [message ID] content\n\t\t\tfmt.Printf(\"[%d] %s\", id, content)\n\t\t}\n\n        // here you could parse your message\n        // and prepare a response\n        response, err := prepareResponse(content)\n        if err != nil {\n            fmt.Println(\"Err while preparing response: \", err)\n            continue\n        }\n\n        if err := s.sendMsg(rw, id, response); err != nil {\n            fmt.Println(\"Err while sending response: \", err)\n            continue\n        }\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54971678/parsing-a-nested-json-file",
    "body": "func main() {\n\ts := `{\n\t\t\"394885\":\n\t\t{\n\t\t\t\"record\":\n\t\t\t{\n\t\t\t\t\"student_name\": \"Daryl Jones\",\n\t\t\t\t\"student_number\": 123884,\n\t\t\t\t\"student_dob\": \"12/10/1982\",\n\t\t\t\t\"student_email\": \"djones@school.ac.uk\"\n\t\t\t}\n\t\t}\n\t}`\n\tdoc, err := jsonquery.Parse(strings.NewReader(s))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tnodes := jsonquery.Find(doc, \"*\")\n\tfor _, n := range nodes {\n\t\tfmt.Printf(\"id: %s \\n\", n.Data)\n\t\tname := jsonquery.FindOne(n, \"//student_name\") // Find student name node\n\t\tfmt.Printf(\"student name: %s\\n\", name.InnerText())\n\t\tnumber := jsonquery.FindOne(n, \"//student_number\") // Find node for student number\n\t\tfmt.Printf(\"student number: %s\\n\", number.InnerText())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54448994/graphql-go-define-field-type-as-object",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/graphql-go/graphql\"\n)\ntype region struct {\n\tID   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\ntype user struct {\n\tID     string `json:\"id\"`\n\tName   string `json:\"name\"`\n\tRegion region `json:\"region\"`\n}\nvar aRegion = region{ID: 34, Name: \"San jose\"}\nvar aUser = user{ID: \"34\", Name: \"something\", Region: aRegion}\nvar regionType = graphql.NewObject(graphql.ObjectConfig{\n\tName: \"Region\",\n\tFields: graphql.Fields{\n\t\t\"id\":   &graphql.Field{Type: graphql.Int},\n\t\t\"name\": &graphql.Field{Type: graphql.String},\n\t},\n})\nvar userType = graphql.NewObject(graphql.ObjectConfig{\n\tName: \"User\",\n\tFields: graphql.Fields{\n\t\t\"id\":   &graphql.Field{Type: graphql.String},\n\t\t\"name\": &graphql.Field{Type: graphql.String},\n\t\t\"region\": &graphql.Field{\n\t\t\tType: regionType,\n\t\t\tResolve: func(p graphql.ResolveParams) (interface{}, error) {\n\t\t\t\tsource, ok := p.Source.(user)\n\t\t\t\tfmt.Printf(\"%#v\\n\", source)\n\t\t\t\tfmt.Println(\"ok:\", ok)\n\t\t\t\treturn source.Region, nil\n\t\t\t},\n\t\t},\n\t},\n})\nvar queryType = graphql.NewObject(graphql.ObjectConfig{\n\tName: \"Query\",\n\tFields: graphql.Fields{\n\t\t\"user\": &graphql.Field{\n\t\t\tType: userType,\n\t\t\tResolve: func(p graphql.ResolveParams) (interface{}, error) {\n\t\t\t\treturn aUser, nil\n\t\t\t},\n\t\t},\n\t},\n})\nfunc executeQuery(query string, schema graphql.Schema) *graphql.Result {\n\tresult := graphql.Do(graphql.Params{\n\t\tSchema:        schema,\n\t\tRequestString: query,\n\t})\n\tif len(result.Errors) > 0 {\n\t\tfmt.Printf(\"wrong result, unexpected errors: %v\", result.Errors)\n\t}\n\treturn result\n}\nfunc main() {\n\tvar schema, _ = graphql.NewSchema(graphql.SchemaConfig{\n\t\tQuery: queryType,\n\t})\n\thttp.HandleFunc(\"/graphql\", func(w http.ResponseWriter, r *http.Request) {\n\t\tresult := executeQuery(r.URL.Query().Get(\"query\"), schema)\n\t\tjson.NewEncoder(w).Encode(result)\n\t})\n\tfmt.Println(\"Now server is running on port 8080\")\n\tfmt.Println(\"Access the web app via browser at 'http://localhost:8080'\")\n\thttp.ListenAndServe(\":8080\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54403243/how-to-deploy-ethereum-smart-contracts-in-go-sdk",
    "body": "// NewSimulatedBackend creates a new binding backend using a simulated blockchain\n// for testing purposes.\nfunc NewSimulatedBackend(alloc core.GenesisAlloc, gasLimit uint64) *SimulatedBackend {\n\tdatabase := rawdb.NewMemoryDatabase()\n\tgenesis := core.Genesis{Config: params.AllEthashProtocolChanges, GasLimit: gasLimit, Alloc: alloc}\n\tgenesis.MustCommit(database)\n\tblockchain, _ := core.NewBlockChain(database, nil, genesis.Config, ethash.NewFaker(), vm.Config{}, nil)\n\tbackend := &SimulatedBackend{\n\t\tdatabase:   database,\n\t\tblockchain: blockchain,\n\t\tconfig:     genesis.Config,\n\t\tevents:     filters.NewEventSystem(new(event.TypeMux), &filterBackend{database, blockchain}, false),\n\t}\n\tbackend.rollback()\n\treturn backend\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54163963/upload-data-to-table-without-waiting-for-streaming-buffer-to-flush",
    "body": "var lines []string\nfor _, v := range rows {\n\tjson, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed generate json %v, %+v\", err, v)\n\t}\n\tlines = append(lines, string(json))\n}\ndataString := strings.Join(lines, \"\\n\")\nrs := bigquery.NewReaderSource(strings.NewReader(dataString))\nrs.FileConfig.SourceFormat = bigquery.JSON\nrs.FileConfig.Schema = schema\nloader := dataset.Table(t2Name).LoaderFrom(rs)\nloader.CreateDisposition = bigquery.CreateIfNeeded\nloader.WriteDisposition = bigquery.WriteTruncate\njob, err := loader.Run(ctx)\nif err != nil {\n\treturn fmt.Errorf(\"failed to start load job %v\", err)\n}\n_, err := job.Wait(ctx)\nif err != nil {\n\treturn fmt.Errorf(\"load job failed %v\", err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/53397369/fastest-way-search-ip-in-large-ip-subnet-list-on-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/seancfoley/ipaddress-go/ipaddr\"\n)\nfunc main() {\n\taddrStrs := []string{\n\t\t\"35.132.199.128/27\", \"8.44.144.248/32\", \"87.117.185.193\", \"45.23.45.45\",\n\t}\n\ttrie := ipaddr.AddressTrie{}\n\tfor _, addrStr := range addrStrs {\n\t\taddr := ipaddr.NewIPAddressString(addrStr).GetAddress().ToAddressBase()\n\t\ttrie.Add(addr)\n\t}\n\tfmt.Println(\"The trie is\", trie)\n\taddrSearchStrs := []string{\n\t\t\"35.132.199.143\", \"8.44.144.248\", \"45.23.45.45\", \"127.0.0.1\",\n\t}\n\tfor _, addrStr := range addrSearchStrs {\n\t\taddr := ipaddr.NewIPAddressString(addrStr).GetAddress().ToAddressBase()\n\t\ttriePath := trie.ElementsContaining(addr)\n\t\tif triePath.Count() > 0 {\n\t\t\tfmt.Println(\"The blocks and addresses containing\", addr, \"are\",\n\t\t\ttriePath)\n\t\t} else {\n\t\t\tfmt.Println(\"No blocks nor addresses contain\", addr)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/50589703/does-the-kubernetes-client-go-library-contain-a-function-for-validating-json-yam",
    "body": "#!/bin/sh\nset -euo pipefail\nVERSION=${1#\"v\"}\nif [ -z \"$VERSION\" ]; then\n    echo \"Must specify version!\"\n    exit 1\nfi\nMODS=($(\n    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod |\n    sed -n 's|.*k8s.io/\\(.*\\) => ./staging/src/k8s.io/.*|k8s.io/\\1|p'\n))\nfor MOD in \"${MODS[@]}\"; do\n    V=$(\n        go mod download -json \"${MOD}@kubernetes-${VERSION}\" |\n        sed -n 's|.*\"Version\": \"\\(.*\\)\".*|\\1|p'\n    )\n    go mod edit \"-replace=${MOD}=${MOD}@${V}\"\ndone\ngo get \"k8s.io/kubernetes@v${VERSION}\""
  },
  {
    "url": "https://stackoverflow.com/questions/50589703/does-the-kubernetes-client-go-library-contain-a-function-for-validating-json-yam",
    "body": "import (\n\t\"github.com/stretchr/testify/assert\"\n\tappsV1 \"k8s.io/api/apps/v1\"\n\tcoreV1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/client-go/kubernetes/scheme\"\n\tkubernetesApps \"k8s.io/kubernetes/pkg/apis/apps\"\n\tkubernetesAppsV1 \"k8s.io/kubernetes/pkg/apis/apps/v1\"\n\tkubernetesAppsValidation \"k8s.io/kubernetes/pkg/apis/apps/validation\"\n\tkubernetesCore \"k8s.io/kubernetes/pkg/apis/core\"\n\tkubernetesCoreV1 \"k8s.io/kubernetes/pkg/apis/core/v1\"\n\tkubernetesCoreValidation \"k8s.io/kubernetes/pkg/apis/core/validation\"\n\t\"strings\"\n\t\"testing\"\n\t\"text/template\"\n)\nconst RedisTemplate = `\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  type: ClusterIP\n  internalTrafficPolicy: Cluster\n  sessionAffinity: None\n  ports:\n  - name: redis-port\n\tprotocol: TCP\n\tport: 6379\n\ttargetPort: 6379\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n....\n`\nfunc Test_RedisManifest(t *testing.T) {\n\tfor _, m := range strings.Split(RedisTemplate, \"---\") {\n\t\tif len(strings.Trim(m, \"\\n\")) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tobj, _, err := scheme.Codecs.UniversalDeserializer().Decode([]byte(m), nil, nil)\n\t\tassert.NoError(t, err)\n\t\tassert.NotEmptyf(t, obj.GetObjectKind().GroupVersionKind().Kind, \"parsed k8s object kind is empty\")\n\t\tif service, ok := obj.(*coreV1.Service); ok {\n\t\t\tkubernetesService := &kubernetesCore.Service{}\n\t\t\tconversionErr := kubernetesCoreV1.Convert_v1_Service_To_core_Service(service, kubernetesService, nil)\n\t\t\tassert.NoError(t, conversionErr)\n\t\t\tkubernetesService.ObjectMeta.Namespace = \"default\"\n\t\t\tvalidationErrs := kubernetesCoreValidation.ValidateService(kubernetesService)\n\t\t\tassert.Empty(t, validationErrs)\n\t\t}\n\t\tif deployment, ok := obj.(*appsV1.Deployment); ok {\n\t\t\tkubernetesDeployment := &kubernetesApps.Deployment{}\n\t\t\tconversionErr := kubernetesAppsV1.Convert_v1_Deployment_To_apps_Deployment(deployment, kubernetesDeployment, nil)\n\t\t\tassert.NoError(t, conversionErr)\n\t\t\tkubernetesDeployment.ObjectMeta.Namespace = \"default\"\n\t\t\tvalidationErrs := kubernetesAppsValidation.ValidateDeployment(kubernetesDeployment, kubernetesCoreValidation.PodValidationOptions{})\n\t\t\tassert.Empty(t, validationErrs)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/49712810/interface-conversion-interface-is-uint64-not-float32",
    "body": "`\nswitch i := x.(type) {\ncase nil:\n\tprintString(\"x is nil\")                // type of i is type of x (interface{})\ncase int:\n\tprintInt(i)                            // type of i is int\ncase float64:\n\tprintFloat64(i)                        // type of i is float64\ncase func(int) float64:\n\tprintFunction(i)                       // type of i is func(int) float64\ncase bool, string:\n\tprintString(\"type is bool or string\")  // type of i is type of x (interface{})\ndefault:\n\tprintString(\"don't know the type\")     // type of i is type of x (interface{})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/49201978/how-to-gob-encode-struct-with-unexported-pointer",
    "body": "func (d *Node) GobEncode() ([]byte, error) {\n    var buf bytes.Buffer\n    encoder := gob.NewEncoder(&buf)\n    if err := encoder.Encode(d.value); err != nil {\n        return nil, err\n    }\n    if d.next != nil {\n        if err := encoder.Encode(d.next); err != nil {\n            return nil, err\n        }\n    }\n    return buf.Bytes(), nil\n}\nfunc (d *Node) GobDecode(b []byte) error {\n    buf := bytes.NewBuffer(b)\n    decoder := gob.NewDecoder(buf)\n    if err := decoder.Decode(&d.value); err != nil {\n        return err\n    }\n    if buf.Len() != 0 {\n        return decoder.Decode(&d.next)\n    }\n    return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/49201978/how-to-gob-encode-struct-with-unexported-pointer",
    "body": "func encodePointer(encoder *gob.Encoder, ptr any) error {\n    isNil := ptr == nil || (reflect.ValueOf(ptr).Kind() == reflect.Ptr && reflect.ValueOf(ptr).IsNil())\n    if err := encoder.Encode(isNil); err != nil {\n        return err\n    }\n    if isNil {\n        return nil\n    }\n    return encoder.Encode(ptr)\n}\n\nfunc decodePointer(decoder *gob.Decoder, ptr any) error {\n    var isNil bool\n    err := decoder.Decode(&isNil)\n    if err != nil {\n        return err\n    }\n    if isNil {\n        return nil\n    }\n    return decoder.Decode(ptr)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/44475783/golang-net-http-uploading-large-files-undefined-errors",
    "body": "const uploadFile = (form_id: string) => {\n    const uploadForm: HTMLFormElement = <HTMLFormElement>document.getElementById(form_id);\n    document.getElementById(\"submit_form\").addEventListener(\"click\", function(e) {\n        e.preventDefault()\n        let reader: FileReader = new FileReader();\n        reader.readAsArrayBuffer((<HTMLInputElement>document.getElementById('file')).files[0]);\n        reader.onload = function(evt) {\n            const formData = new FormData(uploadForm);\n            const isPublic: boolean = (<HTMLInputElement>document.getElementById('public_switch')).checked;\n            formData.append('file', (<any>evt.target).result);\n            formData.append('compression', (<HTMLInputElement>document.getElementById('compression')).value);\n            formData.append('public', String(isPublic));\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", \"/upload/\");\n            xhr.send(formData);\n            xhr.onreadystatechange = function() {\n                console.log(xhr.responseText + '  \\n status is: ' + xhr.statusText);\n            }\n        };\n    });\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/43063444/lack-of-data-using-golang-channel",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n/*\n\t信号量的考察，put 之后，必须等待 get 拿到之后才能推出循环\n*/\ntype Data struct {\n\tdata []int\n}\nfunc main() {\n\tws := 5\n\tch := make(chan *Data, ws)\n\tsem := make(chan bool)\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < ws; i++ {\n\t\twg.Add(1)\n\t\tgo func(wg *sync.WaitGroup, ch chan *Data) {\n\t\t\tdefer wg.Done()\n\t\t\tfor {\n\t\t\t\tchar, ok := <-ch\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Get: %d\\n\", len(char.data))\n\t\t\t\tsem <- true\n\t\t\t}\n\t\t}(&wg, ch)\n\t}\n\tvar d Data\n\tar := []int{1}\n\t// ws = 5\n\tfor i := 0; i < ws; i++ {\n\t\td.data = []int{}\n\t\tfor j := 0; j < 1000; j++ {\n\t\t\td.data = append(d.data, ar[0])\n\t\t}\n\t\tch <- &d\n\t\tfmt.Printf(\"Put: %d\\n\", len(d.data))\n\t\t<-sem // 一个信号量，必须等待 get 完成之后才能继续put\n\t}\n\tclose(ch)\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/29536345/how-to-multiple-sort-a-mapstringinterface-type-in-go-lang",
    "body": "import \"github.com/rxwycdh/rxhash\"\ndd := map[string]any{\n\t\"MysoreCity\": map[string]any{\n\t\t\"Population\":   1000,\n\t\t\"VehicleCount\": 1700,\n\t\t\"Temperature\":  33,\n\t},\n\t\"BangaloreCity\": map[string]any{\n\t\t\"Population\":   1000,\n\t\t\"VehicleCount\": 3500,\n\t\t\"Temperature\":  33,\n\t},\n\t\"KolarCity\": map[string]any{\n\t\t\"Population\":   1250,\n\t\t\"VehicleCount\": 3500,\n\t\t\"Temperature\":  31,\n\t},\n\t\"TumkurCity\": map[string]any{\n\t\t\"Population\":   800,\n\t\t\"VehicleCount\": 300,\n\t\t\"Temperature\":  29,\n\t},\n}\nb, _ := json.Marshal(rxhash.SortMap(dd))\nprintln(string(b))"
  },
  {
    "url": "https://stackoverflow.com/questions/28504880/how-to-embed-sqlx-results-in-html-using-go-golang",
    "body": "func MainPageHandler(w http.ResponseWriter, r *http.Request) {\n\ttype User struct {\n\t\tName1  string\n\t\tName2  string\n\t}\n\trows, err := database.Query(\"select  .......;\")\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tdefer rows.Close()\n\tuser_current := []User{}\n\tfor rows.Next() {\n\t\tp := User{}\n\t\terr := rows.Scan(&p.Name1, &p.Name2 )\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\tcontinue\n\t\t}\n\t\tuser_current = append(user_current, p)\n\t}\n\ttmpl, _ := template.ParseFiles(\"main_page.html\")\n\ttmpl.Execute(w, user_current)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78219496/how-to-parse-incomplete-partial-json-in-go",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"log\"\n)\nfunc main() {\n\t// Get some io.Reader, this could be a streaming buffer\n\tr := getDataReader()\n\tdec := json.NewDecoder(r)\n\t// Read opening { - needed to \"enter\" the root level\n\t_, _ = dec.Token()\n\t// Loop over the root level\n\tfor dec.More() {\n\t\tkey, err := dec.Token()\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"error: %s\", err)\n\t\t}\n\t\t// Read the content of the current key\n\t\t// Important: if the content of the current key isn't read like this, and there isn't any recursion,\n\t\t// dec.More() will move into the data structure, but it stops as soon as it reaches the end of the first node that\n\t\t// is a simple value\n\t\tvar val any\n\t\terr = dec.Decode(&val)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"error: %s\", err)\n\t\t}\n\t\tlog.Printf(\"%s => %#v\", key, val)\n\t}\n}\nfunc getDataReader() io.Reader {\n\tdata := `{\n\t\t\"first\": {\n\t\t\t\"name\": \"The First Thing\",\n\t\t\t\"count\": 1\n\t\t},\n\t\t\"second\": {\n\t\t\t\"name\": \"The 2d Thing\",\n\t\t\t\"count\": 2\n\t\t}\n}`\n\tbuf := bytes.NewBufferString(data)\n\treturn buf\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77661746/is-there-any-way-to-have-a-literal-in-the-name-of-a-regex-named-capture-grou",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nfunc main() {\n\tdata := \"xxxx-xxx[12345]\"\n    // removed capture group names from the regex\n\tregex := regexp.MustCompile(`^([^\\[\\]]+)\\[?(\\d+)?\\]?$`)\n    //                            └───╴1╶──┘   └╴2╶┘\n    // and placed them in an array that matches based on index\n\tgroup_names := [3]string{\"\", \"process.executable.name\", \"process.pid\"}\n    //                        0  └──────────╴1╶──────────┘  └────╴2╶────┘\n\tmatch := regex.FindStringSubmatch(data)\n\tif match == nil {\n\t\tfmt.Println(\"no match found\")\n\t\treturn\n\t}\n\tgroups := make(map[string]string)\n\tfor i, part := range match {\n        // exclude the entire match from the groups map\n        if i == 0 { continue }\n\t\tgroup_name := group_names[i]\n\t\tgroups[group_name] = part\n\t}\n\tfmt.Println(groups)\n    // output: map[process.executable.name:xxxx-xxx process.pid:12345]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77295690/uploading-a-file-to-google-drive-via-api-fails",
    "body": "func (c *Client) UploadFile(oauthTokenConfig GoogleOauthTokenConfig, parentFolderId string, file *multipart.FileHeader) (*string, error) {\n\tsvc, err := drive.NewService(context.Background(), option.WithHTTPClient(\n\t\toauthTokenConfig.Config.Client(\n\t\t\tcontext.Background(),\n\t\t\t&oauth2.Token{\n\t\t\t\tAccessToken:  oauthTokenConfig.AccessToken,\n\t\t\t\tTokenType:    oauthTokenConfig.TokenType,\n\t\t\t\tRefreshToken: oauthTokenConfig.RefreshToken,\n\t\t\t\tExpiry:       oauthTokenConfig.ExpiresIn,\n\t\t\t},\n\t\t)),\n\t)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create drive-service: %s\", err.Error())\n\t}\n\tfileExtension := filepath.Ext(file.Filename)\n\tfileName := strings.TrimSuffix(file.Filename, fileExtension)\n\tuploadFile := drive.File{\n\t\tName:    fmt.Sprintf(\"%s_%s%s\", fileName, uuid.New().String(), fileExtension),\n\t\tParents: []string{parentFolderId},\n\t}\n\tfileContent, err := file.Open()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to open file: %s\", err.Error())\n\t}\n\tfileResult, err := svc.Files.Create(&uploadFile).Media(fileContent).Do()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to create file: %s\", err.Error())\n\t}\n\tuploadedFile, err := svc.Files.Get(fileResult.Id).Fields(\"webViewLink\").Do()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get file: %s\", err.Error())\n\t}\n\treturn &uploadedFile.WebViewLink, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77295690/uploading-a-file-to-google-drive-via-api-fails",
    "body": "func (c *Client) RefreshToken(oauthTokenConfig GoogleOauthTokenConfig) (*GoogleOauthTokenConfig, error) {\n\tctx := context.Background()\n\tconfig := oauth2.Config{\n\t\tClientID:     c.ClientId,\n\t\tClientSecret: c.ClientSecret,\n\t\tRedirectURL:  oauthTokenConfig.Config.RedirectURL,\n\t\tScopes:       []string{\"https://www.googleapis.com/auth/drive\"},\n\t\tEndpoint:     google.Endpoint,\n\t}\n\ttoken := &oauth2.Token{\n\t\tAccessToken:  oauthTokenConfig.AccessToken,\n\t\tTokenType:    oauthTokenConfig.TokenType,\n\t\tRefreshToken: oauthTokenConfig.RefreshToken,\n\t\tExpiry:       oauthTokenConfig.ExpiresIn,\n\t}\n\ttokenSource := config.TokenSource(ctx, token)\n\tupdatedToken, err := tokenSource.Token()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &GoogleOauthTokenConfig{\n\t\tConfig:       config,\n\t\tAccessToken:  updatedToken.AccessToken,\n\t\tRefreshToken: updatedToken.RefreshToken,\n\t\tExpiresIn:    updatedToken.Expiry,\n\t\tTokenType:    updatedToken.TokenType,\n\t}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76876151/gorm-model-split-over-two-tables-with-embedded-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"gorm.io/driver/sqlite\"\n\t\"gorm.io/gorm\"\n\t\"os\"\n)\ntype User struct {\n\tID    uint   `gorm:\"primaryKey\"`\n\tPosts []Post `gorm:\"foreignKey:user_id;references:id\"`\n}\ntype Post struct {\n\tID       uint64 `gorm:\"primaryKey\"`\n\tUserId   uint64\n\tComments []Comment `gorm:\"foreignKey:post_id;references:id\"`\n}\ntype Comment struct {\n\tID     uint64 `gorm:\"primaryKey\"`\n\tPostID uint\n}\nfunc main() {\n\tdb, err := gorm.Open(sqlite.Open(\"blog.db\"), &gorm.Config{\n\t\tDisableForeignKeyConstraintWhenMigrating: true,\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer os.Remove(\"blog.db\")\n\tif err := db.AutoMigrate(&User{}, &Post{}, &Comment{}); err != nil {\n\t\tpanic(err)\n\t}\n\tdb.Create(&User{Posts: []Post{{Comments: []Comment{{}, {}, {}}}}})\n\tdb.Create(&User{Posts: []Post{{}, {}}})\n\tvar out []*User\n\tdb.Model(&User{}).Preload(\"Posts\").Preload(\"Posts.Comments\").Find(&out)\n\tb, _ := json.Marshal(&out)\n\tfmt.Println(string(b))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76876151/gorm-model-split-over-two-tables-with-embedded-struct",
    "body": "[\n  {\n    \"ID\": 1,\n    \"Posts\": [\n      {\n        \"ID\": 1,\n        \"UserId\": 1,\n        \"Comments\": [\n          {\n            \"ID\": 1,\n            \"PostID\": 1\n          },\n          {\n            \"ID\": 2,\n            \"PostID\": 1\n          },\n          {\n            \"ID\": 3,\n            \"PostID\": 1\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"ID\": 2,\n    \"Posts\": [\n      {\n        \"ID\": 2,\n        \"UserId\": 2,\n        \"Comments\": []\n      },\n      {\n        \"ID\": 3,\n        \"UserId\": 2,\n        \"Comments\": []\n      }\n    ]\n  }\n]"
  },
  {
    "url": "https://stackoverflow.com/questions/76775139/periodic-sending-of-a-client-request",
    "body": "func SendOrderNumber(ctx context.Context, orderNumber string, endpoint string) (*model.Answer, error) {\n\t//endpoint example: http://localhost:8080/api/orders/\n\tendpointWithOrderNumber := fmt.Sprintf(\"%s%s\", endpoint, orderNumber)\n\tclient := &http.Client{}\n\trequest, err := http.NewRequestWithContext(ctx, http.MethodPost, endpointWithOrderNumber, strings.NewReader(\"\"))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresponse, err := client.Do(request)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif response.StatusCode != http.StatusOK {\n\t\treturn nil, errors.New(response.Status)\n\t}\n\tvar accrualSystemAnswer model.AccrualSystemAnswer\n\terr = json.NewDecoder(response.Body).Decode(&accrualSystemAnswer)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// body must be closed after error check, cos in case if body is empty u will get\n\t// nil body. resp.Body.Close() for nil body -> panic\n\tdefer response.Body.Close()\n\treturn &accrualSystemAnswer, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76711504/refactoring-golang-struct-and-functions",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"github.com/jmoiron/sqlx\"\n)\ntype User struct {\n\tUuid      string\n\tFirstName string `db:\"first_name\"`\n\tLastName  string `db:\"last_name\"`\n\tEmail     string\n\tPassword  string\n\tAddress   *Address\n}\ntype Address struct {\n\tUuid     string\n\tUserUuid uint `db:\"user_uuid\"`\n\tAddress1 string\n\tAddress2 string\n\tCity     string\n\tPostcode string\n}\ntype IStorage interface {\n\tGetUsers(orderBy string) ([]*User, error)\n}\ntype sqlxConn struct {\n\t*sqlx.DB\n}\nfunc NewSqlxConn(driverName, dataSourceName string) (IStorage, error) {\n\tdb, err := sqlx.Connect(driverName, dataSourceName)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn &sqlxConn{DB: db}, nil\n}\nfunc (s *sqlxConn) GetUsers(orderBy string) ([]*User, error) {\n\tgetUsersQuery := \"SELECT * FROM users\"\n\t// Add the order by if it has been passed though\n\tif orderBy != \"\" {\n\t\tgetUsersQuery += \" ORDER BY \" + orderBy + \" ASC\"\n\t}\n\tusers := make([]*User, 0)\n\ts.Select(&users, getUsersQuery)\n\tif len(users) == 0 {\n\t\treturn users, nil\n\t}\n\t// Find the address for each user\n\tvar uuids []string\n\tfor _, user := range users {\n\t\tuuids = append(uuids, user.Uuid)\n\t}\n\taddresses := make([]*Address, 0)\n\ts.Select(&addresses, \"select * from addresses where user_uuid IN (\"+strings.Join(uuids, \",\")+\")\")\n\tfor _, address := range addresses {\n\t\tfor _, user := range users {\n\t\t\tuser.Address = address\n\t\t}\n\t}\n\treturn users, nil\n}\nfunc OrderBYAndGetAll(storage IStorage, orderBy string) ([]*User, error) {\n\treturn storage.GetUsers(orderBy)\n}\nfunc GetAllUsers(storage IStorage) ([]*User, error) {\n\treturn storage.GetUsers(\"\")\n}\nfunc main() {\n\tconn, err := NewSqlxConn(\"postgres\", \"user=prod password=prodPass741 dbname=acme sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(GetAllUsers(conn))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73380914/cast-nested-interface-to-mapstringinterface",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\nfunc main() {\n\ts := `{\n    \t\t\"totalAmount\": 4,\n    \t\t\"subtotal\": 4,\n    \t\t\"Vendors\": [{\n            \t    \"MethodOfTenders\": [\n\t                {\n                            \"order\": 1,\n                            \"fees\": 2\n            \t        }, {\n                \t    \"order\": 1,\n                \t    \"fees\": 2\n            \t        }\n\t            ],\n            \t    \"subtotalFees\": 4\n        \t},\n        \t{\n            \t    \"MethodOfTenders\": [\n\t                {\n                \t    \"order\": 1,\n                            \"fees\": 2\n                        }, {\n                            \"order\": 1,\n                            \"fees\": 1\n                        }\n                    ],\n                    \"subtotalFees\": 3\n                }\n            ]\n        }\n\t`\n\tvar data map[string]interface{}\n\tif err := json.Unmarshal([]byte(s), &data); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tfmt.Printf(\"%+v\\n\", data)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73380914/cast-nested-interface-to-mapstringinterface",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\txlst \"github.com/ivahaev/go-xlsx-templater\"\n)\nfunc main() {\n\twd, err := os.Getwd()\n\tif err != nil {\n\t\tlog.Fatalf(err.Error())\n\t}\n\tpath := strings.Join([]string{wd, \"\"}, \"\")\n\tdoc := xlst.New()\n\terr = doc.ReadTemplate(path + \"/export_support_template.xlsx\")\n\tif err != nil {\n\t\tfmt.Println(\"ERROR OPENING THE TEMPLATE: \", err)\n\t\tpanic(\"error opening template\")\n\t}\n\tvar ctx map[string]interface{}\n\tdata := sampleData()\n\terr := json.Unmarshal(data, &ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Final log\")\n\t}\n\terr = doc.Render(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"ERROR RENDERING THE TEMPLATE: \", err)\n\t\tpanic(\"error rendering template\")\n\t}\n\terr = doc.Save(path + \"/report.xlsx\")\n\tif err != nil {\n\t\tfmt.Println(\"ERROR SAVING THE TEMPLATE: \", err)\n\t\tpanic(\"error saving template\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62523552/how-to-send-multiple-commands-in-one-sesssion-but-save-outputs-separately",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"golang.org/x/crypto/ssh\"\n)\nfunc main() {\n\t// List of the commands should be sent to the devices\n\tlistCMDs := []string{\n\t\t\"set cli op-command-xml-output on\\n\",\n\t\t\"test routing fib-lookup virtual-router default ip 1.1.1.1\\n\",\n\t\t\"test routing fib-lookup virtual-router default ip 2.2.2.2\\n\",\n\t\t\"show interface ethernet1/1\\n\",\n\t\t\"show interface ethernet1/2\\n\",\n\t\t\"test security-policy-match protocol 6 source 1.1.1.1 destination 2.2.2.2 destination-port 443 from ZONE1 to ZONE2\\n\",\n\t\t\"test security-policy-match protocol 6 source 10.0.0.1 destination 10.0.2.1 destination-port 443 from ZONE1 to ZONE2\\n\",\n\t\t\"exit\",\n\t}\n\tsshconfig := InsecureClientConfig(\"admin\", \"Ghazanfar1!\")\n\ts, _ := ExecCommands(\"192.168.1.249\", listCMDs, sshconfig)\n\tfor _, item := range s {\n\t\tfmt.Println(item)\n\t\tfmt.Println(\"-------------------------------\")\n\t}\n}\n// ExecCommands ...\nfunc ExecCommands(ipAddr string, commands []string, sshconfig *ssh.ClientConfig) ([]string, error) {\n\t// Gets IP, credentials and config/commands, SSH Config (Timeout, Ciphers, ...) and returns\n\t// output of the device as \"string\" and an error. If error == nil, means program was able to SSH with no issue\n\t// Creating outerr as Output Error.\n\touterr := errors.New(\"nil\")\n\touterr = nil\n\t// Creating Output as String\n\tvar outputStr []string\n\tvar strTmp string\n\t// Dial to the remote-host\n\tclient, err := ssh.Dial(\"tcp\", ipAddr+\":22\", sshconfig)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer client.Close()\n\t// Create sesssion\n\tsession, err := client.NewSession()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer session.Close()\n\t// StdinPipee() returns a pipe that will be connected to the remote command's standard input when the command starts.\n\t// StdoutPipe() returns a pipe that will be connected to the remote command's standard output when the command starts.\n\tstdin, err := session.StdinPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tstdout, err := session.StdoutPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Start remote shell\n\terr = session.Shell()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tstdinLines := make(chan string)\n\tgo func() {\n\t\tscanner := bufio.NewScanner(stdout)\n\t\tfor scanner.Scan() {\n\t\t\tstdinLines <- scanner.Text()\n\t\t}\n\t\tif err := scanner.Err(); err != nil {\n\t\t\tlog.Printf(\"scanner failed: %v\", err)\n\t\t}\n\t\tclose(stdinLines)\n\t}()\n\t// Send the commands to the remotehost one by one.\n\tfor i, cmd := range commands {\n\t\t_, err := stdin.Write([]byte(cmd + \"\\n\"))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif i == len(commands)-1 {\n\t\t\t_ = stdin.Close() // send eof\n\t\t}\n\t\t// wait for command to complete\n\t\t// we'll assume the moment we've gone 1 secs w/o any output that our command is done\n\t\ttimer := time.NewTimer(0)\n\tInputLoop:\n\t\tfor {\n\t\t\ttimer.Reset(time.Second)\n\t\t\tselect {\n\t\t\tcase line, ok := <-stdinLines:\n\t\t\t\tif !ok {\n\t\t\t\t\tlog.Println(\"Finished processing\")\n\t\t\t\t\tbreak InputLoop\n\t\t\t\t}\n\t\t\t\tstrTmp += line\n\t\t\t\tstrTmp += \"\\n\"\n\t\t\tcase <-timer.C:\n\t\t\t\tbreak InputLoop\n\t\t\t}\n\t\t}\n\t\toutputStr = append(outputStr, strTmp)\n\t\t//log.Printf(\"Finished processing %v\\n\", cmd)\n\t\tstrTmp = \"\"\n\t}\n\t// Wait for session to finish\n\terr = session.Wait()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn outputStr, outerr\n}\n// InsecureClientConfig ...\nfunc InsecureClientConfig(userStr, passStr string) *ssh.ClientConfig {\n\tSSHconfig := &ssh.ClientConfig{\n\t\tUser:    userStr,\n\t\tTimeout: 5 * time.Second,\n\t\tAuth:    []ssh.AuthMethod{ssh.Password(passStr)},\n\t\tHostKeyCallback: ssh.InsecureIgnoreHostKey(),\n\t\tConfig: ssh.Config{\n\t\t\tCiphers: []string{\"aes128-ctr\", \"aes192-ctr\", \"aes256-ctr\", \"aes128-cbc\", \"aes192-cbc\",\n\t\t\t\t\"aes256-cbc\", \"3des-cbc\", \"des-cbc\"},\n\t\t\tKeyExchanges: []string{\"diffie-hellman-group1-sha1\",\n\t\t\t\t\"diffie-hellman-group-exchange-sha1\",\n\t\t\t\t\"diffie-hellman-group14-sha1\"},\n\t\t},\n\t}\n\treturn SSHconfig\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62523552/how-to-send-multiple-commands-in-one-sesssion-but-save-outputs-separately",
    "body": "sb := new(strings.Builder)\ngo io.Copy(sb, stdout)\ncommands := []string{\"uname -a\", \"sleep 1\", \"pwd\", \"whoami\", \"exit\"}\nwait := []time.Duration{10, 1200, 20, 10, 10} // * time.Millisecond\nans := []string{}\ntime.Sleep(10 * time.Millisecond) // wait for the ssh greetings\n// Send the commands to the remotehost one by one.\nfor i, cmd := range commands {\n\tsb.Reset()\n\tfmt.Println(\"*** command:\\t\", cmd)\n\t_, err := stdin.Write([]byte(cmd + \"\\n\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttime.Sleep(wait[i] * time.Millisecond) // wait for the command to finish\n\ts := sb.String()\n\tfmt.Println(\"*** response:\\t\", s)\n\tans = append(ans, s)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62523552/how-to-send-multiple-commands-in-one-sesssion-but-save-outputs-separately",
    "body": "sb := new(strings.Builder)\ngo io.Copy(sb, stdout)\ncommands := []string{\"uname -a\", \"sleep 1\", \"pwd\", \"whoami\"}\ndelim := \"********--------========12345678\"\nfor _, cmd := range commands {\n\t_, err = stdin.Write([]byte(\"echo \" + delim + \"\\n\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t_, err := stdin.Write([]byte(cmd + \"\\n\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n_, err = stdin.Write([]byte(\"exit\\n\"))\nif err != nil {\n\tlog.Fatal(err)\n}\nerr = session.Wait() // Wait for session to exit\nif err != nil {\n\tlog.Fatal(err)\n}\nans := strings.Split(sb.String(), delim)\nans = ans[1:] // remove ssh greetings"
  },
  {
    "url": "https://stackoverflow.com/questions/62208286/mock-function-without-receiver",
    "body": "// Code\n\tvar originalFn = func(arg1, arg2 string) {\n\t\t...\n\t}\n\tfunc Foo() {\n\t\toriginalFn(arg1,arg2)\n\t}\n\t// Tests\n\tfunc TestFoo(t *testing.T) {\n\t\ttempFn := originalFn\n\t\tvar fnArgs []string\n\t\toriginalFn = func(arg1, arg2) {\n\t\t\tfnArgs = append(fnArgs, []string{arg1, arg2})\n\t\t}\n\t\tdefer originalFn = tempFn\n\t\ttests := []struct{\n\t\t\texpected []string\n\t\t}{\n\t\t\t{\n\t\t\t\texpected: []string{\"arg1\", \"arg2\"},\n\t\t\t},\n\t\t}\n\t\tfor _, tt:= range tests {\n\t\t\tfnArgs := make([]string, 0)\n\t\t\tFoo()\n\t\t\tassert.Equal(t, tt.expected, fnArgs)\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/61247492/go-smb2-reading-and-listing-directory",
    "body": "client, err := d.Dial(conn)\n        if err != nil {\n                return err\n        }\n        rfs, err := client.Mount(\"jrwren\")\n        if err != nil {\n                return err\n        }\n        // cat the NOTES file.\n        f, err := rfs.Open(\"NOTES\")\n        if err != nil {\n                return err\n        }\n        defer f.Close()\n        io.Copy(os.Stdout, f)\n        // List all the files\n        dir, err := rfs.Open(\"\")\n        if err != nil {\n                return err\n        }\n        fis, err := dir.Readdir(10)\n        if err != nil {\n                return err\n        }\n        for i := range fis {\n                fmt.Println(fis[i].Name())\n        }"
  },
  {
    "url": "https://stackoverflow.com/questions/57234111/create-a-record-with-associations-in-gorm",
    "body": "type Task struct {\n        gorm.Model\n        Title       string\n        Description string\n        Priority    Priority\n        PriorityID  uint\n}\ntype Priority struct {\n        gorm.Model\n        Name string\n}\nfunc main() {\n        db, err := gorm.Open(sqlite.Open(\"test.db\"), &gorm.Config{})\n        if err != nil {\n                panic(\"failed to connect database\")\n        }\n        db.AutoMigrate(&Task{}, &Priority{})\n        task := Task{\n                Title:       \"Test Task!\",\n                Description: \"Test Task Description\",\n                Priority:    Priority{ID: 1},\n        }\n        db.Create(&task)\n        var tasks []Task\n        db.Joins(\"Priority\").Find(&tasks)\n        fmt.Println(tasks)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57037488/firestore-cloud-function-get-documentsnapshot-from-the-event",
    "body": "type FirestoreValue struct {\n    \tCreateTime time.Time `json:\"createTime\"`\n    \t// Fields is the data for this value. The type depends on the format of your\n    \t// database. Log an interface{} value and inspect the result to see a JSON\n    \t// representation of your database fields.\n    \tFields     map[string]interface{} `json:\"fields\"` // I changed this to a map[string]interface{} instead of the example codes interface{}\n    \tName       string                 `json:\"name\"`\n    \tUpdateTime time.Time              `json:\"updateTime\"`\n    }\n\n    func (fv *FirestoreValue) Recombobulate(destination interface{}) error {\n    \tresult := make(map[string]interface{})\n    \tfor fieldName, infVal := range fv.Fields {\n    \t\tfor typeKey, val := range infVal.(map[string]interface{}) {\n    \t\t\tswitch typeKey {\n    \t\t\tcase \"stringValue\":\n    \t\t\t\tresult[fieldName] = val\n    \t\t\tcase \"booleanValue\":\n    \t\t\t\tresult[fieldName] = val\n    \t\t\tcase \"integerValue\":\n    \t\t\t\t// I saw firestore give me this once: integerValue: \"1\"\n    \t\t\t\tsVal, ok := val.(string)\n    \t\t\t\tif ok {\n    \t\t\t\t\tresult[fieldName], _ = strconv.Atoi(sVal)\n    \t\t\t\t} else {\n    \t\t\t\t\tresult[fieldName] = val\n    \t\t\t\t}\n    \t\t\tcase \"doubleValue\":\n    \t\t\t\tresult[fieldName] = val\n    \t\t\tcase \"timestampValue\":\n    \t\t\t\tresult[fieldName], _ = time.Parse(time.RFC3339, val.(string))\n    \t\t\tcase \"referenceValue\": // this is just a string for all intents and purposes\n    \t\t\t\tresult[fieldName] = val\n    \t\t\tcase \"nullValue\":\n    \t\t\t\t// not really sure what to do with this one\n    \t\t\t\tresult[fieldName] = val\n    \t\t\tcase \"arrayValue\":\n    \t\t\t\telements := val.(map[string]interface{})[\"values\"]\n    \t\t\t\tvar innards []interface{}\n    \t\t\t\tfor _, ele := range elements.([]interface{}) {\n    \t\t\t\t\tfor _, eleInterf := range ele.(map[string]interface{}) {\n    \t\t\t\t\t\tinnards = append(innards, eleInterf)\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tresult[fieldName] = innards\n    \t\t\tcase \"mapValue\":\n    \t\t\t\tmapFields := val.(map[string]interface{})[\"fields\"]\n    \t\t\t\tinnards := make(map[string]interface{})\n    \t\t\t\tfor mapKeyName, v := range mapFields.(map[string]interface{}) {\n    \t\t\t\t\tfor _, innard := range v.(map[string]interface{}) {\n    \t\t\t\t\t\tinnards[mapKeyName] = innard\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tresult[fieldName] = innards\n    \t\t\tcase \"geoPointValue\": // this is just a map[string]int/float\n    \t\t\t\tinnards := make(map[string]interface{})\n    \t\t\t\tfor mapKeyName, v := range val.(map[string]interface{}) {\n    \t\t\t\t\tinnards[mapKeyName] = v\n    \t\t\t\t}\n    \t\t\t\tresult[fieldName] = innards\n    \t\t\t}\n    \t\t}\n    \t}\n\n\n    \tmapstructure.Decode(result, &destination)\n    \treturn nil\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/55312593/golang-os-exec-flushing-stdin-without-closing-it",
    "body": "// parentprocess.go\npackage main\nimport (\n\t\"bufio\"\n\t\"log\"\n\t\"io\"\n\t\"os/exec\"\n)\nfunc request(r *bufio.Reader, w io.Writer, str string) string {\n\tw.Write([]byte(str))\n\tw.Write([]byte(\"\\n\"))\n\tstr, err := r.ReadString('\\n')\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn str[:len(str)-1]\n}\nfunc main() {\n\tcmd := exec.Command(\"bash\", \"menu.sh\")\n\tinr, inw := io.Pipe()\n\toutr, outw := io.Pipe()\n\tcmd.Stdin = inr\n\tcmd.Stdout = outw\n\tif err := cmd.Start(); err != nil {\n\t\tpanic(err)\n\t}\n\tgo cmd.Wait()\n\treader := bufio.NewReader(outr)\n\tlog.Printf(request(reader, inw, \"Tom\"))\n\tlog.Printf(request(reader, inw, \"Rose\"))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57740979/how-enable-gzip-compression-middleware-in-go-chi",
    "body": "func newCompressMiddleware(level int) func(next http.Handler) http.Handler {\n\tcompressor := middleware.NewCompressor(level)\n\t// brotli encoder\n\tcompressor.SetEncoder(\"br\", func(w io.Writer, level int) io.Writer {\n\t\tbrWriter, err := brotli.NewWriterLevel(w, level)\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn brWriter\n\t})\n\t// zstd encoder\n\tcompressor.SetEncoder(\"zstd\", func(w io.Writer, level int) io.Writer {\n\t\tzstdWriter, err := zstd.NewWriter(w, zstd.WithEncoderLevel(zstd.SpeedDefault))\n\t\tif err != nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn zstdWriter\n\t})\n\treturn compressor.Handler\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68711149/fastest-way-to-remove-duplicates-of-a-sorted-go-slice",
    "body": "package main\nimport (\n\t\"math/rand\"\n\t\"sort\"\n)\nfunc main() {\n}\nfunc randSlice(max int) (ret []uint32) {\n\t// we should check that max does not exceed maxUINT32\n\tret = make([]uint32, 0, max)\n\tr := rand.New(rand.NewSource(99))\n\tfor i := 0; i < max; i++ {\n\t\tret = append(ret, uint32(r.Intn(max)))\n\t}\n\tsort.Slice(ret, func(i, j int) bool {\n\t\treturn ret[i] < ret[j]\n\t})\n\treturn\n}\nfunc dedup1(s []uint32) []uint32 {\n\tif len(s) < 2 {\n\t\treturn s\n\t}\n\ttmp := make([]uint32, 0, len(s))\n\tfor i := uint32(0); i < uint32(len(s)); i++ {\n\t\t// If current is not equal to next then store the current\n\t\tif s[i] != s[i+1] {\n\t\t\ttmp = append(tmp, s[i])\n\t\t}\n\t}\n\t// The last must be stored\n\t// Note that if it was repeated, the duplicates are NOT stored before\n\ttmp = append(tmp, s[len(s)-1])\n\t// Modify original slice\n\ts = nil\n\ts = append(s, tmp...)\n\treturn s\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68711149/fastest-way-to-remove-duplicates-of-a-sorted-go-slice",
    "body": "$ go test -v .\n=== RUN   TestDedup1\n--- FAIL: TestDedup1 (0.00s)\npanic: runtime error: index out of range [10] with length 10 [recovered]\n\tpanic: runtime error: index out of range [10] with length 10\ngoroutine 18 [running]:\ntesting.tRunner.func1.1(0x536680, 0xc0000da040)\n\t/home/mh-cbon/.gvm/gos/go1.15.2/src/testing/testing.go:1076 +0x30d\ntesting.tRunner.func1(0xc000082600)\n\t/home/mh-cbon/.gvm/gos/go1.15.2/src/testing/testing.go:1079 +0x41a\npanic(0x536680, 0xc0000da040)\n\t/home/mh-cbon/.gvm/gos/go1.15.2/src/runtime/panic.go:969 +0x175\ntest/d/dup.dedup1(0xc000094060, 0xa, 0xa, 0xa, 0x6124a0, 0xc00003c770)\n\t/home/mh-cbon/gow/src/test/d/dup/main.go:32 +0x248\ntest/d/dup.TestDedup1(0xc000082600)\n\t/home/mh-cbon/gow/src/test/d/dup/main_test.go:7 +0x70\ntesting.tRunner(0xc000082600, 0x54fbf0)\n\t/home/mh-cbon/.gvm/gos/go1.15.2/src/testing/testing.go:1127 +0xef\ncreated by testing.(*T).Run\n\t/home/mh-cbon/.gvm/gos/go1.15.2/src/testing/testing.go:1178 +0x386\nFAIL\ttest/d/dup\t0.006s\nFAIL"
  },
  {
    "url": "https://stackoverflow.com/questions/68711149/fastest-way-to-remove-duplicates-of-a-sorted-go-slice",
    "body": "func TestDedup2(t *testing.T) {\n\ts := randSlice(10)\n\tres := dedup2(s)\n\tuniq := map[uint32]bool{}\n\tfor _, r := range res {\n\t\t_, ok := uniq[r]\n\t\tif ok {\n\t\t\tt.Fatalf(\"found duplicates\\ninput=%#v\\nresult=%#v\\n\", s, res)\n\t\t}\n\t\tuniq[r] = true\n\t}\n}\nfunc TestDedup2_with_dups(t *testing.T) {\n\ts := randSliceWithDups(10)\n\tres := dedup2(s)\n\tuniq := map[uint32]bool{}\n\tfor _, r := range res {\n\t\t_, ok := uniq[r]\n\t\tif ok {\n\t\t\tt.Fatalf(\"found duplicates\\ninput=%#v\\nresult=%#v\\n\", s, res)\n\t\t}\n\t\tuniq[r] = true\n\t}\n}\nfunc BenchmarkDedup2_1000(b *testing.B) {\n\ts := randSliceWithDups(100)\n\tb.ResetTimer()\n\tb.ReportAllocs()\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = dedup2(s)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68711149/fastest-way-to-remove-duplicates-of-a-sorted-go-slice",
    "body": "$ go test -v . -bench=.\n=== RUN   TestDedup1\n--- PASS: TestDedup1 (0.00s)\n=== RUN   TestDedup1_with_dups\n--- PASS: TestDedup1_with_dups (0.00s)\n=== RUN   TestDedup2\n--- PASS: TestDedup2 (0.00s)\n=== RUN   TestDedup2_with_dups\n--- PASS: TestDedup2_with_dups (0.00s)\ngoos: linux\ngoarch: amd64\npkg: test/d/dup\nBenchmarkDedup1_1000\nBenchmarkDedup1_1000-4   \t 1764574\t       673 ns/op\t     544 B/op\t       2 allocs/op\nBenchmarkDedup2_1000\nBenchmarkDedup2_1000-4   \t 7758907\t       152 ns/op\t       0 B/op\t       0 allocs/op\nPASS\nok  \ttest/d/dup\t3.224s"
  },
  {
    "url": "https://stackoverflow.com/questions/68711149/fastest-way-to-remove-duplicates-of-a-sorted-go-slice",
    "body": "func TestDedup2_static(t *testing.T) {\n\ttype expectation struct {\n\t\tinput []uint32\n\t\twant  []uint32\n\t}\n\texpectations := []expectation{\n\t\texpectation{\n\t\t\tinput: []uint32{0, 0, 1, 2, 3, 3, 3, 4, 4, 5},\n\t\t\twant:  []uint32{0, 1, 2, 3, 4, 5},\n\t\t},\n\t\texpectation{\n\t\t\tinput: []uint32{0, 1, 2, 3, 3, 3, 4, 4, 5},\n\t\t\twant:  []uint32{0, 1, 2, 3, 4, 5},\n\t\t},\n\t}\n\tfor _, e := range expectations {\n\t\tres := dedup2(e.input)\n\t\tif !reflect.DeepEqual(res, e.want) {\n\t\t\tt.Fatalf(\"invlaid result, wanted=%#v\\ngot=%#v\\n\", e.want, res)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61829181/golang-errors-as-changes-the-state-of-an-error",
    "body": "package main\nimport (\n    \"errors\"\n    \"fmt\"\n    \"os\"\n)\nfunc main() {\n    var pathError *os.PathError\n    // Generate the error\n    _, err := os.Open(\"I_DO_NOT_EXIST.TXT\");\n    // Print, everything is OK here\n    fmt.Println(err);\n    //pathError is nil here\n    fmt.Println(pathError)\n    // Is it path error?\n    fmt.Println(err, \" ---- is path error? ----> \", errors.Is(err, pathError))\n    fmt.Println()\n    //pathError is set to err here\n    if errors.As(err, &pathError) {}\n\n    fmt.Println(err);\n    //pathError as err here\n    fmt.Println(pathError)\n    // Is it path error?\n    fmt.Println(err, \" ---- is path error? ----> \", errors.Is(err, pathError))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59452621/i-found-that-there-is-an-error-import-path-in-saved-model-go",
    "body": "package github.com/tensorflow/tensorflow/tensorflow/go/genop/internal/proto/github.com/tensorflow/tensorflow/tensorflow/go/core: cannot find package \"github.com/tensorflow/tensorflow/tensorflow/go/genop/internal/proto/github.com/tensorflow/tensorflow/tensorflow/go/core\" in any of:\n\t/usr/local/Cellar/go/1.13.5/libexec/src/github.com/tensorflow/tensorflow/tensorflow/go/genop/internal/proto/github.com/tensorflow/tensorflow/tensorflow/go/core (from $GOROOT)\n\t/Users/subhamsarkar/go/src/github.com/tensorflow/tensorflow/tensorflow/go/genop/internal/proto/github.com/tensorflow/tensorflow/tensorflow/go/core (from $GOPATH)"
  },
  {
    "url": "https://stackoverflow.com/questions/60094368/kubernetes-client-code-generator-can-the-code-exist-only-locally-and-not-on-a-r",
    "body": "myrepo\n├── go.mod\n├── go.sum\n└── pkg\n    ├── apis\n    │   └── myorg\n    │       ├── register.go\n    │       └── v1alpha1\n    │           ├── doc.go\n    │           ├── register.go\n    │           ├── types.go\n    │           └── zz_generated.deepcopy.go\n    └── client\n        ├── clientset\n        │   └── versioned\n        │       ├── clientset.go\n        │       ├── doc.go\n        │       ├── fake\n        │       ├── scheme\n        │       └── typed\n        ├── informers\n        │   └── externalversions\n        │       ├── factory.go\n        │       ├── generic.go\n        │       ├── internalinterfaces\n        │       └── myorg\n        └── listers\n            └── myorg\n                └── v1alpha1"
  },
  {
    "url": "https://stackoverflow.com/questions/75276474/passing-persistant-flags-for-cobra-cli-for-testing",
    "body": "package cmd\nimport (\n  \"fmt\"\n  \"os\"\n  \"github.com/spf13/cobra\"\n)\nvar threads int\nvar rootCmd = &cobra.Command{\n  Use:   \"clitest\",\n  Short: \"A simple cli test\",\n  RunE:  runRoot,\n}\nfunc runRoot(cmd *cobra.Command, args []string) error {\n  fmt.Printf(\"This is the root command, threads=%d\\n\", threads)\n  return nil\n}\nfunc Execute() {\n  err := rootCmd.Execute()\n  if err != nil {\n    os.Exit(1)\n  }\n}\nfunc init() {\n  rootCmd.PersistentFlags().IntVarP(&threads, \"threads\", \"t\", 1, \"Number of threads\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75276474/passing-persistant-flags-for-cobra-cli-for-testing",
    "body": "package cmd\nimport (\n\t\"testing\"\n)\nfunc TestRootCmdWithArgs(t *testing.T) {\n\trootCmd.SetArgs([]string{\"-t\", \"12\"})\n\tif err := rootCmd.Execute(); err != nil {\n\t\tt.Errorf(\"failed to execute rootCmd\")\n\t}\n\tif threads != 12 {\n\t\tt.Errorf(\"expected 12, got %d\", threads)\n\t}\n}\nfunc TestRootCmdInvalidArgs(t *testing.T) {\n\trootCmd.SetArgs([]string{\"--arg-that-does-not-exist\"})\n\tif err := rootCmd.Execute(); err == nil {\n\t\tt.Errorf(\"command succeeded when it should have failed\")\n\t}\n}\nfunc TestFooCmdWithArgs(t *testing.T) {\n\trootCmd.SetArgs([]string{\"foo\", \"-c\", \"2\"})\n\tif err := rootCmd.Execute(); err != nil {\n\t\tt.Errorf(\"failed to execute rootCmd\")\n\t}\n\tif count != 2 {\n\t\tt.Errorf(\"execpted 2, got %d\", count)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68661761/add-a-field-to-json-struct-interface-golang",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype Response interface {}\ntype CheckResponse struct {\n\tStatus    string `json:\"status\"`\n}\nfunc main() {\n\tout := []Response{\n\t\tCheckResponse{Status: \"UP\"},\n\t}\n\tfor _, d := range out {\n\t\tres, ok := d.(CheckResponse)\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\toutd := struct {\n\t\t\tResp       string `json:\"status,inline\"`\n\t\t\tVersion    string   `json:\",inline\"`\n\t\t}{\n\t\t\tResp:       res.Status,\n\t\t\tVersion: \"1.1\",\n\t\t}\n\t\tdata, _ := json.Marshal(outd)\n\t\tfmt.Printf(\"response : %s\", data)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60699106/how-to-modify-a-return-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\ntype RelevantRepoData struct {\n\tId          int    `json:\"id\"`\n\tName        string `json:\"name\"`\n\tUrl         string `json:\"url\"`\n\tLanguage    string `json:\"language\"`\n\tDescription string `json:\"description\"`\n}\nfunc GetAllReposStars(w http.ResponseWriter, r *http.Request) {\n\tenableCors(&w)\n\tparams := mux.Vars(r)\n\tusername := params[\"username\"]\n\tres, err := http.Get(\"https://api.github.com/users/\" + username + \"/starred\")\n\tvar repoData RelevantRepoData\n\terr = json.NewDecoder(res.Body).Decode(&repoData)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tjson.NewEncoder(w).Encode(repoData)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55995494/send-a-custom-signal-to-curreng-golang-process",
    "body": "// Brief example code. Real code might be structured differently\n// (perhaps pack up maint and http.Server in one type MyServer).\nvar maint uint32 // atomic: 1 if in maintenance mode\nfunc handleMaintSignals() {\n\tch := make(chan os.Signal, 1)\n\tgo func() { // FIXME: use Server.RegisterOnShutdown to terminate this\n\t\tfor sig := range ch {\n\t\t\tswitch sig { // FIXME: add logging\n\t\t\tcase syscall.SIGUSR1:\n\t\t\t\tatomic.StoreUint32(&maint, 1)\n\t\t\tcase syscall.SIGUSR2:\n\t\t\t\tatomic.StoreUint32(&maint, 0)\n\t\t\t}\n\t\t}\n\t}()\n\tsignal.Notify(ch, syscall.SIGUSR1, syscall.SIGUSR2)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55797865/behavior-of-server-gracefulstop-in-golang",
    "body": "func main() {\n   // ...\n   errChan := make(chan error)\n   stopChan := make(chan os.Signal)\n   // bind OS events to the signal channel\n   signal.Notify(stopChan, syscall.SIGTERM, syscall.SIGINT)\n   // run blocking call in a separate goroutine, report errors via channel\n   go func() {\n        if err := grpcServer.Serve(lis); err != nil {\n            errChan <- err\n        }\n    }()\n\n   // terminate your environment gracefully before leaving main function\n   defer func() {\n      server.GracefulStop()\n      closeDbConnections()\n   }()\n\n   // block until either OS signal, or server fatal error\n   select {\n      case err := <-errChan:\n          log.Printf(\"Fatal error: %v\\n\", err)\n      case <-stopChan:\n   }"
  },
  {
    "url": "https://stackoverflow.com/questions/76465623/how-to-write-to-a-file-in-memory-and-then-send-it-via-http-without-using-an-int",
    "body": "package main\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"github.com/go-chi/chi/v5\"\n)\ntype Data struct {\n\tName string\n\tAge  int\n}\nfunc main() {\n\trouter := chi.NewRouter()\n\trouter.Get(\"/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\n\t\tw.WriteHeader(http.StatusOK)\n\t\tdata := []Data{\n\t\t\t{\"John\", 30},\n\t\t\t{\"Jane\", 20},\n\t\t}\n\t\tcsvWriter := csv.NewWriter(w)\n\t\tvar csvData [][]string\n\t\tfor _, record := range data {\n\t\t\trow := []string{record.Name, strconv.Itoa(record.Age)}\n\t\t\tcsvData = append(csvData, row)\n\t\t}\n\t\tif err := csvWriter.WriteAll(csvData); err != nil {\n\t\t\t// handle the error\n\t\t\tfmt.Println(err)\n\t\t}\n\t})\n\thttp.ListenAndServe(\":8087\", router)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69454253/how-to-store-a-value-of-type-context-cancelfunc-using-context-withvalue",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n)\ntype contextKey int\nconst (\n\ttraceIDKey contextKey = iota\n\taFunctionWhyNot\n)\nfunc main() {\n\t// Create a traceID for this request.\n\ttraceID := \"f47ac10b-58cc-0372-8567-0e02b2c3d479\"\n\t// Store the traceID value inside the context with a value of\n\t// zero for the key type.\n\tctx := context.WithValue(context.Background(), traceIDKey, traceID)\n\t// Retrieve that traceID value from the Context value bag.\n\tif uuid, ok := ctx.Value(traceIDKey).(string); ok {\n\t\tfmt.Println(\"TraceID:\", uuid)\n\t}\n\t// Or a function\n\tctx = context.WithValue(ctx, aFunctionWhyNot, func() { fmt.Println(\"lol, I'm a function on a context\") })\n\t// Call it maybe\n\tif f, ok := ctx.Value(aFunctionWhyNot).(func()); ok {\n\t\tf()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68586878/how-to-verify-the-password",
    "body": "func loginData(w http.ResponseWriter, r *http.Request) {\n    email := r.FormValue(\"email\")\n    password := r.FormValue(\"password\")\n    match := database.Findaccount(email, password)\n    if match == false {\n        fmt.Println(\"false\")\n    } else {\n        fmt.Println(\"true\")\n    }\n}\nfunc Findaccount(myEmail, myPassword string) bool {\n    collection := Connect.Database(\"WebApp2\").Collection(\"dataStored\")\n    if err := collection.FindOne(context.TODO(), bson.M{\"email\": myEmail}).Decode(&Account); err != nil {\n        fmt.Println(\"Enter the correct email or password\")\n    }\n    err := bcrypt.CompareHashAndPassword([]byte(Account.Password), []byte(myPassword))\n    return err == nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66024160/writing-an-api-endpoint-with-multiple-optional-parameters",
    "body": "func (j *Jobs) List(c *client.Client, q string, l string, s string) error {\n\tquery := c.Database.Debug().Preload(\"Locations\").Preload(\"Skills\")\n\t// return based on query\n\tif q != \"\" {\n\t\tquery = query.Where(\"LOWER(title) like LOWER(?) OR LOWER(description) like LOWER(?)\", \"%\"+q+\"%\", \"%\"+q+\"%\")\n\t}\n\t// return based on location\n\tif l != \"\" {\n\t\tquery = query.Joins(\"INNER JOIN job_location jl ON jl.job_id = jobs.id\").Where(\"jl.location_name = ?\", l)\n\t}\n\t// return based on skill\n\tif s != \"\" {\n\t\tquery = query.Joins(\"INNER JOIN job_skill js ON js.job_id = jobs.id\").Where(\"js.skill_name = ?\", s)\n\t}\n\t// Return all jobs\n\treturn query.Find(&j).Error\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79285828/when-using-maps-in-protobuf-with-string-keys-do-the-keys-automatically-convert",
    "body": "package main\nimport (\n\t\"log/slog\"\n\t\"os\"\n\tpb \"path/to/protos\"\n\t\"google.golang.org/protobuf/encoding/protojson\"\n)\nconst (\n\tkey string = \"my_attr\"\n)\nfunc main() {\n\tmyMessage := &pb.MyMessage{\n\t\tData: map[string]string{key: \"hello\"},\n\t}\n\tslog.Info(\"Output\", \"MyMessage\", myMessage)\n\tmyAttr, ok := myMessage.Data[key]\n\tif ok {\n\t\tslog.Info(\"Output\", key, myAttr)\n\t}\n\tj, err := protojson.Marshal(myMessage)\n\tif err != nil {\n\t\tslog.Error(\"unable to marshal myMessage\", \"err\", err)\n\t\tos.Exit(1)\n\t}\n\tslog.Info(\"Output\", \"JSON\", string(j))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78671110/cast-to-interface-for-implementation-with-pointer-receiver",
    "body": "package main\nimport (\n\t\"encoding\"\n\t\"reflect\"\n\t\"testing\"\n\t\"github.com/stretchr/testify/assert\"\n)\ntype MyStruct struct{ value string }\nvar _ encoding.TextMarshaler = (*MyStruct)(nil)\nfunc (id MyStruct) MarshalText() (text []byte, err error) {\n\treturn []byte(id.value), nil\n}\nvar _ encoding.TextUnmarshaler = (*MyStruct)(nil)\nfunc (id *MyStruct) UnmarshalText(data []byte) error {\n\t*id = MyStruct{value: string(data)}\n\treturn nil\n}\nfunc TestIfICouldInvokeUnmarshalText(t *testing.T) {\n\tvar ms any = MyStruct{value: \"hello\"}\n\t_, ok := (ms).(encoding.TextMarshaler)\n\tif !ok {\n\t\tt.FailNow()\n\t}\n\t_, ok = (ms).(encoding.TextUnmarshaler)\n\tassert.False(t, ok)\n\tv := reflect.Indirect(reflect.New(reflect.TypeOf(ms)))\n\tv.Set(reflect.ValueOf(ms)) // makes an addressable copy\n\tsp := v.Addr().Interface()\n\tu, ok := (sp).(encoding.TextUnmarshaler)\n\tif !ok {\n\t\tt.FailNow()\n\t}\n\t_ = u.UnmarshalText([]byte(\"world\"))\n\tm, _ := ms.(MyStruct)\n\tassert.Equal(t, \"world\", m.value)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76296212/tons-of-issue-with-protoc",
    "body": "package foo;\n// Golang package is {GO-MODULE}/{GO-PACKAGE}\n// Generally GO-PACKAGE={PROTO_PATH}/{PACKAGE} but it need not be\n// You can change \"${MODULE}/some/random/bar\" here without problem\noption go_package=\"github.com/me/golang-grpc-server/proto/foo\";\n// `another_proto.proto` is in the same `package` and thus same folder\nimport \"foo/another_proto.proto\";\n// Proto1 is a message that ...\nmessage Proto1 {\n    ...\n    ...\n    // Type references must include the full `package` path e.g. `foo`\n    repeated foo.AnotherProto another_proto = 6;\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71774502/how-to-unmarshal-json-with-an-array-of-different-types",
    "body": "type Cond struct {\n\tName string\n\tArgs []string\n}\nfunc (c *Cond) UnmarshalJSON(data []byte) error {\n    // unmarshal into a slice of raw json\n\tvar raw []json.RawMessage\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn err\n\t} else if len(raw) != 2 {\n\t\treturn errors.New(\"unsupported number of elements in condition\")\n\t}\n    // unmarshal the first raw json element into a string\n\tif err := json.Unmarshal(raw[0], &c.Name); err != nil {\n\t\treturn err\n\t}\n    // unmarshal the second raw json element into a slice of string\n\treturn json.Unmarshal(raw[1], &c.Args)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70835519/using-a-cgo-shared-library-in-a-go-program",
    "body": "# command-line-arguments\ncgo-gcc-prolog:67:33: warning: unused variable '_cgo_a' [-Wunused-variable]\nfatal error: unexpected signal during runtime execution\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x43fd5e2]\ngoroutine 1 [running, locked to thread]:\nruntime.throw({0x40a875b?, 0x1c00011b800?})\n        /usr/local/go/src/runtime/panic.go:992 +0x71 fp=0x1c00004a960 sp=0x1c00004a930 pc=0x402f6d1\nruntime: unexpected return pc for runtime.sigpanic called from 0x43fd5e2\nstack: frame={sp:0x1c00004a960, fp:0x1c00004a9b0} stack=[0x1c00004a000,0x1c00004b000)\n....\n0x000001c00004aaa0:  0x0000000000000000  0x0000000000000000\nruntime.sigpanic()\n        /usr/local/go/src/runtime/signal_unix.go:781 +0x3a9 fp=0x1c00004a9b0 sp=0x1c00004a960 pc=0x4043449\nexit status 2"
  },
  {
    "url": "https://stackoverflow.com/questions/68792621/segmentation-violation-error-when-calling-fts-open-via-cgo",
    "body": "package main\n/*\n#include <stddef.h> // for NULL\n#include <stdint.h>\n#include <stdlib.h> // for C.free\n#include <fts.h>\n#include <sys/stat.h>\nuintmax_t get_total_size(char *path)\n{\n    uintmax_t total_size = 0;\n\tchar * path_argv[2] = {path, NULL};\n    FTS *fts = fts_open(path_argv, FTS_PHYSICAL, NULL);\n    FTSENT *fent;\n    while ((fent = fts_read(fts)) != NULL)\n        if (fent->fts_info == FTS_F)\n            total_size += fent->fts_statp->st_size;\n    fts_close(fts);\n    return total_size;\n}\n*/\nimport \"C\"\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\nfunc main() {\n    cpath := C.CString(\"/usr\")\n    defer C.free(unsafe.Pointer(cpath))\n\tfmt.Println(C.get_total_size(cpath))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68792621/segmentation-violation-error-when-calling-fts-open-via-cgo",
    "body": "package main\n/*\n#include <stddef.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <fts.h>\n#include <sys/stat.h>\nuintmax_t get_total_size(char * const *path_argv)\n{\n    uintmax_t total_size = 0;\n    FTS *fts = fts_open(path_argv, FTS_PHYSICAL, NULL);\n    FTSENT *fent;\n    while ((fent = fts_read(fts)) != NULL)\n        if (fent->fts_info == FTS_F)\n            total_size += fent->fts_statp->st_size;\n    fts_close(fts);\n    return total_size;\n}\n*/\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\nfunc main() {\n\tfmt.Println(getTotalSize(\"/usr\", \"/etc\"))\n}\nfunc getTotalSize(paths ...string) uint64 {\n\targv := make([]*C.char, len(paths)+1)\n\tfor i, path := range paths {\n\t\targv[i] = C.CString(path)\n\t\tdefer C.free(unsafe.Pointer(argv[i]))\n\t}\n\treturn uint64(C.get_total_size(&argv[0]))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68503982/is-it-possible-to-assert-types-dynamically-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\ntype myStruct struct {\n\tID         int\n\tRelatedIDs []int\n}\nfunc main() {\n\ts := &myStruct{\n\t\tID:         42,\n\t\tRelatedIDs: []int{1, 1, 2, 3},\n\t}\n\terr := Deduplicate(&s.RelatedIDs)\n\tfmt.Println(err)\n\t// s.RelatedIDs = v.([]int) // << can I assert type dynamically here?\n\t// s.RelatedIDs = v.(reflect.TypeOf(s.RelatedIDs)) // does not work\n\tfmt.Printf(\"%#v\\n\", s.RelatedIDs)\n}\nfunc Deduplicate(slice interface{}) error {\n\trts := reflect.TypeOf(slice)\n\trtse := rts.Elem()\n\tif rts.Kind() != reflect.Ptr && rtse.Kind() != reflect.Slice {\n\t\treturn fmt.Errorf(\"slice has wrong type: %T\", slice)\n\t}\n\trvs := reflect.ValueOf(slice)\n\trvse := rvs.Elem()\n\tseen := make(map[interface{}]struct{})\n\tvar e int\n\tfor i := 0; i < rvse.Len(); i++ {\n\t\tv := rvse.Index(i)\n\t\tif _, ok := seen[v.Interface()]; ok {\n\t\t\tcontinue\n\t\t}\n\t\tseen[v.Interface()] = struct{}{}\n\t\trvse.Index(e).Set(v)\n\t\te++\n\t}\n\trvse.SetLen(e)\n\trvs.Elem().Set(rvse)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63895164/better-way-to-convert-slice-of-int-to-hex-value",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tprofile := []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n\tfinal := uint64(profile[0])\n\tfor i := 1; i < len(profile); i++ {\n\t\tfinal <<= 1\n\t\tfinal += uint64(profile[i])\n\t}\n\tfmt.Printf(\"%X %b\\n\", final, final)\n\t// Output: FFFFFFFFFFFF0000 1111111111111111111111111111111111111111111111110000000000000000\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62705267/unable-to-call-a-go-gin-middleware",
    "body": "package validations\nimport (\n    \"github.com/bihire/ikaze_server_app/entity\"\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n    \"gopkg.in/validator.v2\"\n)\nfunc SignupValidator(ctx *gin.Context) {\n    var user entity.User\n    // if err := ctx.ShouldBindJSON(&user); err != nil {\n    //    ctx.JSON(http.StatusBadRequest, gin.H{\n    //        \"error\": err.Error(),\n    //    })\n    // }\n    if err := validator.Validate(user); err != nil {\n        ctx.JSON(http.StatusBadRequest, gin.H{\n            \"error\": err.Error(),\n        })\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62705267/unable-to-call-a-go-gin-middleware",
    "body": "package routes\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"github.com/bihire/ikaze_server_app/service\"\n    \"github.com/bihire/ikaze_server_app/controller\"\n    \"github.com/bihire/ikaze_server_app/validations\"\n)\nvar (\n    userController controller.UserController = controller.New(UserService)\n)\nfunc Routes(route *gin.Engine) {\n    auth := route.Group(\"/api/auth\")\n    {\n\n        auth.POST(\"login\", gin.Logger(), validations.SignupValidator, func(ctx *gin.Context) {\n            ctx.JSON(200, userController.Save(ctx))\n        })\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60352263/gin-keeps-returning-204-when-uploading-file",
    "body": "func CORS() gin.HandlerFunc {\n\t// TO allow CORS\n\treturn func(c *gin.Context) {\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization, accept, origin, Cache-Control, X-Requested-With\")\n\t\tc.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS, GET, PUT, DELETE\")\n\t\tif c.Request.Method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(204)\n\t\t\treturn\n\t\t}\n\t\tc.Next()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59698933/json-cannot-unmarshal-array-into-go-value-of-type-struct",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n)\ntype TubeStatuses struct {\n\tTypeDef      []string `json:\"type\"`\n\tIDName       string   `json:\"id\"`\n\tName         string   `json:\"name\"`\n\tModeName     string   `json:\"modeName\"`\n\tDisruptions  string   `json:\"disruption\"`\n\tCreated      string   `json:\"created\"`\n\tModified     string   `json:\"modified\"`\n\tLineStatuses []struct {\n\t\tStatus []struct {\n\t\t\tTypeDef                   string `json:\"type\"`\n\t\t\tID                        int    `json:\"id\"`\n\t\t\tStatusSeverity            int    `json:\"statusSeverity\"`\n\t\t\tStatusSeverityDescription string `json:\"statusSeverityDescription\"`\n\t\t\tCreated                   string `json:\"created\"`\n\t\t\tValidityPeriods           []struct {\n\t\t\t\tPeriod struct {\n\t\t\t\t\tTypeDef  string `json: \"type\"`\n\t\t\t\t\tFromDate string `json: \"fromDate\"`\n\t\t\t\t\tToDate   string `json: \"toDate\"`\n\t\t\t\t\tIsNow    bool   `json: \"isNow\"`\n\t\t\t\t}\n\t\t\t}\n\t\t\tDisruption struct {\n\t\t\t\tTypeDef             string   `json: \"type\"`\n\t\t\t\tCategory            string   `json: \"category\"`\n\t\t\t\tCategoryDescription string   `json: \"categoryDescription\"`\n\t\t\t\tDescription         string   `json: \"description\"`\n\t\t\t\tAdditionalInfo      string   `json: \"additionalInfo\"`\n\t\t\t\tCreated             string   `json: \"created\"`\n\t\t\t\tAffectedRoutes      []string `json: \"affectedRoutes\"`\n\t\t\t\tAffectedStops       []string `json: \"affectedStops\"`\n\t\t\t\tClosureText         string   `json: closureText\"`\n\t\t\t}\n\t\t}\n\t}\n\tRouteSections json.RawMessage `json: \"routeSections\"`\n\tServiceTypes  []struct {\n\t\tService []struct {\n\t\t\tTypeDef string `json:\"type\"`\n\t\t\tName    string `json:\"name\"`\n\t\t\tURI     string `json:\"uri\"`\n\t\t}\n\t}\n\tCrowding struct {\n\t\tTypeDef string `json:\"type\"`\n\t}\n}\nfunc main() {\n\tfmt.Println(\"Now retrieving Underground line status, please wait...\")\n\t// two variables (response and error) which stores the response from e GET request\n\tgetRequest, err := http.Get(\"https://api.tfl.gov.uk/line/mode/tube/status\")\n\tif err != nil {\n\t\tfmt.Println(\"Error!\")\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(\"The status code is\", getRequest.StatusCode, http.StatusText(getRequest.StatusCode))\n\t//close - this will be done at the end of the function\n\t// it's important to close the connection - we don't want the connection to leak\n\tdefer getRequest.Body.Close()\n\t// read the body of the GET request\n\trawData, err := ioutil.ReadAll(getRequest.Body)\n\tif err != nil {\n\t\tfmt.Println(\"Error!\")\n\t\tfmt.Println(err)\n\t}\n\tts := []TubeStatuses{}\n\tjsonErr := json.Unmarshal(rawData, &ts)\n\tif jsonErr != nil {\n\t\tfmt.Println(jsonErr)\n\t}\n\t//test\n\tfmt.Println(ts[0].Name)\n\tfmt.Println(\"Welcome to the TfL Underground checker!\\nPlease enter a number for the line you want to check!\\n0 - Bakerloo\\n1 - central\\n2 - circle\\n3 - district\\n4 - hammersmith & City\\n5 - jubilee\\n6 - metropolitan\\n7 - northern\\n8 - piccadilly\\n9 - victoria\\n10 - waterloo & city\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59336520/cast-a-json-in-a-properly-struct-instead-of-use-an-interface",
    "body": "// BitfinexOrderBook is a book of orders.\ntype BitfinexOrderBook struct {\n\tAsks []BitfinexOrder `json:\"asks\"`\n\tBids []BitfinexOrder `json:\"bids\"`\n}\n// BitfinexOrder is a bitfinex order.\ntype BitfinexOrder struct {\n\tPrice     string\n\tVolume    string\n\tTimestamp time.Time\n}\n// UnmarshalJSON decode a BifinexOrder.\nfunc (b *BitfinexOrder) UnmarshalJSON(data []byte) error {\n\tvar packedData []json.Number\n\terr := json.Unmarshal(data, &packedData)\n\tif err != nil {\n\t\treturn err\n\t}\n\tb.Price = packedData[0].String()\n\tb.Volume = packedData[1].String()\n\tt, err := packedData[2].Int64()\n\tif err != nil {\n\t\treturn err\n\t}\n\tb.Timestamp = time.Unix(t, 0)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59044658/golang-resource-ownership-pattern-files-connections-close-ables",
    "body": "// Imports etc omitted for the sake of readability\nfunc PingHandler(db *sql.DB) http.Handler (\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n       if err := db.ping(); err != nil {\n          http.Error(w,e.Error(),500)\n       }\n    })\n)\nfunc main(){\n    db,_ := sql.Open(\"superdb\",os.Getenv(\"APP_DBURL\"))\n    // Note the db connection will only be closed if main exits.\n    defer db.Close()\n    // Setup the server\n    http.Handle(\"/ping\", PingHandler(db))\n    server := &http.Server{Addr: \":8080\"}\n    // Create a channel for listening on SIGINT, -TERM and -QUIT\n    stop := make(chan os.Signal, 1)\n    // Register channel to be notified on said signals\n    signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n    go func(){\n            // When we get the signal...\n            <- stop\n            ctx, _ := context.WithTimeout(context.Background(), 5*time.Second)\n            // ... we gracefully shut down the server.\n            // That ensures that no new connections, which potentially\n            // would use our db connection, are accepted.\n            if err := server.Shutdown(ctx); err != nil {\n                // handle err\n            }\n    }\n    // This blocks until the server is shut down.\n    // AFTER it is shut down, main exits, the deferred calls are executed.\n    // In this case, the database connection is closed.\n    // And it is closed only after the last handler call which uses the connection is finished.\n    // Mission accomplished.\n    server.ListenAndServe()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58175550/what-is-the-right-way-to-use-this-code-paho-mqtt-as-goroutine-and-pass-message",
    "body": "msgChan := make(chan string, 200) // Allow a queue of up to 200 messages\nvar wg sync.WaitGroup\nwg.Add(1)\ngo func(){ // go routine to send messages from channel\n    for msg := range msgChan {\n        token := c.Publish(\"logs\", 2, false, msg) // Use QOS2 is order is vital\n        token.Wait()\n        // should check for errors here\n    }\n    wg.Done()\n}()\nfor i := 0; i < 5; i++ {\n        text := fmt.Sprintf(\"this is msg #%d!\", i)\n        msgChan <- text\n    }\nclose(msgChan) // this will stop the goroutine (when all messages processed)\nwg.Wait() // Wait for all messages to be sent before exiting (may wait for ever is mqtt broker down!)"
  },
  {
    "url": "https://stackoverflow.com/questions/58175550/what-is-the-right-way-to-use-this-code-paho-mqtt-as-goroutine-and-pass-message",
    "body": "msgChan := make(chan string, 200) // Allow a queue of up to 200 messages\ndone := make(chan struct{}) // channel used to indicate when go routine has finnished\ngo func(){ // go routine to send messages from channel\n    for msg := range msgChan {\n        token := c.Publish(\"logs\", 2, false, msg) // Use QOS2 is order is vital\n        token.Wait()\n        // should check for errors here\n    }\n    close(done) // let main routine know we have finnished\n}()\nfor i := 0; i < 5; i++ {\n        text := fmt.Sprintf(\"this is msg #%d!\", i)\n        msgChan <- text\n    }\nclose(msgChan) // this will stop the goroutine (when all messages processed)\n<-done // wait for publish go routine to complete"
  },
  {
    "url": "https://stackoverflow.com/questions/57300446/how-to-view-over-thousands-of-files-in-a-directory-through-the-command-line",
    "body": "package main\nimport (\n    \"fmt\"\n    \"io\"\n    \"log\"\n    \"os\"\n    \"time\"\n)\nfunc main() {\n    dir, err := os.Open(\"/tmp\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    for {\n        files, err := dir.Readdir(10)\n        if err == io.EOF {\n            break\n        }\n        if err != nil {\n            log.Fatal(err)\n        }\n        for _, fi := range files {\n            classifier := \"\"\n            if fi.IsDir() {\n                classifier = \"/\"\n            }\n            fmt.Printf(\"%v %12d %s%s\\n\",\n                fi.ModTime().UTC().Truncate(time.Second),\n                fi.Size(),\n                fi.Name(), classifier,\n            )\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56714284/golang-encrypting-data-using-aes",
    "body": "package main\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"os\"\n)\nvar (\n\tkey       = randBytes(256 / 8)\n\tgcm       cipher.AEAD\n\tnonceSize int\n)\n// Initilze GCM for both encrypting and decrypting on program start.\nfunc init() {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\tfmt.Printf(\"Error reading key: %s\\n\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"Key: %s\\n\", hex.EncodeToString(key))\n\tgcm, err = cipher.NewGCM(block)\n\tif err != nil {\n\t\tfmt.Printf(\"Error initializing AEAD: %s\\n\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tnonceSize = gcm.NonceSize()\n}\nfunc randBytes(length int) []byte {\n\tb := make([]byte, length)\n\trand.Read(b)\n\treturn b\n}\nfunc encrypt(plaintext []byte) (ciphertext []byte) {\n\tnonce := randBytes(nonceSize)\n\tc := gcm.Seal(nil, nonce, plaintext, nil)\n\treturn append(nonce, c...)\n}\nfunc decrypt(ciphertext []byte) (plaintext []byte, err error) {\n\tif len(ciphertext) < nonceSize {\n\t\treturn nil, fmt.Errorf(\"Ciphertext too short.\")\n\t}\n\tnonce := ciphertext[0:nonceSize]\n\tmsg := ciphertext[nonceSize:]\n\treturn gcm.Open(nil, nonce, msg, nil)\n}\nfunc main() {\n\tfmt.Println(\"Encrypting...\")\n\tmsg := []byte(\"The quick brown fox jumped over the lazy dog.\")\n\tciphertext := encrypt(msg)\n\tfmt.Printf(\"Encrypted message: %v\\n\", ciphertext)\n\tfmt.Println(\"Decrypting...\")\n\tplaintext, err := decrypt(ciphertext)\n\tif err != nil {\n\t\t// Don't display this message to the end-user, as it could potentially\n\t\t// give an attacker useful information. Just tell them something like \"Failed to decrypt.\"\n\t\tfmt.Printf(\"Error decryping message: %s\\n\", err.Error())\n\t\tos.Exit(1)\n\t}\n\tfmt.Printf(\"Decrypted message: %s\\n\", string(plaintext))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55569036/how-to-list-running-instances-on-google-cloud-platform-with-go",
    "body": "package main\nimport (\n  \"golang.org/x/net/context\"\n  \"google.golang.org/api/compute/v1\"\n  \"golang.org/x/oauth2/google\"\n  \"fmt\"\n  \"strings\"\n)\nfunc main() {\n  projects := [...]string{\n    \"my-project-one\",\n    \"my-project-two\",\n  }\n  filters := [...]string{\n    \"status = RUNNING\",\n    \"name != my-uninteresting-instance-one\",\n    \"name != my-uninteresting-instance-two\",\n  }\n  ctx := context.Background()\n  client, err := google.DefaultClient(ctx,compute.ComputeScope)\n  if err != nil {\n    fmt.Println(err)\n  }\n  computeService, err := compute.New(client)\n  for _, project := range projects {\n    zoneListCall := computeService.Zones.List(project)\n    zoneList, err := zoneListCall.Do()\n    if err != nil {\n      fmt.Println(\"Error\", err)\n    } else {\n      for _, zone := range zoneList.Items {\n        instanceListCall := computeService.Instances.List(project, zone.Name)\n        instanceListCall.Filter(strings.Join(filters[:], \" \"))\n        instanceList, err := instanceListCall.Do()\n        if err != nil {\n          fmt.Println(\"Error\", err)\n        } else {\n          for _, instance := range instanceList.Items {\n            if workerType, isWorker := instance.Labels[\"worker-type\"]; isWorker {\n              m := strings.Split(instance.MachineType, \"/\")\n              fmt.Printf(\"cloud: gcp, zone: %v, name: %v, instance id: %v, machine type: %v, worker type: %v, launch time: %v\\n\",\n                zone.Name,\n                instance.Name,\n                instance.Id,\n                m[len(m)-1],\n                workerType,\n                instance.CreationTimestamp)\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55091006/is-there-a-way-to-erase-data-in-the-response-writer",
    "body": "func Test_DeleteIndex(t *testing.T) {\n    t.Run(\"Should be ok with correct setup\", func(t *testing.T) {\n\t\tsetup := &ServerSetup{\n\t\t\tMethod:   \"DELETE\",\n\t\t\tPath:     \"/test\",\n\t\t\tResponse: `{\"acknowledged\": true}`,\n\t\t}\n\t\tctx := context.Background()\n\t\tts := buildTestServer(t, []*ServerSetup{setup})\n\t\tdefer ts.Close()\n\t\tes, _ := newMockClient(ts.URL)\n\t\terr := es.deleteIndex(ctx, \"test\")\n\t\trequire.NoError(t, err)\n    })\n    t.Run(\"Shouldn't be ok with wrong setup\", func(t *testing.T) {\n\t\tsetup := &ServerSetup{\n\t\t\tMethod:   \"DELETE\",\n\t\t\tPath:     \"/test\",\n\t\t\tResponse: `{\"acknowledged\": false}`,\n\t\t}\n\t\tctx := context.Background()\n\t\tts := buildTestServer(t, []*ServerSetup{setup})\n\t\tdefer ts.Close()\n\t\tes, _ := newMockClient(ts.URL)\n\t\terr := es.deleteIndex(ctx, \"test\")\n\t\trequire.Error(t, err)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75863444/how-to-list-subnets-in-a-network-using-golang",
    "body": "func GenSubnetsInNetwork(netCIDR string, subnetMaskSize int) ([]string, error) {\n\tip, ipNet, err := net.ParseCIDR(netCIDR)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif !ip.Equal(ipNet.IP) {\n\t\treturn nil, errors.New(\"netCIDR is not a valid network address\")\n\t}\n\tnetMaskSize, _ := ipNet.Mask.Size()\n\tif netMaskSize > int(subnetMaskSize) {\n\t\treturn nil, errors.New(\"subnetMaskSize must be greater or equal than netMaskSize\")\n\t}\n\ttotalSubnetsInNetwork := math.Pow(2, float64(subnetMaskSize)-float64(netMaskSize))\n\ttotalHostsInSubnet := math.Pow(2, 32-float64(subnetMaskSize))\n\tsubnetIntAddresses := make([]uint32, int(totalSubnetsInNetwork))\n\t// first subnet address is same as the network address\n\tsubnetIntAddresses[0] = ip2int(ip.To4())\n\tfor i := 1; i < int(totalSubnetsInNetwork); i++ {\n\t\tsubnetIntAddresses[i] = subnetIntAddresses[i-1] + uint32(totalHostsInSubnet)\n\t}\n\tsubnetCIDRs := make([]string, 0)\n\tfor _, sia := range subnetIntAddresses {\n\t\tsubnetCIDRs = append(\n\t\t\tsubnetCIDRs,\n\t\t\tint2ip(sia).String()+\"/\"+strconv.Itoa(int(subnetMaskSize)),\n\t\t)\n\t}\n\treturn subnetCIDRs, nil\n}\nfunc ip2int(ip net.IP) uint32 {\n\tif len(ip) == 16 {\n\t\tpanic(\"cannot convert IPv6 into uint32\")\n\t}\n\treturn binary.BigEndian.Uint32(ip)\n}\nfunc int2ip(nn uint32) net.IP {\n\tip := make(net.IP, 4)\n\tbinary.BigEndian.PutUint32(ip, nn)\n\treturn ip\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75025877/check-whether-test-function-will-run-in-parallel",
    "body": "package para\nimport (\n    \"reflect\"\n    \"strings\"\n    \"testing\"\n)\nfunc TestParallelTrue(t *testing.T) {\n    t.Parallel()\n    if !isParallel(t) {\n        t.Errorf(\"isParallel: got = false; want = true\")\n    }\n    if !isParallel2(t) {\n        t.Errorf(\"isParallel2: got = false; want = true\")\n    }\n}\nfunc TestParallelFalse(t *testing.T) {\n    if isParallel(t) {\n        t.Errorf(\"isParallel: got = true; want = false\")\n    }\n    if isParallel2(t) {\n        t.Errorf(\"isParallel2: got = true; want = false\")\n    }\n}\n// WARNING: This is terrible and should never be used.\n// It will likely break on old or future versions of Go.\nfunc isParallel(t *testing.T) (b bool) {\n    v := reflect.ValueOf(t).Elem()\n    // Check testing.T.isParallel first.\n    isPara := v.FieldByName(\"isParallel\")\n    if isPara.IsValid() {\n        return isPara.Bool()\n    }\n    // Otherwise try testing.T.common.isParallel.\n    common := v.FieldByName(\"common\")\n    if !common.IsValid() {\n        t.Fatal(\"isParallel: unsupported testing.T implementation\")\n    }\n    isPara = common.FieldByName(\"isParallel\")\n    if !isPara.IsValid() {\n        t.Fatal(\"isParallel: unsupported testing.T implementation\")\n    }\n    return isPara.Bool()\n}\n// WARNING: This is terrible and should never be used.\n// Requires Go1.17+.\nfunc isParallel2(t *testing.T) (b bool) {\n    defer func() {\n        v := recover()\n        if v == nil {\n            return\n        }\n        if s, ok := v.(string); ok && strings.Contains(s, \"parallel tests\") {\n            b = true\n            return\n        }\n        panic(v)\n    }()\n    t.Setenv(\"_dummy\", \"value\")\n    return false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74185954/run-a-background-task-in-a-single-gofiber-process",
    "body": "func main() {\n\t// 4 procs/childs max\n\truntime.GOMAXPROCS(4)\n\t// start a cleanup cron-job\n\tif !fiber.IsChild() {\n\t\tgo cleanUp()\n\t}\n\tapp := fiber.New(fiber.Config{\n\t\tPrefork: true,\n\t})\n\tapp.Post(\"/\", handleFileupload)\n\tlog.Fatal(app.Listen(\":4000\"))\n}\nfunc cleanUp() {\n\tfmt.Println(\"Cleaning Up.. Pid:\", syscall.Getpid())\n\tfor {\n\t\t// deletes old files here\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"Cleaning Up.. Pid:\", syscall.Getpid())\n\t}\n}\nfunc handleFileupload(ctx *fiber.Ctx) error {\n\tprintln(\"Upload: pid \", syscall.Getpid())\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74185954/run-a-background-task-in-a-single-gofiber-process",
    "body": "Cleaning Up.. Pid: 27035\n ┌───────────────────────────────────────────────────┐  ┌───────────────────────────────────────────────────┐\n │                   Fiber v2.39.0                   │  │ Child PIDs ... 27041, 27042, 27044, 27045         │\n │               http://127.0.0.1:4000               │  └───────────────────────────────────────────────────┘\n │       (bound on host 0.0.0.0 and port 4000)       │\n │                                                   │\n │ Handlers ............. 1  Processes ........... 4 │\n │ Prefork ........ Enabled  PID ............. 27035 │\n └───────────────────────────────────────────────────┘\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035\nCleaning Up.. Pid: 27035"
  },
  {
    "url": "https://stackoverflow.com/questions/72472405/reflect-call-of-reflect-value-setstring-on-uint-value-on-gorm-updates-operation",
    "body": "func UpdateBlog(c *gin.Context) {\n    var blog models.Blog\n    if err := models.DB.Where(\"id = ?\", c.Param(\"id\")).First(&blog).Error; err != nil {\n        c.AbortWithStatusJSON(http.StatusNotFound, gin.H{\"error\": \"record not found\"})\n        return\n    }\n    var input UpdateBlogInput\n    if err := c.ShouldBindJSON(&input); err != nil {\n        c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n        return\n    }\n    updateBlog := models.Blog{Title: input.Title, Content: input.Content}\n    models.DB.Model(&blog).Updates(&updateBlog)\n    c.JSON(http.StatusOK, gin.H{\"data\": updateBlog})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72426628/parse-unicode-digits-in-go",
    "body": "import (\n\t\"golang.org/x/text/unicode/runenames\"\n\t\"fmt\"\n\t\"strings\"\n)\nfunc whatDigit(digit rune) int {\n\tvar name = runenames.Name(digit)\n\tswitch {\n\tcase strings.Contains(name, \"DIGIT ZERO\"):\n\t\treturn 0\n\tcase strings.Contains(name, \"DIGIT ONE\"):\n\t\treturn 1\n\tcase strings.Contains(name, \"DIGIT TWO\"):\n\t\treturn 2\n\tcase strings.Contains(name, \"DIGIT THREE\"):\n\t\treturn 3\n\tcase strings.Contains(name, \"DIGIT FOUR\"):\n\t\treturn 4\n\tcase strings.Contains(name, \"DIGIT FIVE\"):\n\t\treturn 5\n\tcase strings.Contains(name, \"DIGIT SIX\"):\n\t\treturn 6\n\tcase strings.Contains(name, \"DIGIT SEVEN\"):\n\t\treturn 7\n\tcase strings.Contains(name, \"DIGIT EIGHT\"):\n\t\treturn 8\n\tcase strings.Contains(name, \"DIGIT NINE\"):\n\t\treturn 9\n\tdefault:\n\t\treturn -1\n\t}\n\treturn 0\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71492496/unmarshaling-json-in-golang",
    "body": "func (o *OHLC) UnmarshalJSON(data []byte) error {\n    // first unmarshal the array into a slice of raw json\n\traw := []json.RawMessage{}\n\tif err := json.Unmarshal(data, &raw); err != nil {\n\t\treturn err\n\t}\n    // create a function that unmarshals each raw json element into a field\n\tunmarshalFields := func(raw []json.RawMessage, fields ...interface{}) error {\n\t\tif len(raw) != len(fields) {\n\t\t\treturn errors.New(\"bad number of elements in json array\")\n\t\t}\n\t\tfor i := range raw {\n\t\t\tif err := json.Unmarshal([]byte(raw[i]), fields[i]); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n    // call the function\n\treturn unmarshalFields(\n        raw,\n\t\t&o.Time,\n\t\t&o.Open,\n\t\t&o.High,\n\t\t&o.Low,\n\t\t&o.Close,\n\t\t&o.Vwa,\n\t\t&o.Volume,\n\t\t&o.Count,\n\t)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70813065/iterate-over-inputs-and-store-outputs-using-a-fixed-number-of-goroutines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n// 2 for testing, in the real world runtime.NumCPU() would be used\nconst cores int = 2\nvar words = []string{\"hello\", \"there\", \"this\", \"is\", \"a\", \"list\", \"of\", \"words\"}\ntype result struct {\n\tname string\n\tres  int\n}\nfunc count_letters(wg *sync.WaitGroup, cWords chan string, cResults chan result) {\n\t// Tell the waitgroup we are done once we return\n\tdefer wg.Done()\n\t// Read from cWords until it is closed, at which point we return\n\tfor word := range cWords {\n\t\ttime.Sleep(1 * time.Second)\n\t\tcResults <- result{word, len(word)}\n\t}\n}\nfunc main() {\n\tcWords := make(chan string)\n\tcResults := make(chan result)\n\t// This waitgroup will later be used to wait for all worker to be done\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < cores; i++ {\n\t\t// Add 1 before starting the goroutine\n\t\twg.Add(1)\n\t\tgo count_letters(&wg, cWords, cResults)\n\t}\n\t// Collect the results via a goroutine, since we need to submit tasks and collect results at the same time\n\tmResults := map[string]int{}\n\tgo func() {\n\t\tfor result := range cResults {\n\t\t\tmResults[result.name] = result.res\n\t\t}\n\t}()\n\t// Insert all words into the cWords chan\n\tfor _, word := range words {\n\t\tcWords <- word\n\t}\n\t// After all words have been inserted, close the channel, this will cause the workers to exit\n\t// once all words have been read from the channel\n\tclose(cWords)\n\t// Wait for all workers to be done\n\twg.Wait()\n\t// Close the results chan, this will terminate our collection go routine, good practice but not necessary in this\n\t// specific example\n\tclose(cResults)\n\t// Use the results\n\tfmt.Println(mResults)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70539909/channel-non-determinism-using-context-timeouts-deadlocks",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"golang.org/x/time/rate\"\n)\nfunc main() {\n\tmsgs := make(chan string)\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tlimiter := rate.NewLimiter(rate.Every(1*time.Second), 1)\n\tgo func() {\n\t\tfor {\n\t\t\tlimiter.Wait(context.Background())\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\tlog.Printf(\"finished!\")\n\t\t\t\treturn\n\t\t\tcase msg := <-msgs:\n\t\t\t\tlog.Printf(\"receiving a message: %s\", msg)\n\t\t\t}\n\t\t}\n\t}()\n\tdefer close(msgs)\n\tfor i := 0; i < 100000; i++ {\n\t\tselect {\n\t\tcase msgs <- fmt.Sprintf(\"sending message %d\", i):\n\t\tcase <-ctx.Done():\n\t\t\tlog.Printf(\"finished too!\")\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70327490/marshaling-json-with-nested-array",
    "body": "type Config struct {\n        Name     string        `json:\"name\"`\n        Version  string        `json:\"version\"`\n        Type     string        `json:\"type\"`\n        Settings []interface{} `json:\"settings\"`\n}\nfunc main() {\n        settings := []interface{}{\n              \"setting1\",\n              \"setting2\",\n              \"setting3\",\n              []string{\"option1\", \"option2\"},\n        }\n        c := &Config{\"val1\", \"val2\", \"val3\", settings}\n        j, err := json.Marshal(c)\n        if err != nil {\n                panic(err)\n        }\n        fmt.Println(string(j))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70031115/best-way-to-auto-generate-global-unique-identity-for-iot-devices",
    "body": "package main\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"time\"\n)\n// SHA1 hashes using sha1 algorithm\nfunc SHA1(text string) string {\n\talgorithm := sha1.New()\n\talgorithm.Write([]byte(text))\n\treturn hex.EncodeToString(algorithm.Sum(nil))\n}\nfunc main() {\n\tvar macAddress = \"00:00:00:00:00:00\"\n\tvar deviceType = \"deviceType\"\n\tvar deviceName = \"deviceName\"\n\tvar deviceModel = \"deviceModel\"\n\tvar deviceManufacturer = \"deviceManufacturer\"\n\tvar deviceVersion = \"deviceVersion\"\n\tvar deviceSerialNumber = \"deviceSerialNumber\"\n\tvar timeInMilliseconds = time.Now().UnixNano() / int64(time.Millisecond)\n\t// convert time to string\n\tvar timeString = fmt.Sprintf(\"%d\", timeInMilliseconds)\n\tvar conc = macAddress + \"-\" + deviceType + \"-\" + deviceName + \"-\" + deviceModel + \"-\" + deviceManufacturer + \"-\" + deviceVersion + \"-\" + deviceSerialNumber + \"-\" + timeString\n\t// calculate the uuid using the sha256 algorithm\n\t// and the concatenated string\n\tvar uuid = SHA1(conc)\n\tfmt.Println(uuid)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68714650/will-a-slice-allocate-a-new-memory-space-when-len-is-changed",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n    arr := make([]int,3,4)\n    arrCopy := arr\n    fmt.Println(fmt.Sprintf(\"before   len:%d,cap:%d, address:%p, data:%p\",len(arr), cap(arr), &arr, &arr[0]))\n    arr = arr[1:2]\n    fmt.Println(fmt.Sprintf(\"after    len:%d,cap:%d, address:%p, data:%p\",len(arr), cap(arr), &arr, &arr[0]))\n    arr = append(arr, arrCopy...)\n    fmt.Println(fmt.Sprintf(\"appended len:%d,cap:%d, address:%p, data:%p\",len(arr), cap(arr), &arr, &arr[0]))\n    fmt.Println(fmt.Sprintf(\"arrCopy  len:%d,cap:%d, address:%p, data:%p\",len(arrCopy), cap(arrCopy), &arrCopy, &arrCopy[0]))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68014184/unable-to-use-goroutines-concurrently-to-find-max-until-context-is-cancelled",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n)\ntype result struct {\n\tsync.RWMutex\n\tmax uint64\n}\nfunc findMax(ctx context.Context, workers int) uint64 {\n\tvar (\n\t\tres = result{}\n\t\twg  = sync.WaitGroup{}\n\t)\n\tfor i := 0; i < workers; i++ {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// RLock to read res.max\n\t\t\tres.RLock()\n\t\t\tret := res.max\n\t\t\tres.RUnlock()\n\t\t\treturn ret\n\t\tdefault:\n\t\t\twg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tnum := compute()\n\t\t\t\t// Lock so that read from res.max and write\n\t\t\t\t// to res.max is safe. Else, data race could\n\t\t\t\t// occur.\n\t\t\t\tres.Lock()\n\t\t\t\tif num > res.max {\n\t\t\t\t\tres.max = num\n\t\t\t\t}\n\t\t\t\tres.Unlock()\n\t\t\t}()\n\t\t}\n\t}\n\t// Wait for all the goroutine to finish work i.e., all\n\t// workers are done computing and updating the max.\n\twg.Wait()\n\treturn res.max\n}\nfunc compute() uint64 {\n\trnd := rand.Int63n(100)\n\ttime.Sleep(time.Duration(rnd) * time.Millisecond)\n\treturn rand.Uint64()\n}\nfunc main() {\n\tmaxDuration := 2 * time.Second\n\tconcurrency := 10\n\tctx, cancel := context.WithTimeout(context.Background(), maxDuration)\n\tdefer cancel()\n\tfmt.Println(findMax(ctx, concurrency))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66682356/how-to-embed-exit-code-in-error-to-use-when-terminating-program",
    "body": "package main\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\ntype fooErr int\nfunc (e fooErr) Error() string { return strconv.Itoa(int(e)) }\nfunc main() {\n\terrCode := 0\n\t_, err := foo()\n\tif err != nil {\n\t\tvar e fooErr\n\t\tif errors.As(err, &e) {\n\t\t\tfmt.Printf(\"error thrown, exit code: %v\", e)\n\t\t\terrCode = int(e)\n\t\t} else {\n\t\t\tfmt.Printf(\"error thrown, dont have a code: %v\", err)\n\t\t\terrCode = 1 // default code...\n\t\t}\n\t}\n\t// I can parse the exit code out of err, but that seems wrong...\n\t// how can I exit with the exit code cleanly? do i need to create a custom error that I bubble up and handle?\n\tos.Exit(errCode)\n}\nfunc foo() (string, error) {\n\t_, err := bar()\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"foo fails b/c bar fails %w\", err)\n\t}\n\treturn \"OK\", nil\n}\nfunc bar() (string, error) {\n\texitCode := fooErr(208)\n\treturn \"\", fmt.Errorf(\"some error happened in bar, exit code: %w\", exitCode)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66290197/multiple-input-checks-repeat-if-conditions-are-not-met",
    "body": "func startGame() {\n    var f float64\n    fmt.Println()\n    fmt.Print(\"Give number (1-9): \")\n    _, err := fmt.Scan(&f)\n    if err != nil {\n        fmt.Println(\"Letters or symbols not accepted\")\n        startGame()\n    }\n    if f == 0 {\n        os.Exit(0)\n    }\n    if f < 1 || f > 9 || f-math.Ceil(f) != 0 {\n        fmt.Println(\"Only integer numbers between 1-9 are accepted\")\n        startGame()\n    }\n    n := int(f)\n    if myArray[n-1] == false {\n        fmt.Println(\"Empty cell\", int(f))\n        startGame()\n    }\n}\nfunc main() {\n    startGame()\n    fmt.Println(\"good luck! bye.\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66109463/swagger-initialize-dbgorm-connection-on-every-db-call",
    "body": "type dbService struct {\n\t*gorm.DB\n}\nfunc InitDB() *dbService {\n\tdb, err := gorm.Open(...)\n\tif err != nil {\n\t\tpanic(\"failed to connect database\")\n\t}\n\tdb.AutoMigrate(&Category{}, &Company{})\n\treturn &dbService{db}\n}\nfunc (db *dbService) AddCompany(companyObj *models.Company) (*models.Company, error) {\n\tcompany := convertToDBCompany(companyObj, false)\n\tdb.FirstOrInit(company.Category, &Category{Name: companyObj.Category.Name})\n\tresult := db.Create(&company)\n\tif result.RowsAffected < 1 {\n\t\treturn nil, result.Error\n\t}\n\n   ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65819321/pass-file-pointer-to-c-function",
    "body": "package main\n// #include <stdio.h>\n// #include <stdlib.h>\n// int fileOpen(char *filename, char *mode, FILE **fp) {\n//      *fp = fopen(filename, mode);\n//      if (*fp == NULL)\n//              return -1;\n//      return 0;\n// }\n//\n// int fileread(FILE *fp, char *buff) {\n//      if ((fp != NULL) && (fgets(buff, 50, fp) != NULL)) {\n//              return 0;\n//      }\n//      return -1;\n// }\n//\n// int fileclose(FILE *fp) {\n//      fclose(fp);\n//      return 0;\n// }\nimport \"C\"\nimport (\n        \"fmt\"\n        \"unsafe\"\n)\nfunc opencfile(name string, mode string) (ret int, fp *C.FILE) {\n        cname := C.CString(name)\n        defer C.free(unsafe.Pointer(cname))\n        cmode := C.CString(mode)\n        defer C.free(unsafe.Pointer(cmode))\n        ret = int(C.fileOpen(cname, cmode, &fp))\n        return\n}\nfunc main() {\n        ret, fp := opencfile(\"file.txt\", \"w\")\n        if ret >= 0 {\n                defer C.fileclose(fp)\n        }\n        fmt.Printf(\"result of opencfile was %d\\n\", ret)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64129499/porting-php-aes-encryption-to-golang",
    "body": "package main\nimport (\n    \"bytes\"\n    \"crypto/aes\"\n    \"crypto/cipher\"\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"encoding/hex\"\n    \"io\"\n)\nfunc encrypt(plaintext, key16 string) string {\n    padded := pkcs7pad([]byte(plaintext), aes.BlockSize)\n    key, err := hex.DecodeString(key16)\n    if err != nil {\n        panic(err)\n    }\n    block, err := aes.NewCipher(key)\n    if err != nil {\n        panic(err)\n    }\n    buffer := make([]byte, aes.BlockSize+len(padded)) // IV followed by ciphertext\n    iv, ciphertext := buffer[:aes.BlockSize], buffer[aes.BlockSize:]\n    if _, err := io.ReadFull(rand.Reader, iv); err != nil {\n        panic(err)\n    }\n    mode := cipher.NewCBCEncrypter(block, iv)\n    mode.CryptBlocks(ciphertext, padded)\n    return base64.StdEncoding.EncodeToString(buffer)\n}\nfunc pkcs7pad(plaintext []byte, blockSize int) []byte {\n    padding := blockSize - len(plaintext)%blockSize\n    return append(plaintext, bytes.Repeat([]byte{byte(padding)}, padding)...)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62953360/golang-merge-deeply-two-maps",
    "body": "func mergeMaps(a, b map[interface{}]interface{}) map[interface{}]interface{} {\n\tout := make(map[interface{}]interface{}, len(a))\n\tfor k, v := range a {\n\t\tout[k] = v\n\t}\n\tfor k, v := range b {\n        // If you use map[string]interface{}, ok is always false here.\n        // Because yaml.Unmarshal will give you map[interface{}]interface{}.\n\t\tif v, ok := v.(map[interface{}]interface{}); ok {\n\t\t\tif bv, ok := out[k]; ok {\n\t\t\t\tif bv, ok := bv.(map[interface{}]interface{}); ok {\n\t\t\t\t\tout[k] = mergeMaps(bv, v)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout[k] = v\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/62089578/using-go-to-generate-hashed-password-strings-suitable-for-etc-shadow",
    "body": "package main\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"os\"\n    \"time\"\n    \"github.com/tredoe/osutil/user/crypt/sha512_crypt\"\n)\nfunc encryptPassword(userPassword string) string {\n    // Generate a random string for use in the salt\n    const charset = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    seededRand := rand.New(rand.NewSource(time.Now().UnixNano()))\n    s := make([]byte, 8)\n    for i := range s {\n        s[i] = charset[seededRand.Intn(len(charset))]\n    }\n    salt := []byte(fmt.Sprintf(\"$6$%s\", s))\n    // use salt to hash user-supplied password\n    c := sha512_crypt.New()\n    hash, err := c.Generate([]byte(userPassword), salt)\n    if err != nil {\n        fmt.Printf(\"error hashing user's supplied password: %s\\n\", err)\n        os.Exit(1)\n    }\n    return string(hash)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60688270/performance-comparison-for-concatenation-of-strings",
    "body": "func BenchmarkConcat(b *testing.B) { // 132 ns/op\n\tss := []string {\"sadsadsa\", \"dsadsakdas;k\", \"8930984\"}\n\tfor i := 0; i < b.N; i++ {\n\t\tvar s, sep string\n\t\tfor j := 0; j < len(ss); j++ {\n\t\t\ts += sep + ss[j]\n\t\t\tsep = \" \"\n\t\t}\n\t\t_ = s\n\t}\n}\nfunc BenchmarkJoin(b *testing.B) {  // 56.7 ns/op\n\tss := []string {\"sadsadsa\", \"dsadsakdas;k\", \"8930984\"}\n\tfor i := 0; i < b.N; i++ {\n\t\ts := strings.Join(ss, \" \")\n\t\t_ = s\n\t}\n}\nfunc BenchmarkBuilder(b *testing.B) { // 58.5\n\tss := []string {\"sadsadsa\", \"dsadsakdas;k\", \"8930984\"}\n\tfor i := 0; i < b.N; i++ {\n\t\tvar s strings.Builder\n\t\t// Grow builder to expected max length (maybe this\n\t\t// needs to be calculated dep. on your requirements)\n\t\ts.Grow(32)\n\t\tvar sep string\n\t\tfor j := 0; j < len(ss); j++ {\n\t\t\ts.WriteString(ss[j])\n\t\t\ts.WriteString(sep)\n\t\t\tsep = \" \"\n\t\t}\n\t\t_ = s.String()\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59417246/cant-get-docker-container-to-run-on-localhosts-it-says-connection-reset",
    "body": "# first stage - builds the binary from sources\nFROM golang:1.12.14-alpine3.10 as build\n# using build as current directory\nWORKDIR /build\n# Add the source code:\nCOPY main.go ./\n# install build deps\nRUN apk --update --no-cache add git\n# downloading dependencies and\n# building server binary\nRUN go get github.com/gorilla/mux && \\\n  go build -o server .\n# second stage - using minimal image to run the server\nFROM alpine:3.10\n# using /app as current directory\nWORKDIR /app\n# copy server binary from `build` layer\nCOPY --from=build /build/server server\n# binary to run\nCMD \"/app/server\"\nEXPOSE 8080"
  },
  {
    "url": "https://stackoverflow.com/questions/59191346/different-behaviour-of-break-vs-return-in-infinite-loop-when-implementing-io-re",
    "body": "func (rr *rot13Reader) Read(b []byte) (n int, err error) { // <-- this 'err'\n    rb := make([]byte, 8)\n    var ttl int\n    for {\n        n, err := rr.r.Read(rb) // <-- and this 'err' are different\n        if err == io.EOF {\n            return ttl, io.EOF\n            // break <----------------------------here's the problem\n        } else if err != nil {\n            panic(err)\n        } else {\n            for i, c := range rb[:n] {\n                b[i+ttl] = decodeRot13(c)\n            }\n            ttl += n\n        }\n    }\n    return ttl, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58866890/deferred-call-to-sync-waitgroup-wait-in-goroutine-why-should-this-work",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\tresults := attacks()\n\tfmt.Println(\"attacks returned\")\n\tfor result := range results {\n\t\tfmt.Println(result)\n\t}\n}\nfunc attacks() chan string {\n\t// A channel to hold the results\n\tc := make(chan string)\n\t// Fire 10 routines populating the channel\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tattack(c)\n\t\t\twg.Done()\n\t\t}()\n\t}\n\t// Close channel once routines are finished\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(c)\n\t}()\n\t//\n\treturn c\n}\nfunc attack(c chan<- string) {\n\ttime.Sleep(1 * time.Second)\n\tc <- \"foobar\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58620488/how-can-i-do-snapshot-testing",
    "body": "var update = flag.Bool(\"update\", false, \"update .golden files\")\nfunc TestProcessString(t *testing.T) {\n  vars := make(map[string]interface{})\n  vars[\"columnPrefix\"] = \"adgroup_performance_report\"\n  actual := processString(query, vars)\n  golden := filepath.Join(“testdata”, ”performance_report.golden”)\n  if *update {\n    ioutil.WriteFile(golden, actual, 0644)\n  }\n  expected, _ := ioutil.ReadFile(golden)\n\n  if !bytes.Equal(actual, expected) {\n    t.Fatalf(\"Output did not match, expected %v, recieved %v, expected, actual)\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58543328/golang-cobra-command-flags-in-common-function-not-getting-values-from-cli",
    "body": "func NewCommand(ctx context.Context) *cobra.Command {\n    var opts ListOptions\n    cmd := &cobra.Command{\n        Use:   \"list\",\n        Short: \"List\",\n        RunE: func(cmd *cobra.Command, args []string) error {\n            // fmt.Println(args) // []\n            fmt.Println(opts.IgnoreLatest, \", \", opts.IgnoreOld)\n            opts.refs = args\n            return List(ctx, gh, opts, os.Stdout)\n        },\n    }\n    cmd = GetCommandFlags(cmd, &opts)\n    return cmd\n}\n// GetListCommandFlags for list\nfunc GetCommandFlags(cmd *cobra.Command, opts *ListOptions) *cobra.Command {\n    flags := cmd.Flags()\n    flags.BoolVar(&opts.IgnoreLatest, \"ignore-latest\", false, \"Do not display latest\")\n    flags.BoolVar(&opts.IgnoreOld, \"ignore-old\", false, \"Do not display old data\")\n    return cmd\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58337535/unmarshalling-to-same-struct-but-different-json-name",
    "body": "package main\nimport (\n    \"fmt\"\n    \"encoding/json\"\n)\ntype inStruct struct {\n    SomeField   int         `json:\"abc\"`\n}\ntype outStruct struct {\n    SomeField   int         `json:\"xyz\"`\n}\nfunc main(){\n    jsonData := []byte(`{\"abc\":1}`)\n    strct := inStruct{}\n    if err := json.Unmarshal(jsonData, &strct); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Edit to reflect mkopriva's comment\n\t// outStruct := &outStruct{SomeField: strct.SomeField}\n\toutStruct := outStruct(strct)\n    x, err := json.Marshal(outStruct)\n    if err != nil {\n\t\tlog.Fatal(err)\n    }\n    finalValue := string(x)\n    fmt.Println(finalValue)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57085778/how-to-upload-images-to-s3-via-react-axios-and-golang-gin",
    "body": "//React\n    const data = {\n      title: this.state.title,\n      content: this.state.content,\n    };\n    const res = await axios.post('http://localhost:2345/api/post', data);\n    const formData = new FormData();\n    for (var i in this.state.files) {\n      formData.append('images[]', this.state.files[i]);\n    }\n    const resImageNames = await axios.post(\n      'http://localhost:2345/api/post/image',\n      formData,\n      {\n        headers: {'Content-Type': 'multipart/form-data'},\n      }\n    );\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/57085778/how-to-upload-images-to-s3-via-react-axios-and-golang-gin",
    "body": "//Golang\n        api.POST(\"/post\", func(c *gin.Context) {\n            u, err := uuid.NewRandom()\n            if err != nil {\n                fmt.Println(err)\n                return\n            }\n            uu := u.String()\n            var article Article\n            c.BindJSON(&article)\n            ins, err := db.Prepare(\"INSERT INTO articles(uuid, title,content) VALUES(?,?,?)\")\n            if err != nil {\n                log.Fatal(err)\n            }\n            ins.Exec(uu, article.TITLE, article.CONTENT)\n            c.JSON(http.StatusOK, gin.H{\"uuid\": uu})\n        })\n        api.POST(\"/post/image\", func(c *gin.Context) {\n            creds := credentials.NewStaticCredentials(awsAccessKeyID, awsSecretAccessKey, token)\n            cfg := aws.NewConfig().WithRegion(\"ap-northeast-1\").WithCredentials(creds)\n            svc := s3.New(session.New(), cfg)\n            form, _ := c.MultipartForm()\n            files := form.File[\"images[]\"]\n            var imageNames []ImageName\n            imageName := ImageName{}\n            for _, file := range files {\n                f, err := file.Open()\n                if err != nil {\n                    log.Println(err)\n                }\n                defer f.Close()\n                size := file.Size\n                buffer := make([]byte, size)\n                f.Read(buffer)\n                fileBytes := bytes.NewReader(buffer)\n                fileType := http.DetectContentType(buffer)\n                path := \"/media/\" + file.Filename\n                params := &s3.PutObjectInput{\n                    Bucket:        aws.String(\"article-s3-jpskgc\"),\n                    Key:           aws.String(path),\n                    Body:          fileBytes,\n                    ContentLength: aws.Int64(size),\n                    ContentType:   aws.String(fileType),\n                }\n                resp, err := svc.PutObject(params)\n                fmt.Printf(\"response %s\", awsutil.StringValue(resp))\n                imageName.NAME = file.Filename\n                imageNames = append(imageNames, imageName)\n            }\n            c.JSON(http.StatusOK, imageNames)\n        })"
  },
  {
    "url": "https://stackoverflow.com/questions/56746206/create-goroutine-and-set-maximum-goroutines",
    "body": "package main\nimport \"fmt\"\ntype handler struct {\n        workStream chan int\n}\nfunc (h handler) handle() {\n        for w := range h.workStream {\n                fmt.Printf(\"do some work with %d\\n\", w)\n        }\n}\nfunc main() {\n        h := handler{\n                workStream: make(chan int),\n        }\n        // run goroutines as much as you want\n        for i := 0; i < 5; i++ {\n                go h.handle()\n        }\n        for i := 0; i < 1000; i++ {\n                h.workStream <- i\n        }\n        close(h.workStream) // by closing this channel all goroutines all killed\n        // TODO: wait for all goroutines to die\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56410895/resize-image-before-sending",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/draw\"\n\t\"image/jpeg\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math\"\n\t\"os\"\n)\nfunc main() {\n\tf, err := os.Open(\"resources/image.jpg\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t//encoding message is discarded, because OP wanted only jpg, else use encoding in resize function\n\timg, _, err := image.Decode(f)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t//this is the resized image\n\tresImg := resize(img, 20, 20)\n\t//this is the resized image []bytes\n\timgBytes := imgToBytes(resImg)\n\t//optional written to file\n\terr = ioutil.WriteFile(\"resources/test.jpg\", imgBytes, 0777)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc resize(img image.Image, length int, width int) image.Image {\n\t//truncate pixel size\n\tminX := img.Bounds().Min.X\n\tminY := img.Bounds().Min.Y\n\tmaxX := img.Bounds().Max.X\n\tmaxY := img.Bounds().Max.Y\n\tfor (maxX-minX)%length != 0 {\n\t\tmaxX--\n\t}\n\tfor (maxY-minY)%width!= 0 {\n\t\tmaxY--\n\t}\n\tscaleX := (maxX - minX) / length\n\tscaleY := (maxY - minY) / width\n\timgRect := image.Rect(0, 0, length, width)\n\tresImg := image.NewRGBA(imgRect)\n\tdraw.Draw(resImg, resImg.Bounds(), &image.Uniform{C: color.White}, image.ZP, draw.Src)\n\tfor y := 0; y < width; y += 1 {\n\t\tfor x := 0; x < length; x += 1 {\n\t\t\taverageColor := getAverageColor(img, minX+x*scaleX, minX+(x+1)*scaleX, minY+y*scaleY, minY+(y+1)*scaleY)\n\t\t\tresImg.Set(x, y, averageColor)\n\t\t}\n\t}\n\treturn resImg\n}\nfunc getAverageColor(img image.Image, minX int, maxX int, minY int, maxY int) color.Color {\n\tvar averageRed float64\n\tvar averageGreen float64\n\tvar averageBlue float64\n\tvar averageAlpha float64\n\tscale := 1.0 / float64((maxX-minX)*(maxY-minY))\n\tfor i := minX; i < maxX; i++ {\n\t\tfor k := minY; k < maxY; k++ {\n\t\t\tr, g, b, a := img.At(i, k).RGBA()\n\t\t\taverageRed += float64(r) * scale\n\t\t\taverageGreen += float64(g) * scale\n\t\t\taverageBlue += float64(b) * scale\n\t\t\taverageAlpha += float64(a) * scale\n\t\t}\n\t}\n\taverageRed = math.Sqrt(averageRed)\n\taverageGreen = math.Sqrt(averageGreen)\n\taverageBlue = math.Sqrt(averageBlue)\n\taverageAlpha = math.Sqrt(averageAlpha)\n\taverageColor := color.RGBA{\n\t\tR: uint8(averageRed),\n\t\tG: uint8(averageGreen),\n\t\tB: uint8(averageBlue),\n\t\tA: uint8(averageAlpha)}\n\treturn averageColor\n}\nfunc imgToBytes(img image.Image) []byte {\n\tvar opt jpeg.Options\n\topt.Quality = 80\n\tbuff := bytes.NewBuffer(nil)\n\terr := jpeg.Encode(buff, img, &opt)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn buff.Bytes()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/56272492/get-output-of-syscall-createprocess",
    "body": "func main() {\n    var command = \"ping 127.0.0.1 && exit\"\n    var (\n        sI syscall.StartupInfo\n        pI syscall.ProcessInformation\n        stdOutPipeRead  windows.Handle\n        stdOutPipeWrite windows.Handle\n\t    stdErrPipeRead  windows.Handle\n\t    stdErrPipeWrite windows.Handle\n\t    stdInPipeRead   windows.Handle\n\t    stdInPipeWrite  windows.Handle\n    )\n    sa := windows.SecurityAttributes {\n\t    Length:             uint32(unsafe.Sizeof(windows.SecurityAttributes{})),\n\t    SecurityDescriptor: nil,\n\t    InheritHandle:      1, //true\n    }\n    windows.CreatePipe(&stdOutPipeRead, &stdOutPipeWrite, &sa, 0)\n    windows.CreatePipe(&stdErrPipeRead, &stdErrPipeWrite, &sa, 0)\n    windows.CreatePipe(&stdWritePipeRead, &stdWritePipeWrite, &sa, 0)\n    sI.Flags = windows.STARTF_USESTDHANDLES\n    sI.StdErr = stdErrPipeWrite\n    sI.StdOutput = stdOutPipeWrite\n    sI.StdInput = stdOutPipeRead\n    argv := windows.StringToUTF16Ptr(os.Getenv(\"windir\")+\"\\\\system32\\\\cmd.exe /C \" +     command)\n    windows.CreateProcess(\n        nil,\n        argv,\n        nil,\n        nil,\n        true,\n        0x08000000,\n        nil,\n        nil,\n        &sI,\n        &pI)\n    windows.CloseHandle(stdOutPipeWrite)\n    windows.CloseHandle(stdErrPipeWrite)\n    windows.CloseHandle(stdInPipeWrite)\n    stdErr := readPipe(stdErrPipeRead)\n    stdOut := readPipe(stdOutPipeRead)\n    windows.CloseHandle(stdOutPipeRead)\n    windows.CloseHandle(stdErrPipeRead)\n    windows.CloseHandle(stdInPipeWrite)\n}\nfunc readPipe(pipe windows.Handle) string {\n\tresult := \"\"\n\tbuf := make([]byte, 1024+1)\n\tvar read int = 0\n\terr := windows.ReadFile(pipe, &buf[0], 1024, &read), 0)\n    // read until you receive a broken pipe error\n\tfor err == nil {\n\t\tresult += string(buf[:read])\n\t\terr = windows.ReadFile(pipe, &buf[0], 1024, &read), 0)\n\t}\n\treturn result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55487019/aws-golang-sdk-fails-to-copy-object-when-the-key-contains-arabic-characters",
    "body": "import \"net/url\"\nfunc copyObject(existingKey, key string, svc *s3.S3) {\n    // existingKey is source bucket and key name separated by \"/\"\n    e := url.QueryEscape(existingKey)\n    copyObjectInput := &s3.CopyObjectInput{\n        Bucket:     aws.String(\"dummy-bucket\"),\n        CopySource: aws.String(e),\n        Key:        aws.String(key),\n    }\n    result, err := svc.CopyObject(copyObjectInput)\n    if err != nil {\n        log.Fatal(\"Copy failed due to: \", err) // logs the above error here\n    }\n    spew.Dump(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78087167/how-to-properly-let-goroutine-finish-gracefully-when-main-is-interrupted",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc work(ctx context.Context, number int, wg *sync.WaitGroup) {\n\t// We use a wait group to ensure that main blocks until the work has finished.\n\tdefer wg.Done()\n\tfmt.Printf(\"worker %d starting its loop\\n\", number)\nout:\n\tfor {\n\t\tselect {\n\t\t// We simply reuse the context to check if the work should stop.\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Println(\"ctx.Done() inside work\")\n\t\t\tbreak out\n\t\tdefault:\n\t\t\ttime.Sleep(time.Second)\n\t\t\tfmt.Printf(\"work heartbeat from worker %d\\n\", number)\n\t\t}\n\t}\n\tfmt.Printf(\"worker %d finished\\n\", number)\n}\nvar wg sync.WaitGroup\nfunc main() {\n\t// No need to use channels here, we can use the context directly.\n\tctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\n\tdefer stop()\n\tfor i := 0; i < 3; i++ {\n\t\t// Add 1 for each goroutine we start.\n\t\twg.Add(1)\n\t\tgo work(ctx, i, &wg)\n\t}\n\t// We received a signal, cancel the context.\n\tsig := <-ctx.Done()\n\tfmt.Printf(\"Got signal: %v\\n\", sig)\n\tfmt.Println(\"ctx.Done() inside main\")\n\t// We ensure that the work has finished before exiting.\n\twg.Wait()\n\tfmt.Println(\"Main finished\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77184418/when-a-recover-is-no-op",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\tdefer func() {\n\t\tfmt.Println(recover()) // catch panic(1)\n\t}()\n\tdefer func() {\n\t\tfmt.Println(\"a\")\n\t\tdefer fmt.Println(fmt.Println(\"a1\")) // The \"a1\" will print between a and b (note `3 nil` will be printed later, this is the return from the inner fmt.Println)\n\t\tdefer fmt.Println(recover())         // catch panic(2)\n\t\tfmt.Println(\"b\")\n\t\tdefer panic(1)\n\t\tfmt.Println(\"c\")\n\t\trecover() // no-op - B, should be called inside deferred function,\n\t}()\n\tdefer recover() // no-op - A, should be called inside deferred function,\n\tpanic(2)\n\t// Output:\n\t// a\n\t// a1\n\t// b\n\t// c\n\t// 2\n\t// 3 <nil>\n\t// 1\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76187353/need-help-implementing-a-scheduler-picking-jobs-from-a-sql-database",
    "body": "WITH cte AS (\n    -- this is needed only because PostgreSQL doesn't\n    -- support the LIMIT clause in UPDATE queries\n    SELECT * FROM orders WHERE status = 'PENDING' LIMIT 200\n)\n-- use UPDATE-RETURNING to first change\n-- the status and then retrieve the rows\nUPDATE orders AS o SET status='PROCESSING'\n-- you can use this column, together with the status column,\n-- to later determine if some orders were left in limbo because\n-- of a crash *after* they were sent off to the processor\n, updated_at=now()\n-- use the CTE result to limit the update to\n-- the 200 rows selected in the WITH query above\nFROM cte WHERE o.id=cte.id\n-- make sure that this worker ignores rows that\n-- were, in the meantime, updated by another worker\n--\n-- this works because the workers will re-check\n-- the WHERE condition after the lock is released,\n-- (see the linked answer below)\nAND o.status='PENDING'\n-- return the matched & updated set/subset of rows\nRETURNING o.*;"
  },
  {
    "url": "https://stackoverflow.com/questions/76012331/how-would-these-go-structs-look-as-postgres-tables",
    "body": "Author is one to many comments\nAuthor is one to many posts\nA Post has many comments\nA Post has one author\nA comment belongs to a post\nA comment belongs to an author\nCREATE TABLE IF NOT EXISTS authors (\n  id UUID PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  votes INT NOT NULL\n);\nCREATE TABLE IF NOT EXISTS comments (\n  id UUID PRIMARY KEY,\n  post_id UUID NOT NULL REFERENCES posts(id),\n  author_id UUID NOT NULL REFERENCES authors(id),\n  content VARCHAR(255) NOT NULL,\n  votes INT NOT NULL\n);\nCREATE TABLE IF NOT EXISTS posts (\n  id UUID PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  content TEXT NOT NULL,\n  author_id UUID NOT NULL REFERENCES authors(id),\n  votes INT NOT NULL,\n  created_at TIMESTAMPTZ NOT NULL\n);"
  },
  {
    "url": "https://stackoverflow.com/questions/75081380/generated-valid-label-value-kubernetes",
    "body": "package main\nimport (\n        \"regexp\"\n        \"strings\"\n        \"fmt\"\n)\nfunc generateLabel(input string) string {\n    input = strings.Replace(input, \" \", \"-\", -1)\n    re := regexp.MustCompile(\"[^a-zA-Z0-9-]\")\n    input = re.ReplaceAllString(input, \"\")\n    re = regexp.MustCompile(\"^[^a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$\")\n    input = re.ReplaceAllString(input, \"\")\n    return \"api-label=\" + input\n}\nfunc main() {\n    label := generateLabel(\"Dedicated Server 1U\")\n    fmt.Println(label) // Output: \"api-label=Dedicated-Server-1U\"\n    label1 := generateLabel(\"Dedicated&test\")\n    fmt.Println(label1) // Output: \"api-label=Dedicatedtest\"\n    label2 := generateLabel(\"Dedicated,test##&(*!great\")\n    fmt.Println(label2) // Output: \"api-label=Dedicatedtestgreat\"\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73175042/hhmmss-to-time-time-while-parsing-from-json-in-go",
    "body": "type SomeType struct {\n\tName string    `json:\"name\"`\n\tTime time.Time `json:\"someTime\"`\n}\nfunc (st *SomeType) UnmarshalJSON(data []byte) error {\n\ttype parseType struct {\n\t\tName string `json:\"name\"`\n\t\tTime string `json:\"someTime\"`\n\t}\n\tvar res parseType\n\tif err := json.Unmarshal(data, &res); err != nil {\n\t\treturn err\n\t}\n\tparsed, err := time.Parse(\"15:04:05\", res.Time)\n\tif err != nil {\n\t\treturn err\n\t}\n\tnow := time.Now()\n\tst.Name = res.Name\n\tst.Time = time.Date(now.Year(), now.Month(), now.Day(), parsed.Hour(), parsed.Minute(), parsed.Second(), 0, now.Location())\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72827584/how-can-i-edit-my-code-to-concurrency-using-in-go",
    "body": "func getIPSetInfo(ipsetIds []string) []IpsetInfo {\n    mu := &sync.Mutex{}\n    var wg sync.WaitGroup\n\n    var result []IpsetInfo\n\n    call := func(val string){\n        defer wg.Done()\n\n        url := \"https://api-cloud-platform.com/cloudapi/1.0.0/firewallGroups/\" + val\n        _, body := httpGet(url, map[string]string{\n            \"Authorization\": \"Bearer \" + accessToken,\n        })\n        var x IpsetInfo\n        json.Unmarshal([]byte(body), &x)\n\n        mu.Lock()\n        defer mu.Unlock()\n\n        result = append(result, x)\n    }\n\n    for _, val := range ipsetIds {\n        wg.Add(1)\n        go call(val)\n    }\n    wg.Wait()\n    return result\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72778820/how-to-build-a-nested-json-object-recursively-from-a-nested-struct-in-golang",
    "body": "func main() {\n\tinfo := MakeTypeInfo(\"DeviceEnvironment\", DeviceEnv{})\n\tb, err := json.MarshalIndent(info, \"\", \"  \")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"%s\\n\", b)\n}\ntype TypeInfo struct {\n\tName   string     `json:\"Name\"`\n\tType   string     `json:\"Type\"`\n\tFields []TypeInfo `json:\"Fields,omitempty\"`\n}\nfunc MakeTypeInfo(name string, value interface{}) TypeInfo {\n\treturn makeTypeInfo(name, reflect.TypeOf(value))\n}\nfunc makeTypeInfo(name string, t reflect.Type) TypeInfo {\n\tkind := t.Kind()\n\tswitch kind {\n\tcase reflect.Struct:\n\t\tvar fields []TypeInfo\n\t\tfor i := 0; i < t.NumField(); i++ {\n\t\t\tfield := t.Field(i)\n\t\t\tfields = append(fields, makeTypeInfo(field.Name, field.Type))\n\t\t}\n\t\treturn TypeInfo{Name: name, Type: kind.String(), Fields: fields}\n\tcase reflect.Pointer:\n\t\treturn makeTypeInfo(name, t.Elem())\n\tdefault:\n\t\treturn TypeInfo{Name: name, Type: kind.String()}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72157490/how-to-use-the-aws-blockchain-service-with-go-ethereum",
    "body": "package transport\nimport (\n\t\"context\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"time\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n\t\"github.com/gorilla/websocket\"\n)\nfunc NewWebSocketDialer(config aws.Config) (*websocket.Dialer, error) {\n\treturn &websocket.Dialer{\n\t\tHandshakeTimeout: 45 * time.Second,\n\t\tProxy: func(request *http.Request) (*url.URL, error) {\n\t\t\tcredentials, err := config.Credentials.Retrieve(request.Context())\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\t// Because AWS may sign some unrelated headers and cause authentication failure, you need to create a blank request.\n\t\t\tinternalRequest, err := http.NewRequest(http.MethodGet, request.URL.String(), nil)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\theader := request.Header.Clone()\n\t\t\thash := sha256.New()\n\t\t\tsigner := v4.NewSigner()\n\t\t\tif err := signer.SignHTTP(context.Background(), credentials, internalRequest, hex.EncodeToString(hash.Sum(nil)), \"managedblockchain\", config.Region, time.Now()); err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\trequest.Header = internalRequest.Header\n\t\t\trequest.Header.Set(\"Connection\", header[\"Connection\"][0])\n\t\t\trequest.Header.Set(\"Sec-WebSocket-Key\", header[\"Sec-WebSocket-Key\"][0])\n\t\t\trequest.Header.Set(\"Sec-WebSocket-Version\", header[\"Sec-WebSocket-Version\"][0])\n\t\t\trequest.Header.Set(\"Upgrade\", header[\"Upgrade\"][0])\n\t\t\treturn http.ProxyFromEnvironment(request)\n\t\t},\n\t}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72157490/how-to-use-the-aws-blockchain-service-with-go-ethereum",
    "body": "package transport\nimport (\n\t\"compress/gzip\"\n\t\"context\"\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"encoding/hex\"\n\t\"io\"\n\t\"net/http\"\n\t\"time\"\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/aws/signer/v4\"\n)\nvar _ http.RoundTripper = &httpRoundTripper{}\ntype httpRoundTripper struct {\n\tconfig aws.Config\n}\nfunc (h httpRoundTripper) RoundTrip(request *http.Request) (*http.Response, error) {\n\tcredentials, err := h.config.Credentials.Retrieve(request.Context())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tinternalRequest := request.Clone(request.Context())\n\tbodyReader, err := request.GetBody()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\thash := sha256.New()\n\tif _, err := io.Copy(hash, bodyReader); err != nil {\n\t\treturn nil, err\n\t}\n\tsigner := v4.NewSigner()\n\tif err := signer.SignHTTP(context.Background(), credentials, internalRequest, hex.EncodeToString(hash.Sum(nil)), \"managedblockchain\", h.config.Region, time.Now()); err != nil {\n\t\treturn nil, err\n\t}\n\tresponse, err := h.config.HTTPClient.Do(internalRequest)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif response.Header.Get(\"Content-Type\") == \"gzip\" {\n\t\tgzipReader, err := gzip.NewReader(base64.NewDecoder(base64.StdEncoding, response.Body))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\trequest.Header.Set(\"Content-Type\", \"application/json\")\n\t\tresponse.Body = gzipReader\n\t}\n\treturn response, nil\n}\nfunc NewHttpRoundTripper(cfg aws.Config) http.RoundTripper {\n\treturn httpRoundTripper{\n\t\tconfig: cfg,\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71243439/how-to-define-a-generic-types-that-will-hold-many-other-diferent-types",
    "body": "type Data struct {\n  Item interface{}\n}\ntype dataMarshal struct {\n   Item map[string]json.RawMessage\n}\n// Map JSON keys to factory functions\nvar factory:=map[string]func()interface{} {\n   \"user\": func() interface{} { return &GetUser{} },\n   \"event\": func() interface{} {return &GetEvent{} },\n}\nfunc (d *Data) UnmarshalJSON(in []byte) error {\n  var data dataMarshal\n  // Unmarshal data with key and raw message\n  err:=json.Unmarshal(in,&data)\n  for k,v:=range data.Item {\n     // Based on the key, create a new object\n     obj:=factory[k]()\n      // Unmarshal new object\n     err:=json.Unmarshal(v,obj)\n     d.Item=obj\n  }\n  return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71037981/how-do-i-take-a-set-of-arrays-strings-and-create-a-multidimensional-slice-of-t",
    "body": "package main\nimport \"fmt\"\nfunc AppendSlice(source [][]string, value []string) [][]string {\n\treturn append(source, value)\n}\nfunc main() {\n\tarray1 := []string{\"x\", \"o\", \"x\", \"_\", \"_\"}\n\tarray2 := []string{\"0\", \"o\", \"x\", \"_\", \"_\"}\n\tarray3 := []string{\"o\", \"o\", \"o\", \"_\", \"_\"}\n\tarray4 := []string{\"o\", \"o\", \"o\", \"o\", \"o\"}\n\tvar finalArray [][]string\n\tfinalArray = AppendSlice(finalArray, array1)\n\tfinalArray = AppendSlice(finalArray, array2)\n\tfinalArray = AppendSlice(finalArray, array3)\n\tfinalArray = AppendSlice(finalArray, array4)\n\t// [[x o x _ _] [0 o x _ _] [o o o _ _] [o o o o o]]\n\tfmt.Println(finalArray)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70877203/using-setting-up-user-authentication-for-sqlite3-in-golang",
    "body": "package main\nimport (\n        \"database/sql\"\n        \"log\"\n        \"github.com/mattn/go-sqlite3\"\n)\nfunc main() {\n        // This is not necessary; just to see if auth extension is enabled\n        sql.Register(\"sqlite3_log\", &sqlite3.SQLiteDriver{\n                ConnectHook: func(conn *sqlite3.SQLiteConn) error {\n                        log.Printf(\"Auth enabled: %v\\n\", conn.AuthEnabled())\n                        return nil\n                },\n        })\n        // This is usual DB stuff (except with our sqlite3_log driver)\n        db, err := sql.Open(\"sqlite3_log\", \"file:test.db?_auth&_auth_user=admin&_auth_pass=admin\")\n        if err != nil {\n                log.Fatal(err)\n        }\n        defer db.Close()\n        _, err = db.Exec(`select 1`)\n        if err != nil {\n                log.Fatal(err)\n        }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70728451/how-to-use-env-vars-in-golang-to-pass-db-connection-values-dynamically-when-depl",
    "body": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: go-demo-app\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: go-demo-app\n  template:\n    metadata:\n      labels:\n        app: go-demo-app\n    spec:\n      containers:\n        - name: go-demo-app\n          image: dockerhub/go-api:latest\n          resources: {}\n          ports:\n            - containerPort: 8001\n          env:\n            - name: DB_USER\n              value: username\n            - name: DB_PASSWORD\n              value: password\n            - name: DB_NAME\n              value: db_name\n            - name: DB_HOST\n              value: db_server_name\n            - name: DB_PORT\n              value: \"3306\""
  },
  {
    "url": "https://stackoverflow.com/questions/70632776/golang-slice-performance-append-has-better-performance-than-assign",
    "body": "package main_test\nimport \"testing\"\nfunc BenchmarkMerge1(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tnum1 := []int{1, 2, 3}\n\t\tnum2 := []int{4, 5, 6}\n\t\tmerge1(num1, len(num1), num2, len(num2))\n\t}\n}\nfunc merge1(nums1 []int, m int, nums2 []int, n int) {\n\ttmpSlice := make([]int, m+n)\n\ttmpIndex := 0\n\tindex1 := 0\n\tindex2 := 0\n\tfor index1 < m {\n\t\tvalue1 := nums1[index1]\n\t\tfor index2 < n {\n\t\t\tvalue2 := nums2[index2]\n\t\t\tif value1 <= value2 {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\ttmpSlice[tmpIndex] = value2 // <-- Assign\n\t\t\t\tindex2++\n\t\t\t\ttmpIndex++\n\t\t\t}\n\t\t}\n\t\ttmpSlice[tmpIndex] = value1 // <-- Assign\n\t\tindex1++\n\t\ttmpIndex++\n\t}\n\tcopy(nums1, tmpSlice[:tmpIndex])\n\tcopy(nums1[tmpIndex:], nums2[index2:])\n}\nfunc BenchmarkMerge2(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tnum1 := []int{1, 2, 3}\n\t\tnum2 := []int{4, 5, 6}\n\t\tmerge2(num1, len(num1), num2, len(num2))\n\t}\n}\nfunc merge2(nums1 []int, m int, nums2 []int, n int) {\n\ttmpSlice := make([]int, 0, m+n)\n\ttmpIndex := 0\n\tindex1 := 0\n\tindex2 := 0\n\tfor index1 < m {\n\t\tvalue1 := nums1[index1]\n\t\tfor index2 < n {\n\t\t\tvalue2 := nums2[index2]\n\t\t\tif value1 <= value2 {\n\t\t\t\tbreak\n\t\t\t} else {\n\t\t\t\ttmpSlice = append(tmpSlice, value2) // <-- Append\n\t\t\t\tindex2++\n\t\t\t\ttmpIndex++\n\t\t\t}\n\t\t}\n\t\ttmpSlice = append(tmpSlice, value1) // <-- Append\n\t\tindex1++\n\t\ttmpIndex++\n\t}\n\tcopy(nums1, tmpSlice[:tmpIndex])\n\tcopy(nums1[tmpIndex:], nums2[index2:])\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70617528/add-custom-field-only-to-error-logs-in-logrus",
    "body": "type ErrorHook struct {\n}\nfunc (h *ErrorHook) Levels() []logrus.Level {\n    // fire only on ErrorLevel (.Error(), .Errorf(), etc.)\n\treturn []logrus.Level{logrus.ErrorLevel}\n}\nfunc (h *ErrorHook) Fire(e *logrus.Entry) error {\n    // e.Data is a map with all fields attached to entry\n\tif _, ok := e.Data[\"severity\"]; !ok {\n\t\te.Data[\"severity\"] = \"normal\"\n\t}\n\treturn nil\n}\nfunc main() {\n\tlogrus.AddHook(&ErrorHook{})\n\tlogrus.WithFields(logrus.Fields{\"animal\": \"walrus\"}).Info(\"A walrus appears\")\n    // time=\"2009-11-10T23:00:00Z\" level=info msg=\"A walrus appears\" animal=walrus\n\tlogrus.WithFields(logrus.Fields{\"animal\": \"walrus\"}).Error(\"A error walrus appears\")\n    // time=\"2009-11-10T23:00:00Z\" level=error msg=\"A error walrus appears\" animal=walrus severity=normal\n\tlogrus.WithFields(logrus.Fields{\"animal\": \"walrus\", \"severity\": \"high\"}).Error(\"An overriden severity error walrus appears\")\n    // time=\"2009-11-10T23:00:00Z\" level=error msg=\"An overriden severity error walrus appears\" animal=walrus severity=high\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70087184/why-does-uploading-files-2-5-mib-or-larger-cause-a-connection-reset",
    "body": "const MAX_UPLOAD_SIZE = 1<<20\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n    // Wrap the body in a reader that will error at MAX_UPLOAD_SIZE\n    r.Body = http.MaxBytesReader(w, r.Body, MAX_UPLOAD_SIZE)\n    // Read the body as normal. Check for an error.\n    if err := r.ParseMultipartForm(MAX_UPLOAD_SIZE); err != nil {\n        // We're assuming it errored because the body is too large.\n        // There are other reasons it could error, you'll have to\n        // look at err to figure that out.\n        log.Println(\"File too large\")\n        http.Error(w, \"Your file is too powerful\", http.StatusRequestEntityTooLarge)\n        return\n    }\n    fmt.Fprintf(w, \"Upload successful\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70064438/echo-text-to-a-file-in-golang",
    "body": "const tmpl = `apiVersion: 1\ndeleteDatasources:\n  - name: Clickhouse\n    orgId: 1\ndatasources:\n  - name: Clickhouse\n    type: vertamedia-clickhouse-datasource\n    access: proxy\n    url: http://localhost:8123\n    basicAuth: 1\n    basicAuthUser: default\n    basicAuthPassword: %s\n    isDefault: false\n    defaultDatabase:\n`\nfd, err := os.OpenFile(\"/etc/grafana/provisioning/datasources/datasource.yml\",\nos.O_WRONLY|os.O_TRUNC, 0666)\nif err != nil {\n  log.Fatal(err)\n}\ndefer fd.Close()\n_, err := fmt.Fprintf(tmpl, password)\nif err != nil {\n  log.Fatal(err)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69921936/dockerizing-go-api-not-working-without-setting-up-git-project-repo",
    "body": "> pattern:\n> \t{ term }\n> term:\n> \t'*'         matches any sequence of non-Separator characters\n> \t'?'         matches any single non-Separator character\n> \t'[' [ '^' ] { character-range } ']'\n> \t            character class (must be non-empty)\n> \tc           matches character c (c != '*', '?', '\\\\', '[')\n> \t'\\\\' c      matches character c\n>\n> character-range:\n> \tc           matches character c (c != '\\\\', '-', ']')\n> \t'\\\\' c      matches character c\n> \tlo '-' hi   matches character c for lo <= c <= hi\n>"
  },
  {
    "url": "https://stackoverflow.com/questions/69654128/using-maps-with-any-value-type-as-function-parameter",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tv := make(map[string]int)\n\tv[\"blah\"] = 3\n\ttest(v)\n\tw := make(map[string]string)\n\tw[\"next\"] = \"string\"\n\ttest(w)\n\tx := make(map[string]bool)\n\tx[\"panic\"] = true\n\ttest(x)\n}\nfunc test(in interface{}) {\n\tswitch z := in.(type) {\n\tcase map[string]int:\n\t\tfmt.Printf(\"dealing with map[string]int: %v\\n\", z)\n\tcase map[string]string:\n\t\tfmt.Printf(\"dealing with map[string]string: %v\\n\", z)\n\tdefault:\n\t\tpanic(fmt.Sprintf(\"unsupported type: %T\", z))\n\t}\n\t// You could also use reflection here...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69589522/in-saml-what-are-the-actions-that-need-to-be-performed-in-the-client-and-servic",
    "body": "type Logout struct {\n\tSP *samlsp.Middleware\n}\nfunc (l *Logout) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n      //Get the JWT information\n\tsession, err := l.SP.Session.GetSession(r)\n\tif err != nil {\n\t\tWebErrorWarn(\"error get signouturl session: \"+err.Error(), http.StatusForbidden, w)\n\t\treturn\n\t}\n       //Get the JWT information part 2\n\tattr := session.(samlsp.JWTSessionClaims)\n\tif err != nil {\n\t\tWebErrorWarn(\"error get signouturl session claims: \"+err.Error(), http.StatusForbidden, w)\n\t\treturn\n\t}\n\t//use this as the name for the logout request\n\turl, err := l.SP.ServiceProvider.MakeRedirectLogoutRequest(attr.Subject, \"\")\n\tif err != nil {\n\t\tWebErrorWarn(\"error get signouturl: \"+err.Error(), http.StatusInternalServerError, w)\n\t\treturn\n\t}\n    //delete the session token from teh browser\n\terr = l.SP.Session.DeleteSession(w, r)\n\tif err != nil {\n\t\tWebErrorWarn(\"error get signouturl: \"+err.Error(), http.StatusInternalServerError, w)\n\t\treturn\n\t}\n    //redirect to the IDP Single log out URLwith the SAMLRequests for logout embedded\n\thttp.Redirect(w, r, url.String(), http.StatusFound)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69308569/why-is-the-header-value-not-being-read",
    "body": "func (b *DefaultBinder) Bind(i interface{}, c Context) (err error) {\n\tif err := b.BindPathParams(c, i); err != nil {\n\t\treturn err\n\t}\n\t// Issue #1670 - Query params are binded only for GET/DELETE and NOT for usual request with body (POST/PUT/PATCH)\n\t// Reasoning here is that parameters in query and bind destination struct could have UNEXPECTED matches and results due that.\n\t// i.e. is `&id=1&lang=en` from URL same as `{\"id\":100,\"lang\":\"de\"}` request body and which one should have priority when binding.\n\t// This HTTP method check restores pre v4.1.11 behavior and avoids different problems when query is mixed with body\n\tif c.Request().Method == http.MethodGet || c.Request().Method == http.MethodDelete {\n\t\tif err = b.BindQueryParams(c, i); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn b.BindBody(c, i)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69187584/deadlock-in-book-the-go-programming-language-how-it-would-happen-and-why-it-h",
    "body": "func main() {\n    worklist := make(chan []string)\n    unseenLinks := make(chan string)\n    go func() { worklist <- os.Args[1:] }()\n    for i := 0; i < 20; i++ {\n        for link := range unseenLinks {\n//            foundLinks := crawl(link)\n//            go func() { worklist <- foundLinks }()\n//        }\n//     }\n//\n//     seen := make(map[string]bool)\n//     for list := range worklist {\n//         for _, link := range list {\n//             if !seen[link] {\n//                 seen[link] = true\n//                 unseenLinks <- link\n//             }\n//         }\n//     }\n// }"
  },
  {
    "url": "https://stackoverflow.com/questions/68832776/unmarshal-method-for-complex-object-with-go-reflections",
    "body": "func (m MetricOne) MarshalJSON() ([]byte, error) {\n    // Declare a new type using the definition of MetricOne,\n    // the result of this is that M will have the same structure\n    // as MetricOne but none of its methods (this avoids recursive\n    // calls to MarshalJSON).\n    //\n    // Also because M and MetricOne have the same structure you can\n    // easily convert between those two. e.g. M(MetricOne{}) and\n    // MetricOne(M{}) are valid expressions.\n\ttype M MetricOne\n    // Declare a new type that has a field of the \"desired\" type and\n    // also **embeds** the M type. Embedding promotes M's fields to T\n    // and encoding/json will marshal those fields unnested/flattened,\n    // i.e. at the same level as the channels_info field.\n\ttype T struct {\n\t\tM\n\t\tChannelsInfo []*statusChannel `json:\"channels_info\"`\n\t}\n    // move map elements to slice\n\tchannels := make([]*statusChannel, 0, len(m.ChannelsInfo))\n\tfor _, c := range m.ChannelsInfo {\n\t\tchannels = append(channels, c)\n\t}\n    // Pass in an instance of the new type T to json.Marshal.\n    // For the embedded M field use a converted instance of the receiver.\n    // For the ChannelsInfo field use the channels slice.\n\treturn json.Marshal(T{\n        M:            M(m),\n        ChannelsInfo: channels,\n    })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68766027/unable-to-load-html-templates-from-subdirectories-with-gin",
    "body": "{{ define \"views/library.html\" }}\n<!--Embed the header.html template at this location-->\n{{ template \"layouts/header.html\" .}}\n<h1>Hello Books!</h1>\n<div>Est nisi debitis recusandae necessitatibus voluptate ut. Laudantium eligendi nostrum quisquam voluptates harum\n    exercitationem nam harum. Voluptatem sit assumenda sit alias dolores. Modi autem et temporibus impedit qui numquam.\n    Esse ut recusandae quos deserunt nihil repellendus. Sint et voluptatem quia quia dolor aut.</div>\n<div>Est nisi debitis recusandae necessitatibus voluptate ut. Laudantium eligendi nostrum quisquam voluptates harum\n    exercitationem nam harum. Voluptatem sit assumenda sit alias dolores. Modi autem et temporibus impedit qui numquam.\n    Esse ut recusandae quos deserunt nihil repellendus. Sint et voluptatem quia quia dolor aut.</div>\n<!--Embed the footer.html template at this location-->\n{{ template \"layouts/footer.html\" .}}\n{{ end }}"
  },
  {
    "url": "https://stackoverflow.com/questions/68706728/how-to-show-a-warning-error-when-running-terraform-plan",
    "body": "func resourceAwsLaunchConfiguration() *schema.Resource {\n\treturn &schema.Resource{\n\t\tCreate: resourceAwsLaunchConfigurationCreate,\n\t\tRead:   resourceAwsLaunchConfigurationRead,\n\t\tDelete: resourceAwsLaunchConfigurationDelete,\n\t\tImporter: &schema.ResourceImporter{\n\t\t\tState: schema.ImportStatePassthrough,\n\t\t},\n\t\tSchema: map[string]*schema.Schema{\n\t\t\t\"arn\": {\n\t\t\t\tType:     schema.TypeString,\n\t\t\t\tComputed: true,\n\t\t\t},\n\t\t\t\"name\": {\n\t\t\t\tType:          schema.TypeString,\n\t\t\t\tOptional:      true,\n\t\t\t\tComputed:      true,\n\t\t\t\tForceNew:      true,\n\t\t\t\tConflictsWith: []string{\"name_prefix\"},\n\t\t\t\tValidateFunc:  validation.StringLenBetween(1, 255),\n\t\t\t},\n// ..."
  },
  {
    "url": "https://stackoverflow.com/questions/68706728/how-to-show-a-warning-error-when-running-terraform-plan",
    "body": "func resourceAwsElasticSearchDomain() *schema.Resource {\n\treturn &schema.Resource{\n\t\tCreate: resourceAwsElasticSearchDomainCreate,\n\t\tRead:   resourceAwsElasticSearchDomainRead,\n\t\tUpdate: resourceAwsElasticSearchDomainUpdate,\n\t\tDelete: resourceAwsElasticSearchDomainDelete,\n\t\tImporter: &schema.ResourceImporter{\n\t\t\tState: resourceAwsElasticSearchDomainImport,\n\t\t},\n\t\tTimeouts: &schema.ResourceTimeout{\n\t\t\tUpdate: schema.DefaultTimeout(60 * time.Minute),\n\t\t},\n\t\tCustomizeDiff: customdiff.Sequence(\n\t\t\tcustomdiff.ForceNewIf(\"elasticsearch_version\", func(_ context.Context, d *schema.ResourceDiff, meta interface{}) bool {\n\t\t\t\tnewVersion := d.Get(\"elasticsearch_version\").(string)\n\t\t\t\tdomainName := d.Get(\"domain_name\").(string)\n\t\t\t\tconn := meta.(*AWSClient).esconn\n\t\t\t\tresp, err := conn.GetCompatibleElasticsearchVersions(&elasticsearch.GetCompatibleElasticsearchVersionsInput{\n\t\t\t\t\tDomainName: aws.String(domainName),\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"[ERROR] Failed to get compatible ElasticSearch versions %s\", domainName)\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif len(resp.CompatibleElasticsearchVersions) != 1 {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\tfor _, targetVersion := range resp.CompatibleElasticsearchVersions[0].TargetVersions {\n\t\t\t\t\tif aws.StringValue(targetVersion) == newVersion {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true\n\t\t\t}),\n\t\t\tSetTagsDiff,\n\t\t),"
  },
  {
    "url": "https://stackoverflow.com/questions/68701250/regexp-replacement-character",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"regexp\"\n)\nfunc main() {\n        CSV_Contents := `\ncomment_ID\",\"post_ID\",\"product_SKU\",\"comment_author\",\"author_mail\",\"author_location\",\"date\",\"comment\"\n\"100\",\"60574\",\"VID17\",\"Jordi\",\"\",\"\",\"2021-06-02 16:20:30\",\"\"My son likes this video, good job\"\"\n\"101\",\"60574\",\"VID18\",\"Scarlett,\"\",\"\",\"2020-12-29 23:06:32\",\"\"I don't like this video, it may be better\"\"\n`\n\tRegContent := regexp.MustCompile(`(?m),\"(\"[^\"]*(?:\"\"[^\"]*)*\")\"$`)\n\tresult := RegContent.ReplaceAllString(CSV_Contents, `,$1`)\n\tfmt.Println(result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68696886/will-gos-scheduler-yield-control-from-one-goroutine-to-another-for-cpu-intensiv",
    "body": "// doSigPreempt handles a preemption signal on gp.\nfunc doSigPreempt(gp *g, ctxt *sigctxt) {\n        // Check if this G wants to be preempted and is safe to\n        // preempt.\n        if wantAsyncPreempt(gp) && isAsyncSafePoint(gp, ctxt.sigpc(), ctxt.sigsp(), ctxt.siglr()) {\n                // Inject a call to asyncPreempt.\n                ctxt.pushCall(funcPC(asyncPreempt))\n        }\n        // Acknowledge the preemption.\n        atomic.Xadd(&gp.m.preemptGen, 1)\n        atomic.Store(&gp.m.signalPending, 0)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68612683/how-to-stop-multiple-go-routines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\nfunc foo(channel, quit chan string, i int) {\n\tchannel <- fmt.Sprintf(\"goroutine %d started!\", i)\n\tfor {\n\t\trand.Seed(time.Now().UnixNano())\n\t\ttime.Sleep(time.Duration(rand.Intn(500)+500) * time.Millisecond)\n\t\tquit <- fmt.Sprintf(\"goRoutine %d completed!\", i)\n\t}\n}\nfunc main() {\n\tchannel := make(chan string)\n\tquit := make(chan string)\n\tfor i := 0; i < 3; i++ {\n\t\tgo foo(channel, quit, i)\n\t}\n\n\tfor {\n\t\tselect {\n\t\tcase update:= <-channel:\n\t\t\tfmt.Println(update)\n\t\tcase quit:= <-quit:\n\t\t\tfmt.Println(quit)\n\t\t\treturn\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68524701/how-to-maintain-a-set-of-integer-sequences",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype intArray []int\nfunc (i intArray) toString() string{\n\treturn fmt.Sprintf(`%+v`, i)\n}\nfunc main()  {\n\tmyMap := make(map[string]bool)\n\tarr1 := []int{1, 2, 3, 4}\n\tmyMap[intArray(arr1).toString()] = true\n\tarr2 := []int{1, 2, 3, 4}\n\tarr2Exist := myMap[intArray(arr2).toString()]\n\tfmt.Println(`is array 2 exist : `,arr2Exist) //is array 2 exist :  true\n\tarr3 := []int{1, 2, 3, 4, 5}\n\tarr3Exist := myMap[intArray(arr3).toString()]\n\tfmt.Println(`is array 3 exist : `,arr3Exist) //is array 3 exist :  false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68498716/sharing-method-implementations-between-different-structs",
    "body": "func main() {\n\tl16 := L16{\n\t\tLengthHolderStruct: LengthHolderStruct{\n\t\t\tLength: uint16(200),\n            // but nothing stops you from setting uint32(200)\n\t\t},\n\t}\n\tfmt.Println(l16.GetLength())\n}\ntype (\n\tLengthHolder interface {\n\t\tGetLength() int\n\t}\n\tLengthHolderStruct struct {\n\t\tLength interface{}\n\t}\n\tL16 struct {\n\t\tLengthHolderStruct\n\t}\n\tL32 struct {\n\t\tLengthHolderStruct\n\t}\n)\nfunc (h *LengthHolderStruct) GetLength() int {\n\tswitch t := h.Length.(type) {\n\tcase uint16:\n\t\treturn int(t)\n\tcase uint32:\n\t\treturn int(t)\n\t}\n\treturn 0\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67548484/create-a-hostpath-persistent-volume-with-kube-client",
    "body": "\tctx := context.TODO()\n\tvl := v1.PersistentVolume{\n\t\tTypeMeta: metav1.TypeMeta{Kind: \"PersistentVolume\"},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: name,\n\t\t},\n\t\tSpec: v1.PersistentVolumeSpec{\n\t\t\t//VolumeMode: v1.PersistentVolumeMode(),\n\t\t\tStorageClassName: \"manual\",\n\t\t\tAccessModes: []v1.PersistentVolumeAccessMode{\n\t\t\t\t\"ReadWriteMany\",\n\t\t\t},\n\t\t\tCapacity: v1.ResourceList{\n\t\t\t\tv1.ResourceName(v1.ResourceStorage): resource.MustParse(\"2Gi\"),\n\t\t\t},\n\t\t\tPersistentVolumeSource : v1.PersistentVolumeSource{\n\t\t\t\tHostPath: &v1.HostPathVolumeSource{\n\t\t\t\t\tPath: \"/demo\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\t_ , e := clientset.CoreV1().PersistentVolumes().Create(ctx , &vl , metav1.CreateOptions{})"
  },
  {
    "url": "https://stackoverflow.com/questions/67402101/how-to-return-status-code-to-handler-in-go",
    "body": "// WriteHeader sends an HTTP response header with the provided\n    // status code.\n    //\n    // If WriteHeader is not called explicitly, the first call to Write\n    // will trigger an implicit WriteHeader(http.StatusOK).\n    // Thus explicit calls to WriteHeader are mainly used to\n    // send error codes.\n    //\n    // The provided code must be a valid HTTP 1xx-5xx status code.\n    // Only one header may be written. Go does not currently\n    // support sending user-defined 1xx informational headers,\n    // with the exception of 100-continue response header that the\n    // Server sends automatically when the Request.Body is read.\n    WriteHeader(statusCode int)"
  },
  {
    "url": "https://stackoverflow.com/questions/67373698/convert-string-representing-hex-number-to-ipv6",
    "body": "str := \"00000000ff00ff00000900000600020a\"\nipAddr := ipaddr.NewIPAddressString(str).GetAddress()\nreversedAddr, _ := ipAddr.ReverseBytes()\nreverseEachSegment := ipAddr.ReverseSegments()\nreverseBitsEachByte, _ := ipAddr.ReverseBits(true)\nreverseBits, _ := ipAddr.ReverseBits(false)\nfmt.Println(\"original\", ipAddr)\nfmt.Println(\"bytes reversed\", reversedAddr)\nfmt.Println(\"bytes reversed in each segment\", reverseEachSegment)\nfmt.Println(\"bits reversed in each byte\", reverseBitsEachByte)\nfmt.Println(\"bits reversed\", reverseBits)"
  },
  {
    "url": "https://stackoverflow.com/questions/66683816/creating-nested-json-from-api-call-response",
    "body": "func (h *Handler) getAddresses(w http.ResponseWriter, r *http.Request) {\n\ttype Message struct {\n\t\tTotal     int             `json:\"total\"`\n\t\tAddresses json.RawMessage `json:\"addresses\"`\n\t}\n\tresp, err := h.Search(address, page, pageOffset) // *http.Response\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\treturn\n\t}\n\tres := Message{\n\t\tTotal:     total,\n\t\tAddresses: json.RawMessage(body),\n\t}\n\tif err := json.NewEncoder(w).Encode(res); err != nil {\n\t\tlog.Println(\"failed to respond with json:\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66641024/google-cloud-monitoring-alert-policies-status-code-409-too-many-concurren",
    "body": "var(\n  backlogSize = 3 //change as per your needs\n  requests = make(chan *monitoring.AlertPolicy, backlogSize)\n)\nfunc createPolicies(){\n  ...\n  go func(){\n     //init the service\n     ...\n     for policy := range requests {\n       p, err := service.Projects.AlertPolicies.Create(\"projects/abc-app\", policy).Context(context.Background()).Do()\n       if err != nil {\n         log.Println(err)\n       }\n     }\n  }()\n  go func(){\n     newPolicy := &monitoring.AlertPolicy\n     //fill policy\n     ...\n     requests <- newPolicy\n  }()\n  ...\n  //wait for completion and close requests channel\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66278223/getting-a-value-from-http-request",
    "body": "{\n  \"id\": 7585110,\n  \"name\": \"Catalysm\",\n  \"description\": \"\",\n  \"owner\": {\n    \"buildersClubMembershipType\": \"None\",\n    \"userId\": 1590107797,\n    \"username\": \"Scypno\",\n    \"displayName\": \"Scypno\"\n  },\n  \"shout\": {\n    \"body\": \"Ill be happy if you check out the clothing mall i made :)\",\n    \"poster\": {\n      \"buildersClubMembershipType\": \"None\",\n      \"userId\": 1590107797,\n      \"username\": \"Scypno\",\n      \"displayName\": \"Scypno\"\n    },\n    \"created\": \"2020-08-28T19:14:46.113Z\",\n    \"updated\": \"2021-02-06T18:43:38.223Z\"\n  },\n  \"memberCount\": 28,\n  \"isBuildersClubOnly\": false,\n  \"publicEntryAllowed\": true\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65993532/hyperledger-error-when-trying-to-query-the-state-database-after-installing-the-c",
    "body": "// List all Permissions given to a doctor\nfunc (s *SmartContract) ListDoctorPermissions(ctx contractapi.TransactionContextInterface, doctorId string) (string, error) {\n\tdoctorIterator, err := ctx.GetStub().GetStateByPartialCompositeKey(\"permissionId\", []string{doctorId})\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tfmt.Printf(\"the doctor Iterator is: %s\", doctorIterator)\n\tdefer doctorIterator.Close()\n\tvar dataCategory string\n\tvar patientId string\n\tvar permissionId string\n\tvar permissions []byte\n\tbArrayPermissionAlreadyWritten := false\n\tfor doctorIterator.HasNext() {\n\t\tresponseRange, err := doctorIterator.Next()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tobjectType, compositeKeyParts, err := ctx.GetStub().SplitCompositeKey(responseRange.Key)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tfmt.Printf(\"the objectType is: %s\", objectType)\n\t\tdataCategory = compositeKeyParts[1]\n\t\tpatientId = compositeKeyParts[2]\n\t\tpermissionId = doctorId + dataCategory + patientId\n\t\tfmt.Printf(\"the compositeKeyParts are: %s\", compositeKeyParts[0], compositeKeyParts[1], compositeKeyParts[2])\n\t\tpermissionAsBytes, err := ctx.GetStub().GetState(permissionId)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\tif bArrayPermissionAlreadyWritten == true {\n\t\t\tnewBytes := append([]byte(\",\"), permissionAsBytes...)\n\t\t\tpermissions = append(permissions, newBytes...)\n\t\t} else {\n\t\t\tpermissions = append(permissions, permissionAsBytes...)\n\t\t\tfmt.Print(permissions)\n\t\t}\n\t\tfmt.Printf(\"Found a asset for index : %s asset id : \", objectType, compositeKeyParts[0], compositeKeyParts[1], compositeKeyParts[2])\n\t\tbArrayPermissionAlreadyWritten = true\n\t}\n\tpermissions = append(permissions, []byte(\"]\")...)\n\tfmt.Print(permissions)\n\treturn string(permissions), nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65993532/hyperledger-error-when-trying-to-query-the-state-database-after-installing-the-c",
    "body": "// List all Permissions given to a doctor\nfunc (s *SmartContract) ListDoctorPermissions(ctx contractapi.TransactionContextInterface, doctorId string) ([]Permission, error) {\n\tdoctorIterator, err := ctx.GetStub().GetStateByPartialCompositeKey(\"permissionId\", []string{doctorId})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Printf(\"the doctor Iterator is: %s\", doctorIterator)\n\tdefer doctorIterator.Close()\n\tvar dataCategory string\n\tvar patientId string\n\tvar permissionId string\n\tvar permissions []Permission\n\tfor doctorIterator.HasNext() {\n\t\tresponseRange, err := doctorIterator.Next()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tobjectType, compositeKeyParts, err := ctx.GetStub().SplitCompositeKey(responseRange.Key)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfmt.Printf(\"the objectType is: %s\", objectType)\n\t\tdataCategory = compositeKeyParts[1]\n\t\tpatientId = compositeKeyParts[2]\n\t\tpermissionId = doctorId + dataCategory + patientId\n\t\tfmt.Printf(\"the compositeKeyParts are: %s\", compositeKeyParts[0], compositeKeyParts[1], compositeKeyParts[2])\n\t\tpermissionAsBytes, err := ctx.GetStub().GetState(permissionId)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfoundPermission := new(Permission)\n\t\terr = json.Unmarshal(permissionAsBytes, foundPermission)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tpermissions = append(permissions, *foundPermission)\n\t}\n\tfmt.Printf(\"Permissions %v\", permissions)\n\treturn permissions, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65953564/issue-with-s3-bucket-naming-policy-and-attempting-to-send-sdk-generated-requests",
    "body": "// for custom localstack endpoint\n\tcustomResolver := aws.EndpointResolverFunc(func(service, region string) (aws.Endpoint, error) {\n\t\tif service == s3.ServiceID {\n\t\t\treturn aws.Endpoint{\n\t\t\t\tPartitionID:   \"aws\",\n\t\t\t\tURL:           \"http://localhost:4566\",\n\t\t\t\tSigningRegion: \"eu-west-1\",\n\t\t\t\tHostnameImmutable: true, // This must be set to true to disable the host changing\n\t\t\t}, nil\n\t\t}\n\t\t// returning EndpointNotFoundError will allow the service to fallback to it's default resolution\n\t\treturn aws.Endpoint{}, &aws.EndpointNotFoundError{}\n\t})\n\tconfig, err := config.LoadDefaultConfig(context.TODO(), config.WithRegion(\"eu-west-1\"), config.WithEndpointResolver(customResolver))\n\tif err != nil {\n\t\tlog.Fatalf(\"unable to load SDK config, %v\", err)\n\t}\n\tclient := s3.NewFromConfig(config)"
  },
  {
    "url": "https://stackoverflow.com/questions/64920352/how-send-request-header-as-response-header-using-go-kit",
    "body": "type ctxRequestKey struct{}\nfunc putRequestInCtx(ctx context.Context, r *http.Request, _ Request) context.Context {\n    return context.WithValue(ctx, ctxRequestKey{}, r)\n}\nfunc encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {\n    r := ctx.Value(ctxRequestKey{}).(*http.Request)\n    // can use r.Header.Get here to read request here.\n}\nserverOptions := []kithttp.ServerOptions{\n    kithttp.ServerBefore(putRequestInCtx),\n}\nregisterHandler := kithttp.NewServer(\n        makeSignDocumentEndpoint(svc),\n        decodeRequest,\n        encodeResponse,\n        serverOptions...,\n)"
  },
  {
    "url": "https://stackoverflow.com/questions/64547713/golang-bigquery-handling-rows-which-contain-repeated-fields-and-slicing-them",
    "body": "q := client.Query(\n\t\t// Query is nonsense; we use generate_array to both generate multiple rows\n        // and int64 arrays of different lengths.\n\t\t`\n\t\tSELECT\n\t\t\tSESSION_USER() as User,\n\t\t\tGENERATE_ARRAY(0,in_val * 2) as Arr,\n\t\t\tCURRENT_TIMESTAMP() as T,\n\t\tFROM\n\t\t(\n\t\t\tSELECT\n\t\t\t\tin_val\n\t\t\tFROM\n\t\t\t\tUNNEST(GENERATE_ARRAY(1,4)) as in_val\n\t\t)\n\t`)\n\tit, err := q.Read(ctx)\n\ttype resultRow struct {\n\t\tUser string\n\t\tArr  []int64\n\t\tT    time.Time\n\t}\n\tfor {\n\t\tvar row resultRow\n\t\terr := it.Next(&row)\n\t\tif err == iterator.Done {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Printf(\"User: %s, Arr has %d elements: %v, t: %s\\n\", row.User, len(row.Arr), row.Arr, row.T.Format(time.RFC3339Nano))\n\t}\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64429436/reading-json-from-a-link",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\ntype Data struct {\n\tUser []Product `json:\"user\"`\n}\ntype Product struct {\n\tProductId   uint   `json:\"ProductId\"`\n\tProductName string `json:\"ProductName\"`\n}\nfunc main() {\n\turl := \"https://script.googleusercontent.com/macros/echo?user_content_key=WBSJPDNSN6X1FCYeXsR6TDaDval0vdvmSoMmXFhGbt5sfK0ia80Dp7kPD27GLpZbYz8vrwfDiUecI2oGMjEtgfL5o8Da25T1m5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnGb6k9xaGtOX6M1tIiG811CRpk9nXl8ZKS7UJTno1dvQXMe1kqfAj8WxsSkLor-EqzOmbnRGq-tk&lib=M0B6GXYh0EOYMkP7qr1Xy9xw8GuJxFqGH\"\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\thtmlData, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\t// print out\n\tfmt.Println(string(htmlData))\n\t//var product Product\n\tvar data Data\n\tjson.Unmarshal([]byte(string(htmlData)), &data)\n\tfmt.Println(data)\n\tfmt.Println(data.User)\n\tfmt.Println(data.User[0])\n\tfmt.Printf(\"id: %v, description: %s\", data.User[0].ProductId, data.User[0].ProductName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64087636/empty-output-after-json-unmarshal-in-go-while-no-parsing-error-occured",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype IpInfo struct {\n\tIp string `json:\"ip\"`\n}\ntype MyData struct {\n\tMsg        string             `json:\"msg\"`\n\tStatusCode int                `json:\"status_code\"`\n\tData       []struct{ IpInfo } `json:\"data\"`\n}\nfunc main() {\n\tjsonData := []byte(`{\"msg\": \"success\", \"status_code\": 0, \"data\": [{\"ip\": \"127.0.0.1\"}]}`)\n\tmyData := MyData{}\n\terr := json.Unmarshal(jsonData, &myData)\n\tif err != nil {\n\t\tfmt.Println(\"error:\", err)\n\t}\n\tfmt.Println(myData.Msg)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63725375/dynamically-access-struct-value-by-field-name-in-go-template",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"text/template\"\n\t\"reflect\"\n)\ntype Context struct {\n\tKey string\n}\nfunc FieldByName(c Context, field string) string {\n    ref := reflect.ValueOf(c)\n    f := reflect.Indirect(ref).FieldByName(field)\n    return string(f.String())\n}\nfunc main() {\n\tcontext := Context{Key: \"value\"}\n\ttext := `{{- $key := \"Key\" }}{{ fieldByName . $key}}`\n\n\t// Custom function map\n\tfuncMap := template.FuncMap{\n\t\t\"fieldByName\": FieldByName,\n\t}\n\t// Add custom functions using Funcs(funcMap)\n\tt := template.Must(template.New(\"fail\").Funcs(funcMap).Parse(text))\n\n\terr := t.Execute(os.Stdout, context)\n\tif err != nil {\n\t\tfmt.Println(\"executing template:\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63664419/unexpected-type-expecting-name",
    "body": "package main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\nvar myDB *sql.DB\nvar err error\ntype trade_history struct {\n\tid, final_meta_report_id, trading_account_id, lp, lp2, lp3             int\n\tsymbol, price, price_type, time, types, status, created_at, updated_at string\n\tqty, pegged_distance, price_limit                                      float64\n}\nfunc getTradingHistory(final_Meta_report_ID int) error {\n\tusername := \"lalala\"\n\tpassword := \"felixsiong\"\n\thost := \"trades.xawrs2.us-east-2.rds.amazonaws.com\"\n\tport := 3306\n\tdb := \"trading_dashboard\"\n\t//use Sprintf if you wanna parse a string with values\n\tconn := fmt.Sprintf(\"%s:%s@tcp(%s:%d)/%s\", username, password, host, port, db)\n\tmyDB, err = sql.Open(\"mysql\", conn)\n\tdefer myDB.Close()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\terr = myDB.Ping()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tvar p trade_history\n\t//if you have multiple lines of texts use ` instead of \"\n\terr = myDB.QueryRow(`select id, final_meta_report_id,\n    trading_account_id, symbol, qty, price, price_type, time, lp,\n    lp2, lp3, pegged_distance, price_limit, time_limit, type, status, created_at`).Scan(&p)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tfmt.Println(\"id: %d\\n Final_meta_report_id: %d\\n trading_account_id: %d\\n symbol: %s\\n qty: %.2f\\n price: %s\\n price_type: %s\\n time: %s\\n lp: %d\\n lp2: %d\\n lp3: %d\\n pegged_distance: %.2f\\n\")\n\treturn err\n}\nfunc main() {\n\tif getTradingHistory(2074) != nil {\n\t\tfmt.Println(err.Error())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63564543/decode-a-debeuzium-event-schema-into-a-meaningful-datastructure-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n)\ntype DebeziumSchema struct {\n\tType        string         `json:\"type\"`\n\tName        string         `json:\"name\"`\n\tNamespace   string         `json:\"namespace\"`\n\tFields      []SchemaField  `json:\"fields\"`\n\tConnectName string         `json:\"connect.name\"`\n}\ntype SchemaField struct {\n\tName    string         \t`json:\"name\"`\n\tType    interface{}     `json:\"type\"`\n\tDefault interface{}    \t`json:\"default,omitempty\"`\n}\nfunc main() {\n\tschema := `{\"type\":\"record\",\"name\":\"Envelope\",\"namespace\":\"datapipe.inventory.customers\",\"fields\":[{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Value\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"first_name\",\"type\":\"string\"},{\"name\":\"last_name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"}],\"connect.name\":\"datapipe.inventory.customers.Value\"}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",\"Value\"],\"default\":null},{\"name\":\"source\",\"type\":{\"type\":\"record\",\"name\":\"Source\",\"namespace\":\"io.debezium.connector.mysql\",\"fields\":[{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"connector\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ts_ms\",\"type\":\"long\"},{\"name\":\"snapshot\",\"type\":[{\"type\":\"string\",\"connect.version\":1,\"connect.parameters\":{\"allowed\":\"true,last,false\"},\"connect.default\":\"false\",\"connect.name\":\"io.debezium.data.Enum\"},\"null\"],\"default\":\"false\"},{\"name\":\"db\",\"type\":\"string\"},{\"name\":\"table\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"server_id\",\"type\":\"long\"},{\"name\":\"gtid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"file\",\"type\":\"string\"},{\"name\":\"pos\",\"type\":\"long\"},{\"name\":\"row\",\"type\":\"int\"},{\"name\":\"thread\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"query\",\"type\":[\"null\",\"string\"],\"default\":null}],\"connect.name\":\"io.debezium.connector.mysql.Source\"}},{\"name\":\"op\",\"type\":\"string\"},{\"name\":\"ts_ms\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"transaction\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ConnectDefault\",\"namespace\":\"io.confluent.connect.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"total_order\",\"type\":\"long\"},{\"name\":\"data_collection_order\",\"type\":\"long\"}]}],\"default\":null}],\"connect.name\":\"datapipe.inventory.customers.Envelope\"}`\n\tvar d DebeziumSchema\n\terr := json.Unmarshal([]byte(schema), &d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcolumns := make(map[string]string)\n\n\tfor _, field := range d.Fields {\n\t\tif field.Name != \"before\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, k := range field.Type.([]interface{}) {\n\t\t\tswitch k.(type) {\n\t\t\tcase map[string]interface{}:\n\t\t\t\trk := k.(map[string]interface{})\n\t\t\t\tfor rk1, rk2 := range rk {\n\t\t\t\t\tif rk1 != \"fields\" {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\t\t\t\t\tfor _, kkl := range rk2.([]interface{}) {\n\t\t\t\t\t\tk22 := kkl.(map[string]interface{})\n\t\t\t\t\t\tcolumns[k22[\"name\"].(string)] = k22[\"type\"].(string)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t}\n\n\tfmt.Println(columns)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63424703/gcp-bucket-creation-in-go",
    "body": "// Sample storage-quickstart creates a Google Cloud Storage bucket.\npackage main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\t\"cloud.google.com/go/storage\"\n)\nfunc main() {\n\tctx := context.Background()\n\t// Sets your Google Cloud Platform project ID.\n\tprojectID := \"<YOUR-PROJECT-ID>\"\n\t// Creates a client.\n\tclient, err := storage.NewClient(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create client: %v\", err)\n\t}\n\t// Sets the name for the new bucket.\n\tbucketName := \"go-new-bucket\"\n\t// Creates a Bucket instance.\n\tbucket := client.Bucket(bucketName)\n\t// Creates the new bucket.\n\tctx, cancel := context.WithTimeout(ctx, time.Second*10)\n\tdefer cancel()\n\tif err := bucket.Create(ctx, projectID, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to create bucket: %v\", err)\n\t}\n\tfmt.Printf(\"Bucket %v created.\\n\", bucketName)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63219598/nonblocking-channel-in-go-concurrency-patterns-timing-out-moving-on-blog",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n)\nfunc query(conns []int) string {\n\tch := make(chan string)\n\t// receiver\n\tgo func() {\n\t\tfor m := range ch {\n\t\t\tlog.Println(\"message: \", m)\n\t\t}\n\t}()\n\t// sender\n\tfor i, conn := range conns {\n\t\tgo func(c, loop int) {\n\t\t\tlog.Println(\"start: \", loop)\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase ch <- get(c, loop):\n\t\t\t\t\tlog.Println(\"got: \", loop)\n\t\t\t\t\tlog.Println(\"exited: \", loop)\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t\tlog.Println(\"skipped: \", loop)\n\t\t\t\t}\n\t\t\t}\n\t\t}(conn, i)\n\t}\n\tlog.Println(\"wait\")\n\ttime.Sleep(5 * time.Second)\n\treturn \"done\"\n}\nfunc get(i, loop int) string {\n\tlog.Println(\"process: \", loop)\n\treturn fmt.Sprintf(\"return loop: %d\", loop)\n}\nfunc main() {\n\tres := query([]int{1, 2, 3})\n\tfmt.Println(res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63219598/nonblocking-channel-in-go-concurrency-patterns-timing-out-moving-on-blog",
    "body": "2020/08/03 00:50:31 wait\n2020/08/03 00:50:31 start:  0\n2020/08/03 00:50:31 process:  0\n2020/08/03 00:50:31 got:  0\n2020/08/03 00:50:31 exited:  0\n2020/08/03 00:50:31 start:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 start:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 skipped:  2\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 message:  return loop: 0\n2020/08/03 00:50:31 process:  2\n2020/08/03 00:50:31 got:  2\n2020/08/03 00:50:31 exited:  2\n2020/08/03 00:50:31 message:  return loop: 2\n2020/08/03 00:50:31 skipped:  1\n2020/08/03 00:50:31 process:  1\n2020/08/03 00:50:31 got:  1\n2020/08/03 00:50:31 exited:  1\n2020/08/03 00:50:31 message:  return loop: 1\ndone"
  },
  {
    "url": "https://stackoverflow.com/questions/63219598/nonblocking-channel-in-go-concurrency-patterns-timing-out-moving-on-blog",
    "body": "package main\nimport (\n    \"fmt\"\n    \"log\"\n    \"time\"\n)\nfunc query(conns []int) string {\n    // buffered channel with a size of 3\n    ch := make(chan string, 3)\n    // receiver\n    go func() {\n        for m := range ch {\n            log.Println(\"message: \", m)\n        }\n    }()\n    // sender\n    for i, conn := range conns {\n        go func(c, loop int) {\n            log.Println(\"start: \", loop)\n            for {\n                select {\n                case ch <- get(c, loop):\n                    log.Println(\"got: \", loop)\n                    log.Println(\"exited: \", loop)\n                    return\n                default:\n                    log.Println(\"skipped: \", loop)\n                }\n            }\n        }(conn, i)\n    }\n    log.Println(\"wait\")\n    time.Sleep(5 * time.Second)\n    return \"done\"\n}\nfunc get(i, loop int) string {\n    log.Println(\"process: \", loop)\n    return fmt.Sprintf(\"return loop: %d\", loop)\n}\nfunc main() {\n    res := query([]int{1, 2, 3})\n    fmt.Println(res)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63219598/nonblocking-channel-in-go-concurrency-patterns-timing-out-moving-on-blog",
    "body": "2009/11/10 23:00:00 wait\n2009/11/10 23:00:00 start:  0\n2009/11/10 23:00:00 process:  0\n2009/11/10 23:00:00 got:  0\n2009/11/10 23:00:00 exited:  0\n2009/11/10 23:00:00 start:  1\n2009/11/10 23:00:00 process:  1\n2009/11/10 23:00:00 got:  1\n2009/11/10 23:00:00 exited:  1\n2009/11/10 23:00:00 start:  2\n2009/11/10 23:00:00 process:  2\n2009/11/10 23:00:00 got:  2\n2009/11/10 23:00:00 exited:  2\n2009/11/10 23:00:00 message:  return loop: 0\n2009/11/10 23:00:00 message:  return loop: 1\n2009/11/10 23:00:00 message:  return loop: 2\ndone"
  },
  {
    "url": "https://stackoverflow.com/questions/62798727/how-to-stop-golang-grpc-server-with-a-function",
    "body": "package main\nimport C\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net\"\n\t\"google.golang.org/grpc\"\n\tpb \"google.golang.org/grpc/examples/helloworld/helloworld\"\n)\nvar srv *grpc.Server\nconst (\n\tport = \":50051\"\n)\n// server is used to implement helloworld.GreeterServer.\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tlog.Printf(\"Received: %v\", in.GetName())\n\treturn &pb.HelloReply{Message: \"Hello \" + in.GetName()}, nil\n}\n//export StopGrpcServer\nfunc StopGrpcServer() {\n\tsrv.Stop()\n}\n//export StartGrpcServer\nfunc StartGrpcServer() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\tsrv = grpc.NewServer()\n\tpb.RegisterGreeterServer(srv, &server{})\n\tif err := srv.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}\nfunc main() {}\n// Compile with command:\n// go build -o greeter.so -buildmode=c-shared server.go"
  },
  {
    "url": "https://stackoverflow.com/questions/61478839/how-to-parse-multiple-parameters-in-url-in-golang",
    "body": "func (uc UserController) LoginUser(w http.ResponseWriter, request *http.Request, params httprouter.Params) {\n\temailId := request.URL.Query().Get(\"id\")\n\tpwd := request.URL.Query().Get(\"pwd\")\n\tu := models.User{}\n\tif err := uc.session.DB(\"go-web-dev-db\").C(\"users\").FindId(emailId + pwd).One(&u); err != nil {\n\t\tw.WriteHeader(404)\n\t\treturn\n\t}\n\tuj, err := json.Marshal(u)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK) // 200\n\tfmt.Fprintf(w, \"%s\\n\", uj)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61263565/i-want-to-return-an-xml-response-i-already-have-using-go",
    "body": "package main\nimport (\n\t\"encoding/xml\"\n\t\"net/http\"\n)\n// Response XML struct\ntype Response struct {\n\tGreeting string\n\tNames    []string `xml:\"Names>Name\"`\n}\nfunc hello(w http.ResponseWriter, r *http.Request) {\n\tresponse := Response{\"Hello\", []string{\"World\", \"Sarkar\"}}\n\n    // Wraps the response to Response struct\n\tx, err := xml.MarshalIndent(response, \"\", \"  \")\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/xml\")\n    // Write\n\tw.Write(x)\n}\nfunc main() {\n\thttp.HandleFunc(\"/hello\", hello)\n\thttp.ListenAndServe(\":9090\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60147644/go-a-function-that-would-consume-maps-with-different-types-of-values",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\nfunc main() {\n\tm1 := make(map[string]string)\n\tm2 := make(map[string]int)\n\n\tm1[\"a\"] = \"b\"\n\tm1[\"b\"] = \"c\"\n\n\tm2[\"a\"] = 1\n\tm2[\"b\"] = 2\n\n\tfmt.Println(sortedKeys(m1))\n\tfmt.Println(sortedKeys(m2))\n}\n// Returns slice of values in the type which is sent to it\nfunc sortedKeys(m interface{}) interface{} {\n\tif m == nil {\n\t   return nil\n\t}\n\n\tif reflect.TypeOf(m).Kind() != reflect.Map {\n\t\treturn nil\n\t}\n\n\tmapIter := reflect.ValueOf(m).MapRange()\n\tmapVal := reflect.ValueOf(m).Interface()\n\n\ttyp := reflect.TypeOf(mapVal).Elem()\n\toutputSlice := reflect.MakeSlice(reflect.SliceOf(typ), 0, 0)\n\n\n\tfor mapIter.Next() {\n\t   outputSlice = reflect.Append(outputSlice, mapIter.Value())\n\t}\n\n\n\treturn outputSlice.Interface()\n\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60089146/save-all-data-into-json-file-but-getting-only-last-index",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\nconst (\n\tfilename string = \"domain2ip.json\"\n)\ntype DomainIP struct {\n\tDomain string `json:\"domain\"`\n\tIP     string `json:\"ip\"`\n}\nfunc main() {\n\ttrimdata := lines(fetchUrl(\"http://s.tutree.com:7635/v1/groups\"))\n\t// fmt.Println(trimdata)\n\tfor _, data := range trimdata {\n\t\ttrim := lines(fetchUrl(\"http://s.tutree.com:7635/v1/\" + data))\n\t\t// fmt.Println(trim)\n\t\tfor _, domains := range trim {\n\t\t\t// fmt.Println(string(domains))\n\t\t\tdomainIP, err := convertdomain2ip(string(domains))\n\t\t\tif (err == nil) {\n\t\t\t\tappendToFile(filename, domainIP)\n\t\t\t}\n\t\t}\n\t}\n\t// fmt.Println(\"file written successfully\")\n\tos.Exit(0)\n}\nfunc fetchUrl(url string) string {\n\tresult, err := http.Get(url)\n\tError(err)\n\tdefer result.Body.Close()\n\tbody, err := ioutil.ReadAll(result.Body)\n\tError(err)\n\treturn string(body)\n}\nfunc lines(s string) []string {\n\treturn strings.Split(s, \"\\n\")\n}\nfunc Error(err error) {\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n}\nfunc convertdomain2ip(name string) (*DomainIP, error) {\n\taddr, err := net.ResolveIPAddr(\"ip\", name)\n\tif err != nil {\n\t\tfmt.Println(\"Resolution error\", err.Error())\n\t\treturn nil, err\n\t}\n\ttypeconvert := addr.String()\n\treturn &DomainIP{\n\t\tDomain: name,\n\t\tIP:     typeconvert}, nil\n}\nfunc appendToFile(filename string, data interface{}) {\n\tjsonData, _ := json.MarshalIndent(data, \"\", \"\")\n\t// fmt.Println(string(write))\n\tf, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tdefer f.Close()\n\tif _, err := f.Write(jsonData); err != nil {\n\t\tlog.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59709188/unable-to-decode-int-field-from-json",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"reflect\"\n)\ntype Response struct {\n\tUsers []User `json:\"users\"`\n}\ntype User struct {\n\tID   int    `json:\"id,string\"`\n\tName string `json:\"name\"`\n}\nfunc main() {\n\tr := &Response{}\n\terr := json.Unmarshal([]byte(`{\n  \"users\" : [\n    {\n      \"id\" : \"1\",\n      \"name\" : \"Matt Hayden\"\n    },\n    {\n      \"id\" : \"2\",\n      \"name\" : \"David Warner\"\n    }\n  ]\n }`), &r)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Printf(\"%#v \\n\", r)\n\tfmt.Printf(\"Type of ID is %s \\n\", reflect.TypeOf(r.Users[0].ID)) // int\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59292417/how-to-disable-highlightning-of-whitespace-when-editing-go-source-files-in-vim",
    "body": "\" Options:\n\"   There are some options for customizing the highlighting; the recommended\n\"   settings are the default values, but you can write:\n\"     let OPTION_NAME = 0\n\"   in your ~/.vimrc file to disable particular options. You can also write:\n\"     let OPTION_NAME = 1\n\"   to enable particular options. At present, all options default to on.\n\"\n\"   - g:go_highlight_array_whitespace_error\n\"     Highlights white space after \"[]\".\n\"   - g:go_highlight_chan_whitespace_error\n\"     Highlights white space around the communications operator that don't\n\"     follow the standard style.\n\"   - g:go_highlight_extra_types\n\"     Highlights commonly used library types (io.Reader, etc.).\n\"   - g:go_highlight_space_tab_error\n\"     Highlights instances of tabs following spaces.\n\"   - g:go_highlight_trailing_whitespace_error\n\"     Highlights trailing white space."
  },
  {
    "url": "https://stackoverflow.com/questions/59128141/matrix-multiplication-using-goroutines-and-channels",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n)\ntype pair struct {\n\trow, col int\n}\nconst length = 1000\nvar start time.Time\nvar rez [length][length]int\nfunc main() {\n\tconst threadlength = 1\n\tpairs := make(chan pair, 1000)\n\tvar wg sync.WaitGroup\n\tvar a [length][length]int\n\tvar b [length][length]int\n\tfor i := 0; i < length; i++ {\n\t\tfor j := 0; j < length; j++ {\n\t\t\ta[i][j] = rand.Intn(10)\n\t\t\tb[i][j] = rand.Intn(10)\n\t\t}\n\t}\n\twg.Add(threadlength)\n\tfor i := 0; i < threadlength; i++ {\n\t\tgo Calc(pairs, &a, &b, &rez, &wg)\n\t}\n\tstart = time.Now()\n\tfor i := 0; i < length; i++ {\n\t\tfor j := 0; j < length; j++ {\n\t\t\tpairs <- pair{row: i, col: j}\n\t\t}\n\t}\n    close(pairs)\n\twg.Wait()\n\telapsed := time.Since(start)\n\tfmt.Println(\"Binomial took \", elapsed)\n\tfor i := 0; i < length; i++ {\n\t\tfor j := 0; j < length; j++ {\n\t\t\tfmt.Print(rez[i][j])\n\t\t\tfmt.Print(\" \")\n\t\t}\n\t\tfmt.Println(\" \")\n\t}\n}\nfunc Calc(pairs chan pair, a, b, rez *[length][length]int, wg *sync.WaitGroup) {\n\tfor {\n\t\tpair, ok := <-pairs\n\t\tif !ok {\n\t\t\tbreak\n\t\t}\n\t\trez[pair.row][pair.col] = 0\n\t\tfor i := 0; i < length; i++ {\n\t\t\trez[pair.row][pair.col] += a[pair.row][i] * b[i][pair.col]\n\t\t}\n\t}\n\twg.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58726751/how-to-pass-array-of-struct-as-interface-by-reference",
    "body": "func (fc *FirebaseClient) ReadCollection(collectionPath string, objects interface{}) error {\n\tctx := context.Background()\n\topt := option.WithCredentialsJSON([]byte(os.Getenv(\"FIREBASE_CREDENTIALS\")))\n\tclient, err := firestore.NewClient(ctx, os.Getenv(\"FIREBASE_PROJECT_ID\"), opt)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\tcollectionRef := client.Collection(collectionPath)\n\tdocs, err := collectionRef.DocumentRefs(ctx).GetAll()\n\tif err != nil {\n\t\treturn err\n\t}\n\tlog.Printf(\"Total documents: %i\", len(docs))\n\n\tdest := reflect.ValueOf(objects).Elem()\n\tlog.Printf(\"dest: %v\", dest)\n\tfor _, doc := range docs {\n\t\tdocsnap, err := doc.Get(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tobj := reflect.New(dest.Type().Elem())\n\t\tif err := docsnap.DataTo(obj.Interface()); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"obj: %v\", obj)\n\t\tdest = reflect.Append(dest, obj.Elem())\n\n\n\t}\n\treflect.ValueOf(objects).Elem().Set(dest)\n\tlog.Printf(\"objects: %v\", dest)\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58448184/is-it-possible-to-redirect-a-page-with-new-url-after-executing-template-in-go",
    "body": "func loginPage(w http.ResponseWriter, r *http.Request) {\n  if r.URL.Query().Get(\"step\") == \"2\" {\n    // show the form / page described in (3) above.\n    // ...\n    return\n  }\n  // suppose your form method is POST\n  if r.Method == \"POST\" {\n    if err := r.ParseForm(); err != nil {\n      // handle parse error\n    }\n    // handle form submission normally\n    // also somehow store the form submitted value for later use\n    // ...\n    // ...\n    // now redirect to the url, as described in (2)\n    http.Redirect(w, r, \"/login?step=2\")\n    return\n  }\n  // handle the normal form display as described in (1)\n  // do your ExecuteTemplate\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58448184/is-it-possible-to-redirect-a-page-with-new-url-after-executing-template-in-go",
    "body": "func loginPage(w http.ResponseWriter, r *http.Request) {\n  // suppose your form method is POST\n  if r.Method == \"POST\" {\n    if err := r.ParseForm(); err != nil {\n      // handle parse error\n    }\n    // handle form submission normally\n    // also somehow store the form submitted value for later use\n    // ...\n    // ...\n    // handle the special form / page display as described in (2)\n    // do your ExecuteTemplate\n    // ...\n    // ...\n    return\n  }\n  // handle the normal form display as described in (1)\n  // do your ExecuteTemplate\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/58413605/specify-many-to-many-relationship-in-buffalo-model",
    "body": "type Organization struct {\n\tID               int                `json:\"id\" db:\"id\"`\n\tUsers            Users              `many_to_many:\"user_organizations\"`\n}\ntype User struct {\n\tID                int                `json:\"id\" db:\"id\"`\n\tOrganizations     Organizations      `many_to_many:\"user_organizations\" json:\"-\"`\n}\ntype UserOrganization struct {\n\tID             int          `json:\"id\" db:\"id\"`\n\tOrganizationID int          `json:\"organization_id\" db:\"organization_id\"`\n\tUserID         int          `json:\"user_id\" db:\"user_id\"`\n\tUser           User         `belongs_to:\"users\"`\n\tOrganization   Organization `belongs_to:\"organizations\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/57487057/initializing-variable-from-const-with-some-changes",
    "body": "func NewCS() *CompleteSearcher {\n\treturn &CompleteSearcher{\n\t\tA:     &Searcher{},\n\t\tB:     &Searcher{},\n\t\tC:     &Searcher{},\n\t\tCache: &Cacher{cache: make(map[string]interface{})},\n\t}\n}\nfunc (c *CompleteSearcher) WithA(s *Searcher) *CompleteSearcher {\n\tc.A = s\n\treturn c\n}\nfunc (c *CompleteSearcher) WithB(s *Searcher) *CompleteSearcher {\n\tc.B = s\n\treturn c\n}\nfunc (c *CompleteSearcher) WithC(s *Searcher) *CompleteSearcher {\n\tc.C = s\n\treturn c\n}\nfunc (c *CompleteSearcher) WithCacher(s *Cacher) *CompleteSearcher {\n\tc.Cache = s\n\treturn c\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/55243071/does-ticker-c-leak-memory-if-run-forever",
    "body": "$ go tool pprof pprof/heap.3.pprof\nLocal symbolization failed for main: open /tmp/go-build598947513/b001/exe/main: no such file or directory\nSome binary filenames not available. Symbolization may be incomplete.\nTry setting PPROF_BINARY_PATH to the search path for local binaries.\nFile: main\nType: inuse_space\nTime: Jul 30, 2018 at 6:11pm (UTC)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) svg\nGenerating report in profile002.svg\n(pprof) top20\nShowing nodes accounting for 410.75MB, 99.03% of 414.77MB total\nDropped 10 nodes (cum <= 2.07MB)\n      flat  flat%   sum%        cum   cum%\n  408.97MB 98.60% 98.60%   408.97MB 98.60%  bytes.Repeat\n    1.28MB  0.31% 98.91%   410.25MB 98.91%  main.(*RequestTracker).Track\n    0.50MB  0.12% 99.03%   414.26MB 99.88%  net/http.(*conn).serve\n         0     0% 99.03%   410.25MB 98.91%  main.main.func1\n         0     0% 99.03%   410.25MB 98.91%  net/http.(*ServeMux).ServeHTTP\n         0     0% 99.03%   410.25MB 98.91%  net/http.HandlerFunc.ServeHTTP"
  },
  {
    "url": "https://stackoverflow.com/questions/54454187/tcp-connection-returns-broken-pipe-error-when-used-multiple-times",
    "body": "var receive chan string\nfunc init() {\n\treceive = make(chan string, 10)\n}\nfunc ReceiveMessage(con net.Conn) {\n\t// receiving a message\n\tinBytes := make([]byte, 0, 1000)\n\tvar b = make([]byte, 512)\n\tfor {\n\t\t// bufsize 1024, read bufsize bytes each time\n\t\tres, err := con.Read(b)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(err.Error())\n\t\t\tbreak\n\t\t}\n\t\tinBytes = append(inBytes, b[:res]...)\n\t\tmsg := string(inBytes)\n\t\tfmt.Println(\"receive msg from server:\" + msg)\n\t\treceive <- msg\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54454187/tcp-connection-returns-broken-pipe-error-when-used-multiple-times",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net\"\n)\nvar tcpPool chan net.Conn\nvar receive chan string\nfunc init() {\n\treceive = make(chan string, 10)\n}\nfunc NewClient(connections int, address string) {\n\ttcpPool = make(chan net.Conn, connections)\n\tfor i := 0; i < connections; i++ {\n\t\tconn, err := net.Dial(\"tcp\", address)\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\t\ttcpPool <- conn\n\t}\n}\nfunc SendMessage(con net.Conn, msg []byte) error {\n\t// send message\n\t_, err := con.Write(msg)\n\tif err != nil {\n\t\tlog.Panic(err)\n\t}\n\treturn nil\n}\nfunc ReceiveMessage(con net.Conn) {\n\t// receiving a message\n\tinBytes := make([]byte, 0, 1000)\n\tvar b = make([]byte, 512)\n\tfor {\n\t\t// bufsize 1024, read bufsize bytes each time\n\t\tres, err := con.Read(b)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(err.Error())\n\t\t\tbreak\n\t\t}\n\t\tinBytes = append(inBytes, b[:res]...)\n\t\tmsg := string(inBytes)\n\t\tfmt.Println(\"receive msg from server:\" + msg)\n\t\treceive <- msg\n\t}\n}\nfunc getConn() net.Conn {\n\tcon := <-tcpPool\n\treturn con\n}\nfunc main() {\n\tNewClient(20, \"localhost:8101\")\n\tcon := <-tcpPool\n\te := SendMessage(con, []byte(\"hello, i am client\"))\n\tif e != nil {\n\t\tfmt.Println(e.Error())\n\t\treturn\n\t}\n\tgo ReceiveMessage(con)\n\tvar msg string\n\tfor {\n\t\tselect {\n\t\tcase msg = <-receive:\n\t\t\tfmt.Println(msg)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/54454187/tcp-connection-returns-broken-pipe-error-when-used-multiple-times",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n)\nfunc StartTCPServer(network, addr string) error {\n\tlistener, err := net.Listen(network, addr)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(err.Error())\n\t\t\tcontinue\n\t\t}\n\t\tonConn(conn)\n\t}\n}\n//onConn recieves a tcp connection and waiting for incoming messages\nfunc onConn(conn net.Conn) {\n\tinBytes := make([]byte, 0)\n\t// load msg\n\tfor {\n\t\tbuf := make([]byte, 512)\n\t\tres, err := conn.Read(buf)\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfmt.Println(err.Error())\n\t\t\treturn\n\t\t}\n\t\tinBytes = append(inBytes, buf[:res]...)\n\t\tfmt.Println(\"receive from client:\" + string(inBytes))\n\t\tconn.Write([]byte(\"hello\"))\n\t}\n}\nfunc main() {\n\tif e := StartTCPServer(\"tcp\", \":8101\"); e != nil {\n\t\tfmt.Println(e.Error())\n\t\treturn\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/41301974/golang-splitafter-for-regexp-type",
    "body": "go\tfmt.Println(splitAfter(\"HealthyRecordsMetric\",regexp.MustCompile(\"[A-Z]\")))\n\tfmt.Println(splitAfter(\"healthyRecordsMetric\",regexp.MustCompile(\"[A-Z]\")))\n\tfmt.Println(splitAfter(\"healthyrecordsMETetric\",regexp.MustCompile(\"[A-Z]\")))\n\tfmt.Println(splitAfter(\"HealthyHecord Hetrics\",regexp.MustCompile(\"[A-Z]\")))\n\tfmt.Println(splitAfter(\"healthy records metric\",regexp.MustCompile(\"[A-Z]\")))\n\tfmt.Println(splitAfter(\"1.2.3.4.5.6.7.8.9\",regexp.MustCompile(\"[1-9]\")))\n[Healthy Records Metric]\n[healthy Records Metric]\n[healthyrecords M E Tetric]\n[Healthy Hecord  Hetrics]\n[healthy records metric]\n[1. 2. 3. 4. 5. 6. 7. 8. 9]"
  },
  {
    "url": "https://stackoverflow.com/questions/79406127/what-is-the-best-way-to-take-in-optional-parameters-in-this-case",
    "body": "type Flashing struct {\n\tLedOnTime    int\n\tLedOffTime   int\n\tLoopTimes    int\n\tIntervalTime int\n}\nfunc (p *Printer) Light(light _light.Light, mode _light.Mode, flashing *Flashing) error {\n\t// This light_mode is currently believed to be deprecated, leaving here commented in case it ends up being useful later.\n\t//command, err := mqtt.NewCommand(mqtt.System).AddCommandField(\"light_mode\").AddParamField(\"on\").JSON()\n\t//if err != nil {\n\t//  return err\n\t//}\n\t// https://github.com/Doridian/OpenBambuAPI/blob/main/mqtt.md#systemledctrl\n\tcommand := mqtt.NewCommand(mqtt.System).AddCommandField(\"ledctrl\").AddField(\"led_node\", light).AddField(\"led_mode\", mode)\n\t// Add fields only used for mode \"flashing\" but required nonetheless\n\tif flashing != nil {\n\t\tcommand.AddField(\"led_on_time\", flashing.LedOnTime)\n\t\tcommand.AddField(\"led_off_time\", flashing.LedOffTime)\n\t\tcommand.AddField(\"loop_times\", flashing.LoopTimes)\n\t\tcommand.AddField(\"interval_time\", flashing.IntervalTime)\n\t}\n\tif err := p.mqttClient.Publish(command); err != nil {\n\t\treturn fmt.Errorf(\"error setting light %s: %w\", light, err)\n\t}\n\treturn nil\n}\nfunc main() {\n\tp := Printer{}\n\terr := p.Light(_light.Strong, _light.Normal, nil)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\terr = p.Light(_light.Weak, _light.Flashing, &Flashing{500, 500, 1, 1000})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79128969/bufio-reset-after-bufio-peek-doesnt-seem-to-work",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"image/jpeg\"\n\t\"io\"\n)\nfunc detectContentType(bytes []byte) string {\n\treturn \"image/jpeg\"\n}\nfunc Thumbnail2(r io.Reader, w io.Writer, width int) error {\n\tvar err error\n\tbuf := bufio.NewReader(r)\n\theaderBytes, err := buf.Peek(512)\n\tif len(headerBytes) == 0 && err != nil {\n\t\tfmt.Println(\"Error reading header bytes: \", err)\n\t\treturn err\n\t}\n\tmimetype := detectContentType(headerBytes)\n\tfmt.Println(\"MIME type detected: \", mimetype)\n\t_, err = jpeg.Decode(buf)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding image: \", err)\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n    // 16x16 white JPEG\n\tb64 := \"/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAAQABADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD36iiigD//2Q==\"\n\tbody := make([]byte, base64.StdEncoding.DecodedLen(len(b64)))\n\t_, err := base64.StdEncoding.Decode(body, []byte(b64))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(Thumbnail2(bytes.NewReader(body), nil, 16))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/79000503/go-func-for-running-external-command-occasionally-getting-error-file-already-c",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\tctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\tdefer cancel()\n\tcmd := exec.CommandContext(ctx, \"sh\", \"-c\", \"for i in $(seq 1 10); do echo $i; sleep 0.25; done\")\n\tcmd.Stderr = os.Stderr\n\tstdout, err := cmd.StdoutPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stdout.Close()\n\tscanner := bufio.NewScanner(stdout)\n\tif err := cmd.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tgo func() { time.Sleep(1 * time.Second); syscall.Kill(cmd.Process.Pid, syscall.SIGKILL) }()\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor scanner.Scan() {\n\t\t\tlog.Print(scanner.Text())\n\t\t}\n\t\tif scanner.Err() != nil {\n\t\t\tlog.Printf(\"Error reading stdout, %v\", scanner.Err())\n\t\t}\n\t}()\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tdone <- cmd.Wait()\n\t}()\n\tselect {\n\tcase <-ctx.Done():\n\t\tlog.Fatal(ctx.Err())\n\tcase err := <-done:\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78987355/golang-calculate-hash-from-io-reader-and-append-to-the-end-multireader",
    "body": "type hashReader struct {\n\t// If h != nil, then r is the original reader,\n\t// else r is a reader on the hash bytes.\n\tr io.Reader\n\t// h is set to nil when original reader is read\n\t// to EOF.\n\th hash.Hash\n}\nfunc (hr *hashReader) Read(b []byte) (int, error) {\n\tn, err := hr.r.Read(b)\n\t// Hash the bytes when reading the main stream.\n\tif hr.h != nil {\n\t\thr.h.Write(b[:n])\n\t\t// If we reached the end of the main stream, swap in\n\t\t// a reader on the hash bytes.\n\t\tif err == io.EOF {\n\t\t\tsum := hr.h.Sum(nil)\n\t\t\thr.r = bytes.NewReader(sum[:])\n\t\t\thr.h = nil\n\t\t\terr = nil\n\t\t}\n\t}\n\treturn n, err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78927584/go-types-for-bnf-grammar",
    "body": "var (\n\t_ Expr = new(Literal)\n\t_ Expr = new(Grouping)\n\t_ Expr = new(Unary)\n\t_ Expr = new(Binary)\n)\ntype Expr interface {\n\tEvaluate() string\n}\ntype Literal struct {\n\tValue string\n}\nfunc (l *Literal) Evaluate() string {\n\treturn l.Value\n}\ntype Grouping struct {\n\tExpr Expr\n}\nfunc (g *Grouping) Evaluate() string {\n\tif g.Expr == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn fmt.Sprintf(\"(group %s)\", g.Expr.Evaluate())\n\t}\n}\ntype Unary struct {\n\tToken *Token\n\tRight Expr\n}\nfunc (u *Unary) Evaluate() string {\n\tif u.Right == nil {\n\t\treturn \"\"\n\t} else {\n\t\ttoken := \"\"\n\t\tif u.Token != nil {\n\t\t\ttoken = u.Token.Data\n\t\t}\n\t\treturn fmt.Sprintf(\"(%s %s)\", token, u.Right.Evaluate())\n\t}\n}\ntype Binary struct {\n\tLeft  Expr\n\tToken *Token\n\tRight Expr\n}\ntype A struct {\n\ta *A\n}\nfunc (b *Binary) Evaluate() string {\n\tif b.Left == nil || b.Right == nil || b.Token == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn fmt.Sprintf(\"(%s %s %s)\", b.Token.Data, b.Left.Evaluate(), b.Right.Evaluate())\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78804112/querying-dynamosb-gsi-in-golang",
    "body": "func (d DynamoDB) FindUserByEmail(ctx context.Context, email string) (store.User, error) {\n    cond1 := expression.Name(\"Email\").Equal(expression.Value(email))\n    expr, err := expression.NewBuilder().WithCondition(cond1).Build()\n    if err != nil {\n        return store.User{}, fmt.Errorf(\"expression build: %w\", err)\n    }\n    res, err := d.Client.Query(ctx, &dynamodb.QueryInput{\n        TableName: aws.String(d.Table),\n        IndexName: aws.String(d.GlobalIndex),\n        ExpressionAttributeNames:  expr.Names(),\n        ExpressionAttributeValues: expr.Values(),\n        KeyConditionExpression:    expr.Condition(),\n    })"
  },
  {
    "url": "https://stackoverflow.com/questions/78759994/go-channel-sometimes-not-receiving-the-last-value",
    "body": "func WithChannels() {\n    var counter int\n    ch := make(chan int)\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            for j := 0; j < 1000; j++ {\n                time.Sleep(time.Duration(1))\n                ch <- 1\n            }\n        }()\n    }\n    // Use a goroutine to wait for all the senders to complete and then close the channel.\n    go func() {\n        wg.Wait()\n        close(ch)\n    }()\n    // Receive from the channel until it's closed.\n    for {\n        increment, ok := <-ch\n        if !ok {\n            // channel closed, break\n            break\n        }\n        counter += increment\n    }\n\n    fmt.Println(\"Expected counter: 10000, Actual counter:\", counter)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78274003/how-to-send-a-message-to-a-device-with-self-signed-certification-as-authenticati",
    "body": "package main\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\ntype DeviceAuthentication struct {\n    Type             string `json:\"type\"`\n    X509Thumbprint   X509Thumbprint `json:\"x509Thumbprint\"`\n}\ntype X509Thumbprint struct {\n    PrimaryThumbprint   string `json:\"primaryThumbprint\"`\n    SecondaryThumbprint string `json:\"secondaryThumbprint\"`\n}\ntype DeviceCapabilities struct {\n    IotEdge bool `json:\"iotEdge\"`\n}\ntype Device struct {\n    Authentication           DeviceAuthentication `json:\"authentication\"`\n    Capabilities             DeviceCapabilities   `json:\"capabilities\"`\n    CloudToDeviceMessageCount int                  `json:\"cloudToDeviceMessageCount\"`\n    ConnectionState          string               `json:\"connectionState\"`\n    ConnectionStateUpdated   string               `json:\"connectionStateUpdatedTime\"`\n    DeviceId                 string               `json:\"deviceId\"`\n    DeviceScope              string               `json:\"deviceScope\"`\n    Etag                     string               `json:\"etag\"`\n    GenerationId             string               `json:\"generationId\"`\n    LastActivityTime         string               `json:\"lastActivityTime\"`\n    Status                   string               `json:\"status\"`\n    StatusReason             string               `json:\"statusReason\"`\n    StatusUpdatedTime        string               `json:\"statusUpdatedTime\"`\n}\nfunc main() {\n    sasToken := \"SharedAccessSignature sr=<your IoT Hub name>.azure-devices.net/devices/<your device ID>&sig=<your signature>&se=<expiry time>&skn=<policy name>\"\n    deviceID := \"sampleDevice\"\n    iotHubName := \"your-iot-hub-name\"\n    url := fmt.Sprintf(\"https://%s.azure-devices.net/devices/%s?api-version=2020-05-31-preview\", iotHubName, deviceID)\n    requestBody := Device{\n        Authentication: DeviceAuthentication{\n            Type: \"selfSigned\",\n            X509Thumbprint: X509Thumbprint{\n                PrimaryThumbprint:   \"YOUR_PRIMARY_THUMBPRINT\",\n                SecondaryThumbprint: \"YOUR_SECONDARY_THUMBPRINT\",\n            },\n        },\n        Capabilities:             DeviceCapabilities{IotEdge: false},\n        CloudToDeviceMessageCount: 0,\n        ConnectionState:          \"Disconnected\",\n        ConnectionStateUpdated:   \"2024-04-04T00:00:00Z\",\n        DeviceId:                 deviceID,\n        DeviceScope:              \"\",\n        Etag:                     \"\",\n        GenerationId:             \"\",\n        LastActivityTime:         \"2024-04-04T00:00:00Z\",\n        Status:                   \"enabled\",\n        StatusReason:             \"\",\n        StatusUpdatedTime:        \"2024-04-04T00:00:00Z\",\n    }\n    requestBodyBytes, err := json.Marshal(requestBody)\n    if err != nil {\n        log.Fatal(err)\n    }\n    req, err := http.NewRequest(\"PUT\", url, bytes.NewBuffer(requestBodyBytes))\n    if err != nil {\n        log.Fatal(err)\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"Authorization\", sasToken)\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n    responseBody, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if resp.StatusCode != http.StatusOK {\n        log.Fatalf(\"Failed to create/update device: %s\", responseBody)\n    }\n    fmt.Println(\"Device created/updated successfully!\")\n    fmt.Println(\"Response Body:\", string(responseBody))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78274003/how-to-send-a-message-to-a-device-with-self-signed-certification-as-authenticati",
    "body": "package main\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    // Replace these variables with your actual values\n    iotHubName := \"your-iot-hub-name\"\n    deviceID := \"your-device-id\"\n    sasToken := \"SharedAccessSignature sr=<your IoT Hub name>.azure-devices.net&sig=<your signature>&se=<expiry time>&skn=<policy name>\"\n    // Message payload\n    message := []byte(`{\"data\":\"Hello from your device!\"}`)\n    // Construct the URL\n    url := fmt.Sprintf(\"https://%s.azure-devices.net/devices/%s/messages/events?api-version=2020-03-13\", iotHubName, deviceID)\n    // Create a POST request with the message payload\n    req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(message))\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Set the required headers\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"Authorization\", sasToken)\n    // Send the request\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n    // Check the response status\n    if resp.StatusCode == http.StatusNoContent {\n        fmt.Println(\"Message sent successfully!\")\n    } else {\n        fmt.Printf(\"Failed to send message. Status code: %d\\n\", resp.StatusCode)\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78087693/go-gin-gonic-handle-not-found-for-route-group",
    "body": "package main\nimport (\n\t\"net/http\"\n\t\"strings\"\n\t\"github.com/gin-gonic/gin\"\n)\nfunc notFoundHandler(c *gin.Context) {\n\t// check the path is /sub\n\tif strings.HasPrefix(c.Request.URL.Path, \"/sub/\") {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"message\": \"Route not found in /sub\"})\n\t\tc.Abort()\n\t}\n\t// check the path is /v1\n\tif strings.HasPrefix(c.Request.URL.Path, \"/v1/\") {\n\t\tc.JSON(http.StatusNotFound, gin.H{\"message\": \"Route not found in /v1\"})\n\t\tc.Abort()\n\t}\n}\nfunc main() {\n\tr := gin.Default()\n\tv1 := r.Group(\"/v1\")\n\t{\n\t\tv1.GET(\"/a\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"inside v1 a\"})\n\t\t\treturn\n\t\t})\n\t}\n\trGroup := r.Group(\"/sub\")\n\t{\n\t\trGroup.GET(\"/a\", func(c *gin.Context) {\n\t\t\tc.JSON(200, gin.H{\"message\": \"inside sub a\"})\n\t\t\treturn\n\t\t})\n\t}\n\tr.NoRoute(notFoundHandler)\n\tr.Run(\":8000\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/78074277/go-parse-json-fixed-size-array",
    "body": "func (d *DataPoint) UnmarshalJSON(b []byte) error {\n\tvar records []json.RawMessage\n\tif err := json.Unmarshal(b, &records); err != nil {\n\t\treturn err\n\t}\n\tif err := json.Unmarshal(records[0], &d.Timestamp); err != nil {\n\t\treturn err\n\t}\n\tif err := json.Unmarshal(records[1], &d.Value); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc main() {\n    jsonData := []byte(`{\"data\":[[132412,124.125],[3215124,23.123],[3214121224,21.42222]]}`)\n    var data JsonData\n    err := json.Unmarshal(jsonData, &data)\n    if err != nil {\n        fmt.Println(\"Error unmarshalling JSON:\", err)\n        return\n    }\n    println(data.Data[0].Timestamp)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77291179/break-golang-infinite-loop",
    "body": "func extractKeyValuePairs(taskFilePathList []string) []KeyValue {\n    keyValueList := []KeyValue{}\n    log.Printf(\"%v\", taskFilePathList)\n    for _, fileName := range taskFilePathList {\n        file, err := os.Open(fileName)\n        if err != nil {\n            log.Fatal(err)\n        }\n        dec := json.NewDecoder(file)\n        for dec.More() {\n            var kv KeyValue\n            err := dec.Decode(&kv)\n            if err != nil {\n                file.Close()\n                break\n            }\n            keyValueList = append(keyValueList, kv)\n        }\n    }\n    return keyValueList\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77212467/json-cannot-unmarshal-object-into-go-value-of-type-jsonpatch-patch-how-to-fix",
    "body": "package main\nimport (\n\t\"fmt\"\n\tjsonpatch \"github.com/evanphx/json-patch/v5\"\n)\nfunc main() {\n\t// \tpatchJSON := []byte(`{\"op\": \"replace\", \"path\": \"/summarybrief\", \"value\": \"Second Test Issue\"}`) // Fails with \"Error decoding patch json  json: cannot unmarshal object into Go value of type jsonpatch.Patch\"\n\tpatchJSON := []byte(`[{\"op\": \"replace\", \"path\": \"/summarybrief\", \"value\": \"Second Test Issue\"}]`) // Successfully processed\n\tpatch, err := jsonpatch.DecodePatch(patchJSON)\n\tif err != nil {\n\t\tfmt.Println(\"Error decoding patch json \", err.Error())\n\t\treturn\n\t}\n\tfmt.Println(patch)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/77124030/how-to-return-from-a-function-when-a-timer-finishes-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc askQuestions(timer *time.Timer, questions []string) []string {\n\tvar input string\n\tvar userAnswers []string\n\tquizFinished := make(chan bool, 1)\n\tfmt.Println(\"start quiz...\")\n\tgo func() {\n\t\t<-timer.C\n\t\tfmt.Println(\"\\nquiz over...\")\n\t\tquizFinished <- true\n\t}()\n\tfor index, element := range questions {\n\t\tfmt.Printf(\"question %d: %s? \", index+1, element)\n\t\tanswerCh := make(chan string, 1)\n\t\tgo func() {\n\t\t\tfmt.Scanln(&input)\n\t\t\tanswerCh <- input\n\t\t}()\n\t\tselect {\n\t\tcase <-quizFinished:\n\t\t\tfmt.Println(\"exit quiz...\")\n\t\t\treturn userAnswers\n\t\tcase answer := <-answerCh:\n\t\t\tuserAnswers = append(userAnswers, answer)\n\t\t}\n\t}\n\treturn userAnswers\n}\nfunc main() {\n\ttimer := time.NewTimer(10 * time.Second)\n\tquestions := []string{\"5+5\", \"1+1\", \"8+3\"}\n\tresponses := askQuestions(timer, questions)\n\tfmt.Println(\"answer:\", responses)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76976010/accessing-a-go-slice-without-panicking",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n\ts := []int{1, 2, 3}\n\tfmt.Println(Slice(s, 1, 4))  // output: [2, 3]\n\tfmt.Println(Slice(s, 2, 1))  // output: []\n\tfmt.Println(Slice(s, 5, 7))  // output: []\n\tfmt.Println(Slice(s, -2, 1)) // output: [1]\n}\nfunc Slice[S ~[]T, T any](s S, lo, hi int) S {\n\tif hi <= lo {\n\t\treturn nil\n\t}\n\tlo = clip(0, lo, cap(s))\n\thi = clip(0, hi, cap(s))\n\treturn s[lo:hi]\n}\nfunc clip(lo, a, hi int) int {\n\treturn max(lo, min(a, hi))\n}\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76895155/upload-string-or-array-of-bytes-in-parts-to-aws-s3-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/credentials\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n\t\"github.com/aws/aws-sdk-go/service/s3/s3manager\"\n)\nconst (\n    // Use environment variables instead for credentials\n\tAccessKey = \"your-access-key\"\n\tSecretKey = \"your-secret-key\"\n    // Your bucket region and name\n\tS3Region  = \"your-bucket-region\" // e.g. eu-central-1\n\tS3Bucket  = \"your-bucket-name\"\n\t// The number of bytes per chunk. Change this according to your case, this is just\n\t// an example value used in this code because here we are creating chunks from a string.\n\t// You can use something like 10 * 1024 * 1024 to set up chunk size to 10MB.\n\tChunkSize = 50\n)\nfunc main() {\n\t// create an aws session\n\tsess, err := session.NewSession(&aws.Config{\n\t\tRegion:      aws.String(S3Region),\n\t\tCredentials: credentials.NewStaticCredentials(AccessKey, SecretKey, \"\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// create an uploader\n\tpr, pw := io.Pipe()\n\terrch := make(chan error)\n\tgo chunkUploader(sess, \"example_file_1\", errch, pr)\n\t// retrieve the data from database\n\tchunk, skip := retrieveNextChunk(0, ChunkSize)\n\tfor {\n\t\tif len(chunk) == 0 {\n\t\t\tbreak\n\t\t}\n\t\t// this uploads the chunk\n\t\tpw.Write(chunk)\n\t\t// this retrieves new data from \"database\" and saves the as a new chunk and new\n\t\t// skip value for the next retrieving\n\t\tchunk, skip = retrieveNextChunk(skip, ChunkSize)\n\t}\n\t// close the writter - this tells S3 to finish uploading your file which will\n\t// then appear in your bucket object list page\n\tpw.Close()\n\t// check for errors\n\terr = <-errch\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(\"Data successfully uploaded\")\n}\n// this is an example function for retrieving a part of data from your database\nfunc retrieveNextChunk(skip int, limit int) ([]byte, int) {\n\tfulldata := \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n\tvar chunk string\n\tif skip+limit > len(fulldata) {\n\t\tchunk = fulldata[skip:]\n\t} else {\n\t\tchunk = fulldata[skip : skip+limit]\n\t}\n\treturn []byte(chunk), skip + len(chunk)\n}\nfunc chunkUploader(session *session.Session, key string, errch chan<- error, reader *io.PipeReader) {\n\t_, err := s3manager.NewUploader(session).Upload(&s3manager.UploadInput{\n\t\tBucket:             aws.String(S3Bucket),\n\t\tKey:                aws.String(key),\n\t\tBody:               reader,\n\t\tContentDisposition: aws.String(\"attachment\"), // or \"inline\" = the file will be displayed in the browser if possible\n\t\tContentType:        aws.String(\"text/plain\"), // change this to you content type, for example application/json\n\t})\n\terrch <- err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76890361/unmarshaling-dynamodb-items-returns-same-item",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\ntype (\n\tUsers1 struct {\n\t\tUser  *string\n\t\tEmail *string\n\t}\n\tUsers2 struct {\n\t\tUser  string\n\t\tEmail string\n\t}\n)\nfunc main() {\n\tdbItems := []string{\n\t\t`{\"User\":\"userA\",\"Email\":\"userA@example.com\"}`,\n\t\t`{\"User\":\"userB\",\"Email\":\"userB@example.com\"}`,\n\t}\n\tu1Out := withVarDeclaredOutsideLoop[Users1](dbItems)\n\tprintUsers(u1Out)\n\tu1In := withVarDeclaredInsideLoop[Users1](dbItems)\n\tprintUsers(u1In)\n\tu2Out := withVarDeclaredOutsideLoop[Users2](dbItems)\n\tprintUsers(u2Out)\n\tu2In := withVarDeclaredInsideLoop[Users2](dbItems)\n\tprintUsers(u2In)\n\t// Output\n\t// u[0] = {User:0xc000014130 Email:0xc000014140}\n\t// u[1] = {User:0xc000014130 Email:0xc000014140}\n\t// u[0] = {User:0xc0000141c0 Email:0xc0000141d0}\n\t// u[1] = {User:0xc000014210 Email:0xc000014220}\n\t// u[0] = {User:userA Email:userA@example.com}\n\t// u[1] = {User:userB Email:userB@example.com}\n\t// u[0] = {User:userA Email:userA@example.com}\n\t// u[1] = {User:userB Email:userB@example.com}\n}\nfunc withVarDeclaredOutsideLoop[T any](dbItems []string) []T {\n\tvar t T\n\tu := []T{}\n\tfor _, dbItem := range dbItems {\n\t\tjson.Unmarshal([]byte(dbItem), &t)\n\t\tu = append(u, t)\n\t}\n\treturn u\n}\nfunc withVarDeclaredInsideLoop[T any](dbItems []string) []T {\n\tu := []T{}\n\tfor _, dbItem := range dbItems {\n\t\tvar t T\n\t\tjson.Unmarshal([]byte(dbItem), &t)\n\t\tu = append(u, t)\n\t}\n\treturn u\n}\nfunc printUsers[T any](u []T) {\n\tfor i, user := range u {\n\t\tfmt.Printf(\"u[%d] = %+v\\n\", i, user)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76593422/implementation-of-an-interface-which-contains-a-struct",
    "body": "package main\nimport \"log\"\n// ABCInterface provides a blueprint for types that include the Sum method.\ntype ABCInterface interface {\n\tSum() int\n}\n// ABC is a type that represents values of A, B, and C.\ntype ABC struct {\n\tA, B, C int\n}\n// ABCImpl is a type that inherits fields from ABC and implements ABCInterface.\ntype ABCImpl struct {\n\tABC\n}\n//You could eliminate the `ABC` struct and simply use\ntype ABCImpl struct {\n   A,B,C int\n}\n// Sum calculates the sum of A, B, and C and returns the result.\nfunc (a ABCImpl) Sum() int {\n\treturn a.C + a.A + a.B\n}\nfunc main() {\n\t// Create an instance of ABCImpl.\n\ttrialValue := ABCImpl{\n\t\tABC: ABC{\n\t\t\tA: 1,\n\t\t\tB: 2,\n\t\t\tC: 3,\n\t\t},\n\t}\n\n\t// Call the Sum method on the trialValue instance and print the result.\n\tlog.Println(trialValue.Sum())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76565007/how-to-capture-the-contents-of-stderr-in-a-c-function-call-from-golang",
    "body": "package main\n// #include <stdio.h>\n// #include <stdlib.h>\n//\n// // assume that we cannot change this function\n// static void library_call(char* s) {\n//   fprintf(stderr, \"%s\\n\", s);\n// }\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n// Solution based on eli's work at:\n// https://github.com/eliben/code-for-blog/blob/9920db50ab8e61718943e6ea355944b393b20772/2020/go-fake-stdio/snippets/redirect-cgo-stdout.go\nfunc main() {\n\t// use syscall.Dup to get a copy of stderr\n\torigStderr, err := syscall.Dup(syscall.Stderr)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr, w, _ := os.Pipe()\n\t// Clone the pipe's writer to the actual Stderr descriptor; from this point\n\t// on, writes to Stderr will go to w.\n\tif err = syscall.Dup2(int(w.Fd()), syscall.Stderr); err != nil {\n\t\tpanic(err)\n\t}\n\t// call the C function, and flush the output\n\tcs := C.CString(\"This should be the contents of the buffer\")\n\tC.library_call(cs)\n\tC.free(unsafe.Pointer(cs))\n\tC.fflush(nil)\n\t// close the pipe, restore original stderr, and close our dup'ed handle\n\tw.Close()\n\tsyscall.Dup2(origStderr, syscall.Stderr)\n\tsyscall.Close(origStderr)\n\t// read the data that was written to the pipe; Eli does this with a\n\t// goroutine in the background but this is simpler and seems to work here\n\t// for my purposes. Pipes have limited capacity and this will fail if\n    // the output is longer than what we see here; see Eli's code and blog\n    // for details\n\tb, _ := io.ReadAll(r)\n\tfmt.Printf(\"got output: %s\\n\", string(b))\n\tfmt.Fprintf(os.Stderr, \"stderr works normally\\n\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76557914/retrieving-go-command-line-flag-values-from-urfave-cli-v2",
    "body": "package main\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/urfave/cli/v2\"\n)\nvar dochost string = \"\"\nfunc buildAppInstance() (appInst *cli.App) {\n\tappInst = &cli.App{\n\t\tName:     \"deploy_docs\",\n\t\tVersion:  \"0.0.2\",\n\t\tCompiled: time.Now(),\n\t\tAuthors: []*cli.Author{\n\t\t\t{\n\t\t\t\tName:  \"Mike Pennington\",\n\t\t\t\tEmail: \"mike@pennington.net\",\n\t\t\t},\n\t\t},\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:        \"dochost\",\n\t\t\t\tValue:       \"127.0.0.1\",\n\t\t\t\tUsage:       \"FQDN or IPv4 of the documentation host\",\n\t\t\t\tDestination: &dochost,\n\t\t\t},\n\t\t},\n\t\tAction: func(cCtx *cli.Context) (err error) {\n\t\t\tlog.Println(\"Starting cli.Context action\")\n\t\t\tif cCtx.NArg() == 0 {\n\t\t\t\tlog.Fatal(\"No CLI arguments detected!\")\n\t\t\t}\n\t\t\tlog.Printf(\"args: %+v\", cCtx.Args())\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn appInst\n}\nfunc main() {\n\tapp := buildAppInstance()\n\tlog.Printf(\"dochost before Run: %q\", dochost)\n\tif err := app.Run(os.Args); err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"dochost after Run: %q\", dochost)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76514650/the-screenshot-generated-by-fullscreenshot-in-chromedp-package-is-too-blurry",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\t\"github.com/chromedp/cdproto/emulation\"\n\t\"github.com/chromedp/chromedp\"\n)\nfunc main() {\n\tctx, cancel := chromedp.NewContext(context.Background(), chromedp.WithDebugf(log.Printf))\n\tdefer cancel()\n\tvar width, height int64\n\tvar b []byte\n\terr := chromedp.Run(ctx,\n\t\tchromedp.EmulateViewport(10, 10),\n\t\tchromedp.Navigate(`The content of the file is in the code block below.html`),\n\t\tchromedp.EvaluateAsDevTools(`document.documentElement.scrollWidth`, &width),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\treturn chromedp.EmulateViewport(width, 10).Do(ctx)\n\t\t}),\n\t\tchromedp.EvaluateAsDevTools(`document.documentElement.scrollHeight`, &height),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\treturn chromedp.EmulateViewport(width, height, func(sdmop *emulation.SetDeviceMetricsOverrideParams, steep *emulation.SetTouchEmulationEnabledParams) {\n\t\t\t\tsdmop.DeviceScaleFactor = 3\n\t\t\t}).Do(ctx)\n\t\t}),\n\t\tchromedp.FullScreenshot(&b, 100),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\terr = os.WriteFile(\"test.png\", b, 0o777)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76502715/is-there-a-way-to-clean-this-post-request-of-backslashes-before-i-send-it-off",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/http/httputil\"\n\t\"github.com/go-resty/resty/v2\"\n)\nfunc main() {\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tbuf, err := httputil.DumpRequest(r, true)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Printf(\"%s\\n\", buf)\n\t}))\n\tdefer ts.Close()\n\tclient := resty.New()\n\timageName := \"image name\"\n\timageTag := \"image tag\"\n\t_, err := client.R().\n\t\tSetHeader(\"Content-Type\", \"text/plain\").\n\t\tSetBasicAuth(\"<username>\", \"<password>\").\n\t\tSetBody(fmt.Sprintf(`items.find({\"$and\": [{\"repo\":{\"$match\":\"<folder>\"}},{\"path\": {\"$match\":\"%s/%s\"}},{\"name\":{\"$match\":\"<tag>\"}}]}).include(\"repo\",\"path\",\"name\")`, imageName, imageTag)).\n\t\tPost(ts.URL)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76462803/getting-eof-for-a-valid-json-when-doing-a-gin-context-shouldbind",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n)\ntype Todo struct {\n\tDescription string `json:\"description\" binding:\"required\"`\n}\nfunc Todos(c *gin.Context) {\n\t// read the body the first time\n\tvar todo Todo\n\tif err := c.ShouldBindBodyWith(&todo, binding.JSON); err != nil {\n\t\tc.JSON(http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tfmt.Println(\"first time:\", todo)\n\t// read the body again\n\tvar todoSecondTime Todo\n\tif err := c.ShouldBindBodyWith(&todoSecondTime, binding.JSON); err != nil {\n\t\tc.JSON(http.StatusBadRequest, err)\n\t\treturn\n\t}\n\tfmt.Println(\"second time:\", todoSecondTime)\n}\nfunc main() {\n\tgin.SetMode(gin.DebugMode)\n\tr := gin.Default()\n\tr.POST(\"/todos\", Todos)\n\tr.Run(\":8080\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76446618/how-make-git-repo-install-with-go-install-command-and-retract-mistakenly-publi",
    "body": "$ go clean -modcache\n$ go install -x github.com/asolopovas/dsync@latest\n# get https://proxy.golang.org/github.com/@v/list\n# get https://proxy.golang.org/github.com/asolopovas/@v/list\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/list\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/list: 200 OK (1.202s)\n# get https://proxy.golang.org/github.com/@v/list: 404 Not Found (1.202s)\n# get https://proxy.golang.org/github.com/asolopovas/@v/list: 404 Not Found (1.202s)\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.info\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.info: 200 OK (0.293s)\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.mod\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.mod: 200 OK (0.617s)\n# get https://proxy.golang.org/sumdb/sum.golang.org/supported\n# get https://proxy.golang.org/sumdb/sum.golang.org/supported: 404 Not Found (0.304s)\n# <output truncated>\ngo: downloading github.com/asolopovas/dsync v1.0.0\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.zip\n# get https://proxy.golang.org/github.com/asolopovas/dsync/@v/v1.0.0.zip: 200 OK (0.324s)\npackage github.com/asolopovas/dsync is not a main package"
  },
  {
    "url": "https://stackoverflow.com/questions/76197311/unit-test-for-post-request-is-not-working-in-go",
    "body": "package handlers\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\ntype Startup struct {\n\tName     string `json:\"name\"`\n\tPassword string `json:\"password\"`\n\tEmail    string `json:\"email\"`\n}\nfunc RegStartup(w http.ResponseWriter, r *http.Request) {\n\tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n\tif r.Method != \"POST\" {\n\t\tfmt.Fprintf(w, \"error: the request is not a POST type\")\n\t\treturn\n\t}\n\t//other.AccessSetter(w)\n\tvar query Startup\n\terr := json.NewDecoder(r.Body).Decode(&query)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\treturn\n\t}\n\tdbConn := r.Context().Value(\"Db\").(*sql.DB)\n\tif dbConn == nil {\n\t\tlog.Fatal(\"database connection must be provided!\")\n\t\treturn\n\t}\n\tstmt, err := dbConn.Prepare(`INSERT INTO startups (name, password, email) VALUES (?, ?, ?)`)\n\tdefer stmt.Close()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\t_, err = stmt.Exec(query.Name, query.Password, query.Email)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\tfmt.Fprintf(w, \"data entered successfully\")\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76197311/unit-test-for-post-request-is-not-working-in-go",
    "body": "package handlers\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\t\"github.com/DATA-DOG/go-sqlmock\"\n\t\"github.com/stretchr/testify/assert\"\n)\nfunc TestRegStartup(t *testing.T) {\n\tdb, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherEqual))\n\tdefer db.Close()\n\tif err != nil {\n\t\tt.Errorf(\"err not expected while opening mock connection %v\", err)\n\t}\n\tmock.ExpectPrepare(`INSERT INTO startups (name, password, email) VALUES (?, ?, ?)`)\n\tmock.ExpectExec(`INSERT INTO startups (name, password, email) VALUES (?, ?, ?)`).WithArgs(\"john doe\", \"123456789\", \"john.doe@example.com\").WillReturnResult(sqlmock.NewResult(1, 0))\n\tw := httptest.NewRecorder()\n\tr := &http.Request{\n\t\tHeader: make(http.Header),\n\t}\n\tr.Header.Set(\"Content-Type\", \"application/json\")\n\tr.Method = http.MethodPost\n\tr.Body = io.NopCloser(strings.NewReader(`{\"name\": \"john doe\", \"password\": \"123456789\", \"email\": \"john.doe@example.com\"}`))\n\tr = r.WithContext(context.WithValue(r.Context(), \"Db\", db))\n\tRegStartup(w, r)\n\tassert.Equal(t, \"data entered successfully\", w.Body.String())\n\tif err := mock.ExpectationsWereMet(); err != nil {\n\t\tt.Errorf(\"not all expectations were met %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/76110711/how-to-convert-struct-type-into-interface-for-pgx-copyfromslice",
    "body": "type MbpImport struct {\n    Partner_id           int        `dbcol:\"partner_id\"`\n    Target_table         string     `dbcol:\"target_table\"`\n    Keystring            string     `dbcol:\"keystring\"`\n    Info_date            time.Time  `dbcol:\"info_date\"`\n    Mbp                  string     `dbcol:\"mbp\"`\n    Mbp_id               int        `dbcol:\"mbp_id\"`\n    Client_id            string     `dbcol:\"client_id\"`\n    Status               string     `dbcol:\"status\"`\n    Spam_traps           int64      `dbcol:\"spam_traps\"`\n    Spam_traps_imp       bool       `dbcol:\"spam_traps_imp\"`\n    Email_volume         int64      `dbcol:\"email_volume\"`\n    Spam_clicks          int64      `dbcol:\"spam_clicks\"`\n    Spam_clicks_imp      bool       `dbcol:\"spam_clicks_imp\"`\n    Inbox                int64      `dbcol:\"inbox\"`\n    Spam_filter          int64      `dbcol:\"spam_filter\"`\n    Spam_filter_imp      bool       `dbcol:\"spam_filter_imp\"`\n    Dkim_missing         int64      `dbcol:\"dkim_missing\"`\n    Dkim_errors          int64      `dbcol:\"dkim_errors\"`\n    Dkim_imp             bool       `dbcol:\"dkim_imp\"`\n    Dkim_simple_strict   int64      `dbcol:\"dkim_simple_strict\"`\n    Dkim_simple_relaxed  int64      `dbcol:\"dkim_simple_relaxed\"`\n}\nfunc (data *MbpImportRows) Columns() []string {\n    s := reflect.ValueOf(new(MbpImport)).Elem()\n    myStr := make([]string, s.NumField())\n    for i := 0; i < s.NumField(); i++ {\n        myStr[i] = s.Type().Field(i).Tag.Get(\"dbcol\")\n    }\n    return myStr\n}\nfunc (data *MbpImportRows) GetAsInterface(index int) ([]interface{}, error) {\n    s := reflect.ValueOf(&data.rows[index]).Elem()\n    result := make([]interface{}, s.NumField())\n    for i := 0; i < s.NumField(); i++ {\n        result[i] = s.Field(i).Interface()\n    }\n    return result, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75954946/programatically-fetch-macos-version-using-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"golang.org/x/sys/unix\"\n)\nfunc main() {\n\tvar uts unix.Utsname\n\tif err := unix.Uname(&uts); err != nil {\n\t\tpanic(err)\n\t}\n\tsysname := unix.ByteSliceToString(uts.Sysname[:])\n\trelease := unix.ByteSliceToString(uts.Release[:])\n\tfmt.Printf(\"sysname: %s\\nrelease: %s\\n\", sysname, release)\n\tif sysname == \"Darwin\" {\n\t\tdotPos := strings.Index(release, \".\")\n\t\tif dotPos == -1 {\n\t\t\tfmt.Printf(\"invalid release value: %s\\n\", release)\n\t\t\treturn\n\t\t}\n\t\tmajor := release[:dotPos]\n\t\tmajorVersion, err := strconv.Atoi(major)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"invalid release value: %s, %v\\n\", release, err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(\"macOS >= Big Sur:\", majorVersion >= 20)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75943183/how-will-iterate-over-a-slice-if-that-slice-increases-inside-the-loop",
    "body": "Start: i=0 s=A x=0xc0000161b0 [A B C]\nAfter x[i+1] = \"M\": i=0 s=A x=0xc0000161b0 [A M C]\nAfter Append: i=0 s=A x=0xc000062180 [A M C Z]\nAfter x[i+1] = \"Z\": i=0 s=A x=0xc000062180 [A Z C Z]\nStart: i=1 s=M x=0xc000062180 [A Z C Z]\nAfter x[i+1] = \"M\": i=1 s=M x=0xc000062180 [A Z M Z]\nAfter Append: i=1 s=M x=0xc000062180 [A Z M Z Z]\nAfter x[i+1] = \"Z\": i=1 s=M x=0xc000062180 [A Z Z Z Z]\nStart: i=2 s=C x=0xc000062180 [A Z Z Z Z]\nAfter x[i+1] = \"M\": i=2 s=C x=0xc000062180 [A Z Z M Z]\nAfter Append: i=2 s=C x=0xc000062180 [A Z Z M Z Z]\nAfter x[i+1] = \"Z\": i=2 s=C x=0xc000062180 [A Z Z Z Z Z]"
  },
  {
    "url": "https://stackoverflow.com/questions/75498034/my-code-can-pass-through-3-usage-but-i-dont-know-why-i-cant-pass-the-other",
    "body": "package main\nimport \"fmt\"\nfunc yi(x,y int, s byte, a [][]int) (x1,y1 int){\n    switch(s){\n\n        case 'L':\n            for{\n                if y==0 || a[x][y-1]==1{\n                    return x,y\n                }\n                y--\n            }\n        case 'R':\n            for{\n                if y==4 || a[x][y+1]==1{\n                    return x,y\n                }\n                y++\n            }\n        case 'U':\n            for{\n                if x==0 || a[x-1][y]==1{\n                    return x,y\n                }\n                x--\n            }\n        case 'D':\n            for{\n                if x==4 || a[x+1][y]==1{\n                    return x,y\n                }\n                x++\n            }\n\n    }\n    return x1,y1\n}\nfunc main() {\n    var x,y,xc,yc,count int\n    fmt.Scanf(\"%d %d\",&x,&y)\n    fmt.Scanf(\"%d %d\",&xc,&yc)\n    fmt.Scanf(\"%d\",&count)\n    // s:= make([]int,1,1)\n    i:=count\n\n    // }\n    arr := make([][]int, x)\n for i := 0; i < x; i++ {\n  arr[i] = make([]int, y)\n }\n    // var arr [6][6]int\n    for j:=0;j<i;j++{\n        var xt,yt int\n        fmt.Scanf(\"%d %d\",&xt,&yt)\n        arr [xt-1][yt-1]=1\n    }\n    // for i:=0;i<x;i++{\n    //     for j:=0;j<y;j++{\n    //         fmt.Print(arr[i][j],\" \")\n    //     }\n    //     fmt.Println()\n    // }\n    var kong string\n    fmt.Scanf(\"%s\",&kong)\n    xf,yf:=xc-1,yc-1\n    // xf,yf=yi(xf,yf,'R',arr)\n    // fmt.Println(string(kong[7]))\n    for i:=0; i<count; i++{\n        xf,yf=yi(xf,yf,kong[i],arr)\n        // fmt.Println(xf,yf)\n        // func yi(x,y int, i int, s string, a *[5][5]int) (x1,y1 int){\n    }\n    fmt.Println(xf+1,yf+1)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/75331542/convering-0033-to-duration-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n)\nvar origin = time.Date(0, 1, 1, 0, 0, 0, 0, time.UTC)\nfunc parseDuration(input string) (time.Duration, error) {\n\tvar layout string\n\tif strings.Count(input, \":\") == 1 {\n\t\tlayout = \"04:05\"\n\t} else {\n\t\tlayout = \"15:04:05\"\n\t}\n\tt, err := time.Parse(layout, input)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\treturn t.Sub(origin), nil\n}\nfunc main() {\n\tinput := \"00:04\"\n\tduration, err := parseDuration(input)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tfmt.Println(duration.String()) // this prints 4s\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74697312/get-difference-between-two-struct-slices-array-based-on-certain-fields-golang",
    "body": "type AppointmentsDetail struct {\n\tData\n\tUser string\n}\ntype Data struct{ AppointmentType, Date, Time string }\nfunc main() {\n\tvar p1 = []AppointmentsDetail{\n\t\t{Data{\"Consult\", \"01-12-2022\", \"15:00\"}, \"Nil\"}, {Data{\"Surgery\", \"02-12-2022\", \"12:00\"}, \"Nil\"},\n\t\t{Data{\"Surgery\", \"01-01-2022\", \"12:00\"}, \"Nil\"}, {Data{\"Surgery\", \"11-11-2023\", \"12:00\"}, \"Nil\"},\n\t}\n\tvar p2 = []AppointmentsDetail{\n\t\t{Data{\"Consult\", \"01-12-2022\", \"15:00\"}, \"Admin\"},\n\t\t{Data{\"Surgery\", \"02-12-2022\", \"12:00\"}, \"Admin\"},\n\t}\n\tfmt.Println(getDifference(p1, p2))\n}\nfunc getDifference(a, b []AppointmentsDetail) []AppointmentsDetail {\n\tmb := make(map[Data]struct{}, len(b))\n\tfor _, x := range b {\n\t\tmb[x.Data] = struct{}{}\n\t}\n\tvar diff []AppointmentsDetail\n\tfor _, x := range a {\n\t\tif _, found := mb[x.Data]; !found {\n\t\t\tdiff = append(diff, x)\n\t\t}\n\t}\n\treturn diff\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74436443/how-to-unmarshall-to-interface-type",
    "body": "var service Service\nvar err error\nswitch x {\n    case \"something\":\n        var something Something // this implements Service\n        err = json.Unmarshal(data, &something)\n        service = something\n    case \"something else\":\n        var somethingElse SomethingElse // this implements Service\n        err = json.Unsmarshal(data, &somethingElse)\n        service = somethingElse\n    // etc...\n}\nif err != nil {\n    // handle error (here or inside of each case if you need/want to)\n}\n// use service as needed here"
  },
  {
    "url": "https://stackoverflow.com/questions/74214338/receiving-unknown-response-body",
    "body": "type CommonResponse struct {\n    TransactionResponse struct {\n        ResponseCode   string `json:\"responseCode\"`\n        AuthCode       string `json:\"authCode\"`\n        AvsResultCode  string `json:\"avsResultCode\"`\n        CvvResultCode  string `json:\"cvvResultCode\"`\n        CavvResultCode string `json:\"cavvResultCode\"`\n        TransID        string `json:\"transId\"`\n        RefTransID     string `json:\"refTransID\"`\n        TransHash      string `json:\"transHash\"`\n        TestRequest    string `json:\"testRequest\"`\n        AccountNumber  string `json:\"accountNumber\"`\n        AccountType    string `json:\"accountType\"`\n        Messages       []struct {\n            Code        string `json:\"code\"`\n            Description string `json:\"description\"`\n        } `json:\"messages\"`\n        Errors         []struct {\n            ErrorCode string `json:\"errorCode\"`\n            ErrorText string `json:\"errorText\"`\n        } `json:\"errors\"`\n        UserFields []struct {\n            Name  string `json:\"name\"`\n            Value string `json:\"value\"`\n        } `json:\"userFields\"`\n        TransHashSha2                          string `json:\"transHashSha2\"`\n        SupplementalDataQualificationIndicator int    `json:\"SupplementalDataQualificationIndicator\"`\n        NetworkTransID                         string `json:\"networkTransId\"`\n    } `json:\"transactionResponse\"`\n    RefID    string `json:\"refId\"`\n    Messages struct {\n        ResultCode string `json:\"resultCode\"`\n        Message    []struct {\n            Code string `json:\"code\"`\n            Text string `json:\"text\"`\n        } `json:\"message\"`\n    } `json:\"messages\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74172305/k8s-how-to-update-specific-value-in-secret",
    "body": "package main\nimport (\n  \"context\"\n  \"encoding/json\"\n  \"flag\"\n  \"fmt\"\n  \"path/filepath\"\n  v1 \"k8s.io/api/core/v1\"\n  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n  \"k8s.io/apimachinery/pkg/types\"\n  \"k8s.io/client-go/kubernetes\"\n  \"k8s.io/client-go/tools/clientcmd\"\n  \"k8s.io/client-go/util/homedir\"\n)\nfunc main() {\n  var kubeconfig *string\n  var namespace *string\n  var secretname *string\n  namespace = flag.String(\"namespace\", \"\", \"namespace of secret\")\n  secretname = flag.String(\"name\", \"\", \"name of secret\")\n  if home := homedir.HomeDir(); home != \"\" {\n    kubeconfig = flag.String(\"kubeconfig\", filepath.Join(home, \".kube\", \"config\"), \"(optional) absolute path to the kubeconfig file\")\n  } else {\n    kubeconfig = flag.String(\"kubeconfig\", \"\", \"absolute path to the kubeconfig file\")\n  }\n  flag.Parse()\n  if *namespace == \"\" {\n    panic(fmt.Errorf(\"you must specify a namespace\"))\n  }\n  if *secretname == \"\" {\n    panic(fmt.Errorf(\"you must specify a secret name\"))\n  }\n  config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig)\n  if err != nil {\n    panic(err)\n  }\n  clientset, err := kubernetes.NewForConfig(config)\n  if err != nil {\n    panic(err)\n  }\n  secretClient := clientset.CoreV1().Secrets(*namespace)\n  ctx := context.TODO()\n  updSec := v1.Secret{\n    Data: map[string][]byte{\n      \"val2\": []byte(\"newval\"),\n    },\n  }\n  payloadBytes, err := json.Marshal(updSec)\n  if err != nil {\n    panic(err)\n  }\n  if _, err = secretClient.Patch(ctx, *secretname,\n    types.StrategicMergePatchType, payloadBytes, metav1.PatchOptions{}); err != nil {\n    panic(err)\n  }\n  // Fetch updated secret\n  sec, err := secretClient.Get(ctx, *secretname, metav1.GetOptions{})\n  if err != nil {\n    panic(err)\n  }\n  secJson, err := json.MarshalIndent(sec, \"\", \"  \")\n  if err != nil {\n    panic(err)\n  }\n  fmt.Print(string(secJson))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74172305/k8s-how-to-update-specific-value-in-secret",
    "body": "// Read the existing secret\n  secret := &corev1.Secret{}\n  if err := r.Get(ctx, req.NamespacedName, secret); err != nil {\n    panic(err)\n  }\n  // Check if it needs to be modified\n  val, ok := secret.Data[\"val2\"]\n  // If yes, update the secret with a new value and then write\n  // the entire object back with Update\n  if !ok || !bytes.Equal(val, []byte(\"val2\")) {\n    ctxlog.Info(\"needs update\", \"secret\", secret)\n    secret.Data[\"val2\"] = []byte(\"newval\")\n    if err := r.Update(ctx, secret); err != nil {\n      panic(err)\n    }\n  }"
  },
  {
    "url": "https://stackoverflow.com/questions/74163222/golang-create-an-interface-to-abstract-a-method-which-may-have-have-variable-a",
    "body": "type Item interface{\n  Description() string\n  Age() int\n}\ntype human struct{\n  age int\n}\nfunc (h *human) Description() string {\n  return \"human\"\n}\nfunc (h *human) Age() int {\n  return h.age\n}\ntype Publisher interface{\n  Subscribe(func(Item))\n}\ntype humanProducer struct{\n  subscribers []func(Item)\n}\nfunc (hp *humanProducer) Subscribe(f func(Item) {\n  hp.subscribers = append(hp.subscribers, f)\n}\n// Example use\nfunc addSubscriber(p Publisher, f func(Item)) {\n  p.Subscribe(f)\n}\nfunc main() {\n  hp := &humanProducer{}\n  addSubscriber(p, func(i Item) {\n    fmt.Printf(\"Got a %s that is %d years old.\\n\", i.Description(), i.Age())\n  })\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74092090/how-to-delete-exact-matched-data-from-nested-map-in-golang",
    "body": "package main\nimport \"fmt\"\ntype cacheData map[string]map[string]map[string]string\nfunc main() {\n\tcacheEntries := make(cacheData)\n\tcacheEntries[\"http://10.3.5.6\"] = make(map[string]map[string]string)\n\tcacheEntries[\"http://10.3.5.6\"][\"8080\"] = make(map[string]string)\n\tcacheEntries[\"http://10.3.5.6\"][\"8080\"][\"/path7\"] = \"URL\"\n\tcacheEntries[\"http://10.3.5.7\"] = make(map[string]map[string]string)\n\tcacheEntries[\"http://10.3.5.7\"][\"8080\"] = make(map[string]string)\n\tcacheEntries[\"http://10.3.5.7\"][\"8080\"][\"/path7\"] = \"URL\"\n\tfmt.Println(cacheEntries)\n\tdelMap := cacheEntries[\"http://10.3.5.6\"][\"8080\"]\n\tdelVal := \"/path7\"\n\tdelete(delMap, delVal)\n\tfmt.Println(cacheEntries)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/74092090/how-to-delete-exact-matched-data-from-nested-map-in-golang",
    "body": "package main\nimport \"fmt\"\ntype cacheData map[string]map[string]map[string]string\nfunc main() {\n\tcacheEntries := make(cacheData)\n\tcacheEntries[\"http://10.3.5.6\"] = make(map[string]map[string]string)\n\tcacheEntries[\"http://10.3.5.6\"][\"8080\"] = make(map[string]string)\n\tcacheEntries[\"http://10.3.5.6\"][\"8080\"][\"/path7\"] = \"URL\"\n\tcacheEntries[\"http://10.3.5.7\"] = make(map[string]map[string]string)\n\tcacheEntries[\"http://10.3.5.7\"][\"8080\"] = make(map[string]string)\n\tcacheEntries[\"http://10.3.5.7\"][\"8080\"][\"/path7\"] = \"URL\"\n\tfmt.Println(cacheEntries)\n\tdel(\"http://10.3.5.6\", \"8080\", \"/path7\", cacheEntries)\n\tfmt.Println(cacheEntries)\n}\nfunc del(ip, port, path string, cacheEntries cacheData) {\n\tmapIP := cacheEntries[ip]\n\tif mapIP == nil {\n\t\treturn\n\t}\n\tmapPort := mapIP[port]\n\tif mapPort == nil {\n\t\treturn\n\t}\n\tdelete(mapPort, path)\n\tif len(mapPort) == 0 {\n\t\tdelete(mapIP, port)\n\t}\n\tif len(mapIP) == 0 {\n\t\tdelete(cacheEntries, ip)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73899548/how-to-find-most-frequent-integer-in-a-slice-of-struct-with-golang",
    "body": "type Passenger struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n}\nfunc GetPassengerList() []Passenger{\n   // 2. load the json file\n   content, err := os.ReadFile(\"passanger.json\")\n   if err != nil {\n       fmt.Println(err.Error())\n   }\n   // 3. parse json file to slice\n   var passengers []Passenger\n\n   err2 := json.Unmarshal(content, &passengers)\n   if err2 != nil {\n       fmt.Println(\"Error JSON Unmarshalling\")\n       fmt.Println(err2.Error())\n   }\n   return passengers\n}\n// 4a. Group by Age\nfunc GroupByAge(passengers []Passenger) map[int][]int {\n\tgroup := make(map[int][]int, 0)\n\tfor index, passenger := range passengers {\n\t\tageGroup := group[passenger.Age]\n\t\tageGroup = append(ageGroup, index)\n\t\tgroup[passenger.Age] = ageGroup\n\t}\n\treturn group\n}\n// 4b. find the most frequent age numbers\nfunc FindMostCommonAge(ageGroups map[int][]int) []int {\n\tmostFrequentAges := make([]int, 0)\n\tbiggestGroupSize := 0\n\t// find most frequent age numbers\n\tfor age, ageGroup := range ageGroups {\n\t\t// is most frequent age\n\t\tif biggestGroupSize < len(ageGroup) {\n\t\t\tbiggestGroupSize = len(ageGroup)\n\t\t\tmostFrequentAges = []int{age}\n\t\t} else if biggestGroupSize == len(ageGroup) { // is one of the most frequent age\n\t\t\tmostFrequentAges = append(mostFrequentAges, age)\n\t\t}\n\t\t// is not one of the most frequent age so does nothing\n\t}\n\treturn mostFrequentAges\n}\nfunc main() {\n\tpassengers := loadPassengers()\n    // I am lazy but if you want you could sort the\n    // smaller slice before printing to increase performance\n\tsort.Slice(passengers, func(i, j int) bool {\n\t\tif passengers[i].Age == passengers[j].Age {\n\t\t\treturn passengers[i].Name < passengers[j].Name\n\t\t}\n\t\treturn passengers[i].Age < passengers[j].Age\n\t})\n\t// age => []position\n\t// Length of the array count as the number of occurences\n\tageGrouper := GroupByAge(passengers)\n\tmostFrequentAges := FindMostCommonAge(ageGrouper)\n\t// print the passenger\n\tfor _, age := range mostFrequentAges {\n\t\tfmt.Println(\"{\")\n\t\tfor _, passengerIndex := range ageGrouper[age] {\n\t\t\tfmt.Println(\"\\t\", passengers[passengerIndex].Name)\n\t\t}\n\t\tfmt.Println(\"}\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73890004/how-to-trace-track-profile-capture-break-runtime-error-invalid-memory-address",
    "body": "func withTrace() {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tfmt.Printf(\"caught panic: %s\\n\", r)\n\t\t\tvar stack [4096]byte\n\t\t\tn := runtime.Stack(stack[:], false)\n\t\t\tfmt.Printf(\"%s\", stack[:n])\n\t\t\tfmt.Println(\"\\n// notice how 'trigger()' appears in the stack trace above,\\n// even though the 'defer' is called from 'withTrace()'\")\n\t\t}\n\t}()\n\tfmt.Println(\"=== running withTrace() ...\")\n\ttrigger()\n}\n// Output:\n=== running withTrace() ...\ncaught panic: from trigger\ngoroutine 1 [running]:\nmain.withTrace.func1()\n\t/tmp/sandbox2519976531/prog.go:31 +0x8b\npanic({0x48a120, 0x4b8c60})\n\t/usr/local/go-faketime/src/runtime/panic.go:884 +0x212\nmain.trigger(...)\n\t/tmp/sandbox2519976531/prog.go:11\nmain.withTrace()\n\t/tmp/sandbox2519976531/prog.go:38 +0x8c\nmain.main()\n\t/tmp/sandbox2519976531/prog.go:43 +0x1c\n// notice how 'trigger()' appears in the stack trace above,\n// even though the 'defer' is called from 'withTrace()'"
  },
  {
    "url": "https://stackoverflow.com/questions/73858175/nested-generic-types-reuse-functions-type-parameter",
    "body": "package main\nimport (\n\t\"fmt\"\n)\ntype mapCollector[K comparable, V any] struct {\n\tGetKey func(result V) K\n}\nfunc (m mapCollector[K, V]) Collect(result V) K {\n\treturn m.GetKey(result)\n}\ntype UserId string\ntype User struct {\n\tId UserId\n}\nfunc (u User) GetId() UserId {\n\treturn u.Id\n}\nfunc MakeUserMapCollector[K comparable, V any](collect func(result V) K) *mapCollector[K, V] {\n\treturn &mapCollector[K, V]{\n\t\tGetKey: collect,\n\t}\n}\nfunc main() {\n\tu := User{\n\t\tId: \"12\",\n\t}\n\tmc := MakeUserMapCollector[UserId, User](func(result User) UserId { return result.GetId() })\n\tfmt.Println(mc.Collect(u))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73775418/deadlock-while-using-goroutines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\ntype logEntry struct {\n\tlines      []string\n\tcreated_at string\n\tline_count int\n}\nvar wg sync.WaitGroup\nfunc main() {\n\tlinesChan := make(chan (logEntry))\n\t// Process entries from lines\n\tgo func() {\n\t\tfor c := range linesChan {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t\tfmt.Printf(\"%v\\n\", c)\n\t\t}\n\t}()\n\t// Read lines\n\tfor i := 1; i <= 10; i++ {\n\t\twg.Add(1)\n\t\tgo func(i int, linesChan chan (logEntry)) {\n\t\t\tread(i, linesChan)\n\t\t}(i, linesChan)\n\t}\n\t// Wait till all the files are read\n\twg.Wait()\n}\nfunc read(count int, channel chan (logEntry)) {\n\tfmt.Println(count, \"read\")\n\tchannel <- logEntry{\n\t\tline_count: count,\n\t}\n\twg.Done()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73642730/stop-all-running-nested-loops-inside-for-go-func-for-loop",
    "body": "package main\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"sync\"\n)\nfunc main() {\n\t// Get the context and a function to cancel it\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel() // Not really required here but its good practice to ensure context is cancelled eventually.\n\tresults := make(chan string)\n\tconst goRoutineCount = 100\n\tvar wg sync.WaitGroup\n\twg.Add(goRoutineCount) // we will be waiting on 100 goRoutines\n\tfor i := 0; i < goRoutineCount; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done() // Decrement WaitGroup when goRoutine exits\n\t\t\treq, err := http.NewRequestWithContext(ctx, http.MethodGet, \"https://discord.com/api/v9/invites/family\", nil)\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tresp, err := http.DefaultClient.Do(req)\n\t\t\tif err != nil {\n\t\t\t\tif errors.Is(err, context.Canceled) {\n\t\t\t\t\treturn // The error is due to the context being cancelled so just shutdown\n\t\t\t\t}\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tdefer resp.Body.Close() // Ensure body is closed\n\t\t\tif resp.StatusCode == 200 {\n\t\t\t\tvar result map[string]interface{}\n\t\t\t\tif err = json.NewDecoder(resp.Body).Decode(&result); err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tserverName := result[\"guild\"].(map[string]interface{})[\"name\"]\n\t\t\t\tresults <- serverName.(string) // Should error check this...\n\t\t\t\tcancel()                       // We have a result so all goroutines can stop now!\n\t\t\t}\n\t\t}()\n\t}\n\t// We need to process results until everything has shutdown; simple approach is to just close the channel when done\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(results)\n\t}()\n\tvar firstResult string\n\trequestsProcessed := 0\n\tfor x := range results {\n\t\tfmt.Println(\"got result\")\n\t\tif requestsProcessed == 0 {\n\t\t\tfirstResult = x\n\t\t}\n\t\trequestsProcessed++ // Possible that we will get more than one result (remember that requests are running in parallel)\n\t}\n\t// At this point all goroutines have shutdown\n\tif requestsProcessed == 0 {\n\t\tlog.Println(\"No results received\")\n\t} else {\n\t\tlog.Printf(\"xx%s response 200, closing all loops (requests processed: %d)\", firstResult, requestsProcessed)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73616632/access-custom-types-original-functions",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"time\"\n)\ntype Date struct {\n\ttime.Time\n}\nfunc (date *Date) UnmarshalGQL(value interface{}) error {\n\tdateAsString, ok := value.(string)\n\tif !ok {\n\t\treturn fmt.Errorf(\"date must be a string\")\n\t}\n\tparsedTime, err := time.Parse(time.RFC3339, dateAsString)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to convert given date value (%s) to Time struct\", dateAsString)\n\t}\n\t*date = Date{parsedTime}\n\treturn nil\n}\n// MarshalGQL implements the graphql.Marshaler interface\nfunc (date Date) MarshalGQL(w io.Writer) {\n\t// This line causes a compiler error\n\tw.Write([]byte(date.Format(time.RFC3339)))\n}\nfunc NewDate(v time.Time) *Date {\n\treturn &Date{v}\n}\nfunc main() {\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73502880/logs-show-that-lambda-ran-completely-but-function-exits-with-exit-status-1",
    "body": "@@ -5,14 +5,19 @@ import (\n        \"fmt\"\n        \"log\"\n\n+       \"github.com/aws/aws-lambda-go/lambda\"\n        \"github.com/aws/aws-sdk-go-v2/config\"\n        \"github.com/aws/aws-sdk-go-v2/service/ec2\"\n        \"github.com/aws/aws-sdk-go-v2/service/ec2/types\"\n )\n\n-func main() {\n+type MyEvent struct {\n+       Name string `json:\"name\"`\n+}\n+\n+func Handler(ctx context.Context, name MyEvent) (string, error) {\n        // Load the Shared AWS Configuration (~/.aws/config)\n-       cfg, err := config.LoadDefaultConfig(context.TODO())\n+       cfg, err := config.LoadDefaultConfig(ctx)\n        if err != nil {\n                log.Fatal(err)\n        }\n@@ -27,8 +32,7 @@ func main() {\n        result, err := ec2ServiceClient.DescribeAddresses(context.TODO(), IpListFilter)\n        if err != nil {\n                fmt.Println(\"Got an error retrieving information about your Amazon Elastic IPs:\")\n-               fmt.Println(err)\n-               return\n+               return \"\", err\n        }\n\n        // Out of all IPs, check if they have an allocation ID. If not, they are candidate for deletion\n@@ -57,6 +61,7 @@ func main() {\n\n                fmt.Println(\"\")\n        }\n+       return \"Done execution\", nil\n }\n\n // isThisEIPKillable scans to tags of Elastic IP and only return false when\n@@ -69,3 +74,7 @@ func isThisEIPKillable(tags []types.Tag) bool {\n        }\n        return true\n }\n+\n+func main() {\n+       lambda.Start(Handler)\n+}"
  },
  {
    "url": "https://stackoverflow.com/questions/73188412/temporal-go-client-client-checkhealth-example",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"go.temporal.io/sdk/client\"\n\t\"github.com/temporalio/samples-go/helloworld\"\n)\nfunc main() {\n\tlog.Println(\"Starting\")\n\t// The client is a heavyweight object that should be created once per process.\n\tc, err := client.Dial(client.Options{})\n\tif err != nil {\n\t\tlog.Fatalln(\"Unable to create client\", err)\n\t}\n\tlog.Println(\"Client created\", c)\n\t// Check client health\n    // The documentation says \"If the check fails, an error is returned.\" The health is good if err == nil.\n\tif _, err := c.CheckHealth(context.Background(), &client.CheckHealthRequest{}); err != nil {\n\t\t/* health is bad */\n\t\tlog.Println(\"Health is bad\")\n\t} else {\n\t\t/* health is good */\n\t\tlog.Println(\"Health is good\")\n\t}\n\tdefer c.Close()\n\tworkflowOptions := client.StartWorkflowOptions{\n\t\tID:        \"hello_world_workflowID\",\n\t\tTaskQueue: \"hello-world\",\n\t}\n\twe, err := c.ExecuteWorkflow(context.Background(), workflowOptions, helloworld.Workflow, \"Temporal\")\n\tif err != nil {\n\t\tlog.Fatalln(\"Unable to execute workflow\", err)\n\t}\n\tlog.Println(\"Started workflow\", \"WorkflowID\", we.GetID(), \"RunID\", we.GetRunID())\n\t// Synchronously wait for the workflow completion.\n\tvar result string\n\terr = we.Get(context.Background(), &result)\n\tif err != nil {\n\t\tlog.Fatalln(\"Unable get workflow result\", err)\n\t}\n\tlog.Println(\"Workflow result:\", result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/73188412/temporal-go-client-client-checkhealth-example",
    "body": "gitpod /workspace/samples-go (main) $ go run helloworld/starter/main_matt.go\n2022/08/01 03:30:29 Starting\n2022/08/01 03:30:29 INFO  No logger configured for temporal client. Created default one.\n2022/08/01 03:30:29 Client created &{0xc00012e950 0xc000231180 default 0xc0002323c0 0xc00012ac18 {} 18770@temporalio-samplesgo-3fes2zok5o7@ 0xc00017e460 [] [] 0xc00012e958 0xc000125c50 0xc000038748 {{0 0} 0 0 0 0}}\n2022/08/01 03:30:29 Health is good\n2022/08/01 03:30:29 Started workflow WorkflowID hello_world_workflowID RunID 03cfd328-77c1-4d7a-9d5e-86d82e44c034\n2022/08/01 03:30:29 Workflow result: Hello Temporal!"
  },
  {
    "url": "https://stackoverflow.com/questions/73167569/how-to-make-html-templates-recognize-a-string-as-html-in-go",
    "body": "func frontHandler(w http.ResponseWriter, r *http.Request) {\n\tentry := []string{\"<li><a href=\\\"/view/page1\\\">page1</a></li>\", \"<li><a href=\\\"/view/page2\\\">page2</a></li>\"}\n\ttmpl, err := template.ParseFiles(\"base.html\")\n\tif err != nil {\n\t\tlog.Fatal(\"Unable to parse\")\n\t}\n    // template.HTML takes only one string, hence we loop over the entry slice\n    //and store the slice values in htmlvalues of `HTML` type\n\tvar htmlvalues []template.HTML\n\tfor _, n := range entry {\n\t\thtmlEncapsulate := template.HTML(n)\n\t\thtmlvalues = append(htmlvalues, htmlEncapsulate)\n\t}\n\ttmpl.Execute(w, htmlvalues)"
  },
  {
    "url": "https://stackoverflow.com/questions/72931632/channel-is-not-recieving-data-or-giving-dead-block",
    "body": "func main() {\n    fmt.Println(\"Starting\")\n    events.Wg.Add(1)\n    go events.User.Trigger(\"new\", \"Hasan\")\n    events.Wg.Add(1)\n    go events.User.Trigger(\"name\", []any{\"Hasan\", \"Ali\"})\n    events.Wg.Add(1)\n    go events.User.Trigger(\"new\", \"Ali\")\n    exitChannel := make(chan bool)\n    go func() {\n        events.Wg.Wait()\n        close(exitChannel)\n    }()\n    canExit := false\n    for !canExit {\n        select {\n        case x := <-events.Publish:\n            {\n                fmt.Println(x)\n            }\n        case <- exitChannel:\n            {\n                canExit = true\n            }\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72813334/how-can-i-orginize-code-in-the-right-way-in-my-case-golang",
    "body": "type Headers map[string]string\nfunc http(method, URL string, body []byte, headers Headers) (*http.Response, error) { // we pass headers here so that the caller can pass custom headers for request\n    client := &http.Client{}\n    req, err := http.NewRequest(method, url, body)\n    if err != nil {\n        return nil, err\n    }\n    req.Header.Add(\"Accept\", \"application/json;version=35.0\") // common static header you can keep as it is\n    for key, value := range headers {\n       req.Header.Add(key, value)\n    }\n\n    return client.Do(req)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72463665/how-to-implement-a-for-loop-mechanism-with-a-timer-that-runs-immediately-in-the",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\tctx := cancelCtxOnSigterm(context.Background())\n\tstartWork(ctx)\n}\n// cancelCtxOnSigterm returns a Context that will be cancelled when the program receives a sigterm.\nfunc cancelCtxOnSigterm(ctx context.Context) context.Context {\n\texitCh := make(chan os.Signal, 1)\n\tsignal.Notify(exitCh, os.Interrupt, syscall.SIGTERM)\n\tctx, cancel := context.WithCancel(ctx)\n\tgo func() {\n\t\t<-exitCh\n\t\tcancel()\n\t}()\n\treturn ctx\n}\n// startWork performs a task every 60 seconds until the context is done.\nfunc startWork(ctx context.Context) {\n\tticker := time.NewTicker(60 * time.Second)\n\tdefer ticker.Stop()\n\tfor {\n\t\t// Do work here so we don't need duplicate calls. It will run immediately, and again every minute as the loop continues.\n\t\tif err := work(ctx); err != nil {\n\t\t\tfmt.Printf(\"failed to do work: %s\", err)\n\t\t}\n\t\tselect {\n\t\tcase <-ticker.C:\n\t\t\tcontinue\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\t}\n\t}\n}\nfunc work(ctx context.Context) error {\n\tfmt.Println(\"doing work\")\n\treturn nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72460454/propagate-opentelemetry-context-through-google-pubsub-using-go",
    "body": "package whatever\nimport (\n\t\"cloud.google.com/go/pubsub\"\n\t\"context\"\n\t\"go.opentelemetry.io/otel\"\n)\nconst pubsubAttribPrefix = \"whatever\"\n// PubsubMessageCarrier injects and extracts traces from a pubsub.Message.\ntype PubsubMessageCarrier struct {\n\tmsg *pubsub.Message\n}\n// NewPubsubMessageCarrier creates a new PubsubMessageCarrier.\nfunc NewPubsubMessageCarrier(msg *pubsub.Message) PubsubMessageCarrier {\n\treturn PubsubMessageCarrier{msg: msg}\n}\n// Get retrieves a single value for a given key.\nfunc (c PubsubMessageCarrier) Get(key string) string {\n\treturn c.msg.Attributes[pubsubAttribPrefix+\"_\"+key]\n}\n// Set sets an attribute.\nfunc (c PubsubMessageCarrier) Set(key, val string) {\n\tc.msg.Attributes[pubsubAttribPrefix+\"_\"+key] = val\n}\n// Keys returns a slice of all keys in the carrier.\nfunc (c PubsubMessageCarrier) Keys() []string {\n\ti := 0\n\tout := make([]string, len(c.msg.Attributes))\n\tfor k := range c.msg.Attributes {\n\t\tout[i] = k\n\t\ti++\n\t}\n\treturn out\n}\nfunc PubSubMessageInjectContext(ctx context.Context, msg *pubsub.Message) {\n\totel.GetTextMapPropagator().Inject(ctx, NewPubsubMessageCarrier(msg))\n}\nfunc PubSubMessageExtractContext(ctx context.Context, msg *pubsub.Message) context.Context {\n\treturn otel.GetTextMapPropagator().Extract(ctx, NewPubsubMessageCarrier(msg))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72306610/stopwatch-go-lang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"time\"\n)\nfunc main() {\n\tattackStart()\n\ttime.Sleep(time.Second*3)\n\tattackEnd()\n}\nfunc attackStart()  {\n    //... my cmd PHP code\n\tfileName := \"/tmp/attackStartTime.tmp\"\n\ttimeAttackStarted := []byte(time.Now().Local().Format(time.RFC3339))\n\tif err := ioutil.WriteFile(fileName, timeAttackStarted, 0666); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\nfunc attackEnd() {\n\n    //... my cmd PHP code\n\tfileName := \"/tmp/attackStartTime.tmp\"\n\tfilecontent, err := ioutil.ReadFile(fileName)\n\ttimeAttackEnded := time.Now().Local()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttimeAttackStarted, err := time.Parse(time.RFC3339, string(filecontent))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tduration := timeAttackEnded.Sub(timeAttackStarted)\n\tfmt.Printf(\"attack started at %v:\\nattack ended: %v\\nduration(seconds): %v\\n\",timeAttackStarted, timeAttackEnded, duration.Seconds())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/72110852/loop-through-slices-and-amend-into-a-2d-array",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"golang.org/x/exp/slices\"\n)\nfunc main() {\n\tvar codeSlices = []string{\n\t\t\"# INPUTS\",\n\t\t\"\",\n\t\t\"input CreateUserInput {\",\n\t\t\"  username: String!\",\n\t\t\"  email: String!\",\n\t\t\"  password: String!\",\n\t\t\"}\",\n\t\t\"\",\n\t\t\"input AuthUserInput {\",\n\t\t\"  user: String!\",\n\t\t\"  password: String!\",\n\t\t\"  code: String\",\n\t\t\"}\",\n\t\t\"\",\n\t\t\"input RefreshTokensInput{\",\n\t\t\"  refreshToken: String!\",\n\t\t\"}\",\n\t\t\"\",\n\t\t\"input VerifyEmailInput {\",\n\t\t\"  token: String!\",\n\t\t\"}\",\n\t\t\"\",\n\t\t\"# OBJECTS\",\n\t\t\"\",\n\t}\n\t//Check for boundaries\n\tinputStart := slices.Index(codeSlices, \"# INPUTS\") //Use built-in functions for the search\n\tif inputStart == -1 {\n\t\tlog.Fatal(\"# INPUTS not found\")\n\t}\n\tobjectStart := slices.Index(codeSlices, \"# OBJECTS\")\n\tif objectStart == -1 {\n\t\tlog.Fatal(\"# OBJECTS not found\")\n\t}\n\tinputStart = 0\n\tvar inputs [][]string\n\tfor i := inputStart + 2; i < objectStart-1; i++ {\n\t\tif idx := strings.Index(codeSlices[i], \"{\"); idx > 0 {\n\t\t\tinputStart = i\n\t\t\tcontinue\n\t\t}\n\t\tif idx := slices.Index(codeSlices[inputStart:], \"}\"); inputStart > 0 {\n\t\t\tinputs = append(inputs, codeSlices[inputStart:i+idx])\n\t\t\tinputStart = 0\n\t\t}\n\t}\n\tif inputStart > 0 {\n\t\tlog.Fatal(\"Mismatch inputs\")\n\t}\n\tfmt.Printf(\"%#v\\n\", inputs)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71591621/golang-json-marshal-and-encoding-give-weird-output",
    "body": "func checkExistUser(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\tfmt.Println(\"File Name :\", r.FormValue(\"email\"))\n\tresult, err := db.Query(\"SELECT * from userDetailsss\")\n\tif err != nil {\n\t\tw.Header().Set(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\tw.Header().Set(\"X-Content-Type-Options\", \"nosniff\")\n\t\tw.WriteHeader(400)\n\n\t\t// use only Encode, no need to call json.Marshal\n\t\tif err := json.NewEncoder(w).Encode(Errormessage{\"Error in select\"}); err != nil {\n\t\t\tlog.Println(\"failed to send reposnse:\", err)\n\t\t}\n\t\treturn\n\t}\n\n\t// ...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71583148/how-can-i-get-all-index-name-from-elasticsearch-by-using-golang-client-library",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/elastic/go-elasticsearch/v7\"\n\t\"github.com/elastic/go-elasticsearch/v7/esapi\"\n)\nfunc main() {\n\tcfg := elasticsearch.Config{\n\t\tAddresses: []string{\n\t\t\t\"http://localhost:9243\",\n\t\t},\n\t\tUsername: \"foo\",\n\t\tPassword: \"bar\",\n\t}\n\tes, err := elasticsearch.NewClient(cfg)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tres, err := esapi.CatIndicesRequest{Format: \"json\"}.Do(context.Background(), es)\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer res.Body.Close()\n\tfmt.Println(res.String())\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71583148/how-can-i-get-all-index-name-from-elasticsearch-by-using-golang-client-library",
    "body": "[200 OK] green open .ent-search-actastic-workplace_search_accounts_v16                                                                           yvaDvj9RTMOoWqIpKdC_kw 1 1       1      0  12.1kb     6kb\ngreen open .ent-search-workplace-search-content-events-ecs-ilm-logs-production-2022.01.23-000003                                        1D1BagTFQ6ypoZh2RdoUhQ 1 1       0      0    416b    208b\ngreen open .ent-search-actastic-workplace_search_search_groups_v4-name-unique-constraint                                                b_FRbLWJQfqXXxyTdcU2cQ 1 1       1      0     7kb   3.5kb\ngreen open .ent-search-actastic-crawler_crawl_requests_v4                                                                               kaUWb7YlTEeFH-Gcpz50qA 1 1       0      0    416b    208b\ngreen open .ent-search-api-ecs-ilm-logs-production-2022.03.09-000016                                                                    EKZZOtqOR_e8pOztXsLU1g 1 1       0      0    416b    208b"
  },
  {
    "url": "https://stackoverflow.com/questions/71523806/why-is-my-script-reading-in-files-linked-in-my-html-which-arent-being-specified",
    "body": "type BlogPost struct {\n\tTitle       string `json:\"title\"`\n\tTimestamp   string `json:\"timestamp\"`\n\tMain        string `json:\"main\"`\n\tContentInfo string `json:\"content_info\"`\n}\nvar blogTemplate = template.Must(template.ParseFiles(\"./blogtemplate.html\"))\nfunc blogHandler(w http.ResponseWriter, r *http.Request) {\n\tblogstr := r.URL.Path[len(\"/blog/\"):] + \".json\"\n\tf, err := os.Open(blogstr)\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusNotFound)\n\t\treturn\n\t}\n\tdefer f.Close()\n\tvar post BlogPost\n\tif err := json.NewDecoder(f).Decode(&post); err != nil {\n\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\treturn\n\t}\n\tif err := blogTemplate.Execute(w, post); err != nil {\n\t\tlog.Println(err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71392611/golang-deadlock-error-with-waitgroups-but-no-channels",
    "body": "`\nfunc (M Matrix) Multiply(N Matrix) Matrix {\n    var ans  = BuildZeroMatrix(len(M), len(N[0]))\n    var wg sync.WaitGroup\n    wg.Add(len(M)*len(N[0])*len(N)) // This is unnecessary. You are already adding the goroutine inside the k loop.\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(N[0]); j++ {\n            for k := 0; k < len(N); k++ {\n                wg.Add(1)\n                go func(j int, i int, k int) {\n                    ans[i][j] += M[i][k] * N[k][j] // This is data race area. Multiple goroutines will try to write to the same address. You will need a lock here.\n                    defer wg.Done()\n                }(j, i, k)\n            }\n        }\n    }\n    go func(){\n        wg.Wait() // Wait()ing for goroutines to be completed should not be done inside a goroutine. Because here you don't wait for this goroutine to be done.\n    }()\n    return ans\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71392611/golang-deadlock-error-with-waitgroups-but-no-channels",
    "body": "`\npackage main\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\ntype Matrix [][]float64\nfunc (M Matrix) Multiply(N Matrix) Matrix {\n\tvar ans = BuildZeroMatrix(len(M), len(N[0]))\n\tvar wg sync.WaitGroup\n\tvar mx sync.Mutex\n\tfor i := 0; i < len(M); i++ {\n\t\tfor j := 0; j < len(N[0]); j++ {\n\t\t\tfor k := 0; k < len(N); k++ {\n\t\t\t\twg.Add(1)\n\t\t\t\tgo func(j int, i int, k int) {\n\t\t\t\t\tdefer wg.Done()\n\t\t\t\t\tmx.Lock()\n\t\t\t\t\tans[i][j] += M[i][k] * N[k][j]\n\t\t\t\t\tmx.Unlock()\n\t\t\t\t}(j, i, k)\n\t\t\t}\n\t\t}\n\t}\n\twg.Wait()\n\treturn ans\n}\nfunc BuildZeroMatrix(Row int, Col int) Matrix {\n\tvar temp [][]float64\n\tfor i := 0; i < Row; i++ {\n\t\tvar tmp []float64\n\t\tfor j := 0; j < Col; j++ {\n\t\t\ttmp = append(tmp, 0)\n\t\t}\n\t\ttemp = append(temp, tmp)\n\t}\n\treturn temp\n}\nfunc main() {\n\tvar m, n Matrix\n\t// T1:\n\tm = Matrix{[]float64{1, 1, 1}, []float64{1, 1, 1}, []float64{1, 1, 1}}\n\tn = Matrix{[]float64{1, 1, 1}, []float64{1, 1, 1}, []float64{1, 1, 1}}\n\tfmt.Printf(\"%v\", m.Multiply(n))\n\t// T2:\n\tm = Matrix{[]float64{1, 1, 1}, []float64{1, 1, 1}, []float64{1, 1, 1}}\n\tn = Matrix{[]float64{1, 1}, []float64{1, 1}, []float64{1, 1}}\n\tfmt.Printf(\"\\n%v\", m.Multiply(n))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71279659/get-api-response-using-go-langs-gin",
    "body": "router.GET(\"/foo\", func(c *gin.Context) {\n    response, err := http.Get(\"https://jsonplaceholder.typicode.com/posts/1\")\n    if err != nil {\n        c.Status(http.StatusServiceUnavailable)\n        return\n    }\n\n    // if there was no error, you should close the body\n    defer response.Body.Close()\n\n    // hence this condition is moved into its own block\n    if response.StatusCode != http.StatusOK {\n        c.Status(http.StatusServiceUnavailable)\n        return\n    }\n\n    // use a proper struct type in your real code\n    // the empty interface is just for demonstration\n\tvar v interface{}\n\tjson.NewDecoder(response.Body).Decode(&v)\n    fmt.Println(\"Test\", v)\n    c.JSON(200, v)\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/71189898/converting-parsing-c-byte-struct-to-go",
    "body": "c++\n#include <cstdint>\n#include <type_traits>\nstd::size_t offsets[] = {\n    std::alignment_of_v<std::uint8_t>,\n    std::alignment_of_v<std::uint16_t>,\n    std::alignment_of_v<std::uint32_t>,\n    std::alignment_of_v<std::uint64_t>,\n    std::alignment_of_v<__uint128_t>,\n    std::alignment_of_v<std::int8_t>,\n    std::alignment_of_v<std::int16_t>,\n    std::alignment_of_v<std::int32_t>,\n    std::alignment_of_v<std::int64_t>,\n    std::alignment_of_v<__int128_t>,\n    std::alignment_of_v<float>,\n    std::alignment_of_v<double>,\n    std::alignment_of_v<long double>,\n    std::alignment_of_v<void*>,\n};"
  },
  {
    "url": "https://stackoverflow.com/questions/71189898/converting-parsing-c-byte-struct-to-go",
    "body": "c++\n#include <array>\n#include <cstddef>\n#include <cstdint>\nusing int8 = std::int8_t;\nusing uint8 = std::uint8_t;\nusing uint16 = std::uint16_t;\nstruct CarTelemetryData {\n    uint16 m_speed;\n    uint8 m_throttle;\n    int8 m_steer;\n    uint8 m_brake;\n    uint8 m_clutch;\n    int8 m_gear;\n    uint16 m_engineRPM;\n    uint8 m_drs;\n    uint8 m_revLightsPercent;\n    uint16 m_brakesTemperature[4];\n    uint16 m_tyresSurfaceTemperature[4];\n    uint16 m_tyresInnerTemperature[4];\n    uint16 m_engineTemperature;\n    float m_tyresPressure[4];\n};\n// C++ has no reflection (yet) so we need to list every member\nconstexpr auto offsets = std::array{\n    offsetof(CarTelemetryData, m_speed),\n    offsetof(CarTelemetryData, m_throttle),\n    offsetof(CarTelemetryData, m_steer),\n    offsetof(CarTelemetryData, m_brake),\n    offsetof(CarTelemetryData, m_clutch),\n    offsetof(CarTelemetryData, m_gear),\n    offsetof(CarTelemetryData, m_engineRPM),\n    offsetof(CarTelemetryData, m_drs),\n    offsetof(CarTelemetryData, m_revLightsPercent),\n    offsetof(CarTelemetryData, m_brakesTemperature),\n    offsetof(CarTelemetryData, m_tyresSurfaceTemperature),\n    offsetof(CarTelemetryData, m_tyresInnerTemperature),\n    offsetof(CarTelemetryData, m_engineTemperature),\n    offsetof(CarTelemetryData, m_tyresPressure),\n};\nconstexpr auto sizes = std::array{\n    sizeof(CarTelemetryData::m_speed),\n    sizeof(CarTelemetryData::m_throttle),\n    sizeof(CarTelemetryData::m_steer),\n    sizeof(CarTelemetryData::m_brake),\n    sizeof(CarTelemetryData::m_clutch),\n    sizeof(CarTelemetryData::m_gear),\n    sizeof(CarTelemetryData::m_engineRPM),\n    sizeof(CarTelemetryData::m_drs),\n    sizeof(CarTelemetryData::m_revLightsPercent),\n    sizeof(CarTelemetryData::m_brakesTemperature),\n    sizeof(CarTelemetryData::m_tyresSurfaceTemperature),\n    sizeof(CarTelemetryData::m_tyresInnerTemperature),\n    sizeof(CarTelemetryData::m_engineTemperature),\n    sizeof(CarTelemetryData::m_tyresPressure),\n};\nconstexpr auto computePadding() {\n    std::array<std::size_t, offsets.size()> result;\n    std::size_t expectedOffset = 0;\n    for (std::size_t i = 0; i < offsets.size(); i++) {\n        result.at(i) = offsets.at(i) - expectedOffset;\n        expectedOffset = offsets.at(i) + sizes.at(i);\n    }\n    return result;\n}\nauto padding = computePadding();"
  },
  {
    "url": "https://stackoverflow.com/questions/71189898/converting-parsing-c-byte-struct-to-go",
    "body": "c++\n#include <cstddef>\n#include <cstdint>\n#include <iomanip>\n#include <iostream>\n#include <span>\nusing int8 = std::int8_t;\nusing uint8 = std::uint8_t;\nusing uint16 = std::uint16_t;\nstruct CarTelemetryData {\n    uint16 m_speed;\n    uint8 m_throttle;\n    int8 m_steer;\n    uint8 m_brake;\n    uint8 m_clutch;\n    int8 m_gear;\n    uint16 m_engineRPM;\n    uint8 m_drs;\n    uint8 m_revLightsPercent;\n    uint16 m_brakesTemperature[4];\n    uint16 m_tyresSurfaceTemperature[4];\n    uint16 m_tyresInnerTemperature[4];\n    uint16 m_engineTemperature;\n    float m_tyresPressure[4];\n};\nint main() {\n    CarTelemetryData data = {\n        .m_speed = 1,\n        .m_throttle = 2,\n        .m_steer = 3,\n        .m_brake = 4,\n        .m_clutch = 5,\n        .m_gear = 6,\n        .m_engineRPM = 7,\n        .m_drs = 8,\n        .m_revLightsPercent = 9,\n        .m_brakesTemperature = {10, 11, 12, 13},\n        .m_tyresSurfaceTemperature = {14, 15, 16, 17},\n        .m_tyresInnerTemperature = {18, 19, 20, 21},\n        .m_engineTemperature = 22,\n        .m_tyresPressure = {23, 24, 25, 26},\n    };\n    std::cout << \"b := []byte{\" << std::hex << std::setfill('0');\n    for (auto byte : std::as_bytes(std::span(&data, 1))) {\n        std::cout << \"0x\" << std::setw(2) << static_cast<unsigned>(byte)\n                  << \", \";\n    }\n    std::cout << \"}\";\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71189898/converting-parsing-c-byte-struct-to-go",
    "body": "// Type your code here, or load an example.\n// Your function name should start with a capital letter.\npackage main\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"fmt\"\n)\ntype CarTelemetryData struct {\n\tSpeed                   uint16\n\tThrottle                uint8\n\tSteer                   int8\n\tBrake                   uint8\n\tClutch                  uint8\n\tGear                    int8\n\t_                       uint8\n\tEngineRPM               uint16\n\tDRS                     uint8\n\tRevLightsPercent        uint8\n\tBrakesTemperature       [4]uint16\n\tTyresSurfaceTemperature [4]uint16\n\tTyresInnerTemperature   [4]uint16\n\tEngineTemperature       uint16\n\t_                       uint16\n\tTyresPressure           [4]float32\n}\nfunc main() {\n\tb := []byte{0x01, 0x00, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x07, 0x00, 0x08, 0x09, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x41, 0x00, 0x00, 0xc0, 0x41, 0x00, 0x00, 0xc8, 0x41, 0x00, 0x00, 0xd0, 0x41}\n\tvar dataStruct CarTelemetryData\n\tdataReader := bytes.NewReader(b[:])\n\tbinary.Read(dataReader, binary.LittleEndian, &dataStruct)\n\tfmt.Printf(\"%+v\", dataStruct)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/71079285/golang-how-to-check-for-exported-fields-in-an-interface",
    "body": "func ListFields(a interface{}) {\n\trt := reflect.TypeOf(a) // take type of a\n\tif rt.Kind() == reflect.Ptr {\n\t\trt = rt.Elem() // use Elem to get the pointed-to-type\n\t}\n\tif rt.Kind() == reflect.Slice {\n\t\trt = rt.Elem() // use Elem to get type of slice's element\n\t}\n\tif rt.Kind() == reflect.Ptr { // handle input of type like []*StructType\n\t\trt = rt.Elem() // use Elem to get the pointed-to-type\n\t}\n\tif rt.Kind() != reflect.Struct {\n\t\treturn\n\t}\n\tfmt.Printf(\" Kind: %+v \\n\", rt)\n\tfor _, f := range reflect.VisibleFields(rt) {\n\t\tif f.IsExported() {\n\t\t\tfmt.Printf(\" Kind: %+v \\n\", f)\n\t\t} else {\n\t\t\tfmt.Printf(\" Kind: %s \\n\", f.Name)\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70936770/how-to-design-classes-for-x-number-of-config-files-which-needs-to-be-read-indivi",
    "body": "type cfgInfo struct {\n   fileName string\n   getCfg func(*Config) interface{}\n}\nvar configs=[]cfgInfo {\n   {\n     fileName: \"file1\",\n     getCfg: func(c *Config) interface{} {return &c.C1},\n   },\n   {\n     fileName: \"file2\",\n     getCfg: func(c *Config) interface{} {return &c.C2},\n   },\n   {\n     fileName: \"file3\",\n     getCfg: func(c *Config) interface{} {return &c.C3},\n   },\n   ...\n}\nfunc loadConfigs(cfg *Config) error {\n   for _,f:=range configs {\n     if err:=loadConfig(f.fileName,f.getCfg(cfg)); err!=nil {\n         return err\n     }\n   }\n  return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70821998/issue-with-go-sqlmock-testing-in-the-expected-query-part",
    "body": "    package unit\n\n    import (\n    \t\"encoding/json\"\n    \t\"fmt\"\n    \t\"math/rand\"\n    \t\"net/http\"\n    \t\"net/http/httptest\"\n    \t\"regexp\"\n    \t\"testing\"\n\n    \t\"github.com/DATA-DOG/go-sqlmock\"\n    \t\"github.com/SamiAlsubhi/go/controllers\"\n    \t\"github.com/SamiAlsubhi/go/routes\"\n    \t\"github.com/gin-gonic/gin\"\n    \t\"github.com/stretchr/testify/assert\"\n    \t\"github.com/stretchr/testify/require\"\n    \t\"github.com/stretchr/testify/suite\"\n    \t\"gorm.io/driver/postgres\"\n    \t\"gorm.io/gorm\"\n    )\n\n    type Suite struct {\n    \tsuite.Suite\n    \tDB     *gorm.DB\n    \tmock   sqlmock.Sqlmock\n    \trouter *gin.Engine\n    }\n\n    func (s *Suite) SetupSuite() {\n    \t//t.Logf(\"setup start\")\n    \tconn, mock, err := sqlmock.New(sqlmock.QueryMatcherOption(sqlmock.QueryMatcherRegexp))\n    \tif err != nil || conn == nil {\n    \t\tpanic(fmt.Sprintf(\"Failed to open mock sql db, got error: %v\", err))\n    \t}\n    \ts.mock = mock\n\n    \tdialector := postgres.New(postgres.Config{\n    \t\tDSN:                  \"sqlmock_db_0\",\n    \t\tDriverName:           \"postgres\",\n    \t\tConn:                 conn,\n    \t\tPreferSimpleProtocol: true,\n    \t})\n\n    \tif db, err := gorm.Open(dialector, &gorm.Config{SkipDefaultTransaction: true}); err != nil || db == nil {\n    \t\tpanic(fmt.Sprintf(\"Failed to open gorm v2 db, got error: %v\", err))\n    \t} else {\n    \t\ts.DB = db\n    \t}\n\n    \tapi := &controllers.API{Db: s.DB, IsTesting: true}\n    \ts.router = routes.SetupRouter(api)\n\n    }\n\n    func TestSetup(t *testing.T) {\n\n    \tsuite.Run(t, new(Suite))\n\n    }\n\n    // func (s *Suite) AfterTest(_, _ string) {\n    // \trequire.NoError(s.T(), s.mock.ExpectationsWereMet())\n    // }\n\n    func (s *Suite) Test_GetOTP_Non_Existing_Phone() {\n    \t/*\n    \t\tThis to test getting OTP for a phone number that does not exist in the otps table\n    \t*/\n    \tphone := fmt.Sprintf(\"%v\", 90000000+rand.Intn(99999999-90000000))\n    \ts.mock.MatchExpectationsInOrder(false)\n\n    \ts.mock.ExpectQuery(regexp.QuoteMeta(`SELECT count(*) FROM \"otps\" WHERE phone = $1 AND \"otps\".\"deleted_at\" IS NULL`)).\n    \t\tWithArgs(phone).\n    \t\tWillReturnRows(sqlmock.NewRows([]string{\"count\"}).\n    \t\t\tAddRow(0))\n\n    \ts.mock.ExpectQuery(regexp.QuoteMeta(\n    \t\t`INSERT INTO \"otps\" (\"created_at\",\"updated_at\",\"deleted_at\",\"phone\",\"code\") VALUES ($1,$2,$3,$4,$5) RETURNING \"id\"`)).\n    \t\tWithArgs(sqlmock.AnyArg(), sqlmock.AnyArg(), sqlmock.AnyArg(), phone, sqlmock.AnyArg()).\n    \t\tWillReturnRows(sqlmock.NewRows([]string{\"id\"}).\n    \t\t\tAddRow(1))\n\n    \tw := httptest.NewRecorder()\n    \treq, err := http.NewRequest(\"GET\", \"/api/auth/get-otp/\"+phone, nil)\n    \trequire.NoError(s.T(), err)\n\n    \ts.router.ServeHTTP(w, req)\n    \tassert.Equal(s.T(), 200, w.Code)\n    \t//parse response\n    \tvar response gin.H\n    \terr = json.Unmarshal(w.Body.Bytes(), &response)\n    \trequire.NoError(s.T(), err)\n    \t_, ok := response[\"expiry_in\"]\n    \tassert.True(s.T(), ok)\n\n    \trequire.NoError(s.T(), s.mock.ExpectationsWereMet())\n\n    }"
  },
  {
    "url": "https://stackoverflow.com/questions/70778524/go-how-to-create-and-initialize-a-struct-instance-based-on-conditions-when-the",
    "body": "package main\nimport \"fmt\"\ntype commonPerson struct {\n\tA string\n\tB string\n\tC string\n}\ntype PersonA struct {\n\tcommonPerson\n}\nfunc (p PersonA) String() string {\n\treturn fmt.Sprintf(\"A: %s, %s, %s\", p.A, p.B, p.C)\n}\n// This function is just here so that PersonA implements personInterface\nfunc (p PersonA) personMarker() {}\ntype PersonB struct {\n\tcommonPerson\n}\nfunc (p PersonB) String() string {\n\treturn fmt.Sprintf(\"B: %s, %s, %s\", p.A, p.B, p.C)\n}\n// This function is just here so that PersonB implements personInterface\nfunc (p PersonB) personMarker() {}\ntype personInterface interface {\n\tpersonMarker()\n}\nvar smartPerson personInterface\nfunc smartAction(personType string) {\n\tcommon := commonPerson{\n\t\tA: \"foo\",\n\t\tB: \"bar\",\n\t\tC: \"Hello World\",\n\t}\n\tswitch personType {\n\tcase \"A\":\n\t\tsmartPerson = PersonA{commonPerson: common}\n\tcase \"B\":\n\t\tsmartPerson = PersonB{commonPerson: common}\n\t}\n}\nfunc main() {\n\tsmartAction(\"A\")\n\tfmt.Println(smartPerson)\n\tsmartAction(\"B\")\n\tfmt.Println(smartPerson)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70706418/go-channel-doesnt-output-the-data-it-passed",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tc := make(chan int)\n\tfmt.Println(\"initialized channel\")\n\t// This is a receiver receiving from c (spawned goroutine)\n\tgo receiver(c)\n\t// This is a sender (spawned goroutine)\n\tgo helper(c)\n\t// This is again a receiver receiving from c\n\t// NOTE: As reciever and helper are spawned in\n\t// separate goroutine, control eventually reaches\n\t// here.\n\t// Behaviour is unpredictable as sometimes the data\n\t// sent to the channel might be recieved here and\n\t// sometimes it might be recieved by the receiver function.\n\tfor x := range c {\n\t\tfmt.Println(x)\n\t}\n}\nfunc helper(c chan int) {\n\ttime.Sleep(time.Second * 3)\n\tc <- 5\n\ttime.Sleep(time.Second * 3)\n\tc <- 4\n\t// When this close is triggered, the receiver in main\n\t// could get exited as the signal to stop ranging is sent\n\t// using signal. Right after that the main function ends\n\t// such that data recieved by the receiver couldn't get\n\t// printed (sometimes it would work as well) i.e., main\n\t// exited right before fmt.Println(x) in receiver function.\n\tclose(c)\n}\nfunc receiver(c chan int) {\n\tfor x := range c {\n\t\tfmt.Println(x)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70706418/go-channel-doesnt-output-the-data-it-passed",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\t// Initialize the channel\n\tc := make(chan int)\n\t// Spawn a goroutine that sends data to the\n\t// channel. Also, it is expected from the sender\n\t// only to close the channel as it only knows\n\t// when then send stops. Send to a closed\n\t// channel would panic.\n\tgo send(c)\n\t// As send is running asynchronously, control\n\t// reaches here i.e., the receiver. It ranges until\n\t// c is closed and is guaranteed to receive every\n\t// date sent to channel c and then exit.\n\tfor x := range c {\n\t\tfmt.Println(x)\n\t}\n}\n// send data to c\nfunc send(c chan int) {\n\tc <- 5\n\tc <- 4\n\tclose(c)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70539550/how-to-instantiate-struct-that-is-defined-in-different-package-from-struct-name",
    "body": "package pkg\nimport (\n\t\"fmt\"\n\t\"io\"\n)\ntype NewShowable func(r io.Reader) Showable\ntype Showable interface {\n\tShow()\n}\ntype Foo struct {\n\tFieldA string\n\tFieldB string\n}\nfunc newFoo(r io.Reader) Showable {\n\t// Read config from r and construct Foo\n\treturn Foo{}\n}\nfunc (Foo) Show() {\n\tfmt.Println(\"Foo\")\n}\ntype Bar struct {\n\tFieldA string\n\tFieldB string\n}\nfunc newBar(r io.Reader) Showable {\n\t// Read config from r and construct Bar\n\treturn Bar{}\n}\nfunc (Bar) Show() {\n\tfmt.Println(\"Bar\")\n}\nvar Registry = map[string]NewShowable{\n\t\"Foo\": newFoo,\n\t\"Bar\": newBar,\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/70460145/using-channels-to-find-the-fastest-responder-from-a-list-of-dns-servers",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\ntype benchmark struct {\n\tserver   string\n\tduration time.Duration\n}\nfunc main() {\n\tch := make(chan benchmark, 1)\n\tresolvers := []string{\n\t\t\"1.1.1.1\",\n\t\t\"1.0.0.1\",\n\t\t\"8.8.4.4\",\n\t\t\"9.9.9.9\",\n\t\t\"8.8.8.8\",\n\t\t\"4.2.2.2\",\n\t}\n\tfor _, server := range resolvers {\n\t\tgo func(server string, ch chan<- benchmark) {\n\t\t\t// dns client\n\t\t\tr := &net.Resolver{\n\t\t\t\tPreferGo: true,\n\t\t\t\tDial: func(ctx context.Context, network, address string) (net.Conn, error) {\n\t\t\t\t\td := net.Dialer{\n\t\t\t\t\t\tTimeout: time.Millisecond * time.Duration(10000),\n\t\t\t\t\t}\n\t\t\t\t\treturn d.DialContext(ctx, network, server+\":53\")\n\t\t\t\t},\n\t\t\t}\n\t\t\tt1 := time.Now()\n\t\t\tdefer func() {\n\t\t\t\tch <- benchmark{server: server, duration: time.Since(t1)}\n\t\t\t}()\n\t\t\t_, _ = r.LookupHost(context.Background(), \"www.google.com\")\n\t\t}(server, ch)\n\t}\n\tfor _, _ = range resolvers {\n\t\tb := <-ch\n\t\tfmt.Printf(\"server %s took %s\\n\", b.server, b.duration)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69970135/gorm-one-to-one-mapping-issue",
    "body": "// https://stackoverflow.com/questions/69977516/unsupported-relations-for-schema-with-has-many-relation-in-gorm/70082006#70082006\npackage main\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"time\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n)\ntype ParcelOrder struct {\n\tgorm.Model\n\tID                 int                `json:\"id\"`\n\tSenderId           uint               `json:\"sender_id\"`\n\tOrderID            string             `json:\"order_id\"`\n\tPickupAddress      string             `json:\"pickup_address\"`\n\tDeliveryAddress    string             `json:\"delivery_address\"`\n\tCreatedAt          time.Time          `json:\"created_at\"`\n\tUpdatedAt          time.Time          `json:\"updated_at\"`\n\tDeletedAt          sql.NullTime       `json:\"deleted_at\"`\n\tParcelOrderDetails *ParcelOrderDetails `gorm:\"foreignKey:ParcelOrderID\"`\n}\ntype ParcelOrderDetails struct {\n\tgorm.Model\n\tID            int           `json:\"id\"`\n\tBikerID       sql.NullInt32 `json:\"biker_id\"`\n\tParcelOrderID int           `json:\"parcel_order_id\"`\n\tPickupTime    sql.NullTime  `json:\"pickup_time\"`\n\tDeliveryTime  sql.NullTime  `json:\"delivery_time\"`\n\tStatus        int           `json:\"status\"`\n\tCreatedAt     time.Time     `json:\"created_at\"`\n\tUpdatedAt     time.Time     `json:\"updated_at\"`\n\tDeletedAt     sql.NullTime  `json:\"deleted_at\"`\n}\nvar DB *gorm.DB\nfunc main() {\n\tdatabaseConfig := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s?multiStatements=true&parseTime=true\", \"root\", \"\", \"127.0.0.1\", \"3306\", \"tester\")\n\tDB, _ = gorm.Open(mysql.Open(databaseConfig), &gorm.Config{\n\t\tLogger: logger.Default.LogMode(logger.Info),\n\t})\n\tsqlDB, _ := DB.DB()\n\tdefer sqlDB.Close()\n\tDB.AutoMigrate(&ParcelOrder{}, &ParcelOrderDetails{})\n\torder := ParcelOrder{\n\t\tDeliveryAddress: \"dummy address\",\n\t\tPickupAddress:   \"dummy pickup address\",\n\t\tOrderID:         \"unique-order-id-1\",\n\t\tSenderId:        1,\n\t\tParcelOrderDetails: &ParcelOrderDetails{\n\t\t\tStatus: 0,\n\t\t},\n\t}\n\tDB.Create(&order)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69970135/gorm-one-to-one-mapping-issue",
    "body": "2021/11/23 20:57:53 D:/go/src/udemy-solving/00003/main.go:62\n[0.780ms] [rows:1] INSERT INTO `parcel_order_details` (`created_at`,`updated_at`,`deleted_at`,`biker_id`,`parcel_order_id`,`pickup_time`,`delivery_time`,`status`) VALUES ('2021-11-23 20:57:53.393','2021-11-23 20:57:53.393',NULL,NULL,4,NULL,NULL,0) ON DUPLICATE KEY UPDATE `parcel_order_id`=VALUES(`parcel_order_id`)\n2021/11/23 20:57:53 D:/go/src/udemy-solving/00003/main.go:62\n[14.900ms] [rows:1] INSERT INTO `parcel_orders` (`created_at`,`updated_at`,`deleted_at`,`sender_id`,`order_id`,`pickup_address`,`delivery_address`) VALUES ('2021-11-23 20:57:53.392','2021-11-23 20:57:53.392',NULL,1,'unique-order-id-1','dummy pickup address','dummy address')"
  },
  {
    "url": "https://stackoverflow.com/questions/69850612/converting-command-line-argument-to-use-as-struct-field",
    "body": "package main\nimport (\n    \"fmt\"\n    \"log\"\n    \"strconv\"\n    \"os\"\n)\ntype Options struct {\n    Field1 string\n    Field2 int64\n}\nfunc main() {\n    if len(os.Args) < 2 {\n        log.Fatal(\"missing two required positional arguments: Field1 and Field2\")\n    }\n    opts := &Options{}\n    opts.Field1 = os.Args[1]\n    var err error\n    opts.Field2, err = strconv.ParseInt(os.Args[2], 10, 64)\n    if err != nil {\n        log.Fatalf(\"failed to parse integer value: %v\", os.Args[2])\n    }\n    fmt.Println(opts)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69850612/converting-command-line-argument-to-use-as-struct-field",
    "body": "import (\n\t\"fmt\"\n\t\"os\"\n\t\"reflect\"\n)\ntype Options struct {\n\tField1 string\n\tField2 int\n}\nfunc main() {\n\topts := &Options{Field1: \"some-value\", Field2: 1}\n\tfor _, arg := range os.Args[1:] {\n\t\tfmt.Println(getAttr(opts, arg))\n\t}\n}\n// copied from https://stackoverflow.com/a/66470232/2410641\nfunc getAttr(obj interface{}, fieldName string) (reflect.Value, error) {\n\tpointToStruct := reflect.ValueOf(obj) // addressable\n\tcurStruct := pointToStruct.Elem()\n\tif curStruct.Kind() != reflect.Struct {\n\t\treturn reflect.Value{}, fmt.Errorf(\"obj is not a struct\")\n\t}\n\tcurField := curStruct.FieldByName(fieldName) // type: reflect.Value\n\tif !curField.IsValid() {\n\t\treturn reflect.Value{}, fmt.Errorf(\"field not found: %s\", fieldName)\n\t}\n\treturn curField, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69845582/unable-to-list-folders-in-gcp-using-go-client-library",
    "body": "package main\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\tcloudresourcemanager \"google.golang.org/api/cloudresourcemanager/v3\"\n)\nfunc main() {\n\tctx := context.Background()\n\tsvc, err := cloudresourcemanager.NewService(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfoldersService := cloudresourcemanager.NewFoldersService(svc)\n\tfoldersListCall := foldersService.List()\n\tfoldersListCall.Parent(\"organizations/12345678910\")\n\tresp, err := foldersListCall.Do()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, fld := range resp.Folders {\n\t\tfmt.Println(fld.DisplayName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69845531/how-to-convert-a-struct-into-a-flat-array-of-paths",
    "body": "package main\nimport (\n\"fmt\"\n\t\"reflect\"\n\t\"strconv\"\n)\ntype Example struct {\n\tFoo string\n\tBar string\n\tBaz struct{\n\t\tA int\n\t\tB string\n\t}\n\tQux []string\n}\nfunc main() {\n\texample := Example{Qux: []string{\"a\", \"b\"}}\n\tt := reflect.ValueOf(example)\n\tprefix := t.Type().Name()\n\tfmt.Println(ToPathSlice(t, prefix, make([]string, 0)))\n}\nfunc ToPathSlice(t reflect.Value, name string, dst []string) []string {\n\tswitch t.Kind() {\n\tcase reflect.Ptr, reflect.Interface:\n\t\treturn ToPathSlice(t.Elem(), name, dst)\n\tcase reflect.Struct:\n\t\tfor i := 0; i < t.NumField(); i++ {\n\t\t\tfname := t.Type().Field(i).Name\n\t\t\tdst = ToPathSlice(t.Field(i), name+\".\"+fname, dst)\n\t\t}\n\tcase reflect.Slice, reflect.Array:\n\t\tfor i := 0; i < t.Len(); i++ {\n\t\t\tdst = ToPathSlice(t.Index(i), name+\".\"+strconv.Itoa(i), dst)\n\t\t}\n\tdefault:\n\t\treturn append(dst, name)\n\t}\n\treturn dst\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69633441/basic-changes-to-hello-world-grpc",
    "body": "package main\nimport (\n\t\"log\"\n\t\"net\"\n\tpb \"${REPO}/helloworld\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\nconst (\n\tport = \":50051\"\n)\n// Ensure that `server` implements the interface\nvar _ pb.TheGRPCNotificationServiceServer = &server{}\n// server is used to implement helloworld.GreeterServer\ntype server struct {\n\tpb.UnimplementedTheGRPCNotificationServiceServer\n}\n// This is the correct signature of the method\nfunc (s *server) ReceiveNotificationWithGRPC(\n    stream pb.TheGRPCNotificationService_ReceiveNotificationWithGRPCServer,\n) error {\n    // Implement\n\treturn status.Errorf(codes.Unimplemented, \"not implemented\")\n}\nfunc main() {\n\tlis, err := net.Listen(\"tcp\", port)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to listen: %v\", err)\n\t}\n\ts := grpc.NewServer()\n\tpb.RegisterTheGRPCNotificationServiceServer(s, &server{})\n\tlog.Printf(\"server listening at %v\", lis.Addr())\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69611757/how-to-parse-custom-x509v3-extension-in-golang",
    "body": "func getCustomExtensions(serverCertFile string, customOIDPrefix string) ([]pkix.Extension, bool) {\n    certBytes, err := os.ReadFile(serverCertFile)\n    if err != nil {\n        return nil, false\n    }\n    block, _ := pem.Decode(certBytes)\n    if block.Type == \"CERTIFICATE\" {\n        certificate, err := x509.ParseCertificate(block.Bytes)\n        if err != nil {\n            return nil, false\n        }\n        var extensions []pkix.Extension\n        for _, ext := range certificate.Extensions {\n            // filter the custom extensions by customOID\n            if strings.Contains(ext.Id.String(), customOIDPrefix) {\n                extensions = append(extensions, ext)\n            }\n        }\n        return extensions, true\n    }\n    return nil, false\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69511737/string-to-float64-receiving-format-01",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\ntype MyFloat64 float64\nfunc (f *MyFloat64) UnmarshalJSON(data []byte) error {\n\traw := string(data)\n\traw = strings.TrimPrefix(raw, \"\\\"\")\n\traw = strings.TrimSuffix(raw, \"\\\"\")\n\tif parsedFloat, err := strconv.ParseFloat(raw, 64); err != nil {\n\t\treturn err\n\t} else {\n\t\t*f = MyFloat64(parsedFloat)\n\t\treturn nil\n\t}\n}\ntype MyObj struct {\n\tVal1 MyFloat64\n\tVal2 string\n}\nfunc main() {\n\tj := `{\"Val1\":\"0.01\", \"Val2\":\"0.01\"}`\n\to := MyObj{}\n\terr := json.Unmarshal([]byte(j), &o)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tb, _ := json.Marshal(o)\n\t\tfmt.Println(\"in:\", j)\n\t\tfmt.Println(\"out:\", string(b))\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69509482/is-there-a-common-idiom-for-conditionally-deferring-resource-cleanup-on-error",
    "body": "type Bundle struct {\n\ta, b, c ExpensiveResource\n}\nfunc (b *Bundle) destroy() {\n\tif b.a != nil {\n\t\t// destroy a\n\t}\n\tif b.b != nil {\n\t\t// destroy b\n\t}\n\tif b.c != nil {\n\t\t// destroy c\n\t}\n}\nfunc NewBundle() (b Bundle, err error) {\n\tdefer func() {\n\t\tif err != nil {\n\t\t\tb.destroy()\n\t\t}\n\t}()\n\tif b.a, err = GetExpensiveResource(); err != nil {\n\t\treturn Bundle{}, err\n\t}\n\tif b.b, err = GetAnotherExpensiveResource(); err != nil {\n\t\treturn Bundle{}, err\n\t}\n\tif b.c, err = GetAThirdExpensiveResource(); err != nil {\n\t\treturn Bundle{}, err\n\t}\n\treturn b, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69504691/how-do-i-add-histogram-to-prometheus-exporter-in-golang",
    "body": "package main\nimport (\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\t\"net/http\"\n)\ntype fooCollector struct {\n\tfooMetric *prometheus.Desc\n}\n//First,we define the variable of histogram\nvar (\n\thbrms_histovec = prometheus.NewHistogramVec(\n\t\tprometheus.HistogramOpts{\n\t\t\tName:        \"hbrms_histogram\",\n\t\t\tHelp:        \"hbrms_histogram\",\n\t\t\tConstLabels: prometheus.Labels{\"constname\": \"constvalue\"},\n\t\t\tBuckets: prometheus.ExponentialBuckets(50, 1.3, 15),//50*1.3,15times\n\t\t},\n\t\t[]string{\"env\"},\n\t)\n)\nfunc newFooCollector() *fooCollector {\n\treturn &fooCollector{\n\t\tfooMetric: prometheus.NewDesc(\"fff_metric\",\n\t\t\t\"Shows whether a foo has occurred in our cluster\",\n\t\t\tnil, nil,\n\t\t),\n\t}\n}\nfunc (collector *fooCollector) Describe(ch chan<- *prometheus.Desc) {\n\tch <- collector.fooMetric\n}\nfunc (collector *fooCollector) Collect(ch chan<- prometheus.Metric) {\n\tch <- prometheus.MustNewConstMetric(collector.fooMetric, prometheus.CounterValue, float64(1))\n    // 2nd,we set metrics in this way instead of write to channel,we just find a way of calling the code below when we visit the url.\n\thbrms_histovec.WithLabelValues(\"val1\").Observe(float64(10))\n}\nfunc main() {\n\treg := prometheus.NewPedanticRegistry()\n\treg.MustRegister(newFooCollector())\n    // finally,we register the metrics \"hbrms_histovec\" in this way\n\treg.MustRegister(hbrms_histovec)\n\tgatherers := prometheus.Gatherers{reg}\n\th := promhttp.HandlerFor(gatherers,\n\t\tpromhttp.HandlerOpts{\n\t\t\tErrorHandling: promhttp.ContinueOnError,\n\t\t})\n\thttp.HandleFunc(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {\n\t\th.ServeHTTP(w, r)\n\t})\n\thttp.ListenAndServe(\":80\", nil)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69482532/unexpected-eof-while-trying-to-send-a-request-from-a-parsed-raw-http-request",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\nfunc main() {\n\tstra := `GET / HTTP/1.1\nHost: google.com\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n`\n\treq, err := http.ReadRequest(bufio.NewReader(strings.NewReader(stra)))\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(req)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69465797/synchronising-writes-to-io-multiwriter-in-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"sync\"\n)\ntype LockedWriter struct {\n\tw io.Writer\n\tl sync.Mutex\n}\nfunc (lw *LockedWriter) Write(p []byte) (n int, err error) {\n\tlw.l.Lock()\n\tdefer lw.l.Unlock()\n\treturn lw.w.Write(p)\n}\nfunc main() {\n\tvar wg sync.WaitGroup\n\tvar w = &LockedWriter{\n\t\tw: io.MultiWriter(os.Stdout, os.Stderr),\n\t}\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo func(i int) {\n\t\t\tfor j := 0; j < i; j++ {\n\t\t\t\tfmt.Fprintf(w, \"I am goroutine %d (%d/%d)\\n\", i, j, i)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69423134/how-to-resolve-types-into-a-primitives-in-ast-parser",
    "body": "func main() {\n\tloadConfig := new(packages.Config)\n\tloadConfig.Mode = packages.NeedSyntax | packages.NeedTypes | packages.NeedTypesInfo\n\tloadConfig.Fset = token.NewFileSet()\n\tpkgs, err := packages.Load(loadConfig, \"syscall\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, pkg := range pkgs {\n\t\tfor _, syn := range pkg.Syntax {\n\t\t\tfor _, dec := range syn.Decls {\n\t\t\t\tif fd, ok := dec.(*ast.FuncDecl); ok && fd.Name.Name == \"Kill\" {\n\t\t\t\t\tx1 := fd.Type.Params.List[0].Type // int\n\t\t\t\t\tx2 := fd.Type.Params.List[1].Type // syscall.Signal\n\t\t\t\t\ttv1 := pkg.TypesInfo.Types[x1]\n\t\t\t\t\ttv2 := pkg.TypesInfo.Types[x2]\n\t\t\t\t\tif basic, ok := tv1.Type.(*types.Basic); ok {\n\t\t\t\t\t\tfmt.Printf(\"%#v\\n\", basic) // int\n\t\t\t\t\t}\n\t\t\t\t\tif named, ok := tv2.Type.(*types.Named); ok {\n\t\t\t\t\t\tfmt.Printf(\"%v\\n\", named.Obj())         // *types.TypeName (Signal)\n\t\t\t\t\t\tfmt.Printf(\"%#v\\n\", named.Underlying()) // *types.Basic (int)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69282258/how-to-add-a-golang-string-to-a-c-struct-in-cgo",
    "body": "package main\n// FIX: \"char response\" replaced with \"char *response\" below.\n/*\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\ntypedef struct Point {\n    int x, y;\n} Point;\ntypedef struct Resp {\n    char *response;\n} Resp;\nvoid fill(const char *name, Resp *r) {\n   printf(\"name: %s\\n\", name);\n   printf(\"Original value: %s\\n\", r->response);\n   r->response = \"testing\";\n}\n*/\nimport \"C\"\nimport (\n\t\"fmt\"\n\t\"unsafe\"\n)\n// NOTE: You cannot pass this struct to C.\n// Types passed to C must be defined in C (eg, like \"Point\" above).\ntype CPoint struct {\n\tPoint C.Point\n\tResp  C.Resp\n}\nfunc main() {\n\t// FIX: Use CString to allocate a *C.char string.\n\tresp := C.CString(\"Hello World\")\n\tpoint := CPoint{\n\t\tPoint: C.Point{x: 1, y: 2},\n\t\tResp:  C.Resp{response: resp},\n\t}\n\tfmt.Println(point)\n\t// Example of calling a C function and converting a C *char string to a Go string:\n\tcname := C.CString(\"foo\")\n\tdefer C.free(unsafe.Pointer(cname))\n\tr := &C.Resp{\n\t\tresponse: resp, // Use allocated C string.\n\t}\n\tC.fill(cname, r)\n\tgoResp := C.GoString(r.response)\n\tfmt.Println(goResp)\n\t// FIX: Release manually allocated string with free(3) when no longer needed.\n\tC.free(unsafe.Pointer(resp))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69263253/go-client-example-to-fetch-storage-account-keys",
    "body": "func ExampleStorageAccountsClient_ListKeys() {\n\tcred, err := azidentity.NewDefaultAzureCredential(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to obtain a credential: %v\", err)\n\t}\n\tclient := armstorage.NewStorageAccountsClient(arm.NewDefaultConnection(cred, nil), \"<subscription ID>\")\n\tresp, err := client.ListKeys(context.Background(), \"<resource group name>\", \"<storage account name>\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to delete account: %v\", err)\n\t}\n\tfor _, k := range resp.StorageAccountListKeysResult.Keys {\n\t\tlog.Printf(\"account key: %v\", *k.KeyName)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69233938/how-can-i-improve-my-scramble-string-function-whiche-may-include-different-symbo",
    "body": "package main\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"strings\"\n)\nfunc main() {\n\tinput := `Within a sentence, if it is not a number, scramble each words, but leave intact those characters \"'\\\".,()\", the first letter, and the last letter.`\n\toutput := scramble(input, 100)\n\tfmt.Printf(\"%v\\n\", input)\n\tfmt.Printf(\"%v\\n\", output)\n}\nfunc scramble(text string, seed int64) (output string) {\n\trand.Seed(seed)\n\tb := bufio.NewScanner(strings.NewReader(text))\n\tb.Split(bufio.ScanWords)\n\tfor b.Scan() {\n\t\tw := b.Text()\n\t\t_, err := strconv.Atoi(w)\n\t\tif err == nil || len(w) < 2 {\n\t\t\toutput += w\n\t\t} else {\n\t\t\toutput += shuffleWord(w)\n\t\t}\n\t\toutput += \" \"\n\t}\n\treturn strings.TrimSuffix(output, \" \")\n}\nfunc shuffleWord(input string) (output string) {\n\tif len(input) < 2 {\n\t\toutput = input\n\t\treturn\n\t}\n\tr := []rune(input)\n\tln := len(r)\n\tfor i := 1; i < ln-1; i++ {\n\t\tn := strings.IndexAny(input[i:], \".,()'\\\"\")\n\t\tif n == -1 {\n\t\t\tn = ln - i\n\t\t}\n\t\tif n > 0 {\n\t\t\trand.Shuffle(n, func(k, j int) {\n\t\t\t\tr[i+k], r[i+j] = r[i+j], r[i+k]\n\t\t\t})\n\t\t\ti += n - 1\n\t\t}\n\t}\n\toutput = string(r)\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/69231240/how-to-dynamically-change-method-receiver",
    "body": "type Env struct{\n\tdb string // should be database, just example\n}\nfunc (e *Env) httpHandler(w http.ResponseWriter, r * http.Request) {\n}\n// In case, create different router by different database.\nfunc newRouter(db string) *mux.Router {\n\te := &Env{\n\t\tdb:db,\n\t}\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/foo\", e.httpHandler)\n\trouter.HandleFunc(\"/bar\", e.httpHandler)\n\treturn router\n}\nfunc TestByDatabaseA(t *testing.T)  {\n\tr := newRouter(\"foo\")\n\tr.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\ttpl, _ := route.GetPathTemplate()\n\t\tif !strings.HasPrefix(tpl,\"/foo\"){\n\t\t\treturn nil\n\t\t}\n\t\t// run test\n\t\treturn nil\n\t})\n}\nfunc TestByDatabaseB(t *testing.T)  {\n\tr := newRouter(\"bar\")\n\tr.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n\t\ttpl, _ := route.GetPathTemplate()\n\t\tif !strings.HasPrefix(tpl,\"/bar\"){\n\t\t\treturn nil\n\t\t}\n\t\t// run test\n\t\treturn nil\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68992914/sign-a-sha-256-hash-with-dsa-in-go",
    "body": "    case x509.DSAWithSHA256:\n\t\thash := sha256.Sum256(signed)\n\t\tpub := cert.PublicKey.(*dsa.PublicKey)\n\t\treqLen := pub.Q.BitLen() / 8\n\t\tif reqLen > len(hash) {\n\t\t\treturn fmt.Errorf(\"Digest algorithm is too short for given DSA parameters.\")\n\t\t}\n\t\tdigest := hash[:reqLen]\n\t\tdsaSig := new(dsaSignature)\n\t\tif rest, err := asn1.Unmarshal(signature, dsaSig); err != nil {\n\t\t\treturn err\n\t\t} else if len(rest) != 0 {\n\t\t\treturn errors.New(\"x509: trailing data after DSA signature\")\n\t\t}\n\t\tif dsaSig.R.Sign() <= 0 || dsaSig.S.Sign() <= 0 {\n\t\t\treturn errors.New(\"x509: DSA signature contained zero or negative values\")\n\t\t}\n\t\tif !dsa.Verify(pub, digest, dsaSig.R, dsaSig.S) {\n\t\t\treturn errors.New(\"x509: DSA verification failure\")\n\t\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/68953067/polymorphism-with-struct-from-outside-my-package",
    "body": "func fetchResource(ref *metav1.OwnerReference, options *RequestOptions) (K8sResource, error) {\n\tswitch ref.Kind {\n\tcase \"ReplicaSet\":\n\t\tres, err := options.Clientset.AppsV1().ReplicaSets(options.Namespace).Get(options.Context, ref.Name, metav1.GetOptions{})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn replicaSet{res}, nil // wrap it up\n\tcase \"Pod\":\n\t\tres, err := options.Clientset.AppsV1().Pods(options.Namespace).Get(options.Context, ref.Name, metav1.GetOptions{})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn pod{res}, nil // wrap it up\n\tcase \"Job\":\n\t\tfallthrough\n\t// more stuff...\n\tdefault:\n\t\treturn nil, nil\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68944128/how-to-insert-a-mapstring-into-a-jsonb-field",
    "body": "type Huygens struct {\n    Worlds WorldsMap `json:\"worlds\"`\n}\ntype World struct {\n    Diameter int\n    Name string\n}\ntype WorldsMap map[string]World\nfunc (WorldsMap) GormDataType() string {\n  return \"JSONB\"\n}\nfunc (w *WorldsMap) Scan(value interface{}) error {\n\tvar bytes []byte\n\tswitch v := value.(type) {\n\tcase []byte:\n\t\tbytes = v\n\tcase string:\n\t\tbytes = []byte(v)\n\tdefault:\n\t\treturn errors.New(fmt.Sprint(\"Failed to unmarshal JSONB value:\", value))\n\t}\n\terr := json.Unmarshal(bytes, w)\n\treturn err\n}\nfunc (w WorldsMap) Value() (driver.Value, error) {\n\tbytes, err := json.Marshal(s)\n\treturn string(bytes), err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68906670/job-queue-where-workers-can-add-jobs-is-there-an-elegant-solution-to-stop-the-p",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\tout := make(chan string)\n\tc := make(chan string)\n\tgo func() {\n\t\tfor v := range c {\n\t\t\tgo func() { // use routines on the stack as a bank for the required overflow.\n\t\t\t\t<-time.After(time.Second) // simulate slowliness.\n\t\t\t\tc <- v + \" 2\"\n\t\t\t}()\n\t\t\tout <- v\n\t\t}\n\t}()\n\tgo func() {\n\t\tfor {\n\t\t\tc <- \"hello world!\"\n\t\t}\n\t}()\n\texit := time.After(time.Second * 60)\n\tfor v := range out {\n\t\tfmt.Println(v)\n\t\tselect {\n\t\tcase <-exit:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68906670/job-queue-where-workers-can-add-jobs-is-there-an-elegant-solution-to-stop-the-p",
    "body": "package main\nimport (\n\t\"log\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n)\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\tvar wg sync.WaitGroup\n\tvar wgr sync.WaitGroup\n\tout := make(chan string)\n\tc := make(chan string)\n\tgo func() {\n\t\tfor v := range c {\n\t\t\tif rand.Intn(5) == 0 {\n\t\t\t\twgr.Add(1)\n\t\t\t\tgo func(v string) {\n\t\t\t\t\t<-time.After(time.Microsecond)\n\t\t\t\t\tc <- v + \" 2\"\n\t\t\t\t}(v)\n\t\t\t}\n\t\t\twgr.Done()\n\t\t\tout <- v\n\t\t}\n\t\tclose(out)\n\t}()\n\tvar sent int\n\twg.Add(1)\n\tgo func() {\n\t\tfor i := 0; i < 300; i++ {\n\t\t\twgr.Add(1)\n\t\t\tc <- \"hello world!\"\n\t\t\tsent++\n\t\t}\n\t\twg.Done()\n\t}()\n\tgo func() {\n\t\twg.Wait()\n\t\twgr.Wait()\n\t\tclose(c)\n\t}()\n\tvar rcv int\n\tfor v := range out {\n\t\t// fmt.Println(v)\n\t\t_ = v\n\t\trcv++\n\t}\n\tlog.Println(\"sent\", sent)\n\tlog.Println(\"rcv\", rcv)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68856077/gorilla-middleware-authentication-for-specific-routes-not-working",
    "body": "func Init() {\n\tlog.Println(\"Initializing http routes...\")\n\n\tr := mux.NewRouter()\n\tmiddleware := Middleware{\n\t\t// inject any dependency if you need\n\t}\n\tr.Use(middleware.MiddlewareFunc)\n\t// No auth required to call this\n\tr.HandleFunc(\"/health\", handlers.HealthGet).Methods(\"GET\")        // Get API health\n\t// authrouter should be a extension of main router (i think)\n\tr.Handle(\"/\", authmiddlewares.Then(authRouter))\n\t// Authentication is not required for this\n\tr.HandleFunc(\"/account\", handlers.AccountPost).Methods(\"POST\")                    // Create an account\n\t// Authentication is required for this\n\tr.HandleFunc(\"/account\", handlers.AccountDelete).Methods(\"DELETE\")                // Delete my account\n\thttp.ListenAndServe(\":8080\", r)\n}\n// Middleware your custom middleware implementation\ntype Middleware struct {}\nfunc (m Middleware) MiddlewareFunc(handler http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\n    // you can check request method and paths and you can do authentications here\n    //eg := method = DELETE and path = /account, do authentication\n\t\thandler.ServeHTTP(w, r)\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68690550/how-to-clear-the-session-and-only-visit-an-about-page-after-login",
    "body": "-- main.go --\npackage main\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/gob\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/gorilla/securecookie\"\n\t\"github.com/gorilla/sessions\"\n)\n// Note: Don't store your key in your source code. Pass it via an\n// environmental variable, or flag (or both), and don't accidentally commit it\n// alongside your code. Ensure your key is sufficiently random - i.e. use Go's\n// crypto/rand or securecookie.GenerateRandomKey(32) and persist the result.\nvar store = sessions.NewCookieStore(\n\tsecurecookie.GenerateRandomKey(32),\n)\n//emulate db package\nfunc dbLookupUser(user, pwd string) bool {\n\treturn user == \"user\" && pwd == \"pwd\"\n}\nfunc dbLookupHash(h string) bool {\n\treturn h == hash(\"user\", \"pwd\")\n}\nfunc hash(s ...interface{}) string {\n\thr := sha256.New()\n\tfmt.Fprint(hr, s...)\n\treturn fmt.Sprintf(\"%x\", hr.Sum(nil))\n}\n// hashKey is a typed key for the session map store to prevent unintented overwrites.\ntype hashKey string\nfunc init() {\n\tgob.Register(hashKey(\"\"))\n}\nfunc loginAuth(res http.ResponseWriter, req *http.Request) {\n\temail := req.FormValue(\"email\")\n\tpassword := req.FormValue(\"password\")\n\tmatch := dbLookupUser(email, password)\n\tif match == true {\n\t\tsession, _ := store.Get(req, \"session-name\")\n\t\tsession.Values[\"hash\"] = hash(email, password)\n\t\t// Save it before we write to the response/return from the handler.\n\t\terr := session.Save(req, res)\n\t\tif err == nil {\n\t\t\t// about(res, req) // don't!\n\t\t\t// the about handler might want to setup its own http response headers\n\t\t\t// That would conflict with what we did here.\n\t\t\t// prefer a redirect\n\t\t\thttp.Redirect(res, req, \"/about\", http.StatusFound)\n\t\t\treturn\n\t\t}\n\t} else {\n\t\tfmt.Fprintf(res, \"try again\") // use a templatee instead!\n\t\t// tmpl.ExecuteTemplate(res, \"login.html\", nil)\n\t}\n}\nfunc logout(res http.ResponseWriter, req *http.Request) {\n\tsession, _ := store.Get(req, \"session-name\")\n\tdelete(session.Values, hashKey(\"hash\"))\n\t_ = session.Save(req, res)\n\thttp.Redirect(res, req, \"/\", 302)\n}\nfunc about(res http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(res, \"welcome to about page\")\n}\nfunc requireLogin(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tsession, _ := store.Get(r, \"session-name\")\n\t\tvar h string\n\t\tif x, ok := session.Values[hashKey(\"hash\")]; ok {\n\t\t\th = x.(string)\n\t\t}\n\t\tvar match bool\n\t\tif h != \"\" {\n\t\t\tmatch = dbLookupHash(h)\n\t\t}\n\t\tif !match {\n\t\t\t// Write an error and stop the handler chain\n\t\t\thttp.Error(w, \"Forbidden\", http.StatusForbidden)\n\t\t\treturn\n\t\t}\n\t\tnext(w, r)\n\t}\n}\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", loginAuth)\n\tr.HandleFunc(\"/logout\", logout)\n\tr.HandleFunc(\"/about\", requireLogin(about))\n\tlog.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n-- main_test.go --\npackage main\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n)\nfunc TestLogin(t *testing.T) {\n\treq := httptest.NewRequest(\"POST\", \"http://example.com/foo\", nil)\n\tform := url.Values{}\n\tform.Set(\"email\", \"user\")\n\tform.Set(\"password\", \"pwd\")\n\treq.Form = form\n\tw := httptest.NewRecorder()\n\tloginAuth(w, req)\n\tresp := w.Result()\n\t// body, _ := io.ReadAll(resp.Body)\n\tif wanted := http.StatusFound; resp.StatusCode != wanted {\n\t\tt.Fatalf(\"invalid response code, got=%v wanted=%v\", resp.StatusCode, wanted)\n\t}\n\t// implement more check\n}\nfunc TestLoginFailure(t *testing.T) {\n\treq := httptest.NewRequest(\"POST\", \"http://example.com/foo\", nil)\n\tform := url.Values{}\n\tform.Set(\"email\", \"!user\")\n\tform.Set(\"password\", \"!pwd\")\n\treq.Form = form\n\tw := httptest.NewRecorder()\n\tloginAuth(w, req)\n\tresp := w.Result()\n\t// body, _ := io.ReadAll(resp.Body)\n\tif wanted := http.StatusOK; resp.StatusCode != wanted {\n\t\tt.Fatalf(\"invalid response code, got=%v wanted=%v\", resp.StatusCode, wanted)\n\t}\n\t// implement more check\n}\nfunc TestAboutNotLogged(t *testing.T) {\n\treq := httptest.NewRequest(\"POST\", \"http://example.com/foo\", nil)\n\tw := httptest.NewRecorder()\n\trequireLogin(about)(w, req)\n\tresp := w.Result()\n\t// body, _ := io.ReadAll(resp.Body)\n\tif wanted := http.StatusForbidden; resp.StatusCode != wanted {\n\t\tt.Fatalf(\"invalid response code, got=%v wanted=%v\", resp.StatusCode, wanted)\n\t}\n\t// implement more check\n}\nfunc TestAboutLogged(t *testing.T) {\n\treq := httptest.NewRequest(\"POST\", \"http://example.com/foo\", nil)\n\tw := httptest.NewRecorder()\n\tsession, _ := store.Get(req, \"session-name\")\n\tsession.Values[hashKey(\"hash\")] = hash(\"user\", \"pwd\")\n\terr := session.Save(req, w)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\thdr := w.Header()\n\treq.Header.Add(\"Cookie\", hdr[\"Set-Cookie\"][0])\n\tw = httptest.NewRecorder()\n\trequireLogin(about)(w, req)\n\tresp := w.Result()\n\t// body, _ := io.ReadAll(resp.Body)\n\tif wanted := http.StatusOK; resp.StatusCode != wanted {\n\t\tt.Fatalf(\"invalid response code, got=%v wanted=%v\", resp.StatusCode, wanted)\n\t}\n\t// implement more check\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68598507/cannot-convert-res-data-type-twitterstream-rulesresponsevalue-to-type-byte",
    "body": "// I renamed Rules to Rule\ntype Rule struct {\n\tValue string `json:\"value\"`\n\tTag   string `json:\"tag\"`\n\tId    string `json:\"id\"`\n}\nfunc getRules() ([]Rule, error) {\n\taccessKey := os.Getenv(\"API_KEY\")\n\taccessSecret := os.Getenv(\"API_SECRET_KEY\")\n\ttok, err := twitterstream.NewTokenGenerator().SetApiKeyAndSecret(accessKey, accessSecret).RequestBearerToken()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tapi := twitterstream.NewTwitterStream(tok.AccessToken)\n\tres, err := api.Rules.GetRules()\n\tif err != nil {\n\t\treturn nil, err\n\t} else if res.Errors != nil && len(res.Errors) > 0 {\n\t\treturn nil, fmt.Errorf(\"Received an error from twitter: %v\", res.Errors)\n\t}\n\trules := make([]Rule, len(res.Data))\n\tfor i := range res.Data {\n\t\trules[i] = Rule(res.Data[i]) // convert rulesResponseValue to Rule\n\t}\n\treturn rules, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68511424/how-to-use-pointers-to-interface-in-go-as-internal-data-structure-for-collection",
    "body": "package main\nimport (\n    \"fmt\"\n)\ntype Comparable interface {\n\tLess(than Comparable) bool\n}\ntype Node struct {\n\tData Comparable\n}\nfunc NewNode(data Comparable) *Node {\n\treturn &Node{Data: data}\n}\ntype Tree struct {\n\troot *Node\n}\nfunc NewTree() *Tree {\n\treturn &Tree{}\n}\nfunc (t *Tree) insert(data Comparable) {\n\tif t.root == nil || t.root.Data.Less(data) {\n\t\tt.root = NewNode(data)\n\t}\n}\ntype Row struct {\n\tRow []string\n}\nfunc NewRow(row []string) *Row {\n\treturn &Row{Row: row}\n}\nfunc (r Row) Less(other Comparable) bool {\n\treturn r.Row[0] < other.(*Row).Row[0]\n}\nfunc main() {\n\tt := NewTree()\n\tt.insert(NewRow([]string{\"123\"}))\n\tfmt.Printf(\"%v\\n\", t.root.Data.(*Row).Row)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68507642/insert-into-output-all-one-two-three-product-ids-that-start-with-the-digit",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\nfunc main() {\n\tvar output []string\n\t// 1) Insert into output all one + two + three product IDs that start with the digit \"1\"\n\tfor _, res := range GetOneProductIDs() {\n\t\tif strings.HasPrefix(res, \"1\") {\n\t\t\toutput = append(output, res)\n\t\t}\n\t}\n\tfor _, res := range GetIwoProductIDs() {\n\t\tif strings.HasPrefix(res, \"1\") {\n\t\t\toutput = append(output, res)\n\t\t}\n\t}\n\tfor _, res := range GetThreeProductIDs() {\n\t\tif strings.HasPrefix(res, \"1\") {\n\t\t\toutput = append(output, res)\n\t\t}\n\t}\n\tfmt.Println(output)\n}\nfunc GetOneProductIDs() (out []string) {\n\tfor i := 0; i < 100; i += 10 {\n\t\tout = append(out, fmt.Sprintf(\"%d_%s\", i, \"one\"))\n\t}\n\treturn out\n}\nfunc GetIwoProductIDs() (out []string) {\n\tfor i := 0; i < 100; i += 5 {\n\t\tout = append(out, fmt.Sprintf(\"%d_%s\", i, \"two\"))\n\t}\n\treturn out\n}\nfunc GetThreeProductIDs() (out []string) {\n\tfor i := 0; i < 100; i += 2 {\n\t\tout = append(out, fmt.Sprintf(\"%d_%s\", i, \"three\"))\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68195431/how-to-collect-values-from-a-channel-into-a-slice-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"golang.org/x/sync/errgroup\"\n)\nfunc main() {\n\tch := make(chan int)\n\tgo func() {\n\t\tg := new(errgroup.Group)\n\t\tfor n := 2; n <= 3; n++ {\n\t\t\tn := n\n\t\t\tg.Go(func() error {\n\t\t\t\tfor _, i := range helper(n) {\n\t\t\t\t\tch <- i\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t\tif err := g.Wait(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tclose(ch)\n\t}()\n\tout := make([]int, 0)\n\tfor i := range ch {\n\t\tout = append(out, i)\n\t}\n\tfmt.Println(out) // should have the same elements as [0 1 0 1 2]\n}\nfunc helper(n int) []int {\n\tout := make([]int, 0)\n\tfor i := 0; i < n; i++ {\n\t\tout = append(out, i)\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68195431/how-to-collect-values-from-a-channel-into-a-slice-in-go",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"golang.org/x/sync/errgroup\"\n)\nfunc main() {\n\tout := make([]int, 0)\n\tch := make(chan int)\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor i := range ch {\n\t\t\tout = append(out, i)\n\t\t}\n\t}()\n\tg := new(errgroup.Group)\n\tfor n := 2; n <= 3; n++ {\n\t\tn := n\n\t\tg.Go(func() error {\n\t\t\tfor _, i := range helper(n) {\n\t\t\t\tch <- i\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\t}\n\tif err := g.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n\tclose(ch)\n\twg.Wait()\n\t// time.Sleep(time.Second)\n\tfmt.Println(out) // should have the same elements as [0 1 0 1 2]\n}\nfunc helper(n int) []int {\n\tout := make([]int, 0)\n\tfor i := 0; i < n; i++ {\n\t\tout = append(out, i)\n\t}\n\treturn out\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68174740/checking-api-with-golang-for-changes-in-data-continuously",
    "body": "func Poll(req *http.Request, client *http.Client) (ch chan PollResponse){\n\tch = make(chan PollResponse) // Buffered channel is also good\n\tgo func() {\n\t\tdefer func() {\n\t\t\tclose(ch)\n\t\t}()\n\t\tr := rand.New(rand.NewSource(99))\n\t\tc := time.Tick(10 * time.Second)\n\t\tfor range c {\n\t\t\tres, err := client.Do(req);\n\t\t\tpollRes := PollResponse {}\n\t\t\tif err != nil {\n\t\t\t\tpollRes.Data, pollRes.Err = nil, err\n\t\t\t\tch <- pollRes\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tpollRes.Data, pollRes.Err = io.ReadAll(res.Body)\n\t\t\tch <- pollRes\n\t\t\tif pollRes.Err != nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tjitter := time.Duration(r.Int31n(5000)) * time.Millisecond\n\t\t\ttime.Sleep(jitter)\n\t\t}\n\t}()\n\treturn\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68144512/identifying-golang-deadlock-5-philosophers-problem",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"sync\"\n\t\"time\"\n)\nconst (\n\tnumOfPhilosophers = 5\n\tnumOfMeals        = 3\n\tmaxEaters         = 2\n)\nfunc main() {\n\tchopsticks := make([]sync.Mutex, 5)\n\tpermissionChannel := make(chan bool)\n\tfinishEating := make(chan bool)\n\tgo permissionFromHost(permissionChannel, finishEating)\n\tvar wg sync.WaitGroup\n\twg.Add(numOfPhilosophers)\n\tfor i := 1; i <= numOfPhilosophers; i++ {\n\t\tgo eat(i, &chopsticks[i-1], &chopsticks[i%numOfPhilosophers], &wg, permissionChannel, finishEating)\n\t}\n\twg.Wait()\n}\nfunc eat(philosopherId int, left *sync.Mutex, right *sync.Mutex, wg *sync.WaitGroup, permissionChannel <-chan bool, finishEatingChannel chan<- bool) {\n\tdefer wg.Done()\n\tfor i := 1; i <= numOfMeals; i++ {\n\t\t//lock chopsticks in random order\n\t\tif RandBool() {\n\t\t\tleft.Lock()\n\t\t\tright.Lock()\n\t\t} else {\n\t\t\tright.Lock()\n\t\t\tleft.Lock()\n\t\t}\n\t\tfmt.Printf(\"waiting for permission from host %d\\n\", philosopherId)\n\t\t<-permissionChannel\n\t\tfmt.Printf(\"starting to eat %d (time %d)\\n\", philosopherId, i)\n\t\tfmt.Printf(\"finish to eat %d (time %d)\\n\", philosopherId, i)\n\t\t//release chopsticks\n\t\tleft.Unlock()\n\t\tright.Unlock()\n\t\t//let host know I am done eating\n\t\tfinishEatingChannel <- true\n\t}\n}\nfunc permissionFromHost(permissionChannel chan<- bool, finishEating <-chan bool) {\n\tctr := 0\n\tfor {\n\t\tif ctr < maxEaters {\n\t\t\tselect {\n\t\t\tcase <-finishEating:\n\t\t\t\tctr--\n\t\t\tcase permissionChannel <- true:\n\t\t\t\tctr++\n\t\t\t}\n\t\t} else {\n\t\t\t<-finishEating\n\t\t\tctr--\n\t\t}\n\t}\n}\nfunc RandBool() bool {\n\trand.Seed(time.Now().UnixNano())\n\treturn rand.Intn(2) == 1\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68135170/updating-a-node-within-a-kml-file-using-golang",
    "body": "// type definition adapted from https://www.onlinetool.io/xmltogo/\ntype KML struct {\n\tXMLName xml.Name `xml:\"kml\"`\n\tText    string   `xml:\",chardata\"`\n\tXMLNS   string   `xml:\"xmlns,attr\"`\n\tGX      string   `xml:\"gx,attr\"`\n\tKML     string   `xml:\"kml,attr\"`\n\tAtom    string   `xml:\"atom,attr\"`\n\tFolder  struct {\n\t\tText     string `xml:\",chardata\"`\n\t\tName     string `xml:\"name\"`\n\t\tOpen     string `xml:\"open\"`\n\t\tDocument struct {\n\t\t\tText      string `xml:\",chardata\"`\n\t\t\tName      string `xml:\"name\"`\n\t\t\tPlacemark struct {\n\t\t\t\tText  string `xml:\",chardata\"`\n\t\t\t\tStyle struct {\n\t\t\t\t\tText      string `xml:\",chardata\"`\n\t\t\t\t\tLineStyle struct {\n\t\t\t\t\t\tText  string `xml:\",chardata\"`\n\t\t\t\t\t\tColor string `xml:\"color\"`\n\t\t\t\t\t\tWidth string `xml:\"width\"`\n\t\t\t\t\t} `xml:\"LineStyle\"`\n\t\t\t\t\tPolyStyle struct {\n\t\t\t\t\t\tText    string `xml:\",chardata\"`\n\t\t\t\t\t\tColor   string `xml:\"color\"`\n\t\t\t\t\t\tFill    string `xml:\"fill\"`\n\t\t\t\t\t\tOutline string `xml:\"outline\"`\n\t\t\t\t\t} `xml:\"PolyStyle\"`\n\t\t\t\t} `xml:\"Style\"`\n\t\t\t\tLineString struct {\n\t\t\t\t\tText        string `xml:\",chardata\"`\n\t\t\t\t\tTessellate  string `xml:\"tessellate\"`\n\t\t\t\t\tCoordinates string `xml:\"coordinates\"`\n\t\t\t\t} `xml:\"LineString\"`\n\t\t\t} `xml:\"Placemark\"`\n\t\t} `xml:\"Document\"`\n\t} `xml:\"Folder\"`\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68135170/updating-a-node-within-a-kml-file-using-golang",
    "body": "func readKML(filename string) (*KML, error) {\n  f, err := os.Open(filename)\n  if err != nil {\n    return nil, fmt.Errorf(\"opening KML file: %w\", err) // contains filename\n  }\n  defer f.Close() // reading, ignoring error is acceptable\n  var kml KML\n  if err := xml.NewDecoder(f).Decode(&kml); err != nil {\n    return nil, fmt.Errorf(\"decoding XML from %q as KML: %w\", filename, err)\n  }\n  return &kml, nil\n}\nfunc writeKML(filename string, kml *KML) error {\n  f, err := os.Create(filename)\n  if err != nil {\n    return fmt.Errorf(\"creating KML file: %w\", err) // contains filename\n  }\n  defer f.Close() // double close is OK for *os.File\n  enc := xml.NewEncoder(f)\n  enc.Indent(\"\", \"    \")\n  if err := enc.Encode(kml); err != nil {\n    return nil, fmt.Errorf(\"encoding KML to %q: %w\", filename, err)\n  }\n  return nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68135170/updating-a-node-within-a-kml-file-using-golang",
    "body": "kml, err := readKML(filename)\nif err != nil {\n  return err // contains context\n}\ncoordinates := strings.Fields(kml.Folder.Document.Placemark.LineString.Coordinates)\nfor coord := range incoming {\n  line := fmt.Sprintf(\"%f,%f,%d\\n\", coord.Lat, coord.Long, 0)\n  coordinates = append(coordinates, coord)\n\n  kml.Folder.Document.Placemark.LineString.Coordinates = strings.Join(coordinates, \"\\n\")\n  if err := writeKML(filename, kml); err != nil {\n    log.Printf(\"Warning: failed to update %q: %s\", filename, err)\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/68066495/how-can-non-struct-type-extends-struct-functions",
    "body": "package main\nimport (\n\t\"database/sql/driver\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n)\ntype CustomJSONType struct {\n\tdata interface{}\n}\nfunc (t *CustomJSONType) Scan(src interface{}) error {\n\tbytes, ok := src.([]byte)\n\tif !ok {\n\t\treturn errors.New(\"invalid input type\")\n\t}\n\terr := json.Unmarshal(bytes, t.data)\n\tif err != nil{\n\t\treturn err\n\t}\n\treturn nil\n}\nfunc (t CustomJSONType) Value() (driver.Value, error) {\n\tbytes, err := json.Marshal(t.data)\n\tif err != nil {\n\t\treturn []byte{}, err\n\t}\n\treturn bytes, err\n}\nfunc (t CustomJSONType) GormDataType() string {\n\treturn \"json\"\n}\ntype User struct {\n\tId      int\n\tName    string\n\tEmail   string\n}\ntype Project struct {\n\tuser CustomJSONType\n}\nfunc (p *Project) SetUser(u User) {\n\tp.user.data = u\n}\nfunc (p *Project) GetUser() User {\n\tuser := p.user.data.(User)\n\treturn user\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67833205/generate-video-access-token-jwt-with-twillio-go-sdk",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/dvsekhvalnov/jose2go\"\n\t\"log\"\n\t\"time\"\n)\nfunc main() {\n\taccountSid := \"XXX\"\n\tkeySid := \"YYY\"\n\tkeySecret := \"ZZZ\"\n\tusername := \"Simon\"\n\troomName := \"SimonsRoom\"\n\tnow := time.Now()\n\ttype JWTPayload struct {\n\t\tJti                    string `json:\"jti\"`\n\t\tIssuer                 string `json:\"iss\"`\n\t\tSubject                string `json:\"sub\"`\n\t\tCreationUnixTimestamp  int64  `json:\"iat\"`\n\t\tNotBeforeUnixTimestamp int64  `json:\"nbf\"`\n\t\tExpiresUnixTimestamp   int64  `json:\"exp\"`\n\t\tGrants                 struct {\n\t\t\tIdentity string `json:\"identity\"`\n\t\t\tVideo    struct {\n\t\t\t\tRoom string `json:\"room\"`\n\t\t\t} `json:\"video\"`\n\t\t} `json:\"grants\"`\n\t}\n\tpayload := JWTPayload{\n\t\tJti:                    fmt.Sprintf(\"%s-%d\",keySid,now.UnixNano()),\n\t\tIssuer:                 keySid,\n\t\tSubject:                accountSid,\n\t\tCreationUnixTimestamp:  now.Unix(),\n\t\tNotBeforeUnixTimestamp: now.Unix(),\n\t\tExpiresUnixTimestamp:   now.Add(23*time.Hour).Unix(),\n\t\tGrants: struct {\n\t\t\tIdentity string `json:\"identity\"`\n\t\t\tVideo    struct {\n\t\t\t\tRoom string `json:\"room\"`\n\t\t\t} `json:\"video\"`\n\t\t}{\n\t\t\tIdentity: username,\n\t\t\tVideo: struct {\n\t\t\t\tRoom string `json:\"room\"`\n\t\t\t}{\n\t\t\t\tRoom: roomName,\n\t\t\t},\n\t\t},\n\t}\n\tpayloadByte, err := json.Marshal(payload)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttoken, err := jose.SignBytes(payloadByte, jose.HS256, []byte(keySecret),\n\t\tjose.Header(\"cty\", \"twilio-fpa;v=1\"),\n\t\tjose.Header(\"typ\", \"JWT\"),\n\t\tjose.Header(\"alg\", \"HS256\"),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(token)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67817786/how-to-take-input-in-2d-array-using-golang",
    "body": "package main\nimport (\n\t\"fmt\"\n)\nfunc main() {\n\tnumbers := [4][4]int{}\n\tvar even []int\n\tvar odd []int\n\t//row := 2\n\t//col := 4\n\tfmt.Println(\"Enter data in your 2-D Array\")\n\tfor row := 0; row < 4; row++ {\n\t\tfor col := 0; col < 4; col++ {\n\t\t\tfmt.Scanf(\"%d\", &numbers[row][col])\n\t\t\tif numbers[row][col]%2 == 0 {\n\t\t\t\teven = append(even, numbers[row][col])\n\t\t\t} else {\n\t\t\t\todd = append(odd, numbers[row][col])\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"Printing 2D Arrays\", numbers)\n\tfmt.Println(\"Print Even Array\", even)\n\tfmt.Println(\"Print Odd Array\", odd)\n    //Printing 2D Arrays [[1 2 3 4] [5 6 7 8] [9 10 11 12] [13 14 15 16]]\n\t//Print Even Array [2 4 6 8 10 12 14 16]\n\t//Print Odd Array [1 3 5 7 9 11 13 15]\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67294678/how-to-make-this-golang-for-select-code-work",
    "body": "package main\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n)\nfunc main() {\n\tlog.Println(\"start\")\n\tdefer log.Println(\"end\")\n\tctx, cancel := context.WithCancel(context.Background())\n\ttasks := make(chan struct{})\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second) // a job\n\t\ttasks <- struct{}{}\n\t}()\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second) // a job\n\t\tcancel()\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Println(\"QUIT\")\n\t\t\treturn\n\t\tcase <-tasks:\n\t\t\tlog.Println(\"Doing\")\n\t\t\t// do some long time jobs more than 10 seconds\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase <-time.After(time.Second * 10):\n\t\t\t}\n\t\t}\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67262480/drop-shadow-with-golang-based-on-alpha",
    "body": "func DropShadow(img image.Image, size float64) image.Image {\n\tbounds := img.Bounds()\n\tsizeInt := int(math.Ceil(size)) * 4\n\tfinal := imaging.New(bounds.Dx()+sizeInt, bounds.Dy()+sizeInt, color.Alpha{})\n\tfor x := 0; x < bounds.Dx(); x++ {\n\t\tfor y := 0; y < bounds.Dy(); y++ {\n\t\t\t_, _, _, a := img.At(x, y).RGBA()\n\t\t\tfinal.Set(x+sizeInt/2, y+sizeInt/2, color.RGBA{0x0, 0x0, 0x0, uint8(a / 2)})\n\t\t}\n\t}\n\tfinal = imaging.Blur(final, size)\n\tfinal = imaging.Overlay(final, img, image.Point{sizeInt / 2, sizeInt / 2}, 1)\n\treturn final\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67139937/https-post-not-working-as-expected-in-golang-but-works-fine-in-python",
    "body": "package main\nimport  (\n    \"strings\"\n    \"net/http\"\n    \"io/ioutil\"\n    \"fmt\"\n)\nfunc main() {\n\tbody := strings.NewReader(`{\"jql\": \"project = HSP\"}`)\n\treq, err := http.NewRequest(\"POST\", \"https://your-domain.atlassian.com/rest/api/2/search\", body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.SetBasicAuth(\"email@example.com\", \"<api_token>\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\tout, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(out))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67139937/https-post-not-working-as-expected-in-golang-but-works-fine-in-python",
    "body": "package main\nimport  (\n    \"net/http\"\n    \"net/url\"\n    \"io/ioutil\"\n    \"fmt\"\n)\nfunc main() {\n    query := url.Values{\"jql\": {\"project = HSP\"}}\n\treq, err := http.NewRequest(\"GET\", \"https://your-domain.atlassian.com/rest/api/2/search?\" + query.Encode(), nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.SetBasicAuth(\"email@example.com\", \"<api_token>\")\n\treq.Header.Set(\"Accept\", \"application/json\")\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer resp.Body.Close()\n\tout, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(out))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/67114519/tasks-inside-chromedp-actionfunc-not-working-as-expected",
    "body": "queries := [3]string{\"Object.keys(window);\", \"window.CSS\", \"window.Array\"}\n\t// create context\n\tctx, cancel := chromedp.NewContext(context.Background())\n\tdefer cancel()\n\t// run task list\n\tvar res []byte\n\terr := chromedp.Run(ctx,\n\t\tchromedp.Navigate(`https://www.google.com/`),\n\t\tchromedp.WaitReady(\"body\"),\n\t\t//chromedp.Evaluate(\"Object.keys(window)\", &res),\n\t\tchromedp.ActionFunc(func(ctx context.Context) error {\n\t\t\tfor _, query := range queries {\n\t\t\t\tchromedp.Evaluate(query, &res).Do(ctx)\n\t\t\t\tfmt.Printf(\"Query %s outputs: %+v\\n\", query, string(res))\n\t\t\t}\n\t\t\treturn nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/67046820/how-to-get-uuid-of-last-inserted-row-using-sqlx-in-postgres",
    "body": "var _ sql.Result = sqlresult{} // compiler check\ntype sqlresult struct { lastid, nrows int64 }\nfunc (r sqlresult) LastInsertId() (int64, error) { return r.lastid, nil }\nfunc (r sqlresult) RowsAffected() (int64, error) { return r.nrows, nil }\nfunc (*RideRepositoryImpl) insert(entity interface{}, tx persistence.Transaction) (sql.Result, error) {\n    ride := entity.(*model.Ride)\n    placeHolders := repository.InsertPlaceholders(len(rideColumns))\n    sql := fmt.Sprintf(\"INSERT INTO %s(%s) VALUES(%s) RETURNING <name_of_uuid_column>\", TableName, strings.Join(Columns, \",\"), placeHolders)\n    row := tx.QueryRow(sql, ride.ID.String(), ride.DeviceIotID, ride.VehicleID.String(), ride.UserID.String(),ride.AdditionComments)\n    if err := row.Scan(&ride.<NameOfUUIDField>); err != nil {\n        return nil, err\n    }\n    return sqlresult{0, 1}, nil\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66995686/how-to-copy-c-int-address-into-c-char-in-cgo",
    "body": "package main\n// #include <stdio.h>\n// #include <stdlib.h>\n// #include <string.h>\n//\n// struct data {\n//     char *a_add;\n//     unsigned int length;\n// };\n//\n// void f(struct data *p) {\n//    printf(\"p->a_add = %p, p->length = %u\\n\", p->a_add, p->length);\n//    printf(\"p->a_add as an int: %d\\n\", *(int *)p->a_add);\n//    *(int *)p->a_add = 0x12345678;\n// }\nimport \"C\"\nimport (\n        \"fmt\"\n        \"unsafe\"\n)\nconst cIntSize = C.sizeof_int\n// Produce a Go int64 from a C int.  The caller passes the address\n// of the C int.\nfunc int64FromCInt(ci unsafe.Pointer) int64 {\n        // Get a slice pointing to the bytes of the C int.\n        sci := (*[cIntSize]byte)(ci)[:]\n        switch {\n        case cIntSize == unsafe.Sizeof(int64(0)):\n                var gi int64\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi))[:]\n                copy(sgi, sci)\n                return gi\n        case cIntSize == unsafe.Sizeof(int32(0)):\n                var gi int32\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi))[:]\n                copy(sgi, sci)\n                return int64(gi)\n        case cIntSize == unsafe.Sizeof(int(0)):\n                var gi int\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi))[:]\n                copy(sgi, sci)\n                return int64(gi)\n        default:\n                panic(\"no Go integer size matches C integer size\")\n        }\n}\n// Write C int (via an unsafe.Pointer) from Go int.  The caller\n// passes the address of the C int.\nfunc writeCIntFromInt(gi int, ci unsafe.Pointer) {\n        // Get a slices covering the bytes of the C int.\n        sci := (*[cIntSize]byte)(ci)[:]\n        switch {\n        case cIntSize == unsafe.Sizeof(gi):\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi))[:]\n                copy(sci, sgi)\n        case cIntSize == unsafe.Sizeof(int64(0)):\n                // Copy value to int64 for copying purposes.\n                // Since int64 holds all int values, this always works.\n                gi2 := int64(gi)\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi2))[:]\n                copy(sci, sgi)\n        case cIntSize == unsafe.Sizeof(int32(0)):\n                // Copy value to int32 for copying purposes.\n                // Panic if we destroy the value via truncation.\n                gi2 := int32(gi)\n                if int(gi2) != gi {\n                        panic(fmt.Sprintf(\"unable to send Go value %x to C: size of Go int=%d, size of C int=%d\", gi, unsafe.Sizeof(gi), cIntSize))\n                }\n                sgi := (*[unsafe.Sizeof(gi)]byte)(unsafe.Pointer(&gi2))[:]\n                copy(sci, sgi)\n        default:\n                panic(\"no Go integer size matches C integer size\")\n        }\n}\nfunc main() {\n        b := C.malloc(cIntSize)\n        defer C.free(b)\n        writeCIntFromInt(32767, b)\n        d := C.struct_data{a_add: (*C.char)(b), length: cIntSize}\n        fmt.Println(\"calling C.f(d)\")\n        C.f(&d)\n        result := int64FromCInt(unsafe.Pointer(d.a_add))\n        fmt.Printf(\"result = %#x\\n\", result)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66940668/how-to-read-foreign-keys-in-sqlx",
    "body": "    // Here I'm using (a slice of) anonymous structs,\n    // but you can declare a named one instead.\n\tbridge := []struct {\n\t\tFixtureId    int64  `db:\"id\"`\n\t\tHomeTeamId   int64  `db:\"home_team_id\"`\n\t\tHomeTeamName string `db:\"home_team_name\"`\n\t\tAwayTeamId   int64  `db:\"away_team_id\"`\n\t\tAwayTeamName string `db:\"away_team_name\"`\n\t}{}\n\terr := db.SelectContext(ctx, &bridge, query)\n\tif err != nil {\n\t\t// handle err...\n\t}\n\tmystructs := make([]Fixture, len(bridge))\n\tfor i, b := range bridge {\n\t\tmystructs[i] = Fixture{\n\t\t\tID: b.FixtureId,\n\t\t\tHome: Team{\n\t\t\t\tID:   b.HomeTeamId,\n\t\t\t\tName: b.HomeTeamName,\n\t\t\t},\n\t\t\tAway: Team{\n\t\t\t\tID:   b.AwayTeamId,\n\t\t\t\tName: b.AwayTeamName,\n\t\t\t},\n\t\t}\n\t}"
  },
  {
    "url": "https://stackoverflow.com/questions/66591844/how-to-redirect-multipart-post-request-to-a-second-server-in-golang",
    "body": "import (\n\t\"net/http\"\n    \"errors\"\n\t\"fmt\"\n    \"log\"\n\t\"io/ioutil\"\n    \"bytes\"\n\t\"github.com/gorilla/mux\"\n)\nfunc fileUpload(w http.ResponseWriter, r *http.Request) {\n    body, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\treturn log.Fatal(err)\n\t}\n\tr.Body = ioutil.NopCloser(bytes.NewReader(body))\n    // If Server A and B are separate docker images, you may need to use their docker subnet IP, like below.\n\tproxyReq, err := http.NewRequest(r.Method, fmt.Sprintf(\"http://172.18.0.2:8082%s\", r.RequestURI), bytes.NewReader(body))\n\tif err != nil {\n\t\treturn log.Fatal(err)\n\t}\n\tfor header, values := range r.Header {\n\t\tfor _, value := range values {\n\t\t\tproxyReq.Header.Add(header, value)\n\t\t}\n\t}\n\tclient := &http.Client{}\n\tresp, err := client.Do(proxyReq)\n\tif err != nil {\n\t\treturn log.Fatal(err)\n    }\n\tdefer resp.Body.Close()\n\trespBody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn log.Fatal(err)\n\t}\n    // Process Server B response\n    // ...\n}\nfunc createRouter() *mux.Router {\n\tr := mux.NewRouter()\n    testPath := r.PathPrefix(\"/test-main\").Subrouter()\n\ttestPath.HandleFunc(\"/file-test\", fileUpload)\n    return r\n}\nfunc main() {\n\t// Create Server and Route Handlers\n\tsrv := &http.Server{\n\t\tHandler:      createRouter(),\n\t\tAddr:         \":8081\",\n\t\tReadTimeout:  30 * time.Second,\n\t\tWriteTimeout: 30 * time.Second,\n\t}\n\t// Start Server\n\tgo func() {\n\t\tlog.Println(\"Starting Server\")\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66591844/how-to-redirect-multipart-post-request-to-a-second-server-in-golang",
    "body": "import (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n\tif err := r.ParseMultipartForm(10 << 20); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfile, handler, err := r.FormFile(\"file-upload\")\n\tif err == http.ErrMissingFile {\n\t\treturn nil\n\t}\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"Uploaded File: %+v\\n\", handler.Filename)\n\tfmt.Printf(\"File Size: %+v\\n\", handler.Size)\n\tfmt.Printf(\"MIME Header: %+v\\n\", handler.Header)\n\tdefer file.Close()\n\t// Create file\n\tdst, err := os.Create(fmt.Sprintf(\"/some-destination-folder/%s\", handler.Filename))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Copy the uploaded file to the created file on the file system.\n\tif _, err := io.Copy(dst, file); err != nil {\n\t\tif err2 := dst.Close(); err2 != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tlog.Fatal(err)\n\t}\n\tdst.Close()\n\treturn nil\n}\nfunc (c *Controller) createRouter() *mux.Router {\n\tr := mux.NewRouter()\n\ttestPath := r.PathPrefix(\"/test-main\").Subrouter()\n\ttestPath.HandleFunc(\"/file-test\", uploadFile)\n\treturn r\n}\nfunc main() {\n\t// Create Server and Route Handlers\n\tsrv := &http.Server{\n\t\tHandler:      createRouter(),\n\t\tAddr:         \":8082\",\n\t\tReadTimeout:  30 * time.Second,\n\t\tWriteTimeout: 30 * time.Second,\n\t}\n\t// Start Server\n\tgo func() {\n\t\tlog.Println(\"Starting Server\")\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/66185206/convert-data-from-database-into-one-map",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\ntype pathVal struct {\n\tpath string\n\tval  interface{}\n}\nfunc encode(dst io.Writer, src []pathVal) error {\n\tenc := xml.NewEncoder(dst)\n\tenc.Indent(\"\", \"\\t\") // for a prettier look\n\ttree := makeTree(src)\n\terr := encodeTree(enc, tree)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn enc.Flush()\n}\nfunc encodeTree(enc *xml.Encoder, tree tree) error {\n\tfor key, node := range tree {\n\t\terr := enc.EncodeToken(xml.StartElement{\n\t\t\tName: xml.Name{\n\t\t\t\tLocal: key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif node.SubTree != nil {\n\t\t\terr = encodeTree(enc, node.SubTree)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\tif node.Value != nil {\n\t\t\terr = encodeValue(enc, node.Value)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\terr = enc.EncodeToken(xml.EndElement{\n\t\t\tName: xml.Name{\n\t\t\t\tLocal: key,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\nfunc encodeValue(enc *xml.Encoder, val interface{}) error {\n\treturn enc.EncodeToken(xml.CharData(fmt.Sprintf(\"%v\", val)))\n}\ntype tree map[string]*treeNode\ntype treeNode struct {\n\tSubTree tree\n\tValue   interface{}\n}\nfunc makeTree(src []pathVal) tree {\n\troot := make(tree)\n\tfor _, elem := range src {\n\t\tcomps := strings.Split(elem.path, \"/\")\n\t\tcomps, last := comps[:len(comps)-1], comps[len(comps)-1]\n\t\tsubTree := root\n\t\tfor _, comp := range comps {\n\t\t\tnode, exists := subTree[comp]\n\t\t\tif !exists {\n\t\t\t\tnewTree := make(tree)\n\t\t\t\tsubTree[comp] = &treeNode{\n\t\t\t\t\tSubTree: newTree,\n\t\t\t\t}\n\t\t\t\tsubTree = newTree\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif node.SubTree == nil {\n\t\t\t\tnode.SubTree = make(tree)\n\t\t\t}\n\t\t\tsubTree = node.SubTree\n\t\t}\n\t\tif node, exists := subTree[last]; exists {\n\t\t\tnode.Value = elem.val\n\t\t} else {\n\t\t\tsubTree[last] = &treeNode{\n\t\t\t\tValue: elem.val,\n\t\t\t}\n\t\t}\n\t}\n\treturn root\n}\n// \"Table 1\"\nvar data1 = []pathVal{\n\tpathVal{\n\t\tpath: \"SalesPlan/SalesPlanData/Year\",\n\t\tval:  2021,\n\t},\n\tpathVal{\n\t\tpath: \"SalesPlan/SalesPlanData/Month\",\n\t\tval:  \"July\",\n\t},\n\tpathVal{\n\t\tpath: \"SalesPlan/SalesPlanData/id\",\n\t\tval:  123,\n\t},\n\tpathVal{\n\t\tpath: \"SalesPlan/SalesPlanSpot/Spots/City\",\n\t\tval:  \"NY\",\n\t},\n}\n// \"Table 2\"\nvar data2 = []pathVal{\n\tpathVal{\n\t\tpath: \"mydoc/Country/City/Street/House\",\n\t\tval:  14,\n\t},\n\tpathVal{\n\t\tpath: \"mydoc/Country/City/Street/House\",\n\t\tval:  15,\n\t},\n\tpathVal{\n\t\tpath: \"mydoc/Country/City/Street\",\n\t\tval:  \"Maddison\",\n\t},\n\tpathVal{\n\t\tpath: \"mydoc/Country/City\",\n\t\tval:  \"NY\",\n\t},\n}\nfunc main() {\n\tout, _ := json.MarshalIndent(makeTree(data1), \"\", \"\\t\")\n\tfmt.Printf(\"%s\\n\", out)\n\tfmt.Println(encode(os.Stdout, data1))\n\tout, _ = json.MarshalIndent(makeTree(data2), \"\", \"\\t\")\n\tfmt.Printf(\"%s\\n\", out)\n\tfmt.Println(encode(os.Stdout, data2))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65637926/how-do-i-concurrently-fetch-from-with-a-rate-limited-api-endpoint",
    "body": " backOffUntil := time.Now()\n backOffMutex := sync.Mutex{}\n go func() {\n            defer wg.Done()\n            for s := range jobC {\n                <-time.After(time.Until(backOffUntil))\n                limiter.Wait(ctx)\n                res, err := doSomeRequest(s)\n                if err != nil {\n                    // Handle error.\n                    log.Println(err)\n                }\n                // Handle rate limit.\n                if res.StatusCode == 429 {\n                    delay, _ := strconv.Atoi(res.Header.Get(\"Retry-After\"))\n                    log.Println(\"rate limit hit, backing off\")\n                    // Back off.\n                    newbackOffUntil := time.Now().Add(time.Second * delay)\n                    backOffMutex.Lock()\n                    if newbackOffUntil.Unix() > backOffUntil.Unix() {\n                        backOffUntil = newbackOffUntil\n                    }\n                    backOffMutex.Unlock()\n                    // Put serial back into job queue.\n                    jobC <- s\n                }\n                resultC <- res\n            }\n        }()"
  },
  {
    "url": "https://stackoverflow.com/questions/65476363/how-to-create-test-code-that-needs-to-use-the-database",
    "body": "package testdb\nimport (\n\t\"io\"\n\t\"os\"\n\t\"testing\"\n)\n// DBName is the MongoDB database name to be used in tests.\nconst DBName = \"blah_blah_test\"\nvar (\n\t// MongoDBURI identifies a MongoDB instance to use by testing suite.\n\tMongoDBURI string\n\t// Enabled is only set to true if the MongoDB URI was made available\n\t// to the test suite. It can be used by individual tests to skip\n\t// execution if an access to a MongoDB instance is required to perform\n\t// the test.\n\tEnabled bool\n)\n// Initialize initializes the package's global state.\n//\n// Initialize is intended to be called once per package being tested -\n// typically from the package's TestMain function.\nfunc Initialize() {\n\tMongoDBURI = os.Getenv(\"MONGODB_URI\")\n\tif MongoDBURI == \"\" {\n\t\tEnabled = false\n\t\tio.WriteString(os.Stderr,\n\t\t\t\"Empty or missing environment variable MONGODB_URI; related tests will be skipped\\n\")\n\t\treturn\n\t}\n\tEnabled = true\n}\n// SkipIfDisabled skips the current test if it appears there is no\n// MongoDB instance to use.\nfunc SkipIfDisabled(t *testing.T) {\n\tif !Enabled {\n\t\tt.Skip(\"Empty or missing MONGODB_URI environment variable; skipped.\")\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65476363/how-to-create-test-code-that-needs-to-use-the-database",
    "body": "package testmain\nimport (\n\t\"flag\"\n\t\"os\"\n\t\"testing\"\n\t\"acme.com/app/lib/logging\"\n)\n// Stress is true if the stress tests are enabled in this run\n// of the test suite.\nvar Stress bool\n// Run initializes the package state and then runs the test suite the\n// way `go test` does by default.\n//\n// Run is expected to be called from TestMain functions of the test suites\n// which make use of the testmain package.\nfunc Run(m *testing.M) {\n\tinitialize()\n\tos.Exit(m.Run())\n}\n// SkipIfNotStress marks the test currently executed by t as skipped\n// unless the current test suite is running with the stress tests enabled.\nfunc SkipIfNotStress(t *testing.T) {\n\tif !Stress {\n\t\tt.Skip(\"Skipped test: not in stress-test mode.\")\n\t}\n}\nfunc initialize() {\n\tif flag.Parsed() {\n\t\treturn\n\t}\n\tvar logFileName string\n\tflag.BoolVar(&Stress, \"stress\", false, \"Run stress tests\")\n\tflag.StringVar(&logFileName, \"log\", \"\", \"Name of the file to redirect log output into\")\n\tflag.Parse()\n\tlogging.SetupEx(logging.Params{\n\t\tPath:      logFileName,\n\t\tOverwrite: true,\n\t\tMode:      logging.DefaultFileMode,\n\t})\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/65361194/how-to-know-proxy-used-by-http-client-in-given-request",
    "body": "type proxySelector string\nfunc (sel *proxySelector) chooseProxy(request *http.Request) (*url.URL, error) {\n    proxies := []string{\"proxy1\", \"proxy2\", \"proxy3\"}\n    proxyToUse := proxies[rand.Intn(len(proxies))]\n    *sel = proxySelector(proxyToUse) // <-----\n    return url.Parse(proxyToUse)\n}\nfunc main() {\n    var proxy proxySelector\n    transport := &http.Transport{Proxy: proxy.chooseProxy}  // <-----\n    client := http.Client{Transport: transport}\n    request, err := http.NewRequest(http.MethodGet, \"https://www.google.com\", nil)\n    checkErr(err)\n    // How to know here which proxy was used? Suppose the same client will perform several requests to different URL's.\n    response, err := client.Do(request)\n    checkErr(err)\n    dump, _ := httputil.DumpRequest(response.Request, false)\n    fmt.Println(dump)\n    fmt.Println(\"Proxy:\", string(proxy))  // <-----\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64897956/is-there-a-go-http-method-that-converts-an-entire-http-response-to-a-byte-slice",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/http/httputil\"\n\t\"os\"\n)\nfunc main() {\n\t// Create a test server\n\tserver := httptest.NewServer(http.HandlerFunc(\n\t\tfunc(w http.ResponseWriter, r *http.Request) {\n\t\t\t// Set Header\n\t\t\tw.Header().Set(\"HEADER_KEY\", \"HEADER_VALUE\")\n\t\t\t// Set Response Body\n\t\t\tfmt.Fprintln(w, \"DUMMY_BODY\")\n\t\t}))\n\tdefer server.Close()\n\t// Request to the test server\n\tresp, err := http.Get(server.URL)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tdefer resp.Body.Close()\n\t// DumpResponse takes two parameters: (resp *http.Response, body bool)\n\t// where resp is the pointer to the response object. And body is boolean\n\t// to dump body or not\n\tdump, err := httputil.DumpResponse(resp, true)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\t// Dump the response ([]byte)\n\tfmt.Printf(\"%q\", dump)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64801244/how-can-golang-gin-get-the-array-parameters-of-get-requests-query-string",
    "body": "var dicts []map[string]string\nkey := \"a\"\nqueryMap := ctx.Request.URL.Query()\n//log.Println(dicts) // dicts[0] except\nfor k, v := range queryMap {\n\tif i:= strings.IndexByte(k, '['); i >= 1 && k[0:i] == key{\n\t\tif j := strings.IndexByte(k[i+1:], ']'); j >= 1{\n\t\t\tindex, _ := strconv.Atoi(k[i+1: i+j+1]) // get the index of slice\n\t\t\tif index > len(dicts){\n\t\t\t\tctx.JSON(200, gin.H{\n\t\t\t\t\t\"403\": \"Check your data\",\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif index == len(dicts){\n\t\t\t\ttmp := make(map[string]string)\n\t\t\t\tdicts = append(dicts, tmp)\n\t\t\t}\n\t\t\tpre :=strings.IndexByte(k[i+j+2:], '[')\n\t\t\tlast:=strings.IndexByte(k[i+j+2:], ']')\n\t\t\tdicts[index][k[i+j+3+pre: i+j+2+last]] = v[0]\n\t\t}\n\t}\n}\nctx.JSON(200, gin.H{\n\t\"a\": dicts,\n})"
  },
  {
    "url": "https://stackoverflow.com/questions/64616266/goroutine-inside-infinite-for-loop-is-it-a-good-practice",
    "body": "package main\nimport (\n  \"log\"\n)\nfunc doStuff(datachan <-chan map[string]string, reschan chan<- int) {\n  for {\n    data, ok := <-datachan\n    if !ok {\n      log.Print(\"Channel closed.\")\n      break\n    }\n    log.Printf(\"Data had %d length: %+v\", len(data), data)\n    reschan<-len(data)\n  }\n  return\n}\nconst workers = 3\nfunc main() {\n  var datachan = make(chan map[string]string)\n  var reschan = make(chan int)\n  var inflight = 0\n  var inputs = []map[string]string {\n    map[string]string{ \"hi\": \"world\" },\n    map[string]string{ \"bye\": \"space\", \"including\": \"moon\" },\n    map[string]string{ \"bye\": \"space\", \"including\": \"moon\" },\n    map[string]string{ },\n    map[string]string{ },\n  }\n  // an inline funciton definition can change inflight within main()'s scope\n  processResults := func (res int) {\n    log.Printf(\"Main function got result %d\", res)\n    inflight--\n  }\n  // start some workers\n  for i := 0; i < workers; i++{\n    go doStuff(datachan, reschan)\n  }\n  for _, data := range inputs {\n      //Select allows reading from reschan if datachan is not available for\n      // writing, thus freeing up a worker to read from datachan next loop\n      written := false\n      for written  != true {\n        select {\n          case res := <-reschan:\n            processResults(res)\n          case datachan <- data:\n            inflight++\n            written = true\n        }\n      }\n  }\n  close(datachan)\n  for inflight > 0 {\n    processResults(<-reschan)\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64616266/goroutine-inside-infinite-for-loop-is-it-a-good-practice",
    "body": "2020/10/31 13:15:08 Data had 1 length: map[hi:world]\n2020/10/31 13:15:08 Main function got result 1\n2020/10/31 13:15:08 Data had 0 length: map[]\n2020/10/31 13:15:08 Main function got result 0\n2020/10/31 13:15:08 Data had 0 length: map[]\n2020/10/31 13:15:08 Channel closed.\n2020/10/31 13:15:08 Main function got result 0\n2020/10/31 13:15:08 Data had 2 length: map[bye:space including:moon]\n2020/10/31 13:15:08 Channel closed.\n2020/10/31 13:15:08 Main function got result 2\n2020/10/31 13:15:08 Data had 2 length: map[bye:space including:moon]\n2020/10/31 13:15:08 Channel closed.\n2020/10/31 13:15:08 Main function got result 2"
  },
  {
    "url": "https://stackoverflow.com/questions/64259397/can-i-read-google-sheet-as-csv-file",
    "body": "// file main.go\npackage main\nimport (\n\t\"encoding/csv\"\n\t\"fmt\"\n\t\"net/http\"\n)\nfunc readCSVFromURL(url string) ([][]string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\treader := csv.NewReader(resp.Body)\n\treader.Comma = ','\n\tdata, err := reader.ReadAll()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn data, nil\n}\nfunc main() {\n\turl := \"https://docs.google.com/spreadsheets/d/e/xxxxxsingle=true&output=csv\"\n\tdata, err := readCSVFromURL(url)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor idx, row := range data {\n\t\t// skip header\n\t\tif idx == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tif idx == 6 {\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(row[2])\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64085188/how-can-i-allow-cors-using-many-ports",
    "body": "router := mux.NewRouter().StrictSlash(true)\nrouter.HandleFunc(\"/all\", All).Methods(\"GET\")\nrouter.HandleFunc(\"/gotoT\", Goto).Methods(\"GET\")\nheaders := handlers.AllowedHeaders([]string{\"X-Requested-With\", \"Content-Type\", \"Authorization\"})\nmethods := handlers.AllowedMethods([]string{\"GET\", \"POST\", \"PUT\", \"HEAD\", \"OPTIONS\"})\norigins := handlers.AllowedOrigins([]string{\"*\"})\ncorsRouter := handlers.CORS(headers, methods, origins)(router)\ngo func() {\n    log.Fatal(http.ListenAndServe(\":1111\", corsRouter))\n}()\ngo func() {\n    log.Fatal(http.ListenAndServe(\":1112\", corsRouter))\n}()\nlog.Fatal(http.ListenAndServe(\":1113\", corsRouter))"
  },
  {
    "url": "https://stackoverflow.com/questions/64058005/how-to-destroy-a-golang-sub-process-on-android",
    "body": "Log.d(\"AppDebug\", p.javaClass.getName())\n// from above log\n// we can know Android use \"java.lang.UNIXProcess\" as implementation of java.lang.Process\n// to make sure the sub process is killed eventually\nif (p.isAlive()) {\n    val klass = p.javaClass\n    if (klass.getName().equals(\"java.lang.UNIXProcess\")) {\n        Log.d(\"AppDebug\", \"force terminate sub process ..\")\n        try {\n            val f = klass.getDeclaredField(\"pid\");\n            f.setAccessible(true);\n            val pid = f.getInt(p);\n            // XXX: buggy here, if getInt throw an error, the filed is exposed!\n            f.setAccessible(false);\n            android.os.Process.killProcess(pid);\n            Log.d(\"AppDebug\", \"force terminating done.\")\n        } catch (e: Exception) {\n            Log.d(\"AppDebug\", \"force terminating failed.\")\n        }\n    } else {\n        Log.d(\"AppDebug\", \"force terminating not supported.\")\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/64039155/docker-doesnt-see-main-go",
    "body": "# golang image where workspace (GOPATH) configured at /go.\nFROM golang:alpine as builder\nADD . /go/src/frontend-microservice\nWORKDIR /go/src/frontend-microservice\nRUN go mod download\nCOPY . ./\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix nocgo -o /frontend-microservice cmd/app/main.go\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\n\nCOPY --from=builder /frontend-microservice ./frontend-microservice\nRUN mkdir ./configs\nCOPY ./configs/config.json ./configs\n\nEXPOSE 8080\n\nENTRYPOINT [\"./frontend-microservice\"]"
  },
  {
    "url": "https://stackoverflow.com/questions/63899338/dockerize-react-app-and-go-api-proxy-problem",
    "body": "server {\n  listen 80;\n  location /api {\n    proxy_pass         http://backend/;\n    proxy_redirect     off;\n    proxy_set_header   Host $host;\n    proxy_set_header   X-Real-IP $remote_addr;\n    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Forwarded-Host $server_name;\n  }\n  location / {\n    proxy_pass         http://frontend;\n    proxy_redirect     off;\n    proxy_set_header   Host $host;\n    proxy_set_header   X-Real-IP $remote_addr;\n    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header   X-Forwarded-Host $server_name;\n  }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63523648/client-request-handler-example-from-effective-go-leads-to-deadlock",
    "body": "func handle(queue chan int) {\n\tfor r := range queue {\n\t\tfmt.Println(\"r = \", r)\n\t}\n}\nfunc serve(clientRequests chan int, quit chan bool) {\n\t// Start handlers\n\tfor i := 0; i < 10; i++ {\n\t\tgo handle(clientRequests)\n\t}\n\t<-quit // Wait to be told to exit.\n}\nfunc populateRequests(serveChannel chan int) {\n\tfor i := 0; i < 10; i++ {\n\t\tserveChannel <- i\n\t}\n}\nfunc quitAfter(quit chan bool, duration time.Duration) {\n\ttime.Sleep(duration)\n\tquit <- true\n}\nfunc main() {\n\tvar serveChannel = make(chan int)\n\tvar quit = make(chan bool)\n\tgo populateRequests(serveChannel)\n\tgo quitAfter(quit, 3*time.Second)\n\tserve(serveChannel, quit)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63095341/merge-structs-with-some-overlapping-fields",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n)\n// Shared field\ntype common struct {\n\tID   string `json:id`\n\tDate string `json:date`\n}\ntype merged struct {\n\t// Common field is embedded\n\tcommon\n\tName string `json:name`\n\tDesc string `json:desc`\n}\nfunc main() {\n\tbuf := bytes.Buffer{}\n\tbuf.WriteString(\"{ \\\"id\\\": \\\"1\\\",\t\\\"date\\\": \\\"27/07/2020\\\", \\\"desc\\\": \\\"the decription...\\\"\t}\")\n\tmerged := &merged{}\n\terr := json.Unmarshal(buf.Bytes(), merged)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Look how you can easily access field from\n\t// embedded struct\n\tfmt.Println(\"ID:\", merged.ID)\n\tfmt.Println(\"Date:\", merged.Date)\n\tfmt.Println(\"Name:\", merged.Name)\n\tfmt.Println(\"Desc:\", merged.Desc)\n\t// Output:\n\t// ID: 1\n\t// Date: 27/07/2020\n\t// Name:\n\t// Desc: the decription...\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/63095341/merge-structs-with-some-overlapping-fields",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"github.com/imdario/mergo\"\n)\ntype tOne struct {\n\tID   string\n\tDate string\n\tDesc string\n}\n// Map build a map object from the struct tOne\nfunc (t1 tOne) Map() map[string]interface{} {\n\tm := make(map[string]interface{}, 3)\n\tif err := mergo.Map(&m, t1); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn m\n}\ntype tTwo struct {\n\tID   string\n\tDate string\n\tName string\n}\n// Map build a map object from the struct tTwo\nfunc (t2 tTwo) Map() map[string]interface{} {\n\tm := make(map[string]interface{}, 3)\n\tif err := mergo.Map(&m, t2); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn m\n}\nfunc main() {\n\tdst := tOne{\n\t\tID:   \"destination\",\n\t\tDate: \"26/07/2020\",\n\t\tDesc: \"destination object\",\n\t}.Map()\n\tsrc := tTwo{\n\t\tID:   \"src\",\n\t\tDate: \"26/07/1010\",\n\t\tName: \"source name\",\n\t}.Map()\n\tif err := mergo.Merge(&dst, src); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"Destination:\\n%+v\", dst)\n\t// Output:\n\t// Destination:\n\t// map[date:26/07/2020 desc:destination object iD:destination name:object name\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61677396/pushing-to-a-remote-with-basic-authentication",
    "body": "package git\nimport (\n\t\"io/ioutil\"\n\t\"path/filepath\"\n\t\"time\"\n\t\"github.com/go-git/go-git/v5\"\n\t\"github.com/go-git/go-git/v5/config\"\n\t\"github.com/go-git/go-git/v5/plumbing/object\"\n\t\"github.com/go-git/go-git/v5/plumbing/transport/http\"\n)\nconst gitDataDirectory = \"./data/\"\nconst defaultRemoteName = \"origin\"\nvar auth = &http.BasicAuth{\n\tUsername: \"<username>\",\n\tPassword: \"<git_basic_auth_token>\",\n}\nfunc createCommitOptions() *git.CommitOptions {\n\treturn &git.CommitOptions{\n\t\tAuthor: &object.Signature{\n\t\t\tName:  \"Rick Astley\",\n\t\t\tEmail: \"never.gonna.give.you.up@localhost\",\n\t\t\tWhen:  time.Now(),\n\t\t},\n\t}\n}\n// Commit creates a commit in the current repository\nfunc Commit() {\n\terr := initializeGitRepository()\n\tif err != nil {\n\t\t// logging: The folder could not be converted into a Git repository.\n\t\treturn\n\t}\n\t// Open after initialization\n\trepo, _ := git.PlainOpen(gitDataDirectory)\n\tw, _ := repo.Worktree()\n\tstatus, _ := w.Status()\n\tif status.IsClean() {\n\t\treturn\n\t}\n\t// Committing new changes\n\tw.Add(\"<your_file>.txt\")\n\tw.Commit(\"test\", createCommitOptions())\n\t// Pushing to remote\n\terr = repo.Push(&git.PushOptions{\n\t\tRemoteName: defaultRemoteName,\n\t\tAuth:       auth,\n\t})\n}\nfunc initializeGitRepository() error {\n\t_, err := git.PlainOpen(gitDataDirectory)\n\tif err == nil {\n\t\treturn nil\n\t}\n\t// The Git repository does not exist yet and will be created.\n\trepo, err := git.PlainInit(gitDataDirectory, false)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Writing default .gitignore with \"media/\" as first line\n\tfilename := filepath.Join(gitDataDirectory, \".gitignore\")\n\terr = ioutil.WriteFile(filename, []byte(\"media/\"), 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tw, _ := repo.Worktree()\n\tw.Add(\".gitignore\")\n\tw.Commit(\"Initial commit\", createCommitOptions())\n\treturn initializeRemote()\n}\nfunc initializeRemote() error {\n\trepo, err := git.PlainOpen(gitDataDirectory)\n\tif err != nil {\n\t\treturn err\n\t}\n\t_, err = repo.Remote(defaultRemoteName)\n\tif err == nil {\n\t\t// Repo already exists, skipping\n\t\treturn nil\n\t}\n\tw, err := repo.Worktree()\n\tif err != nil {\n\t\treturn err\n\t}\n\trefspec := config.RefSpec(\"+refs/heads/*:refs/remotes/origin/*\")\n\t// Creating default remote\n\t_, err = repo.CreateRemote(&config.RemoteConfig{\n\t\tName:  defaultRemoteName,\n\t\tURLs:  []string{\"https://github.com/<user>/<repo>.git\"},\n\t\tFetch: []config.RefSpec{refspec},\n\t})\n\tif err != nil {\n\t\t// TODO\n\t}\n\t// Pulling from remote\n\tw.Pull(&git.PullOptions{\n\t\tRemoteName: defaultRemoteName,\n\t\tAuth:       auth,\n\t})\n\treturn err\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61633062/serf-client-cannot-connect-to-rpc-client-running-locally",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"github.com/hashicorp/serf/serf\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\nfunc main() {\n\tc := make(chan os.Signal)\n\tsignal.Notify(c, os.Interrupt, syscall.SIGTERM)\n\tgo func() {\n\t\t<-c\n\t\tfmt.Println(\"\\r- Ctrl+C pressed\")\n\t\tos.Exit(0)\n\t}()\n\tconf := serf.DefaultConfig()\n\tconf.NodeName = \"node-a\"\n\tconf.MemberlistConfig.BindAddr = \"127.0.0.1\"\n\tconf.MemberlistConfig.BindPort = 6666\n\tconf.MemberlistConfig.AdvertiseAddr = \"127.0.0.1\"\n\tconf.MemberlistConfig.AdvertisePort = 6666\n\tserf.Create(conf)\n\tfor {\n\t\tfmt.Println(\"- Sleeping\")\n\t\ttime.Sleep(10 * time.Second)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61601436/please-help-me-figure-out-how-to-parse-this-json-file",
    "body": "package main\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strings\"\n)\ntype people struct {\n\tPeople map[string]Person `json:\"people\"`\n}\ntype Person struct {\n\tName     string   `json:\"name\"`\n\tID       int      `json:\"id,omitempty\"`\n\tSex      string   `json:\"s,omitempty\"`\n\tAge      int      `json:\"age,omitempty\"`\n\tChildren []Person `json:\"Childs,omitempty\"`\n}\nfunc main() {\n    file, err := ioutil.ReadFile(\"./people.json\")\n    if err != nil {\n        log.Fatalln(\"error:\", err)\n    }\n\tvar data people\n\tif err := json.NewDecoder(strings.NewReader(string(file))).Decode(&data); err == nil {\n\t\tfmt.Println(data)\n\t}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61572797/how-to-pass-array-of-structures-which-contain-basic-one-polymorphism-in-golan",
    "body": "type Pathable interface {\n\tGetPath() (path string)\n}\ntype PathableImpl struct {\n\tpath string\n}\nfunc (p *PathableImpl) GetPath() string {\n\treturn p.path\n}\ntype File struct {\n\tname string\n\tPathableImpl\n}\nfunc printPaths(entities []Pathable) {\n    for _, entity := range entities {\n        fmt.Println(entity.GetPath())\n    }\n}\nfunc main() {\n\tprintPaths(\n        []Pathable{\n            &PathableImpl{path:\"/pathableImpl\"},\n            &File{name: \"file\", PathableImpl: PathableImpl{path:\"/file\"}}\n        }\n    )\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61554805/channel-communication-behaviour-with-select-statement-in-goroutines",
    "body": "package main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc fibonacci(c, quit chan int) {\n\tx, y := 0, 1\n\tfor {\n\t\tfmt.Println(\"-----------------------------------------\")\n\t\tfmt.Println(\"current x:\", x)\n\t\tselect {\n\t\t//Send a value into a channel using the c <- x syntax, block until receiver is ready\n\t\tcase c <- x:\n\t\t\t//When receiver gets x value, this code will executes\n            //Delay, avoid mutilple sending at the same time\n\t\t\ttime.Sleep(5 * time.Millisecond)\n\t\t\t//Increase\n\t\t\tx, y = y, x+y\n\t\t\tfmt.Println(\"increased x to\", x)\n\t\tcase <-quit:\n\t\t\tfmt.Println(\"quit\")\n\t\t\treturn\n\t\t}\n\t}\n}\nfunc main() {\n\tc := make(chan int)\n\tquit := make(chan int)\n\tgo func() {\n\t\t//The <-c syntax receives a value from the channel, block until sender is ready\n\t\tfor i := 0; i < 10; i++ {\n\t\t\tfmt.Println(\"received x:\", <-c)\n\t\t}\n\t\tquit <- 0\n\t}()\n\tfibonacci(c, quit)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/61554805/channel-communication-behaviour-with-select-statement-in-goroutines",
    "body": "current x: 0\nreceived x: 0\nincreased x to 1\n-----------------------------------------\ncurrent x: 1\nreceived x: 1\nincreased x to 1\n-----------------------------------------\ncurrent x: 1\nreceived x: 1\nincreased x to 2\n-----------------------------------------\ncurrent x: 2\nreceived x: 2\nincreased x to 3\n-----------------------------------------\ncurrent x: 3\nreceived x: 3\nincreased x to 5\n-----------------------------------------\ncurrent x: 5\nreceived x: 5\nincreased x to 8\n-----------------------------------------\ncurrent x: 8\nreceived x: 8\nincreased x to 13\n-----------------------------------------\ncurrent x: 13\nreceived x: 13\nincreased x to 21\n-----------------------------------------\ncurrent x: 21\nreceived x: 21\nincreased x to 34\n-----------------------------------------\ncurrent x: 34\nreceived x: 34\nincreased x to 55\n-----------------------------------------\ncurrent x: 55\nquit"
  },
  {
    "url": "https://stackoverflow.com/questions/61263917/insert-links-between-comment-tags-in-readme-md-in-go",
    "body": "func GenerateGodocLinkInReadme(amqpLinks string, httpLinks string) {\n\tpath := `README.md`\n\tformattedContent, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tamqpRegex := regexp.MustCompile(`<!--AMQP-API-start-->([\\s\\S]*?)<!--AMQP-API-end-->`)\n\thttpRegex := regexp.MustCompile(`<!--HTTP-API-start-->([\\s\\S]*?)<!--HTTP-API-end-->`)\n\tprevAmqpLinks := string(amqpRegex.FindSubmatch((formattedContent))[1]) // Second index of returns links between tags\n\tprevHttpLinks := string(httpRegex.FindSubmatch((formattedContent))[1]) // Second index of returns links between tags\n\thttpAPI := prevHttpLinks + httpLinks + \"\\n\"\n\tAmqpAPI := prevAmqpLinks + amqpLinks + \"\\n\"\n\tformattedContent = amqpRegex.ReplaceAll(formattedContent, []byte(`<!--AMQP-API-start-->` + AmqpAPI + `<!--AMQP-API-end-->`))\n\tformattedContent = httpRegex.ReplaceAll(formattedContent, []byte(`<!--HTTP-API-start-->` + httpAPI + `<!--HTTP-API-end-->`))\n\texitOnFail(ioutil.WriteFile(path, formattedContent, 0644))\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60552935/prometheus-client-cleaning-up-counter-prematurely",
    "body": "func init() {\n\tgo func() {\n\t\thttp.Handle(\"/metrics\", promhttp.Handler())\n\t\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n\t}()\n}\ntype myStruct struct {\n    errorCount prometheus.Counter\n}\nfunc NewMyStruct() *myStruct {\n\treturn &myStruct {\n\t\terrorCount: prometheus.NewCounter(prometheus.CounterOpts {\n\t\t    Name: \"my_counter\",\n\t\t    Help: \"sample prometheus counter\",\n\t\t}),\n\t}\n}\nfunc (s *myStruct) run() {\n    s.errorCount.Add(1)\n}\nfunc main() {\n\ts := NewMyStruct()\n\tgo func() {\n\t for {\n\t\t s.run()\n\t\t time.Sleep(time.Second)\n\t }\n\t}()\n    // ... OR select{}\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60267433/golang-ticker-concurrency-issue",
    "body": "// [Timers](timers) are for when you want to do\n// something once in the future - _tickers_ are for when\n// you want to do something repeatedly at regular\n// intervals. Here's an example of a ticker that ticks\n// periodically until we stop it.\npackage main\nimport (\n\t\"fmt\"\n\t\"time\"\n)\nfunc main() {\n\n        part1 := SimulationParticipant{}\n \tpart1.id = \"part1\"\n        part2 := SimulationParticipant{}\n        part2.id = \"part2\"\n        partSlice := make([]*SimulationParticipant,0)\n        partSlice = append(partSlice, &part1, &part2)\n\n        for _ , p := range partSlice {\n             p.StartTransactionsGatewayTicker()\n        }\n\t// Tickers can be stopped like timers. Once a ticker\n\t// is stopped it won't receive any more values on its\n\t// channel. We'll stop ours after 16000ms.\n\ttime.Sleep(16000 * time.Millisecond)\n\tpart1.ticker.Stop()\n\tpart2.ticker.Stop()\n\tfmt.Println(\"Ticker stopped\")\n}\ntype SimulationParticipant struct {\n     id string\n     ticker *time.Ticker\n}\nfunc (participant *SimulationParticipant) StartTransactionsGatewayTicker() {\nticker := time.NewTicker(1 * time.Second)\nparticipant.ticker = ticker\ngo func() {\n    for {\n        select {\n        case t := <-ticker.C:\n            fmt.Println(\"Tick at\", t,participant.id)\n        }\n    }\n}()\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/60267433/golang-ticker-concurrency-issue",
    "body": "Tick at 2009-11-10 23:00:01 +0000 UTC m=+1.000000001 part2\nTick at 2009-11-10 23:00:01 +0000 UTC m=+1.000000001 part1\nTick at 2009-11-10 23:00:02 +0000 UTC m=+2.000000001 part1\nTick at 2009-11-10 23:00:02 +0000 UTC m=+2.000000001 part2\nTick at 2009-11-10 23:00:03 +0000 UTC m=+3.000000001 part2\nTick at 2009-11-10 23:00:03 +0000 UTC m=+3.000000001 part1\nTick at 2009-11-10 23:00:04 +0000 UTC m=+4.000000001 part1\nTick at 2009-11-10 23:00:04 +0000 UTC m=+4.000000001 part2\nTick at 2009-11-10 23:00:05 +0000 UTC m=+5.000000001 part2\nTick at 2009-11-10 23:00:05 +0000 UTC m=+5.000000001 part1\nTick at 2009-11-10 23:00:06 +0000 UTC m=+6.000000001 part1\nTick at 2009-11-10 23:00:06 +0000 UTC m=+6.000000001 part2\nTick at 2009-11-10 23:00:07 +0000 UTC m=+7.000000001 part2\nTick at 2009-11-10 23:00:07 +0000 UTC m=+7.000000001 part1\nTick at 2009-11-10 23:00:08 +0000 UTC m=+8.000000001 part1\nTick at 2009-11-10 23:00:08 +0000 UTC m=+8.000000001 part2\nTick at 2009-11-10 23:00:09 +0000 UTC m=+9.000000001 part2\nTick at 2009-11-10 23:00:09 +0000 UTC m=+9.000000001 part1\nTick at 2009-11-10 23:00:10 +0000 UTC m=+10.000000001 part1\nTick at 2009-11-10 23:00:10 +0000 UTC m=+10.000000001 part2\nTick at 2009-11-10 23:00:11 +0000 UTC m=+11.000000001 part2\nTick at 2009-11-10 23:00:11 +0000 UTC m=+11.000000001 part1\nTick at 2009-11-10 23:00:12 +0000 UTC m=+12.000000001 part1\nTick at 2009-11-10 23:00:12 +0000 UTC m=+12.000000001 part2\nTick at 2009-11-10 23:00:13 +0000 UTC m=+13.000000001 part2\nTick at 2009-11-10 23:00:13 +0000 UTC m=+13.000000001 part1\nTick at 2009-11-10 23:00:14 +0000 UTC m=+14.000000001 part1\nTick at 2009-11-10 23:00:14 +0000 UTC m=+14.000000001 part2\nTick at 2009-11-10 23:00:15 +0000 UTC m=+15.000000001 part2\nTick at 2009-11-10 23:00:15 +0000 UTC m=+15.000000001 part1\nTicker stopped"
  },
  {
    "url": "https://stackoverflow.com/questions/59894378/encrypt-a-message-with-a-public-key-ber-decode-error",
    "body": "#include <string>\n#include <iomanip>\n#include <iostream>\n#include <exception>\n#include <fstream>\n#include <cryptopp/queue.h>\nusing CryptoPP::ByteQueue;\n#include <cryptopp/filters.h>\nusing CryptoPP::Redirector;\n#include <cryptopp/files.h>\nusing CryptoPP::FileSource;\nusing CryptoPP::FileSink;\n#include <cryptopp/cryptlib.h>\nusing CryptoPP::PrivateKey;\nusing CryptoPP::PublicKey;\nusing CryptoPP::BufferedTransformation;\n#include <cryptopp/sha.h>\n#include <cryptopp/rsa.h>\n#include <cryptopp/asn.h>\nusing CryptoPP::RSA;\n#include <cryptopp/base64.h>\nusing CryptoPP::Base64Encoder;\nusing CryptoPP::Base64Decoder;\n#include <cryptopp/osrng.h>\nusing CryptoPP::AutoSeededRandomPool;\nusing namespace std;\nint main() {\n    ByteQueue queue;\n    string RSA_PUBLIC_KEY =\"-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAm9GgFeJ3DhazIHCVHtNaVnu38KBdxViOswyXcJEwQ8yHlQOL6e5He1dxx5uqvnKLR7+gAMzZBXEQlOCrSYi6nREXGxE4WFTjd+PqLh5bA9DIO8vbsPIsG66zYmFdztmFGn2dl0EUvUiIjGUqwkJAE5P8ebjsNOdomX1763p8k50AHhIzaUbD+IWAVDEzbew7efOPt5Wj6C5a1kwkv4bX+viqoC7mFNjQziI+Sg/8yjnT++Zv5fo+JWE6pyXwZCabwgsBYq9Cv2iMC4ZXAFVoGLYtixok/7rMY6NIe+MIUafrEVbgG8K0YT3U1Jn1knqYV++qtnaqqmcvtoGC1SE6s8pwiHGRgh+ZG3EwuDZVqJadBdl/CGDz8WnfPs8sSANT1kCJYq3ogp12Fx0axENFvklCM5jLcm1v6/kyqPYk0fVArH6RT7e5QZCWZXAoxMz1bZe97CZ9+PQGbGLyYrQOCqBeWkVUEI/NeBoQdifrgok/Ku43LMUrxbTByBSEoXVn4d+3jgN0BS1CmxQslJmlkUPv87OLjzzggQW8lRs3owKQF9TRs9fYljuJSt3f2osYaPhedYx9XdkJNhgbH+AF47kocpxg6olpOtRaM5cW/0zWSGtVHXfblDO+XFNzddSKLwFyL2Jx8WIfZ6tXa/MP/aLOyzKX/WADqAEqlHbs3SMCAwEAAQ==-----END PUBLIC KEY-----\";\n    static string HEADER = \"-----BEGIN PUBLIC KEY-----\";\n    static string FOOTER = \"-----END PUBLIC KEY-----\";\n    size_t pos1 = RSA_PUBLIC_KEY.find(HEADER);\n    if(pos1 == string::npos) throw runtime_error(\"PEM header not found\");\n    size_t pos2 = RSA_PUBLIC_KEY.find(FOOTER, pos1+1);\n    if(pos2 == string::npos) throw runtime_error(\"PEM footer not found\");\n    // Start position and length\n    pos1 = pos1 + HEADER.length();\n    pos2 = pos2 - pos1;\n    string keystr = RSA_PUBLIC_KEY.substr(pos1, pos2);\n    CryptoPP::StringSource ss{keystr.c_str(), true};\n    Base64Decoder decoder;\n    decoder.Attach(new Redirector(queue));\n    ss.TransferTo(decoder);\n    decoder.MessageEnd();\n    cout << keystr << endl;\n    try {\n        RSA::PublicKey public_key;\n        if(queue.IsEmpty()) {\n            cerr << \"The queue is empty...\";\n        }\n        public_key.BERDecode(queue);\n        AutoSeededRandomPool prng;\n        bool valid = public_key.Validate(prng, 3);\n        if(!valid) cerr << \"RSA public key is not valid\" << endl;\n        cout << \"N:\" << public_key.GetModulus() << endl;\n        cout << \"E:\" << public_key.GetPublicExponent() << endl;\n    } catch (exception& e) {\n        printf( \"Caught exception: %s\\n\", e.what() );\n        exit (1);\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59859398/range-over-array-of-channel",
    "body": "package main\nimport \"fmt\"\nfunc main() {\n    channelList := make([]chan int, 0, 2)\n    FChannel := make(chan int, 5)\n    for i := 1; i <= 5; i++ {\n        FChannel <- i // contain values from 1 to 5\n    }\n    close(FChannel)\n    channelList = append(channelList, FChannel)\n    SChannel := make(chan int, 5)\n    for j := 6; j <= 10; j++ {\n        SChannel <- j // contain values from 6 to 10\n    }\n    close(SChannel)\n    channelList = append(channelList, SChannel)\n    for _, c := range channelList {\n        for v := range c {\n            fmt.Println(v)\n        }\n    }\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59615418/how-to-parse-xml-in-slice-format",
    "body": "package main\nimport (\n\t\"bytes\"\n\t\"encoding/xml\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"strings\"\n)\nconst data = `<?xml version=\"1.0\" encoding=\"ASCII\"?>\n<QuestionFormAnswers xmlns=\"http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2005-10-01/QuestionFormAnswers.xsd\">\n  <Answer>\n    <QuestionIdentifier>annotatedResult.boundingBoxes</QuestionIdentifier>\n    <FreeText>[{\"height\":641,\"label\":\"F-22 Raptor\",\"left\":82,\"top\":97,\"width\":1088}]</FreeText>\n  </Answer>\n  <Answer>\n    <QuestionIdentifier>annotatedResult.inputImageProperties.height</QuestionIdentifier>\n    <FreeText>839</FreeText>\n  </Answer>\n  <Answer>\n    <QuestionIdentifier>annotatedResult.inputImageProperties.width</QuestionIdentifier>\n    <FreeText>1260</FreeText>\n  </Answer>\n</QuestionFormAnswers>`\nfunc main() {\n\ttype DimensionInfo struct {\n\t\tFreeText []string `xml:\"Answer>FreeText\"`\n\t}\n\tvar dec = xml.NewDecoder(strings.NewReader(data))\n\tdec.CharsetReader = func(charset string, input io.Reader) (io.Reader, error) {\n\t\tswitch strings.ToLower(charset) {\n\t\tcase \"ascii\", \"utf-8\":\n\t\t\treturn input, nil\n\t\tdefault:\n\t\t\treturn nil, fmt.Errorf(\"cannot handle XML encoding: %s\", charset)\n\t\t}\n\t}\n\tvar t DimensionInfo\n\terr := dec.Decode(&t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(t.FreeText)\n}"
  },
  {
    "url": "https://stackoverflow.com/questions/59596870/implementing-error-handling-with-a-custom-error-struct-and-struct-validation",
    "body": "func returnError(w http.ResponseWriter, err error, code int) {\n\tvar errorData Error\n\toutput, err := json.Marshal(&errorData)\n\tif err != nil {\n\t\tw.Write([]byte(\"Cannot serialize error\"))\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(code)\n\tw.Write(output)\n}\nfunc parseRequest(r *http.Request) (Trade, error) {\n\treturn Trade{}, nil\n}\nfunc saveTrade(t Trade) (TradeSubmitted, error) {\n\treturn TradeSubmitted{}, nil\n}\nfunc createTrade(w http.ResponseWriter, r *http.Request) {\n\ttrade, err := parseRequest(r)\n\tif err != nil {\n\t\treturnError(w, err, 400)\n\t\treturn\n\t}\n\ttradeSubmitted, err := saveTrade(trade)\n\tif err != nil {\n\t\treturnError(w, err, 500)\n\t\treturn\n\t}\n\toutput, err := json.Marshal(&tradeSubmitted)\n\tif err != nil {\n\t\terr = fmt.Errorf(\"Cannot serialize Trade with id: xxx: %w\", err)\n\t\treturnError(w, err, 500)\n\t\treturn\n\t}\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(http.StatusOK)\n\tw.Write(output)\n}"
  }
]